 Installed Monads ─ v0.2.3
  Updating `~/.julia/environments/v1.4/Project.toml`
  [4a446bee] + Monads v0.2.3
  Updating `~/.julia/environments/v1.4/Manifest.toml`
  [4a446bee] + Monads v0.2.3
   Testing Monads
Path `/home/pkgeval/.julia/packages/Monads/SR8Eg` exists and looks like the correct package. Using existing path.
  Updating `/tmp/jl_Dl1h90/Project.toml`
  [4a446bee] + Monads v0.2.3 [`~/.julia/packages/Monads/SR8Eg`]
  Updating `/tmp/jl_Dl1h90/Manifest.toml`
  [4a446bee] ~ Monads v0.2.3 ⇒ v0.2.3 [`~/.julia/packages/Monads/SR8Eg`]
Running sandbox
Status `/tmp/jl_Dl1h90/Project.toml`
  [4a446bee] Monads v0.2.3 [`~/.julia/packages/Monads/SR8Eg`]
ERROR: LoadError: syntax: incomplete: "module" at /home/pkgeval/.julia/packages/Monads/SR8Eg/test/runtests.jl:1 requires end
Stacktrace:
 [1] top-level scope at /home/pkgeval/.julia/packages/Monads/SR8Eg/test/runtests.jl:1
 [2] include(::String) at ./client.jl:439
 [3] top-level scope at none:6
in expression starting at /home/pkgeval/.julia/packages/Monads/SR8Eg/test/runtests.jl:1
err = ProcessFailedException(Base.Process[Process(`/opt/julia/bin/julia -Cnative -J/opt/julia/lib/julia/sys.so -g1 --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --inline=yes --startup-file=no --track-allocation=none --eval 'append!(empty!(Base.DEPOT_PATH), ["/home/pkgeval/.julia", "/opt/julia/local/share/julia", "/opt/julia/share/julia", "/usr/local/share/julia"])
append!(empty!(Base.DL_LOAD_PATH), String[])

cd("/home/pkgeval/.julia/packages/Monads/SR8Eg/test")
append!(empty!(ARGS), String[])
include("/home/pkgeval/.julia/packages/Monads/SR8Eg/test/runtests.jl")
'`, ProcessExited(1))])
ERROR: Package Monads errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/Types.jl:54
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/Operations.jl:1475
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:313
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:300
 [5] #test#66 at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:294 [inlined]
 [6] test at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:294 [inlined]
 [7] #test#65 at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:293 [inlined]
 [8] test at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:293 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:292
 [10] test(::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:292
 [11] top-level scope at none:12
