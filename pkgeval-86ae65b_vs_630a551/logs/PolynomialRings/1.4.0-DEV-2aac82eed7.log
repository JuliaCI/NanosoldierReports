Julia Version 1.4.0-DEV.630
Commit 2aac82eed7 (2019-12-17 21:57 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia

 Resolving package versions...
 Installed InPlace ───────────── v0.2.0
 Installed RecipesBase ───────── v0.7.0
 Installed ProgressMeter ─────── v0.9.0
 Installed OrderedCollections ── v1.1.0
 Installed PolynomialRings ───── v0.4.0
 Installed IterTools ─────────── v1.3.0
 Installed DocStringExtensions ─ v0.8.1
 Installed JSON ──────────────── v0.21.0
 Installed Parsers ───────────── v0.3.10
 Installed Polynomials ───────── v0.6.0
 Installed DataStructures ────── v0.17.6
 Installed Documenter ────────── v0.24.3
 Installed Combinatorics ─────── v0.7.0
  Updating `~/.julia/environments/v1.4/Project.toml`
  [c8ed2632] + PolynomialRings v0.4.0
  Updating `~/.julia/environments/v1.4/Manifest.toml`
  [861a8166] + Combinatorics v0.7.0
  [864edb3b] + DataStructures v0.17.6
  [ffbed154] + DocStringExtensions v0.8.1
  [e30172f5] + Documenter v0.24.3
  [12a7aed9] + InPlace v0.2.0
  [c8e1da08] + IterTools v1.3.0
  [682c06a0] + JSON v0.21.0
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.10
  [c8ed2632] + PolynomialRings v0.4.0
  [f27b6e38] + Polynomials v0.6.0
  [92933f4c] + ProgressMeter v0.9.0
  [3cdcf5f2] + RecipesBase v0.7.0
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
   Testing PolynomialRings
Path `/home/pkgeval/.julia/packages/PolynomialRings/9DkFe` exists and looks like the correct package. Using existing path.
  Updating `/tmp/jl_v1wceE/Project.toml`
  [c8ed2632] + PolynomialRings v0.4.0 [`~/.julia/packages/PolynomialRings/9DkFe`]
  Updating `/tmp/jl_v1wceE/Manifest.toml`
  [c8ed2632] ~ PolynomialRings v0.4.0 ⇒ v0.4.0 [`~/.julia/packages/PolynomialRings/9DkFe`]
Running sandbox
Status `/tmp/jl_v1wceE/Project.toml`
  [861a8166] Combinatorics v0.7.0
  [864edb3b] DataStructures v0.17.6
  [e30172f5] Documenter v0.24.3
  [12a7aed9] InPlace v0.2.0
  [c8e1da08] IterTools v1.3.0
  [bac558e1] OrderedCollections v1.1.0
  [c8ed2632] PolynomialRings v0.4.0 [`~/.julia/packages/PolynomialRings/9DkFe`]
  [92933f4c] ProgressMeter v0.9.0
  [37e2e46d] LinearAlgebra 
  [2f01184e] SparseArrays 
  [8dfed614] Test 
WARNING: Method definition keytype(AbstractArray{T, N} where N where T) in module Base at abstractarray.jl:124 overwritten in module Modules at /home/pkgeval/.julia/packages/PolynomialRings/9DkFe/src/PolynomialRings/Modules.jl:24.
  ** incremental compilation may be fatally broken for this module **

sparse monomials: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/9DkFe/test/PolynomialRings.jl:136
  Test threw exception
  Expression: euler(g) == 5g
  UndefRefError: access to undefined reference
  Stacktrace:
   [1] getindex at ./array.jl:786 [inlined]
   [2] *(::ℚ[c[]], ::ℚ[c[]]) at /home/pkgeval/.julia/packages/PolynomialRings/9DkFe/src/PolynomialRings/Operators.jl:188
   [3] *(::ℚ[c[]][x,y], ::ℚ[c[]][x,y]) at /home/pkgeval/.julia/packages/PolynomialRings/9DkFe/src/PolynomialRings/Operators.jl:206
   [4] *(::Int64, ::ℚ[c[]][x,y]) at /home/pkgeval/.julia/packages/PolynomialRings/9DkFe/src/PolynomialRings/Conversions.jl:229
   [5] _broadcast_getindex_evalf at ./broadcast.jl:630 [inlined]
   [6] _broadcast_getindex at ./broadcast.jl:603 [inlined]
   [7] getindex at ./broadcast.jl:563 [inlined]
   [8] macro expansion at ./broadcast.jl:909 [inlined]
   [9] macro expansion at ./simdloop.jl:77 [inlined]
   [10] copyto! at ./broadcast.jl:908 [inlined]
   [11] copyto! at ./broadcast.jl:863 [inlined]
   [12] copy at ./broadcast.jl:839 [inlined]
   [13] materialize at ./broadcast.jl:819 [inlined]
   [14] broadcast_preserving_zero_d at ./broadcast.jl:808 [inlined]
   [15] *(::Int64, ::Array{ℚ[c[]][x,y],1}) at ./arraymath.jl:52
   [16] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/9DkFe/test/PolynomialRings.jl:136
   [17] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1116
   [18] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/9DkFe/test/PolynomialRings.jl:128
   [19] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1116
   [20] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/9DkFe/test/PolynomialRings.jl:12
  
Gröbner: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/9DkFe/test/Groebner.jl:39
  Got exception outside of a @test
  MethodError: Cannot `convert` an object of type 
    PolynomialRings.Modules.TransformedModuleElement{Polynomial{TupleMonomial{2,Int16{},PolynomialRings.MonomialOrderings.MonomialOrder{degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y)}}},BigInt{}},SparseArrays.SparseVector{Any,Int64{}},BigInt{}} to an object of type 
    PolynomialRings.Modules.TransformedModuleElement{Polynomial{TupleMonomial{2,Int16{},PolynomialRings.MonomialOrderings.MonomialOrder{degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y)}}},BigInt{}},SparseArrays.SparseVector{ℤ[x,y],Int64{}},BigInt{}}
  Closest candidates are:
    convert(::Type{C}, !Matched::P) where {C, P<:(<undisplayable> where #s23<:PolynomialRings.Monomials.AbstractMonomial{Order} where Order)} at /home/pkgeval/.julia/packages/PolynomialRings/9DkFe/src/PolynomialRings/Conversions.jl:212
    convert(::Type{T}, !Matched::T) where T at essentials.jl:170
    PolynomialRings.Modules.TransformedModuleElement{ℤ[x,y],SparseArrays.SparseVector{ℤ[x,y],Int64},BigInt}(::Any, !Matched::Any, !Matched::Any) where {P, M, I} at /home/pkgeval/.julia/packages/PolynomialRings/9DkFe/src/PolynomialRings/Modules.jl:159
  Stacktrace:
   [1] convert(::Type{Tuple{PolynomialRings.Modules.TransformedModuleElement{ℤ[x,y],SparseArrays.SparseVector{ℤ[x,y],Int64},BigInt}}}, ::Tuple{PolynomialRings.Modules.TransformedModuleElement{ℤ[x,y],SparseArrays.SparseVector{Any,Int64},BigInt}}) at ./essentials.jl:309 (repeats 2 times)
   [2] push!(::Array{Tuple{PolynomialRings.Modules.Signature{TupleMonomial{2,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y)}}},Int64},PolynomialRings.Modules.TransformedModuleElement{ℤ[x,y],SparseArrays.SparseVector{ℤ[x,y],Int64},BigInt}},1}, ::Tuple{PolynomialRings.Modules.Signature{TupleMonomial{2,Int16,PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y)}}},Int64},PolynomialRings.Modules.TransformedModuleElement{ℤ[x,y],SparseArrays.SparseVector{Any,Int64},BigInt}}) at ./array.jl:911
   [3] gwv(::PolynomialRings.MonomialOrderings.MonomialOrder{:degrevlex,PolynomialRings.NamingSchemes.Named{(:x, :y)}}, ::Array{SparseArrays.SparseVector{ℤ[x,y],Int64},1}; with_transformation::Bool) at /home/pkgeval/.julia/packages/PolynomialRings/9DkFe/src/PolynomialRings/GroebnerGWV.jl:224
   [4] #gröbner_transformation#35 at /home/pkgeval/.julia/packages/PolynomialRings/9DkFe/src/PolynomialRings/GroebnerGWV.jl:278 [inlined]
   [5] gröbner_transformation at /home/pkgeval/.julia/packages/PolynomialRings/9DkFe/src/PolynomialRings/GroebnerGWV.jl:274 [inlined]
   [6] #gröbner_transformation#8 at /home/pkgeval/.julia/packages/PolynomialRings/9DkFe/src/PolynomialRings/Backends.jl:32 [inlined]
   [7] gröbner_transformation(::PolynomialRings.Backends.Gröbner.NamedBackend{:gwv}, ::Array{SparseArrays.SparseVector{ℤ[x,y],Int64},1}) at /home/pkgeval/.julia/packages/PolynomialRings/9DkFe/src/PolynomialRings/Backends.jl:32
   [8] gröbner_transformation(::Array{SparseArrays.SparseVector{ℤ[x,y],Int64},1}; kwds::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/pkgeval/.julia/packages/PolynomialRings/9DkFe/src/PolynomialRings/Backends.jl:49
   [9] gröbner_transformation(::Array{SparseArrays.SparseVector{ℤ[x,y],Int64},1}) at /home/pkgeval/.julia/packages/PolynomialRings/9DkFe/src/PolynomialRings/Backends.jl:44
   [10] (::var"#tests#93")() at /home/pkgeval/.julia/packages/PolynomialRings/9DkFe/test/Groebner.jl:70
   [11] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/9DkFe/test/Groebner.jl:81
   [12] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1116
   [13] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/9DkFe/test/Groebner.jl:40
   [14] include(::String) at ./client.jl:439
   [15] macro expansion at /home/pkgeval/.julia/packages/PolynomialRings/9DkFe/test/runtests.jl:8 [inlined]
   [16] macro expansion at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1116 [inlined]
   [17] top-level scope at /home/pkgeval/.julia/packages/PolynomialRings/9DkFe/test/runtests.jl:4
   [18] include(::String) at ./client.jl:439
   [19] top-level scope at none:6
   [20] eval(::Module, ::Any) at ./boot.jl:331
   [21] exec_options(::Base.JLOptions) at ./client.jl:264
   [22] _start() at ./client.jl:484
  
Test Summary:                 | Pass  Error  Total
PolynomialRings               |  324      2    326
  PolynomialRings             |  131      1    132
    Arithmetic                |   27            27
    Hashing                   |    3             3
    Extension of scalars      |    9             9
    conversions between rings |   10            10
    substitution              |    9             9
    zero comparison in Base   |    3             3
    degrees                   |    5             5
    differentiation           |    6             6
    sparse monomials          |    6      1      7
    constructors              |   10            10
    base extension            |    9             9
    promotions                |   28            28
    Sparse result types       |    6             6
  Expansions                  |   82            82
  Display                     |   22            22
  Broadcasting                |   26            26
  Reductions                  |   18            18
  Gröbner                     |    6      1      7
  Syzygy                      |    4             4
  CommutativeAlgebras         |   35            35
ERROR: LoadError: Some tests did not pass: 324 passed, 0 failed, 2 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/PolynomialRings/9DkFe/test/runtests.jl:3
err = ProcessFailedException(Base.Process[Process(`/opt/julia/bin/julia -Cnative -J/opt/julia/lib/julia/sys.so -g1 --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --inline=yes --startup-file=no --track-allocation=none --eval 'append!(empty!(Base.DEPOT_PATH), ["/home/pkgeval/.julia", "/opt/julia/local/share/julia", "/opt/julia/share/julia", "/usr/local/share/julia"])
append!(empty!(Base.DL_LOAD_PATH), String[])

cd("/home/pkgeval/.julia/packages/PolynomialRings/9DkFe/test")
append!(empty!(ARGS), String[])
include("/home/pkgeval/.julia/packages/PolynomialRings/9DkFe/test/runtests.jl")
'`, ProcessExited(1))])
ERROR: Package PolynomialRings errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/Types.jl:54
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/Operations.jl:1475
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:313
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:300
 [5] #test#66 at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:294 [inlined]
 [6] test at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:294 [inlined]
 [7] #test#65 at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:293 [inlined]
 [8] test at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:293 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:292
 [10] test(::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:292
 [11] top-level scope at none:12
