Julia Version 1.4.0-DEV.661
Commit 50bc3ea150 (2019-12-23 18:40 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia

 Resolving package versions...
 Installed Tables ────────────────────── v0.2.11
 Installed SortingAlgorithms ─────────── v0.3.1
 Installed DataValueInterfaces ───────── v1.0.0
 Installed LearnBase ─────────────────── v0.2.2
 Installed KCenters ──────────────────── v0.1.8
 Installed Parsers ───────────────────── v0.3.10
 Installed TableTraits ───────────────── v1.0.0
 Installed OrderedCollections ────────── v1.1.0
 Installed DataAPI ───────────────────── v1.1.0
 Installed MappedArrays ──────────────── v0.2.2
 Installed InvertedIndices ───────────── v1.0.0
 Installed StatsBase ─────────────────── v0.32.0
 Installed MLDataUtils ───────────────── v0.5.0
 Installed MLLabelUtils ──────────────── v0.5.1
 Installed SimilaritySearch ──────────── v0.3.17
 Installed DataFrames ────────────────── v0.20.0
 Installed JSON ──────────────────────── v0.21.0
 Installed PooledArrays ──────────────── v0.5.3
 Installed CategoricalArrays ─────────── v0.7.5
 Installed Reexport ──────────────────── v0.2.0
 Installed Compat ────────────────────── v3.0.0
 Installed IteratorInterfaceExtensions ─ v1.0.0
 Installed MLDataPattern ─────────────── v0.5.0
 Installed Missings ──────────────────── v0.4.3
 Installed DataStructures ────────────── v0.17.6
  Updating `~/.julia/environments/v1.4/Project.toml`
  [5d8de97f] + KCenters v0.1.8
  Updating `~/.julia/environments/v1.4/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.5
  [34da2185] + Compat v3.0.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.0
  [864edb3b] + DataStructures v0.17.6
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.1.8
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.10
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.17
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v0.2.11
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
   Testing KCenters
Path `/home/pkgeval/.julia/packages/KCenters/ME2xN` exists and looks like the correct package. Using existing path.
  Updating `/tmp/jl_WAyp9O/Project.toml`
  [5d8de97f] + KCenters v0.1.8 [`~/.julia/packages/KCenters/ME2xN`]
  Updating `/tmp/jl_WAyp9O/Manifest.toml`
  [5d8de97f] ~ KCenters v0.1.8 ⇒ v0.1.8 [`~/.julia/packages/KCenters/ME2xN`]
Running sandbox
Status `/tmp/jl_WAyp9O/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.1.8 [`~/.julia/packages/KCenters/ME2xN`]
  [cc2ba9b6] MLDataUtils v0.5.0
  [053f045d] SimilaritySearch v0.3.17
  [2913bbd2] StatsBase v0.32.0
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [37e2e46d] LinearAlgebra 
  [9a3f8284] Random 
  [2f01184e] SparseArrays 
  [8dfed614] Test 
Test Summary: | Pass  Total
Scores        |    9      9
[ Info: 147.31
[ Info: 74.87
[ Info: 38.66999999999998
[ Info: 24.03
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 313.64000338064864
[ Info: 547.7999992523
[ Info: 146.21999839687118
[ Info: 75.80000116067464
Test Summary:        |
Clustering with dnet | No tests
inertia(cfft.distances) = 19.01306810910969
inertia(cdnet.distances) = 30.026909833524975
inertia(crand.distances) = 22.42374229579148
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4375,"f1":null,"seconds":4.120171070098877e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":6.1484375,"distances_sum":1200.7150838289176}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.66796875,"f1":0.7910880785880794,"seconds":5.4426491260528564e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.09375,"distances_sum":1859.7961408226256}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8518148518148526,"seconds":5.584210157394409e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.2109375,"distances_sum":2207.7468770805185}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7529296875,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7529296875,"f1":0.8518148518148526,"seconds":5.584210157394409e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.2109375,"distances_sum":2207.7468770805185}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9204212454212459,"seconds":6.545335054397583e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.5859375,"distances_sum":2705.616416051882}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9662431318681323,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.8515625,"distances_sum":3102.597404105884}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9541151556776561,"seconds":6.2193721532821655e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.828125,"distances_sum":2995.7175811155703}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9662431318681323,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.8515625,"distances_sum":3102.597404105884}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.977512591575092,"seconds":5.76116144657135e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.921875,"distances_sum":3170.0786608489557}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.977512591575092,"seconds":5.76116144657135e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.921875,"distances_sum":3170.0786608489557}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.977512591575092,"seconds":5.76116144657135e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.921875,"distances_sum":3170.0786608489557}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7353515625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7353515625,"f1":0.8379457348207358,"seconds":5.431473255157471e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.40625,"distances_sum":2038.6781795936322}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.447265625, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.447265625,"f1":null,"seconds":4.004687070846558e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":6.375,"distances_sum":1123.5234055932651}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7353515625,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7353515625,"f1":0.8379457348207358,"seconds":5.431473255157471e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.40625,"distances_sum":2038.6781795936322}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9569768772893779,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.875,"distances_sum":2905.9931047739933}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9417124542124548,"seconds":5.768612027168274e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.796875,"distances_sum":2762.2964856206545}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9089228479853488,"seconds":5.749985575675964e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.6953125,"distances_sum":2483.4550491796385}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9569768772893779,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.875,"distances_sum":2905.9931047739933}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.966019917582418,"seconds":6.051734089851379e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.9140625,"distances_sum":2968.6316930394496}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9755859375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9755859375,"f1":0.9869047619047622,"seconds":6.5695494413375854e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.9921875,"distances_sum":3145.693943696603}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9650698260073265,"seconds":6.096437573432922e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.921875,"distances_sum":2955.051794734387}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9755859375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9755859375,"f1":0.9869047619047622,"seconds":6.5695494413375854e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.9921875,"distances_sum":3145.693943696603}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9755859375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9755859375,"f1":0.9869047619047622,"seconds":6.5695494413375854e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.9921875,"distances_sum":3145.693943696603}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.744140625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.744140625,"f1":0.8446896853146861,"seconds":5.457550287246704e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.546875,"distances_sum":2106.1086342570825}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1845703125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1845703125,"f1":null,"seconds":3.380700945854187e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":4.90625,"distances_sum":532.3124814186612}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.744140625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.744140625,"f1":0.8446896853146861,"seconds":5.457550287246704e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.546875,"distances_sum":2106.1086342570825}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8968011155511162,"seconds":5.723908543586731e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.6171875,"distances_sum":2522.404816996996}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9261165917415921,"seconds":5.66430389881134e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.640625,"distances_sum":2791.9981566042575}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.906158945221446,"seconds":5.593523383140564e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.65625,"distances_sum":2548.6785620201244}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8740234375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8740234375,"f1":0.9261165917415921,"seconds":5.66430389881134e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.640625,"distances_sum":2791.9981566042575}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9522951007326012,"seconds":6.159767508506775e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.828125,"distances_sum":2981.1400373918814}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9495249542124548,"seconds":5.7872384786605835e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.8203125,"distances_sum":2932.827940921245}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9614983974358977,"seconds":6.163492798805237e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.8828125,"distances_sum":3004.0442176761235}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9658711080586082,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.890625,"distances_sum":3061.337991780293}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9658711080586082,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.890625,"distances_sum":3061.337991780293}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9658711080586082,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.890625,"distances_sum":3061.337991780293}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.8553972069597079,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.6875,"distances_sum":2130.2991089000566}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.236328125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.236328125,"f1":null,"seconds":3.4067779779434204e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":6.2265625,"distances_sum":606.4802955477393}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.443359375, conf: {"ssize":2,"bsize":2}, perf: {"precision":1.0,"recall":0.443359375,"f1":0.5946782384282384,"seconds":3.85381281375885e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":6.625,"distances_sum":1122.2737178218606}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.693359375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.693359375,"f1":0.8089389776889784,"seconds":4.84660267829895e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":7.96875,"distances_sum":1871.149489664536}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.759765625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.759765625,"f1":0.8553972069597079,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.6875,"distances_sum":2130.2991089000566}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.84375,"f1":0.9098786630036637,"seconds":5.591660737991333e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.7890625,"distances_sum":2482.2561790285827}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.84375,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.84375,"f1":0.9098786630036637,"seconds":5.591660737991333e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.7890625,"distances_sum":2482.2561790285827}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9651842948717955,"seconds":6.28642737865448e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.96875,"distances_sum":2881.0183151641786}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9750228937728939,"seconds":6.079673767089844e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.9453125,"distances_sum":2989.3796448217154}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":10,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9422561813186819,"seconds":5.966052412986755e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.875,"distances_sum":2735.138322135459}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9657566391941397,"seconds":6.161630153656006e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.9453125,"distances_sum":2911.979114776315}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9376233141858147,"seconds":5.7891011238098145e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.90625,"distances_sum":2662.0266397838336}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9750228937728939,"seconds":6.079673767089844e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.9453125,"distances_sum":2989.3796448217154}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9750228937728939,"seconds":6.079673767089844e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.9453125,"distances_sum":2989.3796448217154}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.55078125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.55078125,"f1":0.6968612984237988,"seconds":4.6156346797943115e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.4765625,"distances_sum":1461.7010050953056}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7275390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7275390625,"f1":0.8334425990676,"seconds":5.200505256652832e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.4609375,"distances_sum":2107.4687515851897}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7275390625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7275390625,"f1":0.8334425990676,"seconds":5.200505256652832e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.4609375,"distances_sum":2107.4687515851897}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7294921875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7294921875,"f1":0.835242882117883,"seconds":5.31412661075592e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.3828125,"distances_sum":2074.959750968866}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9595467032967038,"seconds":6.170943379402161e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.875,"distances_sum":2979.0401105867686}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9351622335997343,"seconds":5.97536563873291e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.8046875,"distances_sum":2757.4122609525857}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9595467032967038,"seconds":6.170943379402161e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.875,"distances_sum":2979.0401105867686}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9650698260073263,"seconds":6.211921572685242e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.90625,"distances_sum":2988.1354032297354}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9686069139194143,"seconds":6.254762411117554e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.921875,"distances_sum":3023.925626025615}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9686069139194143,"seconds":6.254762411117554e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.921875,"distances_sum":3023.925626025615}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9686069139194143,"seconds":6.254762411117554e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.921875,"distances_sum":3023.925626025615}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.671875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.671875,"f1":0.7935116966366974,"seconds":4.731118679046631e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":7.78125,"distances_sum":1846.7673802223655}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.671875,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.671875,"f1":0.7935116966366974,"seconds":4.731118679046631e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":7.78125,"distances_sum":1846.7673802223655}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.787109375, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.787109375,"f1":0.8734692390942399,"seconds":4.997476935386658e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.484375,"distances_sum":2286.496909408636}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9244562728937737,"seconds":5.451962351799011e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.75,"distances_sum":2641.072349209256}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.93851304945055,"seconds":5.561858415603638e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.8046875,"distances_sum":2710.693164561039}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8916015625,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8916015625,"f1":0.93851304945055,"seconds":5.561858415603638e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.8046875,"distances_sum":2710.693164561039}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9719322344322348,"seconds":5.908310413360596e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.9453125,"distances_sum":3016.870118646143}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9719322344322348,"seconds":5.908310413360596e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.9453125,"distances_sum":3016.870118646143}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9719322344322348,"seconds":5.908310413360596e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.9453125,"distances_sum":3016.870118646143}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5068359375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5068359375,"f1":null,"seconds":3.851950168609619e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":6.640625,"distances_sum":1211.5025133581191}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.134765625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.134765625,"f1":null,"seconds":3.0044466257095337e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":4.109375,"distances_sum":365.5643757392078}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5068359375,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5068359375,"f1":null,"seconds":3.851950168609619e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":6.640625,"distances_sum":1211.5025133581191}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6005859375, conf: {"ssize":1,"bsize":4}, perf: {"precision":0.9805989583333333,"recall":0.6005859375,"f1":0.7315470120157626,"seconds":4.595145583152771e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":7.2578125,"distances_sum":1498.7711276091607}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6005859375,"state":{"ssize":1,"bsize":4},"perf":{"precision":0.9805989583333333,"recall":0.6005859375,"f1":0.7315470120157626,"seconds":4.595145583152771e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":7.2578125,"distances_sum":1498.7711276091607}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6171875, conf: {"ssize":5,"bsize":4}, perf: {"precision":0.9869791666666665,"recall":0.6171875,"f1":0.7470326548451552,"seconds":4.7031790018081665e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":7.34375,"distances_sum":1558.3878571799924}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6171875,"state":{"ssize":5,"bsize":4},"perf":{"precision":0.9869791666666665,"recall":0.6171875,"f1":0.7470326548451552,"seconds":4.7031790018081665e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":7.34375,"distances_sum":1558.3878571799924}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.6171875,"state":{"ssize":5,"bsize":4},"perf":{"precision":0.9869791666666665,"recall":0.6171875,"f1":0.7470326548451552,"seconds":4.7031790018081665e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":7.34375,"distances_sum":1558.3878571799924}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6494140625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6494140625,"f1":0.7763647810522819,"seconds":4.719942808151245e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.6796875,"distances_sum":1459.5928069274346}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6494140625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6494140625,"f1":0.7763647810522819,"seconds":4.719942808151245e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.6796875,"distances_sum":1459.5928069274346}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9592490842490847,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.828125,"distances_sum":2466.8804665910498}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9328067765567774,"seconds":5.466863512992859e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.7734375,"distances_sum":2258.297446424076}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9592490842490847,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.828125,"distances_sum":2466.8804665910498}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9644574175824181,"seconds":6.210058927536011e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.90625,"distances_sum":2488.515299957876}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9612065018315022,"seconds":5.3551048040390015e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.796875,"distances_sum":2488.798025002242}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9595638736263742,"seconds":6.137415766716003e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.84375,"distances_sum":2448.598850293313}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9644574175824181,"seconds":6.210058927536011e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.90625,"distances_sum":2488.515299957876}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9644574175824181,"seconds":6.210058927536011e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.90625,"distances_sum":2488.515299957876}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.638671875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.638671875,"f1":0.7646795912420921,"seconds":4.174187779426575e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.265625,"distances_sum":1517.5702353979689}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7470703125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7470703125,"f1":0.8459285506160514,"seconds":4.734843969345093e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.0390625,"distances_sum":1875.5447630314736}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.537109375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.537109375,"f1":null,"seconds":3.7588179111480713e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":6.546875,"distances_sum":1205.7745274851534}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7470703125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7470703125,"f1":0.8459285506160514,"seconds":4.734843969345093e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.0390625,"distances_sum":1875.5447630314736}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8427734375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8427734375,"f1":0.9083505036630046,"seconds":5.194917321205139e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.4921875,"distances_sum":2170.711720854063}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9028476731601738,"seconds":5.288049578666687e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.4375,"distances_sum":2161.2173502017467}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8427734375,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.8427734375,"f1":0.9083505036630046,"seconds":5.194917321205139e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.4921875,"distances_sum":2170.711720854063}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9507898351648356,"seconds":5.584210157394409e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.6640625,"distances_sum":2510.438914004926}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9612923534798535,"seconds":5.425885319709778e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.7890625,"distances_sum":2569.817743563714}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.946285485347986,"seconds":5.554407835006714e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.7109375,"distances_sum":2476.4953192137273}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9690304487179491,"seconds":5.50784170627594e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.828125,"distances_sum":2622.0502231719406}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9479255119880126,"seconds":5.505979061126709e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.671875,"distances_sum":2509.6883693420577}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9513450091575096,"seconds":6.0927122831344604e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.6953125,"distances_sum":2523.6318959600276}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9558264652014657,"seconds":5.587935447692871e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.796875,"distances_sum":2539.488149539801}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9690304487179491,"seconds":5.50784170627594e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.828125,"distances_sum":2622.0502231719406}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9690304487179491,"seconds":5.50784170627594e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.828125,"distances_sum":2622.0502231719406}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.728515625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.728515625,"f1":0.832037060162061,"seconds":5.034729838371277e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.1796875,"distances_sum":1824.0171714862724}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6533203125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6533203125,"f1":0.7765083874458881,"seconds":5.09992241859436e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":7.671875,"distances_sum":1543.2983258450674}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7109375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7109375,"f1":0.8193913725163733,"seconds":4.773959517478943e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.1796875,"distances_sum":1734.7446585939877}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.728515625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.728515625,"f1":0.832037060162061,"seconds":5.034729838371277e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.1796875,"distances_sum":1824.0171714862724}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.806640625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.806640625,"f1":0.8813752220002228,"seconds":6.1336904764175415e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.6875,"distances_sum":2045.8965775652446}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9518861346986349,"seconds":5.4854899644851685e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.859375,"distances_sum":2439.4932752091418}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9320970695970701,"seconds":5.381181836128235e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.8359375,"distances_sum":2300.7785463382543}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9551968864468868,"seconds":6.157904863357544e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.875,"distances_sum":2455.5941939161503}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.734375, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.734375,"f1":0.8366836288711299,"seconds":4.881992936134338e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.4453125,"distances_sum":1764.2110989120233}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9551968864468868,"seconds":6.157904863357544e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.875,"distances_sum":2455.5941939161503}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":9,"bsize":12}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9688072344322348,"seconds":5.863606929779053e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.921875,"distances_sum":2543.0741148555303}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9729739010989015,"seconds":5.6587159633636475e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.9296875,"distances_sum":2572.578104154057}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9616071428571434,"seconds":5.733221769332886e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.921875,"distances_sum":2506.780244389947}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9640109890109894,"seconds":5.7034194469451904e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.8984375,"distances_sum":2533.6876638935705}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9729739010989015,"seconds":5.6587159633636475e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.9296875,"distances_sum":2572.578104154057}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9729739010989015,"seconds":5.6587159633636475e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.9296875,"distances_sum":2572.578104154057}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3994140625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3994140625,"f1":null,"seconds":3.987923264503479e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.40625,"distances_sum":881.7280331044619}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3720703125, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.3720703125,"f1":null,"seconds":3.913417458534241e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.25,"distances_sum":848.0594842256805}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3994140625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3994140625,"f1":null,"seconds":3.987923264503479e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.40625,"distances_sum":881.7280331044619}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.58203125, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.58203125,"f1":0.7190417221667228,"seconds":4.468485713005066e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.3203125,"distances_sum":1327.7055042378076}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.58203125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.58203125,"f1":0.7215336746586755,"seconds":4.341825842857361e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.265625,"distances_sum":1318.2870631568812}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.712890625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.712890625,"f1":0.8215383574758585,"seconds":4.759058356285095e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.9765625,"distances_sum":1762.4192003589287}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6796875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6796875,"f1":0.7995233932733941,"seconds":4.455447196960449e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.84375,"distances_sum":1658.6787601253104}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6708984375,"f1":0.7904990842490849,"seconds":4.624947905540466e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.71875,"distances_sum":1628.0494517604764}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.712890625,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.712890625,"f1":0.8215383574758585,"seconds":4.759058356285095e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.9765625,"distances_sum":1762.4192003589287}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9504750457875464,"seconds":5.543231964111328e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.765625,"distances_sum":2524.157052697804}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9554601648351653,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.7890625,"distances_sum":2565.1678240548827}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9280963827838837,"seconds":5.45009970664978e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.5546875,"distances_sum":2372.3609749651287}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9408971237096243,"seconds":5.448237061500549e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.671875,"distances_sum":2476.248311458371}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9554601648351653,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.7890625,"distances_sum":2565.1678240548827}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9208984375,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9554601648351653,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.7890625,"distances_sum":2565.1678240548827}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5517578125, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5517578125,"f1":0.697874174436675,"seconds":4.131346940994263e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":6.96875,"distances_sum":1263.2795634720028}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.546875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.546875,"f1":null,"seconds":3.885477781295776e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":6.8203125,"distances_sum":1240.0712500054017}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5517578125,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.5517578125,"f1":0.697874174436675,"seconds":4.131346940994263e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":6.96875,"distances_sum":1263.2795634720028}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9308124167499173,"seconds":5.3979456424713135e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.6171875,"distances_sum":2382.3601464516328}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9326923076923082,"seconds":5.405396223068237e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.5859375,"distances_sum":2409.959867861771}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.884765625,"state":{"ssize":9,"bsize":7},"perf":{"precision":1.0,"recall":0.884765625,"f1":0.9326923076923082,"seconds":5.405396223068237e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.5859375,"distances_sum":2409.959867861771}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":13,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9644001831501834,"seconds":5.900859832763672e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.8125,"distances_sum":2647.873449025291}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.960531135531136,"seconds":5.77978789806366e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.828125,"distances_sum":2582.805901780673}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":13,"bsize":10},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9644001831501834,"seconds":5.900859832763672e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.8125,"distances_sum":2647.873449025291}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.935546875,"state":{"ssize":13,"bsize":10},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9644001831501834,"seconds":5.900859832763672e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.8125,"distances_sum":2647.873449025291}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6259765625, conf: {"ssize":1,"bsize":4}, perf: {"precision":0.9805245535714284,"recall":0.6259765625,"f1":0.7531923805361311,"seconds":4.349276423454285e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.3203125,"distances_sum":1578.7231457412086}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":0.9782738095238094,"recall":0.74609375,"f1":null,"seconds":4.693865776062012e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.8046875,"distances_sum":1908.3170478759753}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.74609375,"state":{"ssize":1,"bsize":5},"perf":{"precision":0.9782738095238094,"recall":0.74609375,"f1":null,"seconds":4.693865776062012e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.8046875,"distances_sum":1908.3170478759753}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":0.9883742559523809,"recall":0.8994140625,"f1":0.9383427770146525,"seconds":6.042420864105225e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.7578125,"distances_sum":2562.5165929523437}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":1,"bsize":9}, perf: {"precision":0.9883277529761905,"recall":0.9189453125,"f1":0.9497918097527475,"seconds":5.457550287246704e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8046875,"distances_sum":2653.8135032191094}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":1,"bsize":9},"perf":{"precision":0.9883277529761905,"recall":0.9189453125,"f1":0.9497918097527475,"seconds":5.457550287246704e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8046875,"distances_sum":2653.8135032191094}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":5,"bsize":13}, perf: {"precision":0.9849516369047618,"recall":0.9501953125,"f1":0.9658754006410256,"seconds":5.893409252166748e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.953125,"distances_sum":2748.8926713749324}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":5,"bsize":10}, perf: {"precision":0.9898158482142858,"recall":0.935546875,"f1":0.9595331101190481,"seconds":5.556270480155945e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.90625,"distances_sum":2677.7662844963443}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":12}, perf: {"precision":0.9829799107142858,"recall":0.94140625,"f1":0.9597484546703299,"seconds":5.662441253662109e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.9375,"distances_sum":2721.5182404566985}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":5,"bsize":13},"perf":{"precision":0.9849516369047618,"recall":0.9501953125,"f1":0.9658754006410256,"seconds":5.893409252166748e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.953125,"distances_sum":2748.8926713749324}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":5,"bsize":13},"perf":{"precision":0.9849516369047618,"recall":0.9501953125,"f1":0.9658754006410256,"seconds":5.893409252166748e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.953125,"distances_sum":2748.8926713749324}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.701171875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.701171875,"f1":0.8123595154845162,"seconds":4.431232810020447e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":7.21875,"distances_sum":1699.3481892046661}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2314453125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2314453125,"f1":null,"seconds":3.1813979148864746e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":6.2421875,"distances_sum":588.1114525134672}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6064453125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.6064453125,"f1":null,"seconds":4.041939973831177e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":7.1015625,"distances_sum":1413.992915208337}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.701171875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.701171875,"f1":0.8123595154845162,"seconds":4.431232810020447e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":7.21875,"distances_sum":1699.3481892046661}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9296391108891114,"seconds":5.54695725440979e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.59375,"distances_sum":2491.120145515675}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.8629240551115559,"seconds":4.852190613746643e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":7.8046875,"distances_sum":1981.6191523196915}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.87890625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.87890625,"f1":0.9296391108891114,"seconds":5.54695725440979e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.59375,"distances_sum":2491.120145515675}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9400011446886452,"seconds":5.301088094711304e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.640625,"distances_sum":2558.303215189501}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8935546875,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.8935546875,"f1":0.9400011446886452,"seconds":5.301088094711304e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.640625,"distances_sum":2558.303215189501}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8935546875,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.8935546875,"f1":0.9400011446886452,"seconds":5.301088094711304e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.640625,"distances_sum":2558.303215189501}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.203125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.203125,"f1":null,"seconds":2.954155206680298e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":5.5703125,"distances_sum":594.9001027774252}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5546875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5546875,"f1":null,"seconds":4.0940940380096436e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":6.625,"distances_sum":1313.2765859203996}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5546875,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5546875,"f1":null,"seconds":4.0940940380096436e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":6.625,"distances_sum":1313.2765859203996}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9231570512820517,"seconds":5.260109901428223e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.453125,"distances_sum":2611.4333650822628}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8662109375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8662109375,"f1":0.9231570512820517,"seconds":5.260109901428223e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.453125,"distances_sum":2611.4333650822628}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9494136072261076,"seconds":5.392357707023621e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.703125,"distances_sum":2785.7495794982487}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9111328125,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9111328125,"f1":0.9494136072261076,"seconds":5.392357707023621e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.703125,"distances_sum":2785.7495794982487}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9111328125,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9111328125,"f1":0.9494136072261076,"seconds":5.392357707023621e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.703125,"distances_sum":2785.7495794982487}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4111328125, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.4111328125,"f1":null,"seconds":3.855675458908081e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":6.5859375,"distances_sum":989.8117953899726}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5693359375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5693359375,"f1":0.7088741119991124,"seconds":4.032626748085022e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":6.953125,"distances_sum":1431.230265617654}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5693359375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5693359375,"f1":0.7088741119991124,"seconds":4.032626748085022e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":6.953125,"distances_sum":1431.230265617654}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8496997793872803,"seconds":4.773959517478943e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":7.8515625,"distances_sum":2067.1367668658386}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.607421875, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.607421875,"f1":0.7372951701076706,"seconds":4.0959566831588745e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":7.171875,"distances_sum":1541.4678693355168}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9245337995338001,"seconds":5.433335900306702e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.6640625,"distances_sum":2677.3651684079955}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8979598526473533,"seconds":5.239620804786682e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.40625,"distances_sum":2415.2699418468014}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.87109375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.87109375,"f1":0.9245337995338001,"seconds":5.433335900306702e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.6640625,"distances_sum":2677.3651684079955}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9421791749916755,"seconds":5.576759576797485e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.765625,"distances_sum":2801.846692903214}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9500629578754586,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.7734375,"distances_sum":2903.61379408426}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9539091117216123,"seconds":5.515292286872864e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.8515625,"distances_sum":2883.3061684439263}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9539091117216123,"seconds":5.515292286872864e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.8515625,"distances_sum":2883.3061684439263}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9189453125,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9539091117216123,"seconds":5.515292286872864e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.8515625,"distances_sum":2883.3061684439263}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7880859375,"f1":0.8753954378954387,"seconds":7.413700222969055e-5,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":7.8828125,"distances_sum":2223.259109638476}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7001953125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.7001953125,"f1":0.8118485680985689,"seconds":4.421919584274292e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":7.2421875,"distances_sum":1838.062598929736}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7880859375,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7880859375,"f1":0.8753954378954387,"seconds":7.413700222969055e-5,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":7.8828125,"distances_sum":2223.259109638476}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9432005494505499,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.8046875,"distances_sum":2769.164468771143}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9242876914751923,"seconds":5.243346095085144e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.6953125,"distances_sum":2607.4461946051015}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8994140625,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.8994140625,"f1":0.9432005494505499,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.8046875,"distances_sum":2769.164468771143}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9453957500832506,"seconds":6.11133873462677e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.7265625,"distances_sum":2811.9985433594234}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9553628663003668,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.84375,"distances_sum":2846.3311962319062}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9490384615384622,"seconds":5.330890417098999e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.7421875,"distances_sum":2846.011870974602}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9553628663003668,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.84375,"distances_sum":2846.3311962319062}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.921875,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9553628663003668,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.84375,"distances_sum":2846.3311962319062}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3837890625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3837890625,"f1":null,"seconds":3.4812837839126587e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":5.953125,"distances_sum":1013.6343792291763}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8621482683982692,"seconds":5.315989255905151e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.265625,"distances_sum":2180.411211991568}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7705078125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7705078125,"f1":0.8621482683982692,"seconds":5.315989255905151e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.265625,"distances_sum":2180.411211991568}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8173828125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8173828125,"f1":0.8919471153846161,"seconds":5.41098415851593e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.453125,"distances_sum":2409.6563966207987}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8173828125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8173828125,"f1":0.8919471153846161,"seconds":5.41098415851593e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.453125,"distances_sum":2409.6563966207987}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9430720321345325,"seconds":5.487352609634399e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.734375,"distances_sum":2820.5441069859057}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9325263278388285,"seconds":5.738809704780579e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8203125,"distances_sum":2688.8151087188353}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8388671875,"f1":0.9039642649017655,"seconds":5.388632416725159e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.4765625,"distances_sum":2507.4009937199726}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9229140651015656,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.6484375,"distances_sum":2680.3078753435707}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9436126373626379,"seconds":5.459412932395935e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.71875,"distances_sum":2830.0773355906035}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9013671875,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9430720321345325,"seconds":5.487352609634399e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.734375,"distances_sum":2820.5441069859057}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9013671875,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9430720321345325,"seconds":5.487352609634399e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.734375,"distances_sum":2820.5441069859057}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2060546875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2060546875,"f1":null,"seconds":3.332272171974182e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":6.5859375,"distances_sum":560.6282502571767}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5966796875, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5966796875,"f1":0.7286591880341886,"seconds":4.259869456291199e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":7.125,"distances_sum":1402.3188396237538}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5966796875,"state":{"ssize":4,"bsize":3},"perf":{"precision":1.0,"recall":0.5966796875,"f1":0.7286591880341886,"seconds":4.259869456291199e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":7.125,"distances_sum":1402.3188396237538}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.9288804945054949,"seconds":5.755573511123657e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.796875,"distances_sum":2554.00404768458}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8957074175824183,"seconds":5.243346095085144e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.3828125,"distances_sum":2272.086807436726}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.875,"f1":0.9288804945054949,"seconds":5.755573511123657e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.796875,"distances_sum":2554.00404768458}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9333447802197807,"seconds":5.345791578292847e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.828125,"distances_sum":2566.8672673531155}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9477793040293044,"seconds":5.465000867843628e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.8203125,"distances_sum":2710.3275227825284}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.947344322344323,"seconds":5.420297384262085e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.8046875,"distances_sum":2726.088926786288}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9410828754578762,"seconds":5.4389238357543945e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.7109375,"distances_sum":2693.147026807346}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.965127060439561,"seconds":5.628913640975952e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.9140625,"distances_sum":2865.255473510594}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9622424450549457,"seconds":5.5693089962005615e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.890625,"distances_sum":2819.529315458497}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9375,"f1":0.965127060439561,"seconds":5.628913640975952e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.9140625,"distances_sum":2865.255473510594}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9375,"f1":0.965127060439561,"seconds":5.628913640975952e-6,"exhaustive_search_seconds":1.2330710887908936e-6,"evaluations":8.9140625,"distances_sum":2865.255473510594}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.583984375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.583984375,"f1":0.7180838258963265,"seconds":4.0121376514434814e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.296875,"distances_sum":1321.4207829569104}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4169921875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4169921875,"f1":null,"seconds":3.4552067518234253e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":6.6875,"distances_sum":940.6562213044083}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.583984375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.583984375,"f1":0.7180838258963265,"seconds":4.0121376514434814e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.296875,"distances_sum":1321.4207829569104}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.9206616300366308,"seconds":5.327165126800537e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.7578125,"distances_sum":2452.073521829815}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.861328125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.861328125,"f1":0.9206616300366308,"seconds":5.327165126800537e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.7578125,"distances_sum":2452.073521829815}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9688816391941396,"seconds":5.679205060005188e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9375,"distances_sum":2815.158044645302}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9746852106227111,"seconds":5.850568413734436e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.96875,"distances_sum":2869.999185153926}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9746852106227111,"seconds":5.850568413734436e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.96875,"distances_sum":2869.999185153926}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9746852106227111,"seconds":5.850568413734436e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.96875,"distances_sum":2869.999185153926}}, n: 9
inertia(cfft.distances) = 19.01306818181818
inertia(cdnet.distances) = 25.563528011204497
inertia(crand.distances) = 22.640753770739067
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.9
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8911111111111111
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.94
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9377777777777778
===> k=5
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9377777777777778
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8844444444444445
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8977777777777778
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9511111111111111
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9288888888888889
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9288888888888889
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.931111111111111
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9355555555555556
===> k=7
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9266666666666667
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.9244444444444445
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8822222222222221
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9133333333333334
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8911111111111113
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8666666666666666
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9288888888888889
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9044444444444445
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8866666666666667
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9066666666666667
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9177777777777777
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8644444444444445
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8555555555555555
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9066666666666667
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9155555555555557
[ Info: ("XXXXXX===== rocchio like>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX==== clustering>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
nc.class_map = [2, 1, 3, 2, 1, 3, 3, 3, 3, 3, 1, 2, 3, 3, 2, 3, 3, 2, 1, 3, 2]
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.92
*** starting iteration: 1; err: [Inf, 0.3214666723570453] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.3214666723570453, 0.16974199520316066] ***
acc = 0.96
Test Summary:   | Pass  Total
NearestCentroid |   10     10
*** starting iteration: 2; err: [Inf, 0.3214666723570453, 0.16974199520316066] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.3214666723570453, 0.16974199520316066, 0.16136478789632658] ***
*** starting iteration: 3; err: [Inf, 0.3214666723570453, 0.16974199520316066, 0.16136478789632658] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.3214666723570453, 0.16974199520316066, 0.16136478789632658, 0.157980828539514] ***
*** starting iteration: 4; err: [Inf, 0.3214666723570453, 0.16974199520316066, 0.16136478789632658, 0.157980828539514] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.3214666723570453, 0.16974199520316066, 0.16136478789632658, 0.157980828539514, 0.15725058109611928] ***
*** finished computation of 12 references, err: [Inf, 0.3214666723570453, 0.16974199520316066, 0.16136478789632658, 0.157980828539514, 0.15725058109611928] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 23]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 8, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 6, 6]]
** centroid: 9, normalized-entropy: 1.0, [(2, 6), (3, 6)]
*** center 10: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 12, normalized-entropy: 0.5032583347756457, [(2, 1), (3, 8)]
finished with 15 centroids; started with 12
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.5309000037792475] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5309000037792475, 0.2660477780572074] ***
*** finished computation of 7 references, err: [Inf, 0.5309000037792475, 0.2660477780572074] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 2: selecting labels [1] (freq >= 1) [from [19, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 2, 13]]
** centroid: 4, normalized-entropy: 0.5665095065529052, [(2, 2), (3, 13)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 15, 7]]
** centroid: 5, normalized-entropy: 0.9023932827949788, [(2, 15), (3, 7)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 7, 1]]
** centroid: 7, normalized-entropy: 0.5435644431995963, [(2, 7), (3, 1)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5500000073751308] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5500000073751308, 0.30931991040665296] ***
*** finished computation of 7 references, err: [Inf, 0.5500000073751308, 0.30931991040665296] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 20, 8]]
** centroid: 1, normalized-entropy: 0.8631205685666311, [(2, 20), (3, 8)]
*** center 2: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 15, 1]]
** centroid: 5, normalized-entropy: 0.3372900666170139, [(2, 15), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [2, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.035699999867756] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.035699999867756, 0.5246625750365671] ***
*** finished computation of 7 references, err: [Inf, 1.035699999867756, 0.5246625750365671] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 3, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 29, 21]]
** centroid: 3, normalized-entropy: 0.9814538950336533, [(2, 29), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 7: selecting labels [1] (freq >= 1) [from [2, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.231103272985818] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.231103272985818, 0.41903029485828985] ***
*** finished computation of 7 references, err: [Inf, 1.231103272985818, 0.41903029485828985] ***
*** center 1: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [10, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 5, 22]]
** centroid: 4, normalized-entropy: 0.6912898694057888, [(2, 5), (3, 22)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 15, 1]]
*** center 6: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [1, 0, 0]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 13, 8]]
** centroid: 7, normalized-entropy: 0.9587118829771317, [(2, 13), (3, 8)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5732557936454721] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5732557936454721, 0.28977200268755104] ***
*** finished computation of 7 references, err: [Inf, 0.5732557936454721, 0.28977200268755104] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 2: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 2, 0]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 18]]
*** center 5: selecting labels [1] (freq >= 2) [from [19, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [6, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 33, 5]]
** centroid: 7, normalized-entropy: 0.5617526078313283, [(2, 33), (3, 5)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3187310092074198] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3187310092074198, 0.1775209265301833] ***
*** finished computation of 7 references, err: [Inf, 0.3187310092074198, 0.1775209265301833] ***
*** center 1: selecting labels [1] (freq >= 2) [from [21, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 2, 8]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 13, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 2, 18]]
** centroid: 5, normalized-entropy: 0.46899559358928133, [(2, 2), (3, 18)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 15, 3]]
** centroid: 6, normalized-entropy: 0.6500224216483541, [(2, 15), (3, 3)]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7824000058772143] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7824000058772143, 0.30503477853293476] ***
*** starting iteration: 2; err: [Inf, 0.7824000058772143, 0.30503477853293476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7824000058772143, 0.30503477853293476, 0.2915672942111716] ***
*** starting iteration: 3; err: [Inf, 0.7824000058772143, 0.30503477853293476, 0.2915672942111716] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7824000058772143, 0.30503477853293476, 0.2915672942111716, 0.2789891652972656] ***
*** starting iteration: 4; err: [Inf, 0.7824000058772143, 0.30503477853293476, 0.2915672942111716, 0.2789891652972656] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7824000058772143, 0.30503477853293476, 0.2915672942111716, 0.2789891652972656, 0.26910445287211304] ***
*** starting iteration: 5; err: [Inf, 0.7824000058772143, 0.30503477853293476, 0.2915672942111716, 0.2789891652972656, 0.26910445287211304] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7824000058772143, 0.30503477853293476, 0.2915672942111716, 0.2789891652972656, 0.26910445287211304, 0.2572975304599174] ***
*** starting iteration: 6; err: [Inf, 0.7824000058772143, 0.30503477853293476, 0.2915672942111716, 0.2789891652972656, 0.26910445287211304, 0.2572975304599174] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7824000058772143, 0.30503477853293476, 0.2915672942111716, 0.2789891652972656, 0.26910445287211304, 0.2572975304599174, 0.25463123859127273] ***
*** starting iteration: 7; err: [Inf, 0.7824000058772143, 0.30503477853293476, 0.2915672942111716, 0.2789891652972656, 0.26910445287211304, 0.2572975304599174, 0.25463123859127273] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7824000058772143, 0.30503477853293476, 0.2915672942111716, 0.2789891652972656, 0.26910445287211304, 0.2572975304599174, 0.25463123859127273, 0.2538005582293559] ***
*** finished computation of 7 references, err: [Inf, 0.7824000058772143, 0.30503477853293476, 0.2915672942111716, 0.2789891652972656, 0.26910445287211304, 0.2572975304599174, 0.25463123859127273, 0.2538005582293559] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 7, 1]]
** centroid: 1, normalized-entropy: 0.5435644431995963, [(2, 7), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 3, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 15]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 11, 9]]
** centroid: 6, normalized-entropy: 0.9927744539878083, [(2, 11), (3, 9)]
*** center 7: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.42740000705436315] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.42740000705436315, 0.2964354140743363] ***
*** starting iteration: 2; err: [Inf, 0.42740000705436315, 0.2964354140743363] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.42740000705436315, 0.2964354140743363, 0.2813127888663288] ***
*** starting iteration: 3; err: [Inf, 0.42740000705436315, 0.2964354140743363, 0.2813127888663288] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.42740000705436315, 0.2964354140743363, 0.2813127888663288, 0.2774263095546631] ***
*** starting iteration: 4; err: [Inf, 0.42740000705436315, 0.2964354140743363, 0.2813127888663288, 0.2774263095546631] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.42740000705436315, 0.2964354140743363, 0.2813127888663288, 0.2774263095546631, 0.27478770729578855] ***
*** starting iteration: 5; err: [Inf, 0.42740000705436315, 0.2964354140743363, 0.2813127888663288, 0.2774263095546631, 0.27478770729578855] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.42740000705436315, 0.2964354140743363, 0.2813127888663288, 0.2774263095546631, 0.27478770729578855, 0.27149267323424986] ***
*** starting iteration: 6; err: [Inf, 0.42740000705436315, 0.2964354140743363, 0.2813127888663288, 0.2774263095546631, 0.27478770729578855, 0.27149267323424986] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.42740000705436315, 0.2964354140743363, 0.2813127888663288, 0.2774263095546631, 0.27478770729578855, 0.27149267323424986, 0.27094907575679417] ***
*** finished computation of 7 references, err: [Inf, 0.42740000705436315, 0.2964354140743363, 0.2813127888663288, 0.2774263095546631, 0.27478770729578855, 0.27149267323424986, 0.27094907575679417] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 5, 5]]
** centroid: 3, normalized-entropy: 1.0, [(2, 5), (3, 5)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 7: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.36550000231240487] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.36550000231240487, 0.2703672381009256] ***
*** starting iteration: 2; err: [Inf, 0.36550000231240487, 0.2703672381009256] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.36550000231240487, 0.2703672381009256, 0.2572022820601423] ***
*** starting iteration: 3; err: [Inf, 0.36550000231240487, 0.2703672381009256, 0.2572022820601423] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.36550000231240487, 0.2703672381009256, 0.2572022820601423, 0.2562022914773243] ***
*** finished computation of 7 references, err: [Inf, 0.36550000231240487, 0.2703672381009256, 0.2572022820601423, 0.2562022914773243] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 2: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 9, 12]]
** centroid: 3, normalized-entropy: 0.9852281360342514, [(2, 9), (3, 12)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 2.0210936596303752] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.0210936596303752, 0.5839699726462237] ***
*** starting iteration: 2; err: [Inf, 2.0210936596303752, 0.5839699726462237] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.0210936596303752, 0.5839699726462237, 0.37135930384212995] ***
*** starting iteration: 3; err: [Inf, 2.0210936596303752, 0.5839699726462237, 0.37135930384212995] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.0210936596303752, 0.5839699726462237, 0.37135930384212995, 0.3663311203567784] ***
*** finished computation of 3 references, err: [Inf, 2.0210936596303752, 0.5839699726462237, 0.37135930384212995, 0.3663311203567784] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 21]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 33, 10]]
** centroid: 2, normalized-entropy: 0.7824441294066888, [(2, 33), (3, 10)]
*** center 3: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8032971302899078] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8032971302899078, 0.3691463304125161] ***
*** starting iteration: 2; err: [Inf, 0.8032971302899078, 0.3691463304125161] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8032971302899078, 0.3691463304125161, 0.3676490430936839] ***
*** starting iteration: 3; err: [Inf, 0.8032971302899078, 0.3691463304125161, 0.3676490430936839] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8032971302899078, 0.3691463304125161, 0.3676490430936839, 0.3676490430936839] ***
*** finished computation of 3 references, err: [Inf, 0.8032971302899078, 0.3691463304125161, 0.3676490430936839, 0.3676490430936839] ***
*** center 1: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 34, 8]]
** centroid: 2, normalized-entropy: 0.7024665512903904, [(2, 34), (3, 8)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 23]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7186164164443017] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7186164164443017, 0.38225435934411434] ***
*** starting iteration: 2; err: [Inf, 0.7186164164443017, 0.38225435934411434] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7186164164443017, 0.38225435934411434, 0.3745130883290882] ***
*** starting iteration: 3; err: [Inf, 0.7186164164443017, 0.38225435934411434, 0.3745130883290882] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7186164164443017, 0.38225435934411434, 0.3745130883290882, 0.36316630019474394] ***
*** finished computation of 3 references, err: [Inf, 0.7186164164443017, 0.38225435934411434, 0.3745130883290882, 0.36316630019474394] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 4, 31]]
** centroid: 1, normalized-entropy: 0.5127091420308771, [(2, 4), (3, 31)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 28, 7]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(2, 28), (3, 7)]
*** center 3: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.3229378680957729] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3229378680957729, 0.683967380562894] ***
*** starting iteration: 2; err: [Inf, 1.3229378680957729, 0.683967380562894] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3229378680957729, 0.683967380562894, 0.6808967582813432] ***
*** starting iteration: 3; err: [Inf, 1.3229378680957729, 0.683967380562894, 0.6808967582813432] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3229378680957729, 0.683967380562894, 0.6808967582813432, 0.6752686581598474] ***
*** starting iteration: 4; err: [Inf, 1.3229378680957729, 0.683967380562894, 0.6808967582813432, 0.6752686581598474] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3229378680957729, 0.683967380562894, 0.6808967582813432, 0.6752686581598474, 0.6707556542603783] ***
*** starting iteration: 5; err: [Inf, 1.3229378680957729, 0.683967380562894, 0.6808967582813432, 0.6752686581598474, 0.6707556542603783] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3229378680957729, 0.683967380562894, 0.6808967582813432, 0.6752686581598474, 0.6707556542603783, 0.6650971072367223] ***
*** starting iteration: 6; err: [Inf, 1.3229378680957729, 0.683967380562894, 0.6808967582813432, 0.6752686581598474, 0.6707556542603783, 0.6650971072367223] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3229378680957729, 0.683967380562894, 0.6808967582813432, 0.6752686581598474, 0.6707556542603783, 0.6650971072367223, 0.6600359630894892] ***
*** starting iteration: 7; err: [Inf, 1.3229378680957729, 0.683967380562894, 0.6808967582813432, 0.6752686581598474, 0.6707556542603783, 0.6650971072367223, 0.6600359630894892] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3229378680957729, 0.683967380562894, 0.6808967582813432, 0.6752686581598474, 0.6707556542603783, 0.6650971072367223, 0.6600359630894892, 0.6552905549181383] ***
*** starting iteration: 8; err: [Inf, 1.3229378680957729, 0.683967380562894, 0.6808967582813432, 0.6752686581598474, 0.6707556542603783, 0.6650971072367223, 0.6600359630894892, 0.6552905549181383] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3229378680957729, 0.683967380562894, 0.6808967582813432, 0.6752686581598474, 0.6707556542603783, 0.6650971072367223, 0.6600359630894892, 0.6552905549181383, 0.6348589028901899] ***
*** starting iteration: 9; err: [Inf, 1.3229378680957729, 0.683967380562894, 0.6808967582813432, 0.6752686581598474, 0.6707556542603783, 0.6650971072367223, 0.6600359630894892, 0.6552905549181383, 0.6348589028901899] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3229378680957729, 0.683967380562894, 0.6808967582813432, 0.6752686581598474, 0.6707556542603783, 0.6650971072367223, 0.6600359630894892, 0.6552905549181383, 0.6348589028901899, 0.5702620387255387] ***
*** starting iteration: 10; err: [Inf, 1.3229378680957729, 0.683967380562894, 0.6808967582813432, 0.6752686581598474, 0.6707556542603783, 0.6650971072367223, 0.6600359630894892, 0.6552905549181383, 0.6348589028901899, 0.5702620387255387] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3229378680957729, 0.683967380562894, 0.6808967582813432, 0.6752686581598474, 0.6707556542603783, 0.6650971072367223, 0.6600359630894892, 0.6552905549181383, 0.6348589028901899, 0.5702620387255387, 0.4545271773305497] ***
*** finished computation of 3 references, err: [Inf, 1.3229378680957729, 0.683967380562894, 0.6808967582813432, 0.6752686581598474, 0.6707556542603783, 0.6650971072367223, 0.6600359630894892, 0.6552905549181383, 0.6348589028901899, 0.5702620387255387, 0.4545271773305497] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 17, 1]]
*** center 2: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 16, 30]]
** centroid: 3, normalized-entropy: 0.9321115676166747, [(2, 16), (3, 30)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8959461009065103] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8959461009065103, 0.36803957587072555] ***
*** starting iteration: 2; err: [Inf, 0.8959461009065103, 0.36803957587072555] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8959461009065103, 0.36803957587072555, 0.3676490430936839] ***
*** finished computation of 3 references, err: [Inf, 0.8959461009065103, 0.36803957587072555, 0.3676490430936839] ***
*** center 1: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 23]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 34, 8]]
** centroid: 3, normalized-entropy: 0.7024665512903904, [(2, 34), (3, 8)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7395558951910902] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7395558951910902, 0.3827874246237494] ***
*** starting iteration: 2; err: [Inf, 0.7395558951910902, 0.3827874246237494] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7395558951910902, 0.3827874246237494, 0.3770346790364195] ***
*** starting iteration: 3; err: [Inf, 0.7395558951910902, 0.3827874246237494, 0.3770346790364195] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7395558951910902, 0.3827874246237494, 0.3770346790364195, 0.3687804956742427] ***
*** starting iteration: 4; err: [Inf, 0.7395558951910902, 0.3827874246237494, 0.3770346790364195, 0.3687804956742427] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7395558951910902, 0.3827874246237494, 0.3770346790364195, 0.3687804956742427, 0.3591475036138354] ***
*** starting iteration: 5; err: [Inf, 0.7395558951910902, 0.3827874246237494, 0.3770346790364195, 0.3687804956742427, 0.3591475036138354] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7395558951910902, 0.3827874246237494, 0.3770346790364195, 0.3687804956742427, 0.3591475036138354, 0.3582002046209649] ***
*** finished computation of 3 references, err: [Inf, 0.7395558951910902, 0.3827874246237494, 0.3770346790364195, 0.3687804956742427, 0.3591475036138354, 0.3582002046209649] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 3, 30]]
** centroid: 1, normalized-entropy: 0.43949698692151346, [(2, 3), (3, 30)]
*** center 2: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 29, 8]]
** centroid: 3, normalized-entropy: 0.7531979910695015, [(2, 29), (3, 8)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3327544692875364] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3327544692875364, 0.21074636837607097] ***
*** finished computation of 7 references, err: [Inf, 0.3327544692875364, 0.21074636837607097] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 10, 8]]
** centroid: 1, normalized-entropy: 0.9910760598382222, [(2, 10), (3, 8)]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 21]]
*** center 3: selecting labels [1] (freq >= 2) [from [6, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 5, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 12, 1]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 6, 1]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.9168110069981361] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.9168110069981361, 0.5825564561348291] ***
*** finished computation of 7 references, err: [Inf, 0.9168110069981361, 0.5825564561348291] ***
*** center 1: selecting labels [1] (freq >= 2) [from [8, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [10, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [6, 1, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 34, 31]]
** centroid: 4, normalized-entropy: 0.9984628557283827, [(2, 34), (3, 31)]
*** center 5: selecting labels [1] (freq >= 2) [from [2, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [5, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [3, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 2.6508735774658962] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 2.6508735774658962, 0.3761677185753086] ***
*** finished computation of 7 references, err: [Inf, 2.6508735774658962, 0.3761677185753086] ***
*** center 1: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [4, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 14, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [5, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 18, 30]]
** centroid: 5, normalized-entropy: 0.954434002924965, [(2, 18), (3, 30)]
*** center 6: selecting labels [1] (freq >= 2) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6185999971099375] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6185999971099375, 0.4764744323186745] ***
*** starting iteration: 2; err: [Inf, 0.6185999971099375, 0.4764744323186745] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6185999971099375, 0.4764744323186745, 0.4679176788029932] ***
*** starting iteration: 3; err: [Inf, 0.6185999971099375, 0.4764744323186745, 0.4679176788029932] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6185999971099375, 0.4764744323186745, 0.4679176788029932, 0.46479692199807926] ***
*** finished computation of 7 references, err: [Inf, 0.6185999971099375, 0.4764744323186745, 0.4679176788029932, 0.46479692199807926] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 4, 27]]
** centroid: 1, normalized-entropy: 0.5547781633412736, [(2, 4), (3, 27)]
*** center 2: selecting labels [1] (freq >= 1) [from [1, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [1, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 29, 4]]
** centroid: 7, normalized-entropy: 0.5328350630342235, [(2, 29), (3, 4)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.1826999915126957] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.1826999915126957, 0.42585442603562695] ***
*** starting iteration: 2; err: [Inf, 1.1826999915126957, 0.42585442603562695] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.1826999915126957, 0.42585442603562695, 0.36068400782722565] ***
*** starting iteration: 3; err: [Inf, 1.1826999915126957, 0.42585442603562695, 0.36068400782722565] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.1826999915126957, 0.42585442603562695, 0.36068400782722565, 0.31295426204039567] ***
*** finished computation of 7 references, err: [Inf, 1.1826999915126957, 0.42585442603562695, 0.36068400782722565, 0.31295426204039567] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 20, 8]]
** centroid: 2, normalized-entropy: 0.8631205685666311, [(2, 20), (3, 8)]
*** center 3: selecting labels [1] (freq >= 1) [from [1, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5109000029909471] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5109000029909471, 0.2907429699084383] ***
*** starting iteration: 2; err: [Inf, 0.5109000029909471, 0.2907429699084383] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5109000029909471, 0.2907429699084383, 0.2642297976288319] ***
*** starting iteration: 3; err: [Inf, 0.5109000029909471, 0.2907429699084383, 0.2642297976288319] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5109000029909471, 0.2907429699084383, 0.2642297976288319, 0.25497659347038243] ***
*** finished computation of 7 references, err: [Inf, 0.5109000029909471, 0.2907429699084383, 0.2642297976288319, 0.25497659347038243] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 12, 10]]
** centroid: 3, normalized-entropy: 0.9940302114769566, [(2, 12), (3, 10)]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 5: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.4296999994813762] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.4296999994813762, 0.7897937959687392] ***
*** finished computation of 7 references, err: [Inf, 1.4296999994813762, 0.7897937959687392] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 26, 31]]
** centroid: 1, normalized-entropy: 0.9944423248022589, [(2, 26), (3, 31)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [2, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5572000110594527] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5572000110594527, 0.30457012901173164] ***
*** finished computation of 7 references, err: [Inf, 0.5572000110594527, 0.30457012901173164] ***
*** center 1: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 4: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [6, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 6, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 13, 22]]
** centroid: 7, normalized-entropy: 0.9517626756348312, [(2, 13), (3, 22)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7183000142787423] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7183000142787423, 0.36971497387531627] ***
*** finished computation of 7 references, err: [Inf, 0.7183000142787423, 0.36971497387531627] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 29]]
*** center 2: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 1, 4]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(2, 1), (3, 4)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 12, 5]]
** centroid: 4, normalized-entropy: 0.8739810481273581, [(2, 12), (3, 5)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 2.8032999661454507] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.8032999661454507, 0.5767351491278524] ***
*** starting iteration: 2; err: [Inf, 2.8032999661454507, 0.5767351491278524] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.8032999661454507, 0.5767351491278524, 0.5461886162668003] ***
*** starting iteration: 3; err: [Inf, 2.8032999661454507, 0.5767351491278524, 0.5461886162668003] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.8032999661454507, 0.5767351491278524, 0.5461886162668003, 0.5439716169952173] ***
*** starting iteration: 4; err: [Inf, 2.8032999661454507, 0.5767351491278524, 0.5461886162668003, 0.5439716169952173] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.8032999661454507, 0.5767351491278524, 0.5461886162668003, 0.5439716169952173, 0.5351381367094648] ***
*** starting iteration: 5; err: [Inf, 2.8032999661454507, 0.5767351491278524, 0.5461886162668003, 0.5439716169952173, 0.5351381367094648] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.8032999661454507, 0.5767351491278524, 0.5461886162668003, 0.5439716169952173, 0.5351381367094648, 0.5319115348375929] ***
*** starting iteration: 6; err: [Inf, 2.8032999661454507, 0.5767351491278524, 0.5461886162668003, 0.5439716169952173, 0.5351381367094648, 0.5319115348375929] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.8032999661454507, 0.5767351491278524, 0.5461886162668003, 0.5439716169952173, 0.5351381367094648, 0.5319115348375929, 0.5283091672843512] ***
*** starting iteration: 7; err: [Inf, 2.8032999661454507, 0.5767351491278524, 0.5461886162668003, 0.5439716169952173, 0.5351381367094648, 0.5319115348375929, 0.5283091672843512] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.8032999661454507, 0.5767351491278524, 0.5461886162668003, 0.5439716169952173, 0.5351381367094648, 0.5319115348375929, 0.5283091672843512, 0.5188688324841189] ***
*** starting iteration: 8; err: [Inf, 2.8032999661454507, 0.5767351491278524, 0.5461886162668003, 0.5439716169952173, 0.5351381367094648, 0.5319115348375929, 0.5283091672843512, 0.5188688324841189] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.8032999661454507, 0.5767351491278524, 0.5461886162668003, 0.5439716169952173, 0.5351381367094648, 0.5319115348375929, 0.5283091672843512, 0.5188688324841189, 0.5152514774771889] ***
*** starting iteration: 9; err: [Inf, 2.8032999661454507, 0.5767351491278524, 0.5461886162668003, 0.5439716169952173, 0.5351381367094648, 0.5319115348375929, 0.5283091672843512, 0.5188688324841189, 0.5152514774771889] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.8032999661454507, 0.5767351491278524, 0.5461886162668003, 0.5439716169952173, 0.5351381367094648, 0.5319115348375929, 0.5283091672843512, 0.5188688324841189, 0.5152514774771889, 0.5109213391101651] ***
*** starting iteration: 10; err: [Inf, 2.8032999661454507, 0.5767351491278524, 0.5461886162668003, 0.5439716169952173, 0.5351381367094648, 0.5319115348375929, 0.5283091672843512, 0.5188688324841189, 0.5152514774771889, 0.5109213391101651] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.8032999661454507, 0.5767351491278524, 0.5461886162668003, 0.5439716169952173, 0.5351381367094648, 0.5319115348375929, 0.5283091672843512, 0.5188688324841189, 0.5152514774771889, 0.5109213391101651, 0.5097958903590767] ***
*** finished computation of 3 references, err: [Inf, 2.8032999661454507, 0.5767351491278524, 0.5461886162668003, 0.5439716169952173, 0.5351381367094648, 0.5319115348375929, 0.5283091672843512, 0.5188688324841189, 0.5152514774771889, 0.5109213391101651, 0.5097958903590767] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 2, 21]]
** centroid: 1, normalized-entropy: 0.42622865699814483, [(2, 2), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 31, 10]]
** centroid: 3, normalized-entropy: 0.8014698931335286, [(2, 31), (3, 10)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 9.076800030226819] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 9.076800030226819, 2.779878823830941] ***
*** starting iteration: 2; err: [Inf, 9.076800030226819, 2.779878823830941] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 9.076800030226819, 2.779878823830941, 1.580384957486002] ***
*** starting iteration: 3; err: [Inf, 9.076800030226819, 2.779878823830941, 1.580384957486002] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 9.076800030226819, 2.779878823830941, 1.580384957486002, 0.910802784884115] ***
*** starting iteration: 4; err: [Inf, 9.076800030226819, 2.779878823830941, 1.580384957486002, 0.910802784884115] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 9.076800030226819, 2.779878823830941, 1.580384957486002, 0.910802784884115, 0.6492035414535784] ***
*** starting iteration: 5; err: [Inf, 9.076800030226819, 2.779878823830941, 1.580384957486002, 0.910802784884115, 0.6492035414535784] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 9.076800030226819, 2.779878823830941, 1.580384957486002, 0.910802784884115, 0.6492035414535784, 0.5831033787149229] ***
*** starting iteration: 6; err: [Inf, 9.076800030226819, 2.779878823830941, 1.580384957486002, 0.910802784884115, 0.6492035414535784, 0.5831033787149229] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 9.076800030226819, 2.779878823830941, 1.580384957486002, 0.910802784884115, 0.6492035414535784, 0.5831033787149229, 0.5355196059411553] ***
*** starting iteration: 7; err: [Inf, 9.076800030226819, 2.779878823830941, 1.580384957486002, 0.910802784884115, 0.6492035414535784, 0.5831033787149229, 0.5355196059411553] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 9.076800030226819, 2.779878823830941, 1.580384957486002, 0.910802784884115, 0.6492035414535784, 0.5831033787149229, 0.5355196059411553, 0.5247312242931668] ***
*** starting iteration: 8; err: [Inf, 9.076800030226819, 2.779878823830941, 1.580384957486002, 0.910802784884115, 0.6492035414535784, 0.5831033787149229, 0.5355196059411553, 0.5247312242931668] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 9.076800030226819, 2.779878823830941, 1.580384957486002, 0.910802784884115, 0.6492035414535784, 0.5831033787149229, 0.5355196059411553, 0.5247312242931668, 0.5224544462652214] ***
*** starting iteration: 9; err: [Inf, 9.076800030226819, 2.779878823830941, 1.580384957486002, 0.910802784884115, 0.6492035414535784, 0.5831033787149229, 0.5355196059411553, 0.5247312242931668, 0.5224544462652214] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 9.076800030226819, 2.779878823830941, 1.580384957486002, 0.910802784884115, 0.6492035414535784, 0.5831033787149229, 0.5355196059411553, 0.5247312242931668, 0.5224544462652214, 0.5224544462652214] ***
*** finished computation of 3 references, err: [Inf, 9.076800030226819, 2.779878823830941, 1.580384957486002, 0.910802784884115, 0.6492035414535784, 0.5831033787149229, 0.5355196059411553, 0.5247312242931668, 0.5224544462652214, 0.5224544462652214] ***
*** center 1: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 34, 8]]
** centroid: 2, normalized-entropy: 0.7024665512903904, [(2, 34), (3, 8)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 23]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.3130999964675214] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3130999964675214, 0.9924822801958733] ***
*** starting iteration: 2; err: [Inf, 1.3130999964675214, 0.9924822801958733] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3130999964675214, 0.9924822801958733, 0.9882636946089559] ***
*** starting iteration: 3; err: [Inf, 1.3130999964675214, 0.9924822801958733, 0.9882636946089559] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3130999964675214, 0.9924822801958733, 0.9882636946089559, 0.9738370182467448] ***
*** starting iteration: 4; err: [Inf, 1.3130999964675214, 0.9924822801958733, 0.9882636946089559, 0.9738370182467448] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3130999964675214, 0.9924822801958733, 0.9882636946089559, 0.9738370182467448, 0.9689603703769245] ***
*** starting iteration: 5; err: [Inf, 1.3130999964675214, 0.9924822801958733, 0.9882636946089559, 0.9738370182467448, 0.9689603703769245] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3130999964675214, 0.9924822801958733, 0.9882636946089559, 0.9738370182467448, 0.9689603703769245, 0.9669319601667348] ***
*** starting iteration: 6; err: [Inf, 1.3130999964675214, 0.9924822801958733, 0.9882636946089559, 0.9738370182467448, 0.9689603703769245, 0.9669319601667348] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3130999964675214, 0.9924822801958733, 0.9882636946089559, 0.9738370182467448, 0.9689603703769245, 0.9669319601667348, 0.9628454057346438] ***
*** starting iteration: 7; err: [Inf, 1.3130999964675214, 0.9924822801958733, 0.9882636946089559, 0.9738370182467448, 0.9689603703769245, 0.9669319601667348, 0.9628454057346438] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3130999964675214, 0.9924822801958733, 0.9882636946089559, 0.9738370182467448, 0.9689603703769245, 0.9669319601667348, 0.9628454057346438, 0.9173021588900845] ***
*** starting iteration: 8; err: [Inf, 1.3130999964675214, 0.9924822801958733, 0.9882636946089559, 0.9738370182467448, 0.9689603703769245, 0.9669319601667348, 0.9628454057346438, 0.9173021588900845] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3130999964675214, 0.9924822801958733, 0.9882636946089559, 0.9738370182467448, 0.9689603703769245, 0.9669319601667348, 0.9628454057346438, 0.9173021588900845, 0.7379518429590202] ***
*** starting iteration: 9; err: [Inf, 1.3130999964675214, 0.9924822801958733, 0.9882636946089559, 0.9738370182467448, 0.9689603703769245, 0.9669319601667348, 0.9628454057346438, 0.9173021588900845, 0.7379518429590202] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3130999964675214, 0.9924822801958733, 0.9882636946089559, 0.9738370182467448, 0.9689603703769245, 0.9669319601667348, 0.9628454057346438, 0.9173021588900845, 0.7379518429590202, 0.604620329662808] ***
*** starting iteration: 10; err: [Inf, 1.3130999964675214, 0.9924822801958733, 0.9882636946089559, 0.9738370182467448, 0.9689603703769245, 0.9669319601667348, 0.9628454057346438, 0.9173021588900845, 0.7379518429590202, 0.604620329662808] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3130999964675214, 0.9924822801958733, 0.9882636946089559, 0.9738370182467448, 0.9689603703769245, 0.9669319601667348, 0.9628454057346438, 0.9173021588900845, 0.7379518429590202, 0.604620329662808, 0.5775266560963419] ***
*** finished computation of 3 references, err: [Inf, 1.3130999964675214, 0.9924822801958733, 0.9882636946089559, 0.9738370182467448, 0.9689603703769245, 0.9669319601667348, 0.9628454057346438, 0.9173021588900845, 0.7379518429590202, 0.604620329662808, 0.5775266560963419] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 24, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 8, 38]]
** centroid: 3, normalized-entropy: 0.6665783579949205, [(2, 8), (3, 38)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.025400007510819] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.025400007510819, 0.6320558043156632] ***
*** starting iteration: 2; err: [Inf, 1.025400007510819, 0.6320558043156632] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.025400007510819, 0.6320558043156632, 0.5334810902325109] ***
*** starting iteration: 3; err: [Inf, 1.025400007510819, 0.6320558043156632, 0.5334810902325109] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.025400007510819, 0.6320558043156632, 0.5334810902325109, 0.5094080148530022] ***
*** finished computation of 3 references, err: [Inf, 1.025400007510819, 0.6320558043156632, 0.5334810902325109, 0.5094080148530022] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 32, 10]]
** centroid: 1, normalized-entropy: 0.7918583525674836, [(2, 32), (3, 10)]
*** center 2: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 1, 21]]
** centroid: 3, normalized-entropy: 0.2667649878030262, [(2, 1), (3, 21)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.1719999984623266] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1719999984623266, 0.5787257192450991] ***
*** starting iteration: 2; err: [Inf, 1.1719999984623266, 0.5787257192450991] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1719999984623266, 0.5787257192450991, 0.5589972221862827] ***
*** starting iteration: 3; err: [Inf, 1.1719999984623266, 0.5787257192450991, 0.5589972221862827] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1719999984623266, 0.5787257192450991, 0.5589972221862827, 0.5541653076705692] ***
*** finished computation of 3 references, err: [Inf, 1.1719999984623266, 0.5787257192450991, 0.5589972221862827, 0.5541653076705692] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 11, 30]]
** centroid: 1, normalized-entropy: 0.8390040613676978, [(2, 11), (3, 30)]
*** center 2: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 24, 1]]
** centroid: 3, normalized-entropy: 0.24229218908241482, [(2, 24), (3, 1)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0878000088349635] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0878000088349635, 0.5904932109888976] ***
*** starting iteration: 2; err: [Inf, 1.0878000088349635, 0.5904932109888976] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0878000088349635, 0.5904932109888976, 0.5409231000640967] ***
*** starting iteration: 3; err: [Inf, 1.0878000088349635, 0.5904932109888976, 0.5409231000640967] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0878000088349635, 0.5904932109888976, 0.5409231000640967, 0.5338291830013462] ***
*** finished computation of 3 references, err: [Inf, 1.0878000088349635, 0.5904932109888976, 0.5409231000640967, 0.5338291830013462] ***
*** center 1: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 2, 27]]
** centroid: 2, normalized-entropy: 0.36205125173399805, [(2, 2), (3, 27)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 30, 11]]
** centroid: 3, normalized-entropy: 0.8390040613676978, [(2, 30), (3, 11)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0688740519083846] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0688740519083846, 0.3668003582950405] ***
*** finished computation of 3 references, err: [Inf, 1.0688740519083846, 0.3668003582950405] ***
*** center 1: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 33, 10]]
** centroid: 3, normalized-entropy: 0.7824441294066888, [(2, 33), (3, 10)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8639898839093543] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8639898839093543, 0.4290046102134694] ***
*** finished computation of 3 references, err: [Inf, 0.8639898839093543, 0.4290046102134694] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 35, 19]]
** centroid: 1, normalized-entropy: 0.9357110512652843, [(2, 35), (3, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7883460787813144] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7883460787813144, 0.39760248245287344] ***
*** finished computation of 3 references, err: [Inf, 0.7883460787813144, 0.39760248245287344] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [30, 1, 0]]
** centroid: 1, normalized-entropy: 0.2055925081850832, [(1, 30), (2, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 31, 17]]
** centroid: 3, normalized-entropy: 0.9377342939868042, [(2, 31), (3, 17)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.053421007530414] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.053421007530414, 0.3668003582950405] ***
*** starting iteration: 2; err: [Inf, 1.053421007530414, 0.3668003582950405] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.053421007530414, 0.3668003582950405, 0.3660050965842514] ***
*** finished computation of 3 references, err: [Inf, 1.053421007530414, 0.3668003582950405, 0.3660050965842514] ***
*** center 1: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 33, 10]]
** centroid: 3, normalized-entropy: 0.7824441294066888, [(2, 33), (3, 10)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.1894226316430445] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1894226316430445, 0.38418894456265434] ***
*** starting iteration: 2; err: [Inf, 1.1894226316430445, 0.38418894456265434] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1894226316430445, 0.38418894456265434, 0.3693677280280149] ***
*** starting iteration: 3; err: [Inf, 1.1894226316430445, 0.38418894456265434, 0.3693677280280149] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1894226316430445, 0.38418894456265434, 0.3693677280280149, 0.3676490430936839] ***
*** starting iteration: 4; err: [Inf, 1.1894226316430445, 0.38418894456265434, 0.3693677280280149, 0.3676490430936839] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1894226316430445, 0.38418894456265434, 0.3693677280280149, 0.3676490430936839, 0.3676490430936839] ***
*** finished computation of 3 references, err: [Inf, 1.1894226316430445, 0.38418894456265434, 0.3693677280280149, 0.3676490430936839, 0.3676490430936839] ***
*** center 1: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 1, 23]]
** centroid: 2, normalized-entropy: 0.24988229283318547, [(2, 1), (3, 23)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 34, 8]]
** centroid: 3, normalized-entropy: 0.7024665512903904, [(2, 34), (3, 8)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.6394841978901895] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6394841978901895, 0.39526256036565743] ***
*** starting iteration: 2; err: [Inf, 0.6394841978901895, 0.39526256036565743] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6394841978901895, 0.39526256036565743, 0.38243725631880493] ***
*** starting iteration: 3; err: [Inf, 0.6394841978901895, 0.39526256036565743, 0.38243725631880493] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6394841978901895, 0.39526256036565743, 0.38243725631880493, 0.3745130883290882] ***
*** starting iteration: 4; err: [Inf, 0.6394841978901895, 0.39526256036565743, 0.38243725631880493, 0.3745130883290882] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6394841978901895, 0.39526256036565743, 0.38243725631880493, 0.3745130883290882, 0.36316630019474394] ***
*** starting iteration: 5; err: [Inf, 0.6394841978901895, 0.39526256036565743, 0.38243725631880493, 0.3745130883290882, 0.36316630019474394] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6394841978901895, 0.39526256036565743, 0.38243725631880493, 0.3745130883290882, 0.36316630019474394, 0.3581981418462924] ***
*** starting iteration: 6; err: [Inf, 0.6394841978901895, 0.39526256036565743, 0.38243725631880493, 0.3745130883290882, 0.36316630019474394, 0.3581981418462924] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6394841978901895, 0.39526256036565743, 0.38243725631880493, 0.3745130883290882, 0.36316630019474394, 0.3581981418462924, 0.35762988238024546] ***
*** finished computation of 3 references, err: [Inf, 0.6394841978901895, 0.39526256036565743, 0.38243725631880493, 0.3745130883290882, 0.36316630019474394, 0.3581981418462924, 0.35762988238024546] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 30]]
** centroid: 1, normalized-entropy: 0.43949698692151346, [(2, 3), (3, 30)]
*** center 2: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 29, 8]]
** centroid: 3, normalized-entropy: 0.7531979910695015, [(2, 29), (3, 8)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.38385879950690566] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.38385879950690566, 0.21558165483428865] ***
*** starting iteration: 2; err: [Inf, 0.38385879950690566, 0.21558165483428865] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.38385879950690566, 0.21558165483428865, 0.20461134519489524] ***
*** starting iteration: 3; err: [Inf, 0.38385879950690566, 0.21558165483428865, 0.20461134519489524] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.38385879950690566, 0.21558165483428865, 0.20461134519489524, 0.19914788796126007] ***
*** finished computation of 7 references, err: [Inf, 0.38385879950690566, 0.21558165483428865, 0.20461134519489524, 0.19914788796126007] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [26, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 5, 22]]
** centroid: 4, normalized-entropy: 0.6912898694057888, [(2, 5), (3, 22)]
*** center 5: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 3, 2]]
** centroid: 7, normalized-entropy: 0.9709505944546688, [(2, 3), (3, 2)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4174494974678973] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4174494974678973, 0.17048245043492943] ***
*** starting iteration: 2; err: [Inf, 0.4174494974678973, 0.17048245043492943] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4174494974678973, 0.17048245043492943, 0.16232337570688465] ***
*** starting iteration: 3; err: [Inf, 0.4174494974678973, 0.17048245043492943, 0.16232337570688465] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4174494974678973, 0.17048245043492943, 0.16232337570688465, 0.15965254522417516] ***
*** finished computation of 7 references, err: [Inf, 0.4174494974678973, 0.17048245043492943, 0.16232337570688465, 0.15965254522417516] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 19, 7]]
** centroid: 1, normalized-entropy: 0.8403586716091169, [(2, 19), (3, 7)]
*** center 2: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 4: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 15]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.43533372064145837] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.43533372064145837, 0.20994090246096966] ***
*** starting iteration: 2; err: [Inf, 0.43533372064145837, 0.20994090246096966] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.43533372064145837, 0.20994090246096966, 0.19730005422210628] ***
*** starting iteration: 3; err: [Inf, 0.43533372064145837, 0.20994090246096966, 0.19730005422210628] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.43533372064145837, 0.20994090246096966, 0.19730005422210628, 0.18994663467495365] ***
*** finished computation of 7 references, err: [Inf, 0.43533372064145837, 0.20994090246096966, 0.19730005422210628, 0.18994663467495365] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 3, 17]]
** centroid: 5, normalized-entropy: 0.6098403047164005, [(2, 3), (3, 17)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 1, 12]]
** centroid: 7, normalized-entropy: 0.3912435636292556, [(2, 1), (3, 12)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6481000010777944] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6481000010777944, 0.23882409667950388] ***
*** finished computation of 7 references, err: [Inf, 0.6481000010777944, 0.23882409667950388] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 14, 8]]
** centroid: 1, normalized-entropy: 0.9456603046006401, [(2, 14), (3, 8)]
*** center 2: selecting labels [1] (freq >= 2) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 5: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 16]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 12, 2]]
** centroid: 7, normalized-entropy: 0.5916727785823274, [(2, 12), (3, 2)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5342000044129982] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5342000044129982, 0.24606106354373858] ***
*** finished computation of 7 references, err: [Inf, 0.5342000044129982, 0.24606106354373858] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 20, 8]]
** centroid: 1, normalized-entropy: 0.8631205685666311, [(2, 20), (3, 8)]
*** center 2: selecting labels [1] (freq >= 2) [from [24, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 9, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [10, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 17]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 6, 1]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5406000075901196] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5406000075901196, 0.2553415731597639] ***
*** finished computation of 7 references, err: [Inf, 0.5406000075901196, 0.2553415731597639] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 19, 5]]
** centroid: 1, normalized-entropy: 0.7382848661434506, [(2, 19), (3, 5)]
*** center 2: selecting labels [1] (freq >= 2) [from [19, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 22]]
*** center 5: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 5, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 8, 3]]
** centroid: 7, normalized-entropy: 0.8453509366224364, [(2, 8), (3, 3)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.38185955864397186] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.38185955864397186, 0.23642053046957665] ***
*** starting iteration: 2; err: [Inf, 0.38185955864397186, 0.23642053046957665] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.38185955864397186, 0.23642053046957665, 0.22687186905654927] ***
*** starting iteration: 3; err: [Inf, 0.38185955864397186, 0.23642053046957665, 0.22687186905654927] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.38185955864397186, 0.23642053046957665, 0.22687186905654927, 0.2223469388063881] ***
*** starting iteration: 4; err: [Inf, 0.38185955864397186, 0.23642053046957665, 0.22687186905654927, 0.2223469388063881] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.38185955864397186, 0.23642053046957665, 0.22687186905654927, 0.2223469388063881, 0.22181737607988045] ***
*** finished computation of 7 references, err: [Inf, 0.38185955864397186, 0.23642053046957665, 0.22687186905654927, 0.2223469388063881, 0.22181737607988045] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 24, 1]]
*** center 2: selecting labels [1] (freq >= 2) [from [23, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 9, 20]]
** centroid: 4, normalized-entropy: 0.8935711016541908, [(2, 9), (3, 20)]
*** center 5: selecting labels [1] (freq >= 2) [from [4, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 7: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.34065359496105485] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34065359496105485, 0.1933059059044442] ***
*** starting iteration: 2; err: [Inf, 0.34065359496105485, 0.1933059059044442] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34065359496105485, 0.1933059059044442, 0.17150885781253014] ***
*** starting iteration: 3; err: [Inf, 0.34065359496105485, 0.1933059059044442, 0.17150885781253014] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34065359496105485, 0.1933059059044442, 0.17150885781253014, 0.16490691947252997] ***
*** starting iteration: 4; err: [Inf, 0.34065359496105485, 0.1933059059044442, 0.17150885781253014, 0.16490691947252997] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34065359496105485, 0.1933059059044442, 0.17150885781253014, 0.16490691947252997, 0.15931732006399246] ***
*** starting iteration: 5; err: [Inf, 0.34065359496105485, 0.1933059059044442, 0.17150885781253014, 0.16490691947252997, 0.15931732006399246] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34065359496105485, 0.1933059059044442, 0.17150885781253014, 0.16490691947252997, 0.15931732006399246, 0.15719489183225582] ***
*** starting iteration: 6; err: [Inf, 0.34065359496105485, 0.1933059059044442, 0.17150885781253014, 0.16490691947252997, 0.15931732006399246, 0.15719489183225582] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34065359496105485, 0.1933059059044442, 0.17150885781253014, 0.16490691947252997, 0.15931732006399246, 0.15719489183225582, 0.156813574848067] ***
*** finished computation of 7 references, err: [Inf, 0.34065359496105485, 0.1933059059044442, 0.17150885781253014, 0.16490691947252997, 0.15931732006399246, 0.15719489183225582, 0.156813574848067] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 16, 1]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 3: selecting labels [1] (freq >= 2) [from [7, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 19, 7]]
** centroid: 4, normalized-entropy: 0.8403586716091169, [(2, 19), (3, 7)]
*** center 5: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
*** center 7: selecting labels [1] (freq >= 2) [from [18, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.37084579840930165] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37084579840930165, 0.193982956885029] ***
*** starting iteration: 2; err: [Inf, 0.37084579840930165, 0.193982956885029] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37084579840930165, 0.193982956885029, 0.1829996677564187] ***
*** starting iteration: 3; err: [Inf, 0.37084579840930165, 0.193982956885029, 0.1829996677564187] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37084579840930165, 0.193982956885029, 0.1829996677564187, 0.17901035558685474] ***
*** starting iteration: 4; err: [Inf, 0.37084579840930165, 0.193982956885029, 0.1829996677564187, 0.17901035558685474] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37084579840930165, 0.193982956885029, 0.1829996677564187, 0.17901035558685474, 0.17684900235311513] ***
*** starting iteration: 5; err: [Inf, 0.37084579840930165, 0.193982956885029, 0.1829996677564187, 0.17901035558685474, 0.17684900235311513] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37084579840930165, 0.193982956885029, 0.1829996677564187, 0.17901035558685474, 0.17684900235311513, 0.17635451412161168] ***
*** finished computation of 7 references, err: [Inf, 0.37084579840930165, 0.193982956885029, 0.1829996677564187, 0.17901035558685474, 0.17684900235311513, 0.17635451412161168] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 20]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 6: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 12, 9]]
** centroid: 7, normalized-entropy: 0.9852281360342514, [(2, 12), (3, 9)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6520000024964951] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6520000024964951, 0.2669871288706776] ***
*** starting iteration: 2; err: [Inf, 0.6520000024964951, 0.2669871288706776] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6520000024964951, 0.2669871288706776, 0.25804035974833694] ***
*** starting iteration: 3; err: [Inf, 0.6520000024964951, 0.2669871288706776, 0.25804035974833694] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6520000024964951, 0.2669871288706776, 0.25804035974833694, 0.25444382855813485] ***
*** finished computation of 7 references, err: [Inf, 0.6520000024964951, 0.2669871288706776, 0.25804035974833694, 0.25444382855813485] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 5, 10]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(2, 5), (3, 10)]
*** center 2: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 15, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 13, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5825000094605481] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5825000094605481, 0.24285000393791153] ***
*** starting iteration: 2; err: [Inf, 0.5825000094605481, 0.24285000393791153] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5825000094605481, 0.24285000393791153, 0.23133002681690837] ***
*** starting iteration: 3; err: [Inf, 0.5825000094605481, 0.24285000393791153, 0.23133002681690837] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5825000094605481, 0.24285000393791153, 0.23133002681690837, 0.23088260660144277] ***
*** finished computation of 7 references, err: [Inf, 0.5825000094605481, 0.24285000393791153, 0.23133002681690837, 0.23088260660144277] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 12, 6]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(2, 12), (3, 6)]
*** center 2: selecting labels [1] (freq >= 2) [from [24, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 11, 0]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 5: selecting labels [1] (freq >= 2) [from [10, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 12, 3]]
** centroid: 6, normalized-entropy: 0.7219280948873623, [(2, 12), (3, 3)]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 14]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5624000049722592] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5624000049722592, 0.2490048930364827] ***
*** starting iteration: 2; err: [Inf, 0.5624000049722592, 0.2490048930364827] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5624000049722592, 0.2490048930364827, 0.23802204532950066] ***
*** starting iteration: 3; err: [Inf, 0.5624000049722592, 0.2490048930364827, 0.23802204532950066] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5624000049722592, 0.2490048930364827, 0.23802204532950066, 0.23278084660487322] ***
*** finished computation of 7 references, err: [Inf, 0.5624000049722592, 0.2490048930364827, 0.23802204532950066, 0.23278084660487322] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 13, 12]]
** centroid: 1, normalized-entropy: 0.998845535995202, [(2, 13), (3, 12)]
*** center 2: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 3, 0]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 17]]
*** center 6: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 16, 0]]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 16)
[0.9666666666666667, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.9066666666666667, 0.8933333333333334, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9666666666666667
finished with 16
iteration 2 finished
generating 4 configurations using top 4 configurations, starting with 16)
[0.9666666666666667, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.9066666666666667, 0.8933333333333334, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9666666666666667
finished with 17
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.422387183424799] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.422387183424799, 0.20140942653898808] ***
*** finished computation of 7 references, err: [Inf, 0.422387183424799, 0.20140942653898808] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 3, 15]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 2: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 14, 1]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 16, 9]]
** centroid: 5, normalized-entropy: 0.9426831892554921, [(2, 16), (3, 9)]
*** center 6: selecting labels [1] (freq >= 2) [from [4, 0, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.39174840451440046] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.39174840451440046, 0.16991397851807477] ***
*** finished computation of 7 references, err: [Inf, 0.39174840451440046, 0.16991397851807477] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 20, 7]]
** centroid: 1, normalized-entropy: 0.8256265261578954, [(2, 20), (3, 7)]
*** center 2: selecting labels [1] (freq >= 2) [from [24, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 4: selecting labels [1] (freq >= 2) [from [10, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 6, 1]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 9, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.36840164510676915] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.36840164510676915, 0.2044048719628292] ***
*** finished computation of 7 references, err: [Inf, 0.36840164510676915, 0.2044048719628292] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 23, 9]]
** centroid: 1, normalized-entropy: 0.8571484374283717, [(2, 23), (3, 9)]
*** center 2: selecting labels [1] (freq >= 2) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 2, 20]]
** centroid: 5, normalized-entropy: 0.43949698692151346, [(2, 2), (3, 20)]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 7: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
finished with 9 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 17)
[0.9666666666666667, 0.9666666666666667, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.9066666666666667, 0.8933333333333334, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9666666666666667
finished with 18
iteration 4 finished
*** starting iteration: 1; err: [Inf, 1.1688064471925284] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.1688064471925284, 0.19911602930507932] ***
*** starting iteration: 2; err: [Inf, 1.1688064471925284, 0.19911602930507932] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.1688064471925284, 0.19911602930507932, 0.18288909318009508] ***
*** starting iteration: 3; err: [Inf, 1.1688064471925284, 0.19911602930507932, 0.18288909318009508] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.1688064471925284, 0.19911602930507932, 0.18288909318009508, 0.18255180063190932] ***
*** finished computation of 7 references, err: [Inf, 1.1688064471925284, 0.19911602930507932, 0.18288909318009508, 0.18255180063190932] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 8]]
** centroid: 1, normalized-entropy: 0.8453509366224364, [(2, 3), (3, 8)]
*** center 2: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 4, 2]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(2, 4), (3, 2)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.42733344697684617] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.42733344697684617, 0.27261756021246536] ***
*** starting iteration: 2; err: [Inf, 0.42733344697684617, 0.27261756021246536] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.42733344697684617, 0.27261756021246536, 0.24618111958234837] ***
*** starting iteration: 3; err: [Inf, 0.42733344697684617, 0.27261756021246536, 0.24618111958234837] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.42733344697684617, 0.27261756021246536, 0.24618111958234837, 0.2446174843305322] ***
*** starting iteration: 4; err: [Inf, 0.42733344697684617, 0.27261756021246536, 0.24618111958234837, 0.2446174843305322] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.42733344697684617, 0.27261756021246536, 0.24618111958234837, 0.2446174843305322, 0.2438041353834014] ***
*** finished computation of 7 references, err: [Inf, 0.42733344697684617, 0.27261756021246536, 0.24618111958234837, 0.2446174843305322, 0.2438041353834014] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 17, 11]]
** centroid: 3, normalized-entropy: 0.9666186325481027, [(2, 17), (3, 11)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 3, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4874760637053046] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4874760637053046, 0.23008396364529893] ***
*** starting iteration: 2; err: [Inf, 0.4874760637053046, 0.23008396364529893] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4874760637053046, 0.23008396364529893, 0.20436733863801446] ***
*** starting iteration: 3; err: [Inf, 0.4874760637053046, 0.23008396364529893, 0.20436733863801446] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4874760637053046, 0.23008396364529893, 0.20436733863801446, 0.19385040543342621] ***
*** starting iteration: 4; err: [Inf, 0.4874760637053046, 0.23008396364529893, 0.20436733863801446, 0.19385040543342621] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4874760637053046, 0.23008396364529893, 0.20436733863801446, 0.19385040543342621, 0.18218349634694161] ***
*** starting iteration: 5; err: [Inf, 0.4874760637053046, 0.23008396364529893, 0.20436733863801446, 0.19385040543342621, 0.18218349634694161] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4874760637053046, 0.23008396364529893, 0.20436733863801446, 0.19385040543342621, 0.18218349634694161, 0.18095030282534594] ***
*** starting iteration: 6; err: [Inf, 0.4874760637053046, 0.23008396364529893, 0.20436733863801446, 0.19385040543342621, 0.18218349634694161, 0.18095030282534594] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4874760637053046, 0.23008396364529893, 0.20436733863801446, 0.19385040543342621, 0.18218349634694161, 0.18095030282534594, 0.18031663453856123] ***
*** finished computation of 7 references, err: [Inf, 0.4874760637053046, 0.23008396364529893, 0.20436733863801446, 0.19385040543342621, 0.18218349634694161, 0.18095030282534594, 0.18031663453856123] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 4: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 12, 12]]
** centroid: 6, normalized-entropy: 1.0, [(2, 12), (3, 12)]
*** center 7: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 18)
[0.9666666666666667, 0.9666666666666667, 0.9666666666666667, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.9066666666666667, 0.8933333333333334, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9666666666666667
finished with 18
iteration 5 finished
generating 4 configurations using top 4 configurations, starting with 18)
[0.9666666666666667, 0.9666666666666667, 0.9666666666666667, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.9066666666666667, 0.8933333333333334, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9666666666666667
finished with 20
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.3659091035619146] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3659091035619146, 0.21176885206943527] ***
*** finished computation of 7 references, err: [Inf, 0.3659091035619146, 0.21176885206943527] ***
*** center 1: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 9, 13]]
** centroid: 3, normalized-entropy: 0.976020648236615, [(2, 9), (3, 13)]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 17]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 10, 1]]
** centroid: 5, normalized-entropy: 0.43949698692151346, [(2, 10), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 3, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.348790548065137] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.348790548065137, 0.20663668682964587] ***
*** finished computation of 7 references, err: [Inf, 0.348790548065137, 0.20663668682964587] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 9, 9]]
** centroid: 2, normalized-entropy: 1.0, [(2, 9), (3, 9)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 3, 3]]
** centroid: 5, normalized-entropy: 1.0, [(2, 3), (3, 3)]
*** center 6: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.8328559318068807] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8328559318068807, 0.5873218149820567] ***
*** finished computation of 7 references, err: [Inf, 0.8328559318068807, 0.5873218149820567] ***
*** center 1: selecting labels [1] (freq >= 1) [from [6, 0, 0]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 3, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [2, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 29, 38]]
** centroid: 4, normalized-entropy: 0.9869444983748495, [(2, 29), (3, 38)]
*** center 5: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.823100003289439] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.823100003289439, 0.4140802717493799] ***
*** finished computation of 7 references, err: [Inf, 0.823100003289439, 0.4140802717493799] ***
*** center 1: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 2, 17]]
** centroid: 2, normalized-entropy: 0.48546076074591343, [(2, 2), (3, 17)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 6, 13]]
** centroid: 3, normalized-entropy: 0.8997437586982626, [(2, 6), (3, 13)]
*** center 4: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 7, 1]]
** centroid: 5, normalized-entropy: 0.5435644431995963, [(2, 7), (3, 1)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.45480000051620695] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.45480000051620695, 0.28729636758669125] ***
*** finished computation of 7 references, err: [Inf, 0.45480000051620695, 0.28729636758669125] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 17, 8]]
** centroid: 1, normalized-entropy: 0.9043814577244941, [(2, 17), (3, 8)]
*** center 2: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 4, 3]]
** centroid: 7, normalized-entropy: 0.9852281360342514, [(2, 4), (3, 3)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5726000035185139] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5726000035185139, 0.30377288222880455] ***
*** finished computation of 7 references, err: [Inf, 0.5726000035185139, 0.30377288222880455] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 5, 10]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(2, 5), (3, 10)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 3: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 8, 6]]
** centroid: 7, normalized-entropy: 0.9852281360342514, [(2, 8), (3, 6)]
finished with 9 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 20)
[0.9666666666666667, 0.9666666666666667, 0.9666666666666667, 0.96, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.9066666666666667, 0.8933333333333334, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9666666666666667
finished with 22
iteration 7 finished
*** starting iteration: 1; err: [Inf, 2.4278000077277913] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.4278000077277913, 0.6507701189727639] ***
*** starting iteration: 2; err: [Inf, 2.4278000077277913, 0.6507701189727639] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.4278000077277913, 0.6507701189727639, 0.5661984642822827] ***
*** starting iteration: 3; err: [Inf, 2.4278000077277913, 0.6507701189727639, 0.5661984642822827] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.4278000077277913, 0.6507701189727639, 0.5661984642822827, 0.5489718791742786] ***
*** finished computation of 3 references, err: [Inf, 2.4278000077277913, 0.6507701189727639, 0.5661984642822827, 0.5489718791742786] ***
*** center 1: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 24, 1]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 9, 30]]
** centroid: 3, normalized-entropy: 0.7793498372920851, [(2, 9), (3, 30)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.1169999961439572] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1169999961439572, 0.5835453420351717] ***
*** starting iteration: 2; err: [Inf, 1.1169999961439572, 0.5835453420351717] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1169999961439572, 0.5835453420351717, 0.5453416236657458] ***
*** starting iteration: 3; err: [Inf, 1.1169999961439572, 0.5835453420351717, 0.5453416236657458] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1169999961439572, 0.5835453420351717, 0.5453416236657458, 0.5432391779342186] ***
*** finished computation of 3 references, err: [Inf, 1.1169999961439572, 0.5835453420351717, 0.5453416236657458, 0.5432391779342186] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 30, 3]]
** centroid: 1, normalized-entropy: 0.43949698692151346, [(2, 30), (3, 3)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 5, 28]]
** centroid: 2, normalized-entropy: 0.6136190195993708, [(2, 5), (3, 28)]
*** center 3: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 3.907800009273748] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.907800009273748, 1.055736124599537] ***
*** starting iteration: 2; err: [Inf, 3.907800009273748, 1.055736124599537] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.907800009273748, 1.055736124599537, 0.5652352974647947] ***
*** starting iteration: 3; err: [Inf, 3.907800009273748, 1.055736124599537, 0.5652352974647947] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.907800009273748, 1.055736124599537, 0.5652352974647947, 0.5373027302136599] ***
*** finished computation of 3 references, err: [Inf, 3.907800009273748, 1.055736124599537, 0.5652352974647947, 0.5373027302136599] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 30, 11]]
** centroid: 1, normalized-entropy: 0.8390040613676978, [(2, 30), (3, 11)]
*** center 2: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 2, 27]]
** centroid: 3, normalized-entropy: 0.36205125173399805, [(2, 2), (3, 27)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.7697666381494765] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.7697666381494765, 0.7433813221465552] ***
*** starting iteration: 2; err: [Inf, 2.7697666381494765, 0.7433813221465552] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.7697666381494765, 0.7433813221465552, 0.385227039715877] ***
*** starting iteration: 3; err: [Inf, 2.7697666381494765, 0.7433813221465552, 0.385227039715877] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.7697666381494765, 0.7433813221465552, 0.385227039715877, 0.3663311203567784] ***
*** finished computation of 3 references, err: [Inf, 2.7697666381494765, 0.7433813221465552, 0.385227039715877, 0.3663311203567784] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 33, 10]]
** centroid: 1, normalized-entropy: 0.7824441294066888, [(2, 33), (3, 10)]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 21]]
*** center 3: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7051016597665797] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7051016597665797, 0.4310467838011748] ***
*** starting iteration: 2; err: [Inf, 0.7051016597665797, 0.4310467838011748] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7051016597665797, 0.4310467838011748, 0.40859413785086096] ***
*** starting iteration: 3; err: [Inf, 0.7051016597665797, 0.4310467838011748, 0.40859413785086096] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7051016597665797, 0.4310467838011748, 0.40859413785086096, 0.38152085937039254] ***
*** finished computation of 3 references, err: [Inf, 0.7051016597665797, 0.4310467838011748, 0.40859413785086096, 0.38152085937039254] ***
*** center 1: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 35, 9]]
** centroid: 2, normalized-entropy: 0.7309263775906009, [(2, 35), (3, 9)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 22]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.9733821759301853] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.9733821759301853, 0.6523848064107628] ***
*** starting iteration: 2; err: [Inf, 1.9733821759301853, 0.6523848064107628] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.9733821759301853, 0.6523848064107628, 0.37510910842140816] ***
*** starting iteration: 3; err: [Inf, 1.9733821759301853, 0.6523848064107628, 0.37510910842140816] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.9733821759301853, 0.6523848064107628, 0.37510910842140816, 0.36485778308081407] ***
*** finished computation of 3 references, err: [Inf, 1.9733821759301853, 0.6523848064107628, 0.37510910842140816, 0.36485778308081407] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 30, 10]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(2, 30), (3, 10)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 2, 28]]
** centroid: 2, normalized-entropy: 0.3533593350214213, [(2, 2), (3, 28)]
*** center 3: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
finished with 4 centroids; started with 3
generating 4 configurations using top 4 configurations, starting with 22)
[0.9666666666666667, 0.9666666666666667, 0.9666666666666667, 0.96, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.9066666666666667, 0.9066666666666667, 0.8933333333333334, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9666666666666667
finished with 23
iteration 8 finished
*** starting iteration: 1; err: [Inf, 1.3818010832025982] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3818010832025982, 0.6763225778099745] ***
*** starting iteration: 2; err: [Inf, 1.3818010832025982, 0.6763225778099745] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3818010832025982, 0.6763225778099745, 0.6721174931149004] ***
*** starting iteration: 3; err: [Inf, 1.3818010832025982, 0.6763225778099745, 0.6721174931149004] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3818010832025982, 0.6763225778099745, 0.6721174931149004, 0.6683608864940596] ***
*** starting iteration: 4; err: [Inf, 1.3818010832025982, 0.6763225778099745, 0.6721174931149004, 0.6683608864940596] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3818010832025982, 0.6763225778099745, 0.6721174931149004, 0.6683608864940596, 0.6635118070875221] ***
*** starting iteration: 5; err: [Inf, 1.3818010832025982, 0.6763225778099745, 0.6721174931149004, 0.6683608864940596, 0.6635118070875221] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3818010832025982, 0.6763225778099745, 0.6721174931149004, 0.6683608864940596, 0.6635118070875221, 0.6610476977644524] ***
*** starting iteration: 6; err: [Inf, 1.3818010832025982, 0.6763225778099745, 0.6721174931149004, 0.6683608864940596, 0.6635118070875221, 0.6610476977644524] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3818010832025982, 0.6763225778099745, 0.6721174931149004, 0.6683608864940596, 0.6635118070875221, 0.6610476977644524, 0.6605306407221329] ***
*** finished computation of 3 references, err: [Inf, 1.3818010832025982, 0.6763225778099745, 0.6721174931149004, 0.6683608864940596, 0.6635118070875221, 0.6610476977644524, 0.6605306407221329] ***
*** center 1: selecting labels [1] (freq >= 2) [from [18, 1, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [18, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 32, 31]]
** centroid: 3, normalized-entropy: 0.9998182469603427, [(2, 32), (3, 31)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.6409790170514094] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.6409790170514094, 0.8139610487202613] ***
*** starting iteration: 2; err: [Inf, 2.6409790170514094, 0.8139610487202613] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.6409790170514094, 0.8139610487202613, 0.4256704262227147] ***
*** starting iteration: 3; err: [Inf, 2.6409790170514094, 0.8139610487202613, 0.4256704262227147] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.6409790170514094, 0.8139610487202613, 0.4256704262227147, 0.37821941379518653] ***
*** starting iteration: 4; err: [Inf, 2.6409790170514094, 0.8139610487202613, 0.4256704262227147, 0.37821941379518653] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.6409790170514094, 0.8139610487202613, 0.4256704262227147, 0.37821941379518653, 0.3693677280280149] ***
*** starting iteration: 5; err: [Inf, 2.6409790170514094, 0.8139610487202613, 0.4256704262227147, 0.37821941379518653, 0.3693677280280149] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.6409790170514094, 0.8139610487202613, 0.4256704262227147, 0.37821941379518653, 0.3693677280280149, 0.3676490430936839] ***
*** starting iteration: 6; err: [Inf, 2.6409790170514094, 0.8139610487202613, 0.4256704262227147, 0.37821941379518653, 0.3693677280280149, 0.3676490430936839] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.6409790170514094, 0.8139610487202613, 0.4256704262227147, 0.37821941379518653, 0.3693677280280149, 0.3676490430936839, 0.3676490430936839] ***
*** finished computation of 3 references, err: [Inf, 2.6409790170514094, 0.8139610487202613, 0.4256704262227147, 0.37821941379518653, 0.3693677280280149, 0.3676490430936839, 0.3676490430936839] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 34, 8]]
** centroid: 1, normalized-entropy: 0.7024665512903904, [(2, 34), (3, 8)]
*** center 2: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 23]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.8033622747947953] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.8033622747947953, 0.7022225497278528] ***
*** starting iteration: 2; err: [Inf, 2.8033622747947953, 0.7022225497278528] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.8033622747947953, 0.7022225497278528, 0.36821082220225276] ***
*** starting iteration: 3; err: [Inf, 2.8033622747947953, 0.7022225497278528, 0.36821082220225276] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.8033622747947953, 0.7022225497278528, 0.36821082220225276, 0.3610298927821637] ***
*** starting iteration: 4; err: [Inf, 2.8033622747947953, 0.7022225497278528, 0.36821082220225276, 0.3610298927821637] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.8033622747947953, 0.7022225497278528, 0.36821082220225276, 0.3610298927821637, 0.35937058280992173] ***
*** starting iteration: 5; err: [Inf, 2.8033622747947953, 0.7022225497278528, 0.36821082220225276, 0.3610298927821637, 0.35937058280992173] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.8033622747947953, 0.7022225497278528, 0.36821082220225276, 0.3610298927821637, 0.35937058280992173, 0.35937058280992173] ***
*** finished computation of 3 references, err: [Inf, 2.8033622747947953, 0.7022225497278528, 0.36821082220225276, 0.3610298927821637, 0.35937058280992173, 0.35937058280992173] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 29, 10]]
** centroid: 1, normalized-entropy: 0.8212809417449864, [(2, 29), (3, 10)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 3, 28]]
** centroid: 2, normalized-entropy: 0.45868581620054033, [(2, 3), (3, 28)]
*** center 3: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
finished with 3 centroids; started with 3
generating 4 configurations using top 4 configurations, starting with 23)
[0.9666666666666667, 0.9666666666666667, 0.9666666666666667, 0.96, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.94, 0.94, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.9066666666666667, 0.9066666666666667, 0.8933333333333334, 0.8866666666666667, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9666666666666667
finished with 23
iteration 9 finished
[ Info: ========== BEST MODEL ==========
[ Info: (AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :rand, 0.6, 1), 0.9666666666666667)
Test Summary: | Pass  Total
AKNC          |    1      1
[ Info: AKNC{Array{Float64,1}}[AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[5.4625, 2.575, 3.9, 1.2874999999999999], [7.583333333333335, 3.1166666666666667, 6.416666666666667, 2.15], [5.0, 2.4, 3.1999999999999997, 1.0333333333333334], [5.900000000000001, 2.8166666666666664, 4.224999999999999, 1.2916666666666667], [6.679999999999999, 3.033333333333333, 5.62, 2.1533333333333338], [6.418181818181818, 2.9454545454545458, 4.736363636363635, 1.4727272727272729], [5.966666666666665, 2.6888888888888887, 5.0, 1.8888888888888888], [4.955555555555557, 3.327777777777778, 1.4388888888888889, 0.22777777777777775]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2, 3, 2, 2, 3, 2, 3, 1], 3), KCenters.var"#fun#70"{typeof(l2_distance)}(SimilaritySearch.l2_distance), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :rand, 0.6, 1)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[5.573333333333333, 2.546666666666667, 3.873333333333333, 1.1733333333333333], [6.540000000000001, 3.1700000000000004, 5.43, 2.2499999999999996], [5.859999999999999, 3.04, 4.680000000000001, 1.5999999999999999], [5.700000000000001, 2.7399999999999998, 4.859999999999999, 1.8399999999999999], [6.425, 2.8499999999999996, 4.606250000000001, 1.44375], [7.450000000000001, 3.075, 6.2375, 1.9999999999999998], [6.314285714285712, 2.7714285714285714, 5.385714285714286, 1.7714285714285716], [4.991176470588235, 3.4000000000000004, 1.4794117647058822, 0.24705882352941172]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2, 3, 2, 3, 2, 3, 3, 1], 3), KCenters.var"#fun#70"{typeof(l2_distance)}(SimilaritySearch.l2_distance), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :rand, 0.6, 1)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[7.466666666666667, 3.188888888888889, 6.322222222222221, 2.022222222222222], [5.083333333333331, 3.546666666666667, 1.4766666666666666, 0.26000000000000006], [6.611111111111112, 2.9555555555555553, 4.677777777777778, 1.488888888888889], [5.991666666666666, 2.741666666666667, 5.058333333333334, 1.8166666666666664], [5.2, 2.3400000000000003, 3.46, 1.04], [5.67, 2.69, 4.12, 1.2], [6.552941176470589, 3.105882352941176, 5.541176470588236, 2.164705882352941], [5.8500000000000005, 3.0, 4.5, 1.4625000000000001]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [3, 1, 2, 3, 2, 2, 3, 2], 3), KCenters.var"#fun#70"{typeof(l2_distance)}(SimilaritySearch.l2_distance), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, 1, 7, 10, 1.0, :rand, 0.6, 1))]
[65, 1, 1, 1, 13, 1, 1, 1, 1, 1, 19, 15, 3, 2, 12, 20, 28, 42, 50, 59, 34, 1, 25, 39, 33, 19, 10, 22, 24, 25, 26, 7, 42, 28, 1, 20, 13, 33, 40, 46, 36, 32, 28, 20, 39, 34, 36, 16, 30, 32, 44, 2, 47, 30, 45, 18, 23, 22, 43, 33, 37, 35, 38, 47, 8, 22, 1, 34, 33, 18, 33, 41, 27, 43, 37, 41, 36, 46, 41, 36, 51, 14, 9, 1, 71, 30, 41, 11, 27, 14, 30, 27, 6, 34, 46, 24, 50, 43, 34, 51, 40, 41, 24, 47, 44, 42, 35, 37, 61, 24, 33, 25, 10, 24, 70, 23, 29, 44, 19, 14, 4, 25, 40, 23, 36, 24, 40, 23, 26, 26, 26, 51, 37, 32, 26, 39, 30, 30, 22, 40, 49, 38, 15, 39, 43, 25, 29, 50, 32, 44, 37, 39, 21, 40, 45, 16, 46, 40, 35, 52, 34, 46, 41, 33, 42, 44, 38, 51, 20, 38, 38, 47, 37, 42, 42, 64, 39, 35, 24, 38, 29, 15, 39, 8, 52, 44, 31, 44, 32, 44, 53, 25, 52, 40, 31, 26, 40, 73, 29, 39, 18, 29, 14, 66, 28, 24, 46, 36, 23, 32, 43, 76, 47, 28, 32, 31, 44, 45, 34, 36, 53, 35, 92, 44, 8, 70, 36, 35, 38, 36, 59, 25, 26, 45, 46, 26, 33, 6, 26, 39, 11, 52, 1, 31, 40, 40, 40, 35, 63, 26, 28, 38, 38, 41, 54, 53, 37, 58, 36, 32, 15, 40, 33, 46, 61, 26, 35, 22, 38, 39, 37, 27, 52, 26, 46, 36, 62, 1, 28, 23, 49, 45, 32, 34, 21, 23, 71, 50, 37, 42, 39, 30, 30, 48, 19, 45, 31, 55, 37, 43]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6369999999999998, speedup = 0.37719356010994937, eval_ratio = 0.041796)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.3671875000000002,"recall":0.3671875000000002,"f1":null,"seconds":6.949529051780701e-5,"exhaustive_search_seconds":0.00037671998143196106,"evaluations":338.9609375,"distances_sum":1770.7648501421086}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5303819444444444,"recall":0.5303819444444444,"f1":0.5303819444444444,"seconds":0.00010286644101142883,"exhaustive_search_seconds":0.00037671998143196106,"evaluations":378.9609375,"distances_sum":1644.44407860622}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6284722222222222,"recall":0.6284722222222222,"f1":0.6284722222222222,"seconds":0.0001292489469051361,"exhaustive_search_seconds":0.00037671998143196106,"evaluations":419.8671875,"distances_sum":1599.77136404081}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7239583333333324,"recall":0.7239583333333324,"f1":0.7239583333333324,"seconds":0.00016339868307113647,"exhaustive_search_seconds":0.00037671998143196106,"evaluations":460.1484375,"distances_sum":1571.2970232215798}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7812499999999988,"recall":0.7812499999999988,"f1":0.7812499999999988,"seconds":0.00019791722297668457,"exhaustive_search_seconds":0.00037671998143196106,"evaluations":498.90625,"distances_sum":1555.3462761949713}
KCenters.DeloneInvIndex> reached performance {"precision":0.8298611111111103,"recall":0.8298611111111103,"f1":0.8298611111111103,"seconds":0.0002328529953956604,"exhaustive_search_seconds":0.00037671998143196106,"evaluations":538.625,"distances_sum":1543.6919676570265}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.83, speedup = 1.5884062734303586, eval_ratio = 0.053439)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
   Testing KCenters tests passed 
