Julia Version 1.3.1-pre.12
Commit ac555be960 (2019-12-04 10:45 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-6.0.1 (ORCJIT, skylake)

   Cloning default registries into `~/.julia`
   Cloning registry from "https://github.com/JuliaRegistries/General.git"
[?25l    Fetching: [>                                        ]  0.0 %    Fetching: [=============>                           ]  31.0 %    Fetching: [==============================>          ]  73.0 %[2K[?25h     Added registry `General` to `~/.julia/registries/General`
 Resolving package versions...
 Installed Calculus ───────── v0.5.1
 Installed OpenSpecFun_jll ── v0.5.3+1
 Installed NaNMath ────────── v0.3.3
 Installed Compat ─────────── v2.2.0
 Installed SpecialFunctions ─ v0.9.0
 Installed HyperDualNumbers ─ v4.0.0
  Updating `~/.julia/environments/v1.3/Project.toml`
  [50ceba7f] + HyperDualNumbers v4.0.0
  Updating `~/.julia/environments/v1.3/Manifest.toml`
  [49dc2e85] + Calculus v0.5.1
  [34da2185] + Compat v2.2.0
  [50ceba7f] + HyperDualNumbers v4.0.0
  [77ba4419] + NaNMath v0.3.3
  [efe28fd5] + OpenSpecFun_jll v0.5.3+1
  [276daf66] + SpecialFunctions v0.9.0
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
   Testing HyperDualNumbers
 Resolving package versions...
 Installed JSON ──────────────── v0.21.0
 Installed Literate ──────────── v2.2.1
 Installed DocStringExtensions ─ v0.8.1
 Installed Parsers ───────────── v0.3.10
 Installed Documenter ────────── v0.24.2
    Status `/tmp/jl_TjMBPj/Manifest.toml`
  [49dc2e85] Calculus v0.5.1
  [34da2185] Compat v2.2.0
  [ffbed154] DocStringExtensions v0.8.1
  [e30172f5] Documenter v0.24.2
  [50ceba7f] HyperDualNumbers v4.0.0
  [682c06a0] JSON v0.21.0
  [98b081ad] Literate v2.2.1
  [77ba4419] NaNMath v0.3.3
  [efe28fd5] OpenSpecFun_jll v0.5.3+1
  [69de0a69] Parsers v0.3.10
  [276daf66] SpecialFunctions v0.9.0
  [2a0f44e3] Base64  [`@stdlib/Base64`]
  [ade2ca70] Dates  [`@stdlib/Dates`]
  [8bb1440f] DelimitedFiles  [`@stdlib/DelimitedFiles`]
  [8ba89e20] Distributed  [`@stdlib/Distributed`]
  [b77e0a4c] InteractiveUtils  [`@stdlib/InteractiveUtils`]
  [76f85450] LibGit2  [`@stdlib/LibGit2`]
  [8f399da3] Libdl  [`@stdlib/Libdl`]
  [37e2e46d] LinearAlgebra  [`@stdlib/LinearAlgebra`]
  [56ddb016] Logging  [`@stdlib/Logging`]
  [d6f4376e] Markdown  [`@stdlib/Markdown`]
  [a63ad114] Mmap  [`@stdlib/Mmap`]
  [44cfe95a] Pkg  [`@stdlib/Pkg`]
  [de0858da] Printf  [`@stdlib/Printf`]
  [3fa0cd96] REPL  [`@stdlib/REPL`]
  [9a3f8284] Random  [`@stdlib/Random`]
  [ea8e919c] SHA  [`@stdlib/SHA`]
  [9e88b42a] Serialization  [`@stdlib/Serialization`]
  [1a1011a3] SharedArrays  [`@stdlib/SharedArrays`]
  [6462fe0b] Sockets  [`@stdlib/Sockets`]
  [2f01184e] SparseArrays  [`@stdlib/SparseArrays`]
  [10745b16] Statistics  [`@stdlib/Statistics`]
  [8dfed614] Test  [`@stdlib/Test`]
  [cf7118a7] UUIDs  [`@stdlib/UUIDs`]
  [4ec0a83e] Unicode  [`@stdlib/Unicode`]
Running tests:
  * test_basics.jl *

Examples of show() for hyperdual numbers with NaN:

hdNaN = NaN + 0.0ε₁ + 0.0ε₂ + 0.0ε₁ε₂
hdNaN + hd4 = NaN + 4.0ε₁ + 3.0ε₂ + 4.0ε₁ε₂

Testing includes Tim Holy's division performance improvement.
Testing includes ngedwin98's fixes for asin, acos and atan.



  * test_TimHoly_example.jl *
8//25 - 8//5ε₁ - 8//5ε₂ + 144//25ε₁ε₂



  * test_Paper_example.jl *

"THE" example
f(1.5) = 4.497780053946162

t0 = 1.5 + 1.0ε₁ + 1.0ε₂ + 0.0ε₁ε₂
t1 = 4.4816890703380645 + 4.4816890703380645ε₁ + 4.4816890703380645ε₂ + 4.4816890703380645ε₁ε₂
t2 = 0.9974949866040544 + 0.0707372016677029ε₁ + 0.0707372016677029ε₂ - 0.9974949866040544ε₁ε₂
t3 = 0.9925037693693152 + 0.21114975082386195ε₁ + 0.21114975082386195ε₂ - 2.947564004699509ε₁ε₂
t4 = 0.0707372016677029 - 0.9974949866040544ε₁ - 0.9974949866040544ε₂ - 0.0707372016677029ε₁ε₂
t5 = 0.000353951393082256 - 0.014973651704218029ε₁ - 0.014973651704218029ε₂ + 0.4212376474684772ε₁ε₂
t5a = 0.000353951393082256 - 0.014973651704218029ε₁ - 0.014973651704218029ε₂ + 0.4212376474684772ε₁ε₂
t6 = 0.9928577207623974 + 0.19617609911964393ε₁ + 0.19617609911964393ε₂ - 2.526326357231032ε₁ε₂
t7 = 1.0035903837494204 - 0.0991483686337086ε₁ - 0.0991483686337086ε₂ + 1.3062034995890381ε₁ε₂
t8 = 4.497780053946162 + 4.053427893898621ε₁ + 4.053427893898621ε₂ + 9.463073681596601ε₁ε₂

f(t0) = 4.497780053946161 + 4.05342789389862ε₁ + 4.05342789389862ε₂ + 9.463073681596601ε₁ε₂



  * test_Erf_example.jl *
24.274806105338804   = 24.274806105338804
0.8416019755317149   = 0.8416019755317149
0.008545857737238424   = 0.00854585773723843
Test Erf Passed



  * tests_for_coverage.jl *

Random examples of show() for hyperdual numbers:

h = NaN + NaN*ε₁ - 1.0ε₂ + NaN*ε₁ε₂
h = 1.0 - Inf*ε₁ + Inf*ε₂ + Inf*ε₁ε₂
h = NaN + 1.0ε₁ + 1.0ε₂ - Inf*ε₁ε₂
h = -Inf + 1.0ε₁ - Inf*ε₂ + 1.0ε₁ε₂
h = 0.0 + Inf*ε₁ + 1.0ε₂ - Inf*ε₁ε₂
h = -1.0 + NaN*ε₁ + 1.0ε₂ - 1.0ε₁ε₂
h = -1.0 + 1.0ε₁ + 0.0ε₂ + 1.0ε₁ε₂
h = -1.0 + 0.0ε₁ + 1.0ε₂ - 1.0ε₁ε₂
h = 0.0 + NaN*ε₁ + Inf*ε₂ - 1.0ε₁ε₂
h = -1.0 + 0.0ε₁ + Inf*ε₂ + Inf*ε₁ε₂
h = -1.0 + 1.0im + Infε₁ + 0.0imε₁ + 0.0ε₂ + 1.0imε₂ + 0.0ε₁ε₂ + 0.0imε₁ε₂
h = 1.0 + 1.0im + 0.0ε₁ + 1.0imε₁ + 1.0ε₂ + 1.0imε₂ - 1.0ε₁ε₂ + 1.0imε₁ε₂
h = 0.0 - 1.0im - 1.0ε₁ - 1.0imε₁ + 1.0ε₂ - 1.0imε₂ + 0.0ε₁ε₂ + 0.0imε₁ε₂
h = -Inf + 0.0im + Infε₁ + 0.0imε₁ + 0.0ε₂ + 1.0imε₂ - Infε₁ε₂ + 0.0imε₁ε₂
h = 0.0 + 1.0im + 0.0ε₁ + 1.0imε₁ + 0.0ε₂ + 1.0imε₂ + 1.0ε₁ε₂ + 0.0imε₁ε₂
h = NaN + 0.0im - 1.0ε₁ - 1.0imε₁ - 1.0ε₂ + 0.0imε₂ + 0.0ε₁ε₂ - 1.0imε₁ε₂
h = -1.0 - 1.0im - Infε₁ + 0.0imε₁ + NaNε₂ + 0.0imε₂ + 1.0ε₁ε₂ + 1.0imε₁ε₂
h = -1.0 - 1.0im + NaNε₁ + 0.0imε₁ + 1.0ε₂ - 1.0imε₂ + Infε₁ε₂ + 0.0imε₁ε₂
h = 1.0 - 1.0im + 0.0ε₁ + 1.0imε₁ + Infε₂ + 0.0imε₂ - 1.0ε₁ε₂ + 1.0imε₁ε₂
h = -Inf + 0.0im - 1.0ε₁ + 1.0imε₁ - 1.0ε₂ - 1.0imε₂ + 1.0ε₁ε₂ + 1.0imε₁ε₂
h = 0 + 1im + 1ε₁ + 1imε₁ + 1ε₂ + 1imε₂ + 1ε₁ε₂ + 0imε₁ε₂
h = 1 + 0im + 1ε₁ + 1imε₁ + 1ε₂ + 0imε₂ + 1ε₁ε₂ + 0imε₁ε₂
h = 0 + 1im + 1ε₁ + 0imε₁ + 1ε₂ + 1imε₂ + 0ε₁ε₂ + 1imε₁ε₂
h = 0 + 0im + 1ε₁ + 0imε₁ + 1ε₂ + 0imε₂ + 1ε₁ε₂ + 1imε₁ε₂
h = 1 + 0im + 0ε₁ + 1imε₁ + 1ε₂ + 0imε₂ + 0ε₁ε₂ + 1imε₁ε₂
h = 0 + 0im + 0ε₁ + 1imε₁ + 1ε₂ + 1imε₂ + 1ε₁ε₂ + 1imε₁ε₂
h = 1 + 1im + 0ε₁ + 1imε₁ + 0ε₂ + 1imε₂ + 1ε₁ε₂ + 1imε₁ε₂
h = 1 + 1im + 0ε₁ + 1imε₁ + 0ε₂ + 1imε₂ + 1ε₁ε₂ + 0imε₁ε₂
h = 1 + 1im + 0ε₁ + 1imε₁ + 0ε₂ + 0imε₂ + 1ε₁ε₂ + 0imε₁ε₂
h = 0 + 1im + 0ε₁ + 1imε₁ + 1ε₂ + 0imε₂ + 0ε₁ε₂ + 0imε₁ε₂

Examples of show() for special printing for boolean hyperdual numbers:

h = Hyper{Bool}(true,false,false,false)
h = ɛ₁
h = ɛ₂
h = ɛ₁ε₂
h = im
h = imɛ₁
h = imɛ₂
h = imε₁ɛ₂



  * test_function_list.jl *



  * tests_from_DualNumbers.jl *



Test Summary:       |   Pass   Total
HyperDualNumbers.jl | 136488  136488
Tests finished
   Testing HyperDualNumbers tests passed 
