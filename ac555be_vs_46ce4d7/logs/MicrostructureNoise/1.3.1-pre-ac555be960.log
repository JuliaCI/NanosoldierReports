Running tests with Julia v1.3.1-pre.12
   Cloning default registries into `~/.julia`
   Cloning registry from "https://github.com/JuliaRegistries/General.git"
[?25l    Fetching: [>                                        ]  0.0 %    Fetching: [=============>                           ]  31.0 %    Fetching: [==============================>          ]  72.6 %[2K[?25h     Added registry `General` to `~/.julia/registries/General`
 Resolving package versions...
 Installed URIParser â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.4.0
 Installed OpenBLAS_jll â”€â”€â”€â”€â”€â”€â”€â”€ v0.3.7+1
 Installed Compat â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v2.2.0
 Installed OrderedCollections â”€â”€ v1.1.0
 Installed BinDeps â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.8.10
 Installed QuadGK â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v2.1.1
 Installed SpecialFunctions â”€â”€â”€â”€ v0.8.0
 Installed MicrostructureNoise â”€ v0.10.0
 Installed Missings â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.4.3
 Installed Arpack_jll â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v3.5.0+2
 Installed DataAPI â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.1.0
 Installed StatsFuns â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.9.2
 Installed Arpack â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.4.0
 Installed FillArrays â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.8.2
 Installed DataStructures â”€â”€â”€â”€â”€â”€ v0.17.6
 Installed Distributions â”€â”€â”€â”€â”€â”€â”€ v0.21.10
 Installed Rmath â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.6.0
 Installed SortingAlgorithms â”€â”€â”€ v0.3.1
 Installed BinaryProvider â”€â”€â”€â”€â”€â”€ v0.5.8
 Installed PDMats â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.9.10
 Installed StatsBase â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.32.0
  Updating `~/.julia/environments/v1.3/Project.toml`
  [47737169] + MicrostructureNoise v0.10.0
  Updating `~/.julia/environments/v1.3/Manifest.toml`
  [7d9fca2a] + Arpack v0.4.0
  [68821587] + Arpack_jll v3.5.0+2
  [9e28174c] + BinDeps v0.8.10
  [b99e7846] + BinaryProvider v0.5.8
  [34da2185] + Compat v2.2.0
  [9a962f9c] + DataAPI v1.1.0
  [864edb3b] + DataStructures v0.17.6
  [31c24e10] + Distributions v0.21.10
  [1a297f60] + FillArrays v0.8.2
  [47737169] + MicrostructureNoise v0.10.0
  [e1d29d7a] + Missings v0.4.3
  [4536629a] + OpenBLAS_jll v0.3.7+1
  [bac558e1] + OrderedCollections v1.1.0
  [90014a1f] + PDMats v0.9.10
  [1fd47b50] + QuadGK v2.1.1
  [79098fc4] + Rmath v0.6.0
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.8.0
  [2913bbd2] + StatsBase v0.32.0
  [4c63d2b9] + StatsFuns v0.9.2
  [30578b45] + URIParser v0.4.0
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [4607b0f0] + SuiteSparse 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
  Building SpecialFunctions â†’ `~/.julia/packages/SpecialFunctions/ne2iw/deps/build.log`
  Building Rmath â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â†’ `~/.julia/packages/Rmath/BoBag/deps/build.log`
   Testing MicrostructureNoise
 Resolving package versions...
 Installed Parsers â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.3.10
 Installed DocStringExtensions â”€ v0.8.1
 Installed Documenter â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.24.2
 Installed JSON â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.21.0
    Status `/tmp/jl_8LVXxT/Manifest.toml`
  [7d9fca2a] Arpack v0.4.0
  [68821587] Arpack_jll v3.5.0+2
  [9e28174c] BinDeps v0.8.10
  [b99e7846] BinaryProvider v0.5.8
  [34da2185] Compat v2.2.0
  [9a962f9c] DataAPI v1.1.0
  [864edb3b] DataStructures v0.17.6
  [31c24e10] Distributions v0.21.10
  [ffbed154] DocStringExtensions v0.8.1
  [e30172f5] Documenter v0.24.2
  [1a297f60] FillArrays v0.8.2
  [682c06a0] JSON v0.21.0
  [47737169] MicrostructureNoise v0.10.0
  [e1d29d7a] Missings v0.4.3
  [4536629a] OpenBLAS_jll v0.3.7+1
  [bac558e1] OrderedCollections v1.1.0
  [90014a1f] PDMats v0.9.10
  [69de0a69] Parsers v0.3.10
  [1fd47b50] QuadGK v2.1.1
  [79098fc4] Rmath v0.6.0
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.8.0
  [2913bbd2] StatsBase v0.32.0
  [4c63d2b9] StatsFuns v0.9.2
  [30578b45] URIParser v0.4.0
  [2a0f44e3] Base64  [`@stdlib/Base64`]
  [ade2ca70] Dates  [`@stdlib/Dates`]
  [8bb1440f] DelimitedFiles  [`@stdlib/DelimitedFiles`]
  [8ba89e20] Distributed  [`@stdlib/Distributed`]
  [b77e0a4c] InteractiveUtils  [`@stdlib/InteractiveUtils`]
  [76f85450] LibGit2  [`@stdlib/LibGit2`]
  [8f399da3] Libdl  [`@stdlib/Libdl`]
  [37e2e46d] LinearAlgebra  [`@stdlib/LinearAlgebra`]
  [56ddb016] Logging  [`@stdlib/Logging`]
  [d6f4376e] Markdown  [`@stdlib/Markdown`]
  [a63ad114] Mmap  [`@stdlib/Mmap`]
  [44cfe95a] Pkg  [`@stdlib/Pkg`]
  [de0858da] Printf  [`@stdlib/Printf`]
  [3fa0cd96] REPL  [`@stdlib/REPL`]
  [9a3f8284] Random  [`@stdlib/Random`]
  [ea8e919c] SHA  [`@stdlib/SHA`]
  [9e88b42a] Serialization  [`@stdlib/Serialization`]
  [1a1011a3] SharedArrays  [`@stdlib/SharedArrays`]
  [6462fe0b] Sockets  [`@stdlib/Sockets`]
  [2f01184e] SparseArrays  [`@stdlib/SparseArrays`]
  [10745b16] Statistics  [`@stdlib/Statistics`]
  [4607b0f0] SuiteSparse  [`@stdlib/SuiteSparse`]
  [8dfed614] Test  [`@stdlib/Test`]
  [cf7118a7] UUIDs  [`@stdlib/UUIDs`]
  [4ec0a83e] Unicode  [`@stdlib/Unicode`]
â”Œ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
â”‚   caller = #MCMC#3(::StepRange{Int64,Int64}, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::typeof(MicrostructureNoise.MCMC), ::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64) at microstructure.jl:203
â”” @ MicrostructureNoise ~/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl:203
â”Œ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
â”‚   caller = #MCMC#3(::StepRange{Int64,Int64}, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::typeof(MicrostructureNoise.MCMC), ::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64) at microstructure.jl:208
â”” @ MicrostructureNoise ~/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl:208
100 	 Î± 3.341889985830237	 âˆšÎ·0.10353683959795058
200 	 Î± 4.979308772130828âœ“	 âˆšÎ·0.10575249573366086
300 	 Î± 5.05256380946945âœ“	 âˆšÎ·0.10639961593695062
400 	 Î± 4.6467189388988706âœ“	 âˆšÎ·0.10543971705549567
500 	 Î± 5.402892062431761âœ“	 âˆšÎ·0.11114504359765588
600 	 Î± 5.082299161150758âœ“	 âˆšÎ·0.10716140626672584
700 	 Î± 6.3196306726598594âœ“	 âˆšÎ·0.1103429569161719
800 	 Î± 5.61564548029832âœ“	 âˆšÎ·0.1102677518449161
900 	 Î± 5.693565860797947âœ“	 âˆšÎ·0.10992458497153625
1000 	 Î± 4.527876521457294âœ“	 âˆšÎ·0.11477435904295538
1100 	 Î± 3.5128639903663053	 âˆšÎ·0.10622174461910029
1200 	 Î± 3.332135428675985âœ“	 âˆšÎ·0.11460262792422048
1300 	 Î± 5.132145444978113âœ“	 âˆšÎ·0.10721079537645695
1400 	 Î± 4.687456079615605âœ“	 âˆšÎ·0.10686706079947875
1500 	 Î± 5.761021476201143âœ“	 âˆšÎ·0.10664480597677779
skipfirst: Log Test Failed at /home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/test/microstructure.jl:37
  Expression: MicrostructureNoise.MCMC(prior, tt, y, Î±, ÏƒÎ±, 10; skipfirst=true)
  Log Pattern: (:info, "skip observation y[1] at t[1] (skipfirst == true)")
  Captured Logs: 
    Test.LogRecord(Info, "skip observation y[1] at t[1] (skipfirst == true)", MicrostructureNoise, "microstructure", :MicrostructureNoise_c1d651c6, "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 114, Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}())
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007f5d170e6db7, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 203, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => #MCMC#3(::StepRange{Int64,Int64}, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::typeof(MicrostructureNoise.MCMC), ::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64) at microstructure.jl:203,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007f5d170e7187, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 208, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => #MCMC#3(::StepRange{Int64,Int64}, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::typeof(MicrostructureNoise.MCMC), ::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64) at microstructure.jl:208,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007f5d170e6db7, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 203, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => #MCMC#3(::StepRange{Int64,Int64}, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::typeof(MicrostructureNoise.MCMC), ::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64) at microstructure.jl:203,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007f5d170e7187, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 208, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => #MCMC#3(::StepRange{Int64,Int64}, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::typeof(MicrostructureNoise.MCMC), ::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64) at microstructure.jl:208,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007f5d170e6db7, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 203, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => #MCMC#3(::StepRange{Int64,Int64}, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::typeof(MicrostructureNoise.MCMC), ::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64) at microstructure.jl:203,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007f5d170e7187, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 208, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => #MCMC#3(::StepRange{Int64,Int64}, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::typeof(MicrostructureNoise.MCMC), ::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64) at microstructure.jl:208,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007f5d170e6db7, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 203, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => #MCMC#3(::StepRange{Int64,Int64}, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::typeof(MicrostructureNoise.MCMC), ::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64) at microstructure.jl:203,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007f5d170e7187, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 208, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => #MCMC#3(::StepRange{Int64,Int64}, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::typeof(MicrostructureNoise.MCMC), ::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64) at microstructure.jl:208,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007f5d170e6db7, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 203, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => #MCMC#3(::StepRange{Int64,Int64}, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::typeof(MicrostructureNoise.MCMC), ::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64) at microstructure.jl:203,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007f5d170e7187, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 208, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => #MCMC#3(::StepRange{Int64,Int64}, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::typeof(MicrostructureNoise.MCMC), ::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64) at microstructure.jl:208,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007f5d170e6db7, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 203, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => #MCMC#3(::StepRange{Int64,Int64}, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::typeof(MicrostructureNoise.MCMC), ::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64) at microstructure.jl:203,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007f5d170e7187, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 208, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => #MCMC#3(::StepRange{Int64,Int64}, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::typeof(MicrostructureNoise.MCMC), ::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64) at microstructure.jl:208,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007f5d170e6db7, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 203, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => #MCMC#3(::StepRange{Int64,Int64}, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::typeof(MicrostructureNoise.MCMC), ::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64) at microstructure.jl:203,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007f5d170e7187, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 208, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => #MCMC#3(::StepRange{Int64,Int64}, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::typeof(MicrostructureNoise.MCMC), ::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64) at microstructure.jl:208,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007f5d170e6db7, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 203, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => #MCMC#3(::StepRange{Int64,Int64}, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::typeof(MicrostructureNoise.MCMC), ::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64) at microstructure.jl:203,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007f5d170e7187, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 208, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => #MCMC#3(::StepRange{Int64,Int64}, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::typeof(MicrostructureNoise.MCMC), ::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64) at microstructure.jl:208,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007f5d170e6db7, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 203, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => #MCMC#3(::StepRange{Int64,Int64}, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::typeof(MicrostructureNoise.MCMC), ::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64) at microstructure.jl:203,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007f5d170e7187, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 208, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => #MCMC#3(::StepRange{Int64,Int64}, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::typeof(MicrostructureNoise.MCMC), ::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64) at microstructure.jl:208,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007f5d170e6db7, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 203, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => #MCMC#3(::StepRange{Int64,Int64}, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::typeof(MicrostructureNoise.MCMC), ::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64) at microstructure.jl:203,:maxlog => 1))
    Test.LogRecord(Warn, "`lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.", MicrostructureNoise, :depwarn, (Ptr{Nothing} @0x00007f5d170e7187, :lgamma), "/home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/src/microstructure.jl", 208, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => #MCMC#3(::StepRange{Int64,Int64}, ::Float64, ::Int64, ::Bool, ::Bool, ::Bool, ::typeof(MicrostructureNoise.MCMC), ::MicrostructureNoise.Prior, ::Array{Float64,1}, ::Array{Float64,1}, ::Float64, ::Float64, ::Int64) at microstructure.jl:208,:maxlog => 1))

Stacktrace:
 [1] record(::Test.DefaultTestSet, ::Test.LogTestFailure) at /workspace/srcdir/julia/usr/share/julia/stdlib/v1.3/Test/src/logging.jl:89
 [2] top-level scope at /home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/test/microstructure.jl:37
 [3] top-level scope at /workspace/srcdir/julia/usr/share/julia/stdlib/v1.3/Test/src/Test.jl:1107
 [4] top-level scope at /home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/test/microstructure.jl:37
[ Info: skip observation y[1] at t[1] (skipfirst == true)
Test Summary: | Pass  Fail  Total
skipfirst     |    3     1      4
ERROR: LoadError: LoadError: Some tests did not pass: 3 passed, 1 failed, 0 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/test/microstructure.jl:36
in expression starting at /home/pkgeval/.julia/packages/MicrostructureNoise/Wxg8U/test/runtests.jl:4
ERROR: Package MicrostructureNoise errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /workspace/srcdir/julia/usr/share/julia/stdlib/v1.3/Pkg/src/Types.jl:113
 [2] #test#131(::Bool, ::Nothing, ::Cmd, ::Cmd, ::typeof(Pkg.Operations.test), ::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/julia/usr/share/julia/stdlib/v1.3/Pkg/src/Operations.jl:1370
 [3] #test at ./none:0 [inlined]
 [4] #test#62(::Bool, ::Nothing, ::Cmd, ::Cmd, ::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(Pkg.API.test), ::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/julia/usr/share/julia/stdlib/v1.3/Pkg/src/API.jl:253
 [5] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/julia/usr/share/julia/stdlib/v1.3/Pkg/src/API.jl:239
 [6] #test#61 at /workspace/srcdir/julia/usr/share/julia/stdlib/v1.3/Pkg/src/API.jl:233 [inlined]
 [7] test at /workspace/srcdir/julia/usr/share/julia/stdlib/v1.3/Pkg/src/API.jl:233 [inlined]
 [8] #test#60 at /workspace/srcdir/julia/usr/share/julia/stdlib/v1.3/Pkg/src/API.jl:232 [inlined]
 [9] test at /workspace/srcdir/julia/usr/share/julia/stdlib/v1.3/Pkg/src/API.jl:232 [inlined]
 [10] #test#59(::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::typeof(Pkg.API.test), ::String) at /workspace/srcdir/julia/usr/share/julia/stdlib/v1.3/Pkg/src/API.jl:231
 [11] test(::String) at /workspace/srcdir/julia/usr/share/julia/stdlib/v1.3/Pkg/src/API.jl:231
 [12] top-level scope at none:12
