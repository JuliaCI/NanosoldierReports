Julia Version 1.3.0
Commit 46ce4d7933 (2019-11-26 06:09 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-6.0.1 (ORCJIT, skylake)

   Cloning default registries into `~/.julia`
   Cloning registry from "https://github.com/JuliaRegistries/General.git"
[?25l    Fetching: [>                                        ]  0.0 %    Fetching: [=============>                           ]  31.1 %    Fetching: [=================================>       ]  80.4 %[2K[?25h     Added registry `General` to `~/.julia/registries/General`
 Resolving package versions...
 Installed URIParser ─────────────────── v0.4.0
 Installed SortingAlgorithms ─────────── v0.3.1
 Installed FastRounding ──────────────── v0.2.0
 Installed ReverseDiffSparse ─────────── v0.8.6
 Installed DiffResults ───────────────── v0.0.4
 Installed DataStructures ────────────── v0.17.6
 Installed LazyArrays ────────────────── v0.14.10
 Installed MIPVerify ─────────────────── v0.2.0
 Installed BinaryProvider ────────────── v0.5.8
 Installed StaticArrays ──────────────── v0.12.1
 Installed CategoricalArrays ─────────── v0.7.3
 Installed DocStringExtensions ───────── v0.8.1
 Installed InvertedIndices ───────────── v1.0.0
 Installed Compat ────────────────────── v2.2.0
 Installed Parsers ───────────────────── v0.3.10
 Installed ProgressMeter ─────────────── v1.2.0
 Installed MacroTools ────────────────── v0.5.3
 Installed Missings ──────────────────── v0.4.3
 Installed JuMP ──────────────────────── v0.18.6
 Installed CMakeWrapper ──────────────── v0.2.3
 Installed Syslogs ───────────────────── v0.3.0
 Installed Parameters ────────────────── v0.12.0
 Installed TableTraits ───────────────── v1.0.0
 Installed OrderedCollections ────────── v1.1.0
 Installed ArrayLayouts ──────────────── v0.1.5
 Installed SpecialFunctions ──────────── v0.9.0
 Installed CRlibm ────────────────────── v0.7.1
 Installed Mocking ───────────────────── v0.7.0
 Installed JSON ──────────────────────── v0.21.0
 Installed SetRounding ───────────────── v0.2.0
 Installed CSV ───────────────────────── v0.5.18
 Installed BinDeps ───────────────────── v1.0.0
 Installed RecipesBase ───────────────── v0.7.0
 Installed CommonSubexpressions ──────── v0.2.0
 Installed MAT ───────────────────────── v0.7.0
 Installed DataAPI ───────────────────── v1.1.0
 Installed EzXML ─────────────────────── v0.9.5
 Installed Tables ────────────────────── v0.2.11
 Installed Memento ───────────────────── v0.12.1
 Installed ForwardDiff ───────────────── v0.10.7
 Installed NaNMath ───────────────────── v0.3.3
 Installed Nullables ─────────────────── v1.0.0
 Installed ErrorfreeArithmetic ───────── v0.4.0
 Installed IntervalArithmetic ────────── v0.16.1
 Installed DataValueInterfaces ───────── v1.0.0
 Installed CMake ─────────────────────── v1.1.2
 Installed OpenSpecFun_jll ───────────── v0.5.3+1
 Installed DiffRules ─────────────────── v0.1.0
 Installed MathProgBase ──────────────── v0.7.7
 Installed Calculus ──────────────────── v0.5.1
 Installed ConditionalJuMP ───────────── v0.1.0
 Installed Blosc ─────────────────────── v0.5.1
 Installed TimeZones ─────────────────── v0.10.3
 Installed HDF5 ──────────────────────── v0.12.5
 Installed FilePathsBase ─────────────── v0.7.0
 Installed AutoHashEquals ────────────── v0.2.0
 Installed PooledArrays ──────────────── v0.5.2
 Installed CodecZlib ─────────────────── v0.6.0
 Installed IteratorInterfaceExtensions ─ v1.0.0
 Installed WeakRefStrings ────────────── v0.6.1
 Installed DataFrames ────────────────── v0.19.4
 Installed FillArrays ────────────────── v0.8.2
 Installed TranscodingStreams ────────── v0.9.5
 Installed Reexport ──────────────────── v0.2.0
 Installed BufferedStreams ───────────── v1.0.0
  Updating `~/.julia/environments/v1.3/Project.toml`
  [e5e5f8be] + MIPVerify v0.2.0
  Updating `~/.julia/environments/v1.3/Manifest.toml`
  [4c555306] + ArrayLayouts v0.1.5
  [15f4f7f2] + AutoHashEquals v0.2.0
  [9e28174c] + BinDeps v1.0.0
  [b99e7846] + BinaryProvider v0.5.8
  [a74b3585] + Blosc v0.5.1
  [e1450e63] + BufferedStreams v1.0.0
  [631607c0] + CMake v1.1.2
  [d5fb7624] + CMakeWrapper v0.2.3
  [96374032] + CRlibm v0.7.1
  [336ed68f] + CSV v0.5.18
  [49dc2e85] + Calculus v0.5.1
  [324d7699] + CategoricalArrays v0.7.3
  [944b1d66] + CodecZlib v0.6.0
  [bbf7d656] + CommonSubexpressions v0.2.0
  [34da2185] + Compat v2.2.0
  [ae04f764] + ConditionalJuMP v0.1.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.19.4
  [864edb3b] + DataStructures v0.17.6
  [e2d170a0] + DataValueInterfaces v1.0.0
  [163ba53b] + DiffResults v0.0.4
  [b552c78f] + DiffRules v0.1.0
  [ffbed154] + DocStringExtensions v0.8.1
  [90fa49ef] + ErrorfreeArithmetic v0.4.0
  [8f5d6c58] + EzXML v0.9.5
  [fa42c844] + FastRounding v0.2.0
  [48062228] + FilePathsBase v0.7.0
  [1a297f60] + FillArrays v0.8.2
  [f6369f11] + ForwardDiff v0.10.7
  [f67ccb44] + HDF5 v0.12.5
  [d1acc4aa] + IntervalArithmetic v0.16.1
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [4076af6c] + JuMP v0.18.6
  [5078a376] + LazyArrays v0.14.10
  [23992714] + MAT v0.7.0
  [e5e5f8be] + MIPVerify v0.2.0
  [1914dd2f] + MacroTools v0.5.3
  [fdba3010] + MathProgBase v0.7.7
  [f28f55f0] + Memento v0.12.1
  [e1d29d7a] + Missings v0.4.3
  [78c3b35d] + Mocking v0.7.0
  [77ba4419] + NaNMath v0.3.3
  [4d1e1d77] + Nullables v1.0.0
  [efe28fd5] + OpenSpecFun_jll v0.5.3+1
  [bac558e1] + OrderedCollections v1.1.0
  [d96e819e] + Parameters v0.12.0
  [69de0a69] + Parsers v0.3.10
  [2dfb63ee] + PooledArrays v0.5.2
  [92933f4c] + ProgressMeter v1.2.0
  [3cdcf5f2] + RecipesBase v0.7.0
  [189a3867] + Reexport v0.2.0
  [89212889] + ReverseDiffSparse v0.8.6
  [3cc68bcd] + SetRounding v0.2.0
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.9.0
  [90137ffa] + StaticArrays v0.12.1
  [cea106d9] + Syslogs v0.3.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v0.2.11
  [f269a46b] + TimeZones v0.10.3
  [3bb67fe8] + TranscodingStreams v0.9.5
  [30578b45] + URIParser v0.4.0
  [ea10d353] + WeakRefStrings v0.6.1
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
  Building CRlibm ───→ `~/.julia/packages/CRlibm/2S9DB/deps/build.log`
  Building EzXML ────→ `~/.julia/packages/EzXML/QtGgF/deps/build.log`
  Building CMake ────→ `~/.julia/packages/CMake/nSK2r/deps/build.log`
  Building TimeZones → `~/.julia/packages/TimeZones/pjvlM/deps/build.log`
  Building Blosc ────→ `~/.julia/packages/Blosc/lzFr0/deps/build.log`
  Building HDF5 ─────→ `~/.julia/packages/HDF5/Zh9on/deps/build.log`
  Building CodecZlib → `~/.julia/packages/CodecZlib/5t9zO/deps/build.log`
   Testing MIPVerify
 Resolving package versions...
 Installed BenchmarkTools ─── v0.4.3
 Installed Cbc ────────────── v0.6.6
 Installed MathOptInterface ─ v0.9.7
  Building Cbc → `~/.julia/packages/Cbc/vWzyC/deps/build.log`
    Status `/tmp/jl_0UjEwQ/Manifest.toml`
  [4c555306] ArrayLayouts v0.1.5
  [15f4f7f2] AutoHashEquals v0.2.0
  [6e4b80f9] BenchmarkTools v0.4.3
  [9e28174c] BinDeps v1.0.0
  [b99e7846] BinaryProvider v0.5.8
  [a74b3585] Blosc v0.5.1
  [e1450e63] BufferedStreams v1.0.0
  [631607c0] CMake v1.1.2
  [d5fb7624] CMakeWrapper v0.2.3
  [96374032] CRlibm v0.7.1
  [336ed68f] CSV v0.5.18
  [49dc2e85] Calculus v0.5.1
  [324d7699] CategoricalArrays v0.7.3
  [9961bab8] Cbc v0.6.6
  [944b1d66] CodecZlib v0.6.0
  [bbf7d656] CommonSubexpressions v0.2.0
  [34da2185] Compat v2.2.0
  [ae04f764] ConditionalJuMP v0.1.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.19.4
  [864edb3b] DataStructures v0.17.6
  [e2d170a0] DataValueInterfaces v1.0.0
  [163ba53b] DiffResults v0.0.4
  [b552c78f] DiffRules v0.1.0
  [ffbed154] DocStringExtensions v0.8.1
  [90fa49ef] ErrorfreeArithmetic v0.4.0
  [8f5d6c58] EzXML v0.9.5
  [fa42c844] FastRounding v0.2.0
  [48062228] FilePathsBase v0.7.0
  [1a297f60] FillArrays v0.8.2
  [f6369f11] ForwardDiff v0.10.7
  [f67ccb44] HDF5 v0.12.5
  [d1acc4aa] IntervalArithmetic v0.16.1
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [4076af6c] JuMP v0.18.6
  [5078a376] LazyArrays v0.14.10
  [23992714] MAT v0.7.0
  [e5e5f8be] MIPVerify v0.2.0
  [1914dd2f] MacroTools v0.5.3
  [b8f27783] MathOptInterface v0.9.7
  [fdba3010] MathProgBase v0.7.7
  [f28f55f0] Memento v0.12.1
  [e1d29d7a] Missings v0.4.3
  [78c3b35d] Mocking v0.7.0
  [77ba4419] NaNMath v0.3.3
  [4d1e1d77] Nullables v1.0.0
  [efe28fd5] OpenSpecFun_jll v0.5.3+1
  [bac558e1] OrderedCollections v1.1.0
  [d96e819e] Parameters v0.12.0
  [69de0a69] Parsers v0.3.10
  [2dfb63ee] PooledArrays v0.5.2
  [92933f4c] ProgressMeter v1.2.0
  [3cdcf5f2] RecipesBase v0.7.0
  [189a3867] Reexport v0.2.0
  [89212889] ReverseDiffSparse v0.8.6
  [3cc68bcd] SetRounding v0.2.0
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.9.0
  [90137ffa] StaticArrays v0.12.1
  [cea106d9] Syslogs v0.3.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v0.2.11
  [f269a46b] TimeZones v0.10.3
  [3bb67fe8] TranscodingStreams v0.9.5
  [30578b45] URIParser v0.4.0
  [ea10d353] WeakRefStrings v0.6.1
  [2a0f44e3] Base64  [`@stdlib/Base64`]
  [ade2ca70] Dates  [`@stdlib/Dates`]
  [8bb1440f] DelimitedFiles  [`@stdlib/DelimitedFiles`]
  [8ba89e20] Distributed  [`@stdlib/Distributed`]
  [9fa8497b] Future  [`@stdlib/Future`]
  [b77e0a4c] InteractiveUtils  [`@stdlib/InteractiveUtils`]
  [76f85450] LibGit2  [`@stdlib/LibGit2`]
  [8f399da3] Libdl  [`@stdlib/Libdl`]
  [37e2e46d] LinearAlgebra  [`@stdlib/LinearAlgebra`]
  [56ddb016] Logging  [`@stdlib/Logging`]
  [d6f4376e] Markdown  [`@stdlib/Markdown`]
  [a63ad114] Mmap  [`@stdlib/Mmap`]
  [44cfe95a] Pkg  [`@stdlib/Pkg`]
  [de0858da] Printf  [`@stdlib/Printf`]
  [3fa0cd96] REPL  [`@stdlib/REPL`]
  [9a3f8284] Random  [`@stdlib/Random`]
  [ea8e919c] SHA  [`@stdlib/SHA`]
  [9e88b42a] Serialization  [`@stdlib/Serialization`]
  [1a1011a3] SharedArrays  [`@stdlib/SharedArrays`]
  [6462fe0b] Sockets  [`@stdlib/Sockets`]
  [2f01184e] SparseArrays  [`@stdlib/SparseArrays`]
  [10745b16] Statistics  [`@stdlib/Statistics`]
  [8dfed614] Test  [`@stdlib/Test`]
  [cf7118a7] UUIDs  [`@stdlib/UUIDs`]
  [4ec0a83e] Unicode  [`@stdlib/Unicode`]
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 3, target labels are [1]
[notice | MIPVerify]: Rebuilding model from scratch. This may take some time as we determine upper and lower bounds for the input to each non-linear unit.
[info | MIPVerify]: Applying Flatten() ... 
[info | MIPVerify]: Applying Linear(32 -> 16) ... 
[info | MIPVerify]: Applying MaskedReLU with expected input size (16,). (5 zeroed, 5 as-is, 6 rectified). ... 
  Calculating upper bounds:  33%|███████▋               |  ETA: 0:00:03[K  Calculating upper bounds:  50%|███████████▌           |  ETA: 0:00:02[K  Calculating upper bounds: 100%|███████████████████████| Time: 0:00:02[K
  Calculating lower bounds:  17%|███▉                   |  ETA: 0:00:01[K  Calculating lower bounds:  33%|███████▋               |  ETA: 0:00:01[K  Calculating lower bounds: 100%|███████████████████████| Time: 0:00:00[K
[info | MIPVerify]:   Behavior of ReLUs - split: 6, zero_output: 0, linear_in_input: 0, constant_output: 0
  Imposing relu constraint:  17%|███▉                   |  ETA: 0:00:02[K  Imposing relu constraint: 100%|███████████████████████| Time: 0:00:00[K
[info | MIPVerify]: Applying Linear(16 -> 8) ... 
[info | MIPVerify]: Applying MaskedReLU with expected input size (8,). (3 zeroed, 3 as-is, 2 rectified). ... 
[info | MIPVerify]:   Behavior of ReLUs - split: 2, zero_output: 0, linear_in_input: 0, constant_output: 0
[info | MIPVerify]: Applying Linear(8 -> 4) ... 
[notice | MIPVerify]: The model built will be cached and re-used for future solves, unless you explicitly set rebuild=true.
Optimal
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 3, target labels are [2]
[notice | MIPVerify]: Loading model from cache.
Optimal
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 3, target labels are [3]
[notice | MIPVerify]: Loading model from cache.
Optimal
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 3, target labels are [1]
[notice | MIPVerify]: Rebuilding model from scratch. This may take some time as we determine upper and lower bounds for the input to each non-linear unit.
[info | MIPVerify]: Applying Flatten() ... 
[info | MIPVerify]: Applying Linear(32 -> 16) ... 
[info | MIPVerify]: Applying MaskedReLU with expected input size (16,). (5 zeroed, 5 as-is, 6 rectified). ... 
[info | MIPVerify]:   Behavior of ReLUs - split: 3, zero_output: 2, linear_in_input: 1, constant_output: 0
[info | MIPVerify]: Applying Linear(16 -> 8) ... 
[info | MIPVerify]: Applying MaskedReLU with expected input size (8,). (3 zeroed, 3 as-is, 2 rectified). ... 
[info | MIPVerify]:   Behavior of ReLUs - split: 1, zero_output: 0, linear_in_input: 1, constant_output: 0
[info | MIPVerify]: Applying Linear(8 -> 4) ... 
[notice | MIPVerify]: The model built will be cached and re-used for future solves, unless you explicitly set rebuild=true.
┌ Warning: Not solved to optimality, status: Infeasible
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:212
┌ Warning: Infeasibility ray (Farkas proof) not available
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:223
Infeasible
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 3, target labels are [1]
[notice | MIPVerify]: Rebuilding model from scratch. This may take some time as we determine upper and lower bounds for the input to each non-linear unit.
[info | MIPVerify]: Applying Flatten() ... 
[info | MIPVerify]: Applying Linear(32 -> 16) ... 
[info | MIPVerify]: Applying MaskedReLU with expected input size (16,). (5 zeroed, 5 as-is, 6 rectified). ... 
[info | MIPVerify]:   Behavior of ReLUs - split: 4, zero_output: 2, linear_in_input: 0, constant_output: 0
[info | MIPVerify]: Applying Linear(16 -> 8) ... 
[info | MIPVerify]: Applying MaskedReLU with expected input size (8,). (3 zeroed, 3 as-is, 2 rectified). ... 
[info | MIPVerify]:   Behavior of ReLUs - split: 1, zero_output: 0, linear_in_input: 1, constant_output: 0
[info | MIPVerify]: Applying Linear(8 -> 4) ... 
[notice | MIPVerify]: The model built will be cached and re-used for future solves, unless you explicitly set rebuild=true.
Optimal
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [2]
[notice | MIPVerify]: Rebuilding model from scratch. This may take some time as we determine upper and lower bounds for the input to each non-linear unit.
[info | MIPVerify]: Applying Conv2d(1, 1, kernel_size=(5, 5), stride=(1, 1), padding=same) ... 
[info | MIPVerify]: Applying Conv2d(1, 2, kernel_size=(2, 2), stride=(1, 1), padding=same) ... 
[info | MIPVerify]: Specifying max pooling with a 2x2 filter and a stride of (2, 2) ... 
  Calculating upper bounds:  50%|███████████▌           |  ETA: 0:00:00[K  Calculating upper bounds: 100%|███████████████████████| Time: 0:00:00[K
  Calculating lower bounds:  50%|███████████▌           |  ETA: 0:00:00[K  Calculating lower bounds: 100%|███████████████████████| Time: 0:00:00[K
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Applying ReLU() ...
  Calculating upper bounds:  12%|██▉                    |  ETA: 0:00:01[K  Calculating upper bounds:  28%|██████▌                |  ETA: 0:00:01[K  Calculating upper bounds:  47%|██████████▊            |  ETA: 0:00:00[K  Calculating upper bounds:  66%|███████████████▏       |  ETA: 0:00:00[K  Calculating upper bounds:  84%|███████████████████▍   |  ETA: 0:00:00[K  Calculating upper bounds: 100%|███████████████████████| Time: 0:00:00[K
  Calculating lower bounds:   3%|▊                      |  ETA: 0:00:12[K  Calculating lower bounds:   6%|█▌                     |  ETA: 0:00:08[K  Calculating lower bounds:  69%|███████████████▊       |  ETA: 0:00:00[K  Calculating lower bounds:  97%|██████████████████████▎|  ETA: 0:00:00[K  Calculating lower bounds: 100%|███████████████████████| Time: 0:00:00[K
[info | MIPVerify]:   Behavior of ReLUs - split: 7, zero_output: 0, linear_in_input: 25, constant_output: 0
  Imposing relu constraint:   3%|▊                      |  ETA: 0:00:06[K  Imposing relu constraint: 100%|███████████████████████| Time: 0:00:00[K
[info | MIPVerify]: Applying Flatten() ... 
[info | MIPVerify]: Applying Linear(32 -> 5) ... 
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]:   Behavior of ReLUs - split: 4, zero_output: 1, linear_in_input: 0, constant_output: 0
[info | MIPVerify]: Applying Linear(5 -> 3) ... 
[notice | MIPVerify]: The model built will be cached and re-used for future solves, unless you explicitly set rebuild=true.
┌ Warning: Not solved to optimality, status: Infeasible
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:212
┌ Warning: Infeasibility ray (Farkas proof) not available
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:223
Infeasible
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [3]
[notice | MIPVerify]: Loading model from cache.
┌ Warning: Not solved to optimality, status: Infeasible
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:212
┌ Warning: Infeasibility ray (Farkas proof) not available
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:223
Infeasible
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [1]
[notice | MIPVerify]: Rebuilding model from scratch. This may take some time as we determine upper and lower bounds for the input to each non-linear unit.
[info | MIPVerify]: Applying Conv2d(1, 2, kernel_size=(2, 2), stride=(1, 1), padding=same) ... 
[info | MIPVerify]: Specifying max pooling with a 2x2 filter and a stride of (2, 2) ... 
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
  Calculating upper bounds:  47%|██████████▊            |  ETA: 0:00:00[K[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
  Calculating upper bounds: 100%|███████████████████████| Time: 0:00:00[K
[info | MIPVerify]:   Behavior of ReLUs - split: 9, zero_output: 0, linear_in_input: 23, constant_output: 0
[info | MIPVerify]: Applying Flatten() ... 
[info | MIPVerify]: Applying Linear(32 -> 5) ... 
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]:   Behavior of ReLUs - split: 5, zero_output: 0, linear_in_input: 0, constant_output: 0
[info | MIPVerify]: Applying Linear(5 -> 3) ... 
[notice | MIPVerify]: The model built will be cached and re-used for future solves, unless you explicitly set rebuild=true.
Optimal
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [2]
[notice | MIPVerify]: Loading model from cache.
Optimal
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [1]
[notice | MIPVerify]: Loading model from cache.
Optimal
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [2]
[notice | MIPVerify]: Loading model from cache.
Optimal
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [3]
[notice | MIPVerify]: Loading model from cache.
Optimal
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [2]
[notice | MIPVerify]: Loading model from cache.
Optimal
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [2, 3]
[notice | MIPVerify]: Loading model from cache.
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
Optimal
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [2]
[notice | MIPVerify]: Rebuilding model from scratch. This may take some time as we determine upper and lower bounds for the input to each non-linear unit.
[info | MIPVerify]: Applying Conv2d(1, 2, kernel_size=(2, 2), stride=(1, 1), padding=same) ... 
[info | MIPVerify]: Specifying max pooling with a 2x2 filter and a stride of (2, 2) ... 
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
  Calculating upper bounds:  47%|██████████▊            |  ETA: 0:00:00[K[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
  Calculating upper bounds:  91%|████████████████████▉  |  ETA: 0:00:00[K[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
  Calculating upper bounds: 100%|███████████████████████| Time: 0:00:00[K
[info | MIPVerify]:   Behavior of ReLUs - split: 8, zero_output: 0, linear_in_input: 24, constant_output: 0
[info | MIPVerify]: Applying Flatten() ... 
[info | MIPVerify]: Applying Linear(32 -> 5) ... 
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]:   Behavior of ReLUs - split: 5, zero_output: 0, linear_in_input: 0, constant_output: 0
[info | MIPVerify]: Applying Linear(5 -> 3) ... 
[notice | MIPVerify]: The model built will be cached and re-used for future solves, unless you explicitly set rebuild=true.
