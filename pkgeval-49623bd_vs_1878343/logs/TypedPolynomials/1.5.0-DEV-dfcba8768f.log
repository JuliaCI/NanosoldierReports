Julia Version 1.5.0-DEV.13
Commit dfcba8768f (2020-01-06 06:02 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia

 Resolving package versions...
 Installed TypedPolynomials ──────── v0.2.5
 Installed OrderedCollections ────── v1.1.0
 Installed MutableArithmetics ────── v0.2.0
 Installed MultivariatePolynomials ─ v0.3.5
 Installed MacroTools ────────────── v0.5.3
 Installed DataStructures ────────── v0.17.7
  Updating `~/.julia/environments/v1.5/Project.toml`
  [afbbf031] + TypedPolynomials v0.2.5
  Updating `~/.julia/environments/v1.5/Manifest.toml`
  [864edb3b] + DataStructures v0.17.7
  [1914dd2f] + MacroTools v0.5.3
  [102ac46a] + MultivariatePolynomials v0.3.5
  [d8a4904e] + MutableArithmetics v0.2.0
  [bac558e1] + OrderedCollections v1.1.0
  [afbbf031] + TypedPolynomials v0.2.5
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
   Testing TypedPolynomials
 Installed Parsers ───────── v0.3.10
 Installed NBInclude ─────── v2.1.0
 Installed JSON ──────────── v0.21.0
 Installed Compat ────────── v2.2.0
 Installed BenchmarkTools ── v0.4.3
 Installed SoftGlobalScope ─ v1.0.10
  Updating `/tmp/jl_FO6xiT/Project.toml`
  [6e4b80f9] + BenchmarkTools v0.4.3
  [0db19996] + NBInclude v2.1.0
  Updating `/tmp/jl_FO6xiT/Manifest.toml`
  [6e4b80f9] + BenchmarkTools v0.4.3
  [34da2185] + Compat v2.2.0
  [682c06a0] + JSON v0.21.0
  [0db19996] + NBInclude v2.1.0
  [69de0a69] + Parsers v0.3.10
  [b85f4697] + SoftGlobalScope v1.0.10
  [8bb1440f] + DelimitedFiles 
  [a63ad114] + Mmap 
  [1a1011a3] + SharedArrays 
  [10745b16] + Statistics 
Running sandbox
Status `/tmp/jl_FO6xiT/Project.toml`
  [6e4b80f9] BenchmarkTools v0.4.3
  [1914dd2f] MacroTools v0.5.3
  [102ac46a] MultivariatePolynomials v0.3.5
  [d8a4904e] MutableArithmetics v0.2.0
  [0db19996] NBInclude v2.1.0
  [afbbf031] TypedPolynomials v0.2.5
  [37e2e46d] LinearAlgebra 
  [44cfe95a] Pkg 
  [9a3f8284] Random 
  [8dfed614] Test 
Test Summary:    | Pass  Total
TypedPolynomials |  385    385
┌ Warning: `front(x)` is deprecated, use `first(x)` instead.
│   caller = polynomial_merge!(::Int64, ::Int64, ::TypedPolynomials.var"#get1#25"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#get2#26"{Int64,typeof(+),Polynomial{Int64,Term{Int64,Monomial{(x,),1}},Array{Term{Int64,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#set#27"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#push#28"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#compare_monomials#29"{Polynomial{Int64,Term{Int64,Monomial{(x,),1}},Array{Term{Int64,Monomial{(x,),1}},1}},TypedPolynomials.var"#get1#25"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}}, ::TypedPolynomials.var"#combine#30"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}},typeof(+),Polynomial{Int64,Term{Int64,Monomial{(x,),1}},Array{Term{Int64,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#keep#32"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#resize#31"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}) at operators.jl:108
└ @ MultivariatePolynomials ~/.julia/packages/MultivariatePolynomials/871Fi/src/operators.jl:108
┌ Warning: `front(x)` is deprecated, use `first(x)` instead.
│   caller = polynomial_merge!(::Int64, ::Int64, ::TypedPolynomials.var"#get1#25"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#get2#26"{Int64,typeof(-),Polynomial{Int64,Term{Int64,Monomial{(x,),1}},Array{Term{Int64,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#set#27"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#push#28"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#compare_monomials#29"{Polynomial{Int64,Term{Int64,Monomial{(x,),1}},Array{Term{Int64,Monomial{(x,),1}},1}},TypedPolynomials.var"#get1#25"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}}, ::TypedPolynomials.var"#combine#30"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}},typeof(-),Polynomial{Int64,Term{Int64,Monomial{(x,),1}},Array{Term{Int64,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#keep#32"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#resize#31"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}) at operators.jl:108
└ @ MultivariatePolynomials ~/.julia/packages/MultivariatePolynomials/871Fi/src/operators.jl:108
┌ Warning: `front(x)` is deprecated, use `first(x)` instead.
│   caller = polynomial_merge!(::Int64, ::Int64, ::TypedPolynomials.var"#get1#25"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#get2#26"{Int64,typeof(+),Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#set#27"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#push#28"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#compare_monomials#29"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}},TypedPolynomials.var"#get1#25"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}}, ::TypedPolynomials.var"#combine#30"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}},typeof(+),Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#keep#32"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#resize#31"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}) at operators.jl:108
└ @ MultivariatePolynomials ~/.julia/packages/MultivariatePolynomials/871Fi/src/operators.jl:108
┌ Warning: `front(x)` is deprecated, use `first(x)` instead.
│   caller = polynomial_merge!(::Int64, ::Int64, ::TypedPolynomials.var"#get1#25"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#get2#26"{Int64,typeof(-),Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#set#27"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#push#28"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#compare_monomials#29"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}},TypedPolynomials.var"#get1#25"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}}, ::TypedPolynomials.var"#combine#30"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}},typeof(-),Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#keep#32"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#resize#31"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}) at operators.jl:108
└ @ MultivariatePolynomials ~/.julia/packages/MultivariatePolynomials/871Fi/src/operators.jl:108
┌ Warning: `front(x)` is deprecated, use `first(x)` instead.
│   caller = polynomial_merge!(::Int64, ::Int64, ::TypedPolynomials.var"#get1#25"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#get2#26"{Int64,typeof(+),Polynomial{Int64,Term{Int64,Monomial{(y,),1}},Array{Term{Int64,Monomial{(y,),1}},1}}}, ::TypedPolynomials.var"#set#27"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#push#28"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#compare_monomials#29"{Polynomial{Int64,Term{Int64,Monomial{(y,),1}},Array{Term{Int64,Monomial{(y,),1}},1}},TypedPolynomials.var"#get1#25"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}}, ::TypedPolynomials.var"#combine#30"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}},typeof(+),Polynomial{Int64,Term{Int64,Monomial{(y,),1}},Array{Term{Int64,Monomial{(y,),1}},1}}}, ::TypedPolynomials.var"#keep#32"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#resize#31"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}) at operators.jl:108
└ @ MultivariatePolynomials ~/.julia/packages/MultivariatePolynomials/871Fi/src/operators.jl:108
┌ Warning: `front(x)` is deprecated, use `first(x)` instead.
│   caller = polynomial_merge!(::Int64, ::Int64, ::TypedPolynomials.var"#get1#25"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#get2#26"{Int64,typeof(-),Polynomial{Int64,Term{Int64,Monomial{(y,),1}},Array{Term{Int64,Monomial{(y,),1}},1}}}, ::TypedPolynomials.var"#set#27"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#push#28"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#compare_monomials#29"{Polynomial{Int64,Term{Int64,Monomial{(y,),1}},Array{Term{Int64,Monomial{(y,),1}},1}},TypedPolynomials.var"#get1#25"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}}, ::TypedPolynomials.var"#combine#30"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}},typeof(-),Polynomial{Int64,Term{Int64,Monomial{(y,),1}},Array{Term{Int64,Monomial{(y,),1}},1}}}, ::TypedPolynomials.var"#keep#32"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#resize#31"{Polynomial{Int64,Term{Int64,Monomial{(x, y),2}},Array{Term{Int64,Monomial{(x, y),2}},1}}}) at operators.jl:108
└ @ MultivariatePolynomials ~/.julia/packages/MultivariatePolynomials/871Fi/src/operators.jl:108
Test Summary:                     | Pass  Total
MutableArithmetics with variables | 5550   5550
┌ Warning: `front(x)` is deprecated, use `first(x)` instead.
│   caller = polynomial_merge!(::Int64, ::Int64, ::TypedPolynomials.var"#get1#25"{Polynomial{Int64,Term{Int64,Monomial{(x,),1}},Array{Term{Int64,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#get2#26"{Int64,typeof(+),Polynomial{Int64,Term{Int64,Monomial{(x,),1}},Array{Term{Int64,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#set#27"{Polynomial{Int64,Term{Int64,Monomial{(x,),1}},Array{Term{Int64,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#push#28"{Polynomial{Int64,Term{Int64,Monomial{(x,),1}},Array{Term{Int64,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#compare_monomials#29"{Polynomial{Int64,Term{Int64,Monomial{(x,),1}},Array{Term{Int64,Monomial{(x,),1}},1}},TypedPolynomials.var"#get1#25"{Polynomial{Int64,Term{Int64,Monomial{(x,),1}},Array{Term{Int64,Monomial{(x,),1}},1}}}}, ::TypedPolynomials.var"#combine#30"{Polynomial{Int64,Term{Int64,Monomial{(x,),1}},Array{Term{Int64,Monomial{(x,),1}},1}},typeof(+),Polynomial{Int64,Term{Int64,Monomial{(x,),1}},Array{Term{Int64,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#keep#32"{Polynomial{Int64,Term{Int64,Monomial{(x,),1}},Array{Term{Int64,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#resize#31"{Polynomial{Int64,Term{Int64,Monomial{(x,),1}},Array{Term{Int64,Monomial{(x,),1}},1}}}) at operators.jl:108
└ @ MultivariatePolynomials ~/.julia/packages/MultivariatePolynomials/871Fi/src/operators.jl:108
┌ Warning: `front(x)` is deprecated, use `first(x)` instead.
│   caller = polynomial_merge!(::Int64, ::Int64, ::TypedPolynomials.var"#get1#25"{Polynomial{Int64,Term{Int64,Monomial{(x,),1}},Array{Term{Int64,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#get2#26"{Int64,typeof(-),Polynomial{Int64,Term{Int64,Monomial{(x,),1}},Array{Term{Int64,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#set#27"{Polynomial{Int64,Term{Int64,Monomial{(x,),1}},Array{Term{Int64,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#push#28"{Polynomial{Int64,Term{Int64,Monomial{(x,),1}},Array{Term{Int64,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#compare_monomials#29"{Polynomial{Int64,Term{Int64,Monomial{(x,),1}},Array{Term{Int64,Monomial{(x,),1}},1}},TypedPolynomials.var"#get1#25"{Polynomial{Int64,Term{Int64,Monomial{(x,),1}},Array{Term{Int64,Monomial{(x,),1}},1}}}}, ::TypedPolynomials.var"#combine#30"{Polynomial{Int64,Term{Int64,Monomial{(x,),1}},Array{Term{Int64,Monomial{(x,),1}},1}},typeof(-),Polynomial{Int64,Term{Int64,Monomial{(x,),1}},Array{Term{Int64,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#keep#32"{Polynomial{Int64,Term{Int64,Monomial{(x,),1}},Array{Term{Int64,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#resize#31"{Polynomial{Int64,Term{Int64,Monomial{(x,),1}},Array{Term{Int64,Monomial{(x,),1}},1}}}) at operators.jl:108
└ @ MultivariatePolynomials ~/.julia/packages/MultivariatePolynomials/871Fi/src/operators.jl:108
Test Summary:                     | Pass  Total
MutableArithmetics with monomials | 5582   5582
Test Summary:                          | Pass  Total
MutableArithmetics with terms in Int64 | 5582   5582
┌ Warning: `front(x)` is deprecated, use `first(x)` instead.
│   caller = polynomial_merge!(::Int64, ::Int64, ::TypedPolynomials.var"#get1#25"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#get2#26"{BigInt,typeof(+),Polynomial{BigInt,Term{BigInt,Monomial{(x,),1}},Array{Term{BigInt,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#set#27"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#push#28"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#compare_monomials#29"{Polynomial{BigInt,Term{BigInt,Monomial{(x,),1}},Array{Term{BigInt,Monomial{(x,),1}},1}},TypedPolynomials.var"#get1#25"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}}, ::TypedPolynomials.var"#combine#30"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}},typeof(+),Polynomial{BigInt,Term{BigInt,Monomial{(x,),1}},Array{Term{BigInt,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#keep#32"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#resize#31"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}) at operators.jl:108
└ @ MultivariatePolynomials ~/.julia/packages/MultivariatePolynomials/871Fi/src/operators.jl:108
┌ Warning: `front(x)` is deprecated, use `first(x)` instead.
│   caller = polynomial_merge!(::Int64, ::Int64, ::TypedPolynomials.var"#get1#25"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#get2#26"{BigInt,typeof(-),Polynomial{BigInt,Term{BigInt,Monomial{(x,),1}},Array{Term{BigInt,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#set#27"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#push#28"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#compare_monomials#29"{Polynomial{BigInt,Term{BigInt,Monomial{(x,),1}},Array{Term{BigInt,Monomial{(x,),1}},1}},TypedPolynomials.var"#get1#25"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}}, ::TypedPolynomials.var"#combine#30"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}},typeof(-),Polynomial{BigInt,Term{BigInt,Monomial{(x,),1}},Array{Term{BigInt,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#keep#32"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#resize#31"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}) at operators.jl:108
└ @ MultivariatePolynomials ~/.julia/packages/MultivariatePolynomials/871Fi/src/operators.jl:108
┌ Warning: `front(x)` is deprecated, use `first(x)` instead.
│   caller = polynomial_merge!(::Int64, ::Int64, ::TypedPolynomials.var"#get1#25"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#get2#26"{BigInt,typeof(+),Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#set#27"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#push#28"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#compare_monomials#29"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}},TypedPolynomials.var"#get1#25"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}}, ::TypedPolynomials.var"#combine#30"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}},typeof(+),Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#keep#32"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#resize#31"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}) at operators.jl:108
└ @ MultivariatePolynomials ~/.julia/packages/MultivariatePolynomials/871Fi/src/operators.jl:108
┌ Warning: `front(x)` is deprecated, use `first(x)` instead.
│   caller = polynomial_merge!(::Int64, ::Int64, ::TypedPolynomials.var"#get1#25"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#get2#26"{BigInt,typeof(-),Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#set#27"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#push#28"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#compare_monomials#29"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}},TypedPolynomials.var"#get1#25"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}}, ::TypedPolynomials.var"#combine#30"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}},typeof(-),Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#keep#32"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#resize#31"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}) at operators.jl:108
└ @ MultivariatePolynomials ~/.julia/packages/MultivariatePolynomials/871Fi/src/operators.jl:108
┌ Warning: `front(x)` is deprecated, use `first(x)` instead.
│   caller = polynomial_merge!(::Int64, ::Int64, ::TypedPolynomials.var"#get1#25"{Polynomial{BigInt,Term{BigInt,Monomial{(x,),1}},Array{Term{BigInt,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#get2#26"{BigInt,typeof(+),Polynomial{BigInt,Term{BigInt,Monomial{(x,),1}},Array{Term{BigInt,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#set#27"{Polynomial{BigInt,Term{BigInt,Monomial{(x,),1}},Array{Term{BigInt,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#push#28"{Polynomial{BigInt,Term{BigInt,Monomial{(x,),1}},Array{Term{BigInt,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#compare_monomials#29"{Polynomial{BigInt,Term{BigInt,Monomial{(x,),1}},Array{Term{BigInt,Monomial{(x,),1}},1}},TypedPolynomials.var"#get1#25"{Polynomial{BigInt,Term{BigInt,Monomial{(x,),1}},Array{Term{BigInt,Monomial{(x,),1}},1}}}}, ::TypedPolynomials.var"#combine#30"{Polynomial{BigInt,Term{BigInt,Monomial{(x,),1}},Array{Term{BigInt,Monomial{(x,),1}},1}},typeof(+),Polynomial{BigInt,Term{BigInt,Monomial{(x,),1}},Array{Term{BigInt,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#keep#32"{Polynomial{BigInt,Term{BigInt,Monomial{(x,),1}},Array{Term{BigInt,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#resize#31"{Polynomial{BigInt,Term{BigInt,Monomial{(x,),1}},Array{Term{BigInt,Monomial{(x,),1}},1}}}) at operators.jl:108
└ @ MultivariatePolynomials ~/.julia/packages/MultivariatePolynomials/871Fi/src/operators.jl:108
┌ Warning: `front(x)` is deprecated, use `first(x)` instead.
│   caller = polynomial_merge!(::Int64, ::Int64, ::TypedPolynomials.var"#get1#25"{Polynomial{BigInt,Term{BigInt,Monomial{(x,),1}},Array{Term{BigInt,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#get2#26"{BigInt,typeof(-),Polynomial{BigInt,Term{BigInt,Monomial{(x,),1}},Array{Term{BigInt,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#set#27"{Polynomial{BigInt,Term{BigInt,Monomial{(x,),1}},Array{Term{BigInt,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#push#28"{Polynomial{BigInt,Term{BigInt,Monomial{(x,),1}},Array{Term{BigInt,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#compare_monomials#29"{Polynomial{BigInt,Term{BigInt,Monomial{(x,),1}},Array{Term{BigInt,Monomial{(x,),1}},1}},TypedPolynomials.var"#get1#25"{Polynomial{BigInt,Term{BigInt,Monomial{(x,),1}},Array{Term{BigInt,Monomial{(x,),1}},1}}}}, ::TypedPolynomials.var"#combine#30"{Polynomial{BigInt,Term{BigInt,Monomial{(x,),1}},Array{Term{BigInt,Monomial{(x,),1}},1}},typeof(-),Polynomial{BigInt,Term{BigInt,Monomial{(x,),1}},Array{Term{BigInt,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#keep#32"{Polynomial{BigInt,Term{BigInt,Monomial{(x,),1}},Array{Term{BigInt,Monomial{(x,),1}},1}}}, ::TypedPolynomials.var"#resize#31"{Polynomial{BigInt,Term{BigInt,Monomial{(x,),1}},Array{Term{BigInt,Monomial{(x,),1}},1}}}) at operators.jl:108
└ @ MultivariatePolynomials ~/.julia/packages/MultivariatePolynomials/871Fi/src/operators.jl:108
┌ Warning: `front(x)` is deprecated, use `first(x)` instead.
│   caller = polynomial_merge!(::Int64, ::Int64, ::TypedPolynomials.var"#get1#25"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#get2#26"{BigInt,typeof(+),Polynomial{BigInt,Term{BigInt,Monomial{(y,),1}},Array{Term{BigInt,Monomial{(y,),1}},1}}}, ::TypedPolynomials.var"#set#27"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#push#28"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#compare_monomials#29"{Polynomial{BigInt,Term{BigInt,Monomial{(y,),1}},Array{Term{BigInt,Monomial{(y,),1}},1}},TypedPolynomials.var"#get1#25"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}}, ::TypedPolynomials.var"#combine#30"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}},typeof(+),Polynomial{BigInt,Term{BigInt,Monomial{(y,),1}},Array{Term{BigInt,Monomial{(y,),1}},1}}}, ::TypedPolynomials.var"#keep#32"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#resize#31"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}) at operators.jl:108
└ @ MultivariatePolynomials ~/.julia/packages/MultivariatePolynomials/871Fi/src/operators.jl:108
┌ Warning: `front(x)` is deprecated, use `first(x)` instead.
│   caller = polynomial_merge!(::Int64, ::Int64, ::TypedPolynomials.var"#get1#25"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#get2#26"{BigInt,typeof(-),Polynomial{BigInt,Term{BigInt,Monomial{(y,),1}},Array{Term{BigInt,Monomial{(y,),1}},1}}}, ::TypedPolynomials.var"#set#27"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#push#28"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#compare_monomials#29"{Polynomial{BigInt,Term{BigInt,Monomial{(y,),1}},Array{Term{BigInt,Monomial{(y,),1}},1}},TypedPolynomials.var"#get1#25"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}}, ::TypedPolynomials.var"#combine#30"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}},typeof(-),Polynomial{BigInt,Term{BigInt,Monomial{(y,),1}},Array{Term{BigInt,Monomial{(y,),1}},1}}}, ::TypedPolynomials.var"#keep#32"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#resize#31"{Polynomial{BigInt,Term{BigInt,Monomial{(x, y),2}},Array{Term{BigInt,Monomial{(x, y),2}},1}}}) at operators.jl:108
└ @ MultivariatePolynomials ~/.julia/packages/MultivariatePolynomials/871Fi/src/operators.jl:108
Test Summary:                           | Pass  Total
MutableArithmetics with terms in BigInt | 5582   5582
Test Summary:                                | Pass  Total
MutableArithmetics with polynomials in Int64 | 5582   5582
Test Summary:                                 | Pass  Total
MutableArithmetics with polynomials in BigInt | 5621   5621
Test Summary: | Pass  Total
zip tests     |    9      9
Test Summary: | Pass  Total
Variable      |   56     56
Test Summary: | Pass  Total
Monomial      |   72     72
Test Summary: | Pass  Total
Term          |   68     68
Test Summary:   | Pass  Total
Monomial Vector |   42     42
Test Summary: | Pass  Total
Polynomial    |  135    135
Test Summary: | Pass  Total
Det           |    3      3
Test Summary: | Pass  Total
RationalPoly  |   24     24
Test Summary: | Pass  Total
Promotion     |   16     16
Test Summary: | Pass  Total
Hashing       |   15     15
Test Summary:      | Pass  Total
Norm of polynomial |    4      4
Test Summary: | Pass  Total
Algebra       |   34     34
Test Summary: | Pass  Total
Comparison    |   73     73
Test Summary: | Pass  Total
Substitution  |   24     24
Test Summary:   | Pass  Total
Differentiation |   30     30
┌ Warning: `front(x)` is deprecated, use `first(x)` instead.
│   caller = polynomial_merge!(::Int64, ::Int64, ::TypedPolynomials.var"#get1#25"{Polynomial{Float64,Term{Float64,Monomial{(x, y),2}},Array{Term{Float64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#get2#26"{Float64,typeof(+),Polynomial{Float64,Term{Float64,Monomial{(x, y),2}},Array{Term{Float64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#set#27"{Polynomial{Float64,Term{Float64,Monomial{(x, y),2}},Array{Term{Float64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#push#28"{Polynomial{Float64,Term{Float64,Monomial{(x, y),2}},Array{Term{Float64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#compare_monomials#29"{Polynomial{Float64,Term{Float64,Monomial{(x, y),2}},Array{Term{Float64,Monomial{(x, y),2}},1}},TypedPolynomials.var"#get1#25"{Polynomial{Float64,Term{Float64,Monomial{(x, y),2}},Array{Term{Float64,Monomial{(x, y),2}},1}}}}, ::TypedPolynomials.var"#combine#30"{Polynomial{Float64,Term{Float64,Monomial{(x, y),2}},Array{Term{Float64,Monomial{(x, y),2}},1}},typeof(+),Polynomial{Float64,Term{Float64,Monomial{(x, y),2}},Array{Term{Float64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#keep#32"{Polynomial{Float64,Term{Float64,Monomial{(x, y),2}},Array{Term{Float64,Monomial{(x, y),2}},1}}}, ::TypedPolynomials.var"#resize#31"{Polynomial{Float64,Term{Float64,Monomial{(x, y),2}},Array{Term{Float64,Monomial{(x, y),2}},1}}}) at operators.jl:108
└ @ MultivariatePolynomials ~/.julia/packages/MultivariatePolynomials/871Fi/src/operators.jl:108
Test Summary: | Pass  Total
Division      |   57     57
Test Summary: | Pass  Total
Show          |   30     30
Test Summary: | Pass  Total
Example 1     |    5      5
Test Summary: | Pass  Total
Example 2     |    3      3
x * x = x²
x ^ 3 = x³
x * y = xy
x + z = x + z
Test Summary: |
Demo          | No tests
   Testing TypedPolynomials tests passed 
