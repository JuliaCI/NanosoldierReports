Julia Version 1.5.0-DEV.537
Commit 58034ad942 (2020-03-30 17:59 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Requires ───────── v1.0.1
  Installed EllipsisNotation ─ v0.4.0
  Installed IntervalSets ───── v0.4.0
  Installed ArrayInterface ─── v2.6.2
  Installed StaticArrays ───── v0.12.1
  Installed StaticRanges ───── v0.5.12
   Updating `~/.julia/environments/v1.5/Project.toml`
   d8176aec + StaticRanges v0.5.12
   Updating `~/.julia/environments/v1.5/Manifest.toml`
   4fba245c + ArrayInterface v2.6.2
   da5c29d0 + EllipsisNotation v0.4.0
   8197267c + IntervalSets v0.4.0
   ae029012 + Requires v1.0.1
   90137ffa + StaticArrays v0.12.1
   d8176aec + StaticRanges v0.5.12
   ade2ca70 + Dates
   8f399da3 + Libdl
   37e2e46d + LinearAlgebra
   de0858da + Printf
   9a3f8284 + Random
   ea8e919c + SHA
   9e88b42a + Serialization
   2f01184e + SparseArrays
   10745b16 + Statistics
   cf7118a7 + UUIDs
   4ec0a83e + Unicode
    Testing StaticRanges
     Status `/tmp/jl_DtKQ1J/Project.toml`
   4fba245c ArrayInterface v2.6.2
   e30172f5 Documenter v0.24.7
   8197267c IntervalSets v0.4.0
   90137ffa StaticArrays v0.12.1
   d8176aec StaticRanges v0.5.12
   ade2ca70 Dates
   8dfed614 Test
     Status `/tmp/jl_DtKQ1J/Manifest.toml`
   4fba245c ArrayInterface v2.6.2
   ffbed154 DocStringExtensions v0.8.1
   e30172f5 Documenter v0.24.7
   da5c29d0 EllipsisNotation v0.4.0
   8197267c IntervalSets v0.4.0
   682c06a0 JSON v0.21.0
   69de0a69 Parsers v1.0.0
   ae029012 Requires v1.0.1
   90137ffa StaticArrays v0.12.1
   d8176aec StaticRanges v0.5.12
   2a0f44e3 Base64
   ade2ca70 Dates
   8ba89e20 Distributed
   b77e0a4c InteractiveUtils
   76f85450 LibGit2
   8f399da3 Libdl
   37e2e46d LinearAlgebra
   56ddb016 Logging
   d6f4376e Markdown
   a63ad114 Mmap
   44cfe95a Pkg
   de0858da Printf
   3fa0cd96 REPL
   9a3f8284 Random
   ea8e919c SHA
   9e88b42a Serialization
   6462fe0b Sockets
   2f01184e SparseArrays
   10745b16 Statistics
   8dfed614 Test
   cf7118a7 UUIDs
   4ec0a83e Unicode
Test Summary: | Pass  Total
checkindex    |    8      8
Test Summary: | Pass  Total
GapRange      |   65     65
findfirst: Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:26
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:26 =# @inferred(typed_findfirst(isequal(3), oneto_range)) == 3
  MethodError: findfirst(::Base.Fix2{typeof(isequal),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:26
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(0), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(0), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(2), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(2), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(0), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(0), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(3), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(3), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(0), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(0), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(5), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(5), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(0), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(0), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(6), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(6), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(1), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(1), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(2), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(2), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(1), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(1), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(3), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(3), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(1), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(1), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(5), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(5), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(1), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(1), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(6), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(6), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(4), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(4), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(2), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(2), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(4), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(4), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(3), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(3), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(4), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(4), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(5), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(5), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(4), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(4), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(6), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(6), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(7), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(7), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(2), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(2), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(7), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(7), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(3), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(3), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(7), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(7), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(5), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(5), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(7), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(7), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(6), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(6), Base.OneTo(5)): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::OneToSRange{Int64,5}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::OneToSRange{Int64,5}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(1), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(1), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(3), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(3), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(1), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(1), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(4), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(4), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(1), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(1), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(6), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(6), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(1), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(1), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(7), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(7), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(2), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(2), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(3), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(3), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(2), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(2), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(4), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(4), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(2), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(2), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(6), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(6), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(2), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(2), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(7), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(7), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(5), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(5), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(3), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(3), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(5), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(5), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(4), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(4), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(5), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(5), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(6), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(6), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(5), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(5), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(7), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(7), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(8), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(8), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(3), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(3), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(8), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(8), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(4), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(4), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(8), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(8), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(6), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(6), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(8), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(typed_findfirst(f(i1), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(8), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(typed_findfirst(f(i1), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41 =# @inferred(catch_nothing(find_first(f(i1), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:41
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:40
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(7), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(typed_findfirst(f(i2), m)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitMRange{Int64}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitMRange{Int64}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
findfirst(==(7), 2:6): Error During Test at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
  Test threw exception
  Expression: #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(typed_findfirst(f(i2), s)) == #= /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45 =# @inferred(catch_nothing(find_first(f(i2), b)))
  MethodError: findfirst(::Base.Fix2{typeof(==),Int64}, ::UnitSRange{Int64,2,6}) is ambiguous. Candidates:
    findfirst(p::Union{Base.Fix2{typeof(==),T}, Base.Fix2{typeof(isequal),T}}, r::AbstractUnitRange) where T<:Integer in Base at array.jl:1797
    findfirst(f::Function, r::Union{LinMRange{T}, OneToMRange{T}, UnitMRange{T}, LinSRange{T,B,E,L,D} where D where L where E where B, OneToSRange{T,E} where E, StepMRange{T,S} where S, StepMRangeLen{T,R,S} where S where R, StepSRange{T,Ts,F,S,L} where L where S where F where Ts, StepSRangeLen{T,Tr,Ts,R,S,L,F} where F where L where S where R where Ts where Tr, UnitSRange{T,F,L} where L where F} where T) in StaticRanges at /home/pkgeval/.julia/packages/StaticRanges/HEggF/src/findvalue.jl:29
  To resolve the ambiguity, try making one of the methods more specific, or adding a new method more specific than any of the existing applicable methods.
  Stacktrace:
   [1] (::var"#typed_findfirst#1")(::Function, ::UnitSRange{Int64,2,6}) at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:4
   [2] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:45
   [3] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [4] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:44
   [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [6] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:39
   [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [8] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:35
   [9] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
   [10] top-level scope at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:3
  
Test Summary:                           | Pass  Error  Total
findfirst                               | 1822    129   1951
  findfirst-mrange                      |    4             4
  findfirst-srange                      |    4             4
  Type: OneTo{Int64}                    |  256     64    320
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(0), Base.OneTo(5))   |           2      2
      findfirst(==(2), Base.OneTo(5))   |           2      2
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(0), Base.OneTo(5))   |           2      2
      findfirst(==(3), Base.OneTo(5))   |           2      2
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(0), Base.OneTo(5))   |           2      2
      findfirst(==(5), Base.OneTo(5))   |           2      2
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(0), Base.OneTo(5))   |           2      2
      findfirst(==(6), Base.OneTo(5))   |           2      2
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(1), Base.OneTo(5))   |           2      2
      findfirst(==(2), Base.OneTo(5))   |           2      2
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(1), Base.OneTo(5))   |           2      2
      findfirst(==(3), Base.OneTo(5))   |           2      2
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(1), Base.OneTo(5))   |           2      2
      findfirst(==(5), Base.OneTo(5))   |           2      2
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(1), Base.OneTo(5))   |           2      2
      findfirst(==(6), Base.OneTo(5))   |           2      2
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(4), Base.OneTo(5))   |           2      2
      findfirst(==(2), Base.OneTo(5))   |           2      2
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(4), Base.OneTo(5))   |           2      2
      findfirst(==(3), Base.OneTo(5))   |           2      2
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(4), Base.OneTo(5))   |           2      2
      findfirst(==(5), Base.OneTo(5))   |           2      2
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(4), Base.OneTo(5))   |           2      2
      findfirst(==(6), Base.OneTo(5))   |           2      2
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(7), Base.OneTo(5))   |           2      2
      findfirst(==(2), Base.OneTo(5))   |           2      2
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(7), Base.OneTo(5))   |           2      2
      findfirst(==(3), Base.OneTo(5))   |           2      2
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(7), Base.OneTo(5))   |           2      2
      findfirst(==(5), Base.OneTo(5))   |           2      2
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(7), Base.OneTo(5))   |           2      2
      findfirst(==(6), Base.OneTo(5))   |           2      2
  Type: UnitRange{Int64}                |  256     64    320
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(1), 2:6)             |           2      2
      findfirst(==(3), 2:6)             |           2      2
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(1), 2:6)             |           2      2
      findfirst(==(4), 2:6)             |           2      2
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(1), 2:6)             |           2      2
      findfirst(==(6), 2:6)             |           2      2
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(1), 2:6)             |           2      2
      findfirst(==(7), 2:6)             |           2      2
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(2), 2:6)             |           2      2
      findfirst(==(3), 2:6)             |           2      2
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(2), 2:6)             |           2      2
      findfirst(==(4), 2:6)             |           2      2
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(2), 2:6)             |           2      2
      findfirst(==(6), 2:6)             |           2      2
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(2), 2:6)             |           2      2
      findfirst(==(7), 2:6)             |           2      2
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(5), 2:6)             |           2      2
      findfirst(==(3), 2:6)             |           2      2
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(5), 2:6)             |           2      2
      findfirst(==(4), 2:6)             |           2      2
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(5), 2:6)             |           2      2
      findfirst(==(6), 2:6)             |           2      2
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(5), 2:6)             |           2      2
      findfirst(==(7), 2:6)             |           2      2
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(8), 2:6)             |           2      2
      findfirst(==(3), 2:6)             |           2      2
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(8), 2:6)             |           2      2
      findfirst(==(4), 2:6)             |           2      2
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(8), 2:6)             |           2      2
      findfirst(==(6), 2:6)             |           2      2
    Comparison: <                       |    4             4
    Comparison: >                       |    4             4
    Comparison: <=                      |    4             4
    Comparison: >=                      |    4             4
    Comparison: ==                      |           4      4
      findfirst(==(8), 2:6)             |           2      2
      findfirst(==(7), 2:6)             |           2      2
  Type: StepRange{Int64,Int64}          |  320           320
  Type: StepRange{Int64,Int64}          |  320           320
  Type: LinRange{Float64}               |  320           320
  Type: StepRangeLen{Int64,Int64,Int64} |  320           320
  Find with empty range                 |   20            20
ERROR: LoadError: LoadError: Some tests did not pass: 1822 passed, 0 failed, 129 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/findfirst_tests.jl:2
in expression starting at /home/pkgeval/.julia/packages/StaticRanges/HEggF/test/runtests.jl:68
ERROR: Package StaticRanges errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:53
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1523
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:316
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:303
 [5] #test#68 at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [6] test at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [7] #test#67 at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [8] test at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [10] test(::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [11] top-level scope at none:16
