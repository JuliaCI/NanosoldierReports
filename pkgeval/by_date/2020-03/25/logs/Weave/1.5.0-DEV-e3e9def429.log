Julia Version 1.5.0-DEV.505
Commit e3e9def429 (2020-03-24 17:47 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Requires ──────────────────── v1.0.1
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Tables ────────────────────── v0.2.11
  Installed DataAPI ───────────────────── v1.1.0
  Installed Parsers ───────────────────── v0.3.12
  Installed JSON ──────────────────────── v0.21.0
  Installed Highlights ────────────────── v0.4.5
  Installed Weave ─────────────────────── v0.9.4
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed TableTraits ───────────────── v1.0.0
  Installed Mustache ──────────────────── v1.0.0
  Installed YAML ──────────────────────── v0.4.0
  Installed DocStringExtensions ───────── v0.8.1
   Updating `~/.julia/environments/v1.5/Project.toml`
   44d3d7a6 + Weave v0.9.4
   Updating `~/.julia/environments/v1.5/Manifest.toml`
   9a962f9c + DataAPI v1.1.0
   e2d170a0 + DataValueInterfaces v1.0.0
   ffbed154 + DocStringExtensions v0.8.1
   eafb193a + Highlights v0.4.5
   82899510 + IteratorInterfaceExtensions v1.0.0
   682c06a0 + JSON v0.21.0
   ffc61752 + Mustache v1.0.0
   69de0a69 + Parsers v0.3.12
   ae029012 + Requires v1.0.1
   3783bdb8 + TableTraits v1.0.0
   bd369af6 + Tables v0.2.11
   44d3d7a6 + Weave v0.9.4
   ddb6d928 + YAML v0.4.0
   2a0f44e3 + Base64
   ade2ca70 + Dates
   8ba89e20 + Distributed
   b77e0a4c + InteractiveUtils
   76f85450 + LibGit2
   8f399da3 + Libdl
   37e2e46d + LinearAlgebra
   56ddb016 + Logging
   d6f4376e + Markdown
   a63ad114 + Mmap
   44cfe95a + Pkg
   de0858da + Printf
   3fa0cd96 + REPL
   9a3f8284 + Random
   ea8e919c + SHA
   9e88b42a + Serialization
   6462fe0b + Sockets
   8dfed614 + Test
   cf7118a7 + UUIDs
   4ec0a83e + Unicode
    Testing Weave
     Status `/tmp/jl_OGyUG9/Project.toml`
   159f3aea Cairo v1.0.2
   8f4d0f93 Conda v1.4.1
   c91e804a Gadfly v1.2.1
   eafb193a Highlights v0.4.5
   7073ff75 IJulia v1.21.1
   682c06a0 JSON v0.21.0
   ffc61752 Mustache v1.0.0
   91a5bcdd Plots v0.29.8
   ae029012 Requires v1.0.1
   44d3d7a6 Weave v0.9.4
   ddb6d928 YAML v0.4.0
   2a0f44e3 Base64
   ade2ca70 Dates
   d6f4376e Markdown
   de0858da Printf
   3fa0cd96 REPL
   9e88b42a Serialization
   8dfed614 Test
     Status `/tmp/jl_OGyUG9/Manifest.toml`
   621f4979 AbstractFFTs v0.5.0
   7d9fca2a Arpack v0.4.0
   68821587 Arpack_jll v3.5.0+2
   4fba245c ArrayInterface v2.6.1
   13072b0f AxisAlgorithms v1.0.0
   b99e7846 BinaryProvider v0.5.8
   6e34b625 Bzip2_jll v1.0.6+1
   159f3aea Cairo v1.0.2
   83423d85 Cairo_jll v1.16.0+2
   324d7699 CategoricalArrays v0.7.7
   3da002f7 ColorTypes v0.9.1
   5ae59095 Colors v0.11.2
   bbf7d656 CommonSubexpressions v0.2.0
   34da2185 Compat v2.2.0
   e66e0078 CompilerSupportLibraries_jll v0.3.1+0
   a81c6b42 Compose v0.8.2
   8f4d0f93 Conda v1.4.1
   d38c429a Contour v0.5.2
   7ad07ef1 CoupledFields v0.1.0
   9a962f9c DataAPI v1.1.0
   864edb3b DataStructures v0.17.10
   e2d170a0 DataValueInterfaces v1.0.0
   163ba53b DiffResults v1.0.2
   b552c78f DiffRules v1.0.1
   b4f34e82 Distances v0.8.2
   31c24e10 Distributions v0.23.1
   ffbed154 DocStringExtensions v0.8.1
   2e619515 Expat_jll v2.2.7+0
   c87230d0 FFMPEG v0.3.0
   b22a6f82 FFMPEG_jll v4.1.0+2
   7a1cc6ca FFTW v1.2.0
   f5851436 FFTW_jll v3.3.9+4
   1a297f60 FillArrays v0.8.5
   6a86dc24 FiniteDiff v2.3.0
   53c48c17 FixedPointNumbers v0.7.1
   a3f928ae Fontconfig_jll v2.13.1+10
   f6369f11 ForwardDiff v0.10.9
   d7e528f0 FreeType2_jll v2.10.1+1
   559328eb FriBidi_jll v1.0.5+2
   28b8d3ca GR v0.48.0
   c91e804a Gadfly v1.2.1
   4d00f742 GeometryTypes v0.8.1
   78b55507 Gettext_jll v0.20.1+1
   7746bdde Glib_jll v2.59.0+1
   a2bd30eb Graphics v1.0.2
   3b182d85 Graphite2_jll v1.3.13+1
   2e76f6c2 HarfBuzz_jll v2.6.1+4
   a1b4810d Hexagons v0.2.0
   eafb193a Highlights v0.4.5
   7073ff75 IJulia v1.21.1
   9b13fd28 IndirectArrays v0.5.1
   1d5cc7b8 IntelOpenMP_jll v2018.0.3+0
   a98d9a8b Interpolations v0.12.5
   c8e1da08 IterTools v1.3.0
   82899510 IteratorInterfaceExtensions v1.0.0
   682c06a0 JSON v0.21.0
   e5e0dc1b Juno v0.8.1
   5ab0869b KernelDensity v0.5.1
   c1c5ebd0 LAME_jll v3.100.0+0
   dd4b983a LZO_jll v2.10.0+0
   dd192d2f LibVPX_jll v1.8.1+1
   e9f186c6 Libffi_jll v3.2.1+0
   d4300ac3 Libgcrypt_jll v1.8.5+0
   7add5ba3 Libgpg_error_jll v1.36.0+0
   94ce4f54 Libiconv_jll v1.16.0+1
   38a345b3 Libuuid_jll v2.34.0+3
   d3d80556 LineSearches v7.0.1
   4345ca2d Loess v0.5.1
   856f044c MKL_jll v2019.0.117+2
   1914dd2f MacroTools v0.5.5
   739be429 MbedTLS v0.7.0
   442fdcdd Measures v0.3.1
   e89f7d12 Media v0.5.0
   e1d29d7a Missings v0.4.3
   ffc61752 Mustache v1.0.0
   d41bc354 NLSolversBase v7.6.1
   77ba4419 NaNMath v0.3.3
   6fe1bfb0 OffsetArrays v1.0.3
   e7412a2a Ogg_jll v1.3.3+0
   4536629a OpenBLAS_jll v0.3.7+8
   458c3c95 OpenSSL_jll v1.1.1+1
   efe28fd5 OpenSpecFun_jll v0.5.3+3
   429524aa Optim v0.20.1
   91d4177d Opus_jll v1.3.1+0
   bac558e1 OrderedCollections v1.1.0
   2f80f16e PCRE_jll v8.42.0+1
   90014a1f PDMats v0.9.12
   36c8627f Pango_jll v1.42.4+7
   d96e819e Parameters v0.12.0
   69de0a69 Parsers v0.3.12
   30392449 Pixman_jll v0.38.4+1
   ccf2f8ad PlotThemes v1.0.1
   995b91a9 PlotUtils v0.6.4
   91a5bcdd Plots v0.29.8
   85a6dd25 PositiveFactorizations v0.2.3
   1fd47b50 QuadGK v2.3.1
   c84ed2f1 Ratios v0.4.0
   3cdcf5f2 RecipesBase v0.8.0
   189a3867 Reexport v0.2.0
   ae029012 Requires v1.0.1
   79098fc4 Rmath v0.6.1
   f50d1b31 Rmath_jll v0.2.2+0
   992d4aef Showoff v0.3.1
   b85f4697 SoftGlobalScope v1.0.10
   a2af1166 SortingAlgorithms v0.3.1
   276daf66 SpecialFunctions v0.10.0
   90137ffa StaticArrays v0.12.1
   2913bbd2 StatsBase v0.32.2
   4c63d2b9 StatsFuns v0.9.4
   3783bdb8 TableTraits v1.0.0
   bd369af6 Tables v0.2.11
   81def892 VersionParsing v1.2.0
   44d3d7a6 Weave v0.9.4
   efce3f68 WoodburyMatrices v0.5.1
   546b0b6d X11_jll v1.6.8+5
   02c8fc9c XML2_jll v2.9.9+1
   aed1982a XSLT_jll v1.1.33+0
   4f6342f7 Xorg_libX11_jll v1.6.9+1
   0c0b7dd1 Xorg_libXau_jll v1.0.9+1
   a3789734 Xorg_libXdmcp_jll v1.1.3+1
   1082639a Xorg_libXext_jll v1.3.4+1
   ea2f1a96 Xorg_libXrender_jll v0.9.10+1
   14d82f49 Xorg_libpthread_stubs_jll v0.1.0+0
   c7cfdc94 Xorg_libxcb_jll v1.13.0+1
   21e99dc2 Xorg_renderproto_jll v0.11.1+0
   7c09cfe3 Xorg_util_macros_jll v1.19.2+0
   c2e9c405 Xorg_xcb_proto_jll v1.13.0+0
   d13bc2ba Xorg_xextproto_jll v7.3.0+0
   46797783 Xorg_xproto_jll v7.0.31+0
   c5fb5394 Xorg_xtrans_jll v1.4.0+0
   ddb6d928 YAML v0.4.0
   c2297ded ZMQ v1.2.0
   8f1865be ZeroMQ_jll v4.3.2+1
   83775a58 Zlib_jll v1.2.11+8
   0ac62f75 libass_jll v0.14.0+0
   f638f0a6 libfdk_aac_jll v0.1.6+1
   b53b4c65 libpng_jll v1.6.37+2
   f27f6e37 libvorbis_jll v1.3.6+2
   1270edf5 x264_jll v2019.5.25+1
   dfaa095f x265_jll v3.0.0+0
   2a0f44e3 Base64
   ade2ca70 Dates
   8bb1440f DelimitedFiles
   8ba89e20 Distributed
   7b1f6079 FileWatching
   9fa8497b Future
   b77e0a4c InteractiveUtils
   76f85450 LibGit2
   8f399da3 Libdl
   37e2e46d LinearAlgebra
   56ddb016 Logging
   d6f4376e Markdown
   a63ad114 Mmap
   44cfe95a Pkg
   de0858da Printf
   9abbd945 Profile
   3fa0cd96 REPL
   9a3f8284 Random
   ea8e919c SHA
   9e88b42a Serialization
   1a1011a3 SharedArrays
   6462fe0b Sockets
   2f01184e SparseArrays
   10745b16 Statistics
   4607b0f0 SuiteSparse
   8dfed614 Test
   cf7118a7 UUIDs
   4ec0a83e Unicode
[ Info: Test: Chunk options
[ Info: Weaving chunk 1 from line 2
[ Info: Weaving chunk 2 from line 6
[ Info: Weaving chunk 3 from line 12
[ Info: Weaving chunk 4 from line 19
[ Info: Weaving chunk 5 from line 25
[ Info: Weaving chunk 6 from line 31
[ Info: Weaving chunk 7 from line 36
[ Info: Weaving chunk 8 from line 41
[ Info: Weaving chunk 9 from line 47
[ Info: Weaving chunk 10 from line 51
[ Info: Weaving chunk 11 from line 55
[ Info: Report weaved to /home/pkgeval/.julia/packages/Weave/zT0iu/test/documents/chunk_options.md
[ Info: Writing to file documents/tangle/chunk_options.jl
[ Info: Testing error handling
[ Info: Weaving chunk 1 from line 2
┌ Warning: ERROR: ArgumentError occurred, including output in Weaved document
└ @ Weave ~/.julia/packages/Weave/zT0iu/src/run.jl:246
[ Info: Weaving chunk 2 from line 6
┌ Warning: ERROR: ErrorException occurred, including output in Weaved document
└ @ Weave ~/.julia/packages/Weave/zT0iu/src/run.jl:246
[ Info: Weaving chunk 3 from line 11
┌ Warning: ERROR: UndefVarError occurred, including output in Weaved document
└ @ Weave ~/.julia/packages/Weave/zT0iu/src/run.jl:246
┌ Warning: ERROR: ErrorException occurred, including output in Weaved document
└ @ Weave ~/.julia/packages/Weave/zT0iu/src/run.jl:246
[ Info: Weaving chunk 1 from line 2
[ Info: Weaving chunk 1 from line 2
┌ Warning: ERROR: ArgumentError occurred, including output in Weaved document
└ @ Weave ~/.julia/packages/Weave/zT0iu/src/run.jl:246
[ Info: Weaving chunk 2 from line 6
┌ Warning: ERROR: ErrorException occurred, including output in Weaved document
└ @ Weave ~/.julia/packages/Weave/zT0iu/src/run.jl:246
[ Info: Weaving chunk 3 from line 11
┌ Warning: ERROR: UndefVarError occurred, including output in Weaved document
└ @ Weave ~/.julia/packages/Weave/zT0iu/src/run.jl:246
┌ Warning: ERROR: ErrorException occurred, including output in Weaved document
└ @ Weave ~/.julia/packages/Weave/zT0iu/src/run.jl:246
[ Info: Weaving chunk 1 from line 1
[ Info: Weaving chunk 2 from line 13
[ Info: Weaving chunk 1 from line 1
[ Info: Weaving chunk 2 from line 13
[ Info: Test: Converting
[ Info: Testing formatters
[ Info: Weaving chunk 1 from line 2
[ Info: Weaving chunk 2 from line 6
[ Info: Weaving chunk 3 from line 12
[ Info: Weaving chunk 4 from line 19
[ Info: Weaving chunk 5 from line 25
[ Info: Weaving chunk 6 from line 31
[ Info: Weaving chunk 7 from line 36
[ Info: Weaving chunk 8 from line 41
[ Info: Weaving chunk 9 from line 47
[ Info: Weaving chunk 10 from line 51
[ Info: Weaving chunk 11 from line 55
[ Info: Weaving chunk 1 from line 2
[ Info: Weaving chunk 2 from line 6
[ Info: Weaving chunk 3 from line 12
[ Info: Weaving chunk 4 from line 19
[ Info: Weaving chunk 5 from line 25
[ Info: Weaving chunk 6 from line 31
[ Info: Weaving chunk 7 from line 36
[ Info: Weaving chunk 8 from line 41
[ Info: Weaving chunk 9 from line 47
[ Info: Weaving chunk 10 from line 51
[ Info: Weaving chunk 11 from line 55
[ Info: Weaving chunk 1 from line 3
[ Info: Weaving chunk 2 from line 15
[ Info: Weaving chunk 1 from line 3
[ Info: Weaving chunk 2 from line 15
[ Info: Weaving chunk 1 from line 3
[ Info: Weaving chunk 2 from line 15
[ Info: Weaving chunk 1 from line 1
[ Info: Weaving chunk 1 from line 1
[ Info: Testing figure formatters
[ Info: Testing rich output
[ Info: Weaving chunk 1 from line 3
[ Info: Weaving chunk 2 from line 43
[ Info: Weaving chunk 3 from line 48
[ Info: Weaving chunk 4 from line 54
[ Info: Report weaved to documents/multimedia/rich_output.html
Rich output: Test Failed at /home/pkgeval/.julia/packages/Weave/zT0iu/test/rich_output.jl:9
  Expression: result == ref
   Evaluated: "\n\n<pre class='hljl'>\n<span class='hljl-k'>import</span><span class='hljl-t'> </span><span class='hljl-n'>Base</span><span class='hljl-t'>\n</span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-n'>Base</span><span class='hljl-oB'>.</span><span class='hljl-nf'>show</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-oB'>::</span><span class='hljl-n'>IO</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>m</span><span class='hljl-oB'>::</span><span class='hljl-so'>MIME&quot;text/html&quot;</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-oB'>::</span><span class='hljl-n'>Array</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;&lt;table&gt;&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-nf'>size</span><span class='hljl-p'>(</span><span class='hljl-n'>x</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-t'>\n        </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;&lt;tr&gt;&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n        </span><span class='hljl-p'>[</span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;&lt;td&gt;</span><span class='hljl-si'>\$r</span><span class='hljl-s'>&lt;/td&gt;&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>r</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>,</span><span class='hljl-oB'>:</span><span class='hljl-p'>]]</span><span class='hljl-t'>\n        </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;&lt;/tr&gt;&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-k'>end</span><span class='hljl-t'>\n    </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;&lt;/table&gt;&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n</span><span class='hljl-k'>end</span><span class='hljl-t'>\n\n</span><span class='hljl-cs'>#This isn&#39;t valid latex, doesn&#39;t matter for the test</span><span class='hljl-t'>\n</span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-n'>Base</span><span class='hljl-oB'>.</span><span class='hljl-nf'>show</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-oB'>::</span><span class='hljl-n'>IO</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>m</span><span class='hljl-oB'>::</span><span class='hljl-so'>MIME&quot;text/latex&quot;</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-oB'>::</span><span class='hljl-n'>Array</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-nf'>println</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;</span><span class='hljl-se'>\\\\</span><span class='hljl-s'>begin{tabular}&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-nf'>size</span><span class='hljl-p'>(</span><span class='hljl-n'>x</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-t'>\n        </span><span class='hljl-p'>[</span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;</span><span class='hljl-si'>\$r</span><span class='hljl-s'> &amp; &quot;</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>r</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>,</span><span class='hljl-oB'>:</span><span class='hljl-p'>]]</span><span class='hljl-t'>\n        </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;</span><span class='hljl-se'>\\\\\\\\</span><span class='hljl-s'>&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n        </span><span class='hljl-nf'>println</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot; </span><span class='hljl-se'>\\\\</span><span class='hljl-s'>hline&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-k'>end</span><span class='hljl-t'>\n    </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;</span><span class='hljl-se'>\\\\</span><span class='hljl-s'>end{tabular&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n</span><span class='hljl-k'>end</span><span class='hljl-t'>\n\n</span><span class='hljl-cs'>#This isn&#39;t valid markdown, doesn&#39;t matter for the test</span><span class='hljl-t'>\n</span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-n'>Base</span><span class='hljl-oB'>.</span><span class='hljl-nf'>show</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-oB'>::</span><span class='hljl-n'>IO</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>m</span><span class='hljl-oB'>::</span><span class='hljl-so'>MIME&quot;text/markdown&quot;</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-oB'>::</span><span class='hljl-n'>Array</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-nf'>println</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;-----&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-nf'>size</span><span class='hljl-p'>(</span><span class='hljl-n'>x</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-t'>\n        </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;| &quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n        </span><span class='hljl-p'>[</span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;</span><span class='hljl-si'>\$r</span><span class='hljl-s'> | &quot;</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>r</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>,</span><span class='hljl-oB'>:</span><span class='hljl-p'>]]</span><span class='hljl-t'>\n        </span><span class='hljl-nf'>println</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-k'>end</span><span class='hljl-t'>\n    </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;-----&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n</span><span class='hljl-k'>end</span><span class='hljl-t'>\n\n\n</span><span class='hljl-n'>x</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-p'>[</span><span class='hljl-nf'>collect</span><span class='hljl-p'>(</span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-ni'>3</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-nf'>collect</span><span class='hljl-p'>(</span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-ni'>3</span><span class='hljl-p'>)]</span><span class='hljl-t'>\n</span><span class='hljl-n'>ca</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>collect</span><span class='hljl-p'>(</span><span class='hljl-sc'>&#39;a&#39;</span><span class='hljl-oB'>:</span><span class='hljl-sc'>&#39;d&#39;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n</span><span class='hljl-n'>ca</span>\n</pre>\n\n\n\n<table><tr><td>a</td></tr><tr><td>b</td></tr><tr><td>c</td></tr><tr><td>d</td></tr></table>\n\n\n<pre class='hljl'>\n<span class='hljl-nf'>display</span><span class='hljl-p'>(</span><span class='hljl-n'>ca</span><span class='hljl-p'>)</span><span class='hljl-t'>\n</span><span class='hljl-nf'>display</span><span class='hljl-p'>(</span><span class='hljl-n'>x</span><span class='hljl-p'>)</span>\n</pre>\n\n\n\n<table><tr><td>a</td></tr><tr><td>b</td></tr><tr><td>c</td></tr><tr><td>d</td></tr></table>\n<table><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>2</td></tr><tr><td>3</td><td>3</td></tr></table>\n\n<pre class='hljl'>\n<span class='hljl-nB'>julia&gt; </span><span class='hljl-n'>x</span><span class='hljl-t'>\n3×2 Array{Int64,2}:\n 1  1\n 2  2\n 3  3\n\n</span><span class='hljl-nB'>julia&gt; </span><span class='hljl-n'>ca</span><span class='hljl-t'>\n4-element Array{Char,1}:\n &#39;a&#39;: ASCII/Unicode U+0061 (category Ll: Letter, lowercase)\n &#39;b&#39;: ASCII/Unicode U+0062 (category Ll: Letter, lowercase)\n &#39;c&#39;: ASCII/Unicode U+0063 (category Ll: Letter, lowercase)\n &#39;d&#39;: ASCII/Unicode U+0064 (category Ll: Letter, lowercase)</span>\n</pre>\n\n\n<pre class='hljl'>\n<span class='hljl-k'>using</span><span class='hljl-t'> </span><span class='hljl-n'>Markdown</span><span class='hljl-t'>\n</span><span class='hljl-n'>m</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>Markdown</span><span class='hljl-oB'>.</span><span class='hljl-nf'>parse</span><span class='hljl-p'>(</span><span class='hljl-s'>&quot;**Some Markdown**&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n</span><span class='hljl-n'>m</span>\n</pre>\n\n\n\n<div class=\"markdown\"><p><strong>Some Markdown</strong></p>\n</div>\n\n" == "\n\n<pre class='hljl'>\n<span class='hljl-k'>import</span><span class='hljl-t'> </span><span class='hljl-n'>Base</span><span class='hljl-t'>\n</span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-n'>Base</span><span class='hljl-oB'>.</span><span class='hljl-nf'>show</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-oB'>::</span><span class='hljl-n'>IO</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>m</span><span class='hljl-oB'>::</span><span class='hljl-so'>MIME&quot;text/html&quot;</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-oB'>::</span><span class='hljl-n'>Array</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;&lt;table&gt;&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-nf'>size</span><span class='hljl-p'>(</span><span class='hljl-n'>x</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-t'>\n        </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;&lt;tr&gt;&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n        </span><span class='hljl-p'>[</span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;&lt;td&gt;</span><span class='hljl-si'>\$r</span><span class='hljl-s'>&lt;/td&gt;&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>r</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>,</span><span class='hljl-oB'>:</span><span class='hljl-p'>]]</span><span class='hljl-t'>\n        </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;&lt;/tr&gt;&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-k'>end</span><span class='hljl-t'>\n    </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;&lt;/table&gt;&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n</span><span class='hljl-k'>end</span><span class='hljl-t'>\n\n</span><span class='hljl-cs'>#This isn&#39;t valid latex, doesn&#39;t matter for the test</span><span class='hljl-t'>\n</span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-n'>Base</span><span class='hljl-oB'>.</span><span class='hljl-nf'>show</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-oB'>::</span><span class='hljl-n'>IO</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>m</span><span class='hljl-oB'>::</span><span class='hljl-so'>MIME&quot;text/latex&quot;</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-oB'>::</span><span class='hljl-n'>Array</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-nf'>println</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;</span><span class='hljl-se'>\\\\</span><span class='hljl-s'>begin{tabular}&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-nf'>size</span><span class='hljl-p'>(</span><span class='hljl-n'>x</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-t'>\n        </span><span class='hljl-p'>[</span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;</span><span class='hljl-si'>\$r</span><span class='hljl-s'> &amp; &quot;</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>r</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>,</span><span class='hljl-oB'>:</span><span class='hljl-p'>]]</span><span class='hljl-t'>\n        </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;</span><span class='hljl-se'>\\\\\\\\</span><span class='hljl-s'>&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n        </span><span class='hljl-nf'>println</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot; </span><span class='hljl-se'>\\\\</span><span class='hljl-s'>hline&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-k'>end</span><span class='hljl-t'>\n    </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;</span><span class='hljl-se'>\\\\</span><span class='hljl-s'>end{tabular&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n</span><span class='hljl-k'>end</span><span class='hljl-t'>\n\n</span><span class='hljl-cs'>#This isn&#39;t valid markdown, doesn&#39;t matter for the test</span><span class='hljl-t'>\n</span><span class='hljl-k'>function</span><span class='hljl-t'> </span><span class='hljl-n'>Base</span><span class='hljl-oB'>.</span><span class='hljl-nf'>show</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-oB'>::</span><span class='hljl-n'>IO</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>m</span><span class='hljl-oB'>::</span><span class='hljl-so'>MIME&quot;text/markdown&quot;</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-oB'>::</span><span class='hljl-n'>Array</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-nf'>println</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;-----&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>i</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-nf'>size</span><span class='hljl-p'>(</span><span class='hljl-n'>x</span><span class='hljl-p'>,</span><span class='hljl-ni'>1</span><span class='hljl-p'>)</span><span class='hljl-t'>\n        </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;| &quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n        </span><span class='hljl-p'>[</span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;</span><span class='hljl-si'>\$r</span><span class='hljl-s'> | &quot;</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-k'>for</span><span class='hljl-t'> </span><span class='hljl-n'>r</span><span class='hljl-t'> </span><span class='hljl-kp'>in</span><span class='hljl-t'> </span><span class='hljl-n'>x</span><span class='hljl-p'>[</span><span class='hljl-n'>i</span><span class='hljl-p'>,</span><span class='hljl-oB'>:</span><span class='hljl-p'>]]</span><span class='hljl-t'>\n        </span><span class='hljl-nf'>println</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n    </span><span class='hljl-k'>end</span><span class='hljl-t'>\n    </span><span class='hljl-nf'>print</span><span class='hljl-p'>(</span><span class='hljl-n'>io</span><span class='hljl-p'>,</span><span class='hljl-t'> </span><span class='hljl-s'>&quot;-----&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n</span><span class='hljl-k'>end</span><span class='hljl-t'>\n\n\n</span><span class='hljl-n'>x</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-p'>[</span><span class='hljl-nf'>collect</span><span class='hljl-p'>(</span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-ni'>3</span><span class='hljl-p'>)</span><span class='hljl-t'> </span><span class='hljl-nf'>collect</span><span class='hljl-p'>(</span><span class='hljl-ni'>1</span><span class='hljl-oB'>:</span><span class='hljl-ni'>3</span><span class='hljl-p'>)]</span><span class='hljl-t'>\n</span><span class='hljl-n'>ca</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-nf'>collect</span><span class='hljl-p'>(</span><span class='hljl-sc'>&#39;a&#39;</span><span class='hljl-oB'>:</span><span class='hljl-sc'>&#39;d&#39;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n</span><span class='hljl-n'>ca</span>\n</pre>\n\n\n\n<table><tr><td>a</td></tr><tr><td>b</td></tr><tr><td>c</td></tr><tr><td>d</td></tr></table>\n\n\n<pre class='hljl'>\n<span class='hljl-nf'>display</span><span class='hljl-p'>(</span><span class='hljl-n'>ca</span><span class='hljl-p'>)</span><span class='hljl-t'>\n</span><span class='hljl-nf'>display</span><span class='hljl-p'>(</span><span class='hljl-n'>x</span><span class='hljl-p'>)</span>\n</pre>\n\n\n\n<table><tr><td>a</td></tr><tr><td>b</td></tr><tr><td>c</td></tr><tr><td>d</td></tr></table>\n<table><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>2</td></tr><tr><td>3</td><td>3</td></tr></table>\n\n<pre class='hljl'>\n<span class='hljl-nB'>julia&gt; </span><span class='hljl-n'>x</span><span class='hljl-t'>\n3×2 Array{Int64,2}:\n 1  1\n 2  2\n 3  3\n\n</span><span class='hljl-nB'>julia&gt; </span><span class='hljl-n'>ca</span><span class='hljl-t'>\n4-element Array{Char,1}:\n &#39;a&#39;\n &#39;b&#39;\n &#39;c&#39;\n &#39;d&#39;</span>\n</pre>\n\n\n<pre class='hljl'>\n<span class='hljl-k'>using</span><span class='hljl-t'> </span><span class='hljl-n'>Markdown</span><span class='hljl-t'>\n</span><span class='hljl-n'>m</span><span class='hljl-t'> </span><span class='hljl-oB'>=</span><span class='hljl-t'> </span><span class='hljl-n'>Markdown</span><span class='hljl-oB'>.</span><span class='hljl-nf'>parse</span><span class='hljl-p'>(</span><span class='hljl-s'>&quot;**Some Markdown**&quot;</span><span class='hljl-p'>)</span><span class='hljl-t'>\n</span><span class='hljl-n'>m</span>\n</pre>\n\n\n\n<div class=\"markdown\"><p><strong>Some Markdown</strong></p>\n</div>\n\n"
Stacktrace:
 [1] mmtest(::String, ::String, ::String) at /home/pkgeval/.julia/packages/Weave/zT0iu/test/rich_output.jl:9
 [2] top-level scope at /home/pkgeval/.julia/packages/Weave/zT0iu/test/rich_output.jl:13
 [3] include(::String) at ./client.jl:441
 [4] top-level scope at /home/pkgeval/.julia/packages/Weave/zT0iu/test/runtests.jl:34
 [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
 [6] top-level scope at /home/pkgeval/.julia/packages/Weave/zT0iu/test/runtests.jl:33
 [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
 [8] top-level scope at /home/pkgeval/.julia/packages/Weave/zT0iu/test/runtests.jl:5
[ Info: Weaving chunk 1 from line 3
[ Info: Weaving chunk 2 from line 43
[ Info: Weaving chunk 3 from line 48
[ Info: Weaving chunk 4 from line 54
[ Info: Report weaved to documents/multimedia/rich_output.md
Rich output: Test Failed at /home/pkgeval/.julia/packages/Weave/zT0iu/test/rich_output.jl:9
  Expression: result == ref
   Evaluated: "~~~~{.julia}\nimport Base\nfunction Base.show(io::IO, m::MIME\"text/html\", x::Array)\n    print(io, \"<table>\")\n    for i in 1:size(x,1)\n        print(io, \"<tr>\")\n        [print(io, \"<td>\$r</td>\") for r in x[i,:]]\n        print(io, \"</tr>\")\n    end\n    print(io, \"</table>\")\nend\n\n#This isn't valid latex, doesn't matter for the test\nfunction Base.show(io::IO, m::MIME\"text/latex\", x::Array)\n    println(io, \"\\\\begin{tabular}\")\n    for i in 1:size(x,1)\n        [print(io, \"\$r & \") for r in x[i,:]]\n        print(io, \"\\\\\\\\\")\n        println(io, \" \\\\hline\")\n    end\n    print(io, \"\\\\end{tabular\")\nend\n\n#This isn't valid markdown, doesn't matter for the test\nfunction Base.show(io::IO, m::MIME\"text/markdown\", x::Array)\n    println(io, \"-----\")\n    for i in 1:size(x,1)\n        print(io, \"| \")\n        [print(io, \"\$r | \") for r in x[i,:]]\n        println(io, \"\")\n    end\n    print(io, \"-----\")\nend\n\n\nx = [collect(1:3) collect(1:3)]\nca = collect('a':'d')\nca\n~~~~~~~~~~~~~\n\n\n\n-----\n| a | \n| b | \n| c | \n| d | \n-----\n\n~~~~{.julia}\ndisplay(ca)\ndisplay(x)\n~~~~~~~~~~~~~\n\n\n\n-----\n| a | \n| b | \n| c | \n| d | \n-----\n-----\n| 1 | 1 | \n| 2 | 2 | \n| 3 | 3 | \n-----\n\n~~~~{.julia}\njulia> x\n3×2 Array{Int64,2}:\n 1  1\n 2  2\n 3  3\n\njulia> ca\n4-element Array{Char,1}:\n 'a': ASCII/Unicode U+0061 (category Ll: Letter, lowercase)\n 'b': ASCII/Unicode U+0062 (category Ll: Letter, lowercase)\n 'c': ASCII/Unicode U+0063 (category Ll: Letter, lowercase)\n 'd': ASCII/Unicode U+0064 (category Ll: Letter, lowercase)\n\n~~~~~~~~~~~~~\n\n\n\n~~~~{.julia}\nusing Markdown\nm = Markdown.parse(\"**Some Markdown**\")\nm\n~~~~~~~~~~~~~\n\n\n\n**Some Markdown**\n\n" == "~~~~{.julia}\nimport Base\nfunction Base.show(io::IO, m::MIME\"text/html\", x::Array)\n    print(io, \"<table>\")\n    for i in 1:size(x,1)\n        print(io, \"<tr>\")\n        [print(io, \"<td>\$r</td>\") for r in x[i,:]]\n        print(io, \"</tr>\")\n    end\n    print(io, \"</table>\")\nend\n\n#This isn't valid latex, doesn't matter for the test\nfunction Base.show(io::IO, m::MIME\"text/latex\", x::Array)\n    println(io, \"\\\\begin{tabular}\")\n    for i in 1:size(x,1)\n        [print(io, \"\$r & \") for r in x[i,:]]\n        print(io, \"\\\\\\\\\")\n        println(io, \" \\\\hline\")\n    end\n    print(io, \"\\\\end{tabular\")\nend\n\n#This isn't valid markdown, doesn't matter for the test\nfunction Base.show(io::IO, m::MIME\"text/markdown\", x::Array)\n    println(io, \"-----\")\n    for i in 1:size(x,1)\n        print(io, \"| \")\n        [print(io, \"\$r | \") for r in x[i,:]]\n        println(io, \"\")\n    end\n    print(io, \"-----\")\nend\n\n\nx = [collect(1:3) collect(1:3)]\nca = collect('a':'d')\nca\n~~~~~~~~~~~~~\n\n\n\n-----\n| a | \n| b | \n| c | \n| d | \n-----\n\n~~~~{.julia}\ndisplay(ca)\ndisplay(x)\n~~~~~~~~~~~~~\n\n\n\n-----\n| a | \n| b | \n| c | \n| d | \n-----\n-----\n| 1 | 1 | \n| 2 | 2 | \n| 3 | 3 | \n-----\n\n~~~~{.julia}\njulia> x\n3×2 Array{Int64,2}:\n 1  1\n 2  2\n 3  3\n\njulia> ca\n4-element Array{Char,1}:\n 'a'\n 'b'\n 'c'\n 'd'\n\n~~~~~~~~~~~~~\n\n\n\n~~~~{.julia}\nusing Markdown\nm = Markdown.parse(\"**Some Markdown**\")\nm\n~~~~~~~~~~~~~\n\n\n\n**Some Markdown**\n\n"
Stacktrace:
 [1] mmtest(::String, ::String, ::String) at /home/pkgeval/.julia/packages/Weave/zT0iu/test/rich_output.jl:9
 [2] top-level scope at /home/pkgeval/.julia/packages/Weave/zT0iu/test/rich_output.jl:14
 [3] include(::String) at ./client.jl:441
 [4] top-level scope at /home/pkgeval/.julia/packages/Weave/zT0iu/test/runtests.jl:34
 [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
 [6] top-level scope at /home/pkgeval/.julia/packages/Weave/zT0iu/test/runtests.jl:33
 [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
 [8] top-level scope at /home/pkgeval/.julia/packages/Weave/zT0iu/test/runtests.jl:5
[ Info: Weaving chunk 1 from line 3
[ Info: Weaving chunk 2 from line 43
[ Info: Weaving chunk 3 from line 48
[ Info: Weaving chunk 4 from line 54
[ Info: Report weaved to documents/multimedia/rich_output.tex
Rich output: Test Failed at /home/pkgeval/.julia/packages/Weave/zT0iu/test/rich_output.jl:9
  Expression: result == ref
   Evaluated: "\\begin{juliacode}\nimport Base\nfunction Base.show(io::IO, m::MIME\"text/html\", x::Array)\n    print(io, \"<table>\")\n    for i in 1:size(x,1)\n        print(io, \"<tr>\")\n        [print(io, \"<td>\$r</td>\") for r in x[i,:]]\n        print(io, \"</tr>\")\n    end\n    print(io, \"</table>\")\nend\n\n#This isn't valid latex, doesn't matter for the test\nfunction Base.show(io::IO, m::MIME\"text/latex\", x::Array)\n    println(io, \"\\\\begin{tabular}\")\n    for i in 1:size(x,1)\n        [print(io, \"\$r & \") for r in x[i,:]]\n        print(io, \"\\\\\\\\\")\n        println(io, \" \\\\hline\")\n    end\n    print(io, \"\\\\end{tabular\")\nend\n\n#This isn't valid markdown, doesn't matter for the test\nfunction Base.show(io::IO, m::MIME\"text/markdown\", x::Array)\n    println(io, \"-----\")\n    for i in 1:size(x,1)\n        print(io, \"| \")\n        [print(io, \"\$r | \") for r in x[i,:]]\n        println(io, \"\")\n    end\n    print(io, \"-----\")\nend\n\n\nx = [collect(1:3) collect(1:3)]\nca = collect('a':'d')\nca\n\\end{juliacode}\n\n\\begin{tabular}\na & \\\\ \\hline\nb & \\\\ \\hline\nc & \\\\ \\hline\nd & \\\\ \\hline\n\\end{tabular\n\n\\begin{juliacode}\ndisplay(ca)\ndisplay(x)\n\\end{juliacode}\n\n\\begin{tabular}\na & \\\\ \\hline\nb & \\\\ \\hline\nc & \\\\ \\hline\nd & \\\\ \\hline\n\\end{tabular\n\\begin{tabular}\n1 & 1 & \\\\ \\hline\n2 & 2 & \\\\ \\hline\n3 & 3 & \\\\ \\hline\n\\end{tabular\n\n\\begin{juliaterm}\njulia> x\n3×2 Array{Int64,2}:\n 1  1\n 2  2\n 3  3\n\njulia> ca\n4-element Array{Char,1}:\n 'a': ASCII/Unicode U+0061 (category Ll: Letter, lowercase)\n 'b': ASCII/Unicode U+0062 (category Ll: Letter, lowercase)\n 'c': ASCII/Unicode U+0063 (category Ll: Letter, lowercase)\n 'd': ASCII/Unicode U+0064 (category Ll: Letter, lowercase)\n\n\\end{juliaterm}\n\n\\begin{juliacode}\nusing Markdown\nm = Markdown.parse(\"**Some Markdown**\")\nm\n\\end{juliacode}\n\n\\textbf{Some Markdown}\n\n\n" == "\\begin{juliacode}\nimport Base\nfunction Base.show(io::IO, m::MIME\"text/html\", x::Array)\n    print(io, \"<table>\")\n    for i in 1:size(x,1)\n        print(io, \"<tr>\")\n        [print(io, \"<td>\$r</td>\") for r in x[i,:]]\n        print(io, \"</tr>\")\n    end\n    print(io, \"</table>\")\nend\n\n#This isn't valid latex, doesn't matter for the test\nfunction Base.show(io::IO, m::MIME\"text/latex\", x::Array)\n    println(io, \"\\\\begin{tabular}\")\n    for i in 1:size(x,1)\n        [print(io, \"\$r & \") for r in x[i,:]]\n        print(io, \"\\\\\\\\\")\n        println(io, \" \\\\hline\")\n    end\n    print(io, \"\\\\end{tabular\")\nend\n\n#This isn't valid markdown, doesn't matter for the test\nfunction Base.show(io::IO, m::MIME\"text/markdown\", x::Array)\n    println(io, \"-----\")\n    for i in 1:size(x,1)\n        print(io, \"| \")\n        [print(io, \"\$r | \") for r in x[i,:]]\n        println(io, \"\")\n    end\n    print(io, \"-----\")\nend\n\n\nx = [collect(1:3) collect(1:3)]\nca = collect('a':'d')\nca\n\\end{juliacode}\n\n\\begin{tabular}\na & \\\\ \\hline\nb & \\\\ \\hline\nc & \\\\ \\hline\nd & \\\\ \\hline\n\\end{tabular\n\n\\begin{juliacode}\ndisplay(ca)\ndisplay(x)\n\\end{juliacode}\n\n\\begin{tabular}\na & \\\\ \\hline\nb & \\\\ \\hline\nc & \\\\ \\hline\nd & \\\\ \\hline\n\\end{tabular\n\\begin{tabular}\n1 & 1 & \\\\ \\hline\n2 & 2 & \\\\ \\hline\n3 & 3 & \\\\ \\hline\n\\end{tabular\n\n\\begin{juliaterm}\njulia> x\n3×2 Array{Int64,2}:\n 1  1\n 2  2\n 3  3\n\njulia> ca\n4-element Array{Char,1}:\n 'a'\n 'b'\n 'c'\n 'd'\n\n\\end{juliaterm}\n\n\\begin{juliacode}\nusing Markdown\nm = Markdown.parse(\"**Some Markdown**\")\nm\n\\end{juliacode}\n\n\\textbf{Some Markdown}\n\n\n"
Stacktrace:
 [1] mmtest(::String, ::String, ::String) at /home/pkgeval/.julia/packages/Weave/zT0iu/test/rich_output.jl:9
 [2] top-level scope at /home/pkgeval/.julia/packages/Weave/zT0iu/test/rich_output.jl:15
 [3] include(::String) at ./client.jl:441
 [4] top-level scope at /home/pkgeval/.julia/packages/Weave/zT0iu/test/runtests.jl:34
 [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
 [6] top-level scope at /home/pkgeval/.julia/packages/Weave/zT0iu/test/runtests.jl:33
 [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
 [8] top-level scope at /home/pkgeval/.julia/packages/Weave/zT0iu/test/runtests.jl:5
[ Info: Weaving chunk 1 from line 3
[ Info: Weaving chunk 2 from line 43
[ Info: Weaving chunk 3 from line 48
[ Info: Weaving chunk 4 from line 54
[ Info: Report weaved to documents/multimedia/rich_output.github
Rich output: Test Failed at /home/pkgeval/.julia/packages/Weave/zT0iu/test/rich_output.jl:9
  Expression: result == ref
   Evaluated: "````julia\nimport Base\nfunction Base.show(io::IO, m::MIME\"text/html\", x::Array)\n    print(io, \"<table>\")\n    for i in 1:size(x,1)\n        print(io, \"<tr>\")\n        [print(io, \"<td>\$r</td>\") for r in x[i,:]]\n        print(io, \"</tr>\")\n    end\n    print(io, \"</table>\")\nend\n\n#This isn't valid latex, doesn't matter for the test\nfunction Base.show(io::IO, m::MIME\"text/latex\", x::Array)\n    println(io, \"\\\\begin{tabular}\")\n    for i in 1:size(x,1)\n        [print(io, \"\$r & \") for r in x[i,:]]\n        print(io, \"\\\\\\\\\")\n        println(io, \" \\\\hline\")\n    end\n    print(io, \"\\\\end{tabular\")\nend\n\n#This isn't valid markdown, doesn't matter for the test\nfunction Base.show(io::IO, m::MIME\"text/markdown\", x::Array)\n    println(io, \"-----\")\n    for i in 1:size(x,1)\n        print(io, \"| \")\n        [print(io, \"\$r | \") for r in x[i,:]]\n        println(io, \"\")\n    end\n    print(io, \"-----\")\nend\n\n\nx = [collect(1:3) collect(1:3)]\nca = collect('a':'d')\nca\n````\n\n\n\n-----\n| a | \n| b | \n| c | \n| d | \n-----\n\n````julia\ndisplay(ca)\ndisplay(x)\n````\n\n\n\n-----\n| a | \n| b | \n| c | \n| d | \n-----\n-----\n| 1 | 1 | \n| 2 | 2 | \n| 3 | 3 | \n-----\n\n````julia\njulia> x\n3×2 Array{Int64,2}:\n 1  1\n 2  2\n 3  3\n\njulia> ca\n4-element Array{Char,1}:\n 'a': ASCII/Unicode U+0061 (category Ll: Letter, lowercase)\n 'b': ASCII/Unicode U+0062 (category Ll: Letter, lowercase)\n 'c': ASCII/Unicode U+0063 (category Ll: Letter, lowercase)\n 'd': ASCII/Unicode U+0064 (category Ll: Letter, lowercase)\n\n````\n\n\n\n````julia\nusing Markdown\nm = Markdown.parse(\"**Some Markdown**\")\nm\n````\n\n\n\n**Some Markdown**\n\n" == "````julia\nimport Base\nfunction Base.show(io::IO, m::MIME\"text/html\", x::Array)\n    print(io, \"<table>\")\n    for i in 1:size(x,1)\n        print(io, \"<tr>\")\n        [print(io, \"<td>\$r</td>\") for r in x[i,:]]\n        print(io, \"</tr>\")\n    end\n    print(io, \"</table>\")\nend\n\n#This isn't valid latex, doesn't matter for the test\nfunction Base.show(io::IO, m::MIME\"text/latex\", x::Array)\n    println(io, \"\\\\begin{tabular}\")\n    for i in 1:size(x,1)\n        [print(io, \"\$r & \") for r in x[i,:]]\n        print(io, \"\\\\\\\\\")\n        println(io, \" \\\\hline\")\n    end\n    print(io, \"\\\\end{tabular\")\nend\n\n#This isn't valid markdown, doesn't matter for the test\nfunction Base.show(io::IO, m::MIME\"text/markdown\", x::Array)\n    println(io, \"-----\")\n    for i in 1:size(x,1)\n        print(io, \"| \")\n        [print(io, \"\$r | \") for r in x[i,:]]\n        println(io, \"\")\n    end\n    print(io, \"-----\")\nend\n\n\nx = [collect(1:3) collect(1:3)]\nca = collect('a':'d')\nca\n````\n\n\n\n-----\n| a | \n| b | \n| c | \n| d | \n-----\n\n````julia\ndisplay(ca)\ndisplay(x)\n````\n\n\n\n-----\n| a | \n| b | \n| c | \n| d | \n-----\n-----\n| 1 | 1 | \n| 2 | 2 | \n| 3 | 3 | \n-----\n\n````julia\njulia> x\n3×2 Array{Int64,2}:\n 1  1\n 2  2\n 3  3\n\njulia> ca\n4-element Array{Char,1}:\n 'a'\n 'b'\n 'c'\n 'd'\n\n````\n\n\n\n````julia\nusing Markdown\nm = Markdown.parse(\"**Some Markdown**\")\nm\n````\n\n\n\n**Some Markdown**\n\n"
Stacktrace:
 [1] mmtest(::String, ::String, ::String) at /home/pkgeval/.julia/packages/Weave/zT0iu/test/rich_output.jl:9
 [2] top-level scope at /home/pkgeval/.julia/packages/Weave/zT0iu/test/rich_output.jl:16
 [3] include(::String) at ./client.jl:441
 [4] top-level scope at /home/pkgeval/.julia/packages/Weave/zT0iu/test/runtests.jl:34
 [5] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
 [6] top-level scope at /home/pkgeval/.julia/packages/Weave/zT0iu/test/runtests.jl:33
 [7] top-level scope at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1114
 [8] top-level scope at /home/pkgeval/.julia/packages/Weave/zT0iu/test/runtests.jl:5
[ Info: Test: Weaving with Plots.jl
[ Info: Weaving chunk 1 from line 3
QStandardPaths: XDG_RUNTIME_DIR not set, defaulting to '/tmp/runtime-pkgeval'
