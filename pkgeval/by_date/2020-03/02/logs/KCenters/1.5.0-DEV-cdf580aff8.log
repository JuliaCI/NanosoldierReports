Julia Version 1.5.0-DEV.378
Commit cdf580aff8 (2020-03-01 16:49 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Reexport ──────────────────── v0.2.0
  Installed DataAPI ───────────────────── v1.1.0
  Installed Parsers ───────────────────── v0.3.12
  Installed TableTraits ───────────────── v1.0.0
  Installed Compat ────────────────────── v3.6.0
  Installed KCenters ──────────────────── v0.2.2
  Installed Tables ────────────────────── v1.0.2
  Installed MLLabelUtils ──────────────── v0.5.1
  Installed MappedArrays ──────────────── v0.2.2
  Installed LearnBase ─────────────────── v0.2.2
  Installed DataValueInterfaces ───────── v1.0.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed MLDataUtils ───────────────── v0.5.0
  Installed MLDataPattern ─────────────── v0.5.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed StatsBase ─────────────────── v0.32.1
  Installed Missings ──────────────────── v0.4.3
  Installed InvertedIndices ───────────── v1.0.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed OrderedCollections ────────── v1.1.0
  Installed JSON ──────────────────────── v0.21.0
  Installed DataStructures ────────────── v0.17.10
  Installed SimilaritySearch ──────────── v0.3.19
  Installed DataFrames ────────────────── v0.20.2
  Installed SortingAlgorithms ─────────── v0.3.1
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.6.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.10
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.12
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.1
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.2
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_1UCVgC/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.6.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.10
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.12
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.1
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.2
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.932025450070699
[ Info: 0.8326150393486023
[ Info: 0.5547140726943811
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33252118043601514
mean(cdnet.distances) = 0.39701102338731287
mean(crand.distances) = 0.3381913410127163
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.560546875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.560546875,"f1":0.7046873265623272,"seconds":4.220753908157349e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":7.40625,"distances_sum":1417.4957044565085}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6630859375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6630859375,"f1":0.7882565351315359,"seconds":5.649402737617493e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.1328125,"distances_sum":1699.3418619627485}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.8556386322011331,"seconds":6.303191184997559e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.53125,"distances_sum":2026.1832920176087}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.759765625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.759765625,"f1":0.8556386322011331,"seconds":6.303191184997559e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.53125,"distances_sum":2026.1832920176087}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7919921875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7919921875,"f1":0.8785828754578764,"seconds":6.323680281639099e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.609375,"distances_sum":2120.532079671837}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9574862637362641,"seconds":8.87550413608551e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":9.0,"distances_sum":2662.603829379086}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9687900641025644,"seconds":7.0873647928237915e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":9.0,"distances_sum":2750.014849967429}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9253095862470869,"seconds":6.878748536109924e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.953125,"distances_sum":2424.642407165392}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.8603103493728503,"seconds":6.3516199588775635e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.546875,"distances_sum":2064.622805399789}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8957339535464547,"seconds":6.794929504394531e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.9140625,"distances_sum":2224.9035316317804}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9687900641025644,"seconds":7.0873647928237915e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":9.0,"distances_sum":2750.014849967429}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9772722069597072,"seconds":6.634742021560669e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":9.0,"distances_sum":2822.9316690328114}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9757841117216121,"seconds":6.195157766342163e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.9921875,"distances_sum":2798.9876130226403}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9772722069597072,"seconds":6.634742021560669e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":9.0,"distances_sum":2822.9316690328114}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9772722069597072,"seconds":6.634742021560669e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":9.0,"distances_sum":2822.9316690328114}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.58203125, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.58203125,"f1":0.7201808608058614,"seconds":4.285946488380432e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":7.3359375,"distances_sum":1257.3095575842783}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.681640625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.681640625,"f1":0.8008517524142532,"seconds":4.500150680541992e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":7.796875,"distances_sum":1569.101894041194}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.681640625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.681640625,"f1":0.8008517524142532,"seconds":4.500150680541992e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":7.796875,"distances_sum":1569.101894041194}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8682945526695536,"seconds":5.461275577545166e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.5234375,"distances_sum":1872.718044527069}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8583984375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8583984375,"f1":0.9179664085914092,"seconds":5.463138222694397e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.546875,"distances_sum":2162.9923270549116}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.937362637362638,"seconds":6.016343832015991e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.6015625,"distances_sum":2299.350782262049}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9326694139194146,"seconds":5.904585123062134e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.6796875,"distances_sum":2223.0224965131774}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8896484375,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8896484375,"f1":0.937362637362638,"seconds":6.016343832015991e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.6015625,"distances_sum":2299.350782262049}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":9,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9695169413919418,"seconds":5.757436156272888e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.8359375,"distances_sum":2503.2287833153355}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9635073260073264,"seconds":5.969777703285217e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.8359375,"distances_sum":2449.942618785384}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9579498626373633,"seconds":6.0051679611206055e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.859375,"distances_sum":2412.0085947293182}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9626888736263741,"seconds":5.895271897315979e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.8984375,"distances_sum":2399.63785519847}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9619448260073267,"seconds":5.681067705154419e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.78125,"distances_sum":2464.287917395053}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9453125,"state":{"ssize":9,"bsize":10},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9695169413919418,"seconds":5.757436156272888e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.8359375,"distances_sum":2503.2287833153355}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9453125,"state":{"ssize":9,"bsize":10},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9695169413919418,"seconds":5.757436156272888e-6,"exhaustive_search_seconds":1.4360994100570679e-6,"evaluations":8.8359375,"distances_sum":2503.2287833153355}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8534382284382295,"seconds":5.1371753215789795e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.171875,"distances_sum":1772.260644821576}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7626953125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7626953125,"f1":0.8534382284382295,"seconds":5.1371753215789795e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.171875,"distances_sum":1772.260644821576}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9238787254412258,"seconds":5.859881639480591e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.65625,"distances_sum":2123.961700513168}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8734551906426915,"seconds":5.206093192100525e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.3046875,"distances_sum":1795.448063343724}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.869140625,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.869140625,"f1":0.9238787254412258,"seconds":5.859881639480591e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.65625,"distances_sum":2123.961700513168}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9473099816849824,"seconds":5.869194865226746e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.78125,"distances_sum":2220.0525914271325}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9496336996337001,"seconds":5.923211574554443e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.796875,"distances_sum":2262.147382848449}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9349993756243761,"seconds":5.815178155899048e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.734375,"distances_sum":2169.479692635257}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9517971611721618,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.84375,"distances_sum":2285.5929993540126}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9517971611721618,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.84375,"distances_sum":2285.5929993540126}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.916015625,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9517971611721618,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.84375,"distances_sum":2285.5929993540126}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.1650390625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.1650390625,"f1":null,"seconds":2.810731530189514e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":4.4140625,"distances_sum":436.9355921991167}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.1650390625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.1650390625,"f1":null,"seconds":2.810731530189514e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":4.4140625,"distances_sum":436.9355921991167}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4775390625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.4775390625,"f1":null,"seconds":3.824010491371155e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":6.2421875,"distances_sum":979.3910882124316}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.654296875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.654296875,"f1":0.7776489135864143,"seconds":4.563480615615845e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":7.21875,"distances_sum":1427.1723044346509}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.654296875,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.654296875,"f1":0.7776489135864143,"seconds":4.563480615615845e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":7.21875,"distances_sum":1427.1723044346509}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.8928519397269407,"seconds":5.323439836502075e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.484375,"distances_sum":1865.9380447869291}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.67578125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.67578125,"f1":0.7928326881451888,"seconds":4.669651389122009e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":7.4765625,"distances_sum":1468.674279348262}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.724609375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.724609375,"f1":0.8280922202797211,"seconds":5.058944225311279e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":7.9375,"distances_sum":1601.7963069285784}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.8527170745920755,"seconds":5.0496309995651245e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.1484375,"distances_sum":1692.9808824285}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.82421875,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.82421875,"f1":0.8928519397269407,"seconds":5.323439836502075e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.484375,"distances_sum":1865.9380447869291}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.936097756410257,"seconds":5.731359124183655e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.6484375,"distances_sum":2119.420608702207}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9571314102564108,"seconds":5.81890344619751e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.71875,"distances_sum":2264.633529631846}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8427734375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8427734375,"f1":0.9036062895437902,"seconds":5.584210157394409e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.46875,"distances_sum":1963.4058750466477}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9614068223443228,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.7421875,"distances_sum":2280.8844307299396}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9273065476190483,"seconds":5.668029189109802e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.6328125,"distances_sum":2054.841092105526}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9524038461538467,"seconds":5.76116144657135e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.7421875,"distances_sum":2211.5832535583936}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9237725815850821,"seconds":5.23589551448822e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.546875,"distances_sum":2056.8367040898283}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9614068223443228,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.7421875,"distances_sum":2280.8844307299396}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9306640625,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9614068223443228,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":8.7421875,"distances_sum":2280.8844307299396}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.66796875,"f1":0.7871975246975256,"seconds":4.636123776435852e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.921875,"distances_sum":1355.6330505623926}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.376953125, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.376953125,"f1":null,"seconds":3.602355718612671e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":6.90625,"distances_sum":686.9337868484761}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.66796875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.66796875,"f1":0.7871975246975256,"seconds":4.636123776435852e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.921875,"distances_sum":1355.6330505623926}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8515625,"f1":0.9119796869796877,"seconds":5.41098415851593e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.609375,"distances_sum":1852.5583960301315}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8779296875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8779296875,"f1":0.9261998418248425,"seconds":5.653128027915955e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.65625,"distances_sum":1956.6235403550988}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9255869130869138,"seconds":5.185604095458984e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.6015625,"distances_sum":1911.6943277153018}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8779296875,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8779296875,"f1":0.9261998418248425,"seconds":5.653128027915955e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.65625,"distances_sum":1956.6235403550988}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9596039377289382,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.859375,"distances_sum":2143.4518685601897}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9724358974358978,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9296875,"distances_sum":2214.5769985217235}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9663175366300373,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9296875,"distances_sum":2166.0973288237387}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9686584249084251,"seconds":5.68293035030365e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.90625,"distances_sum":2178.910951600374}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9372283966033973,"seconds":5.349516868591309e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.71875,"distances_sum":2006.7344825031307}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9401900183150188,"seconds":5.330890417098999e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.75,"distances_sum":2004.4269945607236}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9515109890109896,"seconds":5.60469925403595e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8984375,"distances_sum":2082.6620504886378}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9724358974358978,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9296875,"distances_sum":2214.5769985217235}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9724358974358978,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9296875,"distances_sum":2214.5769985217235}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7041015625, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.7041015625,"f1":0.8159616425241434,"seconds":4.468485713005066e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.734375,"distances_sum":1413.7308290417805}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7041015625,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.7041015625,"f1":0.8159616425241434,"seconds":4.468485713005066e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.734375,"distances_sum":1413.7308290417805}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9355914918414924,"seconds":5.487352609634399e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.875,"distances_sum":2034.8353902237968}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.888671875,"state":{"ssize":9,"bsize":7},"perf":{"precision":1.0,"recall":0.888671875,"f1":0.9355914918414924,"seconds":5.487352609634399e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.875,"distances_sum":2034.8353902237968}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.97637934981685,"seconds":6.057322025299072e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9453125,"distances_sum":2277.2563224395017}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":12,"bsize":8}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9598443223443227,"seconds":5.729496479034424e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8828125,"distances_sum":2177.566884911316}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.97637934981685,"seconds":6.057322025299072e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9453125,"distances_sum":2277.2563224395017}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.97637934981685,"seconds":6.057322025299072e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.9453125,"distances_sum":2277.2563224395017}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8674721112221119,"seconds":4.859641194343567e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.0859375,"distances_sum":1764.5509273189537}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.41796875, conf: {"ssize":1,"bsize":2}, perf: {"precision":1.0,"recall":0.41796875,"f1":0.5656315906315905,"seconds":3.512948751449585e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":6.421875,"distances_sum":832.6885276390955}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7783203125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7783203125,"f1":0.8674721112221119,"seconds":4.859641194343567e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.0859375,"distances_sum":1764.5509273189537}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9501945970695975,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.8515625,"distances_sum":2271.065262893208}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9075091575091583,"seconds":5.105510354042053e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.515625,"distances_sum":1996.567075916072}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9485748626373633,"seconds":5.403533577919006e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.8828125,"distances_sum":2272.8863928622973}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.912109375,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9501945970695975,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.8515625,"distances_sum":2271.065262893208}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9748511904761907,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.9296875,"distances_sum":2436.32583573092}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9683436355311358,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.9296875,"distances_sum":2405.4079669147745}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9793154761904765,"seconds":5.833804607391357e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.9453125,"distances_sum":2471.1583636359455}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9720066391941394,"seconds":5.7406723499298096e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.96875,"distances_sum":2416.8636933210273}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9592490842490847,"seconds":5.591660737991333e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.921875,"distances_sum":2314.44896648868}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9634500915750919,"seconds":5.5283308029174805e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.9296875,"distances_sum":2363.413553538858}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9793154761904765,"seconds":5.833804607391357e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.9453125,"distances_sum":2471.1583636359455}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9793154761904765,"seconds":5.833804607391357e-6,"exhaustive_search_seconds":1.298263669013977e-6,"evaluations":8.9453125,"distances_sum":2471.1583636359455}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.8680184398934406,"seconds":4.800036549568176e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.328125,"distances_sum":1794.6014957517068}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3125,"f1":null,"seconds":2.941116690635681e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":4.8984375,"distances_sum":719.5998176116192}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.509765625, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.509765625,"f1":0.6527682387057392,"seconds":3.67872416973114e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":6.3046875,"distances_sum":1159.6483889373535}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.78125,"f1":0.8680184398934406,"seconds":4.800036549568176e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.328125,"distances_sum":1794.6014957517068}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9425881410256414,"seconds":5.3532421588897705e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.671875,"distances_sum":2280.406287102823}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9310554029304036,"seconds":5.3979456424713135e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.7578125,"distances_sum":2134.485512502409}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.810546875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.810546875,"f1":0.8822786588411596,"seconds":5.034729838371277e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.328125,"distances_sum":1921.8194383101215}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9013671875,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9425881410256414,"seconds":5.3532421588897705e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.671875,"distances_sum":2280.406287102823}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":8,"bsize":12}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9719894688644694,"seconds":5.62518835067749e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.875,"distances_sum":2412.6161658132924}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9552312271062278,"seconds":5.289912223815918e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.7890625,"distances_sum":2305.0686075014046}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":8,"bsize":12},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9719894688644694,"seconds":5.62518835067749e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.875,"distances_sum":2412.6161658132924}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":8,"bsize":12},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9719894688644694,"seconds":5.62518835067749e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.875,"distances_sum":2412.6161658132924}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8556417540792549,"seconds":4.844740033149719e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.921875,"distances_sum":1791.778338989654}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3876953125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3876953125,"f1":null,"seconds":3.3713877201080322e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":6.46875,"distances_sum":794.6996872766105}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.763671875,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.763671875,"f1":0.8556417540792549,"seconds":4.844740033149719e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.921875,"distances_sum":1791.778338989654}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9203104187479193,"seconds":5.420297384262085e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.609375,"distances_sum":2109.537354618769}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9042015276390284,"seconds":5.0924718379974365e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.4453125,"distances_sum":2036.9507002246921}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8565830003330012,"seconds":4.867091774940491e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.9375,"distances_sum":1776.5266521183005}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.865234375,"state":{"ssize":8,"bsize":7},"perf":{"precision":1.0,"recall":0.865234375,"f1":0.9203104187479193,"seconds":5.420297384262085e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.609375,"distances_sum":2109.537354618769}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":12,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9432635073260078,"seconds":6.224960088729858e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.7265625,"distances_sum":2276.1393715104323}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":12,"bsize":11}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9655906593406598,"seconds":5.990266799926758e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.90625,"distances_sum":2380.9822166489475}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":10,"bsize":8}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9344265109890116,"seconds":6.20819628238678e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.65625,"distances_sum":2222.1657302788644}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9639365842490845,"seconds":5.720183253288269e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.8671875,"distances_sum":2372.712567331697}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.932119963369964,"seconds":6.025657057762146e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.640625,"distances_sum":2227.3265110643997}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":12,"bsize":11},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9655906593406598,"seconds":5.990266799926758e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.90625,"distances_sum":2380.9822166489475}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":12,"bsize":11},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9655906593406598,"seconds":5.990266799926758e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.90625,"distances_sum":2380.9822166489475}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5546875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5546875,"f1":null,"seconds":4.176050424575806e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":6.9140625,"distances_sum":1201.9212059687843}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4111328125, conf: {"ssize":1,"bsize":2}, perf: {"precision":1.0,"recall":0.4111328125,"f1":0.5610542235542234,"seconds":3.868713974952698e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":6.4296875,"distances_sum":875.3716065893832}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2275390625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2275390625,"f1":null,"seconds":3.3974647521972656e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":6.0703125,"distances_sum":504.98529512033724}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5546875,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5546875,"f1":null,"seconds":4.176050424575806e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":6.9140625,"distances_sum":1201.9212059687843}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9082734973359978,"seconds":5.563721060752869e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.3515625,"distances_sum":1988.2569114424266}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6650390625,"f1":0.7835549866799875,"seconds":4.76837158203125e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":7.5078125,"distances_sum":1425.4278263165806}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8711054570429577,"seconds":6.395578384399414e-5,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":7.9921875,"distances_sum":1775.128305961029}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8648159132534141,"seconds":4.736706614494324e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":7.9765625,"distances_sum":1768.8660061347402}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8408203125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8408203125,"f1":0.9082734973359978,"seconds":5.563721060752869e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.3515625,"distances_sum":1988.2569114424266}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9637133699633704,"seconds":5.3942203521728516e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.875,"distances_sum":2372.498021120527}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9393315018315023,"seconds":5.306676030158997e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.734375,"distances_sum":2224.34055754969}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9484775641025648,"seconds":5.295500159263611e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.8359375,"distances_sum":2308.9946988025195}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9402644230769237,"seconds":5.319714546203613e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.8359375,"distances_sum":2219.69993445694}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9593807234432239,"seconds":5.299225449562073e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.8359375,"distances_sum":2357.784382929109}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9404647435897442,"seconds":5.301088094711304e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.8359375,"distances_sum":2201.114855381516}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9637133699633704,"seconds":5.3942203521728516e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.875,"distances_sum":2372.498021120527}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.935546875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9637133699633704,"seconds":5.3942203521728516e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.875,"distances_sum":2372.498021120527}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3564453125, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.3564453125,"f1":null,"seconds":3.026798367500305e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":5.4921875,"distances_sum":743.3500474820322}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2041015625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2041015625,"f1":null,"seconds":2.693384885787964e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":4.9140625,"distances_sum":483.5741943202996}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.525390625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.525390625,"f1":0.6752400377400382,"seconds":3.850087523460388e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":6.4765625,"distances_sum":1097.3852012899474}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.525390625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.525390625,"f1":0.6752400377400382,"seconds":3.850087523460388e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":6.4765625,"distances_sum":1097.3852012899474}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8359375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8359375,"f1":0.9034028471528479,"seconds":4.932284355163574e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.2578125,"distances_sum":2003.232012587666}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5556640625, conf: {"ssize":2,"bsize":3}, perf: {"precision":null,"recall":0.5556640625,"f1":null,"seconds":3.7830322980880737e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":6.5546875,"distances_sum":1189.5704801883824}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.673828125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.673828125,"f1":0.7939643689643697,"seconds":4.291534423828125e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.5859375,"distances_sum":1491.5355654851385}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.8976658757908765,"seconds":4.950910806655884e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.28125,"distances_sum":2012.853712871663}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8600945929070937,"seconds":4.820525646209717e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.140625,"distances_sum":1745.361738256017}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8649652430902439,"seconds":4.742294549942017e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.0625,"distances_sum":1803.2148680254948}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8359375,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.8359375,"f1":0.9034028471528479,"seconds":4.932284355163574e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.2578125,"distances_sum":2003.232012587666}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8544921875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8544921875,"f1":0.9145375457875466,"seconds":5.066394805908203e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.390625,"distances_sum":2070.040519901417}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9587282509157515,"seconds":5.288049578666687e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8359375,"distances_sum":2325.1442365510843}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9560496794871799,"seconds":5.425885319709778e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.7890625,"distances_sum":2330.966064151694}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9214035964035971,"seconds":5.3104013204574585e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.671875,"distances_sum":2108.851373494023}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8779296875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8779296875,"f1":0.9286260614385622,"seconds":5.2228569984436035e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.6171875,"distances_sum":2176.3445151920046}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9472413003663009,"seconds":5.4370611906051636e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.6875,"distances_sum":2287.7167506067276}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9042441933066943,"seconds":4.969537258148193e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.3125,"distances_sum":1995.4152018037414}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8564453125,"f1":0.9150474525474532,"seconds":5.131587386131287e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.5546875,"distances_sum":2116.891553865292}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9587282509157515,"seconds":5.288049578666687e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8359375,"distances_sum":2325.1442365510843}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9267578125,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9587282509157515,"seconds":5.288049578666687e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.8359375,"distances_sum":2325.1442365510843}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3955078125, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.3955078125,"f1":null,"seconds":3.287568688392639e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.015625,"distances_sum":790.7345021692099}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.67578125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.67578125,"f1":0.7946430305805313,"seconds":4.524365067481995e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.9765625,"distances_sum":1377.515630334694}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.67578125,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.67578125,"f1":0.7946430305805313,"seconds":4.524365067481995e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.9765625,"distances_sum":1377.515630334694}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.70703125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.70703125,"f1":0.8208890068265078,"seconds":4.393979907035828e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.1015625,"distances_sum":1481.8038880865597}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.748046875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.748046875,"f1":0.8478053196803205,"seconds":4.813075065612793e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.484375,"distances_sum":1583.1271721494902}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8564453125,"f1":0.9166297244422252,"seconds":5.075708031654358e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.703125,"distances_sum":1887.298626173238}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8564453125,"state":{"ssize":7,"bsize":6},"perf":{"precision":1.0,"recall":0.8564453125,"f1":0.9166297244422252,"seconds":5.075708031654358e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.703125,"distances_sum":1887.298626173238}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":11,"bsize":10}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.957520604395605,"seconds":5.4426491260528564e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.90625,"distances_sum":2171.924430285608}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9409886988011993,"seconds":5.211681127548218e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.6640625,"distances_sum":2138.6958608787377}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9436240842490847,"seconds":5.289912223815918e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.828125,"distances_sum":2097.0730034638377}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":11,"bsize":10},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.957520604395605,"seconds":5.4426491260528564e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.90625,"distances_sum":2171.924430285608}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.923828125,"state":{"ssize":11,"bsize":10},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.957520604395605,"seconds":5.4426491260528564e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.90625,"distances_sum":2171.924430285608}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.544921875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.544921875,"f1":null,"seconds":3.904104232788086e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":6.84375,"distances_sum":1071.3132978223239}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2177734375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2177734375,"f1":null,"seconds":2.9634684324264526e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":5.875,"distances_sum":446.2544912892064}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8567370129870139,"seconds":4.990026354789734e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.328125,"distances_sum":1534.9237986725755}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7607421875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7607421875,"f1":0.8567370129870139,"seconds":4.990026354789734e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.328125,"distances_sum":1534.9237986725755}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.904596445221446,"seconds":5.1781535148620605e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.5078125,"distances_sum":1731.2061182216125}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9590487637362644,"seconds":5.362555384635925e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.796875,"distances_sum":2166.614141978995}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8577334124209132,"seconds":4.827976226806641e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.1796875,"distances_sum":1594.3032477160448}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9590487637362644,"seconds":5.362555384635925e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.796875,"distances_sum":2166.614141978995}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9742387820512826,"seconds":5.600973963737488e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.90625,"distances_sum":2267.8517365020407}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9731227106227109,"seconds":5.5264681577682495e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.875,"distances_sum":2268.652517055828}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9698717948717953,"seconds":5.58607280254364e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.8671875,"distances_sum":2236.4695602948136}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9620364010989018,"seconds":5.360692739486694e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.8359375,"distances_sum":2151.842715395874}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9668555402930408,"seconds":5.5730342864990234e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.8828125,"distances_sum":2197.708812378137}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9618131868131874,"seconds":5.4817646741867065e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.859375,"distances_sum":2168.8380054096633}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9742387820512826,"seconds":5.600973963737488e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.90625,"distances_sum":2267.8517365020407}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9742387820512826,"seconds":5.600973963737488e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.90625,"distances_sum":2267.8517365020407}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.35546875, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.35546875,"f1":null,"seconds":3.4552067518234253e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":5.4609375,"distances_sum":681.5202989641641}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.35546875,"state":{"ssize":3,"bsize":2},"perf":{"precision":null,"recall":0.35546875,"f1":null,"seconds":3.4552067518234253e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":5.4609375,"distances_sum":681.5202989641641}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8134765625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8134765625,"f1":0.8896036255411263,"seconds":5.515292286872864e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.7265625,"distances_sum":1687.0600300019612}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8457861582861589,"seconds":5.273148417472839e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.5234375,"distances_sum":1478.017903620809}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8134765625,"state":{"ssize":6,"bsize":6},"perf":{"precision":1.0,"recall":0.8134765625,"f1":0.8896036255411263,"seconds":5.515292286872864e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.7265625,"distances_sum":1687.0600300019612}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8779296875, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.8779296875,"f1":0.9303514194139203,"seconds":5.3532421588897705e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.6640625,"distances_sum":1911.6103694449957}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9282509157509161,"seconds":5.688518285751343e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.6484375,"distances_sum":1914.8802222406591}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8969696969696977,"seconds":5.593523383140564e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.765625,"distances_sum":1689.950383413224}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9630036630036635,"seconds":5.757436156272888e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.828125,"distances_sum":2148.551374571082}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9630036630036635,"seconds":5.757436156272888e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.828125,"distances_sum":2148.551374571082}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.93359375,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9630036630036635,"seconds":5.757436156272888e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.828125,"distances_sum":2148.551374571082}}, n: 9
mean(cfft.distances) = 0.5905684283292075
mean(cdnet.distances) = 0.398216518476585
mean(crand.distances) = 0.37708641039071505
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8622222222222223
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.94
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8933333333333332
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8866666666666667
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.9044444444444445
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9244444444444445
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9466666666666667
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9466666666666667
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8955555555555557
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.94
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8977777777777778
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8844444444444445
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9422222222222222
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9133333333333334
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9333333333333332
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9333333333333335
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8711111111111111
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.92
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9244444444444445
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8488888888888889
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9422222222222222
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8911111111111113
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8911111111111111
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8933333333333332
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9244444444444445
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.84
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9022222222222224
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9066666666666666
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8866666666666667
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.9266666666666666
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 2, 2, 3, 3, 1, 1, 3]
acc = 0.9666666666666667
*** finished computation of 12 references, err: [Inf, 0.5758857876062393] ***
*** center 1: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 6: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 7]]
** centroid: 9, normalized-entropy: 0.8812908992306927, [(2, 3), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
finished with 15 centroids; started with 12
acc = 0.9333333333333333
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.26785166073707983] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26785166073707983, 0.24191688100720668] ***
*** starting iteration: 2; err: [Inf, 0.26785166073707983, 0.24191688100720668] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26785166073707983, 0.24191688100720668, 0.23905325206080535] ***
*** starting iteration: 3; err: [Inf, 0.26785166073707983, 0.24191688100720668, 0.23905325206080535] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26785166073707983, 0.24191688100720668, 0.23905325206080535, 0.23851886217960636] ***
*** finished computation of 3 references, err: [Inf, 0.26785166073707983, 0.24191688100720668, 0.23905325206080535, 0.23851886217960636] ***
*** center 1: selecting labels [1] (freq >= 1) [from [224, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [118, 71, 0]]
** centroid: 2, normalized-entropy: 0.9549200680859948, [(1, 118), (2, 71)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [57, 164, 32]]
** centroid: 3, normalized-entropy: 0.7994705793298349, [(1, 57), (2, 164), (3, 32)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3217964834567193] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3217964834567193, 0.2445360700496369] ***
*** starting iteration: 2; err: [Inf, 0.3217964834567193, 0.2445360700496369] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3217964834567193, 0.2445360700496369, 0.23931272926267694] ***
*** starting iteration: 3; err: [Inf, 0.3217964834567193, 0.2445360700496369, 0.23931272926267694] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3217964834567193, 0.2445360700496369, 0.23931272926267694, 0.2383989206034209] ***
*** finished computation of 3 references, err: [Inf, 0.3217964834567193, 0.2445360700496369, 0.23931272926267694, 0.2383989206034209] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [73, 161, 32]]
** centroid: 1, normalized-entropy: 0.8315234741959815, [(1, 73), (2, 161), (3, 32)]
*** center 2: selecting labels [1] (freq >= 1) [from [214, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [112, 74, 0]]
** centroid: 3, normalized-entropy: 0.9696787018231177, [(1, 112), (2, 74)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.32291537768317796] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32291537768317796, 0.24929639958215227] ***
*** starting iteration: 2; err: [Inf, 0.32291537768317796, 0.24929639958215227] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32291537768317796, 0.24929639958215227, 0.2415496423362993] ***
*** starting iteration: 3; err: [Inf, 0.32291537768317796, 0.24929639958215227, 0.2415496423362993] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32291537768317796, 0.24929639958215227, 0.2415496423362993, 0.23989564588927348] ***
*** finished computation of 3 references, err: [Inf, 0.32291537768317796, 0.24929639958215227, 0.2415496423362993, 0.23989564588927348] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [235, 34, 0]]
** centroid: 1, normalized-entropy: 0.5474652657339979, [(1, 235), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [161, 39, 0]]
** centroid: 2, normalized-entropy: 0.7118146702143195, [(1, 161), (2, 39)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 174, 24]]
** centroid: 3, normalized-entropy: 0.5328350630342235, [(2, 174), (3, 24)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3145307514696442] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3145307514696442, 0.2510279821402308] ***
*** starting iteration: 2; err: [Inf, 0.3145307514696442, 0.2510279821402308] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3145307514696442, 0.2510279821402308, 0.23700144535036705] ***
*** starting iteration: 3; err: [Inf, 0.3145307514696442, 0.2510279821402308, 0.23700144535036705] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3145307514696442, 0.2510279821402308, 0.23700144535036705, 0.23547542706478214] ***
*** finished computation of 3 references, err: [Inf, 0.3145307514696442, 0.2510279821402308, 0.23700144535036705, 0.23547542706478214] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [276, 10, 0]]
** centroid: 1, normalized-entropy: 0.2187103891572415, [(1, 276), (2, 10)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [4, 158, 30]]
** centroid: 2, normalized-entropy: 0.4834128698868069, [(1, 4), (2, 158), (3, 30)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [125, 64, 0]]
** centroid: 3, normalized-entropy: 0.9234962042064648, [(1, 125), (2, 64)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3265916344582632] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3265916344582632, 0.2459603359582771] ***
*** starting iteration: 2; err: [Inf, 0.3265916344582632, 0.2459603359582771] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3265916344582632, 0.2459603359582771, 0.2396138799802653] ***
*** starting iteration: 3; err: [Inf, 0.3265916344582632, 0.2459603359582771, 0.2396138799802653] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3265916344582632, 0.2459603359582771, 0.2396138799802653, 0.2391882765468495] ***
*** finished computation of 3 references, err: [Inf, 0.3265916344582632, 0.2459603359582771, 0.2396138799802653, 0.2391882765468495] ***
*** center 1: selecting labels [1] (freq >= 1) [from [205, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [141, 65, 0]]
** centroid: 2, normalized-entropy: 0.8994585440032213, [(1, 141), (2, 65)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [50, 182, 24]]
** centroid: 3, normalized-entropy: 0.7131218252554763, [(1, 50), (2, 182), (3, 24)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3520794767590388] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3520794767590388, 0.29689902142723507] ***
*** starting iteration: 2; err: [Inf, 0.3520794767590388, 0.29689902142723507] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3520794767590388, 0.29689902142723507, 0.25375055795957124] ***
*** starting iteration: 3; err: [Inf, 0.3520794767590388, 0.29689902142723507, 0.25375055795957124] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3520794767590388, 0.29689902142723507, 0.25375055795957124, 0.23948795371165296] ***
*** starting iteration: 4; err: [Inf, 0.3520794767590388, 0.29689902142723507, 0.25375055795957124, 0.23948795371165296] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3520794767590388, 0.29689902142723507, 0.25375055795957124, 0.23948795371165296, 0.23571092285763198] ***
*** starting iteration: 5; err: [Inf, 0.3520794767590388, 0.29689902142723507, 0.25375055795957124, 0.23948795371165296, 0.23571092285763198] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3520794767590388, 0.29689902142723507, 0.25375055795957124, 0.23948795371165296, 0.23571092285763198, 0.23396361499991283] ***
*** starting iteration: 6; err: [Inf, 0.3520794767590388, 0.29689902142723507, 0.25375055795957124, 0.23948795371165296, 0.23571092285763198, 0.23396361499991283] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3520794767590388, 0.29689902142723507, 0.25375055795957124, 0.23948795371165296, 0.23571092285763198, 0.23396361499991283, 0.23361577144565657] ***
*** finished computation of 3 references, err: [Inf, 0.3520794767590388, 0.29689902142723507, 0.25375055795957124, 0.23948795371165296, 0.23571092285763198, 0.23396361499991283, 0.23361577144565657] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [113, 81, 0]]
** centroid: 1, normalized-entropy: 0.9802835999883092, [(1, 113), (2, 81)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [52, 151, 30]]
** centroid: 2, normalized-entropy: 0.8007843640719563, [(1, 52), (2, 151), (3, 30)]
*** center 3: selecting labels [1] (freq >= 1) [from [240, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2130529855618494] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2130529855618494, 0.16475130277532] ***
*** finished computation of 7 references, err: [Inf, 0.2130529855618494, 0.16475130277532] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [54, 5, 0]]
** centroid: 1, normalized-entropy: 0.4186843105268563, [(1, 54), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [35, 48, 0]]
** centroid: 2, normalized-entropy: 0.9822309298084991, [(1, 35), (2, 48)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [71, 16, 0]]
** centroid: 3, normalized-entropy: 0.6885521684368613, [(1, 71), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [84, 30, 0]]
** centroid: 4, normalized-entropy: 0.8314743880097292, [(1, 84), (2, 30)]
*** center 5: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 136, 32]]
** centroid: 6, normalized-entropy: 0.7024665512903904, [(2, 136), (3, 32)]
*** center 7: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3114711162815711] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3114711162815711, 0.20710748257506442] ***
*** finished computation of 7 references, err: [Inf, 0.3114711162815711, 0.20710748257506442] ***
*** center 1: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [28, 0, 0]]
*** center 4: selecting labels [1, 2, 3] (freq >= 2) [from [75, 149, 23]]
** centroid: 4, normalized-entropy: 0.8081706162592834, [(1, 75), (2, 149), (3, 23)]
*** center 5: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [99, 98, 1]]
** centroid: 6, normalized-entropy: 0.999981412800682, [(1, 99), (2, 98)]
*** center 7: selecting labels [1] (freq >= 2) [from [20, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19695104662234011] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19695104662234011, 0.16592299789706919] ***
*** finished computation of 7 references, err: [Inf, 0.19695104662234011, 0.16592299789706919] ***
*** center 1: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 85, 30]]
** centroid: 2, normalized-entropy: 0.828055725379504, [(2, 85), (3, 30)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 12, 0]]
** centroid: 3, normalized-entropy: 0.6840384356390419, [(1, 54), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [130, 66, 0]]
** centroid: 4, normalized-entropy: 0.9216597034450192, [(1, 130), (2, 66)]
*** center 5: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 69, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.37640924430690015] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37640924430690015, 0.2695645153931169] ***
*** starting iteration: 2; err: [Inf, 0.37640924430690015, 0.2695645153931169] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37640924430690015, 0.2695645153931169, 0.24564011215704967] ***
*** starting iteration: 3; err: [Inf, 0.37640924430690015, 0.2695645153931169, 0.24564011215704967] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37640924430690015, 0.2695645153931169, 0.24564011215704967, 0.2399643108125653] ***
*** finished computation of 3 references, err: [Inf, 0.37640924430690015, 0.2695645153931169, 0.24564011215704967, 0.2399643108125653] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 187, 32]]
** centroid: 1, normalized-entropy: 0.6000415618888991, [(2, 187), (3, 32)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [231, 18, 0]]
** centroid: 2, normalized-entropy: 0.3744088453489206, [(1, 231), (2, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [168, 30, 0]]
** centroid: 3, normalized-entropy: 0.6136190195993708, [(1, 168), (2, 30)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.26021109053842734] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26021109053842734, 0.24096621231439858] ***
*** starting iteration: 2; err: [Inf, 0.26021109053842734, 0.24096621231439858] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26021109053842734, 0.24096621231439858, 0.23959872101446142] ***
*** starting iteration: 3; err: [Inf, 0.26021109053842734, 0.24096621231439858, 0.23959872101446142] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26021109053842734, 0.24096621231439858, 0.23959872101446142, 0.23943216277278032] ***
*** finished computation of 3 references, err: [Inf, 0.26021109053842734, 0.24096621231439858, 0.23959872101446142, 0.23943216277278032] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [238, 8, 0]]
** centroid: 1, normalized-entropy: 0.20687780750472556, [(1, 238), (2, 8)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 194, 24]]
** centroid: 2, normalized-entropy: 0.5001926210998139, [(2, 194), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [158, 45, 0]]
** centroid: 3, normalized-entropy: 0.7632140080875525, [(1, 158), (2, 45)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3192028609346012] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3192028609346012, 0.27127305685851105] ***
*** starting iteration: 2; err: [Inf, 0.3192028609346012, 0.27127305685851105] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3192028609346012, 0.27127305685851105, 0.2474168288469806] ***
*** starting iteration: 3; err: [Inf, 0.3192028609346012, 0.27127305685851105, 0.2474168288469806] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3192028609346012, 0.27127305685851105, 0.2474168288469806, 0.24050815943963658] ***
*** finished computation of 3 references, err: [Inf, 0.3192028609346012, 0.27127305685851105, 0.2474168288469806, 0.24050815943963658] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 180, 30]]
** centroid: 1, normalized-entropy: 0.5916727785823274, [(2, 180), (3, 30)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [238, 19, 0]]
** centroid: 2, normalized-entropy: 0.38042124015606216, [(1, 238), (2, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [167, 33, 0]]
** centroid: 3, normalized-entropy: 0.6461380758647461, [(1, 167), (2, 33)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3313450327271724] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3313450327271724, 0.30134996117404506] ***
*** starting iteration: 2; err: [Inf, 0.3313450327271724, 0.30134996117404506] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3313450327271724, 0.30134996117404506, 0.2975190097267541] ***
*** starting iteration: 3; err: [Inf, 0.3313450327271724, 0.30134996117404506, 0.2975190097267541] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3313450327271724, 0.30134996117404506, 0.2975190097267541, 0.2970271723788209] ***
*** finished computation of 3 references, err: [Inf, 0.3313450327271724, 0.30134996117404506, 0.2975190097267541, 0.2970271723788209] ***
*** center 1: selecting labels [1] (freq >= 2) [from [211, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [77, 154, 32]]
** centroid: 2, normalized-entropy: 0.8458968844824706, [(1, 77), (2, 154), (3, 32)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [111, 81, 0]]
** centroid: 3, normalized-entropy: 0.9823166080205502, [(1, 111), (2, 81)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4416210673375242] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4416210673375242, 0.312612296891227] ***
*** starting iteration: 2; err: [Inf, 0.4416210673375242, 0.312612296891227] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4416210673375242, 0.312612296891227, 0.3056393671959549] ***
*** starting iteration: 3; err: [Inf, 0.4416210673375242, 0.312612296891227, 0.3056393671959549] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4416210673375242, 0.312612296891227, 0.3056393671959549, 0.303821515808555] ***
*** starting iteration: 4; err: [Inf, 0.4416210673375242, 0.312612296891227, 0.3056393671959549, 0.303821515808555] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4416210673375242, 0.312612296891227, 0.3056393671959549, 0.303821515808555, 0.30319794745224976] ***
*** finished computation of 3 references, err: [Inf, 0.4416210673375242, 0.312612296891227, 0.3056393671959549, 0.303821515808555, 0.30319794745224976] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 188, 24]]
** centroid: 1, normalized-entropy: 0.5095157180881823, [(2, 188), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [161, 37, 0]]
** centroid: 2, normalized-entropy: 0.6948748427830216, [(1, 161), (2, 37)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [235, 22, 0]]
** centroid: 3, normalized-entropy: 0.4216207435409774, [(1, 235), (2, 22)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4570991222717348] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4570991222717348, 0.3460672690443739] ***
*** starting iteration: 2; err: [Inf, 0.4570991222717348, 0.3460672690443739] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4570991222717348, 0.3460672690443739, 0.33354423172503844] ***
*** starting iteration: 3; err: [Inf, 0.4570991222717348, 0.3460672690443739, 0.33354423172503844] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4570991222717348, 0.3460672690443739, 0.33354423172503844, 0.32429337965790883] ***
*** starting iteration: 4; err: [Inf, 0.4570991222717348, 0.3460672690443739, 0.33354423172503844, 0.32429337965790883] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4570991222717348, 0.3460672690443739, 0.33354423172503844, 0.32429337965790883, 0.29801200505630904] ***
*** starting iteration: 5; err: [Inf, 0.4570991222717348, 0.3460672690443739, 0.33354423172503844, 0.32429337965790883, 0.29801200505630904] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4570991222717348, 0.3460672690443739, 0.33354423172503844, 0.32429337965790883, 0.29801200505630904, 0.29563811147722346] ***
*** starting iteration: 6; err: [Inf, 0.4570991222717348, 0.3460672690443739, 0.33354423172503844, 0.32429337965790883, 0.29801200505630904, 0.29563811147722346] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4570991222717348, 0.3460672690443739, 0.33354423172503844, 0.32429337965790883, 0.29801200505630904, 0.29563811147722346, 0.29536658760391993] ***
*** finished computation of 3 references, err: [Inf, 0.4570991222717348, 0.3460672690443739, 0.33354423172503844, 0.32429337965790883, 0.29801200505630904, 0.29563811147722346, 0.29536658760391993] ***
*** center 1: selecting labels [1] (freq >= 2) [from [230, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [77, 145, 30]]
** centroid: 2, normalized-entropy: 0.8498484604715782, [(1, 77), (2, 145), (3, 30)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [98, 87, 0]]
** centroid: 3, normalized-entropy: 0.997448223423719, [(1, 98), (2, 87)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.368760462853129] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.368760462853129, 0.3082765514896651] ***
*** starting iteration: 2; err: [Inf, 0.368760462853129, 0.3082765514896651] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.368760462853129, 0.3082765514896651, 0.2997928060215056] ***
*** starting iteration: 3; err: [Inf, 0.368760462853129, 0.3082765514896651, 0.2997928060215056] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.368760462853129, 0.3082765514896651, 0.2997928060215056, 0.2976446567360569] ***
*** finished computation of 3 references, err: [Inf, 0.368760462853129, 0.3082765514896651, 0.2997928060215056, 0.2976446567360569] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [76, 159, 32]]
** centroid: 1, normalized-entropy: 0.8379667123406698, [(1, 76), (2, 159), (3, 32)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [112, 76, 0]]
** centroid: 2, normalized-entropy: 0.9733854352299557, [(1, 112), (2, 76)]
*** center 3: selecting labels [1] (freq >= 1) [from [211, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.38767679192047605] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38767679192047605, 0.3027558270255397] ***
*** starting iteration: 2; err: [Inf, 0.38767679192047605, 0.3027558270255397] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38767679192047605, 0.3027558270255397, 0.3005639143103826] ***
*** starting iteration: 3; err: [Inf, 0.38767679192047605, 0.3027558270255397, 0.3005639143103826] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38767679192047605, 0.3027558270255397, 0.3005639143103826, 0.29948642795327407] ***
*** finished computation of 3 references, err: [Inf, 0.38767679192047605, 0.3027558270255397, 0.3005639143103826, 0.29948642795327407] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [77, 164, 24]]
** centroid: 1, normalized-entropy: 0.7951849894532127, [(1, 77), (2, 164), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [113, 83, 0]]
** centroid: 2, normalized-entropy: 0.9830338463870911, [(1, 113), (2, 83)]
*** center 3: selecting labels [1] (freq >= 1) [from [206, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.537279952619074] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.537279952619074, 0.3078533020038074] ***
*** starting iteration: 2; err: [Inf, 0.537279952619074, 0.3078533020038074] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.537279952619074, 0.3078533020038074, 0.3044522175163232] ***
*** starting iteration: 3; err: [Inf, 0.537279952619074, 0.3078533020038074, 0.3044522175163232] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.537279952619074, 0.3078533020038074, 0.3044522175163232, 0.30385377129604074] ***
*** finished computation of 3 references, err: [Inf, 0.537279952619074, 0.3078533020038074, 0.3044522175163232, 0.30385377129604074] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [247, 23, 0]]
** centroid: 1, normalized-entropy: 0.4201910370851767, [(1, 247), (2, 23)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [158, 23, 0]]
** centroid: 2, normalized-entropy: 0.5493526097279925, [(1, 158), (2, 23)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 186, 30]]
** centroid: 3, normalized-entropy: 0.581321498763703, [(2, 186), (3, 30)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31437313017734625] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31437313017734625, 0.24393586797832703] ***
*** starting iteration: 2; err: [Inf, 0.31437313017734625, 0.24393586797832703] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31437313017734625, 0.24393586797832703, 0.23930675386347705] ***
*** starting iteration: 3; err: [Inf, 0.31437313017734625, 0.24393586797832703, 0.23930675386347705] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31437313017734625, 0.24393586797832703, 0.23930675386347705, 0.23855312231665216] ***
*** finished computation of 3 references, err: [Inf, 0.31437313017734625, 0.24393586797832703, 0.23930675386347705, 0.23855312231665216] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [253, 22, 0]]
** centroid: 1, normalized-entropy: 0.4021791902022729, [(1, 253), (2, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [146, 43, 0]]
** centroid: 2, normalized-entropy: 0.7736510483021695, [(1, 146), (2, 43)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 170, 32]]
** centroid: 3, normalized-entropy: 0.6305062394675903, [(2, 170), (3, 32)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.37377006000793095] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37377006000793095, 0.24159764519207055] ***
*** starting iteration: 2; err: [Inf, 0.37377006000793095, 0.24159764519207055] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37377006000793095, 0.24159764519207055, 0.2398436306829172] ***
*** starting iteration: 3; err: [Inf, 0.37377006000793095, 0.24159764519207055, 0.2398436306829172] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37377006000793095, 0.24159764519207055, 0.2398436306829172, 0.2393932809949904] ***
*** finished computation of 3 references, err: [Inf, 0.37377006000793095, 0.24159764519207055, 0.2398436306829172, 0.2393932809949904] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [245, 7, 0]]
** centroid: 1, normalized-entropy: 0.18312206830137262, [(1, 245), (2, 7)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 194, 24]]
** centroid: 2, normalized-entropy: 0.5001926210998139, [(2, 194), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [151, 46, 0]]
** centroid: 3, normalized-entropy: 0.7840672224172417, [(1, 151), (2, 46)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3031840178769255] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3031840178769255, 0.24119784413645606] ***
*** starting iteration: 2; err: [Inf, 0.3031840178769255, 0.24119784413645606] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3031840178769255, 0.24119784413645606, 0.23524829664028835] ***
*** starting iteration: 3; err: [Inf, 0.3031840178769255, 0.24119784413645606, 0.23524829664028835] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3031840178769255, 0.24119784413645606, 0.23524829664028835, 0.23392396514350058] ***
*** starting iteration: 4; err: [Inf, 0.3031840178769255, 0.24119784413645606, 0.23524829664028835, 0.23392396514350058] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3031840178769255, 0.24119784413645606, 0.23524829664028835, 0.23392396514350058, 0.2333934274132083] ***
*** finished computation of 3 references, err: [Inf, 0.3031840178769255, 0.24119784413645606, 0.23524829664028835, 0.23392396514350058, 0.2333934274132083] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [64, 150, 30]]
** centroid: 1, normalized-entropy: 0.8263379784087624, [(1, 64), (2, 150), (3, 30)]
*** center 2: selecting labels [1] (freq >= 2) [from [240, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [101, 82, 0]]
** centroid: 3, normalized-entropy: 0.9922100889036375, [(1, 101), (2, 82)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2283069229567306] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2283069229567306, 0.18590377019711296] ***
*** finished computation of 7 references, err: [Inf, 0.2283069229567306, 0.18590377019711296] ***
*** center 1: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [76, 4, 0]]
** centroid: 2, normalized-entropy: 0.2863969571159561, [(1, 76), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 54, 32]]
** centroid: 3, normalized-entropy: 0.9522656254366643, [(2, 54), (3, 32)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [114, 2, 0]]
** centroid: 4, normalized-entropy: 0.12565805017256745, [(1, 114), (2, 2)]
*** center 5: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [7, 100, 0]]
** centroid: 6, normalized-entropy: 0.34859686086959846, [(1, 7), (2, 100)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [20, 75, 0]]
** centroid: 7, normalized-entropy: 0.7424875695421234, [(1, 20), (2, 75)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22902961454676768] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22902961454676768, 0.19226658384900713] ***
*** finished computation of 7 references, err: [Inf, 0.22902961454676768, 0.19226658384900713] ***
*** center 1: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [49, 32, 0]]
** centroid: 2, normalized-entropy: 0.9679884922470298, [(1, 49), (2, 32)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 92, 24]]
** centroid: 3, normalized-entropy: 0.7355085815538399, [(2, 92), (3, 24)]
*** center 4: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [50, 12, 0]]
** centroid: 5, normalized-entropy: 0.708835673332196, [(1, 50), (2, 12)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [103, 11, 0]]
** centroid: 6, normalized-entropy: 0.4577733290341998, [(1, 103), (2, 11)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [14, 100, 0]]
** centroid: 7, normalized-entropy: 0.5373760853377334, [(1, 14), (2, 100)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.214832770506917] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.214832770506917, 0.18938783407518486] ***
*** finished computation of 7 references, err: [Inf, 0.214832770506917, 0.18938783407518486] ***
*** center 1: selecting labels [1] (freq >= 1) [from [129, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [53, 10, 0]]
** centroid: 2, normalized-entropy: 0.6312630180916119, [(1, 53), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 50, 30]]
** centroid: 3, normalized-entropy: 0.954434002924965, [(2, 50), (3, 30)]
*** center 4: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [18, 88, 0]]
** centroid: 5, normalized-entropy: 0.6572729784684466, [(1, 18), (2, 88)]
*** center 6: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [16, 84, 0]]
** centroid: 7, normalized-entropy: 0.634309554640566, [(1, 16), (2, 84)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19006163693961683] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19006163693961683, 0.15113739497531709] ***
*** starting iteration: 2; err: [Inf, 0.19006163693961683, 0.15113739497531709] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19006163693961683, 0.15113739497531709, 0.1480968937007906] ***
*** starting iteration: 3; err: [Inf, 0.19006163693961683, 0.15113739497531709, 0.1480968937007906] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19006163693961683, 0.15113739497531709, 0.1480968937007906, 0.14749076853606952] ***
*** finished computation of 7 references, err: [Inf, 0.19006163693961683, 0.15113739497531709, 0.1480968937007906, 0.14749076853606952] ***
*** center 1: selecting labels [1] (freq >= 1) [from [132, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 54, 32]]
** centroid: 2, normalized-entropy: 0.9522656254366643, [(2, 54), (3, 32)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [89, 23, 0]]
** centroid: 3, normalized-entropy: 0.7325138475458123, [(1, 89), (2, 23)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [57, 13, 0]]
** centroid: 4, normalized-entropy: 0.6924194863274741, [(1, 57), (2, 13)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [37, 71, 0]]
** centroid: 5, normalized-entropy: 0.9272780575976948, [(1, 37), (2, 71)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 74, 0]]
** centroid: 6, normalized-entropy: 0.23750814382859295, [(1, 3), (2, 74)]
*** center 7: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2152250195480604] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2152250195480604, 0.15307986128354806] ***
*** starting iteration: 2; err: [Inf, 0.2152250195480604, 0.15307986128354806] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2152250195480604, 0.15307986128354806, 0.1476169371994204] ***
*** starting iteration: 3; err: [Inf, 0.2152250195480604, 0.15307986128354806, 0.1476169371994204] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2152250195480604, 0.15307986128354806, 0.1476169371994204, 0.14699913199985404] ***
*** finished computation of 7 references, err: [Inf, 0.2152250195480604, 0.15307986128354806, 0.1476169371994204, 0.14699913199985404] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 53, 24]]
** centroid: 1, normalized-entropy: 0.8951127210954559, [(2, 53), (3, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [120, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [106, 3, 0]]
** centroid: 4, normalized-entropy: 0.18181317169561842, [(1, 106), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [68, 22, 0]]
** centroid: 5, normalized-entropy: 0.80235344282919, [(1, 68), (2, 22)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [5, 85, 0]]
** centroid: 6, normalized-entropy: 0.3095434291503252, [(1, 5), (2, 85)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 84, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19411448134748877] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19411448134748877, 0.1530837792263686] ***
*** starting iteration: 2; err: [Inf, 0.19411448134748877, 0.1530837792263686] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19411448134748877, 0.1530837792263686, 0.1495317372474596] ***
*** starting iteration: 3; err: [Inf, 0.19411448134748877, 0.1530837792263686, 0.1495317372474596] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19411448134748877, 0.1530837792263686, 0.1495317372474596, 0.14857206992718433] ***
*** finished computation of 7 references, err: [Inf, 0.19411448134748877, 0.1530837792263686, 0.1495317372474596, 0.14857206992718433] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [3, 79, 0]]
** centroid: 1, normalized-entropy: 0.22641094842107634, [(1, 3), (2, 79)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [80, 15, 0]]
** centroid: 2, normalized-entropy: 0.6292492238560344, [(1, 80), (2, 15)]
*** center 3: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 80, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [115, 5, 0]]
** centroid: 5, normalized-entropy: 0.24988229283318547, [(1, 115), (2, 5)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [94, 1, 0]]
** centroid: 6, normalized-entropy: 0.08426242877623306, [(1, 94), (2, 1)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 52, 30]]
** centroid: 7, normalized-entropy: 0.9474351361840305, [(2, 52), (3, 30)]
finished with 9 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 11)
[0.9600019180857503, 0.9109978241714769, 0.8870097642552732, 0.8859787931644219, 0.8800027572482662, 0.8780576984169798, 0.8650117183051315, 0.8549897202591813, 0.8359587132042222, 0.8330516144887402, 0.7780175384965805]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.3, 1) => 0.9600019180857503
finished with 12
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.37312613356880864] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37312613356880864, 0.2813908736027117] ***
*** starting iteration: 2; err: [Inf, 0.37312613356880864, 0.2813908736027117] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37312613356880864, 0.2813908736027117, 0.26154243744009203] ***
*** starting iteration: 3; err: [Inf, 0.37312613356880864, 0.2813908736027117, 0.26154243744009203] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37312613356880864, 0.2813908736027117, 0.26154243744009203, 0.2432358630264441] ***
*** starting iteration: 4; err: [Inf, 0.37312613356880864, 0.2813908736027117, 0.26154243744009203, 0.2432358630264441] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37312613356880864, 0.2813908736027117, 0.26154243744009203, 0.2432358630264441, 0.2391816317124779] ***
*** starting iteration: 5; err: [Inf, 0.37312613356880864, 0.2813908736027117, 0.26154243744009203, 0.2432358630264441, 0.2391816317124779] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37312613356880864, 0.2813908736027117, 0.26154243744009203, 0.2432358630264441, 0.2391816317124779, 0.23853166665121153] ***
*** finished computation of 3 references, err: [Inf, 0.37312613356880864, 0.2813908736027117, 0.26154243744009203, 0.2432358630264441, 0.2391816317124779, 0.23853166665121153] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [69, 161, 32]]
** centroid: 1, normalized-entropy: 0.825966567472078, [(1, 69), (2, 161), (3, 32)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [116, 74, 0]]
** centroid: 2, normalized-entropy: 0.9644590583765235, [(1, 116), (2, 74)]
*** center 3: selecting labels [1] (freq >= 2) [from [214, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2959170600223443] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2959170600223443, 0.23724278320057102] ***
*** starting iteration: 2; err: [Inf, 0.2959170600223443, 0.23724278320057102] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2959170600223443, 0.23724278320057102, 0.2363496629669257] ***
*** finished computation of 3 references, err: [Inf, 0.2959170600223443, 0.23724278320057102, 0.2363496629669257] ***
*** center 1: selecting labels [1] (freq >= 2) [from [219, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [86, 141, 23]]
** centroid: 2, normalized-entropy: 0.8279530561368594, [(1, 86), (2, 141), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [91, 106, 1]]
** centroid: 3, normalized-entropy: 0.9958138476706884, [(1, 91), (2, 106)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3866035098927668] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3866035098927668, 0.2563841375899313] ***
*** starting iteration: 2; err: [Inf, 0.3866035098927668, 0.2563841375899313] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3866035098927668, 0.2563841375899313, 0.23720363616060908] ***
*** starting iteration: 3; err: [Inf, 0.3866035098927668, 0.2563841375899313, 0.23720363616060908] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3866035098927668, 0.2563841375899313, 0.23720363616060908, 0.23433637949519384] ***
*** starting iteration: 4; err: [Inf, 0.3866035098927668, 0.2563841375899313, 0.23720363616060908, 0.23433637949519384] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3866035098927668, 0.2563841375899313, 0.23720363616060908, 0.23433637949519384, 0.23347388212520187] ***
*** finished computation of 3 references, err: [Inf, 0.3866035098927668, 0.2563841375899313, 0.23720363616060908, 0.23433637949519384, 0.23347388212520187] ***
*** center 1: selecting labels [1] (freq >= 2) [from [246, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [57, 146, 30]]
** centroid: 2, normalized-entropy: 0.8203698982587798, [(1, 57), (2, 146), (3, 30)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [102, 86, 0]]
** centroid: 3, normalized-entropy: 0.9947688847336321, [(1, 102), (2, 86)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 12)
[0.9600019180857503, 0.9109978241714769, 0.9020367673062283, 0.8870097642552732, 0.8859787931644219, 0.8800027572482662, 0.8780576984169798, 0.8650117183051315, 0.8549897202591813, 0.8359587132042222, 0.8330516144887402, 0.7780175384965805]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.3, 1) => 0.9600019180857503
finished with 12
iteration 3 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9600019180857503, 0.9109978241714769, 0.9020367673062283, 0.8870097642552732, 0.8859787931644219, 0.8800027572482662, 0.8780576984169798, 0.8650117183051315, 0.8549897202591813, 0.8359587132042222, 0.8330516144887402, 0.7780175384965805]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.3, 1) => 0.9600019180857503
finished with 12
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9600019180857503, 0.9109978241714769, 0.9020367673062283, 0.8870097642552732, 0.8859787931644219, 0.8800027572482662, 0.8780576984169798, 0.8650117183051315, 0.8549897202591813, 0.8359587132042222, 0.8330516144887402, 0.7780175384965805]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.3, 1) => 0.9600019180857503
finished with 13
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.18610768147126153] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18610768147126153, 0.15142606845189882] ***
*** finished computation of 7 references, err: [Inf, 0.18610768147126153, 0.15142606845189882] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [122, 15, 0]]
** centroid: 1, normalized-entropy: 0.49837285583060054, [(1, 122), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [64, 4, 0]]
** centroid: 2, normalized-entropy: 0.32275695889739825, [(1, 64), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 36, 32]]
** centroid: 3, normalized-entropy: 0.9975025463691153, [(2, 36), (3, 32)]
*** center 4: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [110, 2, 0]]
** centroid: 5, normalized-entropy: 0.12923377484588472, [(1, 110), (2, 2)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 85, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [7, 93, 0]]
** centroid: 7, normalized-entropy: 0.36592365090022316, [(1, 7), (2, 93)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19712235046357945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19712235046357945, 0.15061154310637595] ***
*** finished computation of 7 references, err: [Inf, 0.19712235046357945, 0.15061154310637595] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [23, 103, 0]]
** centroid: 1, normalized-entropy: 0.68560151644291, [(1, 23), (2, 103)]
*** center 2: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [51, 48, 0]]
** centroid: 3, normalized-entropy: 0.9993375041688846, [(1, 51), (2, 48)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [56, 31, 0]]
** centroid: 4, normalized-entropy: 0.9395876193289702, [(1, 56), (2, 31)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 65, 24]]
** centroid: 5, normalized-entropy: 0.8409805336163159, [(2, 65), (3, 24)]
*** center 6: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18649391900479928] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18649391900479928, 0.15316932579723078] ***
*** finished computation of 7 references, err: [Inf, 0.18649391900479928, 0.15316932579723078] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [126, 6, 0]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(1, 126), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [53, 5, 0]]
** centroid: 2, normalized-entropy: 0.4236805715709106, [(1, 53), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 45, 30]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(2, 45), (3, 30)]
*** center 4: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [8, 96, 0]]
** centroid: 5, normalized-entropy: 0.3912435636292556, [(1, 8), (2, 96)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [21, 80, 0]]
** centroid: 6, normalized-entropy: 0.7374895672137457, [(1, 21), (2, 80)]
*** center 7: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 13)
[0.9600019180857503, 0.9290308272344201, 0.9109978241714769, 0.9020367673062283, 0.8870097642552732, 0.8859787931644219, 0.8800027572482662, 0.8780576984169798, 0.8650117183051315, 0.8549897202591813, 0.8359587132042222, 0.8330516144887402, 0.7780175384965805]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.3, 1) => 0.9600019180857503
finished with 14
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.42461638600780843] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42461638600780843, 0.31110698924967656] ***
*** starting iteration: 2; err: [Inf, 0.42461638600780843, 0.31110698924967656] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42461638600780843, 0.31110698924967656, 0.30234521173231593] ***
*** starting iteration: 3; err: [Inf, 0.42461638600780843, 0.31110698924967656, 0.30234521173231593] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42461638600780843, 0.31110698924967656, 0.30234521173231593, 0.2998788228605289] ***
*** finished computation of 3 references, err: [Inf, 0.42461638600780843, 0.31110698924967656, 0.30234521173231593, 0.2998788228605289] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [90, 152, 32]]
** centroid: 1, normalized-entropy: 0.8586839504156344, [(1, 90), (2, 152), (3, 32)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [98, 83, 0]]
** centroid: 2, normalized-entropy: 0.9950401549004143, [(1, 98), (2, 83)]
*** center 3: selecting labels [1] (freq >= 1) [from [211, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39682711996668685] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39682711996668685, 0.2988154751959367] ***
*** starting iteration: 2; err: [Inf, 0.39682711996668685, 0.2988154751959367] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39682711996668685, 0.2988154751959367, 0.29775844452270156] ***
*** starting iteration: 3; err: [Inf, 0.39682711996668685, 0.2988154751959367, 0.29775844452270156] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39682711996668685, 0.2988154751959367, 0.29775844452270156, 0.29788742512269045] ***
*** finished computation of 3 references, err: [Inf, 0.39682711996668685, 0.2988154751959367, 0.29775844452270156, 0.29788742512269045] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [87, 157, 24]]
** centroid: 1, normalized-entropy: 0.8142790259837704, [(1, 87), (2, 157), (3, 24)]
*** center 2: selecting labels [1] (freq >= 1) [from [203, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [106, 90, 0]]
** centroid: 3, normalized-entropy: 0.9951876662918929, [(1, 106), (2, 90)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.36900614185616193] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36900614185616193, 0.3023416204786422] ***
*** starting iteration: 2; err: [Inf, 0.36900614185616193, 0.3023416204786422] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36900614185616193, 0.3023416204786422, 0.29705790373897445] ***
*** starting iteration: 3; err: [Inf, 0.36900614185616193, 0.3023416204786422, 0.29705790373897445] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36900614185616193, 0.3023416204786422, 0.29705790373897445, 0.2955223506706106] ***
*** finished computation of 3 references, err: [Inf, 0.36900614185616193, 0.3023416204786422, 0.29705790373897445, 0.2955223506706106] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [76, 148, 30]]
** centroid: 1, normalized-entropy: 0.844744403668217, [(1, 76), (2, 148), (3, 30)]
*** center 2: selecting labels [1] (freq >= 1) [from [229, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [100, 84, 0]]
** centroid: 3, normalized-entropy: 0.9945386816500111, [(1, 100), (2, 84)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 14)
[0.9600019180857503, 0.9290308272344201, 0.9109978241714769, 0.9020367673062283, 0.8900337463211715, 0.8870097642552732, 0.8859787931644219, 0.8800027572482662, 0.8780576984169798, 0.8650117183051315, 0.8549897202591813, 0.8359587132042222, 0.8330516144887402, 0.7780175384965805]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.3, 1) => 0.9600019180857503
finished with 15
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.2399290133555708] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2399290133555708, 0.19278458798760073] ***
*** starting iteration: 2; err: [Inf, 0.2399290133555708, 0.19278458798760073] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2399290133555708, 0.19278458798760073, 0.18931543615341814] ***
*** starting iteration: 3; err: [Inf, 0.2399290133555708, 0.19278458798760073, 0.18931543615341814] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2399290133555708, 0.19278458798760073, 0.18931543615341814, 0.1877480270243152] ***
*** starting iteration: 4; err: [Inf, 0.2399290133555708, 0.19278458798760073, 0.18931543615341814, 0.1877480270243152] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2399290133555708, 0.19278458798760073, 0.18931543615341814, 0.1877480270243152, 0.18648093428557833] ***
*** starting iteration: 5; err: [Inf, 0.2399290133555708, 0.19278458798760073, 0.18931543615341814, 0.1877480270243152, 0.18648093428557833] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2399290133555708, 0.19278458798760073, 0.18931543615341814, 0.1877480270243152, 0.18648093428557833, 0.1860212143517572] ***
*** finished computation of 7 references, err: [Inf, 0.2399290133555708, 0.19278458798760073, 0.18931543615341814, 0.1877480270243152, 0.18648093428557833, 0.1860212143517572] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [19, 88, 0]]
** centroid: 1, normalized-entropy: 0.6747323584057238, [(1, 19), (2, 88)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [54, 11, 0]]
** centroid: 2, normalized-entropy: 0.6559420757694151, [(1, 54), (2, 11)]
*** center 3: selecting labels [1] (freq >= 1) [from [132, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 51, 32]]
** centroid: 4, normalized-entropy: 0.9618624139909456, [(2, 51), (3, 32)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [96, 9, 0]]
** centroid: 5, normalized-entropy: 0.4220005168831531, [(1, 96), (2, 9)]
*** center 6: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [9, 76, 0]]
** centroid: 7, normalized-entropy: 0.48736957102366285, [(1, 9), (2, 76)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23909076542148125] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23909076542148125, 0.19519805943529153] ***
*** starting iteration: 2; err: [Inf, 0.23909076542148125, 0.19519805943529153] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23909076542148125, 0.19519805943529153, 0.1919354560185989] ***
*** starting iteration: 3; err: [Inf, 0.23909076542148125, 0.19519805943529153, 0.1919354560185989] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23909076542148125, 0.19519805943529153, 0.1919354560185989, 0.1912187905270031] ***
*** finished computation of 7 references, err: [Inf, 0.23909076542148125, 0.19519805943529153, 0.1919354560185989, 0.1912187905270031] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [26, 99, 0]]
** centroid: 1, normalized-entropy: 0.737642380185689, [(1, 26), (2, 99)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [59, 8, 0]]
** centroid: 2, normalized-entropy: 0.52764232609436, [(1, 59), (2, 8)]
*** center 3: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 52, 24]]
** centroid: 4, normalized-entropy: 0.8997437586982626, [(2, 52), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [92, 2, 0]]
** centroid: 5, normalized-entropy: 0.14854949043034832, [(1, 92), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [108, 1, 0]]
** centroid: 6, normalized-entropy: 0.07526826758743464, [(1, 108), (2, 1)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 85, 0]]
** centroid: 7, normalized-entropy: 0.15790637433488164, [(1, 2), (2, 85)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23004060628617284] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23004060628617284, 0.19447392411669645] ***
*** starting iteration: 2; err: [Inf, 0.23004060628617284, 0.19447392411669645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23004060628617284, 0.19447392411669645, 0.19268109573042955] ***
*** starting iteration: 3; err: [Inf, 0.23004060628617284, 0.19447392411669645, 0.19268109573042955] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23004060628617284, 0.19447392411669645, 0.19268109573042955, 0.1902011631655673] ***
*** starting iteration: 4; err: [Inf, 0.23004060628617284, 0.19447392411669645, 0.19268109573042955, 0.1902011631655673] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23004060628617284, 0.19447392411669645, 0.19268109573042955, 0.1902011631655673, 0.18878033482979262] ***
*** starting iteration: 5; err: [Inf, 0.23004060628617284, 0.19447392411669645, 0.19268109573042955, 0.1902011631655673, 0.18878033482979262] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23004060628617284, 0.19447392411669645, 0.19268109573042955, 0.1902011631655673, 0.18878033482979262, 0.18805774329355854] ***
*** finished computation of 7 references, err: [Inf, 0.23004060628617284, 0.19447392411669645, 0.19268109573042955, 0.1902011631655673, 0.18878033482979262, 0.18805774329355854] ***
*** center 1: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 75, 30]]
** centroid: 2, normalized-entropy: 0.8631205685666311, [(2, 75), (3, 30)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [77, 1, 0]]
** centroid: 3, normalized-entropy: 0.098959095355743, [(1, 77), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [63, 53, 0]]
** centroid: 4, normalized-entropy: 0.9946325531246042, [(1, 63), (2, 53)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [38, 50, 0]]
** centroid: 5, normalized-entropy: 0.9865446300055647, [(1, 38), (2, 50)]
*** center 6: selecting labels [1] (freq >= 1) [from [116, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [13, 53, 0]]
** centroid: 7, normalized-entropy: 0.7158259310602146, [(1, 13), (2, 53)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 15)
[0.9600019180857503, 0.9330018641395886, 0.9290308272344201, 0.9109978241714769, 0.9020367673062283, 0.8900337463211715, 0.8870097642552732, 0.8859787931644219, 0.8800027572482662, 0.8780576984169798, 0.8650117183051315, 0.8549897202591813, 0.8359587132042222, 0.8330516144887402, 0.7780175384965805]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.3, 1) => 0.9600019180857503
finished with 17
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.3156881988434507] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3156881988434507, 0.251930808589735] ***
*** starting iteration: 2; err: [Inf, 0.3156881988434507, 0.251930808589735] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3156881988434507, 0.251930808589735, 0.24104258290271055] ***
*** starting iteration: 3; err: [Inf, 0.3156881988434507, 0.251930808589735, 0.24104258290271055] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3156881988434507, 0.251930808589735, 0.24104258290271055, 0.23892963046554822] ***
*** finished computation of 3 references, err: [Inf, 0.3156881988434507, 0.251930808589735, 0.24104258290271055, 0.23892963046554822] ***
*** center 1: selecting labels [1] (freq >= 2) [from [203, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [110, 77, 0]]
** centroid: 2, normalized-entropy: 0.9774178175281716, [(1, 110), (2, 77)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [86, 158, 32]]
** centroid: 3, normalized-entropy: 0.8487756768932662, [(1, 86), (2, 158), (3, 32)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3058504131741297] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3058504131741297, 0.2520835562294972] ***
*** starting iteration: 2; err: [Inf, 0.3058504131741297, 0.2520835562294972] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3058504131741297, 0.2520835562294972, 0.23805322098535955] ***
*** starting iteration: 3; err: [Inf, 0.3058504131741297, 0.2520835562294972, 0.23805322098535955] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3058504131741297, 0.2520835562294972, 0.23805322098535955, 0.2353833029982166] ***
*** finished computation of 3 references, err: [Inf, 0.3058504131741297, 0.2520835562294972, 0.23805322098535955, 0.2353833029982166] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [262, 3, 0]]
** centroid: 1, normalized-entropy: 0.08942698754499391, [(1, 262), (2, 3)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [15, 162, 24]]
** centroid: 2, normalized-entropy: 0.5655240926725814, [(1, 15), (2, 162), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [119, 82, 0]]
** centroid: 3, normalized-entropy: 0.9754169737046592, [(1, 119), (2, 82)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.37991775204518297] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37991775204518297, 0.29589846372503836] ***
*** starting iteration: 2; err: [Inf, 0.37991775204518297, 0.29589846372503836] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37991775204518297, 0.29589846372503836, 0.2888133845137044] ***
*** starting iteration: 3; err: [Inf, 0.37991775204518297, 0.29589846372503836, 0.2888133845137044] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37991775204518297, 0.29589846372503836, 0.2888133845137044, 0.27845451958488665] ***
*** finished computation of 3 references, err: [Inf, 0.37991775204518297, 0.29589846372503836, 0.2888133845137044, 0.27845451958488665] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [83, 87, 14]]
** centroid: 1, normalized-entropy: 0.8276429320102129, [(1, 83), (2, 87), (3, 14)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [99, 97, 16]]
** centroid: 2, normalized-entropy: 0.8268194106757693, [(1, 99), (2, 97), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [223, 48, 0]]
** centroid: 3, normalized-entropy: 0.6737398984872904, [(1, 223), (2, 48)]
finished with 8 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4102172826202838] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4102172826202838, 0.3104379112949712] ***
*** starting iteration: 2; err: [Inf, 0.4102172826202838, 0.3104379112949712] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4102172826202838, 0.3104379112949712, 0.30340996324210556] ***
*** starting iteration: 3; err: [Inf, 0.4102172826202838, 0.3104379112949712, 0.30340996324210556] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4102172826202838, 0.3104379112949712, 0.30340996324210556, 0.3021963520713889] ***
*** finished computation of 3 references, err: [Inf, 0.4102172826202838, 0.3104379112949712, 0.30340996324210556, 0.3021963520713889] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [184, 41, 0]]
** centroid: 1, normalized-entropy: 0.6849143818666736, [(1, 184), (2, 41)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [3, 189, 32]]
** centroid: 2, normalized-entropy: 0.436098636827004, [(1, 3), (2, 189), (3, 32)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [212, 5, 0]]
** centroid: 3, normalized-entropy: 0.15819281381851147, [(1, 212), (2, 5)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4465825350800141] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4465825350800141, 0.30562253787309335] ***
*** starting iteration: 2; err: [Inf, 0.4465825350800141, 0.30562253787309335] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4465825350800141, 0.30562253787309335, 0.2997527204962193] ***
*** starting iteration: 3; err: [Inf, 0.4465825350800141, 0.30562253787309335, 0.2997527204962193] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4465825350800141, 0.30562253787309335, 0.2997527204962193, 0.2977307596141989] ***
*** finished computation of 3 references, err: [Inf, 0.4465825350800141, 0.30562253787309335, 0.2997527204962193, 0.2977307596141989] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [73, 165, 24]]
** centroid: 1, normalized-entropy: 0.7884632040328182, [(1, 73), (2, 165), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [121, 82, 0]]
** centroid: 2, normalized-entropy: 0.9732092369442463, [(1, 121), (2, 82)]
*** center 3: selecting labels [1] (freq >= 2) [from [202, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3720673700289122] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3720673700289122, 0.33336101852167493] ***
*** starting iteration: 2; err: [Inf, 0.3720673700289122, 0.33336101852167493] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3720673700289122, 0.33336101852167493, 0.3320410497430042] ***
*** starting iteration: 3; err: [Inf, 0.3720673700289122, 0.33336101852167493, 0.3320410497430042] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3720673700289122, 0.33336101852167493, 0.3320410497430042, 0.3302424490672426] ***
*** finished computation of 3 references, err: [Inf, 0.3720673700289122, 0.33336101852167493, 0.3320410497430042, 0.3302424490672426] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [87, 119, 30]]
** centroid: 1, normalized-entropy: 0.8877867202321377, [(1, 87), (2, 119), (3, 30)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [86, 113, 0]]
** centroid: 2, normalized-entropy: 0.986679938848691, [(1, 86), (2, 113)]
*** center 3: selecting labels [1] (freq >= 2) [from [232, 0, 0]]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 17)
[0.9600019180857503, 0.9330018641395886, 0.9290308272344201, 0.9109978241714769, 0.9020367673062283, 0.8900337463211715, 0.8899588210965456, 0.8890177602752454, 0.8870097642552732, 0.8859787931644219, 0.8800027572482662, 0.8780576984169798, 0.8650117183051315, 0.8549897202591813, 0.8359587132042222, 0.8330516144887402, 0.7780175384965805]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.3, 1) => 0.9600019180857503
finished with 17
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.1988655414036475] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1988655414036475, 0.14807339173974468] ***
*** starting iteration: 2; err: [Inf, 0.1988655414036475, 0.14807339173974468] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1988655414036475, 0.14807339173974468, 0.1452232964457944] ***
*** starting iteration: 3; err: [Inf, 0.1988655414036475, 0.14807339173974468, 0.1452232964457944] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1988655414036475, 0.14807339173974468, 0.1452232964457944, 0.1448053657184355] ***
*** finished computation of 7 references, err: [Inf, 0.1988655414036475, 0.14807339173974468, 0.1452232964457944, 0.1448053657184355] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [93, 82, 0]]
** centroid: 1, normalized-entropy: 0.9971480614795875, [(1, 93), (2, 82)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [90, 53, 0]]
** centroid: 2, normalized-entropy: 0.951154114669856, [(1, 90), (2, 53)]
*** center 3: selecting labels [1] (freq >= 1) [from [124, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 133, 43]]
** centroid: 4, normalized-entropy: 0.8021478210586129, [(2, 133), (3, 43)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [52, 89, 0]]
** centroid: 5, normalized-entropy: 0.9497418438927923, [(1, 52), (2, 89)]
*** center 6: selecting labels [1] (freq >= 1) [from [128, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19712536041252315] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19712536041252315, 0.15169121726136656] ***
*** starting iteration: 2; err: [Inf, 0.19712536041252315, 0.15169121726136656] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19712536041252315, 0.15169121726136656, 0.14941874147765338] ***
*** starting iteration: 3; err: [Inf, 0.19712536041252315, 0.15169121726136656, 0.14941874147765338] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19712536041252315, 0.15169121726136656, 0.14941874147765338, 0.14906079558283092] ***
*** finished computation of 7 references, err: [Inf, 0.19712536041252315, 0.15169121726136656, 0.14941874147765338, 0.14906079558283092] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [3, 74, 0]]
** centroid: 1, normalized-entropy: 0.23750814382859295, [(1, 3), (2, 74)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [49, 1, 0]]
** centroid: 2, normalized-entropy: 0.14144054254182067, [(1, 49), (2, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 70, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [72, 9, 0]]
** centroid: 6, normalized-entropy: 0.5032583347756457, [(1, 72), (2, 9)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 33, 24]]
** centroid: 7, normalized-entropy: 0.9819407868640977, [(2, 33), (3, 24)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18742409911565483] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18742409911565483, 0.1503495140466839] ***
*** starting iteration: 2; err: [Inf, 0.18742409911565483, 0.1503495140466839] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18742409911565483, 0.1503495140466839, 0.14685009426483883] ***
*** starting iteration: 3; err: [Inf, 0.18742409911565483, 0.1503495140466839, 0.14685009426483883] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18742409911565483, 0.1503495140466839, 0.14685009426483883, 0.14616180985420943] ***
*** finished computation of 7 references, err: [Inf, 0.18742409911565483, 0.1503495140466839, 0.14685009426483883, 0.14616180985420943] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [29, 56, 0]]
** centroid: 1, normalized-entropy: 0.9259400597385792, [(1, 29), (2, 56)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [50, 7, 0]]
** centroid: 2, normalized-entropy: 0.5373760853377334, [(1, 50), (2, 7)]
*** center 3: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 43, 21]]
** centroid: 4, normalized-entropy: 0.912999213585247, [(2, 43), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [75, 2, 0]]
** centroid: 5, normalized-entropy: 0.17378132267943294, [(1, 75), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 61, 0]]
** centroid: 6, normalized-entropy: 0.11911602665564841, [(1, 1), (2, 61)]
*** center 7: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19323291808180512] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19323291808180512, 0.14324255503388122] ***
*** starting iteration: 2; err: [Inf, 0.19323291808180512, 0.14324255503388122] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19323291808180512, 0.14324255503388122, 0.14108937290497126] ***
*** starting iteration: 3; err: [Inf, 0.19323291808180512, 0.14324255503388122, 0.14108937290497126] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19323291808180512, 0.14324255503388122, 0.14108937290497126, 0.14088993297051638] ***
*** finished computation of 7 references, err: [Inf, 0.19323291808180512, 0.14324255503388122, 0.14108937290497126, 0.14088993297051638] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [47, 40, 0]]
** centroid: 1, normalized-entropy: 0.9953251070631713, [(1, 47), (2, 40)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [60, 4, 0]]
** centroid: 2, normalized-entropy: 0.3372900666170139, [(1, 60), (2, 4)]
*** center 3: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 51, 22]]
** centroid: 4, normalized-entropy: 0.8829589691462253, [(2, 51), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [50, 28, 0]]
** centroid: 5, normalized-entropy: 0.9418285354475157, [(1, 50), (2, 28)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 58, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19452778697758913] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19452778697758913, 0.15209042971208692] ***
*** starting iteration: 2; err: [Inf, 0.19452778697758913, 0.15209042971208692] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19452778697758913, 0.15209042971208692, 0.14878791496297344] ***
*** starting iteration: 3; err: [Inf, 0.19452778697758913, 0.15209042971208692, 0.14878791496297344] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19452778697758913, 0.15209042971208692, 0.14878791496297344, 0.14776019356492906] ***
*** starting iteration: 4; err: [Inf, 0.19452778697758913, 0.15209042971208692, 0.14878791496297344, 0.14776019356492906] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19452778697758913, 0.15209042971208692, 0.14878791496297344, 0.14776019356492906, 0.14648086289130152] ***
*** starting iteration: 5; err: [Inf, 0.19452778697758913, 0.15209042971208692, 0.14878791496297344, 0.14776019356492906, 0.14648086289130152] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19452778697758913, 0.15209042971208692, 0.14878791496297344, 0.14776019356492906, 0.14648086289130152, 0.14574912946484983] ***
*** finished computation of 7 references, err: [Inf, 0.19452778697758913, 0.15209042971208692, 0.14878791496297344, 0.14776019356492906, 0.14648086289130152, 0.14574912946484983] ***
*** center 1: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [55, 23, 0]]
** centroid: 2, normalized-entropy: 0.8749315876677922, [(1, 55), (2, 23)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 64, 25]]
** centroid: 3, normalized-entropy: 0.8566727035015875, [(2, 64), (3, 25)]
*** center 4: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [29, 44, 0]]
** centroid: 5, normalized-entropy: 0.9693253797191861, [(1, 29), (2, 44)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 56, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18214319771528245] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18214319771528245, 0.14424245583405718] ***
*** starting iteration: 2; err: [Inf, 0.18214319771528245, 0.14424245583405718] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18214319771528245, 0.14424245583405718, 0.141288897017017] ***
*** starting iteration: 3; err: [Inf, 0.18214319771528245, 0.14424245583405718, 0.141288897017017] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18214319771528245, 0.14424245583405718, 0.141288897017017, 0.1404578364174813] ***
*** finished computation of 7 references, err: [Inf, 0.18214319771528245, 0.14424245583405718, 0.141288897017017, 0.1404578364174813] ***
*** center 1: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [44, 35, 0]]
** centroid: 2, normalized-entropy: 0.9906174973781801, [(1, 44), (2, 35)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 59, 23]]
** centroid: 3, normalized-entropy: 0.8561146277685725, [(2, 59), (3, 23)]
*** center 4: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [28, 56, 0]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(1, 28), (2, 56)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [40, 33, 0]]
** centroid: 6, normalized-entropy: 0.9933570282728464, [(1, 40), (2, 33)]
*** center 7: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19214760745037346] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19214760745037346, 0.14795238832198082] ***
*** starting iteration: 2; err: [Inf, 0.19214760745037346, 0.14795238832198082] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19214760745037346, 0.14795238832198082, 0.14423691013082862] ***
*** starting iteration: 3; err: [Inf, 0.19214760745037346, 0.14795238832198082, 0.14423691013082862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19214760745037346, 0.14795238832198082, 0.14423691013082862, 0.1435075167408213] ***
*** finished computation of 7 references, err: [Inf, 0.19214760745037346, 0.14795238832198082, 0.14423691013082862, 0.1435075167408213] ***
*** center 1: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [73, 6, 0]]
** centroid: 2, normalized-entropy: 0.3877431810559867, [(1, 73), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 48, 12]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(2, 48), (3, 12)]
*** center 4: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [39, 32, 0]]
** centroid: 5, normalized-entropy: 0.9929768866085175, [(1, 39), (2, 32)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [31, 41, 0]]
** centroid: 6, normalized-entropy: 0.9860400318404435, [(1, 31), (2, 41)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 49, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18296406671218574] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18296406671218574, 0.15533940921351314] ***
*** starting iteration: 2; err: [Inf, 0.18296406671218574, 0.15533940921351314] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18296406671218574, 0.15533940921351314, 0.15212546631135046] ***
*** starting iteration: 3; err: [Inf, 0.18296406671218574, 0.15533940921351314, 0.15212546631135046] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18296406671218574, 0.15533940921351314, 0.15212546631135046, 0.15038924553152175] ***
*** starting iteration: 4; err: [Inf, 0.18296406671218574, 0.15533940921351314, 0.15212546631135046, 0.15038924553152175] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18296406671218574, 0.15533940921351314, 0.15212546631135046, 0.15038924553152175, 0.14911944613419473] ***
*** starting iteration: 5; err: [Inf, 0.18296406671218574, 0.15533940921351314, 0.15212546631135046, 0.15038924553152175, 0.14911944613419473] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18296406671218574, 0.15533940921351314, 0.15212546631135046, 0.15038924553152175, 0.14911944613419473, 0.14789381495770068] ***
*** starting iteration: 6; err: [Inf, 0.18296406671218574, 0.15533940921351314, 0.15212546631135046, 0.15038924553152175, 0.14911944613419473, 0.14789381495770068] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18296406671218574, 0.15533940921351314, 0.15212546631135046, 0.15038924553152175, 0.14911944613419473, 0.14789381495770068, 0.1467606861339882] ***
*** starting iteration: 7; err: [Inf, 0.18296406671218574, 0.15533940921351314, 0.15212546631135046, 0.15038924553152175, 0.14911944613419473, 0.14789381495770068, 0.1467606861339882] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18296406671218574, 0.15533940921351314, 0.15212546631135046, 0.15038924553152175, 0.14911944613419473, 0.14789381495770068, 0.1467606861339882, 0.14603348232991994] ***
*** finished computation of 7 references, err: [Inf, 0.18296406671218574, 0.15533940921351314, 0.15212546631135046, 0.15038924553152175, 0.14911944613419473, 0.14789381495770068, 0.1467606861339882, 0.14603348232991994] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 63, 21]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(2, 63), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [51, 18, 0]]
** centroid: 3, normalized-entropy: 0.828055725379504, [(1, 51), (2, 18)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [33, 47, 0]]
** centroid: 4, normalized-entropy: 0.9777945702913884, [(1, 33), (2, 47)]
*** center 5: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 69, 0]]
** centroid: 6, normalized-entropy: 0.10802319526362848, [(1, 1), (2, 69)]
*** center 7: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1853763262666762] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1853763262666762, 0.14943028522934765] ***
*** starting iteration: 2; err: [Inf, 0.1853763262666762, 0.14943028522934765] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1853763262666762, 0.14943028522934765, 0.14614940764941275] ***
*** starting iteration: 3; err: [Inf, 0.1853763262666762, 0.14943028522934765, 0.14614940764941275] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1853763262666762, 0.14943028522934765, 0.14614940764941275, 0.14546306675113738] ***
*** finished computation of 7 references, err: [Inf, 0.1853763262666762, 0.14943028522934765, 0.14614940764941275, 0.14546306675113738] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [1, 74, 0]]
** centroid: 1, normalized-entropy: 0.10215803640865054, [(1, 1), (2, 74)]
*** center 2: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [44, 18, 0]]
** centroid: 3, normalized-entropy: 0.8691375806126381, [(1, 44), (2, 18)]
*** center 4: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 68, 22]]
** centroid: 5, normalized-entropy: 0.80235344282919, [(2, 68), (3, 22)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [69, 8, 0]]
** centroid: 6, normalized-entropy: 0.481225663841737, [(1, 69), (2, 8)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [42, 14, 0]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(1, 42), (2, 14)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1761246334351599] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1761246334351599, 0.14754171461425722] ***
*** starting iteration: 2; err: [Inf, 0.1761246334351599, 0.14754171461425722] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1761246334351599, 0.14754171461425722, 0.14555750184413047] ***
*** starting iteration: 3; err: [Inf, 0.1761246334351599, 0.14754171461425722, 0.14555750184413047] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1761246334351599, 0.14754171461425722, 0.14555750184413047, 0.14518456912040711] ***
*** finished computation of 7 references, err: [Inf, 0.1761246334351599, 0.14754171461425722, 0.14555750184413047, 0.14518456912040711] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [47, 63, 0]]
** centroid: 1, normalized-entropy: 0.9846841570760806, [(1, 47), (2, 63)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [41, 2, 0]]
** centroid: 2, normalized-entropy: 0.2713895875081112, [(1, 41), (2, 2)]
*** center 3: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 58, 16]]
** centroid: 4, normalized-entropy: 0.7531979910695015, [(2, 58), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [71, 8, 0]]
** centroid: 5, normalized-entropy: 0.47299536229314826, [(1, 71), (2, 8)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [4, 59, 0]]
** centroid: 6, normalized-entropy: 0.3411538931451763, [(1, 4), (2, 59)]
*** center 7: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19531777627766134] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19531777627766134, 0.14626436940021814] ***
*** starting iteration: 2; err: [Inf, 0.19531777627766134, 0.14626436940021814] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19531777627766134, 0.14626436940021814, 0.14441119490005075] ***
*** starting iteration: 3; err: [Inf, 0.19531777627766134, 0.14626436940021814, 0.14441119490005075] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19531777627766134, 0.14626436940021814, 0.14441119490005075, 0.14429601935017855] ***
*** finished computation of 7 references, err: [Inf, 0.19531777627766134, 0.14626436940021814, 0.14441119490005075, 0.14429601935017855] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 68, 19]]
** centroid: 1, normalized-entropy: 0.7572182549240017, [(2, 68), (3, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [55, 1, 0]]
** centroid: 3, normalized-entropy: 0.12923377484588472, [(1, 55), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [58, 21, 0]]
** centroid: 4, normalized-entropy: 0.8354065254460503, [(1, 58), (2, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [44, 28, 0]]
** centroid: 5, normalized-entropy: 0.9640787648082293, [(1, 44), (2, 28)]
*** center 6: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [7, 56, 0]]
** centroid: 7, normalized-entropy: 0.5032583347756457, [(1, 7), (2, 56)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1905065858513117] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1905065858513117, 0.14415144954901188] ***
*** starting iteration: 2; err: [Inf, 0.1905065858513117, 0.14415144954901188] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1905065858513117, 0.14415144954901188, 0.14243962525296958] ***
*** starting iteration: 3; err: [Inf, 0.1905065858513117, 0.14415144954901188, 0.14243962525296958] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1905065858513117, 0.14415144954901188, 0.14243962525296958, 0.1423162533091381] ***
*** finished computation of 7 references, err: [Inf, 0.1905065858513117, 0.14415144954901188, 0.14243962525296958, 0.1423162533091381] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [33, 55, 0]]
** centroid: 1, normalized-entropy: 0.954434002924965, [(1, 33), (2, 55)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [59, 1, 0]]
** centroid: 2, normalized-entropy: 0.12229159706937456, [(1, 59), (2, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 49, 23]]
** centroid: 4, normalized-entropy: 0.9037762882345833, [(2, 49), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [45, 21, 0]]
** centroid: 5, normalized-entropy: 0.9023932827949788, [(1, 45), (2, 21)]
*** center 6: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 66, 0]]
** centroid: 7, normalized-entropy: 0.11190990870168394, [(1, 1), (2, 66)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19753203217498957] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19753203217498957, 0.1515317210368812] ***
*** starting iteration: 2; err: [Inf, 0.19753203217498957, 0.1515317210368812] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19753203217498957, 0.1515317210368812, 0.14671796221658587] ***
*** starting iteration: 3; err: [Inf, 0.19753203217498957, 0.1515317210368812, 0.14671796221658587] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19753203217498957, 0.1515317210368812, 0.14671796221658587, 0.14531481842696667] ***
*** starting iteration: 4; err: [Inf, 0.19753203217498957, 0.1515317210368812, 0.14671796221658587, 0.14531481842696667] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19753203217498957, 0.1515317210368812, 0.14671796221658587, 0.14531481842696667, 0.14507533755898475] ***
*** finished computation of 7 references, err: [Inf, 0.19753203217498957, 0.1515317210368812, 0.14671796221658587, 0.14531481842696667, 0.14507533755898475] ***
*** center 1: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 44, 25]]
** centroid: 2, normalized-entropy: 0.9445911819316588, [(2, 44), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [53, 29, 0]]
** centroid: 3, normalized-entropy: 0.9372930661967526, [(1, 53), (2, 29)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [68, 3, 0]]
** centroid: 4, normalized-entropy: 0.25253077151613923, [(1, 68), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [24, 51, 0]]
** centroid: 5, normalized-entropy: 0.9043814577244941, [(1, 24), (2, 51)]
*** center 6: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 53, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18770236844569443] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18770236844569443, 0.14890298951603473] ***
*** starting iteration: 2; err: [Inf, 0.18770236844569443, 0.14890298951603473] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18770236844569443, 0.14890298951603473, 0.14372886965889484] ***
*** starting iteration: 3; err: [Inf, 0.18770236844569443, 0.14890298951603473, 0.14372886965889484] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18770236844569443, 0.14890298951603473, 0.14372886965889484, 0.14274269893020392] ***
*** finished computation of 7 references, err: [Inf, 0.18770236844569443, 0.14890298951603473, 0.14372886965889484, 0.14274269893020392] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 60, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [45, 15, 0]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(1, 45), (2, 15)]
*** center 3: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 69, 18]]
** centroid: 4, normalized-entropy: 0.7355085815538399, [(2, 69), (3, 18)]
*** center 5: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [68, 12, 0]]
** centroid: 6, normalized-entropy: 0.6098403047164005, [(1, 68), (2, 12)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [49, 14, 0]]
** centroid: 7, normalized-entropy: 0.7642045065086204, [(1, 49), (2, 14)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1892024549418129] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1892024549418129, 0.1509775254447013] ***
*** starting iteration: 2; err: [Inf, 0.1892024549418129, 0.1509775254447013] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1892024549418129, 0.1509775254447013, 0.1478821248416789] ***
*** starting iteration: 3; err: [Inf, 0.1892024549418129, 0.1509775254447013, 0.1478821248416789] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1892024549418129, 0.1509775254447013, 0.1478821248416789, 0.1468481868673116] ***
*** starting iteration: 4; err: [Inf, 0.1892024549418129, 0.1509775254447013, 0.1478821248416789, 0.1468481868673116] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1892024549418129, 0.1509775254447013, 0.1478821248416789, 0.1468481868673116, 0.14616589535214006] ***
*** finished computation of 7 references, err: [Inf, 0.1892024549418129, 0.1509775254447013, 0.1478821248416789, 0.1468481868673116, 0.14616589535214006] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [6, 74, 0]]
** centroid: 1, normalized-entropy: 0.3843115441264972, [(1, 6), (2, 74)]
*** center 2: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [47, 47, 0]]
** centroid: 3, normalized-entropy: 1.0, [(1, 47), (2, 47)]
*** center 4: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [72, 3, 0]]
** centroid: 5, normalized-entropy: 0.24229218908241482, [(1, 72), (2, 3)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 36, 24]]
** centroid: 6, normalized-entropy: 0.9709505944546688, [(2, 36), (3, 24)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [41, 15, 0]]
** centroid: 7, normalized-entropy: 0.8383729377099398, [(1, 41), (2, 15)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1968667478542775] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1968667478542775, 0.14769117738306523] ***
*** starting iteration: 2; err: [Inf, 0.1968667478542775, 0.14769117738306523] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1968667478542775, 0.14769117738306523, 0.1438680619224906] ***
*** starting iteration: 3; err: [Inf, 0.1968667478542775, 0.14769117738306523, 0.1438680619224906] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1968667478542775, 0.14769117738306523, 0.1438680619224906, 0.14327144646458329] ***
*** finished computation of 7 references, err: [Inf, 0.1968667478542775, 0.14769117738306523, 0.1438680619224906, 0.14327144646458329] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [56, 18, 0]]
** centroid: 1, normalized-entropy: 0.8003922080453356, [(1, 56), (2, 18)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 39, 19]]
** centroid: 2, normalized-entropy: 0.912441179764541, [(2, 39), (3, 19)]
*** center 3: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [61, 1, 0]]
** centroid: 4, normalized-entropy: 0.11911602665564841, [(1, 61), (2, 1)]
*** center 5: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 54, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [6, 68, 0]]
** centroid: 7, normalized-entropy: 0.40597703847557104, [(1, 6), (2, 68)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18945991168357432] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18945991168357432, 0.14583241539262234] ***
*** starting iteration: 2; err: [Inf, 0.18945991168357432, 0.14583241539262234] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18945991168357432, 0.14583241539262234, 0.14431642323359847] ***
*** starting iteration: 3; err: [Inf, 0.18945991168357432, 0.14583241539262234, 0.14431642323359847] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18945991168357432, 0.14583241539262234, 0.14431642323359847, 0.14411647765897215] ***
*** finished computation of 7 references, err: [Inf, 0.18945991168357432, 0.14583241539262234, 0.14431642323359847, 0.14411647765897215] ***
*** center 1: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 69, 24]]
** centroid: 2, normalized-entropy: 0.8238116333123173, [(2, 69), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [56, 2, 0]]
** centroid: 3, normalized-entropy: 0.21639693245126485, [(1, 56), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [55, 24, 0]]
** centroid: 4, normalized-entropy: 0.8858834790484443, [(1, 55), (2, 24)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [25, 36, 0]]
** centroid: 5, normalized-entropy: 0.9764143081154868, [(1, 25), (2, 36)]
*** center 6: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 53, 0]]
** centroid: 7, normalized-entropy: 0.13303964861069897, [(1, 1), (2, 53)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20471748357452452] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20471748357452452, 0.14840140411164612] ***
*** starting iteration: 2; err: [Inf, 0.20471748357452452, 0.14840140411164612] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20471748357452452, 0.14840140411164612, 0.14514386631920934] ***
*** starting iteration: 3; err: [Inf, 0.20471748357452452, 0.14840140411164612, 0.14514386631920934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20471748357452452, 0.14840140411164612, 0.14514386631920934, 0.14438598249154166] ***
*** finished computation of 7 references, err: [Inf, 0.20471748357452452, 0.14840140411164612, 0.14514386631920934, 0.14438598249154166] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [65, 4, 0]]
** centroid: 1, normalized-entropy: 0.3193373865339728, [(1, 65), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [72, 1, 0]]
** centroid: 2, normalized-entropy: 0.1044190780054077, [(1, 72), (2, 1)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 42, 24]]
** centroid: 3, normalized-entropy: 0.9456603046006401, [(2, 42), (3, 24)]
*** center 4: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [45, 19, 0]]
** centroid: 5, normalized-entropy: 0.877437311089633, [(1, 45), (2, 19)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 62, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 60, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1855989221483469] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1855989221483469, 0.14829921797080897] ***
*** starting iteration: 2; err: [Inf, 0.1855989221483469, 0.14829921797080897] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1855989221483469, 0.14829921797080897, 0.14505603101663292] ***
*** starting iteration: 3; err: [Inf, 0.1855989221483469, 0.14829921797080897, 0.14505603101663292] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1855989221483469, 0.14829921797080897, 0.14505603101663292, 0.14415718904696406] ***
*** finished computation of 7 references, err: [Inf, 0.1855989221483469, 0.14829921797080897, 0.14505603101663292, 0.14415718904696406] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [8, 66, 0]]
** centroid: 1, normalized-entropy: 0.4941829348497886, [(1, 8), (2, 66)]
*** center 2: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [55, 25, 0]]
** centroid: 3, normalized-entropy: 0.8960382325345574, [(1, 55), (2, 25)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [46, 28, 0]]
** centroid: 4, normalized-entropy: 0.9568886656798214, [(1, 46), (2, 28)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 47, 24]]
** centroid: 5, normalized-entropy: 0.9229192878686723, [(2, 47), (3, 24)]
*** center 6: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [79, 1, 0]]
** centroid: 7, normalized-entropy: 0.09694460606247329, [(1, 79), (2, 1)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19990113058686257] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19990113058686257, 0.15072205624030904] ***
*** starting iteration: 2; err: [Inf, 0.19990113058686257, 0.15072205624030904] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19990113058686257, 0.15072205624030904, 0.148487065307796] ***
*** starting iteration: 3; err: [Inf, 0.19990113058686257, 0.15072205624030904, 0.148487065307796] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19990113058686257, 0.15072205624030904, 0.148487065307796, 0.1482789852246642] ***
*** finished computation of 7 references, err: [Inf, 0.19990113058686257, 0.15072205624030904, 0.148487065307796, 0.1482789852246642] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [67, 11, 0]]
** centroid: 1, normalized-entropy: 0.5869185834047994, [(1, 67), (2, 11)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 53, 21]]
** centroid: 2, normalized-entropy: 0.8605553930586318, [(2, 53), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [49, 10, 0]]
** centroid: 3, normalized-entropy: 0.656540281386946, [(1, 49), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [55, 32, 0]]
** centroid: 4, normalized-entropy: 0.9489804585630239, [(1, 55), (2, 32)]
*** center 5: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [4, 77, 0]]
** centroid: 6, normalized-entropy: 0.2837689703721877, [(1, 4), (2, 77)]
*** center 7: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19740707764215767] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19740707764215767, 0.1559134507123381] ***
*** starting iteration: 2; err: [Inf, 0.19740707764215767, 0.1559134507123381] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19740707764215767, 0.1559134507123381, 0.15231513688340784] ***
*** starting iteration: 3; err: [Inf, 0.19740707764215767, 0.1559134507123381, 0.15231513688340784] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19740707764215767, 0.1559134507123381, 0.15231513688340784, 0.1507010120972991] ***
*** starting iteration: 4; err: [Inf, 0.19740707764215767, 0.1559134507123381, 0.15231513688340784, 0.1507010120972991] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19740707764215767, 0.1559134507123381, 0.15231513688340784, 0.1507010120972991, 0.1500585231836885] ***
*** finished computation of 7 references, err: [Inf, 0.19740707764215767, 0.1559134507123381, 0.15231513688340784, 0.1507010120972991, 0.1500585231836885] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [14, 75, 0]]
** centroid: 1, normalized-entropy: 0.6278191534832795, [(1, 14), (2, 75)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [42, 2, 0]]
** centroid: 2, normalized-entropy: 0.2667649878030262, [(1, 42), (2, 2)]
*** center 3: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 32, 24]]
** centroid: 4, normalized-entropy: 0.9852281360342514, [(2, 32), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [87, 4, 0]]
** centroid: 5, normalized-entropy: 0.26014536394771426, [(1, 87), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [78, 2, 0]]
** centroid: 6, normalized-entropy: 0.1686609314966701, [(1, 78), (2, 2)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 65, 0]]
** centroid: 7, normalized-entropy: 0.11327430349709665, [(1, 1), (2, 65)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19119028370920568] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19119028370920568, 0.15156404147855937] ***
*** starting iteration: 2; err: [Inf, 0.19119028370920568, 0.15156404147855937] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19119028370920568, 0.15156404147855937, 0.1483066610917449] ***
*** starting iteration: 3; err: [Inf, 0.19119028370920568, 0.15156404147855937, 0.1483066610917449] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19119028370920568, 0.15156404147855937, 0.1483066610917449, 0.1470238418094814] ***
*** starting iteration: 4; err: [Inf, 0.19119028370920568, 0.15156404147855937, 0.1483066610917449, 0.1470238418094814] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19119028370920568, 0.15156404147855937, 0.1483066610917449, 0.1470238418094814, 0.14638129515200854] ***
*** finished computation of 7 references, err: [Inf, 0.19119028370920568, 0.15156404147855937, 0.1483066610917449, 0.1470238418094814, 0.14638129515200854] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [14, 60, 0]]
** centroid: 1, normalized-entropy: 0.699772221773307, [(1, 14), (2, 60)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [44, 31, 0]]
** centroid: 2, normalized-entropy: 0.9782176659354249, [(1, 44), (2, 31)]
*** center 3: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 64, 25]]
** centroid: 4, normalized-entropy: 0.8566727035015875, [(2, 64), (3, 25)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [28, 33, 0]]
** centroid: 5, normalized-entropy: 0.995148095654003, [(1, 28), (2, 33)]
*** center 6: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1855704783461988] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1855704783461988, 0.15026282532373444] ***
*** starting iteration: 2; err: [Inf, 0.1855704783461988, 0.15026282532373444] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1855704783461988, 0.15026282532373444, 0.14653349951282144] ***
*** starting iteration: 3; err: [Inf, 0.1855704783461988, 0.15026282532373444, 0.14653349951282144] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1855704783461988, 0.15026282532373444, 0.14653349951282144, 0.1452799715232104] ***
*** starting iteration: 4; err: [Inf, 0.1855704783461988, 0.15026282532373444, 0.14653349951282144, 0.1452799715232104] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1855704783461988, 0.15026282532373444, 0.14653349951282144, 0.1452799715232104, 0.14473992599919439] ***
*** finished computation of 7 references, err: [Inf, 0.1855704783461988, 0.15026282532373444, 0.14653349951282144, 0.1452799715232104, 0.14473992599919439] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [79, 7, 0]]
** centroid: 1, normalized-entropy: 0.40707680632541937, [(1, 79), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [59, 17, 0]]
** centroid: 2, normalized-entropy: 0.7668379316856329, [(1, 59), (2, 17)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 29, 17]]
** centroid: 3, normalized-entropy: 0.9503376699710269, [(2, 29), (3, 17)]
*** center 4: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [8, 69, 0]]
** centroid: 5, normalized-entropy: 0.481225663841737, [(1, 8), (2, 69)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 68, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20166740500740707] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20166740500740707, 0.15462352906074375] ***
*** starting iteration: 2; err: [Inf, 0.20166740500740707, 0.15462352906074375] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20166740500740707, 0.15462352906074375, 0.15050739003159105] ***
*** starting iteration: 3; err: [Inf, 0.20166740500740707, 0.15462352906074375, 0.15050739003159105] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20166740500740707, 0.15462352906074375, 0.15050739003159105, 0.14995829547569156] ***
*** finished computation of 7 references, err: [Inf, 0.20166740500740707, 0.15462352906074375, 0.15050739003159105, 0.14995829547569156] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [26, 53, 0]]
** centroid: 1, normalized-entropy: 0.9140185106642174, [(1, 26), (2, 53)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [47, 4, 0]]
** centroid: 2, normalized-entropy: 0.3966277727783787, [(1, 47), (2, 4)]
*** center 3: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 49, 27]]
** centroid: 4, normalized-entropy: 0.9386808697586004, [(2, 49), (3, 27)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [70, 10, 0]]
** centroid: 5, normalized-entropy: 0.5435644431995963, [(1, 70), (2, 10)]
*** center 6: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [5, 56, 0]]
** centroid: 7, normalized-entropy: 0.4090731390438265, [(1, 5), (2, 56)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1927986057382077] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1927986057382077, 0.1499649032279849] ***
*** starting iteration: 2; err: [Inf, 0.1927986057382077, 0.1499649032279849] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1927986057382077, 0.1499649032279849, 0.1468183380868286] ***
*** starting iteration: 3; err: [Inf, 0.1927986057382077, 0.1499649032279849, 0.1468183380868286] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1927986057382077, 0.1499649032279849, 0.1468183380868286, 0.14633242847770453] ***
*** finished computation of 7 references, err: [Inf, 0.1927986057382077, 0.1499649032279849, 0.1468183380868286, 0.14633242847770453] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [2, 71, 0]]
** centroid: 1, normalized-entropy: 0.18116640155354563, [(1, 2), (2, 71)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [45, 20, 0]]
** centroid: 2, normalized-entropy: 0.8904916402194913, [(1, 45), (2, 20)]
*** center 3: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 69, 20]]
** centroid: 4, normalized-entropy: 0.7686913027030167, [(2, 69), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [47, 20, 0]]
** centroid: 5, normalized-entropy: 0.8794587736429037, [(1, 47), (2, 20)]
*** center 6: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18953124355524778] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18953124355524778, 0.15099140542000533] ***
*** starting iteration: 2; err: [Inf, 0.18953124355524778, 0.15099140542000533] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18953124355524778, 0.15099140542000533, 0.14749291747249663] ***
*** starting iteration: 3; err: [Inf, 0.18953124355524778, 0.15099140542000533, 0.14749291747249663] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18953124355524778, 0.15099140542000533, 0.14749291747249663, 0.14710862080985682] ***
*** finished computation of 7 references, err: [Inf, 0.18953124355524778, 0.15099140542000533, 0.14749291747249663, 0.14710862080985682] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [74, 4, 0]]
** centroid: 1, normalized-entropy: 0.29181825659888555, [(1, 74), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [62, 7, 0]]
** centroid: 2, normalized-entropy: 0.47357292491745173, [(1, 62), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 52, 22]]
** centroid: 3, normalized-entropy: 0.8779620013943914, [(2, 52), (3, 22)]
*** center 4: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [18, 66, 0]]
** centroid: 5, normalized-entropy: 0.7495952572594798, [(1, 18), (2, 66)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 56, 0]]
** centroid: 6, normalized-entropy: 0.21639693245126485, [(1, 2), (2, 56)]
*** center 7: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1895703928936273] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1895703928936273, 0.15464944330230354] ***
*** starting iteration: 2; err: [Inf, 0.1895703928936273, 0.15464944330230354] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1895703928936273, 0.15464944330230354, 0.1519858863404952] ***
*** starting iteration: 3; err: [Inf, 0.1895703928936273, 0.15464944330230354, 0.1519858863404952] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1895703928936273, 0.15464944330230354, 0.1519858863404952, 0.15091805631853641] ***
*** starting iteration: 4; err: [Inf, 0.1895703928936273, 0.15464944330230354, 0.1519858863404952, 0.15091805631853641] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1895703928936273, 0.15464944330230354, 0.1519858863404952, 0.15091805631853641, 0.14886085238680244] ***
*** starting iteration: 5; err: [Inf, 0.1895703928936273, 0.15464944330230354, 0.1519858863404952, 0.15091805631853641, 0.14886085238680244] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1895703928936273, 0.15464944330230354, 0.1519858863404952, 0.15091805631853641, 0.14886085238680244, 0.14674103742092848] ***
*** starting iteration: 6; err: [Inf, 0.1895703928936273, 0.15464944330230354, 0.1519858863404952, 0.15091805631853641, 0.14886085238680244, 0.14674103742092848] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1895703928936273, 0.15464944330230354, 0.1519858863404952, 0.15091805631853641, 0.14886085238680244, 0.14674103742092848, 0.14514031376875938] ***
*** starting iteration: 7; err: [Inf, 0.1895703928936273, 0.15464944330230354, 0.1519858863404952, 0.15091805631853641, 0.14886085238680244, 0.14674103742092848, 0.14514031376875938] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1895703928936273, 0.15464944330230354, 0.1519858863404952, 0.15091805631853641, 0.14886085238680244, 0.14674103742092848, 0.14514031376875938, 0.14437908939644695] ***
*** finished computation of 7 references, err: [Inf, 0.1895703928936273, 0.15464944330230354, 0.1519858863404952, 0.15091805631853641, 0.14886085238680244, 0.14674103742092848, 0.14514031376875938, 0.14437908939644695] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 61, 26]]
** centroid: 1, normalized-entropy: 0.8798813089176428, [(2, 61), (3, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [33, 33, 0]]
** centroid: 4, normalized-entropy: 1.0, [(1, 33), (2, 33)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [35, 36, 0]]
** centroid: 5, normalized-entropy: 0.9998568991526107, [(1, 35), (2, 36)]
*** center 6: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [4, 60, 0]]
** centroid: 7, normalized-entropy: 0.3372900666170139, [(1, 4), (2, 60)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20202731281146408] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20202731281146408, 0.1490261854697019] ***
*** starting iteration: 2; err: [Inf, 0.20202731281146408, 0.1490261854697019] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20202731281146408, 0.1490261854697019, 0.14617565231584012] ***
*** starting iteration: 3; err: [Inf, 0.20202731281146408, 0.1490261854697019, 0.14617565231584012] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20202731281146408, 0.1490261854697019, 0.14617565231584012, 0.1453086061514914] ***
*** finished computation of 7 references, err: [Inf, 0.20202731281146408, 0.1490261854697019, 0.14617565231584012, 0.1453086061514914] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 71, 21]]
** centroid: 1, normalized-entropy: 0.7749672673267259, [(2, 71), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [51, 9, 0]]
** centroid: 3, normalized-entropy: 0.6098403047164005, [(1, 51), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [56, 20, 0]]
** centroid: 4, normalized-entropy: 0.8314743880097292, [(1, 56), (2, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [49, 21, 0]]
** centroid: 5, normalized-entropy: 0.8812908992306927, [(1, 49), (2, 21)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 57, 0]]
** centroid: 6, normalized-entropy: 0.12565805017256745, [(1, 1), (2, 57)]
*** center 7: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18590643048100172] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18590643048100172, 0.14602921586390585] ***
*** starting iteration: 2; err: [Inf, 0.18590643048100172, 0.14602921586390585] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18590643048100172, 0.14602921586390585, 0.14365809892117978] ***
*** starting iteration: 3; err: [Inf, 0.18590643048100172, 0.14602921586390585, 0.14365809892117978] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18590643048100172, 0.14602921586390585, 0.14365809892117978, 0.14287768813036383] ***
*** finished computation of 7 references, err: [Inf, 0.18590643048100172, 0.14602921586390585, 0.14365809892117978, 0.14287768813036383] ***
*** center 1: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 53, 22]]
** centroid: 2, normalized-entropy: 0.8729882944709463, [(2, 53), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [53, 20, 0]]
** centroid: 3, normalized-entropy: 0.847107490529376, [(1, 53), (2, 20)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [25, 40, 0]]
** centroid: 4, normalized-entropy: 0.961236604722876, [(1, 25), (2, 40)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [26, 63, 0]]
** centroid: 5, normalized-entropy: 0.8714630056611941, [(1, 26), (2, 63)]
*** center 6: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18824304365180433] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18824304365180433, 0.14740764131210746] ***
*** starting iteration: 2; err: [Inf, 0.18824304365180433, 0.14740764131210746] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18824304365180433, 0.14740764131210746, 0.14497292011789978] ***
*** starting iteration: 3; err: [Inf, 0.18824304365180433, 0.14740764131210746, 0.14497292011789978] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18824304365180433, 0.14740764131210746, 0.14497292011789978, 0.14479714762419463] ***
*** finished computation of 7 references, err: [Inf, 0.18824304365180433, 0.14740764131210746, 0.14497292011789978, 0.14479714762419463] ***
*** center 1: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 45, 22]]
** centroid: 2, normalized-entropy: 0.9132401614300725, [(2, 45), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [41, 30, 0]]
** centroid: 3, normalized-entropy: 0.9826154285526119, [(1, 41), (2, 30)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [65, 11, 0]]
** centroid: 4, normalized-entropy: 0.5965109917085881, [(1, 65), (2, 11)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [20, 48, 0]]
** centroid: 5, normalized-entropy: 0.8739810481273581, [(1, 20), (2, 48)]
*** center 6: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 56, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20250135897472502] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20250135897472502, 0.1523531904667616] ***
*** starting iteration: 2; err: [Inf, 0.20250135897472502, 0.1523531904667616] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20250135897472502, 0.1523531904667616, 0.148884467497468] ***
*** starting iteration: 3; err: [Inf, 0.20250135897472502, 0.1523531904667616, 0.148884467497468] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20250135897472502, 0.1523531904667616, 0.148884467497468, 0.14838534344360232] ***
*** finished computation of 7 references, err: [Inf, 0.20250135897472502, 0.1523531904667616, 0.148884467497468, 0.14838534344360232] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [69, 2, 0]]
** centroid: 1, normalized-entropy: 0.18512476010054582, [(1, 69), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [58, 41, 0]]
** centroid: 2, normalized-entropy: 0.9786239947589973, [(1, 58), (2, 41)]
*** center 3: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 47, 23]]
** centroid: 4, normalized-entropy: 0.9134601452569628, [(2, 47), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [38, 32, 0]]
** centroid: 5, normalized-entropy: 0.9946937953613056, [(1, 38), (2, 32)]
*** center 6: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 50, 0]]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 357,3 => 43,1 => 600), Dict(2 => 357,3 => 47,1 => 596))
[ Info: ===== scores for single classifier: {"micro_f1":0.961,"precision":0.961,"recall":0.961,"macro_recall":0.9669552384712273,"macro_f1":0.9286916252807417,"accuracy":0.961,"class_f1":{"2":0.9437229437229437,"3":0.8623853211009175,"1":0.9799666110183639},"class_precision":{"2":0.9732142857142857,"3":0.7580645161290323,"1":0.9750830564784053},"class_recall":{"2":0.9159663865546218,"3":1.0,"1":0.9848993288590604}}
[ Info: ===== scores for 1: {"micro_f1":0.969,"precision":0.969,"recall":0.969,"macro_recall":0.9774202745975348,"macro_f1":0.970499874277241,"accuracy":0.969,"class_f1":{"2":0.9567642956764296,"3":0.9791666666666666,"1":0.9755686604886268},"class_precision":{"2":0.9527777777777777,"3":0.9591836734693877,"1":0.9796954314720813},"class_recall":{"2":0.9607843137254902,"3":1.0,"1":0.9714765100671141}}
[ Info: ===== scores for 5: {"micro_f1":0.959,"precision":0.959,"recall":0.959,"macro_recall":0.9710785880347665,"macro_f1":0.960053538225115,"accuracy":0.959,"class_f1":{"2":0.9432918395573998,"3":0.9690721649484536,"1":0.9677966101694915},"class_precision":{"2":0.9316939890710383,"3":0.94,"1":0.9777397260273972},"class_recall":{"2":0.9551820728291317,"3":1.0,"1":0.9580536912751678}}
[ Info: ===== scores for 7: {"micro_f1":0.958,"precision":0.958,"recall":0.958,"macro_recall":0.9712681493178928,"macro_f1":0.9593961226314812,"accuracy":0.958,"class_f1":{"2":0.9423076923076923,"3":0.9690721649484536,"1":0.9668085106382979},"class_precision":{"2":0.9245283018867925,"3":0.94,"1":0.9810017271157168},"class_recall":{"2":0.9607843137254902,"3":1.0,"1":0.9530201342281879}}
[ Info: ===== scores for 9: {"micro_f1":0.967,"precision":0.967,"recall":0.967,"macro_recall":0.9777993971637873,"macro_f1":0.9660566462861894,"accuracy":0.967,"class_f1":{"2":0.9546079779917468,"3":0.9690721649484536,"1":0.9744897959183674},"class_precision":{"2":0.9378378378378378,"3":0.94,"1":0.9879310344827587},"class_recall":{"2":0.9719887955182073,"3":1.0,"1":0.9614093959731543}}
[ Info: ===== scores for 11: {"micro_f1":0.967,"precision":0.967,"recall":0.967,"macro_recall":0.9777993971637873,"macro_f1":0.9630369334657681,"accuracy":0.967,"class_f1":{"2":0.9546079779917468,"3":0.9591836734693878,"1":0.9753191489361701},"class_precision":{"2":0.9378378378378378,"3":0.9215686274509803,"1":0.9896373056994818},"class_recall":{"2":0.9719887955182073,"3":1.0,"1":0.9614093959731543}}
(score = 0.963, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.963, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.969, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.969, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.958, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.958, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.952, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.952, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.963, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.963, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.959, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.959, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.966, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.958, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.958, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.969,"k":1,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.969,"precision":0.969,"recall":0.969,"macro_recall":0.9774202745975348,"macro_f1":0.970499874277241,"accuracy":0.969,"class_f1":{"2":0.9567642956764296,"3":0.9791666666666666,"1":0.9755686604886268},"class_precision":{"2":0.9527777777777777,"3":0.9591836734693877,"1":0.9796954314720813},"class_recall":{"2":0.9607843137254902,"3":1.0,"1":0.9714765100671141}}
Test Summary: | Pass  Total
AKNC          |    8      8
[147, 2, 1, 3, 4, 4, 1, 6, 9, 2, 5, 3, 1, 8, 5, 2, 3, 3, 5, 6, 6, 1, 7, 7, 3, 17, 4, 5, 12, 6, 2, 12, 3, 37, 1, 7, 6, 4, 10, 44, 4, 7, 2, 5, 5, 29, 32, 19, 9, 8, 34, 14, 25, 5, 18, 10, 2, 2, 70, 57, 26, 12, 56, 4, 12, 4, 34, 47, 9, 37, 5, 13, 15, 21, 8, 1, 7, 86, 3, 2, 10, 18, 6, 7, 10, 297, 48, 25, 16, 4, 9, 10, 6, 18, 1, 6, 37, 24, 10, 1, 7, 49, 4, 8, 13, 5, 13, 21, 7, 45, 29, 22, 59, 25, 40, 2, 8, 8, 5, 12, 3, 5, 13, 4, 8, 20, 26, 9, 38, 24, 68, 9, 57, 18, 18, 46, 3, 4, 31, 5, 13, 120, 1156, 5, 10, 5, 7, 6, 93, 130, 29, 30, 166, 11, 99, 11, 21, 35, 52, 9, 9, 13, 54, 3, 39, 12, 20, 45, 4, 104, 111, 5, 7, 5, 13, 10, 4, 4, 19, 8, 10, 78, 13, 39, 6, 71, 68, 3, 55, 5, 30, 39, 7, 49, 16, 39, 52, 7, 5, 26, 14, 28, 11, 34, 9, 29, 38, 1, 39, 6, 50, 45, 47, 3, 3, 14, 1, 33, 165, 2, 39, 15, 177, 19, 113, 22, 160, 23, 39, 17, 80, 69, 2, 2, 5, 13, 28, 6, 77, 73, 5, 46, 25, 19, 4, 34, 562, 25, 38, 8, 76, 10, 12, 20, 7, 10, 19, 39, 12, 7, 48, 5, 14, 96, 1, 117, 23, 29, 108, 21, 40, 16, 70, 49, 17, 11, 25, 14, 29, 50, 28, 85, 22, 54, 72, 123, 79, 42, 4, 16, 1, 3, 15, 166, 8, 10, 156, 18, 5, 139]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6659999999999997, speedup = 0.2828724777988587, eval_ratio = 0.089451)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.41852678571428575,"recall":0.40104166666666663,"f1":null,"seconds":0.0001971609890460968,"exhaustive_search_seconds":0.00037942081689834595,"evaluations":525.8046875,"distances_sum":1663.6845743406097}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5906032986111109,"recall":0.5894097222222222,"f1":0.5899101307189542,"seconds":0.0005715079605579376,"exhaustive_search_seconds":0.00037942081689834595,"evaluations":705.6015625,"distances_sum":1619.3173846944246}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6753472222222218,"recall":0.6753472222222218,"f1":0.6753472222222218,"seconds":0.00038866326212882996,"exhaustive_search_seconds":0.00037942081689834595,"evaluations":841.7265625,"distances_sum":1581.4264688137275}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7569444444444439,"recall":0.7569444444444439,"f1":0.7569444444444439,"seconds":0.0004749912768602371,"exhaustive_search_seconds":0.00037942081689834595,"evaluations":987.8359375,"distances_sum":1554.0599576146415}
KCenters.DeloneInvIndex> reached performance {"precision":0.8055555555555549,"recall":0.8055555555555549,"f1":0.8055555555555549,"seconds":0.0005838964134454727,"exhaustive_search_seconds":0.00037942081689834595,"evaluations":1154.984375,"distances_sum":1538.7956626096573}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.797, speedup = 0.6571144878900997, eval_ratio = 0.111107)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
