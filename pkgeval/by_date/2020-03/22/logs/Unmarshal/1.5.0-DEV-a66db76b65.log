Julia Version 1.5.0-DEV.491
Commit a66db76b65 (2020-03-21 17:57 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed DataAPI ─── v1.1.0
  Installed Unmarshal ─ v0.3.1
  Installed Missings ── v0.4.3
  Installed Nullables ─ v1.0.0
  Installed Parsers ─── v0.3.12
  Installed JSON ────── v0.21.0
   Updating `~/.julia/environments/v1.5/Project.toml`
   cbff2730 + Unmarshal v0.3.1
   Updating `~/.julia/environments/v1.5/Manifest.toml`
   9a962f9c + DataAPI v1.1.0
   682c06a0 + JSON v0.21.0
   e1d29d7a + Missings v0.4.3
   4d1e1d77 + Nullables v1.0.0
   69de0a69 + Parsers v0.3.12
   cbff2730 + Unmarshal v0.3.1
   2a0f44e3 + Base64
   ade2ca70 + Dates
   8ba89e20 + Distributed
   b77e0a4c + InteractiveUtils
   56ddb016 + Logging
   d6f4376e + Markdown
   a63ad114 + Mmap
   de0858da + Printf
   9a3f8284 + Random
   9e88b42a + Serialization
   6462fe0b + Sockets
   8dfed614 + Test
   4ec0a83e + Unicode
    Testing Unmarshal
     Status `/tmp/jl_Nw9c9z/Project.toml`
   682c06a0 JSON v0.21.0
   e1d29d7a Missings v0.4.3
   4d1e1d77 Nullables v1.0.0
   cbff2730 Unmarshal v0.3.1
   37e2e46d LinearAlgebra
   8dfed614 Test
     Status `/tmp/jl_Nw9c9z/Manifest.toml`
   9a962f9c DataAPI v1.1.0
   682c06a0 JSON v0.21.0
   e1d29d7a Missings v0.4.3
   4d1e1d77 Nullables v1.0.0
   69de0a69 Parsers v0.3.12
   cbff2730 Unmarshal v0.3.1
   2a0f44e3 Base64
   ade2ca70 Dates
   8ba89e20 Distributed
   b77e0a4c InteractiveUtils
   8f399da3 Libdl
   37e2e46d LinearAlgebra
   56ddb016 Logging
   d6f4376e Markdown
   a63ad114 Mmap
   de0858da Printf
   9a3f8284 Random
   9e88b42a Serialization
   6462fe0b Sockets
   8dfed614 Test
   4ec0a83e Unicode
Unmarshal.unmarshal(BazNullable, JSON.parse(input2)) === BazNullable(Nullable{Float64}(), Bar(17)) = false
Vector{Float64}
Foo AbstractDict
\--> bar <: Bar 
	Bar AbstractDict
	\--> baz <: Int64 
Array{Float64, 3}
	Array{Float64, 2}
		Vector{Float64}
		Vector{Float64}
		Vector{Float64}
	Array{Float64, 2}
		Vector{Float64}
		Vector{Float64}
		Vector{Float64}
	Array{Float64, 2}
		Vector{Float64}
		Vector{Float64}
		Vector{Float64}
	Array{Float64, 2}
		Vector{Float64}
		Vector{Float64}
		Vector{Float64}
String (String)
Vector{Int64}
List
TupleTest AbstractDict
\--> a <: Tuple 
	Tuple
\--> b <: Tuple{Int64,Float64} 
	Tuple{Int64,Float64}
\--> c <: Tuple{Float64,Vararg{Int64,N} where N} 
	Tuple{Float64,Vararg{Int64,N} where N}
\--> d <: NamedTuple{(:x, :y),T} where T<:Tuple 
	NamedTuple{(:x, :y),Tuple{Any,Any}}
	\--> x 
	\--> y 
\--> e <: NamedTuple{(:x, :y),Tuple{Int64,Float64}} 
	NamedTuple{(:x, :y),Tuple{Int64,Float64}}
	\--> x 
	\--> y 
DictTest AbstractDict
\--> testDict <: Dict{Int64,String} 
	Dict{Int64,String} Dict 
	\--> 1 
		String (String)
	\--> 2 
		String (String)
dictTest2 = Dict("k" => "val") = Dict("k" => "val")
Dict{String,String} Dict 
\--> k 
	String (String)
Unmarshal.unmarshal(TestUnmarshal, j) = TestUnmarshal("", "Test", Dict("self" => "TestDict"))
    Testing Unmarshal tests passed 
