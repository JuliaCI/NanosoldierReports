Julia Version 1.5.0-DEV.451
Commit 57f72b136c (2020-03-12 17:07 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed SortingAlgorithms ──────────── v0.3.1
  Installed DataAPI ────────────────────── v1.1.0
  Installed ConditionalJuMP ────────────── v0.1.0
  Installed ReverseDiffSparse ──────────── v0.8.6
  Installed EzXML ──────────────────────── v1.1.0
  Installed Nullables ──────────────────── v1.0.0
  Installed Syslogs ────────────────────── v0.3.0
  Installed JuMP ───────────────────────── v0.18.6
  Installed MIPVerify ──────────────────── v0.2.1
  Installed Blosc ──────────────────────── v0.5.1
  Installed FastRounding ───────────────── v0.3.1
  Installed DiffResults ────────────────── v1.0.2
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed XML2_jll ───────────────────── v2.9.9+1
  Installed CodecZlib ──────────────────── v0.6.0
  Installed CRlibm ─────────────────────── v0.8.0
  Installed BinaryProvider ─────────────── v0.5.8
  Installed CommonSubexpressions ───────── v0.2.0
  Installed CategoricalArrays ──────────── v0.7.7
  Installed MathProgBase ───────────────── v0.7.8
  Installed Compat ─────────────────────── v2.2.0
  Installed BinDeps ────────────────────── v1.0.0
  Installed CompilerSupportLibraries_jll ─ v0.2.0+1
  Installed Zlib_jll ───────────────────── v1.2.11+8
  Installed NaNMath ────────────────────── v0.3.3
  Installed RecipesBase ────────────────── v0.8.0
  Installed HDF5 ───────────────────────── v0.12.5
  Installed DataStructures ─────────────── v0.17.10
  Installed DocStringExtensions ────────── v0.8.1
  Installed ForwardDiff ────────────────── v0.10.9
  Installed URIParser ──────────────────── v0.4.0
  Installed Mocking ────────────────────── v0.7.1
  Installed SetRounding ────────────────── v0.2.0
  Installed PooledArrays ───────────────── v0.5.3
  Installed CMakeWrapper ───────────────── v0.2.3
  Installed TableTraits ────────────────── v1.0.0
  Installed BufferedStreams ────────────── v1.0.0
  Installed Memento ────────────────────── v0.12.1
  Installed IntervalArithmetic ─────────── v0.16.1
  Installed InvertedIndices ────────────── v1.0.0
  Installed FilePathsBase ──────────────── v0.7.0
  Installed ExprTools ──────────────────── v0.1.0
  Installed DataValueInterfaces ────────── v1.0.0
  Installed CMake ──────────────────────── v1.2.0
  Installed Parameters ─────────────────── v0.12.0
  Installed StaticArrays ───────────────── v0.12.1
  Installed JSON ───────────────────────── v0.21.0
  Installed SpecialFunctions ───────────── v0.10.0
  Installed Tables ─────────────────────── v1.0.3
  Installed Libiconv_jll ───────────────── v1.16.0+1
  Installed Missings ───────────────────── v0.4.3
  Installed WeakRefStrings ─────────────── v0.6.2
  Installed ProgressMeter ──────────────── v1.2.0
  Installed AutoHashEquals ─────────────── v0.2.0
  Installed DataFrames ─────────────────── v0.20.2
  Installed Calculus ───────────────────── v0.5.1
  Installed Reexport ───────────────────── v0.2.0
  Installed TranscodingStreams ─────────── v0.9.5
  Installed DiffRules ──────────────────── v1.0.1
  Installed TimeZones ──────────────────── v1.0.1
  Installed OrderedCollections ─────────── v1.1.0
  Installed Parsers ────────────────────── v0.3.12
  Installed ErrorfreeArithmetic ────────── v0.5.0
  Installed IteratorInterfaceExtensions ── v1.0.0
  Installed MAT ────────────────────────── v0.7.0
  Installed CSV ────────────────────────── v0.5.26
#=#=#                                                                         ##############################                                            42.2%######################################################################## 100.0%
#=#=#                                                                                                                                                    0.6%########                                                                  11.5%######################                                                    30.9%#####################################                                     52.1%#########################################################                 79.4%######################################################################## 100.0%
#=#=#                                                                         ######################################################################## 100.0%
#=#=#                                                                         ##O#- #                                                                       ##                                                                         3.1%######                                                                     9.1%############                                                              17.3%####################                                                      28.0%##############################                                            42.5%####################################                                      51.4%#####################################################                     73.9%###################################################################       93.4%######################################################################## 100.0%
#=#=#                                                                         ##O#- #                                                                       ##O=#  #                                                                      #############################                                             40.4%######################################################                    75.6%######################################################################## 100.0%
   Updating `~/.julia/environments/v1.5/Project.toml`
   e5e5f8be + MIPVerify v0.2.1
   Updating `~/.julia/environments/v1.5/Manifest.toml`
   15f4f7f2 + AutoHashEquals v0.2.0
   9e28174c + BinDeps v1.0.0
   b99e7846 + BinaryProvider v0.5.8
   a74b3585 + Blosc v0.5.1
   e1450e63 + BufferedStreams v1.0.0
   631607c0 + CMake v1.2.0
   d5fb7624 + CMakeWrapper v0.2.3
   96374032 + CRlibm v0.8.0
   336ed68f + CSV v0.5.26
   49dc2e85 + Calculus v0.5.1
   324d7699 + CategoricalArrays v0.7.7
   944b1d66 + CodecZlib v0.6.0
   bbf7d656 + CommonSubexpressions v0.2.0
   34da2185 + Compat v2.2.0
   e66e0078 + CompilerSupportLibraries_jll v0.2.0+1
   ae04f764 + ConditionalJuMP v0.1.0
   9a962f9c + DataAPI v1.1.0
   a93c6f00 + DataFrames v0.20.2
   864edb3b + DataStructures v0.17.10
   e2d170a0 + DataValueInterfaces v1.0.0
   163ba53b + DiffResults v1.0.2
   b552c78f + DiffRules v1.0.1
   ffbed154 + DocStringExtensions v0.8.1
   90fa49ef + ErrorfreeArithmetic v0.5.0
   e2ba6199 + ExprTools v0.1.0
   8f5d6c58 + EzXML v1.1.0
   fa42c844 + FastRounding v0.3.1
   48062228 + FilePathsBase v0.7.0
   f6369f11 + ForwardDiff v0.10.9
   f67ccb44 + HDF5 v0.12.5
   d1acc4aa + IntervalArithmetic v0.16.1
   41ab1584 + InvertedIndices v1.0.0
   82899510 + IteratorInterfaceExtensions v1.0.0
   682c06a0 + JSON v0.21.0
   4076af6c + JuMP v0.18.6
   94ce4f54 + Libiconv_jll v1.16.0+1
   23992714 + MAT v0.7.0
   e5e5f8be + MIPVerify v0.2.1
   fdba3010 + MathProgBase v0.7.8
   f28f55f0 + Memento v0.12.1
   e1d29d7a + Missings v0.4.3
   78c3b35d + Mocking v0.7.1
   77ba4419 + NaNMath v0.3.3
   4d1e1d77 + Nullables v1.0.0
   efe28fd5 + OpenSpecFun_jll v0.5.3+3
   bac558e1 + OrderedCollections v1.1.0
   d96e819e + Parameters v0.12.0
   69de0a69 + Parsers v0.3.12
   2dfb63ee + PooledArrays v0.5.3
   92933f4c + ProgressMeter v1.2.0
   3cdcf5f2 + RecipesBase v0.8.0
   189a3867 + Reexport v0.2.0
   89212889 + ReverseDiffSparse v0.8.6
   3cc68bcd + SetRounding v0.2.0
   a2af1166 + SortingAlgorithms v0.3.1
   276daf66 + SpecialFunctions v0.10.0
   90137ffa + StaticArrays v0.12.1
   cea106d9 + Syslogs v0.3.0
   3783bdb8 + TableTraits v1.0.0
   bd369af6 + Tables v1.0.3
   f269a46b + TimeZones v1.0.1
   3bb67fe8 + TranscodingStreams v0.9.5
   30578b45 + URIParser v0.4.0
   ea10d353 + WeakRefStrings v0.6.2
   02c8fc9c + XML2_jll v2.9.9+1
   83775a58 + Zlib_jll v1.2.11+8
   2a0f44e3 + Base64
   ade2ca70 + Dates
   8bb1440f + DelimitedFiles
   8ba89e20 + Distributed
   9fa8497b + Future
   b77e0a4c + InteractiveUtils
   76f85450 + LibGit2
   8f399da3 + Libdl
   37e2e46d + LinearAlgebra
   56ddb016 + Logging
   d6f4376e + Markdown
   a63ad114 + Mmap
   44cfe95a + Pkg
   de0858da + Printf
   3fa0cd96 + REPL
   9a3f8284 + Random
   ea8e919c + SHA
   9e88b42a + Serialization
   1a1011a3 + SharedArrays
   6462fe0b + Sockets
   2f01184e + SparseArrays
   10745b16 + Statistics
   8dfed614 + Test
   cf7118a7 + UUIDs
   4ec0a83e + Unicode
   Building CRlibm ───→ `~/.julia/packages/CRlibm/NFCH5/deps/build.log`
   Building CodecZlib → `~/.julia/packages/CodecZlib/5t9zO/deps/build.log`
   Building CMake ────→ `~/.julia/packages/CMake/ULbyn/deps/build.log`
   Building Blosc ────→ `~/.julia/packages/Blosc/lzFr0/deps/build.log`
   Building HDF5 ─────→ `~/.julia/packages/HDF5/Zh9on/deps/build.log`
   Building TimeZones → `~/.julia/packages/TimeZones/zymSN/deps/build.log`
    Testing MIPVerify
#=#=#                                                                         ##O#- #                                                                       ##O=#  #                                                                      ###############################                                           44.0%######################################################################## 100.0%
     Status `/tmp/jl_BvejvR/Project.toml`
   15f4f7f2 AutoHashEquals v0.2.0
   336ed68f CSV v0.5.26
   9961bab8 Cbc v0.6.6
   ae04f764 ConditionalJuMP v0.1.0
   a93c6f00 DataFrames v0.20.2
   ffbed154 DocStringExtensions v0.8.1
   4076af6c JuMP v0.18.6
   23992714 MAT v0.7.0
   e5e5f8be MIPVerify v0.2.1
   fdba3010 MathProgBase v0.7.8
   f28f55f0 Memento v0.12.1
   92933f4c ProgressMeter v1.2.0
   a759f4b9 TimerOutputs v0.5.3
   ade2ca70 Dates
   8bb1440f DelimitedFiles
   9e88b42a Serialization
   10745b16 Statistics
   8dfed614 Test
     Status `/tmp/jl_BvejvR/Manifest.toml`
   15f4f7f2 AutoHashEquals v0.2.0
   6e4b80f9 BenchmarkTools v0.5.0
   9e28174c BinDeps v1.0.0
   b99e7846 BinaryProvider v0.5.8
   a74b3585 Blosc v0.5.1
   e1450e63 BufferedStreams v1.0.0
   631607c0 CMake v1.2.0
   d5fb7624 CMakeWrapper v0.2.3
   96374032 CRlibm v0.8.0
   336ed68f CSV v0.5.26
   49dc2e85 Calculus v0.5.1
   324d7699 CategoricalArrays v0.7.7
   9961bab8 Cbc v0.6.6
   523fee87 CodecBzip2 v0.6.0
   944b1d66 CodecZlib v0.6.0
   bbf7d656 CommonSubexpressions v0.2.0
   34da2185 Compat v2.2.0
   e66e0078 CompilerSupportLibraries_jll v0.2.0+1
   ae04f764 ConditionalJuMP v0.1.0
   9a962f9c DataAPI v1.1.0
   a93c6f00 DataFrames v0.20.2
   864edb3b DataStructures v0.17.10
   e2d170a0 DataValueInterfaces v1.0.0
   163ba53b DiffResults v1.0.2
   b552c78f DiffRules v1.0.1
   ffbed154 DocStringExtensions v0.8.1
   90fa49ef ErrorfreeArithmetic v0.5.0
   e2ba6199 ExprTools v0.1.0
   8f5d6c58 EzXML v1.1.0
   fa42c844 FastRounding v0.3.1
   48062228 FilePathsBase v0.7.0
   f6369f11 ForwardDiff v0.10.9
   f67ccb44 HDF5 v0.12.5
   cd3eb016 HTTP v0.8.12
   83e8ac13 IniFile v0.5.0
   d1acc4aa IntervalArithmetic v0.16.1
   41ab1584 InvertedIndices v1.0.0
   82899510 IteratorInterfaceExtensions v1.0.0
   682c06a0 JSON v0.21.0
   7d188eb4 JSONSchema v0.2.0
   4076af6c JuMP v0.18.6
   94ce4f54 Libiconv_jll v1.16.0+1
   23992714 MAT v0.7.0
   e5e5f8be MIPVerify v0.2.1
   b8f27783 MathOptInterface v0.9.12
   fdba3010 MathProgBase v0.7.8
   739be429 MbedTLS v1.0.1
   c8ffd9c3 MbedTLS_jll v2.16.0+1
   f28f55f0 Memento v0.12.1
   e1d29d7a Missings v0.4.3
   78c3b35d Mocking v0.7.1
   d8a4904e MutableArithmetics v0.2.7
   77ba4419 NaNMath v0.3.3
   4d1e1d77 Nullables v1.0.0
   efe28fd5 OpenSpecFun_jll v0.5.3+3
   bac558e1 OrderedCollections v1.1.0
   d96e819e Parameters v0.12.0
   69de0a69 Parsers v0.3.12
   2dfb63ee PooledArrays v0.5.3
   92933f4c ProgressMeter v1.2.0
   3cdcf5f2 RecipesBase v0.8.0
   189a3867 Reexport v0.2.0
   89212889 ReverseDiffSparse v0.8.6
   3cc68bcd SetRounding v0.2.0
   a2af1166 SortingAlgorithms v0.3.1
   276daf66 SpecialFunctions v0.10.0
   90137ffa StaticArrays v0.12.1
   cea106d9 Syslogs v0.3.0
   3783bdb8 TableTraits v1.0.0
   bd369af6 Tables v1.0.3
   f269a46b TimeZones v1.0.1
   a759f4b9 TimerOutputs v0.5.3
   3bb67fe8 TranscodingStreams v0.9.5
   30578b45 URIParser v0.4.0
   ea10d353 WeakRefStrings v0.6.2
   02c8fc9c XML2_jll v2.9.9+1
   83775a58 Zlib_jll v1.2.11+8
   2a0f44e3 Base64
   ade2ca70 Dates
   8bb1440f DelimitedFiles
   8ba89e20 Distributed
   9fa8497b Future
   b77e0a4c InteractiveUtils
   76f85450 LibGit2
   8f399da3 Libdl
   37e2e46d LinearAlgebra
   56ddb016 Logging
   d6f4376e Markdown
   a63ad114 Mmap
   44cfe95a Pkg
   de0858da Printf
   3fa0cd96 REPL
   9a3f8284 Random
   ea8e919c SHA
   9e88b42a Serialization
   1a1011a3 SharedArrays
   6462fe0b Sockets
   2f01184e SparseArrays
   10745b16 Statistics
   8dfed614 Test
   cf7118a7 UUIDs
   4ec0a83e Unicode
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 3, target labels are [1]
[notice | MIPVerify]: Rebuilding model from scratch. This may take some time as we determine upper and lower bounds for the input to each non-linear unit.
[info | MIPVerify]: Applying Flatten() ... 
[info | MIPVerify]: Applying Linear(32 -> 16) ... 
[info | MIPVerify]: Applying MaskedReLU with expected input size (16,). (5 zeroed, 5 as-is, 6 rectified). ... 
  Calculating upper bounds:  33%|███████▋               |  ETA: 0:00:03[K  Calculating upper bounds:  50%|███████████▌           |  ETA: 0:00:02[K  Calculating upper bounds: 100%|███████████████████████| Time: 0:00:01[K
  Calculating lower bounds:  17%|███▉                   |  ETA: 0:00:01[K  Calculating lower bounds:  83%|███████████████████▏   |  ETA: 0:00:00[K  Calculating lower bounds: 100%|███████████████████████| Time: 0:00:00[K
[info | MIPVerify]:   Behavior of ReLUs - split: 6, zero_output: 0, linear_in_input: 0, constant_output: 0
  Imposing relu constraint:  17%|███▉                   |  ETA: 0:00:02[K  Imposing relu constraint: 100%|███████████████████████| Time: 0:00:00[K
[info | MIPVerify]: Applying Linear(16 -> 8) ... 
[info | MIPVerify]: Applying MaskedReLU with expected input size (8,). (3 zeroed, 3 as-is, 2 rectified). ... 
[info | MIPVerify]:   Behavior of ReLUs - split: 2, zero_output: 0, linear_in_input: 0, constant_output: 0
[info | MIPVerify]: Applying Linear(8 -> 4) ... 
[notice | MIPVerify]: The model built will be cached and re-used for future solves, unless you explicitly set rebuild=true.
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 3, target labels are [2]
[notice | MIPVerify]: Loading model from cache.
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 3, target labels are [3]
[notice | MIPVerify]: Loading model from cache.
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 3, target labels are [1]
[notice | MIPVerify]: Rebuilding model from scratch. This may take some time as we determine upper and lower bounds for the input to each non-linear unit.
[info | MIPVerify]: Applying Flatten() ... 
[info | MIPVerify]: Applying Linear(32 -> 16) ... 
[info | MIPVerify]: Applying MaskedReLU with expected input size (16,). (5 zeroed, 5 as-is, 6 rectified). ... 
[info | MIPVerify]:   Behavior of ReLUs - split: 3, zero_output: 2, linear_in_input: 1, constant_output: 0
[info | MIPVerify]: Applying Linear(16 -> 8) ... 
[info | MIPVerify]: Applying MaskedReLU with expected input size (8,). (3 zeroed, 3 as-is, 2 rectified). ... 
[info | MIPVerify]:   Behavior of ReLUs - split: 1, zero_output: 0, linear_in_input: 1, constant_output: 0
[info | MIPVerify]: Applying Linear(8 -> 4) ... 
[notice | MIPVerify]: The model built will be cached and re-used for future solves, unless you explicitly set rebuild=true.
┌ Warning: Not solved to optimality, status: Infeasible
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:212
┌ Warning: Infeasibility ray (Farkas proof) not available
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:223
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 3, target labels are [1]
[notice | MIPVerify]: Rebuilding model from scratch. This may take some time as we determine upper and lower bounds for the input to each non-linear unit.
[info | MIPVerify]: Applying Flatten() ... 
[info | MIPVerify]: Applying Linear(32 -> 16) ... 
[info | MIPVerify]: Applying MaskedReLU with expected input size (16,). (5 zeroed, 5 as-is, 6 rectified). ... 
[info | MIPVerify]:   Behavior of ReLUs - split: 4, zero_output: 2, linear_in_input: 0, constant_output: 0
[info | MIPVerify]: Applying Linear(16 -> 8) ... 
[info | MIPVerify]: Applying MaskedReLU with expected input size (8,). (3 zeroed, 3 as-is, 2 rectified). ... 
[info | MIPVerify]:   Behavior of ReLUs - split: 1, zero_output: 0, linear_in_input: 1, constant_output: 0
[info | MIPVerify]: Applying Linear(8 -> 4) ... 
[notice | MIPVerify]: The model built will be cached and re-used for future solves, unless you explicitly set rebuild=true.
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [2]
[notice | MIPVerify]: Rebuilding model from scratch. This may take some time as we determine upper and lower bounds for the input to each non-linear unit.
[info | MIPVerify]: Applying Conv2d(1, 1, kernel_size=(5, 5), stride=(1, 1), padding=same) ... 
[info | MIPVerify]: Applying Conv2d(1, 2, kernel_size=(2, 2), stride=(1, 1), padding=same) ... 
[info | MIPVerify]: Specifying max pooling with a 2x2 filter and a stride of (2, 2) ... 
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
  Calculating upper bounds:  22%|█████▏                 |  ETA: 0:00:00[K[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
  Calculating upper bounds:  94%|█████████████████████▊ |  ETA: 0:00:00[K  Calculating upper bounds: 100%|███████████████████████| Time: 0:00:00[K
  Calculating lower bounds:   6%|█▎                     |  ETA: 0:00:03[K  Calculating lower bounds:  78%|█████████████████▉     |  ETA: 0:00:00[K  Calculating lower bounds: 100%|███████████████████████| Time: 0:00:00[K
[info | MIPVerify]:   Behavior of ReLUs - split: 4, zero_output: 0, linear_in_input: 14, constant_output: 0
  Imposing relu constraint:   6%|█▎                     |  ETA: 0:00:03[K  Imposing relu constraint: 100%|███████████████████████| Time: 0:00:00[K
[info | MIPVerify]: Applying Flatten() ... 
[info | MIPVerify]: Applying Linear(18 -> 4) ... 
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]:   Behavior of ReLUs - split: 4, zero_output: 0, linear_in_input: 0, constant_output: 0
[info | MIPVerify]: Applying Linear(4 -> 3) ... 
[notice | MIPVerify]: The model built will be cached and re-used for future solves, unless you explicitly set rebuild=true.
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [3]
[notice | MIPVerify]: Loading model from cache.
┌ Warning: Not solved to optimality, status: Infeasible
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:212
┌ Warning: Infeasibility ray (Farkas proof) not available
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:223
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [1]
[notice | MIPVerify]: Rebuilding model from scratch. This may take some time as we determine upper and lower bounds for the input to each non-linear unit.
[info | MIPVerify]: Applying Conv2d(1, 2, kernel_size=(2, 2), stride=(1, 1), padding=same) ... 
[info | MIPVerify]: Specifying max pooling with a 2x2 filter and a stride of (2, 2) ... 
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]:   Behavior of ReLUs - split: 4, zero_output: 0, linear_in_input: 14, constant_output: 0
[info | MIPVerify]: Applying Flatten() ... 
[info | MIPVerify]: Applying Linear(18 -> 4) ... 
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]:   Behavior of ReLUs - split: 4, zero_output: 0, linear_in_input: 0, constant_output: 0
[info | MIPVerify]: Applying Linear(4 -> 3) ... 
[notice | MIPVerify]: The model built will be cached and re-used for future solves, unless you explicitly set rebuild=true.
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [2]
[notice | MIPVerify]: Loading model from cache.
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [1]
[notice | MIPVerify]: Loading model from cache.
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [2]
[notice | MIPVerify]: Loading model from cache.
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [3]
[notice | MIPVerify]: Loading model from cache.
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [2]
[notice | MIPVerify]: Loading model from cache.
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [2, 3]
[notice | MIPVerify]: Loading model from cache.
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [2]
[notice | MIPVerify]: Rebuilding model from scratch. This may take some time as we determine upper and lower bounds for the input to each non-linear unit.
[info | MIPVerify]: Applying Conv2d(1, 2, kernel_size=(2, 2), stride=(1, 1), padding=same) ... 
[info | MIPVerify]: Specifying max pooling with a 2x2 filter and a stride of (2, 2) ... 
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 3
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 3
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 1
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 3
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 1
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 1
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 1
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 1
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 1
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 1
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 3
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]:   Behavior of ReLUs - split: 0, zero_output: 0, linear_in_input: 18, constant_output: 0
[info | MIPVerify]: Applying Flatten() ... 
[info | MIPVerify]: Applying Linear(18 -> 4) ... 
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]:   Behavior of ReLUs - split: 0, zero_output: 2, linear_in_input: 2, constant_output: 0
[info | MIPVerify]: Applying Linear(4 -> 3) ... 
[notice | MIPVerify]: The model built will be cached and re-used for future solves, unless you explicitly set rebuild=true.
┌ Warning: Not solved to optimality, status: Infeasible
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:212
┌ Warning: Infeasibility ray (Farkas proof) not available
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:223
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 1, target labels are [2]
[notice | MIPVerify]: Rebuilding model from scratch. This may take some time as we determine upper and lower bounds for the input to each non-linear unit.
[info | MIPVerify]: Applying Conv2d(1, 2, kernel_size=(2, 2), stride=(1, 1), padding=same) ... 
[info | MIPVerify]: Specifying max pooling with a 2x2 filter and a stride of (2, 2) ... 
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 3
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 3
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 1
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 3
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 4
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 1
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 1
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 1
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 1
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 1
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 3
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]: Tightening via interval_arithmetic gives a better result than lp; using best bound found.
[info | MIPVerify]:   Behavior of ReLUs - split: 0, zero_output: 0, linear_in_input: 18, constant_output: 0
[info | MIPVerify]: Applying Flatten() ... 
[info | MIPVerify]: Applying Linear(18 -> 4) ... 
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]:   Behavior of ReLUs - split: 0, zero_output: 2, linear_in_input: 2, constant_output: 0
[info | MIPVerify]: Applying Linear(4 -> 3) ... 
[notice | MIPVerify]: The model built will be cached and re-used for future solves, unless you explicitly set rebuild=true.
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]:   Behavior of ReLUs - split: 1, zero_output: 0, linear_in_input: 0, constant_output: 0
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
┌ Warning: Not solved to optimality, status: Infeasible
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:212
┌ Warning: Infeasibility ray (Farkas proof) not available
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:223
┌ Warning: Not solved to optimality, status: Infeasible
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:212
┌ Warning: Infeasibility ray (Farkas proof) not available
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:223
[info | MIPVerify]: Applying Linear(2 -> 2) ... 
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]:   Behavior of ReLUs - split: 2, zero_output: 0, linear_in_input: 0, constant_output: 0
[info | MIPVerify]: Applying Linear(2 -> 2) ... 
[info | MIPVerify]: Applying Linear(2 -> 2) ... 
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]:   Behavior of ReLUs - split: 2, zero_output: 0, linear_in_input: 0, constant_output: 0
[info | MIPVerify]: Applying Linear(2 -> 2) ... 
[info | MIPVerify]: Applying Linear(2 -> 2) ... 
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]:   Behavior of ReLUs - split: 2, zero_output: 0, linear_in_input: 0, constant_output: 0
[info | MIPVerify]: Applying Linear(2 -> 2) ... 
[info | MIPVerify]: Applying Conv2d(2, 1, kernel_size=(3, 3), stride=(1, 1), padding=same) ... 
[info | MIPVerify]: Applying Conv2d(2, 1, kernel_size=(3, 3), stride=(1, 1), padding=same) ... 
[info | MIPVerify]: Applying Conv2d(2, 1, kernel_size=(3, 3), stride=(2, 2), padding=same) ... 
[info | MIPVerify]: Applying Conv2d(2, 1, kernel_size=(3, 3), stride=(2, 2), padding=same) ... 
[info | MIPVerify]: Applying Conv2d(2, 1, kernel_size=(4, 4), stride=(2, 2), padding=same) ... 
[info | MIPVerify]: Applying Conv2d(2, 1, kernel_size=(4, 4), stride=(2, 2), padding=same) ... 
[info | MIPVerify]: Applying Linear(2 -> 2) ... 
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
Computing fraction correct... 39%|████████▌             |  ETA: 0:00:02[KComputing fraction correct... 98%|█████████████████████▌|  ETA: 0:00:00[KComputing fraction correct...100%|██████████████████████| Time: 0:00:02[K
Computing fraction correct...  0%|                      |  ETA: 0:10:24[KComputing fraction correct...  1%|▏                     |  ETA: 0:03:54[KComputing fraction correct...  2%|▍                     |  ETA: 0:03:17[KComputing fraction correct...  2%|▌                     |  ETA: 0:02:59[KComputing fraction correct...  3%|▋                     |  ETA: 0:02:50[KComputing fraction correct...  4%|▊                     |  ETA: 0:02:45[KComputing fraction correct...  4%|▉                     |  ETA: 0:02:42[KComputing fraction correct...  5%|█                     |  ETA: 0:02:39[KComputing fraction correct...  6%|█▎                    |  ETA: 0:02:35[KComputing fraction correct...  6%|█▍                    |  ETA: 0:02:33[KComputing fraction correct...  7%|█▌                    |  ETA: 0:02:30[KComputing fraction correct...  8%|█▋                    |  ETA: 0:02:27[KComputing fraction correct...  8%|█▉                    |  ETA: 0:02:25[KComputing fraction correct...  9%|██                    |  ETA: 0:02:23[KComputing fraction correct... 10%|██▏                   |  ETA: 0:02:24[KComputing fraction correct... 10%|██▎                   |  ETA: 0:02:22[KComputing fraction correct... 11%|██▍                   |  ETA: 0:02:21[KComputing fraction correct... 12%|██▌                   |  ETA: 0:02:19[KComputing fraction correct... 12%|██▋                   |  ETA: 0:02:18[KComputing fraction correct... 13%|██▉                   |  ETA: 0:02:16[KComputing fraction correct... 14%|███                   |  ETA: 0:02:14[KComputing fraction correct... 14%|███▏                  |  ETA: 0:02:13[KComputing fraction correct... 15%|███▎                  |  ETA: 0:02:12[KComputing fraction correct... 16%|███▍                  |  ETA: 0:02:12[KComputing fraction correct... 16%|███▌                  |  ETA: 0:02:11[KComputing fraction correct... 17%|███▊                  |  ETA: 0:02:06[KComputing fraction correct... 18%|████                  |  ETA: 0:02:02[KComputing fraction correct... 19%|████▎                 |  ETA: 0:01:58[KComputing fraction correct... 20%|████▌                 |  ETA: 0:01:55[KComputing fraction correct... 21%|████▊                 |  ETA: 0:01:52[KComputing fraction correct... 22%|████▉                 |  ETA: 0:01:48[KComputing fraction correct... 23%|█████▏                |  ETA: 0:01:45[KComputing fraction correct... 25%|█████▍                |  ETA: 0:01:43[KComputing fraction correct... 25%|█████▋                |  ETA: 0:01:41[KComputing fraction correct... 26%|█████▊                |  ETA: 0:01:40[KComputing fraction correct... 27%|█████▉                |  ETA: 0:01:40[KComputing fraction correct... 27%|██████                |  ETA: 0:01:40[KComputing fraction correct... 28%|██████▏               |  ETA: 0:01:38[KComputing fraction correct... 29%|██████▍               |  ETA: 0:01:37[KComputing fraction correct... 29%|██████▌               |  ETA: 0:01:37[KComputing fraction correct... 30%|██████▋               |  ETA: 0:01:37[KComputing fraction correct... 30%|██████▊               |  ETA: 0:01:37[KComputing fraction correct... 31%|██████▊               |  ETA: 0:01:37[KComputing fraction correct... 31%|██████▉               |  ETA: 0:01:37[KComputing fraction correct... 32%|███████               |  ETA: 0:01:37[KComputing fraction correct... 33%|███████▏              |  ETA: 0:01:36[KComputing fraction correct... 33%|███████▎              |  ETA: 0:01:37[KComputing fraction correct... 34%|███████▍              |  ETA: 0:01:36[KComputing fraction correct... 34%|███████▌              |  ETA: 0:01:36[KComputing fraction correct... 35%|███████▋              |  ETA: 0:01:36[KComputing fraction correct... 35%|███████▊              |  ETA: 0:01:34[KComputing fraction correct... 36%|███████▉              |  ETA: 0:01:33[KComputing fraction correct... 37%|████████▏             |  ETA: 0:01:32[KComputing fraction correct... 37%|████████▎             |  ETA: 0:01:31[KComputing fraction correct... 38%|████████▍             |  ETA: 0:01:30[KComputing fraction correct... 39%|████████▌             |  ETA: 0:01:29[KComputing fraction correct... 39%|████████▋             |  ETA: 0:01:28[KComputing fraction correct... 40%|████████▉             |  ETA: 0:01:27[KComputing fraction correct... 41%|█████████             |  ETA: 0:01:27[KComputing fraction correct... 41%|█████████▏            |  ETA: 0:01:26[KComputing fraction correct... 42%|█████████▎            |  ETA: 0:01:26[KComputing fraction correct... 43%|█████████▍            |  ETA: 0:01:24[KComputing fraction correct... 43%|█████████▌            |  ETA: 0:01:24[KComputing fraction correct... 44%|█████████▋            |  ETA: 0:01:22[KComputing fraction correct... 45%|█████████▉            |  ETA: 0:01:21[KComputing fraction correct... 45%|█████████▉            |  ETA: 0:01:21[KComputing fraction correct... 46%|██████████            |  ETA: 0:01:20[KComputing fraction correct... 46%|██████████▎           |  ETA: 0:01:20[KComputing fraction correct... 47%|██████████▍           |  ETA: 0:01:19[KComputing fraction correct... 48%|██████████▌           |  ETA: 0:01:18[KComputing fraction correct... 48%|██████████▋           |  ETA: 0:01:17[KComputing fraction correct... 49%|██████████▊           |  ETA: 0:01:16[KComputing fraction correct... 50%|███████████           |  ETA: 0:01:15[KComputing fraction correct... 50%|███████████▏          |  ETA: 0:01:14[KComputing fraction correct... 51%|███████████▎          |  ETA: 0:01:13[KComputing fraction correct... 52%|███████████▍          |  ETA: 0:01:12[KComputing fraction correct... 52%|███████████▌          |  ETA: 0:01:11[KComputing fraction correct... 53%|███████████▋          |  ETA: 0:01:10[KComputing fraction correct... 54%|███████████▉          |  ETA: 0:01:09[KComputing fraction correct... 54%|████████████          |  ETA: 0:01:08[KComputing fraction correct... 55%|████████████▏         |  ETA: 0:01:06[KComputing fraction correct... 56%|████████████▎         |  ETA: 0:01:05[KComputing fraction correct... 57%|████████████▌         |  ETA: 0:01:04[KComputing fraction correct... 57%|████████████▋         |  ETA: 0:01:03[KComputing fraction correct... 58%|████████████▊         |  ETA: 0:01:02[KComputing fraction correct... 59%|████████████▉         |  ETA: 0:01:01[KComputing fraction correct... 60%|█████████████▏        |  ETA: 0:01:00[KComputing fraction correct... 60%|█████████████▎        |  ETA: 0:00:58[KComputing fraction correct... 61%|█████████████▍        |  ETA: 0:00:57[KComputing fraction correct... 62%|█████████████▋        |  ETA: 0:00:56[KComputing fraction correct... 62%|█████████████▊        |  ETA: 0:00:55[KComputing fraction correct... 63%|█████████████▉        |  ETA: 0:00:54[KComputing fraction correct... 64%|██████████████        |  ETA: 0:00:53[KComputing fraction correct... 64%|██████████████▏       |  ETA: 0:00:52[KComputing fraction correct... 65%|██████████████▍       |  ETA: 0:00:51[KComputing fraction correct... 66%|██████████████▌       |  ETA: 0:00:50[KComputing fraction correct... 67%|██████████████▋       |  ETA: 0:00:49[KComputing fraction correct... 67%|██████████████▊       |  ETA: 0:00:48[KComputing fraction correct... 68%|███████████████       |  ETA: 0:00:47[KComputing fraction correct... 69%|███████████████▏      |  ETA: 0:00:46[KComputing fraction correct... 69%|███████████████▎      |  ETA: 0:00:45[KComputing fraction correct... 70%|███████████████▍      |  ETA: 0:00:44[KComputing fraction correct... 71%|███████████████▋      |  ETA: 0:00:43[KComputing fraction correct... 72%|███████████████▊      |  ETA: 0:00:42[KComputing fraction correct... 72%|███████████████▉      |  ETA: 0:00:41[KComputing fraction correct... 73%|████████████████      |  ETA: 0:00:40[KComputing fraction correct... 74%|████████████████▎     |  ETA: 0:00:39[KComputing fraction correct... 74%|████████████████▎     |  ETA: 0:00:38[KComputing fraction correct... 75%|████████████████▍     |  ETA: 0:00:37[KComputing fraction correct... 76%|████████████████▋     |  ETA: 0:00:36[KComputing fraction correct... 76%|████████████████▉     |  ETA: 0:00:35[KComputing fraction correct... 77%|█████████████████     |  ETA: 0:00:34[KComputing fraction correct... 78%|█████████████████▏    |  ETA: 0:00:33[KComputing fraction correct... 78%|█████████████████▎    |  ETA: 0:00:32[KComputing fraction correct... 79%|█████████████████▍    |  ETA: 0:00:31[KComputing fraction correct... 80%|█████████████████▌    |  ETA: 0:00:30[KComputing fraction correct... 80%|█████████████████▋    |  ETA: 0:00:29[KComputing fraction correct... 81%|█████████████████▊    |  ETA: 0:00:28[KComputing fraction correct... 81%|█████████████████▉    |  ETA: 0:00:27[KComputing fraction correct... 82%|██████████████████    |  ETA: 0:00:27[KComputing fraction correct... 82%|██████████████████▏   |  ETA: 0:00:26[KComputing fraction correct... 83%|██████████████████▎   |  ETA: 0:00:25[KComputing fraction correct... 84%|██████████████████▍   |  ETA: 0:00:24[KComputing fraction correct... 84%|██████████████████▌   |  ETA: 0:00:23[KComputing fraction correct... 85%|██████████████████▊   |  ETA: 0:00:22[KComputing fraction correct... 86%|██████████████████▉   |  ETA: 0:00:21[KComputing fraction correct... 86%|███████████████████   |  ETA: 0:00:20[KComputing fraction correct... 87%|███████████████████▏  |  ETA: 0:00:19[KComputing fraction correct... 88%|███████████████████▎  |  ETA: 0:00:18[KComputing fraction correct... 88%|███████████████████▍  |  ETA: 0:00:17[KComputing fraction correct... 89%|███████████████████▌  |  ETA: 0:00:17[KComputing fraction correct... 89%|███████████████████▊  |  ETA: 0:00:16[KComputing fraction correct... 90%|███████████████████▊  |  ETA: 0:00:15[KComputing fraction correct... 91%|████████████████████  |  ETA: 0:00:14[KComputing fraction correct... 91%|████████████████████▏ |  ETA: 0:00:13[KComputing fraction correct... 92%|████████████████████▎ |  ETA: 0:00:12[KComputing fraction correct... 93%|████████████████████▍ |  ETA: 0:00:11[KComputing fraction correct... 93%|████████████████████▌ |  ETA: 0:00:10[KComputing fraction correct... 94%|████████████████████▋ |  ETA: 0:00:09[KComputing fraction correct... 95%|████████████████████▊ |  ETA: 0:00:08[KComputing fraction correct... 95%|████████████████████▉ |  ETA: 0:00:07[KComputing fraction correct... 96%|█████████████████████ |  ETA: 0:00:07[KComputing fraction correct... 96%|█████████████████████▏|  ETA: 0:00:06[KComputing fraction correct... 97%|█████████████████████▎|  ETA: 0:00:05[KComputing fraction correct... 97%|█████████████████████▍|  ETA: 0:00:04[KComputing fraction correct... 98%|█████████████████████▋|  ETA: 0:00:03[KComputing fraction correct... 99%|█████████████████████▊|  ETA: 0:00:02[KComputing fraction correct... 99%|█████████████████████▉|  ETA: 0:00:01[KComputing fraction correct...100%|██████████████████████| Time: 0:02:30[K
Computing fraction correct...  6%|█▎                    |  ETA: 0:00:16[KComputing fraction correct... 11%|██▍                   |  ETA: 0:00:17[KComputing fraction correct... 17%|███▊                  |  ETA: 0:00:15[KComputing fraction correct... 24%|█████▎                |  ETA: 0:00:13[KComputing fraction correct... 31%|██████▉               |  ETA: 0:00:11[KComputing fraction correct... 38%|████████▍             |  ETA: 0:00:10[KComputing fraction correct... 45%|██████████            |  ETA: 0:00:08[KComputing fraction correct... 53%|███████████▌          |  ETA: 0:00:07[KComputing fraction correct... 60%|█████████████▏        |  ETA: 0:00:06[KComputing fraction correct... 67%|██████████████▊       |  ETA: 0:00:05[KComputing fraction correct... 74%|████████████████▎     |  ETA: 0:00:04[KComputing fraction correct... 81%|█████████████████▊    |  ETA: 0:00:03[KComputing fraction correct... 87%|███████████████████▏  |  ETA: 0:00:02[KComputing fraction correct... 93%|████████████████████▍ |  ETA: 0:00:01[KComputing fraction correct... 98%|█████████████████████▌|  ETA: 0:00:00[KComputing fraction correct...100%|██████████████████████| Time: 0:00:15[K
[info | MIPVerify]: Working on index 1
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 8, target labels are [1, 2, 3, 4, 5, 6, 7, 9, 10]
[notice | MIPVerify]: Rebuilding model from scratch. This may take some time as we determine upper and lower bounds for the input to each non-linear unit.
[info | MIPVerify]: Applying Conv2d(1, 16, kernel_size=(4, 4), stride=(2, 2), padding=same) ... 
[info | MIPVerify]: Applying ReLU() ...
  Calculating lower bounds:   0%|                       |  ETA: 0:03:52[K  Calculating lower bounds: 100%|███████████████████████| Time: 0:00:00[K
[info | MIPVerify]:   Behavior of ReLUs - split: 37, zero_output: 2249, linear_in_input: 850, constant_output: 0
[info | MIPVerify]: Applying Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=same) ... 
[info | MIPVerify]: Applying ReLU() ...
  Calculating upper bounds:   2%|▍                      |  ETA: 0:00:06[K  Calculating upper bounds:   4%|▉                      |  ETA: 0:00:06[K  Calculating upper bounds:   5%|█▏                     |  ETA: 0:00:06[K  Calculating upper bounds:   7%|█▋                     |  ETA: 0:00:06[K  Calculating upper bounds:   8%|█▉                     |  ETA: 0:00:06[K  Calculating upper bounds:  10%|██▍                    |  ETA: 0:00:05[K  Calculating upper bounds:  11%|██▋                    |  ETA: 0:00:06[K  Calculating upper bounds:  14%|███▎                   |  ETA: 0:00:05[K  Calculating upper bounds:  16%|███▊                   |  ETA: 0:00:05[K  Calculating upper bounds:  18%|████▏                  |  ETA: 0:00:05[K  Calculating upper bounds:  19%|████▌                  |  ETA: 0:00:05[K  Calculating upper bounds:  20%|████▋                  |  ETA: 0:00:05[K  Calculating upper bounds:  21%|████▉                  |  ETA: 0:00:05[K  Calculating upper bounds:  22%|█████                  |  ETA: 0:00:05[K  Calculating upper bounds:  23%|█████▎                 |  ETA: 0:00:05[K  Calculating upper bounds:  23%|█████▍                 |  ETA: 0:00:06[K  Calculating upper bounds:  24%|█████▋                 |  ETA: 0:00:06[K  Calculating upper bounds:  25%|█████▊                 |  ETA: 0:00:06[K  Calculating upper bounds:  26%|██████                 |  ETA: 0:00:06[K  Calculating upper bounds:  27%|██████▏                |  ETA: 0:00:06[K  Calculating upper bounds:  27%|██████▍                |  ETA: 0:00:06[K  Calculating upper bounds:  28%|██████▌                |  ETA: 0:00:06[K  Calculating upper bounds:  29%|██████▊                |  ETA: 0:00:06[K  Calculating upper bounds:  30%|███████                |  ETA: 0:00:06[K  Calculating upper bounds:  33%|███████▌               |  ETA: 0:00:05[K  Calculating upper bounds:  39%|█████████              |  ETA: 0:00:04[K  Calculating upper bounds:  41%|█████████▍             |  ETA: 0:00:04[K  Calculating upper bounds:  43%|█████████▊             |  ETA: 0:00:04[K  Calculating upper bounds:  45%|██████████▍            |  ETA: 0:00:04[K  Calculating upper bounds:  46%|██████████▋            |  ETA: 0:00:04[K  Calculating upper bounds:  48%|██████████▉            |  ETA: 0:00:04[K  Calculating upper bounds:  48%|███████████▏           |  ETA: 0:00:04[K  Calculating upper bounds:  49%|███████████▍           |  ETA: 0:00:04[K  Calculating upper bounds:  50%|███████████▌           |  ETA: 0:00:04[K  Calculating upper bounds:  52%|████████████           |  ETA: 0:00:03[K  Calculating upper bounds:  54%|████████████▌          |  ETA: 0:00:03[K  Calculating upper bounds:  56%|████████████▉          |  ETA: 0:00:03[K  Calculating upper bounds:  61%|██████████████▏        |  ETA: 0:00:03[K  Calculating upper bounds:  63%|██████████████▌        |  ETA: 0:00:02[K  Calculating upper bounds:  64%|██████████████▊        |  ETA: 0:00:02[K  Calculating upper bounds:  66%|███████████████▎       |  ETA: 0:00:02[K  Calculating upper bounds:  67%|███████████████▍       |  ETA: 0:00:02[K  Calculating upper bounds:  68%|███████████████▋       |  ETA: 0:00:02[K  Calculating upper bounds:  69%|███████████████▊       |  ETA: 0:00:02[K  Calculating upper bounds:  69%|████████████████       |  ETA: 0:00:02[K  Calculating upper bounds:  70%|████████████████▎      |  ETA: 0:00:02[K  Calculating upper bounds:  71%|████████████████▌      |  ETA: 0:00:02[K  Calculating upper bounds:  73%|████████████████▊      |  ETA: 0:00:02[K  Calculating upper bounds:  74%|████████████████▉      |  ETA: 0:00:02[K  Calculating upper bounds:  74%|█████████████████▏     |  ETA: 0:00:02[K  Calculating upper bounds:  76%|█████████████████▌     |  ETA: 0:00:02[K  Calculating upper bounds:  77%|█████████████████▊     |  ETA: 0:00:02[K  Calculating upper bounds:  79%|██████████████████▎    |  ETA: 0:00:01[K  Calculating upper bounds:  81%|██████████████████▌    |  ETA: 0:00:01[K  Calculating upper bounds:  83%|███████████████████    |  ETA: 0:00:01[K  Calculating upper bounds:  84%|███████████████████▎   |  ETA: 0:00:01[K  Calculating upper bounds:  85%|███████████████████▌   |  ETA: 0:00:01[K  Calculating upper bounds:  85%|███████████████████▋   |  ETA: 0:00:01[K  Calculating upper bounds:  86%|███████████████████▊   |  ETA: 0:00:01[K  Calculating upper bounds:  87%|████████████████████   |  ETA: 0:00:01[K  Calculating upper bounds:  88%|████████████████████▎  |  ETA: 0:00:01[K  Calculating upper bounds:  89%|████████████████████▍  |  ETA: 0:00:01[K  Calculating upper bounds:  90%|████████████████████▋  |  ETA: 0:00:01[K  Calculating upper bounds:  91%|█████████████████████  |  ETA: 0:00:01[K  Calculating upper bounds:  92%|█████████████████████▎ |  ETA: 0:00:01[K  Calculating upper bounds:  93%|█████████████████████▍ |  ETA: 0:00:01[K  Calculating upper bounds:  94%|█████████████████████▋ |  ETA: 0:00:00[K  Calculating upper bounds:  95%|█████████████████████▉ |  ETA: 0:00:00[K  Calculating upper bounds:  96%|██████████████████████ |  ETA: 0:00:00[K  Calculating upper bounds:  96%|██████████████████████▏|  ETA: 0:00:00[K  Calculating upper bounds:  98%|██████████████████████▌|  ETA: 0:00:00[K  Calculating upper bounds:  98%|██████████████████████▋|  ETA: 0:00:00[K  Calculating upper bounds:  99%|██████████████████████▊|  ETA: 0:00:00[K  Calculating upper bounds: 100%|███████████████████████| Time: 0:00:07[K
  Calculating lower bounds:   5%|█▎                     |  ETA: 0:00:02[K  Calculating lower bounds:  16%|███▊                   |  ETA: 0:00:01[K  Calculating lower bounds:  29%|██████▋                |  ETA: 0:00:01[K  Calculating lower bounds:  52%|███████████▉           |  ETA: 0:00:00[K  Calculating lower bounds:  64%|██████████████▋        |  ETA: 0:00:00[K  Calculating lower bounds:  72%|████████████████▌      |  ETA: 0:00:00[K  Calculating lower bounds:  87%|███████████████████▉   |  ETA: 0:00:00[K  Calculating lower bounds: 100%|███████████████████████|  ETA: 0:00:00[K  Calculating lower bounds: 100%|███████████████████████| Time: 0:00:00[K
[info | MIPVerify]:   Behavior of ReLUs - split: 77, zero_output: 846, linear_in_input: 645, constant_output: 0
[info | MIPVerify]: Applying Flatten() ... 
[info | MIPVerify]: Applying Linear(1568 -> 100) ... 
[info | MIPVerify]: Applying ReLU() ...
  Calculating upper bounds:  10%|██▎                    |  ETA: 0:00:01[K  Calculating upper bounds:  43%|█████████▉             |  ETA: 0:00:00[K  Calculating upper bounds:  98%|██████████████████████▌|  ETA: 0:00:00[K  Calculating upper bounds: 100%|███████████████████████| Time: 0:00:00[K
[info | MIPVerify]:   Behavior of ReLUs - split: 1, zero_output: 91, linear_in_input: 8, constant_output: 0
[info | MIPVerify]: Applying Linear(100 -> 10) ... 
  Calculating upper bounds:  56%|████████████▊          |  ETA: 0:00:00[K  Calculating upper bounds: 100%|███████████████████████| Time: 0:00:00[K
  Calculating lower bounds:  56%|████████████▊          |  ETA: 0:00:00[K  Calculating lower bounds: 100%|███████████████████████| Time: 0:00:00[K
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
┌ Warning: Not solved to optimality, status: Infeasible
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:212
┌ Warning: Infeasibility ray (Farkas proof) not available
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:223
[info | MIPVerify]: Working on index 9
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 6, target labels are [1, 2, 3, 4, 5, 7, 8, 9, 10]
[notice | MIPVerify]: Rebuilding model from scratch. This may take some time as we determine upper and lower bounds for the input to each non-linear unit.
[info | MIPVerify]: Applying Conv2d(1, 16, kernel_size=(4, 4), stride=(2, 2), padding=same) ... 
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]:   Behavior of ReLUs - split: 48, zero_output: 2200, linear_in_input: 888, constant_output: 0
[info | MIPVerify]: Applying Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=same) ... 
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]:   Behavior of ReLUs - split: 94, zero_output: 799, linear_in_input: 675, constant_output: 0
[info | MIPVerify]: Applying Flatten() ... 
[info | MIPVerify]: Applying Linear(1568 -> 100) ... 
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]:   Behavior of ReLUs - split: 0, zero_output: 91, linear_in_input: 9, constant_output: 0
[info | MIPVerify]: Applying Linear(100 -> 10) ... 
[info | MIPVerify]: Number of inputs to maximum function possibly taking maximum value: 2
[info | MIPVerify]: Working on index 248
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 7, target labels are [1, 2, 3, 4, 6, 7, 8, 9, 10]
[info | MIPVerify]: Working on index 1, with true_label 8 and target_label 1
[notice | MIPVerify]: Attempting to find adversarial example. Neural net predicted label is 8, target labels are [1]
[notice | MIPVerify]: Rebuilding model from scratch. This may take some time as we determine upper and lower bounds for the input to each non-linear unit.
[info | MIPVerify]: Applying Conv2d(1, 16, kernel_size=(4, 4), stride=(2, 2), padding=same) ... 
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]:   Behavior of ReLUs - split: 37, zero_output: 2249, linear_in_input: 850, constant_output: 0
[info | MIPVerify]: Applying Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=same) ... 
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]:   Behavior of ReLUs - split: 91, zero_output: 839, linear_in_input: 638, constant_output: 0
[info | MIPVerify]: Applying Flatten() ... 
[info | MIPVerify]: Applying Linear(1568 -> 100) ... 
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]:   Behavior of ReLUs - split: 3, zero_output: 91, linear_in_input: 6, constant_output: 0
[info | MIPVerify]: Applying Linear(100 -> 10) ... 
┌ Warning: Not solved to optimality, status: Infeasible
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:212
┌ Warning: Infeasibility ray (Farkas proof) not available
└ @ JuMP ~/.julia/packages/JuMP/I7whV/src/solvers.jl:223
[info | MIPVerify]: Working on index 1
[info | MIPVerify]: Applying Conv2d(1, 16, kernel_size=(4, 4), stride=(2, 2), padding=same) ... 
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]:   Behavior of ReLUs - split: 37, zero_output: 2249, linear_in_input: 850, constant_output: 0
[info | MIPVerify]: Applying Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=same) ... 
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]:   Behavior of ReLUs - split: 91, zero_output: 839, linear_in_input: 638, constant_output: 0
[info | MIPVerify]: Applying Flatten() ... 
[info | MIPVerify]: Applying Linear(1568 -> 100) ... 
[info | MIPVerify]: Applying ReLU() ...
[info | MIPVerify]:   Behavior of ReLUs - split: 3, zero_output: 91, linear_in_input: 6, constant_output: 0
[info | MIPVerify]: Applying Linear(100 -> 10) ... 

 ──────────────────────────────────────────────────────────────────────────────
                                       Time                   Allocations      
                               ──────────────────────   ───────────────────────
       Tot / % measured:             576s / 99.0%           17.7GiB / 98.8%    

 Section               ncalls     time   %tot     avg     alloc   %tot      avg
 ──────────────────────────────────────────────────────────────────────────────
 utils/                     1     201s  35.3%    201s   6.42GiB  36.7%  6.42GiB
   import_example_n...      1     174s  30.5%    174s   3.08GiB  17.6%  3.08GiB
     get_example_ne...      1     174s  30.5%    174s   3.08GiB  17.6%  3.08GiB
       MNIST.WK17a_...      1     152s  26.6%    152s   1.54GiB  8.83%  1.54GiB
       MNIST.RSL18a...      1    17.0s  2.99%   17.0s    789MiB  4.40%   789MiB
       MNIST.n1             1    5.16s  0.90%   5.16s    781MiB  4.36%   781MiB
   import_datasets.jl       1    26.8s  4.70%   26.8s   3.34GiB  19.1%  3.34GiB
 integration/               1     182s  32.0%    182s   3.73GiB  21.3%  3.73GiB
   sequential/              1     182s  32.0%    182s   3.73GiB  21.3%  3.73GiB
     generated_weig...      1     182s  32.0%    182s   3.73GiB  21.3%  3.73GiB
       conv+fc+soft...      1     132s  23.1%    132s    852MiB  4.75%   852MiB
         BlurringPe...      1    73.8s  12.9%   73.8s    709MiB  3.95%   709MiB
         Unrestrict...      1    56.0s  9.82%   56.0s    118MiB  0.66%   118MiB
           Minimizi...      1    18.4s  3.23%   18.4s   11.5MiB  0.06%  11.5MiB
           With mul...      1    16.1s  2.82%   16.1s   39.5MiB  0.22%  39.5MiB
           Increasi...      1    11.3s  1.98%   11.3s   27.1MiB  0.15%  27.1MiB
           Minimizi...      1    10.2s  1.79%   10.2s   39.5MiB  0.22%  39.5MiB
         LInfNormBo...      1    1.90s  0.33%   1.90s   20.6MiB  0.11%  20.6MiB
       mfc+mfc+soft...      1    50.3s  8.82%   50.3s   2.90GiB  16.6%  2.90GiB
 batch_processing_h...      1     157s  27.6%    157s   6.09GiB  34.8%  6.09GiB
   integration.jl           1     151s  26.5%    151s   5.42GiB  31.0%  5.42GiB
   unit.jl                  1    6.03s  1.06%   6.03s    684MiB  3.82%   684MiB
 net_components/            1    29.6s  5.19%   29.6s   1.26GiB  7.18%  1.26GiB
   layers/                  1    16.1s  2.82%   16.1s    726MiB  4.05%   726MiB
   core_ops.jl              1    8.60s  1.51%   8.60s    417MiB  2.33%   417MiB
   nets/                    1    134ms  0.02%   134ms   4.75MiB  0.03%  4.75MiB
 models.jl                  1   27.7ms  0.00%  27.7ms    168KiB  0.00%   168KiB
 ──────────────────────────────────────────────────────────────────────────────

Test Summary: | Pass  Total
MIPVerify     |  268    268
    Testing MIPVerify tests passed 
