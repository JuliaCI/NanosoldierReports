Julia Version 1.5.0-DEV.378
Commit cdf580aff8 (2020-03-01 16:49 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed DataValueInterfaces ───────── v1.0.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed TableTraits ───────────────── v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed MLLabelUtils ──────────────── v0.5.1
  Installed MLDataUtils ───────────────── v0.5.0
  Installed DataFrames ────────────────── v0.20.2
  Installed PooledArrays ──────────────── v0.5.3
  Installed StatsBase ─────────────────── v0.32.1
  Installed Missings ──────────────────── v0.4.3
  Installed MappedArrays ──────────────── v0.2.2
  Installed LearnBase ─────────────────── v0.2.2
  Installed DataAPI ───────────────────── v1.1.0
  Installed JSON ──────────────────────── v0.21.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed OrderedCollections ────────── v1.1.0
  Installed MLDataPattern ─────────────── v0.5.0
  Installed Compat ────────────────────── v3.6.0
  Installed Reexport ──────────────────── v0.2.0
  Installed Parsers ───────────────────── v0.3.12
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Tables ────────────────────── v1.0.2
  Installed SimilaritySearch ──────────── v0.3.19
  Installed DataStructures ────────────── v0.17.10
   Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
   Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.6.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.10
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.12
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.1
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.2
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
    Testing KCenters
Status `/tmp/jl_0Jl8W4/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.6.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.10
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.12
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.1
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.2
  [2a0f44e3] Base64 
  [ade2ca70] Dates 
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [9fa8497b] Future 
  [b77e0a4c] InteractiveUtils 
  [76f85450] LibGit2 
  [8f399da3] Libdl 
  [37e2e46d] LinearAlgebra 
  [56ddb016] Logging 
  [d6f4376e] Markdown 
  [a63ad114] Mmap 
  [44cfe95a] Pkg 
  [de0858da] Printf 
  [3fa0cd96] REPL 
  [9a3f8284] Random 
  [ea8e919c] SHA 
  [9e88b42a] Serialization 
  [1a1011a3] SharedArrays 
  [6462fe0b] Sockets 
  [2f01184e] SparseArrays 
  [10745b16] Statistics 
  [8dfed614] Test 
  [cf7118a7] UUIDs 
  [4ec0a83e] Unicode 
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9326678744951884
[ Info: 0.8321307849884033
[ Info: 0.5538560461501281
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.32454605169594286
mean(cdnet.distances) = 0.38706357138852276
mean(crand.distances) = 0.33535370469093323
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1845703125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1845703125,"f1":null,"seconds":3.080815076828003e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":5.0078125,"distances_sum":541.7175684972148}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3271484375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3271484375,"f1":null,"seconds":3.725290298461914e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":5.4375,"distances_sum":983.3985057091188}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3271484375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3271484375,"f1":null,"seconds":3.725290298461914e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":5.4375,"distances_sum":983.3985057091188}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5341796875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5341796875,"f1":0.6776450979575983,"seconds":4.380941390991211e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.1640625,"distances_sum":1606.7655761600715}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7275390625, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7275390625,"f1":0.8325991716616724,"seconds":4.893168807029724e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.0859375,"distances_sum":2299.332047192066}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5361328125, conf: {"ssize":6,"bsize":3}, perf: {"precision":1.0,"recall":0.5361328125,"f1":0.6859841547341553,"seconds":9.67457890510559e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.2890625,"distances_sum":1554.1467095704413}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7275390625,"state":{"ssize":8,"bsize":5},"perf":{"precision":1.0,"recall":0.7275390625,"f1":0.8325991716616724,"seconds":4.893168807029724e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.0859375,"distances_sum":2299.332047192066}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9492845695970701,"seconds":5.6438148021698e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.75,"distances_sum":3010.1113385166054}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9198436979686987,"seconds":5.5693089962005615e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.6796875,"distances_sum":2830.6699431291745}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":8,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9492845695970701,"seconds":5.6438148021698e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.75,"distances_sum":3010.1113385166054}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91015625,"state":{"ssize":8,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9492845695970701,"seconds":5.6438148021698e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.75,"distances_sum":3010.1113385166054}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.53515625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.53515625,"f1":0.6830057095682103,"seconds":4.3977051973342896e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.8515625,"distances_sum":1418.9260412554472}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.197265625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.197265625,"f1":null,"seconds":3.380700945854187e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":6.0703125,"distances_sum":535.8795138945178}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2021484375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2021484375,"f1":null,"seconds":3.384426236152649e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":6.125,"distances_sum":567.4762933166022}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.53515625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.53515625,"f1":0.6830057095682103,"seconds":4.3977051973342896e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.8515625,"distances_sum":1418.9260412554472}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9348359973359978,"seconds":5.81890344619751e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8671875,"distances_sum":2672.02002963088}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9268002830502837,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.84375,"distances_sum":2586.23098669021}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8602449633699644,"seconds":5.165114998817444e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.375,"distances_sum":2172.505585798995}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8676349691974701,"seconds":5.0496309995651245e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.4375,"distances_sum":2214.327614439566}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8876953125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8876953125,"f1":0.9348359973359978,"seconds":5.81890344619751e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8671875,"distances_sum":2672.02002963088}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9550480769230777,"seconds":6.0889869928359985e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8984375,"distances_sum":2797.279688427617}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9705185439560444,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.9140625,"distances_sum":2932.547371800517}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9478479853479855,"seconds":5.649402737617493e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.890625,"distances_sum":2752.9675901379414}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9763221153846156,"seconds":6.22868537902832e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.953125,"distances_sum":2987.2749806936813}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9684180402930406,"seconds":5.910173058509827e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.96875,"distances_sum":2918.789255322608}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9519574175824179,"seconds":5.781650543212891e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.9375,"distances_sum":2752.273324579407}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9522951007326013,"seconds":5.725771188735962e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.859375,"distances_sum":2817.3219474898187}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9763221153846156,"seconds":6.22868537902832e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.953125,"distances_sum":2987.2749806936813}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9763221153846156,"seconds":6.22868537902832e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.953125,"distances_sum":2987.2749806936813}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.866838890276391,"seconds":5.073845386505127e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":7.9375,"distances_sum":2131.2393618846763}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.8648903180153189,"seconds":4.934147000312805e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":7.84375,"distances_sum":2136.9417895402053}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.775390625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.775390625,"f1":0.866838890276391,"seconds":5.073845386505127e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":7.9375,"distances_sum":2131.2393618846763}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9514168123543129,"seconds":5.753710865974426e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.7421875,"distances_sum":2734.059354387363}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9514168123543129,"seconds":5.753710865974426e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.7421875,"distances_sum":2734.059354387363}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9667983058608061,"seconds":5.707144737243652e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.8359375,"distances_sum":2850.7090810614286}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9717834249084253,"seconds":5.690380930900574e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.890625,"distances_sum":2881.5364791755183}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.957314560439561,"seconds":5.574896931648254e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.75,"distances_sum":2778.4634347131123}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9717834249084253,"seconds":5.690380930900574e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.890625,"distances_sum":2881.5364791755183}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9717834249084253,"seconds":5.690380930900574e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.890625,"distances_sum":2881.5364791755183}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8681407134532142,"seconds":5.036592483520508e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.4453125,"distances_sum":2180.07725497717}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5419921875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5419921875,"f1":0.6856136918636925,"seconds":4.254281520843506e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":6.9921875,"distances_sum":1457.6127579188267}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7763671875,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7763671875,"f1":0.8681407134532142,"seconds":5.036592483520508e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.4453125,"distances_sum":2180.07725497717}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9472215284715289,"seconds":5.535781383514404e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.7734375,"distances_sum":2760.1467972114683}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9509729853479858,"seconds":5.550682544708252e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8203125,"distances_sum":2796.4331029520586}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9351820054945064,"seconds":5.535781383514404e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8046875,"distances_sum":2607.183529752875}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9126519314019319,"seconds":5.27501106262207e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.6328125,"distances_sum":2527.837967131449}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9509729853479858,"seconds":5.550682544708252e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8203125,"distances_sum":2796.4331029520586}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9721554487179491,"seconds":5.748122930526733e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.9375,"distances_sum":2943.9073529086586}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9736263736263739,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.921875,"distances_sum":2944.382183095349}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9752804487179494,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.9375,"distances_sum":2943.7577787914724}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":7,"bsize":12}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9697000915750917,"seconds":5.995854735374451e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8984375,"distances_sum":2922.8378860858293}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.964921016483517,"seconds":5.5711716413497925e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8984375,"distances_sum":2875.0209751921693}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":10,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9528674450549457,"seconds":5.884096026420593e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8046875,"distances_sum":2804.3193090820782}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9752804487179494,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.9375,"distances_sum":2943.7577787914724}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9752804487179494,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.9375,"distances_sum":2943.7577787914724}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3662109375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3662109375,"f1":null,"seconds":3.729015588760376e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":5.890625,"distances_sum":983.6207509075263}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.72265625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.72265625,"f1":0.8275974025974036,"seconds":5.159527063369751e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.8203125,"distances_sum":2105.516595329833}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.72265625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.72265625,"f1":0.8275974025974036,"seconds":5.159527063369751e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.8203125,"distances_sum":2105.516595329833}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9545818764568771,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.796875,"distances_sum":2785.2827595853387}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73046875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.73046875,"f1":0.8361674783549792,"seconds":5.194917321205139e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.9375,"distances_sum":2114.875261422354}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9545818764568771,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.796875,"distances_sum":2785.2827595853387}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9698145604395607,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.875,"distances_sum":2886.12661754247}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9565190018315023,"seconds":5.790963768959045e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.75,"distances_sum":2808.5292030098703}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9698145604395607,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.875,"distances_sum":2886.12661754247}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9462890625,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9698145604395607,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.875,"distances_sum":2886.12661754247}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2001953125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2001953125,"f1":null,"seconds":3.1404197216033936e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":5.1171875,"distances_sum":448.07136791721126}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2001953125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2001953125,"f1":null,"seconds":3.1404197216033936e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":5.1171875,"distances_sum":448.07136791721126}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.205078125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.205078125,"f1":null,"seconds":3.771856427192688e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":5.8359375,"distances_sum":439.1547705149391}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.205078125,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.205078125,"f1":null,"seconds":3.771856427192688e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":5.8359375,"distances_sum":439.1547705149391}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.212890625, conf: {"ssize":9,"bsize":1}, perf: {"precision":null,"recall":0.212890625,"f1":null,"seconds":3.2689422369003296e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":5.7734375,"distances_sum":427.6254268470116}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.212890625,"state":{"ssize":9,"bsize":1},"perf":{"precision":null,"recall":0.212890625,"f1":null,"seconds":3.2689422369003296e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":5.7734375,"distances_sum":427.6254268470116}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.212890625,"state":{"ssize":9,"bsize":1},"perf":{"precision":null,"recall":0.212890625,"f1":null,"seconds":3.2689422369003296e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":5.7734375,"distances_sum":427.6254268470116}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.400390625, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.400390625,"f1":null,"seconds":3.4049153327941895e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.015625,"distances_sum":725.0192197771275}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.244140625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.244140625,"f1":null,"seconds":3.3564865589141846e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.109375,"distances_sum":417.1771692533881}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.400390625,"state":{"ssize":3,"bsize":2},"perf":{"precision":null,"recall":0.400390625,"f1":null,"seconds":3.4049153327941895e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":6.015625,"distances_sum":725.0192197771275}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.56640625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.56640625,"f1":0.7064702658452666,"seconds":4.131346940994263e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":7.1953125,"distances_sum":1049.8498723547384}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8562193015318024,"seconds":4.863366484642029e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.0,"distances_sum":1486.9623850013134}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7587890625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7587890625,"f1":0.8562193015318024,"seconds":4.863366484642029e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.0,"distances_sum":1486.9623850013134}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7587890625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7587890625,"f1":0.8562193015318024,"seconds":4.863366484642029e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.0,"distances_sum":1486.9623850013134}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.7587890625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7587890625,"f1":0.8562193015318024,"seconds":4.863366484642029e-6,"exhaustive_search_seconds":1.3746321201324463e-6,"evaluations":8.0,"distances_sum":1486.9623850013134}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6318359375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6318359375,"f1":0.762528964091465,"seconds":4.474073648452759e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.2890625,"distances_sum":1214.2111483744904}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4345703125, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.4345703125,"f1":null,"seconds":3.4477561712265015e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":5.9375,"distances_sum":809.4771580908634}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6318359375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6318359375,"f1":0.762528964091465,"seconds":4.474073648452759e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.2890625,"distances_sum":1214.2111483744904}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6474609375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6474609375,"f1":0.7762976606726614,"seconds":4.464760422706604e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.25,"distances_sum":1305.282759999642}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.748046875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.748046875,"f1":0.8495853105228113,"seconds":5.068257451057434e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.375,"distances_sum":1568.331379155681}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73046875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.73046875,"f1":0.8367143273393282,"seconds":5.159527063369751e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.265625,"distances_sum":1510.3396915277415}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.748046875,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.748046875,"f1":0.8495853105228113,"seconds":5.068257451057434e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.375,"distances_sum":1568.331379155681}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9640484515484518,"seconds":5.887821316719055e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.875,"distances_sum":2285.6718293340564}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9449290293040299,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8203125,"distances_sum":2122.6542020715756}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9302426739926744,"seconds":5.723908543586731e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8671875,"distances_sum":2004.6493710775508}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.8983089826839835,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.59375,"distances_sum":1810.757009922213}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9438873626373631,"seconds":5.4817646741867065e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.890625,"distances_sum":2113.2512115675104}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9640484515484518,"seconds":5.887821316719055e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.875,"distances_sum":2285.6718293340564}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9640484515484518,"seconds":5.887821316719055e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.875,"distances_sum":2285.6718293340564}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.388671875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.388671875,"f1":null,"seconds":3.943219780921936e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":6.1640625,"distances_sum":750.2440354060628}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8596445221445229,"seconds":5.2675604820251465e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.984375,"distances_sum":1628.272114715624}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6650390625,"f1":0.7873189310689318,"seconds":5.122274160385132e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.484375,"distances_sum":1375.560528308123}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8573265276390285,"seconds":4.757195711135864e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.8828125,"distances_sum":1628.2195452467438}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7666015625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7666015625,"f1":0.8596445221445229,"seconds":5.2675604820251465e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.984375,"distances_sum":1628.272114715624}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.952424138361639,"seconds":6.1783939599990845e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8359375,"distances_sum":2201.9413509917626}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8095703125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8095703125,"f1":0.8882331210456217,"seconds":5.0961971282958984e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.421875,"distances_sum":1799.323445359018}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9471497252747259,"seconds":5.494803190231323e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8203125,"distances_sum":2175.533498596844}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9169921875,"state":{"ssize":9,"bsize":8},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.952424138361639,"seconds":6.1783939599990845e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8359375,"distances_sum":2201.9413509917626}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":8,"bsize":12}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9761733058608062,"seconds":5.621463060379028e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.9453125,"distances_sum":2357.4296390303844}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9539262820512824,"seconds":6.191432476043701e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8203125,"distances_sum":2229.711631856164}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9770089285714288,"seconds":6.925314664840698e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.953125,"distances_sum":2374.1419532310583}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9770089285714288,"seconds":6.925314664840698e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.953125,"distances_sum":2374.1419532310583}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9770089285714288,"seconds":6.925314664840698e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.953125,"distances_sum":2374.1419532310583}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3232421875, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.3232421875,"f1":null,"seconds":3.905966877937317e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":4.8203125,"distances_sum":672.7879386009392}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2119140625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2119140625,"f1":null,"seconds":3.0044466257095337e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":4.8203125,"distances_sum":494.622902728869}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2060546875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2060546875,"f1":null,"seconds":2.946704626083374e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":4.7265625,"distances_sum":461.61489945176925}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3232421875,"state":{"ssize":5,"bsize":2},"perf":{"precision":null,"recall":0.3232421875,"f1":null,"seconds":3.905966877937317e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":4.8203125,"distances_sum":672.7879386009392}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3291015625, conf: {"ssize":6,"bsize":2}, perf: {"precision":null,"recall":0.3291015625,"f1":null,"seconds":4.08664345741272e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":4.7734375,"distances_sum":705.4654313732301}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7890625, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.7890625,"f1":0.8727350774225784,"seconds":5.278736352920532e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.3515625,"distances_sum":1845.1576212160426}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.328125, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.328125,"f1":null,"seconds":3.242865204811096e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":4.796875,"distances_sum":654.2900016739069}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.515625, conf: {"ssize":8,"bsize":3}, perf: {"precision":1.0,"recall":0.515625,"f1":0.6698364135864141,"seconds":4.000961780548096e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":6.671875,"distances_sum":1106.882740086258}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7890625,"state":{"ssize":9,"bsize":5},"perf":{"precision":1.0,"recall":0.7890625,"f1":0.8727350774225784,"seconds":5.278736352920532e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.3515625,"distances_sum":1845.1576212160426}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9463656135531142,"seconds":5.790963768959045e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.7421875,"distances_sum":2280.41784477124}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9468094405594409,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.671875,"distances_sum":2335.1243462907096}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9532051282051285,"seconds":6.290152668952942e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.7578125,"distances_sum":2340.5568313073104}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":12,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9247684607059616,"seconds":6.332993507385254e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.6875,"distances_sum":2149.435534339847}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.796875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.796875,"f1":0.875967782217783,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.21875,"distances_sum":1897.4687359472678}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9169921875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.9532051282051285,"seconds":6.290152668952942e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.7578125,"distances_sum":2340.5568313073104}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9169921875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.9532051282051285,"seconds":6.290152668952942e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.7578125,"distances_sum":2340.5568313073104}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6845703125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6845703125,"f1":0.8042020479520487,"seconds":5.302950739860535e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":7.7109375,"distances_sum":1493.0265520221003}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.86170634920635,"seconds":5.470588803291321e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.171875,"distances_sum":1708.259528179898}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7685546875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7685546875,"f1":0.86170634920635,"seconds":5.470588803291321e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.171875,"distances_sum":1708.259528179898}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9502289377289385,"seconds":6.124377250671387e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8359375,"distances_sum":2307.1269030194862}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9624885531135535,"seconds":6.113201379776001e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8984375,"distances_sum":2396.2664993022468}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9624885531135535,"seconds":6.113201379776001e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8984375,"distances_sum":2396.2664993022468}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.966796875, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.966796875,"f1":0.9816220238095239,"seconds":5.76116144657135e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.984375,"distances_sum":2503.9714718465616}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.966796875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9816220238095239,"seconds":5.76116144657135e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.984375,"distances_sum":2503.9714718465616}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.966796875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9816220238095239,"seconds":5.76116144657135e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.984375,"distances_sum":2503.9714718465616}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7333984375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7333984375,"f1":0.8359815531690539,"seconds":5.166977643966675e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":7.75,"distances_sum":1661.4974262190005}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7333984375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7333984375,"f1":0.8359815531690539,"seconds":5.166977643966675e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":7.75,"distances_sum":1661.4974262190005}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8457110597735605,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":7.8203125,"distances_sum":1689.7981529800907}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9507154304029307,"seconds":5.550682544708252e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.859375,"distances_sum":2310.259104006103}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9507154304029307,"seconds":5.550682544708252e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.859375,"distances_sum":2310.259104006103}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.965888278388279,"seconds":6.577000021934509e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.9140625,"distances_sum":2409.6735316612653}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.965888278388279,"seconds":6.577000021934509e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.9140625,"distances_sum":2409.6735316612653}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.965888278388279,"seconds":6.577000021934509e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.9140625,"distances_sum":2409.6735316612653}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7373046875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7373046875,"f1":0.8377974456099464,"seconds":5.0924718379974365e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":7.9296875,"distances_sum":1783.963574941369}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7373046875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7373046875,"f1":0.8377974456099464,"seconds":5.0924718379974365e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":7.9296875,"distances_sum":1783.963574941369}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9585622710622717,"seconds":5.600973963737488e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.7578125,"distances_sum":2509.113298099866}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9422905219780223,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.6796875,"distances_sum":2388.1426385321056}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9533310439560445,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.7265625,"distances_sum":2487.010755469651}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9585622710622717,"seconds":5.600973963737488e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.7578125,"distances_sum":2509.113298099866}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":5,"bsize":13}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9783482142857147,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.9140625,"distances_sum":2613.0711630283536}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9579129204129209,"seconds":5.772337317466736e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.7890625,"distances_sum":2489.167737998096}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9785542582417586,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.9296875,"distances_sum":2604.371174520861}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9609375,"state":{"ssize":5,"bsize":13},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9783482142857147,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.9140625,"distances_sum":2613.0711630283536}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9609375,"state":{"ssize":5,"bsize":13},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9783482142857147,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.9140625,"distances_sum":2613.0711630283536}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8541297244422253,"seconds":5.0477683544158936e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.8515625,"distances_sum":1794.012177228949}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.25390625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.25390625,"f1":null,"seconds":3.4421682357788086e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":5.671875,"distances_sum":558.8748224693517}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6611328125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6611328125,"f1":0.7828253343878351,"seconds":4.198402166366577e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":6.8125,"distances_sum":1429.6263732272168}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7578125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7578125,"f1":0.8541297244422253,"seconds":5.0477683544158936e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.8515625,"distances_sum":1794.012177228949}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9573717948717955,"seconds":5.45009970664978e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.8125,"distances_sum":2407.7481331455547}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9614812271062275,"seconds":5.837529897689819e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.7734375,"distances_sum":2481.502252849938}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8544921875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8544921875,"f1":0.9144548160173166,"seconds":5.472451448440552e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.4296875,"distances_sum":2203.95920033307}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.8906114718614726,"seconds":5.055218935012817e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.1640625,"distances_sum":1980.6339757433825}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9614812271062275,"seconds":5.837529897689819e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.7734375,"distances_sum":2481.502252849938}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9697265625, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.9697265625,"f1":0.9834077380952382,"seconds":5.792826414108276e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9453125,"distances_sum":2606.6143568525777}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9710393772893777,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.875,"distances_sum":2526.3959166772465}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9711538461538467,"seconds":5.660578608512878e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.890625,"distances_sum":2507.175858769068}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9669528388278389,"seconds":5.729496479034424e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.8125,"distances_sum":2512.2380145309035}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9646978021978025,"seconds":5.278736352920532e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.796875,"distances_sum":2484.871211177559}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9697265625,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9697265625,"f1":0.9834077380952382,"seconds":5.792826414108276e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9453125,"distances_sum":2606.6143568525777}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9697265625,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9697265625,"f1":0.9834077380952382,"seconds":5.792826414108276e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.9453125,"distances_sum":2606.6143568525777}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7216796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7216796875,"f1":0.8286905802530811,"seconds":4.373490810394287e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":7.5546875,"distances_sum":1589.0908928584838}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8511374042624049,"seconds":4.785135388374329e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":7.8671875,"distances_sum":1721.6396977848267}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2744140625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2744140625,"f1":null,"seconds":3.1497329473495483e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":6.0390625,"distances_sum":586.0359845355366}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5634765625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5634765625,"f1":0.7057003760128766,"seconds":3.809109330177307e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":6.84375,"distances_sum":1179.958599220916}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7548828125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7548828125,"f1":0.8511374042624049,"seconds":4.785135388374329e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":7.8671875,"distances_sum":1721.6396977848267}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9352220695970701,"seconds":5.202367901802063e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.5859375,"distances_sum":2265.399061931536}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9559008699633703,"seconds":5.2265822887420654e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.78125,"distances_sum":2391.10781824581}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.8996227730602738,"seconds":5.036592483520508e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.1171875,"distances_sum":1998.9725003975727}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8925943847818857,"seconds":4.800036549568176e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.0078125,"distances_sum":2012.6888322654368}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9325606684981691,"seconds":5.3104013204574585e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.6171875,"distances_sum":2209.1123963892633}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9559008699633703,"seconds":5.2265822887420654e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.78125,"distances_sum":2391.10781824581}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9697265625, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9697265625,"f1":0.9835565476190478,"seconds":5.6158751249313354e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.9375,"distances_sum":2574.3268323882517}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9658203125, conf: {"ssize":5,"bsize":13}, perf: {"precision":1.0,"recall":0.9658203125,"f1":0.9814732142857144,"seconds":5.865469574928284e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.9453125,"distances_sum":2558.3066889337324}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9691048534798541,"seconds":5.3998082876205444e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.90625,"distances_sum":2461.646163923234}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9720066391941395,"seconds":5.591660737991333e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.8984375,"distances_sum":2472.9071908309497}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9693108974358978,"seconds":5.5264681577682495e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.859375,"distances_sum":2479.316418702066}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9697265625,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9697265625,"f1":0.9835565476190478,"seconds":5.6158751249313354e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.9375,"distances_sum":2574.3268323882517}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9697265625,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9697265625,"f1":0.9835565476190478,"seconds":5.6158751249313354e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.9375,"distances_sum":2574.3268323882517}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.259765625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.259765625,"f1":null,"seconds":3.041699528694153e-6,"exhaustive_search_seconds":1.2405216693878174e-6,"evaluations":5.6796875,"distances_sum":619.1745967078153}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.259765625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.259765625,"f1":null,"seconds":3.041699528694153e-6,"exhaustive_search_seconds":1.2405216693878174e-6,"evaluations":5.6796875,"distances_sum":619.1745967078153}}, n: 9
mean(cfft.distances) = 0.3245460513865134
mean(cdnet.distances) = 0.3794433833783437
mean(crand.distances) = 0.7929516832173973
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8666666666666667
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.9222222222222222
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8777777777777778
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8955555555555555
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9222222222222222
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.888888888888889
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9466666666666667
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8555555555555555
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9066666666666666
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9377777777777778
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9044444444444445
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.931111111111111
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9244444444444445
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9244444444444445
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8977777777777778
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8733333333333334
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9288888888888889
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.928888888888889
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9355555555555556
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9311111111111111
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8733333333333334
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8999999999999999
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8533333333333334
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8866666666666667
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8866666666666667
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8933333333333334
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8822222222222224
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9177777777777778
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 9, 11]]
** centroid: 6, normalized-entropy: 0.9927744539878083, [(2, 9), (3, 11)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 3]]
** centroid: 8, normalized-entropy: 1.0, [(2, 3), (3, 3)]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 1, 2, 3, 3, 2, 3, 2, 3, 2, 1]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 9, 11]]
** centroid: 6, normalized-entropy: 0.9927744539878083, [(2, 9), (3, 11)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 3]]
** centroid: 8, normalized-entropy: 1.0, [(2, 3), (3, 3)]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 1, 2, 3, 3, 2, 3, 2, 3, 2, 1]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 9, 11]]
** centroid: 6, normalized-entropy: 0.9927744539878083, [(2, 9), (3, 11)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 3]]
** centroid: 8, normalized-entropy: 1.0, [(2, 3), (3, 3)]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 1, 2, 3, 3, 2, 3, 2, 3, 2, 1]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 9, 11]]
** centroid: 6, normalized-entropy: 0.9927744539878083, [(2, 9), (3, 11)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 3]]
** centroid: 8, normalized-entropy: 1.0, [(2, 3), (3, 3)]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 1, 2, 3, 3, 2, 3, 2, 3, 2, 1]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 9, 11]]
** centroid: 6, normalized-entropy: 0.9927744539878083, [(2, 9), (3, 11)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 3]]
** centroid: 8, normalized-entropy: 1.0, [(2, 3), (3, 3)]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 1, 2, 3, 3, 2, 3, 2, 3, 2, 1]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 9, 11]]
** centroid: 6, normalized-entropy: 0.9927744539878083, [(2, 9), (3, 11)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 3]]
** centroid: 8, normalized-entropy: 1.0, [(2, 3), (3, 3)]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 1, 2, 3, 3, 2, 3, 2, 3, 2, 1]
acc = 0.9533333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 9, 11]]
** centroid: 6, normalized-entropy: 0.9927744539878083, [(2, 9), (3, 11)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 3]]
** centroid: 8, normalized-entropy: 1.0, [(2, 3), (3, 3)]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 1, 2, 3, 3, 2, 3, 2, 3, 2, 1]
acc = 0.9866666666666667
*** finished computation of 12 references, err: [Inf, 0.5749798051516215] ***
*** center 1: selecting labels [1] (freq >= 1) [from [42, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 7]]
** centroid: 9, normalized-entropy: 0.8812908992306927, [(2, 3), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
finished with 15 centroids; started with 12
acc = 0.9333333333333333
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.22884246945666434] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22884246945666434, 0.18904076560677305] ***
*** finished computation of 7 references, err: [Inf, 0.22884246945666434, 0.18904076560677305] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [86, 34, 0]]
** centroid: 1, normalized-entropy: 0.8599530497177523, [(1, 86), (2, 34)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [12, 81, 18]]
** centroid: 2, normalized-entropy: 0.6967175998398836, [(1, 12), (2, 81), (3, 18)]
*** center 3: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [10, 87, 1]]
** centroid: 4, normalized-entropy: 0.478723511385963, [(1, 10), (2, 87)]
*** center 5: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [83, 18, 0]]
** centroid: 6, normalized-entropy: 0.6761627418829197, [(1, 83), (2, 18)]
*** center 7: selecting labels [1] (freq >= 2) [from [115, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3101498640111617] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3101498640111617, 0.25372872117895623] ***
*** finished computation of 3 references, err: [Inf, 0.3101498640111617, 0.25372872117895623] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [143, 174, 19]]
** centroid: 1, normalized-entropy: 0.7889894151582902, [(1, 143), (2, 174), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [133, 46, 0]]
** centroid: 2, normalized-entropy: 0.8221598336872689, [(1, 133), (2, 46)]
*** center 3: selecting labels [1] (freq >= 2) [from [151, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21308744165311935] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21308744165311935, 0.16206591793774408] ***
*** finished computation of 7 references, err: [Inf, 0.21308744165311935, 0.16206591793774408] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [114, 6, 0]]
** centroid: 1, normalized-entropy: 0.2863969571159561, [(1, 114), (2, 6)]
*** center 2: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [2, 66, 0]]
** centroid: 3, normalized-entropy: 0.1914332548141934, [(1, 2), (2, 66)]
*** center 4: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [80, 26, 0]]
** centroid: 5, normalized-entropy: 0.8037159237834126, [(1, 80), (2, 26)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 120, 14]]
** centroid: 6, normalized-entropy: 0.4830306801456181, [(2, 120), (3, 14)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [58, 16, 0]]
** centroid: 7, normalized-entropy: 0.7531979910695015, [(1, 58), (2, 16)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2918323966349172] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2918323966349172, 0.18219057501557617] ***
*** finished computation of 7 references, err: [Inf, 0.2918323966349172, 0.18219057501557617] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 42, 23]]
** centroid: 1, normalized-entropy: 0.937456170782005, [(2, 42), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [100, 9, 0]]
** centroid: 2, normalized-entropy: 0.41116649000212574, [(1, 100), (2, 9)]
*** center 3: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [149, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [65, 108, 0]]
** centroid: 5, normalized-entropy: 0.9549648861309205, [(1, 65), (2, 108)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 65, 0]]
** centroid: 6, normalized-entropy: 0.19364280468389852, [(1, 2), (2, 65)]
*** center 7: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.30792461135620447] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30792461135620447, 0.2511729356390914] ***
*** finished computation of 3 references, err: [Inf, 0.30792461135620447, 0.2511729356390914] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [282, 21, 0]]
** centroid: 1, normalized-entropy: 0.3633319133250508, [(1, 282), (2, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [136, 59, 0]]
** centroid: 2, normalized-entropy: 0.8844026915834835, [(1, 136), (2, 59)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [9, 140, 19]]
** centroid: 3, normalized-entropy: 0.505381330656758, [(1, 9), (2, 140), (3, 19)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.26113161244855515] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26113161244855515, 0.2367676976967653] ***
*** finished computation of 3 references, err: [Inf, 0.26113161244855515, 0.2367676976967653] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [126, 129, 5]]
** centroid: 1, normalized-entropy: 0.7052348471485073, [(1, 126), (2, 129), (3, 5)]
*** center 2: selecting labels [1] (freq >= 2) [from [220, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [73, 105, 9]]
** centroid: 3, normalized-entropy: 0.7621326648066152, [(1, 73), (2, 105), (3, 9)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28015812768599485] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28015812768599485, 0.24619285219364326] ***
*** finished computation of 3 references, err: [Inf, 0.28015812768599485, 0.24619285219364326] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [128, 94, 3]]
** centroid: 1, normalized-entropy: 0.6763974355627962, [(1, 128), (2, 94), (3, 3)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [141, 130, 20]]
** centroid: 2, normalized-entropy: 0.8147354323415662, [(1, 141), (2, 130), (3, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [151, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '2'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21264917957498594] ***[ Info: precision is zero for label '3'; #classes=3 

*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21264917957498594, 0.15887530872810846] ***
*** finished computation of 7 references, err: [Inf, 0.21264917957498594, 0.15887530872810846] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [28, 57, 0]]
** centroid: 1, normalized-entropy: 0.9143242464317818, [(1, 28), (2, 57)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [113, 30, 0]]
** centroid: 2, normalized-entropy: 0.7410815422247408, [(1, 113), (2, 30)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 55, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [71, 20, 0]]
** centroid: 5, normalized-entropy: 0.7597659876428757, [(1, 71), (2, 20)]
*** center 6: selecting labels [1] (freq >= 1) [from [137, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 58, 19]]
** centroid: 7, normalized-entropy: 0.8060914696192223, [(2, 58), (3, 19)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24021955134104128] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24021955134104128, 0.17176223680449612] ***
*** finished computation of 7 references, err: [Inf, 0.24021955134104128, 0.17176223680449612] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [84, 23, 0]]
** centroid: 1, normalized-entropy: 0.7508446639457529, [(1, 84), (2, 23)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [16, 28, 0]]
** centroid: 2, normalized-entropy: 0.9456603046006401, [(1, 16), (2, 28)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [83, 73, 0]]
** centroid: 3, normalized-entropy: 0.9970338496312484, [(1, 83), (2, 73)]
*** center 4: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 41, 14]]
** centroid: 5, normalized-entropy: 0.8184033299219708, [(2, 41), (3, 14)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 69, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [146, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.250581091632885] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.250581091632885, 0.17669353726692777] ***
*** finished computation of 7 references, err: [Inf, 0.250581091632885, 0.17669353726692777] ***
*** center 1: selecting labels [1] (freq >= 1) [from [135, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 20, 23]]
** centroid: 2, normalized-entropy: 0.996485989886783, [(2, 20), (3, 23)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 36, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [136, 5, 0]]
** centroid: 4, normalized-entropy: 0.22107910499111305, [(1, 136), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [70, 104, 0]]
** centroid: 5, normalized-entropy: 0.9722794620968822, [(1, 70), (2, 104)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 59, 0]]
** centroid: 6, normalized-entropy: 0.20818094555717087, [(1, 2), (2, 59)]
*** center 7: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3373269070241902] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3373269070241902, 0.2560866204588241] ***
*** finished computation of 3 references, err: [Inf, 0.3373269070241902, 0.2560866204588241] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [102, 85, 1]]
** centroid: 1, normalized-entropy: 0.6540093306252455, [(1, 102), (2, 85), (3, 1)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [145, 135, 18]]
** centroid: 2, normalized-entropy: 0.7998763234682373, [(1, 145), (2, 135), (3, 18)]
*** center 3: selecting labels [1] (freq >= 1) [from [180, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.33343508613269324] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33343508613269324, 0.24520718330947466] ***
*** finished computation of 3 references, err: [Inf, 0.33343508613269324, 0.24520718330947466] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [69, 204, 14]]
** centroid: 1, normalized-entropy: 0.6669001399047327, [(1, 69), (2, 204), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [227, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [123, 30, 0]]
** centroid: 3, normalized-entropy: 0.7140152804378671, [(1, 123), (2, 30)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3362228734582115] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3362228734582115, 0.2510513849458706] ***
*** finished computation of 3 references, err: [Inf, 0.3362228734582115, 0.2510513849458706] ***
*** center 1: selecting labels [1] (freq >= 1) [from [216, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [175, 29, 0]]
** centroid: 2, normalized-entropy: 0.5898596879060195, [(1, 175), (2, 29)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [29, 195, 23]]
** centroid: 3, normalized-entropy: 0.6000063311766344, [(1, 29), (2, 195), (3, 23)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2087849555257428] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2087849555257428, 0.15814811423177588] ***
*** starting iteration: 2; err: [Inf, 0.2087849555257428, 0.15814811423177588] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2087849555257428, 0.15814811423177588, 0.1538657280308818] ***
*** starting iteration: 3; err: [Inf, 0.2087849555257428, 0.15814811423177588, 0.1538657280308818] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2087849555257428, 0.15814811423177588, 0.1538657280308818, 0.15265209170187022] ***
*** starting iteration: 4; err: [Inf, 0.2087849555257428, 0.15814811423177588, 0.1538657280308818, 0.15265209170187022] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2087849555257428, 0.15814811423177588, 0.1538657280308818, 0.15265209170187022, 0.15162233991951152] ***
*** starting iteration: 5; err: [Inf, 0.2087849555257428, 0.15814811423177588, 0.1538657280308818, 0.15265209170187022, 0.15162233991951152] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2087849555257428, 0.15814811423177588, 0.1538657280308818, 0.15265209170187022, 0.15162233991951152, 0.15039103435612544] ***
*** starting iteration: 6; err: [Inf, 0.2087849555257428, 0.15814811423177588, 0.1538657280308818, 0.15265209170187022, 0.15162233991951152, 0.15039103435612544] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2087849555257428, 0.15814811423177588, 0.1538657280308818, 0.15265209170187022, 0.15162233991951152, 0.15039103435612544, 0.1493118889147399] ***
*** starting iteration: 7; err: [Inf, 0.2087849555257428, 0.15814811423177588, 0.1538657280308818, 0.15265209170187022, 0.15162233991951152, 0.15039103435612544, 0.1493118889147399] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2087849555257428, 0.15814811423177588, 0.1538657280308818, 0.15265209170187022, 0.15162233991951152, 0.15039103435612544, 0.1493118889147399, 0.14857961578286244] ***
*** finished computation of 7 references, err: [Inf, 0.2087849555257428, 0.15814811423177588, 0.1538657280308818, 0.15265209170187022, 0.15162233991951152, 0.15039103435612544, 0.1493118889147399, 0.14857961578286244] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [52, 37, 0]]
** centroid: 1, normalized-entropy: 0.9794116346561961, [(1, 52), (2, 37)]
*** center 2: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [109, 27, 0]]
** centroid: 3, normalized-entropy: 0.7189771503746143, [(1, 109), (2, 27)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [4, 69, 0]]
** centroid: 4, normalized-entropy: 0.306424729870515, [(1, 4), (2, 69)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [94, 1, 0]]
** centroid: 5, normalized-entropy: 0.08426242877623306, [(1, 94), (2, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 86, 19]]
** centroid: 7, normalized-entropy: 0.6821560732869936, [(2, 86), (3, 19)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22795084728601053] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22795084728601053, 0.18294310952903986] ***
*** starting iteration: 2; err: [Inf, 0.22795084728601053, 0.18294310952903986] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22795084728601053, 0.18294310952903986, 0.1686587277771919] ***
*** starting iteration: 3; err: [Inf, 0.22795084728601053, 0.18294310952903986, 0.1686587277771919] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22795084728601053, 0.18294310952903986, 0.1686587277771919, 0.15612358761591086] ***
*** starting iteration: 4; err: [Inf, 0.22795084728601053, 0.18294310952903986, 0.1686587277771919, 0.15612358761591086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22795084728601053, 0.18294310952903986, 0.1686587277771919, 0.15612358761591086, 0.15026544430886565] ***
*** starting iteration: 5; err: [Inf, 0.22795084728601053, 0.18294310952903986, 0.1686587277771919, 0.15612358761591086, 0.15026544430886565] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22795084728601053, 0.18294310952903986, 0.1686587277771919, 0.15612358761591086, 0.15026544430886565, 0.14762185168741593] ***
*** starting iteration: 6; err: [Inf, 0.22795084728601053, 0.18294310952903986, 0.1686587277771919, 0.15612358761591086, 0.15026544430886565, 0.14762185168741593] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22795084728601053, 0.18294310952903986, 0.1686587277771919, 0.15612358761591086, 0.15026544430886565, 0.14762185168741593, 0.14607806731297493] ***
*** starting iteration: 7; err: [Inf, 0.22795084728601053, 0.18294310952903986, 0.1686587277771919, 0.15612358761591086, 0.15026544430886565, 0.14762185168741593, 0.14607806731297493] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22795084728601053, 0.18294310952903986, 0.1686587277771919, 0.15612358761591086, 0.15026544430886565, 0.14762185168741593, 0.14607806731297493, 0.1450839997848672] ***
*** finished computation of 7 references, err: [Inf, 0.22795084728601053, 0.18294310952903986, 0.1686587277771919, 0.15612358761591086, 0.15026544430886565, 0.14762185168741593, 0.14607806731297493, 0.1450839997848672] ***
*** center 1: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 81, 3]]
** centroid: 2, normalized-entropy: 0.2222848306856879, [(2, 81), (3, 3)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [64, 33, 0]]
** centroid: 3, normalized-entropy: 0.925015873745592, [(1, 64), (2, 33)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [79, 14, 0]]
** centroid: 4, normalized-entropy: 0.6111841012714984, [(1, 79), (2, 14)]
*** center 5: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 96, 11]]
** centroid: 6, normalized-entropy: 0.4778207445858079, [(2, 96), (3, 11)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [101, 10, 0]]
** centroid: 7, normalized-entropy: 0.436770454577089, [(1, 101), (2, 10)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23861812506390476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23861812506390476, 0.16221894690909353] ***
*** starting iteration: 2; err: [Inf, 0.23861812506390476, 0.16221894690909353] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23861812506390476, 0.16221894690909353, 0.1550289852128572] ***
*** starting iteration: 3; err: [Inf, 0.23861812506390476, 0.16221894690909353, 0.1550289852128572] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23861812506390476, 0.16221894690909353, 0.1550289852128572, 0.15230432389209095] ***
*** starting iteration: 4; err: [Inf, 0.23861812506390476, 0.16221894690909353, 0.1550289852128572, 0.15230432389209095] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23861812506390476, 0.16221894690909353, 0.1550289852128572, 0.15230432389209095, 0.151258349799128] ***
*** starting iteration: 5; err: [Inf, 0.23861812506390476, 0.16221894690909353, 0.1550289852128572, 0.15230432389209095, 0.151258349799128] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23861812506390476, 0.16221894690909353, 0.1550289852128572, 0.15230432389209095, 0.151258349799128, 0.15054616803928897] ***
*** finished computation of 7 references, err: [Inf, 0.23861812506390476, 0.16221894690909353, 0.1550289852128572, 0.15230432389209095, 0.151258349799128, 0.15054616803928897] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [114, 4, 0]]
** centroid: 1, normalized-entropy: 0.21357981533827744, [(1, 114), (2, 4)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 28, 23]]
** centroid: 2, normalized-entropy: 0.9930554830121975, [(2, 28), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [87, 15, 0]]
** centroid: 3, normalized-entropy: 0.6024308020404452, [(1, 87), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [104, 10, 0]]
** centroid: 4, normalized-entropy: 0.4288109647301171, [(1, 104), (2, 10)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [2, 99, 0]]
** centroid: 5, normalized-entropy: 0.1403272709905931, [(1, 2), (2, 99)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 68, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2559853906522284] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2559853906522284, 0.1888109196883601] ***
*** starting iteration: 2; err: [Inf, 0.2559853906522284, 0.1888109196883601] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2559853906522284, 0.1888109196883601, 0.16684587416798435] ***
*** starting iteration: 3; err: [Inf, 0.2559853906522284, 0.1888109196883601, 0.16684587416798435] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2559853906522284, 0.1888109196883601, 0.16684587416798435, 0.15749109342034245] ***
*** finished computation of 7 references, err: [Inf, 0.2559853906522284, 0.1888109196883601, 0.16684587416798435, 0.15749109342034245] ***
*** center 1: selecting labels [1] (freq >= 2) [from [57, 1, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 97, 19]]
** centroid: 2, normalized-entropy: 0.6433071292001625, [(2, 97), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [136, 29, 0]]
** centroid: 3, normalized-entropy: 0.6707076974655384, [(1, 136), (2, 29)]
*** center 4: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [69, 25, 0]]
** centroid: 5, normalized-entropy: 0.8356038276131503, [(1, 69), (2, 25)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 68, 0]]
** centroid: 6, normalized-entropy: 0.25253077151613923, [(1, 3), (2, 68)]
*** center 7: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1980712747178983] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1980712747178983, 0.1603195647237127] ***
*** starting iteration: 2; err: [Inf, 0.1980712747178983, 0.1603195647237127] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1980712747178983, 0.1603195647237127, 0.15607310976900127] ***
*** starting iteration: 3; err: [Inf, 0.1980712747178983, 0.1603195647237127, 0.15607310976900127] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1980712747178983, 0.1603195647237127, 0.15607310976900127, 0.15385456963105762] ***
*** finished computation of 7 references, err: [Inf, 0.1980712747178983, 0.1603195647237127, 0.15607310976900127, 0.15385456963105762] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [64, 7, 0]]
** centroid: 1, normalized-entropy: 0.4645149440905521, [(1, 64), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 50, 0]]
** centroid: 2, normalized-entropy: 0.9993879681484049, [(1, 53), (2, 50)]
*** center 3: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 103, 14]]
** centroid: 4, normalized-entropy: 0.5283773417314562, [(2, 103), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [90, 17, 0]]
** centroid: 5, normalized-entropy: 0.6316198184485629, [(1, 90), (2, 17)]
*** center 6: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [35, 57, 0]]
** centroid: 7, normalized-entropy: 0.9583485169215336, [(1, 35), (2, 57)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2596596639123054] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2596596639123054, 0.16401523920795372] ***
*** starting iteration: 2; err: [Inf, 0.2596596639123054, 0.16401523920795372] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2596596639123054, 0.16401523920795372, 0.15269183836503142] ***
*** starting iteration: 3; err: [Inf, 0.2596596639123054, 0.16401523920795372, 0.15269183836503142] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2596596639123054, 0.16401523920795372, 0.15269183836503142, 0.147533660679162] ***
*** finished computation of 7 references, err: [Inf, 0.2596596639123054, 0.16401523920795372, 0.15269183836503142, 0.147533660679162] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [81, 16, 0]]
** centroid: 1, normalized-entropy: 0.6460174789535751, [(1, 81), (2, 16)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 53, 23]]
** centroid: 2, normalized-entropy: 0.8844839729019952, [(2, 53), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [75, 32, 0]]
** centroid: 3, normalized-entropy: 0.880145474371324, [(1, 75), (2, 32)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [66, 36, 0]]
** centroid: 4, normalized-entropy: 0.9366673818775627, [(1, 66), (2, 36)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 87, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.30957449611270804] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30957449611270804, 0.23994597490748454] ***
*** finished computation of 3 references, err: [Inf, 0.30957449611270804, 0.23994597490748454] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [142, 163, 14]]
** centroid: 1, normalized-entropy: 0.7651158041091523, [(1, 142), (2, 163), (3, 14)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [108, 71, 0]]
** centroid: 2, normalized-entropy: 0.9689560246470108, [(1, 108), (2, 71)]
*** center 3: selecting labels [1] (freq >= 2) [from [169, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3078618071878376] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3078618071878376, 0.2505267952251872] ***
*** finished computation of 3 references, err: [Inf, 0.3078618071878376, 0.2505267952251872] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [139, 177, 23]]
** centroid: 1, normalized-entropy: 0.8077427724392123, [(1, 139), (2, 177), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [115, 47, 0]]
** centroid: 2, normalized-entropy: 0.8688806702460316, [(1, 115), (2, 47)]
*** center 3: selecting labels [1] (freq >= 2) [from [166, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23593394661548775] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23593394661548775, 0.1957194081426517] ***
*** starting iteration: 2; err: [Inf, 0.23593394661548775, 0.1957194081426517] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23593394661548775, 0.1957194081426517, 0.1929102446002936] ***
*** starting iteration: 3; err: [Inf, 0.23593394661548775, 0.1957194081426517, 0.1929102446002936] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23593394661548775, 0.1957194081426517, 0.1929102446002936, 0.1925202212646022] ***
*** finished computation of 7 references, err: [Inf, 0.23593394661548775, 0.1957194081426517, 0.1929102446002936, 0.1925202212646022] ***
*** center 1: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 69, 19]]
** centroid: 2, normalized-entropy: 0.7526269564427315, [(2, 69), (3, 19)]
*** center 3: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [99, 28, 0]]
** centroid: 4, normalized-entropy: 0.7610292284611874, [(1, 99), (2, 28)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [49, 59, 0]]
** centroid: 5, normalized-entropy: 0.9938067403672294, [(1, 49), (2, 59)]
*** center 6: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 64, 0]]
** centroid: 7, normalized-entropy: 0.11467550533614682, [(1, 1), (2, 64)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22952327291401609] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22952327291401609, 0.19347995300421203] ***
*** starting iteration: 2; err: [Inf, 0.22952327291401609, 0.19347995300421203] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22952327291401609, 0.19347995300421203, 0.19017931530140397] ***
*** starting iteration: 3; err: [Inf, 0.22952327291401609, 0.19347995300421203, 0.19017931530140397] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22952327291401609, 0.19347995300421203, 0.19017931530140397, 0.18879715420516568] ***
*** starting iteration: 4; err: [Inf, 0.22952327291401609, 0.19347995300421203, 0.19017931530140397, 0.18879715420516568] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22952327291401609, 0.19347995300421203, 0.19017931530140397, 0.18879715420516568, 0.18767855959250473] ***
*** starting iteration: 5; err: [Inf, 0.22952327291401609, 0.19347995300421203, 0.19017931530140397, 0.18879715420516568, 0.18767855959250473] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22952327291401609, 0.19347995300421203, 0.19017931530140397, 0.18879715420516568, 0.18767855959250473, 0.18655686588145268] ***
*** starting iteration: 6; err: [Inf, 0.22952327291401609, 0.19347995300421203, 0.19017931530140397, 0.18879715420516568, 0.18767855959250473, 0.18655686588145268] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22952327291401609, 0.19347995300421203, 0.19017931530140397, 0.18879715420516568, 0.18767855959250473, 0.18655686588145268, 0.18574517880003716] ***
*** finished computation of 7 references, err: [Inf, 0.22952327291401609, 0.19347995300421203, 0.19017931530140397, 0.18879715420516568, 0.18767855959250473, 0.18655686588145268, 0.18574517880003716] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 94, 14]]
** centroid: 1, normalized-entropy: 0.5564215672884282, [(2, 94), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [78, 9, 0]]
** centroid: 3, normalized-entropy: 0.47983202361612853, [(1, 78), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [96, 11, 0]]
** centroid: 4, normalized-entropy: 0.4778207445858079, [(1, 96), (2, 11)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [63, 38, 0]]
** centroid: 5, normalized-entropy: 0.9553413768968346, [(1, 63), (2, 38)]
*** center 6: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 82, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23028727155178785] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23028727155178785, 0.1977361876481231] ***
*** starting iteration: 2; err: [Inf, 0.23028727155178785, 0.1977361876481231] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23028727155178785, 0.1977361876481231, 0.19566012523521012] ***
*** starting iteration: 3; err: [Inf, 0.23028727155178785, 0.1977361876481231, 0.19566012523521012] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23028727155178785, 0.1977361876481231, 0.19566012523521012, 0.19529637014367682] ***
*** finished computation of 7 references, err: [Inf, 0.23028727155178785, 0.1977361876481231, 0.19566012523521012, 0.19529637014367682] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 88, 22]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(2, 88), (3, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [56, 20, 0]]
** centroid: 3, normalized-entropy: 0.8314743880097292, [(1, 56), (2, 20)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [109, 13, 0]]
** centroid: 4, normalized-entropy: 0.48944383152584386, [(1, 109), (2, 13)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [74, 27, 0]]
** centroid: 5, normalized-entropy: 0.837602456861142, [(1, 74), (2, 27)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 76, 1]]
** centroid: 6, normalized-entropy: 0.1000009430103234, [(2, 76), (3, 1)]
*** center 7: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 10)
[0.9419779060497624, 0.9359958761156366, 0.9290338242434052, 0.927025828223433, 0.9219548890207573, 0.8909927891963819, 0.8819687951424479, 0.7950045854237472, 0.708016399633166, 0.7018725312138486]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9419779060497624
finished with 10
iteration 2 finished
generating 4 configurations using top 12 configurations, starting with 10)
[0.9419779060497624, 0.9359958761156366, 0.9290338242434052, 0.927025828223433, 0.9219548890207573, 0.8909927891963819, 0.8819687951424479, 0.7950045854237472, 0.708016399633166, 0.7018725312138486]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9419779060497624
finished with 11
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.20847093414301304] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20847093414301304, 0.17587438023260407] ***
*** starting iteration: 2; err: [Inf, 0.20847093414301304, 0.17587438023260407] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20847093414301304, 0.17587438023260407, 0.16389868568835986] ***
*** starting iteration: 3; err: [Inf, 0.20847093414301304, 0.17587438023260407, 0.16389868568835986] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20847093414301304, 0.17587438023260407, 0.16389868568835986, 0.157385943555371] ***
*** finished computation of 7 references, err: [Inf, 0.20847093414301304, 0.17587438023260407, 0.16389868568835986, 0.157385943555371] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [13, 70, 0]]
** centroid: 1, normalized-entropy: 0.6261776539736496, [(1, 13), (2, 70)]
*** center 2: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [146, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [42, 54, 0]]
** centroid: 4, normalized-entropy: 0.9886994082884974, [(1, 42), (2, 54)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 53, 19]]
** centroid: 5, normalized-entropy: 0.8325582396745668, [(2, 53), (3, 19)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [20, 43, 0]]
** centroid: 6, normalized-entropy: 0.9015982354056711, [(1, 20), (2, 43)]
*** center 7: selecting labels [1] (freq >= 1) [from [115, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22471502446185523] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22471502446185523, 0.17113364857273816] ***
*** starting iteration: 2; err: [Inf, 0.22471502446185523, 0.17113364857273816] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22471502446185523, 0.17113364857273816, 0.1587267065807518] ***
*** starting iteration: 3; err: [Inf, 0.22471502446185523, 0.17113364857273816, 0.1587267065807518] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22471502446185523, 0.17113364857273816, 0.1587267065807518, 0.1524559215501487] ***
*** finished computation of 7 references, err: [Inf, 0.22471502446185523, 0.17113364857273816, 0.1587267065807518, 0.1524559215501487] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 103, 14]]
** centroid: 1, normalized-entropy: 0.5283773417314562, [(2, 103), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [111, 32, 0]]
** centroid: 5, normalized-entropy: 0.7670030768842512, [(1, 111), (2, 32)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [9, 52, 0]]
** centroid: 6, normalized-entropy: 0.603652249754401, [(1, 9), (2, 52)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [56, 47, 0]]
** centroid: 7, normalized-entropy: 0.994485462483463, [(1, 56), (2, 47)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21000732498933217] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21000732498933217, 0.16919529711271913] ***
*** starting iteration: 2; err: [Inf, 0.21000732498933217, 0.16919529711271913] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21000732498933217, 0.16919529711271913, 0.16149380841994773] ***
*** starting iteration: 3; err: [Inf, 0.21000732498933217, 0.16919529711271913, 0.16149380841994773] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21000732498933217, 0.16919529711271913, 0.16149380841994773, 0.15606417881626486] ***
*** finished computation of 7 references, err: [Inf, 0.21000732498933217, 0.16919529711271913, 0.16149380841994773, 0.15606417881626486] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [25, 59, 0]]
** centroid: 1, normalized-entropy: 0.8783609387702275, [(1, 25), (2, 59)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 84, 16]]
** centroid: 2, normalized-entropy: 0.634309554640566, [(2, 84), (3, 16)]
*** center 3: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 72, 7]]
** centroid: 4, normalized-entropy: 0.43180499427520785, [(2, 72), (3, 7)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [131, 5, 0]]
** centroid: 5, normalized-entropy: 0.22725656422208346, [(1, 131), (2, 5)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [87, 4, 0]]
** centroid: 6, normalized-entropy: 0.26014536394771426, [(1, 87), (2, 4)]
*** center 7: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 11)
[0.9419779060497624, 0.9359958761156366, 0.9290338242434052, 0.927025828223433, 0.9219548890207573, 0.9179838521155886, 0.8909927891963819, 0.8819687951424479, 0.7950045854237472, 0.708016399633166, 0.7018725312138486]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9419779060497624
finished with 12
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.2613243469744697] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2613243469744697, 0.21711967848297264] ***
*** starting iteration: 2; err: [Inf, 0.2613243469744697, 0.21711967848297264] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2613243469744697, 0.21711967848297264, 0.20421703149670842] ***
*** starting iteration: 3; err: [Inf, 0.2613243469744697, 0.21711967848297264, 0.20421703149670842] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2613243469744697, 0.21711967848297264, 0.20421703149670842, 0.19801875046879477] ***
*** finished computation of 7 references, err: [Inf, 0.2613243469744697, 0.21711967848297264, 0.20421703149670842, 0.19801875046879477] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 113, 19]]
** centroid: 1, normalized-entropy: 0.5944634715679662, [(2, 113), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [59, 36, 0]]
** centroid: 2, normalized-entropy: 0.9572951876544017, [(1, 59), (2, 36)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [113, 30, 0]]
** centroid: 3, normalized-entropy: 0.7410815422247408, [(1, 113), (2, 30)]
*** center 4: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [66, 41, 0]]
** centroid: 5, normalized-entropy: 0.9602553596067602, [(1, 66), (2, 41)]
*** center 6: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.33389299515232645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33389299515232645, 0.22161632574357462] ***
*** starting iteration: 2; err: [Inf, 0.33389299515232645, 0.22161632574357462] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33389299515232645, 0.22161632574357462, 0.20336722254311887] ***
*** starting iteration: 3; err: [Inf, 0.33389299515232645, 0.22161632574357462, 0.20336722254311887] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33389299515232645, 0.22161632574357462, 0.20336722254311887, 0.1978729866854176] ***
*** finished computation of 7 references, err: [Inf, 0.33389299515232645, 0.22161632574357462, 0.20336722254311887, 0.1978729866854176] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 83, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [78, 25, 0]]
** centroid: 2, normalized-entropy: 0.7995318105266797, [(1, 78), (2, 25)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 77, 14]]
** centroid: 3, normalized-entropy: 0.6193821946787638, [(2, 77), (3, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [101, 38, 0]]
** centroid: 4, normalized-entropy: 0.8462748477682016, [(1, 101), (2, 38)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [54, 11, 0]]
** centroid: 5, normalized-entropy: 0.6559420757694151, [(1, 54), (2, 11)]
*** center 6: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3137442423065641] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3137442423065641, 0.22321692409030144] ***
*** starting iteration: 2; err: [Inf, 0.3137442423065641, 0.22321692409030144] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3137442423065641, 0.22321692409030144, 0.2112450672528599] ***
*** starting iteration: 3; err: [Inf, 0.3137442423065641, 0.22321692409030144, 0.2112450672528599] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3137442423065641, 0.22321692409030144, 0.2112450672528599, 0.19894702762024646] ***
*** finished computation of 7 references, err: [Inf, 0.3137442423065641, 0.22321692409030144, 0.2112450672528599, 0.19894702762024646] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [56, 41, 0]]
** centroid: 1, normalized-entropy: 0.9826808027585991, [(1, 56), (2, 41)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [69, 18, 0]]
** centroid: 2, normalized-entropy: 0.7355085815538399, [(1, 69), (2, 18)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 93, 23]]
** centroid: 3, normalized-entropy: 0.7184663880382773, [(2, 93), (3, 23)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [5, 72, 0]]
** centroid: 4, normalized-entropy: 0.34673146824966367, [(1, 5), (2, 72)]
*** center 5: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 12)
[0.9419779060497624, 0.9359958761156366, 0.9329718940497385, 0.9290338242434052, 0.927025828223433, 0.9219548890207573, 0.9179838521155886, 0.8909927891963819, 0.8819687951424479, 0.7950045854237472, 0.708016399633166, 0.7018725312138486]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9419779060497624
finished with 14
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.3099113474516114] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3099113474516114, 0.2467944839711975] ***
*** finished computation of 3 references, err: [Inf, 0.3099113474516114, 0.2467944839711975] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [127, 103, 2]]
** centroid: 1, normalized-entropy: 0.6656827822215036, [(1, 127), (2, 103), (3, 2)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [140, 117, 17]]
** centroid: 2, normalized-entropy: 0.8000410972634961, [(1, 140), (2, 117), (3, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [160, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.301703749539406] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.301703749539406, 0.2367266235423499] ***
*** finished computation of 3 references, err: [Inf, 0.301703749539406, 0.2367266235423499] ***
*** center 1: selecting labels [1] (freq >= 2) [from [204, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [79, 155, 14]]
** centroid: 2, normalized-entropy: 0.746786148166425, [(1, 79), (2, 155), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [136, 79, 0]]
** centroid: 3, normalized-entropy: 0.9486876146311471, [(1, 136), (2, 79)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.27647625838547407] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27647625838547407, 0.24394425588926633] ***
*** finished computation of 3 references, err: [Inf, 0.27647625838547407, 0.24394425588926633] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [77, 167, 23]]
** centroid: 1, normalized-entropy: 0.7858093220834894, [(1, 77), (2, 167), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [235, 2, 0]]
** centroid: 2, normalized-entropy: 0.07025598120722565, [(1, 235), (2, 2)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [108, 55, 0]]
** centroid: 3, normalized-entropy: 0.9223316236942011, [(1, 108), (2, 55)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.35534536141298106] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35534536141298106, 0.30896616572103053] ***
*** finished computation of 3 references, err: [Inf, 0.35534536141298106, 0.30896616572103053] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [9, 192, 19]]
** centroid: 1, normalized-entropy: 0.4197013235958887, [(1, 9), (2, 192), (3, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [216, 13, 0]]
** centroid: 2, normalized-entropy: 0.3144814439784137, [(1, 216), (2, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [202, 15, 0]]
** centroid: 3, normalized-entropy: 0.3626476451173351, [(1, 202), (2, 15)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3629996040682385] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3629996040682385, 0.3322576947197474] ***
*** finished computation of 3 references, err: [Inf, 0.3629996040682385, 0.3322576947197474] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [137, 95, 0]]
** centroid: 1, normalized-entropy: 0.9762280720369161, [(1, 137), (2, 95)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [79, 121, 14]]
** centroid: 2, normalized-entropy: 0.7906960127901721, [(1, 79), (2, 121), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [203, 18, 0]]
** centroid: 3, normalized-entropy: 0.4072607439409681, [(1, 203), (2, 18)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4466953504763577] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4466953504763577, 0.34061194511446014] ***
*** finished computation of 3 references, err: [Inf, 0.4466953504763577, 0.34061194511446014] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [147, 150, 23]]
** centroid: 1, normalized-entropy: 0.8208010183992932, [(1, 147), (2, 150), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [146, 74, 0]]
** centroid: 2, normalized-entropy: 0.9212963741927287, [(1, 146), (2, 74)]
*** center 3: selecting labels [1] (freq >= 2) [from [127, 0, 0]]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 14)
[0.9419779060497624, 0.9359958761156366, 0.9359958761156365, 0.9329718940497385, 0.9290338242434052, 0.927025828223433, 0.9219548890207573, 0.9179838521155886, 0.9139978301654947, 0.8909927891963819, 0.8819687951424479, 0.7950045854237472, 0.708016399633166, 0.7018725312138486]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9419779060497624
finished with 14
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 14)
[0.9419779060497624, 0.9359958761156366, 0.9359958761156365, 0.9329718940497385, 0.9290338242434052, 0.927025828223433, 0.9219548890207573, 0.9179838521155886, 0.9139978301654947, 0.8909927891963819, 0.8819687951424479, 0.7950045854237472, 0.708016399633166, 0.7018725312138486]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9419779060497624
finished with 14
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 14)
[0.9419779060497624, 0.9359958761156366, 0.9359958761156365, 0.9329718940497385, 0.9290338242434052, 0.927025828223433, 0.9219548890207573, 0.9179838521155886, 0.9139978301654947, 0.8909927891963819, 0.8819687951424479, 0.7950045854237472, 0.708016399633166, 0.7018725312138486]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9419779060497624
finished with 16
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.37901340740769207] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37901340740769207, 0.25467264327268163] ***
*** starting iteration: 2; err: [Inf, 0.37901340740769207, 0.25467264327268163] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37901340740769207, 0.25467264327268163, 0.24734541670455634] ***
*** starting iteration: 3; err: [Inf, 0.37901340740769207, 0.25467264327268163, 0.24734541670455634] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37901340740769207, 0.25467264327268163, 0.24734541670455634, 0.2437737055399732] ***
*** finished computation of 3 references, err: [Inf, 0.37901340740769207, 0.25467264327268163, 0.24734541670455634, 0.2437737055399732] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [134, 75, 0]]
** centroid: 1, normalized-entropy: 0.9417258626620666, [(1, 134), (2, 75)]
*** center 2: selecting labels [1] (freq >= 1) [from [174, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [119, 145, 19]]
** centroid: 3, normalized-entropy: 0.8085209357684249, [(1, 119), (2, 145), (3, 19)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4203296436954742] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4203296436954742, 0.2518379605100162] ***
*** starting iteration: 2; err: [Inf, 0.4203296436954742, 0.2518379605100162] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4203296436954742, 0.2518379605100162, 0.24036763148100257] ***
*** starting iteration: 3; err: [Inf, 0.4203296436954742, 0.2518379605100162, 0.24036763148100257] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4203296436954742, 0.2518379605100162, 0.24036763148100257, 0.23763281747285483] ***
*** finished computation of 3 references, err: [Inf, 0.4203296436954742, 0.2518379605100162, 0.24036763148100257, 0.23763281747285483] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [257, 9, 0]]
** centroid: 1, normalized-entropy: 0.21327178078010892, [(1, 257), (2, 9)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [1, 194, 14]]
** centroid: 2, normalized-entropy: 0.25101947274562303, [(1, 1), (2, 194), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [161, 31, 0]]
** centroid: 3, normalized-entropy: 0.6377869642709142, [(1, 161), (2, 31)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3644754149723446] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3644754149723446, 0.2606205604230424] ***
*** starting iteration: 2; err: [Inf, 0.3644754149723446, 0.2606205604230424] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3644754149723446, 0.2606205604230424, 0.24605823343695105] ***
*** starting iteration: 3; err: [Inf, 0.3644754149723446, 0.2606205604230424, 0.24605823343695105] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3644754149723446, 0.2606205604230424, 0.24605823343695105, 0.24199629786132515] ***
*** finished computation of 3 references, err: [Inf, 0.3644754149723446, 0.2606205604230424, 0.24605823343695105, 0.24199629786132515] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 164, 23]]
** centroid: 1, normalized-entropy: 0.5379080762155668, [(2, 164), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [176, 55, 0]]
** centroid: 2, normalized-entropy: 0.7918583525674836, [(1, 176), (2, 55)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [244, 5, 0]]
** centroid: 3, normalized-entropy: 0.1418912861251851, [(1, 244), (2, 5)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.5350279872006437] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5350279872006437, 0.3315796288941335] ***
*** starting iteration: 2; err: [Inf, 0.5350279872006437, 0.3315796288941335] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5350279872006437, 0.3315796288941335, 0.30436305674883696] ***
*** starting iteration: 3; err: [Inf, 0.5350279872006437, 0.3315796288941335, 0.30436305674883696] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5350279872006437, 0.3315796288941335, 0.30436305674883696, 0.2966192713728896] ***
*** finished computation of 3 references, err: [Inf, 0.5350279872006437, 0.3315796288941335, 0.30436305674883696, 0.2966192713728896] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [170, 33, 0]]
** centroid: 1, normalized-entropy: 0.6404025916569088, [(1, 170), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [257, 27, 0]]
** centroid: 2, normalized-entropy: 0.45317151492285, [(1, 257), (2, 27)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 160, 19]]
** centroid: 3, normalized-entropy: 0.4881782468876859, [(2, 160), (3, 19)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33614031950115175] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33614031950115175, 0.2966359788887035] ***
*** starting iteration: 2; err: [Inf, 0.33614031950115175, 0.2966359788887035] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33614031950115175, 0.2966359788887035, 0.29550101992924105] ***
*** starting iteration: 3; err: [Inf, 0.33614031950115175, 0.2966359788887035, 0.29550101992924105] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33614031950115175, 0.2966359788887035, 0.29550101992924105, 0.2946713446727444] ***
*** finished computation of 3 references, err: [Inf, 0.33614031950115175, 0.2966359788887035, 0.29550101992924105, 0.2946713446727444] ***
*** center 1: selecting labels [1] (freq >= 1) [from [200, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [111, 84, 0]]
** centroid: 2, normalized-entropy: 0.9861260846302384, [(1, 111), (2, 84)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [108, 150, 14]]
** centroid: 3, normalized-entropy: 0.7715813232543076, [(1, 108), (2, 150), (3, 14)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.360059522749993] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.360059522749993, 0.3148264799873042] ***
*** starting iteration: 2; err: [Inf, 0.360059522749993, 0.3148264799873042] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.360059522749993, 0.3148264799873042, 0.30553708530995977] ***
*** starting iteration: 3; err: [Inf, 0.360059522749993, 0.3148264799873042, 0.30553708530995977] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.360059522749993, 0.3148264799873042, 0.30553708530995977, 0.30434645708186786] ***
*** finished computation of 3 references, err: [Inf, 0.360059522749993, 0.3148264799873042, 0.30553708530995977, 0.30434645708186786] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [182, 42, 0]]
** centroid: 1, normalized-entropy: 0.6962122601251459, [(1, 182), (2, 42)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [238, 23, 0]]
** centroid: 2, normalized-entropy: 0.4301720783453564, [(1, 238), (2, 23)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 159, 23]]
** centroid: 3, normalized-entropy: 0.5474082947068072, [(2, 159), (3, 23)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 16)
[0.9419779060497624, 0.9359958761156366, 0.9359958761156365, 0.9349858840876805, 0.9329718940497385, 0.9290338242434052, 0.927025828223433, 0.9219548890207573, 0.9179838521155886, 0.9139978301654947, 0.9000137862413311, 0.8909927891963819, 0.8819687951424479, 0.7950045854237472, 0.708016399633166, 0.7018725312138486]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.6, 1) => 0.9419779060497624
finished with 17
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.29916737609551297] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29916737609551297, 0.239556276456204] ***
*** finished computation of 7 references, err: [Inf, 0.29916737609551297, 0.239556276456204] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [216, 14, 0]]
** centroid: 1, normalized-entropy: 0.33088714061343766, [(1, 216), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [49, 12, 0]]
** centroid: 2, normalized-entropy: 0.7153220528038851, [(1, 49), (2, 12)]
*** center 3: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [1, 89, 0]]
** centroid: 5, normalized-entropy: 0.08807225904068142, [(1, 1), (2, 89)]
*** center 6: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 105, 19]]
** centroid: 7, normalized-entropy: 0.6178543578838833, [(2, 105), (3, 19)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3385400207353005] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3385400207353005, 0.23653719285461142] ***
*** finished computation of 7 references, err: [Inf, 0.3385400207353005, 0.23653719285461142] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [102, 89, 0]]
** centroid: 1, normalized-entropy: 0.9966557377891417, [(1, 102), (2, 89)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [109, 30, 0]]
** centroid: 2, normalized-entropy: 0.7524748189901224, [(1, 109), (2, 30)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 78, 14]]
** centroid: 3, normalized-entropy: 0.6152538910563409, [(2, 78), (3, 14)]
*** center 4: selecting labels [1] (freq >= 1) [from [122, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [39, 37, 0]]
** centroid: 6, normalized-entropy: 0.9995003941817588, [(1, 39), (2, 37)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2524582219569814] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2524582219569814, 0.2000104727983095] ***
*** finished computation of 7 references, err: [Inf, 0.2524582219569814, 0.2000104727983095] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [55, 25, 0]]
** centroid: 1, normalized-entropy: 0.8960382325345574, [(1, 55), (2, 25)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [81, 5, 0]]
** centroid: 2, normalized-entropy: 0.32001486274754665, [(1, 81), (2, 5)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [37, 35, 0]]
** centroid: 3, normalized-entropy: 0.9994433330902989, [(1, 37), (2, 35)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 90, 23]]
** centroid: 4, normalized-entropy: 0.7289514964064973, [(2, 90), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [42, 50, 0]]
** centroid: 5, normalized-entropy: 0.9945386816500111, [(1, 42), (2, 50)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [76, 19, 0]]
** centroid: 6, normalized-entropy: 0.7219280948873623, [(1, 76), (2, 19)]
*** center 7: selecting labels [1] (freq >= 1) [from [129, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.22200090931076558] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22200090931076558, 0.15782587552815674] ***
*** starting iteration: 2; err: [Inf, 0.22200090931076558, 0.15782587552815674] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22200090931076558, 0.15782587552815674, 0.153792892254889] ***
*** starting iteration: 3; err: [Inf, 0.22200090931076558, 0.15782587552815674, 0.153792892254889] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22200090931076558, 0.15782587552815674, 0.153792892254889, 0.1523819293677807] ***
*** starting iteration: 4; err: [Inf, 0.22200090931076558, 0.15782587552815674, 0.153792892254889, 0.1523819293677807] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22200090931076558, 0.15782587552815674, 0.153792892254889, 0.1523819293677807, 0.15165820944774897] ***
*** finished computation of 7 references, err: [Inf, 0.22200090931076558, 0.15782587552815674, 0.153792892254889, 0.1523819293677807, 0.15165820944774897] ***
*** center 1: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [108, 71, 0]]
** centroid: 2, normalized-entropy: 0.9689560246470108, [(1, 108), (2, 71)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [135, 43, 0]]
** centroid: 3, normalized-entropy: 0.7976464081908227, [(1, 135), (2, 43)]
*** center 4: selecting labels [1] (freq >= 1) [from [128, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [64, 66, 0]]
** centroid: 5, normalized-entropy: 0.9998292601233937, [(1, 64), (2, 66)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 159, 28]]
** centroid: 6, normalized-entropy: 0.6091707823056826, [(2, 159), (3, 28)]
*** center 7: selecting labels [1] (freq >= 1) [from [112, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20630875065736473] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20630875065736473, 0.16453560643829404] ***
*** starting iteration: 2; err: [Inf, 0.20630875065736473, 0.16453560643829404] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20630875065736473, 0.16453560643829404, 0.15849585567414762] ***
*** starting iteration: 3; err: [Inf, 0.20630875065736473, 0.16453560643829404, 0.15849585567414762] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20630875065736473, 0.16453560643829404, 0.15849585567414762, 0.15477192770363762] ***
*** starting iteration: 4; err: [Inf, 0.20630875065736473, 0.16453560643829404, 0.15849585567414762, 0.15477192770363762] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20630875065736473, 0.16453560643829404, 0.15849585567414762, 0.15477192770363762, 0.15300461578927935] ***
*** starting iteration: 5; err: [Inf, 0.20630875065736473, 0.16453560643829404, 0.15849585567414762, 0.15477192770363762, 0.15300461578927935] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20630875065736473, 0.16453560643829404, 0.15849585567414762, 0.15477192770363762, 0.15300461578927935, 0.1523457355070859] ***
*** finished computation of 7 references, err: [Inf, 0.20630875065736473, 0.16453560643829404, 0.15849585567414762, 0.15477192770363762, 0.15300461578927935, 0.1523457355070859] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [52, 7, 0]]
** centroid: 1, normalized-entropy: 0.5254506799086205, [(1, 52), (2, 7)]
*** center 2: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [23, 49, 0]]
** centroid: 4, normalized-entropy: 0.9037762882345833, [(1, 23), (2, 49)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [64, 36, 0]]
** centroid: 5, normalized-entropy: 0.9426831892554921, [(1, 64), (2, 36)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 76, 15]]
** centroid: 6, normalized-entropy: 0.6457523329916605, [(2, 76), (3, 15)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [55, 12, 0]]
** centroid: 7, normalized-entropy: 0.678114052360606, [(1, 55), (2, 12)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2383462660033256] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2383462660033256, 0.17430172903463245] ***
*** starting iteration: 2; err: [Inf, 0.2383462660033256, 0.17430172903463245] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2383462660033256, 0.17430172903463245, 0.1635835164040327] ***
*** starting iteration: 3; err: [Inf, 0.2383462660033256, 0.17430172903463245, 0.1635835164040327] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2383462660033256, 0.17430172903463245, 0.1635835164040327, 0.15661331708449872] ***
*** starting iteration: 4; err: [Inf, 0.2383462660033256, 0.17430172903463245, 0.1635835164040327, 0.15661331708449872] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2383462660033256, 0.17430172903463245, 0.1635835164040327, 0.15661331708449872, 0.15250509267300366] ***
*** starting iteration: 5; err: [Inf, 0.2383462660033256, 0.17430172903463245, 0.1635835164040327, 0.15661331708449872, 0.15250509267300366] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2383462660033256, 0.17430172903463245, 0.1635835164040327, 0.15661331708449872, 0.15250509267300366, 0.14961053926497697] ***
*** starting iteration: 6; err: [Inf, 0.2383462660033256, 0.17430172903463245, 0.1635835164040327, 0.15661331708449872, 0.15250509267300366, 0.14961053926497697] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2383462660033256, 0.17430172903463245, 0.1635835164040327, 0.15661331708449872, 0.15250509267300366, 0.14961053926497697, 0.1483839353332296] ***
*** starting iteration: 7; err: [Inf, 0.2383462660033256, 0.17430172903463245, 0.1635835164040327, 0.15661331708449872, 0.15250509267300366, 0.14961053926497697, 0.1483839353332296] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2383462660033256, 0.17430172903463245, 0.1635835164040327, 0.15661331708449872, 0.15250509267300366, 0.14961053926497697, 0.1483839353332296, 0.14763981838710605] ***
*** finished computation of 7 references, err: [Inf, 0.2383462660033256, 0.17430172903463245, 0.1635835164040327, 0.15661331708449872, 0.15250509267300366, 0.14961053926497697, 0.1483839353332296, 0.14763981838710605] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [70, 18, 0]]
** centroid: 1, normalized-entropy: 0.7309263775906009, [(1, 70), (2, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 55, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [47, 7, 0]]
** centroid: 5, normalized-entropy: 0.5564215672884282, [(1, 47), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [72, 10, 0]]
** centroid: 6, normalized-entropy: 0.5349436990971067, [(1, 72), (2, 10)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 76, 12]]
** centroid: 7, normalized-entropy: 0.5746356978376794, [(2, 76), (3, 12)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17404016336239875] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17404016336239875, 0.15337221471220255] ***
*** starting iteration: 2; err: [Inf, 0.17404016336239875, 0.15337221471220255] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17404016336239875, 0.15337221471220255, 0.14927796913124622] ***
*** starting iteration: 3; err: [Inf, 0.17404016336239875, 0.15337221471220255, 0.14927796913124622] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17404016336239875, 0.15337221471220255, 0.14927796913124622, 0.14804034615308045] ***
*** starting iteration: 4; err: [Inf, 0.17404016336239875, 0.15337221471220255, 0.14927796913124622, 0.14804034615308045] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17404016336239875, 0.15337221471220255, 0.14927796913124622, 0.14804034615308045, 0.14712714497651905] ***
*** finished computation of 7 references, err: [Inf, 0.17404016336239875, 0.15337221471220255, 0.14927796913124622, 0.14804034615308045, 0.14712714497651905] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [82, 7, 0]]
** centroid: 1, normalized-entropy: 0.3974104103699249, [(1, 82), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [14, 61, 0]]
** centroid: 2, normalized-entropy: 0.6944460704939805, [(1, 14), (2, 61)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [58, 7, 0]]
** centroid: 3, normalized-entropy: 0.49291577961610966, [(1, 58), (2, 7)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 64, 13]]
** centroid: 4, normalized-entropy: 0.6550239908788728, [(2, 64), (3, 13)]
*** center 5: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [57, 16, 0]]
** centroid: 6, normalized-entropy: 0.7586638628883696, [(1, 57), (2, 16)]
*** center 7: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19935515310708432] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19935515310708432, 0.15139749956130982] ***
*** starting iteration: 2; err: [Inf, 0.19935515310708432, 0.15139749956130982] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19935515310708432, 0.15139749956130982, 0.15005401860922574] ***
*** starting iteration: 3; err: [Inf, 0.19935515310708432, 0.15139749956130982, 0.15005401860922574] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19935515310708432, 0.15139749956130982, 0.15005401860922574, 0.14983563248068094] ***
*** finished computation of 7 references, err: [Inf, 0.19935515310708432, 0.15139749956130982, 0.15005401860922574, 0.14983563248068094] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [10, 67, 0]]
** centroid: 1, normalized-entropy: 0.557081908103416, [(1, 10), (2, 67)]
*** center 2: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [23, 54, 0]]
** centroid: 3, normalized-entropy: 0.8796975782775168, [(1, 23), (2, 54)]
*** center 4: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [55, 4, 0]]
** centroid: 5, normalized-entropy: 0.3576467062456333, [(1, 55), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [77, 2, 0]]
** centroid: 6, normalized-entropy: 0.17033057560105982, [(1, 77), (2, 2)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 43, 19]]
** centroid: 7, normalized-entropy: 0.8890349038123858, [(2, 43), (3, 19)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18469552459102123] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18469552459102123, 0.16128934779111295] ***
*** starting iteration: 2; err: [Inf, 0.18469552459102123, 0.16128934779111295] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18469552459102123, 0.16128934779111295, 0.15362238822318613] ***
*** starting iteration: 3; err: [Inf, 0.18469552459102123, 0.16128934779111295, 0.15362238822318613] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18469552459102123, 0.16128934779111295, 0.15362238822318613, 0.15055797694995998] ***
*** starting iteration: 4; err: [Inf, 0.18469552459102123, 0.16128934779111295, 0.15362238822318613, 0.15055797694995998] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18469552459102123, 0.16128934779111295, 0.15362238822318613, 0.15055797694995998, 0.14836470047477632] ***
*** starting iteration: 5; err: [Inf, 0.18469552459102123, 0.16128934779111295, 0.15362238822318613, 0.15055797694995998, 0.14836470047477632] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18469552459102123, 0.16128934779111295, 0.15362238822318613, 0.15055797694995998, 0.14836470047477632, 0.14696455059573055] ***
*** starting iteration: 6; err: [Inf, 0.18469552459102123, 0.16128934779111295, 0.15362238822318613, 0.15055797694995998, 0.14836470047477632, 0.14696455059573055] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18469552459102123, 0.16128934779111295, 0.15362238822318613, 0.15055797694995998, 0.14836470047477632, 0.14696455059573055, 0.1463830424505286] ***
*** finished computation of 7 references, err: [Inf, 0.18469552459102123, 0.16128934779111295, 0.15362238822318613, 0.15055797694995998, 0.14836470047477632, 0.14696455059573055, 0.1463830424505286] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 52, 15]]
** centroid: 1, normalized-entropy: 0.7671903206448686, [(2, 52), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [72, 13, 0]]
** centroid: 3, normalized-entropy: 0.617151919200282, [(1, 72), (2, 13)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [52, 11, 0]]
** centroid: 4, normalized-entropy: 0.6681273338436138, [(1, 52), (2, 11)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [75, 1, 0]]
** centroid: 5, normalized-entropy: 0.10106696361212422, [(1, 75), (2, 1)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 55, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [28, 48, 0]]
** centroid: 7, normalized-entropy: 0.9494520153879484, [(1, 28), (2, 48)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19556812499091028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19556812499091028, 0.16441113413125277] ***
*** starting iteration: 2; err: [Inf, 0.19556812499091028, 0.16441113413125277] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19556812499091028, 0.16441113413125277, 0.1580906479684636] ***
*** starting iteration: 3; err: [Inf, 0.19556812499091028, 0.16441113413125277, 0.1580906479684636] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19556812499091028, 0.16441113413125277, 0.1580906479684636, 0.15415866534598172] ***
*** starting iteration: 4; err: [Inf, 0.19556812499091028, 0.16441113413125277, 0.1580906479684636, 0.15415866534598172] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19556812499091028, 0.16441113413125277, 0.1580906479684636, 0.15415866534598172, 0.1512075314298272] ***
*** starting iteration: 5; err: [Inf, 0.19556812499091028, 0.16441113413125277, 0.1580906479684636, 0.15415866534598172, 0.1512075314298272] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19556812499091028, 0.16441113413125277, 0.1580906479684636, 0.15415866534598172, 0.1512075314298272, 0.1495547485826537] ***
*** starting iteration: 6; err: [Inf, 0.19556812499091028, 0.16441113413125277, 0.1580906479684636, 0.15415866534598172, 0.1512075314298272, 0.1495547485826537] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19556812499091028, 0.16441113413125277, 0.1580906479684636, 0.15415866534598172, 0.1512075314298272, 0.1495547485826537, 0.14872478500660508] ***
*** finished computation of 7 references, err: [Inf, 0.19556812499091028, 0.16441113413125277, 0.1580906479684636, 0.15415866534598172, 0.1512075314298272, 0.1495547485826537, 0.14872478500660508] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [58, 4, 0]]
** centroid: 1, normalized-entropy: 0.3451173149449528, [(1, 58), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [14, 68, 0]]
** centroid: 2, normalized-entropy: 0.6593758812786991, [(1, 14), (2, 68)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [21, 44, 0]]
** centroid: 3, normalized-entropy: 0.9076961653608385, [(1, 21), (2, 44)]
*** center 4: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 44, 15]]
** centroid: 6, normalized-entropy: 0.8179252501386403, [(2, 44), (3, 15)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [78, 3, 0]]
** centroid: 7, normalized-entropy: 0.22853814395352806, [(1, 78), (2, 3)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19801626575551928] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19801626575551928, 0.15472710081283003] ***
*** starting iteration: 2; err: [Inf, 0.19801626575551928, 0.15472710081283003] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19801626575551928, 0.15472710081283003, 0.14994902935624121] ***
*** starting iteration: 3; err: [Inf, 0.19801626575551928, 0.15472710081283003, 0.14994902935624121] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19801626575551928, 0.15472710081283003, 0.14994902935624121, 0.14742826995439828] ***
*** starting iteration: 4; err: [Inf, 0.19801626575551928, 0.15472710081283003, 0.14994902935624121, 0.14742826995439828] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19801626575551928, 0.15472710081283003, 0.14994902935624121, 0.14742826995439828, 0.14615539705753328] ***
*** starting iteration: 5; err: [Inf, 0.19801626575551928, 0.15472710081283003, 0.14994902935624121, 0.14742826995439828, 0.14615539705753328] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19801626575551928, 0.15472710081283003, 0.14994902935624121, 0.14742826995439828, 0.14615539705753328, 0.14483594376035033] ***
*** starting iteration: 6; err: [Inf, 0.19801626575551928, 0.15472710081283003, 0.14994902935624121, 0.14742826995439828, 0.14615539705753328, 0.14483594376035033] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19801626575551928, 0.15472710081283003, 0.14994902935624121, 0.14742826995439828, 0.14615539705753328, 0.14483594376035033, 0.1442667124401778] ***
*** finished computation of 7 references, err: [Inf, 0.19801626575551928, 0.15472710081283003, 0.14994902935624121, 0.14742826995439828, 0.14615539705753328, 0.14483594376035033, 0.1442667124401778] ***
*** center 1: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 55, 8]]
** centroid: 2, normalized-entropy: 0.5491087450260074, [(2, 55), (3, 8)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [37, 17, 0]]
** centroid: 3, normalized-entropy: 0.8986533756907481, [(1, 37), (2, 17)]
*** center 4: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [87, 13, 0]]
** centroid: 5, normalized-entropy: 0.557438185027989, [(1, 87), (2, 13)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [50, 34, 0]]
** centroid: 6, normalized-entropy: 0.9736680645496202, [(1, 50), (2, 34)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 54, 3]]
** centroid: 7, normalized-entropy: 0.2974722489192896, [(2, 54), (3, 3)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2085679214335978] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2085679214335978, 0.1601764896083623] ***
*** starting iteration: 2; err: [Inf, 0.2085679214335978, 0.1601764896083623] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2085679214335978, 0.1601764896083623, 0.1545466758515686] ***
*** starting iteration: 3; err: [Inf, 0.2085679214335978, 0.1601764896083623, 0.1545466758515686] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2085679214335978, 0.1601764896083623, 0.1545466758515686, 0.15235366524383426] ***
*** starting iteration: 4; err: [Inf, 0.2085679214335978, 0.1601764896083623, 0.1545466758515686, 0.15235366524383426] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2085679214335978, 0.1601764896083623, 0.1545466758515686, 0.15235366524383426, 0.1517185195814818] ***
*** finished computation of 7 references, err: [Inf, 0.2085679214335978, 0.1601764896083623, 0.1545466758515686, 0.15235366524383426, 0.1517185195814818] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [50, 21, 0]]
** centroid: 1, normalized-entropy: 0.8760643678555242, [(1, 50), (2, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [77, 27, 0]]
** centroid: 2, normalized-entropy: 0.826165427834159, [(1, 77), (2, 27)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [62, 2, 0]]
** centroid: 3, normalized-entropy: 0.2006223243127146, [(1, 62), (2, 2)]
*** center 4: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 72, 15]]
** centroid: 5, normalized-entropy: 0.6631968402398286, [(2, 72), (3, 15)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [22, 54, 0]]
** centroid: 6, normalized-entropy: 0.8680403986166402, [(1, 22), (2, 54)]
*** center 7: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20005713271535933] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20005713271535933, 0.15746064189821482] ***
*** starting iteration: 2; err: [Inf, 0.20005713271535933, 0.15746064189821482] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20005713271535933, 0.15746064189821482, 0.15255506489193066] ***
*** starting iteration: 3; err: [Inf, 0.20005713271535933, 0.15746064189821482, 0.15255506489193066] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20005713271535933, 0.15746064189821482, 0.15255506489193066, 0.1501850917302072] ***
*** starting iteration: 4; err: [Inf, 0.20005713271535933, 0.15746064189821482, 0.15255506489193066, 0.1501850917302072] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20005713271535933, 0.15746064189821482, 0.15255506489193066, 0.1501850917302072, 0.14839016961911694] ***
*** starting iteration: 5; err: [Inf, 0.20005713271535933, 0.15746064189821482, 0.15255506489193066, 0.1501850917302072, 0.14839016961911694] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20005713271535933, 0.15746064189821482, 0.15255506489193066, 0.1501850917302072, 0.14839016961911694, 0.14812616308312862] ***
*** finished computation of 7 references, err: [Inf, 0.20005713271535933, 0.15746064189821482, 0.15255506489193066, 0.1501850917302072, 0.14839016961911694, 0.14812616308312862] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 56, 4]]
** centroid: 1, normalized-entropy: 0.3533593350214213, [(2, 56), (3, 4)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [47, 14, 0]]
** centroid: 2, normalized-entropy: 0.7771529943226336, [(1, 47), (2, 14)]
*** center 3: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 69, 11]]
** centroid: 4, normalized-entropy: 0.5776539033535634, [(2, 69), (3, 11)]
*** center 5: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [78, 15, 0]]
** centroid: 6, normalized-entropy: 0.6373874992221911, [(1, 78), (2, 15)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [44, 24, 0]]
** centroid: 7, normalized-entropy: 0.9366673818775627, [(1, 44), (2, 24)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22149122191499918] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22149122191499918, 0.17067334466148168] ***
*** starting iteration: 2; err: [Inf, 0.22149122191499918, 0.17067334466148168] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22149122191499918, 0.17067334466148168, 0.1577283288948238] ***
*** starting iteration: 3; err: [Inf, 0.22149122191499918, 0.17067334466148168, 0.1577283288948238] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22149122191499918, 0.17067334466148168, 0.1577283288948238, 0.15344538737693802] ***
*** starting iteration: 4; err: [Inf, 0.22149122191499918, 0.17067334466148168, 0.1577283288948238, 0.15344538737693802] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22149122191499918, 0.17067334466148168, 0.1577283288948238, 0.15344538737693802, 0.15143948302604257] ***
*** starting iteration: 5; err: [Inf, 0.22149122191499918, 0.17067334466148168, 0.1577283288948238, 0.15344538737693802, 0.15143948302604257] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22149122191499918, 0.17067334466148168, 0.1577283288948238, 0.15344538737693802, 0.15143948302604257, 0.15060143149457872] ***
*** finished computation of 7 references, err: [Inf, 0.22149122191499918, 0.17067334466148168, 0.1577283288948238, 0.15344538737693802, 0.15143948302604257, 0.15060143149457872] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [26, 33, 0]]
** centroid: 1, normalized-entropy: 0.9898220559635807, [(1, 26), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [82, 2, 0]]
** centroid: 2, normalized-entropy: 0.1623261801753929, [(1, 82), (2, 2)]
*** center 3: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 78, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 37, 14]]
** centroid: 6, normalized-entropy: 0.8478617451660525, [(2, 37), (3, 14)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [61, 12, 0]]
** centroid: 7, normalized-entropy: 0.644694043811662, [(1, 61), (2, 12)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17671806612424554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17671806612424554, 0.15669443626329302] ***
*** starting iteration: 2; err: [Inf, 0.17671806612424554, 0.15669443626329302] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17671806612424554, 0.15669443626329302, 0.15488549734279514] ***
*** starting iteration: 3; err: [Inf, 0.17671806612424554, 0.15669443626329302, 0.15488549734279514] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17671806612424554, 0.15669443626329302, 0.15488549734279514, 0.15424823724478484] ***
*** finished computation of 7 references, err: [Inf, 0.17671806612424554, 0.15669443626329302, 0.15488549734279514, 0.15424823724478484] ***
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [35, 30, 0]]
** centroid: 2, normalized-entropy: 0.9957274520849256, [(1, 35), (2, 30)]
*** center 3: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 98, 16]]
** centroid: 4, normalized-entropy: 0.5851569902762294, [(2, 98), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [61, 28, 0]]
** centroid: 5, normalized-entropy: 0.898419774686072, [(1, 61), (2, 28)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [72, 19, 0]]
** centroid: 6, normalized-entropy: 0.7391658175693049, [(1, 72), (2, 19)]
*** center 7: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20147535401582717] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20147535401582717, 0.15659188692644238] ***
*** starting iteration: 2; err: [Inf, 0.20147535401582717, 0.15659188692644238] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20147535401582717, 0.15659188692644238, 0.15137744177877904] ***
*** starting iteration: 3; err: [Inf, 0.20147535401582717, 0.15659188692644238, 0.15137744177877904] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20147535401582717, 0.15659188692644238, 0.15137744177877904, 0.14984283961169423] ***
*** starting iteration: 4; err: [Inf, 0.20147535401582717, 0.15659188692644238, 0.15137744177877904, 0.14984283961169423] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20147535401582717, 0.15659188692644238, 0.15137744177877904, 0.14984283961169423, 0.1494578918647021] ***
*** finished computation of 7 references, err: [Inf, 0.20147535401582717, 0.15659188692644238, 0.15137744177877904, 0.14984283961169423, 0.1494578918647021] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 62, 12]]
** centroid: 1, normalized-entropy: 0.6394571324851642, [(2, 62), (3, 12)]
*** center 2: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [73, 23, 0]]
** centroid: 3, normalized-entropy: 0.7943466904341503, [(1, 73), (2, 23)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [20, 41, 0]]
** centroid: 4, normalized-entropy: 0.9127341558073343, [(1, 20), (2, 41)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [51, 38, 0]]
** centroid: 5, normalized-entropy: 0.9845543528607513, [(1, 51), (2, 38)]
*** center 6: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1775378400515765] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1775378400515765, 0.15569406495057048] ***
*** starting iteration: 2; err: [Inf, 0.1775378400515765, 0.15569406495057048] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1775378400515765, 0.15569406495057048, 0.15242714051436632] ***
*** starting iteration: 3; err: [Inf, 0.1775378400515765, 0.15569406495057048, 0.15242714051436632] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1775378400515765, 0.15569406495057048, 0.15242714051436632, 0.15155204112641513] ***
*** finished computation of 7 references, err: [Inf, 0.1775378400515765, 0.15569406495057048, 0.15242714051436632, 0.15155204112641513] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 57, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 70, 10]]
** centroid: 2, normalized-entropy: 0.5435644431995963, [(2, 70), (3, 10)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [57, 4, 0]]
** centroid: 3, normalized-entropy: 0.34918437350730797, [(1, 57), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [39, 23, 0]]
** centroid: 4, normalized-entropy: 0.9514122535330207, [(1, 39), (2, 23)]
*** center 5: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [73, 1, 0]]
** centroid: 6, normalized-entropy: 0.10327508457163559, [(1, 73), (2, 1)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [53, 14, 0]]
** centroid: 7, normalized-entropy: 0.7394809367166378, [(1, 53), (2, 14)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18266075445525348] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18266075445525348, 0.1634907368393615] ***
*** starting iteration: 2; err: [Inf, 0.18266075445525348, 0.1634907368393615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18266075445525348, 0.1634907368393615, 0.15886521768942474] ***
*** starting iteration: 3; err: [Inf, 0.18266075445525348, 0.1634907368393615, 0.15886521768942474] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18266075445525348, 0.1634907368393615, 0.15886521768942474, 0.15697221811674536] ***
*** starting iteration: 4; err: [Inf, 0.18266075445525348, 0.1634907368393615, 0.15886521768942474, 0.15697221811674536] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18266075445525348, 0.1634907368393615, 0.15886521768942474, 0.15697221811674536, 0.15529772412776946] ***
*** starting iteration: 5; err: [Inf, 0.18266075445525348, 0.1634907368393615, 0.15886521768942474, 0.15697221811674536, 0.15529772412776946] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18266075445525348, 0.1634907368393615, 0.15886521768942474, 0.15697221811674536, 0.15529772412776946, 0.15390783214755357] ***
*** starting iteration: 6; err: [Inf, 0.18266075445525348, 0.1634907368393615, 0.15886521768942474, 0.15697221811674536, 0.15529772412776946, 0.15390783214755357] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18266075445525348, 0.1634907368393615, 0.15886521768942474, 0.15697221811674536, 0.15529772412776946, 0.15390783214755357, 0.15307004837319255] ***
*** finished computation of 7 references, err: [Inf, 0.18266075445525348, 0.1634907368393615, 0.15886521768942474, 0.15697221811674536, 0.15529772412776946, 0.15390783214755357, 0.15307004837319255] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [35, 18, 0]]
** centroid: 1, normalized-entropy: 0.9244571409964927, [(1, 35), (2, 18)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 85, 15]]
** centroid: 2, normalized-entropy: 0.6098403047164005, [(2, 85), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [74, 7, 0]]
** centroid: 3, normalized-entropy: 0.42440514472480345, [(1, 74), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [67, 25, 0]]
** centroid: 4, normalized-entropy: 0.8439491244805034, [(1, 67), (2, 25)]
*** center 5: selecting labels [1] (freq >= 1) [from [45, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [55, 27, 0]]
** centroid: 6, normalized-entropy: 0.9141770436147919, [(1, 55), (2, 27)]
*** center 7: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25653816618584097] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25653816618584097, 0.15803077374957503] ***
*** starting iteration: 2; err: [Inf, 0.25653816618584097, 0.15803077374957503] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25653816618584097, 0.15803077374957503, 0.15012188493367284] ***
*** starting iteration: 3; err: [Inf, 0.25653816618584097, 0.15803077374957503, 0.15012188493367284] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25653816618584097, 0.15803077374957503, 0.15012188493367284, 0.1493867719564587] ***
*** finished computation of 7 references, err: [Inf, 0.25653816618584097, 0.15803077374957503, 0.15012188493367284, 0.1493867719564587] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [6, 47, 0]]
** centroid: 1, normalized-entropy: 0.5095157180881823, [(1, 6), (2, 47)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 30, 14]]
** centroid: 2, normalized-entropy: 0.9023932827949788, [(2, 30), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [96, 6, 0]]
** centroid: 3, normalized-entropy: 0.32275695889739825, [(1, 96), (2, 6)]
*** center 4: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [55, 17, 0]]
** centroid: 5, normalized-entropy: 0.7885131605379784, [(1, 55), (2, 17)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 77, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22860163349844514] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22860163349844514, 0.15892671768926084] ***
*** starting iteration: 2; err: [Inf, 0.22860163349844514, 0.15892671768926084] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22860163349844514, 0.15892671768926084, 0.14999833536334337] ***
*** starting iteration: 3; err: [Inf, 0.22860163349844514, 0.15892671768926084, 0.14999833536334337] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22860163349844514, 0.15892671768926084, 0.14999833536334337, 0.14734689550474286] ***
*** starting iteration: 4; err: [Inf, 0.22860163349844514, 0.15892671768926084, 0.14999833536334337, 0.14734689550474286] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22860163349844514, 0.15892671768926084, 0.14999833536334337, 0.14734689550474286, 0.14629708579368889] ***
*** starting iteration: 5; err: [Inf, 0.22860163349844514, 0.15892671768926084, 0.14999833536334337, 0.14734689550474286, 0.14629708579368889] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22860163349844514, 0.15892671768926084, 0.14999833536334337, 0.14734689550474286, 0.14629708579368889, 0.14584988244716077] ***
*** finished computation of 7 references, err: [Inf, 0.22860163349844514, 0.15892671768926084, 0.14999833536334337, 0.14734689550474286, 0.14629708579368889, 0.14584988244716077] ***
*** center 1: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [8, 38, 0]]
** centroid: 2, normalized-entropy: 0.6665783579949205, [(1, 8), (2, 38)]
*** center 3: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 67, 10]]
** centroid: 4, normalized-entropy: 0.557081908103416, [(2, 67), (3, 10)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [19, 44, 0]]
** centroid: 5, normalized-entropy: 0.8832225588099292, [(1, 19), (2, 44)]
*** center 6: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [63, 30, 0]]
** centroid: 7, normalized-entropy: 0.9071657675730821, [(1, 63), (2, 30)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20604010708630086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20604010708630086, 0.16854710161592812] ***
*** starting iteration: 2; err: [Inf, 0.20604010708630086, 0.16854710161592812] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20604010708630086, 0.16854710161592812, 0.1600976099986583] ***
*** starting iteration: 3; err: [Inf, 0.20604010708630086, 0.16854710161592812, 0.1600976099986583] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20604010708630086, 0.16854710161592812, 0.1600976099986583, 0.15560469642817043] ***
*** starting iteration: 4; err: [Inf, 0.20604010708630086, 0.16854710161592812, 0.1600976099986583, 0.15560469642817043] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20604010708630086, 0.16854710161592812, 0.1600976099986583, 0.15560469642817043, 0.1538053040234372] ***
*** starting iteration: 5; err: [Inf, 0.20604010708630086, 0.16854710161592812, 0.1600976099986583, 0.15560469642817043, 0.1538053040234372] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20604010708630086, 0.16854710161592812, 0.1600976099986583, 0.15560469642817043, 0.1538053040234372, 0.1526000074353069] ***
*** starting iteration: 6; err: [Inf, 0.20604010708630086, 0.16854710161592812, 0.1600976099986583, 0.15560469642817043, 0.1538053040234372, 0.1526000074353069] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20604010708630086, 0.16854710161592812, 0.1600976099986583, 0.15560469642817043, 0.1538053040234372, 0.1526000074353069, 0.15204509808123112] ***
*** finished computation of 7 references, err: [Inf, 0.20604010708630086, 0.16854710161592812, 0.1600976099986583, 0.15560469642817043, 0.1538053040234372, 0.1526000074353069, 0.15204509808123112] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [35, 40, 0]]
** centroid: 1, normalized-entropy: 0.9967916319816367, [(1, 35), (2, 40)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 91, 11]]
** centroid: 2, normalized-entropy: 0.493375733509813, [(2, 91), (3, 11)]
*** center 3: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [33, 34, 0]]
** centroid: 4, normalized-entropy: 0.9998393017810486, [(1, 33), (2, 34)]
*** center 5: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [72, 15, 0]]
** centroid: 6, normalized-entropy: 0.6631968402398286, [(1, 72), (2, 15)]
*** center 7: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2172784805202391] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2172784805202391, 0.16149067782610654] ***
*** starting iteration: 2; err: [Inf, 0.2172784805202391, 0.16149067782610654] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2172784805202391, 0.16149067782610654, 0.15229933020845055] ***
*** starting iteration: 3; err: [Inf, 0.2172784805202391, 0.16149067782610654, 0.15229933020845055] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2172784805202391, 0.16149067782610654, 0.15229933020845055, 0.15046906127408147] ***
*** starting iteration: 4; err: [Inf, 0.2172784805202391, 0.16149067782610654, 0.15229933020845055, 0.15046906127408147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2172784805202391, 0.16149067782610654, 0.15229933020845055, 0.15046906127408147, 0.14959106420259924] ***
*** finished computation of 7 references, err: [Inf, 0.2172784805202391, 0.16149067782610654, 0.15229933020845055, 0.15046906127408147, 0.14959106420259924] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 26, 17]]
** centroid: 1, normalized-entropy: 0.9681647320759545, [(2, 26), (3, 17)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 61, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [80, 1, 0]]
** centroid: 3, normalized-entropy: 0.09597040299587173, [(1, 80), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [56, 20, 0]]
** centroid: 4, normalized-entropy: 0.8314743880097292, [(1, 56), (2, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [80, 14, 0]]
** centroid: 5, normalized-entropy: 0.607171654871303, [(1, 80), (2, 14)]
*** center 6: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 58, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20162236124463379] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20162236124463379, 0.16346278639510273] ***
*** starting iteration: 2; err: [Inf, 0.20162236124463379, 0.16346278639510273] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20162236124463379, 0.16346278639510273, 0.15583099520020188] ***
*** starting iteration: 3; err: [Inf, 0.20162236124463379, 0.16346278639510273, 0.15583099520020188] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20162236124463379, 0.16346278639510273, 0.15583099520020188, 0.1538863084409386] ***
*** starting iteration: 4; err: [Inf, 0.20162236124463379, 0.16346278639510273, 0.15583099520020188, 0.1538863084409386] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20162236124463379, 0.16346278639510273, 0.15583099520020188, 0.1538863084409386, 0.15242959715100005] ***
*** starting iteration: 5; err: [Inf, 0.20162236124463379, 0.16346278639510273, 0.15583099520020188, 0.1538863084409386, 0.15242959715100005] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20162236124463379, 0.16346278639510273, 0.15583099520020188, 0.1538863084409386, 0.15242959715100005, 0.15201950308308004] ***
*** finished computation of 7 references, err: [Inf, 0.20162236124463379, 0.16346278639510273, 0.15583099520020188, 0.1538863084409386, 0.15242959715100005, 0.15201950308308004] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [45, 37, 0]]
** centroid: 1, normalized-entropy: 0.9931231770192241, [(1, 45), (2, 37)]
*** center 2: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 52, 1]]
** centroid: 3, normalized-entropy: 0.13503620280212753, [(2, 52), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 49, 13]]
** centroid: 4, normalized-entropy: 0.7408656862339816, [(2, 49), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [83, 20, 0]]
** centroid: 5, normalized-entropy: 0.7101234912653349, [(1, 83), (2, 20)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [35, 12, 0]]
** centroid: 6, normalized-entropy: 0.8196004346196011, [(1, 35), (2, 12)]
*** center 7: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21226366991735995] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21226366991735995, 0.16426427488960327] ***
*** starting iteration: 2; err: [Inf, 0.21226366991735995, 0.16426427488960327] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21226366991735995, 0.16426427488960327, 0.15810847191512584] ***
*** starting iteration: 3; err: [Inf, 0.21226366991735995, 0.16426427488960327, 0.15810847191512584] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21226366991735995, 0.16426427488960327, 0.15810847191512584, 0.15506495202705264] ***
*** starting iteration: 4; err: [Inf, 0.21226366991735995, 0.16426427488960327, 0.15810847191512584, 0.15506495202705264] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21226366991735995, 0.16426427488960327, 0.15810847191512584, 0.15506495202705264, 0.15262443640641868] ***
*** starting iteration: 5; err: [Inf, 0.21226366991735995, 0.16426427488960327, 0.15810847191512584, 0.15506495202705264, 0.15262443640641868] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21226366991735995, 0.16426427488960327, 0.15810847191512584, 0.15506495202705264, 0.15262443640641868, 0.1513450402303133] ***
*** starting iteration: 6; err: [Inf, 0.21226366991735995, 0.16426427488960327, 0.15810847191512584, 0.15506495202705264, 0.15262443640641868, 0.1513450402303133] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21226366991735995, 0.16426427488960327, 0.15810847191512584, 0.15506495202705264, 0.15262443640641868, 0.1513450402303133, 0.15065718353539706] ***
*** finished computation of 7 references, err: [Inf, 0.21226366991735995, 0.16426427488960327, 0.15810847191512584, 0.15506495202705264, 0.15262443640641868, 0.1513450402303133, 0.15065718353539706] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [36, 35, 0]]
** centroid: 1, normalized-entropy: 0.9998568991526107, [(1, 36), (2, 35)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [65, 23, 0]]
** centroid: 2, normalized-entropy: 0.828797154590015, [(1, 65), (2, 23)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 71, 10]]
** centroid: 3, normalized-entropy: 0.5392163432092415, [(2, 71), (3, 10)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [14, 49, 0]]
** centroid: 4, normalized-entropy: 0.7642045065086204, [(1, 14), (2, 49)]
*** center 5: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2589460235219449] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2589460235219449, 0.18118836062494664] ***
*** starting iteration: 2; err: [Inf, 0.2589460235219449, 0.18118836062494664] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2589460235219449, 0.18118836062494664, 0.16034071486524773] ***
*** starting iteration: 3; err: [Inf, 0.2589460235219449, 0.18118836062494664, 0.16034071486524773] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2589460235219449, 0.18118836062494664, 0.16034071486524773, 0.15200998971797525] ***
*** starting iteration: 4; err: [Inf, 0.2589460235219449, 0.18118836062494664, 0.16034071486524773, 0.15200998971797525] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2589460235219449, 0.18118836062494664, 0.16034071486524773, 0.15200998971797525, 0.14925942974118517] ***
*** starting iteration: 5; err: [Inf, 0.2589460235219449, 0.18118836062494664, 0.16034071486524773, 0.15200998971797525, 0.14925942974118517] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2589460235219449, 0.18118836062494664, 0.16034071486524773, 0.15200998971797525, 0.14925942974118517, 0.14758688317984342] ***
*** starting iteration: 6; err: [Inf, 0.2589460235219449, 0.18118836062494664, 0.16034071486524773, 0.15200998971797525, 0.14925942974118517, 0.14758688317984342] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2589460235219449, 0.18118836062494664, 0.16034071486524773, 0.15200998971797525, 0.14925942974118517, 0.14758688317984342, 0.1467976551875472] ***
*** finished computation of 7 references, err: [Inf, 0.2589460235219449, 0.18118836062494664, 0.16034071486524773, 0.15200998971797525, 0.14925942974118517, 0.14758688317984342, 0.1467976551875472] ***
*** center 1: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [69, 21, 0]]
** centroid: 3, normalized-entropy: 0.7837769474847011, [(1, 69), (2, 21)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 69, 11]]
** centroid: 4, normalized-entropy: 0.5776539033535634, [(2, 69), (3, 11)]
*** center 5: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [40, 36, 0]]
** centroid: 6, normalized-entropy: 0.9980008838722993, [(1, 40), (2, 36)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [30, 29, 0]]
** centroid: 7, normalized-entropy: 0.9997927658541268, [(1, 30), (2, 29)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24513726711180062] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24513726711180062, 0.1593716207612306] ***
*** starting iteration: 2; err: [Inf, 0.24513726711180062, 0.1593716207612306] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24513726711180062, 0.1593716207612306, 0.1497835974181071] ***
*** starting iteration: 3; err: [Inf, 0.24513726711180062, 0.1593716207612306, 0.1497835974181071] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24513726711180062, 0.1593716207612306, 0.1497835974181071, 0.14700163266062735] ***
*** starting iteration: 4; err: [Inf, 0.24513726711180062, 0.1593716207612306, 0.1497835974181071, 0.14700163266062735] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24513726711180062, 0.1593716207612306, 0.1497835974181071, 0.14700163266062735, 0.14600576914846897] ***
*** finished computation of 7 references, err: [Inf, 0.24513726711180062, 0.1593716207612306, 0.1497835974181071, 0.14700163266062735, 0.14600576914846897] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [64, 14, 0]]
** centroid: 1, normalized-entropy: 0.6789538995185759, [(1, 64), (2, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 62, 2]]
** centroid: 3, normalized-entropy: 0.2006223243127146, [(2, 62), (3, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [58, 19, 0]]
** centroid: 4, normalized-entropy: 0.8060914696192223, [(1, 58), (2, 19)]
*** center 5: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [70, 12, 0]]
** centroid: 6, normalized-entropy: 0.6006085754131871, [(1, 70), (2, 12)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 55, 16]]
** centroid: 7, normalized-entropy: 0.7698205808588191, [(2, 55), (3, 16)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2229380541127175] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2229380541127175, 0.17858105132356286] ***
*** starting iteration: 2; err: [Inf, 0.2229380541127175, 0.17858105132356286] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2229380541127175, 0.17858105132356286, 0.16298618924990296] ***
*** starting iteration: 3; err: [Inf, 0.2229380541127175, 0.17858105132356286, 0.16298618924990296] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2229380541127175, 0.17858105132356286, 0.16298618924990296, 0.1529703098423779] ***
*** starting iteration: 4; err: [Inf, 0.2229380541127175, 0.17858105132356286, 0.16298618924990296, 0.1529703098423779] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2229380541127175, 0.17858105132356286, 0.16298618924990296, 0.1529703098423779, 0.14993765481561422] ***
*** starting iteration: 5; err: [Inf, 0.2229380541127175, 0.17858105132356286, 0.16298618924990296, 0.1529703098423779, 0.14993765481561422] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2229380541127175, 0.17858105132356286, 0.16298618924990296, 0.1529703098423779, 0.14993765481561422, 0.14806519928295164] ***
*** starting iteration: 6; err: [Inf, 0.2229380541127175, 0.17858105132356286, 0.16298618924990296, 0.1529703098423779, 0.14993765481561422, 0.14806519928295164] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2229380541127175, 0.17858105132356286, 0.16298618924990296, 0.1529703098423779, 0.14993765481561422, 0.14806519928295164, 0.14777975043840708] ***
*** finished computation of 7 references, err: [Inf, 0.2229380541127175, 0.17858105132356286, 0.16298618924990296, 0.1529703098423779, 0.14993765481561422, 0.14806519928295164, 0.14777975043840708] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [2, 63, 0]]
** centroid: 1, normalized-entropy: 0.19823496409776642, [(1, 2), (2, 63)]
*** center 2: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 54, 13]]
** centroid: 4, normalized-entropy: 0.709825885194168, [(2, 54), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [51, 39, 0]]
** centroid: 5, normalized-entropy: 0.9871377743721862, [(1, 51), (2, 39)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [59, 20, 0]]
** centroid: 6, normalized-entropy: 0.8162554088088008, [(1, 59), (2, 20)]
*** center 7: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1868230349365622] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1868230349365622, 0.15034518161043525] ***
*** starting iteration: 2; err: [Inf, 0.1868230349365622, 0.15034518161043525] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1868230349365622, 0.15034518161043525, 0.14637516757287086] ***
*** starting iteration: 3; err: [Inf, 0.1868230349365622, 0.15034518161043525, 0.14637516757287086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1868230349365622, 0.15034518161043525, 0.14637516757287086, 0.1458554055392742] ***
*** finished computation of 7 references, err: [Inf, 0.1868230349365622, 0.15034518161043525, 0.14637516757287086, 0.1458554055392742] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [82, 13, 0]]
** centroid: 1, normalized-entropy: 0.5759084429149787, [(1, 82), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [60, 1, 0]]
** centroid: 2, normalized-entropy: 0.12068101401352371, [(1, 60), (2, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 52, 11]]
** centroid: 5, normalized-entropy: 0.6681273338436138, [(2, 52), (3, 11)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 71, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [50, 19, 0]]
** centroid: 7, normalized-entropy: 0.849054424254048, [(1, 50), (2, 19)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2060707968166098] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2060707968166098, 0.15887005850486458] ***
*** starting iteration: 2; err: [Inf, 0.2060707968166098, 0.15887005850486458] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2060707968166098, 0.15887005850486458, 0.15179511683247984] ***
*** starting iteration: 3; err: [Inf, 0.2060707968166098, 0.15887005850486458, 0.15179511683247984] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2060707968166098, 0.15887005850486458, 0.15179511683247984, 0.15050328848138453] ***
*** starting iteration: 4; err: [Inf, 0.2060707968166098, 0.15887005850486458, 0.15179511683247984, 0.15050328848138453] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2060707968166098, 0.15887005850486458, 0.15179511683247984, 0.15050328848138453, 0.14920813086861745] ***
*** starting iteration: 5; err: [Inf, 0.2060707968166098, 0.15887005850486458, 0.15179511683247984, 0.15050328848138453, 0.14920813086861745] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2060707968166098, 0.15887005850486458, 0.15179511683247984, 0.15050328848138453, 0.14920813086861745, 0.14849503988027574] ***
*** finished computation of 7 references, err: [Inf, 0.2060707968166098, 0.15887005850486458, 0.15179511683247984, 0.15050328848138453, 0.14920813086861745, 0.14849503988027574] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 56, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [67, 17, 0]]
** centroid: 3, normalized-entropy: 0.7266645172796352, [(1, 67), (2, 17)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [55, 12, 0]]
** centroid: 4, normalized-entropy: 0.678114052360606, [(1, 55), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [77, 2, 0]]
** centroid: 5, normalized-entropy: 0.17033057560105982, [(1, 77), (2, 2)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 62, 18]]
** centroid: 6, normalized-entropy: 0.7691928290130138, [(2, 62), (3, 18)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [53, 25, 0]]
** centroid: 7, normalized-entropy: 0.9049382594235603, [(1, 53), (2, 25)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22632629671879112] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22632629671879112, 0.15908777683414518] ***
*** starting iteration: 2; err: [Inf, 0.22632629671879112, 0.15908777683414518] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22632629671879112, 0.15908777683414518, 0.15400320384837687] ***
*** starting iteration: 3; err: [Inf, 0.22632629671879112, 0.15908777683414518, 0.15400320384837687] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22632629671879112, 0.15908777683414518, 0.15400320384837687, 0.1523011364787817] ***
*** starting iteration: 4; err: [Inf, 0.22632629671879112, 0.15908777683414518, 0.15400320384837687, 0.1523011364787817] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22632629671879112, 0.15908777683414518, 0.15400320384837687, 0.1523011364787817, 0.15101629334129393] ***
*** starting iteration: 5; err: [Inf, 0.22632629671879112, 0.15908777683414518, 0.15400320384837687, 0.1523011364787817, 0.15101629334129393] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22632629671879112, 0.15908777683414518, 0.15400320384837687, 0.1523011364787817, 0.15101629334129393, 0.1503373732417822] ***
*** finished computation of 7 references, err: [Inf, 0.22632629671879112, 0.15908777683414518, 0.15400320384837687, 0.1523011364787817, 0.15101629334129393, 0.1503373732417822] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [14, 37, 0]]
** centroid: 1, normalized-entropy: 0.8478617451660525, [(1, 14), (2, 37)]
*** center 2: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [76, 6, 0]]
** centroid: 3, normalized-entropy: 0.3776463213737003, [(1, 76), (2, 6)]
*** center 4: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 58, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 54, 14]]
** centroid: 6, normalized-entropy: 0.7335379291086666, [(2, 54), (3, 14)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [64, 19, 0]]
** centroid: 7, normalized-entropy: 0.776116265618875, [(1, 64), (2, 19)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1818640423491597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1818640423491597, 0.1594742600172758] ***
*** starting iteration: 2; err: [Inf, 0.1818640423491597, 0.1594742600172758] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1818640423491597, 0.1594742600172758, 0.15542166156321763] ***
*** starting iteration: 3; err: [Inf, 0.1818640423491597, 0.1594742600172758, 0.15542166156321763] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1818640423491597, 0.1594742600172758, 0.15542166156321763, 0.15343858239101246] ***
*** starting iteration: 4; err: [Inf, 0.1818640423491597, 0.1594742600172758, 0.15542166156321763, 0.15343858239101246] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1818640423491597, 0.1594742600172758, 0.15542166156321763, 0.15343858239101246, 0.15132610999885945] ***
*** starting iteration: 5; err: [Inf, 0.1818640423491597, 0.1594742600172758, 0.15542166156321763, 0.15343858239101246, 0.15132610999885945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1818640423491597, 0.1594742600172758, 0.15542166156321763, 0.15343858239101246, 0.15132610999885945, 0.14990656646620482] ***
*** starting iteration: 6; err: [Inf, 0.1818640423491597, 0.1594742600172758, 0.15542166156321763, 0.15343858239101246, 0.15132610999885945, 0.14990656646620482] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1818640423491597, 0.1594742600172758, 0.15542166156321763, 0.15343858239101246, 0.15132610999885945, 0.14990656646620482, 0.1491576568549499] ***
*** finished computation of 7 references, err: [Inf, 0.1818640423491597, 0.1594742600172758, 0.15542166156321763, 0.15343858239101246, 0.15132610999885945, 0.14990656646620482, 0.1491576568549499] ***
*** center 1: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [74, 2, 0]]
** centroid: 3, normalized-entropy: 0.17556502585750275, [(1, 74), (2, 2)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 45, 15]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(2, 45), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [44, 33, 0]]
** centroid: 5, normalized-entropy: 0.9852281360342514, [(1, 44), (2, 33)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 81, 0]]
** centroid: 6, normalized-entropy: 0.2222848306856879, [(1, 3), (2, 81)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [68, 11, 0]]
** centroid: 7, normalized-entropy: 0.5822463050121238, [(1, 68), (2, 11)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19330583169683815] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19330583169683815, 0.15658693318907171] ***
*** starting iteration: 2; err: [Inf, 0.19330583169683815, 0.15658693318907171] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19330583169683815, 0.15658693318907171, 0.15082366170361639] ***
*** starting iteration: 3; err: [Inf, 0.19330583169683815, 0.15658693318907171, 0.15082366170361639] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19330583169683815, 0.15658693318907171, 0.15082366170361639, 0.1489774993536994] ***
*** starting iteration: 4; err: [Inf, 0.19330583169683815, 0.15658693318907171, 0.15082366170361639, 0.1489774993536994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19330583169683815, 0.15658693318907171, 0.15082366170361639, 0.1489774993536994, 0.14806433309428393] ***
*** finished computation of 7 references, err: [Inf, 0.19330583169683815, 0.15658693318907171, 0.15082366170361639, 0.1489774993536994, 0.14806433309428393] ***
*** center 1: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [50, 34, 0]]
** centroid: 2, normalized-entropy: 0.9736680645496202, [(1, 50), (2, 34)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [58, 19, 0]]
** centroid: 3, normalized-entropy: 0.8060914696192223, [(1, 58), (2, 19)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 45, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 66, 14]]
** centroid: 5, normalized-entropy: 0.6690158350565576, [(2, 66), (3, 14)]
*** center 6: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2073015148639679] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2073015148639679, 0.16159684669785201] ***
*** starting iteration: 2; err: [Inf, 0.2073015148639679, 0.16159684669785201] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2073015148639679, 0.16159684669785201, 0.15223395411111415] ***
*** starting iteration: 3; err: [Inf, 0.2073015148639679, 0.16159684669785201, 0.15223395411111415] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2073015148639679, 0.16159684669785201, 0.15223395411111415, 0.148538725823164] ***
*** starting iteration: 4; err: [Inf, 0.2073015148639679, 0.16159684669785201, 0.15223395411111415, 0.148538725823164] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2073015148639679, 0.16159684669785201, 0.15223395411111415, 0.148538725823164, 0.1474105828497559] ***
*** starting iteration: 5; err: [Inf, 0.2073015148639679, 0.16159684669785201, 0.15223395411111415, 0.148538725823164, 0.1474105828497559] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2073015148639679, 0.16159684669785201, 0.15223395411111415, 0.148538725823164, 0.1474105828497559, 0.14720591699657962] ***
*** finished computation of 7 references, err: [Inf, 0.2073015148639679, 0.16159684669785201, 0.15223395411111415, 0.148538725823164, 0.1474105828497559, 0.14720591699657962] ***
*** center 1: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [2, 52, 0]]
** centroid: 2, normalized-entropy: 0.22853814395352806, [(1, 2), (2, 52)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [84, 6, 0]]
** centroid: 3, normalized-entropy: 0.3533593350214213, [(1, 84), (2, 6)]
*** center 4: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 29, 14]]
** centroid: 5, normalized-entropy: 0.9103480624345157, [(2, 29), (3, 14)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [53, 28, 0]]
** centroid: 6, normalized-entropy: 0.9301497323974339, [(1, 53), (2, 28)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 56, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2658832356221974] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2658832356221974, 0.1756323809698224] ***
*** starting iteration: 2; err: [Inf, 0.2658832356221974, 0.1756323809698224] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2658832356221974, 0.1756323809698224, 0.1624532735813409] ***
*** starting iteration: 3; err: [Inf, 0.2658832356221974, 0.1756323809698224, 0.1624532735813409] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2658832356221974, 0.1756323809698224, 0.1624532735813409, 0.15475769486278296] ***
*** starting iteration: 4; err: [Inf, 0.2658832356221974, 0.1756323809698224, 0.1624532735813409, 0.15475769486278296] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2658832356221974, 0.1756323809698224, 0.1624532735813409, 0.15475769486278296, 0.15067283082008362] ***
*** starting iteration: 5; err: [Inf, 0.2658832356221974, 0.1756323809698224, 0.1624532735813409, 0.15475769486278296, 0.15067283082008362] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2658832356221974, 0.1756323809698224, 0.1624532735813409, 0.15475769486278296, 0.15067283082008362, 0.1492133632209152] ***
*** starting iteration: 6; err: [Inf, 0.2658832356221974, 0.1756323809698224, 0.1624532735813409, 0.15475769486278296, 0.15067283082008362, 0.1492133632209152] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2658832356221974, 0.1756323809698224, 0.1624532735813409, 0.15475769486278296, 0.15067283082008362, 0.1492133632209152, 0.14836345025431366] ***
*** finished computation of 7 references, err: [Inf, 0.2658832356221974, 0.1756323809698224, 0.1624532735813409, 0.15475769486278296, 0.15067283082008362, 0.1492133632209152, 0.14836345025431366] ***
*** center 1: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [54, 11, 0]]
** centroid: 2, normalized-entropy: 0.6559420757694151, [(1, 54), (2, 11)]
*** center 3: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [78, 25, 0]]
** centroid: 4, normalized-entropy: 0.7995318105266797, [(1, 78), (2, 25)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [38, 31, 0]]
** centroid: 5, normalized-entropy: 0.992563136012236, [(1, 38), (2, 31)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 55, 2]]
** centroid: 6, normalized-entropy: 0.2192973081321754, [(2, 55), (3, 2)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 55, 10]]
** centroid: 7, normalized-entropy: 0.6193821946787638, [(2, 55), (3, 10)]
finished with 11 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 339,3 => 28,1 => 633), Dict(2 => 362,3 => 49,1 => 589))
[ Info: ===== scores for single classifier: {"micro_f1":0.939,"precision":0.939,"recall":0.939,"macro_recall":0.9544769516019599,"macro_f1":0.8937271497311361,"accuracy":0.939,"class_f1":{"2":0.9156293222683264,"3":0.7967479674796748,"1":0.9688041594454072},"class_precision":{"2":0.9168975069252078,"3":0.6621621621621622,"1":0.9893805309734514},"class_recall":{"2":0.914364640883978,"3":1.0,"1":0.9490662139219015}}
[ Info: ===== scores for 1: {"micro_f1":0.977,"precision":0.977,"recall":0.977,"macro_recall":0.982015277009133,"macro_f1":0.9797658651043569,"accuracy":0.977,"class_f1":{"2":0.968011126564673,"3":0.98989898989899,"1":0.9813874788494078},"class_precision":{"2":0.9747899159663865,"3":0.98,"1":0.9780775716694773},"class_recall":{"2":0.9613259668508287,"3":1.0,"1":0.9847198641765704}}
[ Info: ===== scores for 5: {"micro_f1":0.974,"precision":0.974,"recall":0.974,"macro_recall":0.9820918809231239,"macro_f1":0.9687990878380427,"accuracy":0.974,"class_f1":{"2":0.9644808743169399,"3":0.9607843137254902,"1":0.9811320754716981},"class_precision":{"2":0.9540540540540541,"3":0.9245283018867925,"1":0.9913344887348353},"class_recall":{"2":0.9751381215469613,"3":1.0,"1":0.9711375212224108}}
[ Info: ===== scores for 7: {"micro_f1":0.972,"precision":0.972,"recall":0.972,"macro_recall":0.9816697777235818,"macro_f1":0.9617896800065383,"accuracy":0.972,"class_f1":{"2":0.9620596205962059,"3":0.9423076923076923,"1":0.9810017271157168},"class_precision":{"2":0.9441489361702128,"3":0.8909090909090909,"1":0.9982425307557118},"class_recall":{"2":0.9806629834254144,"3":1.0,"1":0.9643463497453311}}
[ Info: ===== scores for 9: {"micro_f1":0.969,"precision":0.969,"recall":0.969,"macro_recall":0.9785524674277032,"macro_f1":0.9567957792320455,"accuracy":0.969,"class_f1":{"2":0.9577080491132333,"3":0.9333333333333333,"1":0.9793459552495697},"class_precision":{"2":0.9460916442048517,"3":0.875,"1":0.9930191972076788},"class_recall":{"2":0.9696132596685083,"3":1.0,"1":0.966044142614601}}
[ Info: ===== scores for 11: {"micro_f1":0.968,"precision":0.968,"recall":0.968,"macro_recall":0.9779865364712798,"macro_f1":0.9560678140066856,"accuracy":0.968,"class_f1":{"2":0.9564032697547684,"3":0.9333333333333333,"1":0.9784668389319552},"class_precision":{"2":0.9435483870967742,"3":0.875,"1":0.993006993006993},"class_recall":{"2":0.9696132596685083,"3":1.0,"1":0.9643463497453311}}
(score = 0.976, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.976, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.977, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.977, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.969, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.969, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.974, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.974, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.968, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.968, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.974, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.974, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.972, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.972, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.977,"k":1,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.977,"precision":0.977,"recall":0.977,"macro_recall":0.982015277009133,"macro_f1":0.9797658651043569,"accuracy":0.977,"class_f1":{"2":0.968011126564673,"3":0.98989898989899,"1":0.9813874788494078},"class_precision":{"2":0.9747899159663865,"3":0.98,"1":0.9780775716694773},"class_recall":{"2":0.9613259668508287,"3":1.0,"1":0.9847198641765704}}
Test Summary: | Pass  Total
AKNC          |    8      8
[435, 4, 1, 2, 3, 2, 1, 5, 4, 3, 7, 1, 5, 3, 7, 8, 10, 11, 14, 14, 16, 7, 9, 4, 6, 3, 1, 6, 6, 9, 1, 5, 1, 3, 22, 5, 1, 1, 52, 3, 9, 5, 5, 13, 5, 52, 7, 5, 3, 5, 6, 1, 11, 9, 16, 7, 7, 4, 36, 48, 8, 7, 5, 4, 9, 4, 108, 12, 14, 34, 12, 32, 3, 5, 7, 22, 15, 9, 12, 13, 80, 1, 17, 22, 33, 70, 21, 4, 18, 7, 6, 7, 5, 47, 89, 237, 11, 1, 14, 91, 24, 34, 16, 22, 8, 11, 8, 24, 17, 13, 8, 14, 5, 69, 7, 64, 1, 13, 2, 3, 3, 25, 32, 4, 5, 10, 70, 10, 6, 18, 8, 20, 18, 398, 16, 37, 26, 52, 13, 17, 9, 3, 5, 50, 37, 32, 164, 129, 87, 15, 9, 3, 2, 8, 19, 56, 9, 34, 16, 77, 19, 50, 18, 10, 13, 11, 12, 4, 37, 11, 93, 11, 39, 45, 10, 9, 30, 26, 16, 268, 11, 37, 19, 6, 4, 6, 54, 6, 66, 53, 32, 47, 13, 27, 15, 11, 1, 13, 12, 54, 1, 14, 23, 239, 5, 69, 16, 100, 31, 10, 231, 4, 12, 29, 21, 7, 5, 11, 16, 40, 95, 103, 3, 25, 3, 65, 9, 3, 1, 20, 191, 7, 13, 240, 33, 27, 35, 148, 4, 32, 8, 43, 10, 14, 52, 9, 43, 5, 276, 777, 16, 1, 8, 14, 52, 95, 9, 106, 42, 48, 121, 2, 29, 16, 6, 6, 99, 34, 13, 20, 63, 10, 13, 38, 1, 41, 15, 9, 4, 6, 24, 40, 10, 3, 48, 35, 21, 19, 2, 39, 2, 44, 21, 22, 44, 47, 5, 200, 37, 17]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.67, speedup = 0.3175363371370017, eval_ratio = 0.072861)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.3911675347222223,"recall":0.3854166666666668,"f1":null,"seconds":0.00018459372222423553,"exhaustive_search_seconds":0.0005423910915851593,"evaluations":456.4921875,"distances_sum":1768.9530272747356}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5625,"recall":0.5625,"f1":null,"seconds":0.0002964437007904053,"exhaustive_search_seconds":0.0005423910915851593,"evaluations":586.4609375,"distances_sum":1670.7291255903665}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6545138888888884,"recall":0.6545138888888884,"f1":null,"seconds":0.00039650872349739075,"exhaustive_search_seconds":0.0005423910915851593,"evaluations":701.84375,"distances_sum":1613.1081967009634}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7274305555555548,"recall":0.7274305555555548,"f1":null,"seconds":0.0004811510443687439,"exhaustive_search_seconds":0.0005423910915851593,"evaluations":801.6875,"distances_sum":1581.2171198372969}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.777777777777777,"recall":0.777777777777777,"f1":0.777777777777777,"seconds":0.0005722213536500931,"exhaustive_search_seconds":0.0005423910915851593,"evaluations":914.828125,"distances_sum":1564.9043348018397}
KCenters.DeloneInvIndex> reached performance {"precision":0.8185763888888882,"recall":0.8185763888888882,"f1":0.8185763888888882,"seconds":0.00103776715695858,"exhaustive_search_seconds":0.0005423910915851593,"evaluations":1007.3046875,"distances_sum":1551.5671154725696}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.85, speedup = 0.5644552595930408, eval_ratio = 0.10690999999999999)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
