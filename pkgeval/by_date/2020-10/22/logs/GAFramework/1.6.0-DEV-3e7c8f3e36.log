Julia Version 1.6.0-DEV.1316
Commit 3e7c8f3e36 (2020-10-22 18:54 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807

   Resolving package versions...
   Installed GAFramework â”€ v0.4.1
   Installed FileIO â”€â”€â”€â”€â”€â”€ v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [0dad84c5] + ArgTools
  [56f22d72] + Artifacts
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [f43a241f] + Downloads
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [b27032c2] + LibCURL
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
  [deac9b47] + LibCURL_jll
  [14a3606d] + MozillaCACerts_jll
Precompiling project... (tip: to disable auto-precompilation set ENV["JULIA_PKG_PRECOMPILE_AUTO"]=0)
[32m  âœ“ [39m[90mFileIO[39m
[32m  âœ“ [39mGAFramework
2 dependencies successfully precompiled
     Testing GAFramework
Status `/tmp/jl_v7XoSZ/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_v7XoSZ/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [0dad84c5] ArgTools
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [f43a241f] Downloads
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [b27032c2] LibCURL
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
  [deac9b47] LibCURL_jll
  [14a3606d] MozillaCACerts_jll
     Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21720869583516264
curgen: 20 fitness: 0.21723008991908582
curgen: 30 fitness: 0.21723008991908582
curgen: 40 fitness: 0.21723282671224475
curgen: 50 fitness: 0.21723282671224475
CoordinateCreature{Vector{Float64}}([-0.22268275258239592], -0.21723282671224475) -0.22268275258239592 -0.21723282671224475
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.258343072467571
curgen: 100 fitness: 3.258395193095621
curgen: 150 fitness: 3.2583966343402326
curgen: 200 fitness: 3.2583994008475083
curgen: 250 fitness: 3.2584181789477227
curgen: 300 fitness: 3.2584198616351316
curgen: 350 fitness: 3.2584227482258
curgen: 400 fitness: 3.2584227482258
curgen: 450 fitness: 3.2584227482258
curgen: 500 fitness: 3.2584581392737664
CoordinateCreature{Vector{Float64}}([-0.22227595280655377, -0.22242825854990653, -0.22278397766467525, -0.22294934714497708, -0.22248803453476723, -0.22254075651731145, -0.22269546123092457, -0.22314795519620823, -0.22249704673571602, -0.22246512214134945, -0.2221215226550934, 0.22256339578318182, -0.22266166399679221, 0.22292626526126516, -0.22245324272237096], -3.2584581392737664) [-0.22227595280655377, -0.22242825854990653, -0.22278397766467525, -0.22294934714497708, -0.22248803453476723, -0.22254075651731145, -0.22269546123092457, -0.22314795519620823, -0.22249704673571602, -0.22246512214134945, -0.2221215226550934, 0.22256339578318182, -0.22266166399679221, 0.22292626526126516, -0.22245324272237096] -3.2584581392737664
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.002677687193880729
curgen: 100 fitness: -0.002051763366381465
curgen: 150 fitness: -0.0017674620195009538
curgen: 200 fitness: -0.0017674620195009538
curgen: 250 fitness: -0.001382170552290063
curgen: 300 fitness: -0.0010044041496257705
curgen: 350 fitness: -0.0009251652752766404
curgen: 400 fitness: -0.0008924079882888236
curgen: 450 fitness: -0.0008924079882888236
curgen: 500 fitness: -0.0007770802064612781
CoordinateCreature{Vector{Float64}}([0.0011364594275189701, -0.0002731932400852318, 0.000526297353445635, 0.0001067152110010187, 0.00010839764608127993, -0.00014783737545911971, 0.0004122474866048584, -0.00020732213797237833, 0.0006687057916602268, -0.00022933706853689798, -0.0005481217886788612, 0.0009055661534997953, -9.149907774815566e-6, -0.0004416293635781094, 0.0004477071030732204], 0.0007770802064612781) [0.0011364594275189701, -0.0002731932400852318, 0.000526297353445635, 0.0001067152110010187, 0.00010839764608127993, -0.00014783737545911971, 0.0004122474866048584, -0.00020732213797237833, 0.0006687057916602268, -0.00022933706853689798, -0.0005481217886788612, 0.0009055661534997953, -9.149907774815566e-6, -0.0004416293635781094, 0.0004477071030732204] 0.0007770802064612781
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
     Testing GAFramework tests passed 
