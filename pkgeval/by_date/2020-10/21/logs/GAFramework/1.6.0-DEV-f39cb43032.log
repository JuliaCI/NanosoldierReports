Julia Version 1.6.0-DEV.1300
Commit f39cb43032 (2020-10-21 02:53 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807

   Resolving package versions...
   Installed GAFramework â”€ v0.4.1
   Installed FileIO â”€â”€â”€â”€â”€â”€ v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [0dad84c5] + ArgTools
  [56f22d72] + Artifacts
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [f43a241f] + Downloads
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [b27032c2] + LibCURL
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
  [deac9b47] + LibCURL_jll
  [14a3606d] + MozillaCACerts_jll
Precompiling project... (tip: to disable auto-precompilation set ENV["JULIA_PKG_PRECOMPILE_AUTO"]=0)
[32m  âœ“ [39m[90mFileIO[39m
[32m  âœ“ [39mGAFramework
2 dependencies successfully precompiled
     Testing GAFramework
Status `/tmp/jl_lLMQh0/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_lLMQh0/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [0dad84c5] ArgTools
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [f43a241f] Downloads
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [b27032c2] LibCURL
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
  [deac9b47] LibCURL_jll
  [14a3606d] MozillaCACerts_jll
     Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.2171991222238409
curgen: 20 fitness: 0.21722739594257937
curgen: 30 fitness: 0.21723088499891724
curgen: 40 fitness: 0.21723088499891724
curgen: 50 fitness: 0.21723251398321547
CoordinateCreature{Vector{Float64}}([-0.2223896033008986], -0.21723251398321547) -0.2223896033008986 -0.21723251398321547
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2580826011771626
curgen: 100 fitness: 3.258308982356416
curgen: 150 fitness: 3.258347440300881
curgen: 200 fitness: 3.25841025176922
curgen: 250 fitness: 3.25841025176922
curgen: 300 fitness: 3.2584590748492115
curgen: 350 fitness: 3.258474326848086
curgen: 400 fitness: 3.258474326848086
curgen: 450 fitness: 3.2584759856992758
curgen: 500 fitness: 3.2584875928921218
CoordinateCreature{Vector{Float64}}([0.22258422203248324, 0.22252573022620284, 0.2226488781497361, 0.22255793428432383, -0.2224621287188557, 0.2223831551216558, 0.22260840115166702, 0.22259487923450885, -0.22232215934125635, 0.2225458060116607, 0.22252758954114532, 0.22252641887125676, -0.223068294869172, 0.22258134953501782, 0.22261703217966092], -3.2584875928921218) [0.22258422203248324, 0.22252573022620284, 0.2226488781497361, 0.22255793428432383, -0.2224621287188557, 0.2223831551216558, 0.22260840115166702, 0.22259487923450885, -0.22232215934125635, 0.2225458060116607, 0.22252758954114532, 0.22252641887125676, -0.223068294869172, 0.22258134953501782, 0.22261703217966092] -3.2584875928921218
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.006976878597612313
curgen: 100 fitness: -0.006976878597612313
curgen: 150 fitness: -0.003484894669412597
curgen: 200 fitness: -0.0032745464286847437
curgen: 250 fitness: -0.0019683398741676683
curgen: 300 fitness: -0.0019683398741676683
curgen: 350 fitness: -0.0017618715556295683
curgen: 400 fitness: -0.0014355128722343125
curgen: 450 fitness: -0.0010245318572970064
curgen: 500 fitness: -0.0009958202262225768
CoordinateCreature{Vector{Float64}}([-0.00012852567367499165, 0.0005282174912260365, 0.00017732225991220295, 0.0004705739521706729, 0.00041703790245030555, -1.181739412736792e-5, -0.00018115376172253344, 0.0017094349627469617, -0.00025255476217834333, 7.414539329300696e-6, -0.00015112194675214203, -0.0009059958133002626, 0.00019295626360692317, 0.000525095542431898, -0.0003486593100197957], 0.0009958202262225768) [-0.00012852567367499165, 0.0005282174912260365, 0.00017732225991220295, 0.0004705739521706729, 0.00041703790245030555, -1.181739412736792e-5, -0.00018115376172253344, 0.0017094349627469617, -0.00025255476217834333, 7.414539329300696e-6, -0.00015112194675214203, -0.0009059958133002626, 0.00019295626360692317, 0.000525095542431898, -0.0003486593100197957] 0.0009958202262225768
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
     Testing GAFramework tests passed 
