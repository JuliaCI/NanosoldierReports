Julia Version 1.6.0-DEV.1310
Commit 1c8ab630d2 (2020-10-22 01:40 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807

   Resolving package versions...
   Installed DataAPI â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.3.0
   Installed DefineSingletons â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.1.0
   Installed ArgCheck â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v2.1.0
   Installed Compat â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v3.21.0
   Installed OrderedCollections â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.3.1
   Installed Requires â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.1.0
   Installed Setfield â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.7.0
   Installed PolynomialRings â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.7.3
   Installed DataValueInterfaces â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.0
   Installed Combinatorics â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.2
   Installed ZygoteRules â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.2.0
   Installed IteratorInterfaceExtensions â”€ v1.0.0
   Installed MacroTools â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.5.6
   Installed CompositionsBase â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.1.0
   Installed BangBang â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.3.29
   Installed InPlace â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.3.0
   Installed ProgressMeter â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.4.0
   Installed TableTraits â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.0
   Installed SplittablesBase â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.1.10
   Installed InitialValues â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.2.10
   Installed DataStructures â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.17.20
   Installed Transducers â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.4.53
   Installed ConstructionBase â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.0
   Installed MicroCollections â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.1.0
   Installed Tables â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.1.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [c8ed2632] + PolynomialRings v0.7.3
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [dce04be8] + ArgCheck v2.1.0
  [198e06fe] + BangBang v0.3.29
  [861a8166] + Combinatorics v1.0.2
  [34da2185] + Compat v3.21.0
  [a33af91c] + CompositionsBase v0.1.0
  [187b0558] + ConstructionBase v1.0.0
  [9a962f9c] + DataAPI v1.3.0
  [864edb3b] + DataStructures v0.17.20
  [e2d170a0] + DataValueInterfaces v1.0.0
  [244e2a9f] + DefineSingletons v0.1.0
  [12a7aed9] + InPlace v0.3.0
  [22cec73e] + InitialValues v0.2.10
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [1914dd2f] + MacroTools v0.5.6
  [128add7d] + MicroCollections v0.1.0
  [bac558e1] + OrderedCollections v1.3.1
  [c8ed2632] + PolynomialRings v0.7.3
  [92933f4c] + ProgressMeter v1.4.0
  [ae029012] + Requires v1.1.0
  [efcf1570] + Setfield v0.7.0
  [171d559e] + SplittablesBase v0.1.10
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.1.0
  [28d57a85] + Transducers v0.4.53
  [700de1a5] + ZygoteRules v0.2.0
  [0dad84c5] + ArgTools
  [56f22d72] + Artifacts
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [f43a241f] + Downloads
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [b27032c2] + LibCURL
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
  [deac9b47] + LibCURL_jll
  [14a3606d] + MozillaCACerts_jll
Precompiling project... (tip: to disable auto-precompilation set ENV["JULIA_PKG_PRECOMPILE_AUTO"]=0)
[32m  âœ“ [39m[90mDataAPI[39m
[32m  âœ“ [39m[90mCompositionsBase[39m
[32m  âœ“ [39m[90mIteratorInterfaceExtensions[39m
[32m  âœ“ [39m[90mDataValueInterfaces[39m
[32m  âœ“ [39m[90mDefineSingletons[39m
[32m  âœ“ [39m[90mInPlace[39m
[32m  âœ“ [39m[90mArgCheck[39m
[32m  âœ“ [39m[90mTableTraits[39m
[32m  âœ“ [39m[90mConstructionBase[39m
[32m  âœ“ [39m[90mRequires[39m
[32m  âœ“ [39m[90mOrderedCollections[39m
[32m  âœ“ [39m[90mCompat[39m
[32m  âœ“ [39m[90mProgressMeter[39m
[32m  âœ“ [39m[90mInitialValues[39m
[32m  âœ“ [39m[90mCombinatorics[39m
[32m  âœ“ [39m[90mTables[39m
[32m  âœ“ [39m[90mDataStructures[39m
[32m  âœ“ [39m[90mMacroTools[39m
[32m  âœ“ [39m[90mZygoteRules[39m
[32m  âœ“ [39m[90mSetfield[39m
[32m  âœ“ [39m[90mSplittablesBase[39m
[32m  âœ“ [39m[90mBangBang[39m
[32m  âœ“ [39m[90mMicroCollections[39m
[32m  âœ“ [39m[90mTransducers[39m
[32m  âœ“ [39mPolynomialRings
25 dependencies successfully precompiled
     Testing PolynomialRings
Status `/tmp/jl_19cN4X/Project.toml`
  [861a8166] Combinatorics v1.0.2
  [864edb3b] DataStructures v0.17.20
  [12a7aed9] InPlace v0.3.0
  [bac558e1] OrderedCollections v1.3.1
  [c8ed2632] PolynomialRings v0.7.3
  [92933f4c] ProgressMeter v1.4.0
  [28d57a85] Transducers v0.4.53
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_19cN4X/Manifest.toml`
  [dce04be8] ArgCheck v2.1.0
  [198e06fe] BangBang v0.3.29
  [861a8166] Combinatorics v1.0.2
  [34da2185] Compat v3.21.0
  [a33af91c] CompositionsBase v0.1.0
  [187b0558] ConstructionBase v1.0.0
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.17.20
  [e2d170a0] DataValueInterfaces v1.0.0
  [244e2a9f] DefineSingletons v0.1.0
  [12a7aed9] InPlace v0.3.0
  [22cec73e] InitialValues v0.2.10
  [82899510] IteratorInterfaceExtensions v1.0.0
  [1914dd2f] MacroTools v0.5.6
  [128add7d] MicroCollections v0.1.0
  [bac558e1] OrderedCollections v1.3.1
  [c8ed2632] PolynomialRings v0.7.3
  [92933f4c] ProgressMeter v1.4.0
  [ae029012] Requires v1.1.0
  [efcf1570] Setfield v0.7.0
  [171d559e] SplittablesBase v0.1.10
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.1.0
  [28d57a85] Transducers v0.4.53
  [700de1a5] ZygoteRules v0.2.0
  [0dad84c5] ArgTools
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [f43a241f] Downloads
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [b27032c2] LibCURL
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
  [deac9b47] LibCURL_jll
  [14a3606d] MozillaCACerts_jll
     Testing Running tests...
â”Œ Warning: The call to compilecache failed to create a usable precompiled cache file for PolynomialRings [c8ed2632-8d42-5af4-9089-7afd55769a28]
â”‚   exception = Required dependency Combinatorics [861a8166-3701-5b0c-9a16-15d98fcdc6aa] failed to load from a cache file.
â”” @ Base loading.jl:1045
â”Œ Warning: **Quick upgrade guide**: `f::Transducer |> g::Transducer` is deprecated.
â”‚ Instead of
â”‚ 
â”‚     collect(Filter(f) |> Map(g), xs)
â”‚     foldl(+, Filter(f) |> Map(g), xs)
â”‚ 
â”‚ it's now recommended to use `|>` with input collection
â”‚ 
â”‚     xs |> Filter(f) |> Map(g) |> collect
â”‚     foldl(+, xs |> Filter(f) |> Map(g))
â”‚ 
â”‚ If there is no input collection; e.g.,
â”‚ 
â”‚     foldl(right, GroupBy(key, Filter(f) |> Map(g), push!!), xs)
â”‚ 
â”‚ use `opcompose` instead:
â”‚ 
â”‚     foldl(right, GroupBy(key, opcompose(Map(f), Filter(g)), push!!), xs)
â”‚ 
â”‚ For more information, see:
â”‚ https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”” @ Transducers ~/.julia/packages/Transducers/AgX5g/src/deprecated.jl:5
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
expansion(): Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Expansions.jl:105
  Test threw exception
  Expression: collect(expansion(#= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Expansions.jl:105 =# @monomial(x ^ 2 * y), :x)) == [Term(#= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Expansions.jl:105 =# @monomial(x ^ 2), #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Expansions.jl:105 =# @polynomial(y))]
  MethodError: monomialtype(::Type{Union{}}) is ambiguous. Candidates:
    monomialtype(p::Type{var"#s153"} where var"#s153"<:(AbstractArray{var"#s152", N} where N where var"#s152"<:Polynomial)) in PolynomialRings.Modules at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Modules.jl:60
    monomialtype(::Type{P}) where P<:Polynomial in PolynomialRings.Polynomials at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:101
    monomialtype(::Type{M}) where M<:PolynomialRings.AbstractMonomials.AbstractMonomial in PolynomialRings.AbstractMonomials at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:81
  Possible fix, define
    monomialtype(::Type{Union{}})
  Stacktrace:
    [1] polynomialtype(P::Core.TypeofBottom; sparse::Bool)
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:66
    [2] polynomialtype(P::Core.TypeofBottom)
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:66
    [3] #s153#1
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:73 [inlined]
    [4] var"#s153#1"(T2::Any, T1::Any, ::Any, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] _promote_type(T::Type, S::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216
    [7] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:221 [inlined]
    [8] _promote
      @ ./promotion.jl:268 [inlined]
    [9] promote
      @ ./promotion.jl:292 [inlined]
   [10] ==(a::TupleMonomial{1, Int16, typeof(@degrevlex(y))}, b::@ring(Int64[y]))
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:240
   [11] ==
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Terms.jl:138 [inlined]
   [12] ==(A::Vector{(Term over TupleMonomial{1, Int16, typeof(@degrevlex(y))} in @degrevlex(x))}, B::Vector{(Term over @ring(Int64[y]) in @degrevlex(x))})
      @ Base ./abstractarray.jl:1941
   [13] eval_test(evaluated::Expr, quoted::Expr, source::LineNumberNode, negate::Bool)
      @ Test /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:277
   [14] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Expansions.jl:105
   [15] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [16] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Expansions.jl:79
   [17] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [18] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Expansions.jl:27
expansion(): Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Expansions.jl:107
  Test threw exception
  Expression: collect(expansion(#= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Expansions.jl:107 =# @monomial(x ^ 2 * y), :y)) == [Term(#= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Expansions.jl:107 =# @monomial(y), #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Expansions.jl:107 =# @polynomial(x ^ 2))]
  MethodError: monomialtype(::Type{Union{}}) is ambiguous. Candidates:
    monomialtype(p::Type{var"#s153"} where var"#s153"<:(AbstractArray{var"#s152", N} where N where var"#s152"<:Polynomial)) in PolynomialRings.Modules at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Modules.jl:60
    monomialtype(::Type{P}) where P<:Polynomial in PolynomialRings.Polynomials at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:101
    monomialtype(::Type{M}) where M<:PolynomialRings.AbstractMonomials.AbstractMonomial in PolynomialRings.AbstractMonomials at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:81
  Possible fix, define
    monomialtype(::Type{Union{}})
  Stacktrace:
    [1] polynomialtype(P::Core.TypeofBottom; sparse::Bool)
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:66
    [2] polynomialtype(P::Core.TypeofBottom)
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:66
    [3] #s153#1
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:73 [inlined]
    [4] var"#s153#1"(T2::Any, T1::Any, ::Any, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] _promote_type(T::Type, S::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216
    [7] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:221 [inlined]
    [8] _promote
      @ ./promotion.jl:268 [inlined]
    [9] promote
      @ ./promotion.jl:292 [inlined]
   [10] ==(a::TupleMonomial{1, Int16, typeof(@degrevlex(x))}, b::@ring(Int64[x]))
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:240
   [11] ==
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Terms.jl:138 [inlined]
   [12] ==(A::Vector{(Term over TupleMonomial{1, Int16, typeof(@degrevlex(x))} in @degrevlex(y))}, B::Vector{(Term over @ring(Int64[x]) in @degrevlex(y))})
      @ Base ./abstractarray.jl:1941
   [13] eval_test(evaluated::Expr, quoted::Expr, source::LineNumberNode, negate::Bool)
      @ Test /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:277
   [14] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Expansions.jl:107
   [15] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [16] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Expansions.jl:79
   [17] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [18] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Expansions.jl:27
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
Extension of scalars: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:62
  Test threw exception
  Expression: 1 // 2 * z == z // 2
  MethodError: monomialtype(::Type{Union{}}) is ambiguous. Candidates:
    monomialtype(p::Type{var"#s153"} where var"#s153"<:(AbstractArray{var"#s152", N} where N where var"#s152"<:Polynomial)) in PolynomialRings.Modules at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Modules.jl:60
    monomialtype(::Type{P}) where P<:Polynomial in PolynomialRings.Polynomials at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:101
    monomialtype(::Type{M}) where M<:PolynomialRings.AbstractMonomials.AbstractMonomial in PolynomialRings.AbstractMonomials at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:81
  Possible fix, define
    monomialtype(::Type{Union{}})
  Stacktrace:
    [1] polynomialtype(P::Core.TypeofBottom; sparse::Bool)
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:66
    [2] polynomialtype(P::Core.TypeofBottom)
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:66
    [3] #s153#1
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:73 [inlined]
    [4] var"#s153#1"(T2::Any, T1::Any, ::Any, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] _promote_type(T::Type, S::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216
    [7] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:230 [inlined]
    [8] _promote
      @ ./promotion.jl:268 [inlined]
    [9] promote
      @ ./promotion.jl:292 [inlined]
   [10] +(a::@ring(Int64[z]), b::(Term over Rational{Int64} in @degrevlex(z)))
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:241
   [11] inplace!(::Function, ::@ring(Int64[z]), ::@ring(Int64[z]), ::(Term over Rational{Int64} in @degrevlex(z)))
      @ InPlace ~/.julia/packages/InPlace/R8wqN/src/InPlace.jl:20
   [12] inclusiveinplace!(op::Function, a::@ring(Int64[z]), b::(Term over Rational{Int64} in @degrevlex(z)))
      @ InPlace ~/.julia/packages/InPlace/R8wqN/src/InPlace.jl:34
   [13] map_coefficients(f::PolynomialRings.Conversions.var"#6#7"{Int64}, a::Generator{@variable(z), @ring(Int64[z])})
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:164
   [14] //(a::Generator{@variable(z), @ring(Int64[z])}, b::Int64)
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:121
   [15] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:62
   [16] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [17] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:62
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [19] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
Extension of scalars: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:63
  Test threw exception
  Expression: z // (2 // 1) == z // 2
  MethodError: monomialtype(::Type{Union{}}) is ambiguous. Candidates:
    monomialtype(p::Type{var"#s153"} where var"#s153"<:(AbstractArray{var"#s152", N} where N where var"#s152"<:Polynomial)) in PolynomialRings.Modules at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Modules.jl:60
    monomialtype(::Type{P}) where P<:Polynomial in PolynomialRings.Polynomials at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:101
    monomialtype(::Type{M}) where M<:PolynomialRings.AbstractMonomials.AbstractMonomial in PolynomialRings.AbstractMonomials at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:81
  Possible fix, define
    monomialtype(::Type{Union{}})
  Stacktrace:
    [1] polynomialtype(P::Core.TypeofBottom; sparse::Bool)
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:66
    [2] polynomialtype(P::Core.TypeofBottom)
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:66
    [3] #s153#1
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:73 [inlined]
    [4] var"#s153#1"(T2::Any, T1::Any, ::Any, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] _promote_type(T::Type, S::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216
    [7] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:230 [inlined]
    [8] _promote
      @ ./promotion.jl:268 [inlined]
    [9] promote
      @ ./promotion.jl:292 [inlined]
   [10] +(a::@ring(Int64[z]), b::(Term over Rational{Int64} in @degrevlex(z)))
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:241
   [11] inplace!(::Function, ::@ring(Int64[z]), ::@ring(Int64[z]), ::(Term over Rational{Int64} in @degrevlex(z)))
      @ InPlace ~/.julia/packages/InPlace/R8wqN/src/InPlace.jl:20
   [12] inclusiveinplace!(op::Function, a::@ring(Int64[z]), b::(Term over Rational{Int64} in @degrevlex(z)))
      @ InPlace ~/.julia/packages/InPlace/R8wqN/src/InPlace.jl:34
   [13] map_coefficients(f::PolynomialRings.Conversions.var"#6#7"{Rational{Int64}}, a::Generator{@variable(z), @ring(Int64[z])})
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:164
   [14] //(a::Generator{@variable(z), @ring(Int64[z])}, b::Rational{Int64})
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:121
   [15] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:63
   [16] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [17] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:62
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [19] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
Extension of scalars: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:64
  Test threw exception
  Expression: 2 * z // 2 == z
  MethodError: monomialtype(::Type{Union{}}) is ambiguous. Candidates:
    monomialtype(p::Type{var"#s153"} where var"#s153"<:(AbstractArray{var"#s152", N} where N where var"#s152"<:Polynomial)) in PolynomialRings.Modules at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Modules.jl:60
    monomialtype(::Type{P}) where P<:Polynomial in PolynomialRings.Polynomials at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:101
    monomialtype(::Type{M}) where M<:PolynomialRings.AbstractMonomials.AbstractMonomial in PolynomialRings.AbstractMonomials at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:81
  Possible fix, define
    monomialtype(::Type{Union{}})
  Stacktrace:
    [1] polynomialtype(P::Core.TypeofBottom; sparse::Bool)
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:66
    [2] polynomialtype(P::Core.TypeofBottom)
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:66
    [3] #s153#1
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:73 [inlined]
    [4] var"#s153#1"(T2::Any, T1::Any, ::Any, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] _promote_type(T::Type, S::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216
    [7] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:230 [inlined]
    [8] _promote
      @ ./promotion.jl:268 [inlined]
    [9] promote
      @ ./promotion.jl:292 [inlined]
   [10] +(a::@ring(Int64[z]), b::(Term over Rational{Int64} in @degrevlex(z)))
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:241
   [11] inplace!(::Function, ::@ring(Int64[z]), ::@ring(Int64[z]), ::(Term over Rational{Int64} in @degrevlex(z)))
      @ InPlace ~/.julia/packages/InPlace/R8wqN/src/InPlace.jl:20
   [12] inclusiveinplace!(op::Function, a::@ring(Int64[z]), b::(Term over Rational{Int64} in @degrevlex(z)))
      @ InPlace ~/.julia/packages/InPlace/R8wqN/src/InPlace.jl:34
   [13] map_coefficients(f::PolynomialRings.Conversions.var"#6#7"{Int64}, a::Generator{@variable(z), @ring(Int64[z])})
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:164
   [14] //(a::Generator{@variable(z), @ring(Int64[z])}, b::Int64)
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:121
   [15] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:64
   [16] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [17] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:62
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [19] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
Extension of scalars: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:65
  Test threw exception
  Expression: 0.5z == z / 2
  MethodError: monomialtype(::Type{Union{}}) is ambiguous. Candidates:
    monomialtype(p::Type{var"#s153"} where var"#s153"<:(AbstractArray{var"#s152", N} where N where var"#s152"<:Polynomial)) in PolynomialRings.Modules at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Modules.jl:60
    monomialtype(::Type{P}) where P<:Polynomial in PolynomialRings.Polynomials at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:101
    monomialtype(::Type{M}) where M<:PolynomialRings.AbstractMonomials.AbstractMonomial in PolynomialRings.AbstractMonomials at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:81
  Possible fix, define
    monomialtype(::Type{Union{}})
  Stacktrace:
    [1] polynomialtype(P::Core.TypeofBottom; sparse::Bool)
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:66
    [2] polynomialtype(P::Core.TypeofBottom)
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:66
    [3] #s153#1
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:73 [inlined]
    [4] var"#s153#1"(T2::Any, T1::Any, ::Any, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] _promote_type(T::Type, S::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216
    [7] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:230 [inlined]
    [8] _promote
      @ ./promotion.jl:268 [inlined]
    [9] promote
      @ ./promotion.jl:292 [inlined]
   [10] +(a::@ring(Int64[z]), b::(Term over Float64 in @degrevlex(z)))
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:241
   [11] inplace!(::Function, ::@ring(Int64[z]), ::@ring(Int64[z]), ::(Term over Float64 in @degrevlex(z)))
      @ InPlace ~/.julia/packages/InPlace/R8wqN/src/InPlace.jl:20
   [12] inclusiveinplace!(op::Function, a::@ring(Int64[z]), b::(Term over Float64 in @degrevlex(z)))
      @ InPlace ~/.julia/packages/InPlace/R8wqN/src/InPlace.jl:34
   [13] map_coefficients(f::PolynomialRings.Conversions.var"#4#5"{Int64}, a::Generator{@variable(z), @ring(Int64[z])})
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:164
   [14] /(a::Generator{@variable(z), @ring(Int64[z])}, b::Int64)
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:120
   [15] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:65
   [16] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [17] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:62
   [18] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [19] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
conversions between rings: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:74
  Test threw exception
  Expression: x * z == z * x
  MethodError: no method matching monomialtype(::typeof(@degrevlex(x > y > z)), ::Type{Int16})
  The applicable method may be too new: running in world age 30715, while current world is 31953.
  Closest candidates are:
    monomialtype(::MonomialOrder, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    monomialtype(!Matched::PolynomialRings.NamingSchemes.NamedVariable, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:27 (method too new to be called from this world context.)
    monomialtype(::MonomialOrder) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] promote_rule(#unused#::Type{TupleMonomial{2, Int16, typeof(@degrevlex(x > y))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(z))}})
      @ PolynomialRings.AbstractMonomials ~/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:300
    [2] promote_type(#unused#::Type{TupleMonomial{2, Int16, typeof(@degrevlex(x > y))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(z))}})
      @ Base ./promotion.jl:233
    [3] promote_canonical_type(T1::Type{@ring(â„š[x,y])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:138
    [4] promote_canonical_type(T1::Type{@ring(â„š[x,y])}, T2::Type{@ring(Int64[z])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:118
    [5] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [6] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [7] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [8] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [9] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:222 [inlined]
   [10] _promote
      @ ./promotion.jl:268 [inlined]
   [11] promote
      @ ./promotion.jl:292 [inlined]
   [12] *(a::Generator{@variable(x), @ring(â„š[x,y])}, b::Generator{@variable(z), @ring(Int64[z])})
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:251
   [13] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:74
   [14] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [15] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:74
   [16] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [17] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
conversions between rings: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:75
  Test threw exception
  Expression: x * y * z == x * z * y
  MethodError: no method matching monomialtype(::typeof(@degrevlex(x > y > z)), ::Type{Int16})
  The applicable method may be too new: running in world age 30715, while current world is 31953.
  Closest candidates are:
    monomialtype(::MonomialOrder, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    monomialtype(!Matched::PolynomialRings.NamingSchemes.NamedVariable, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:27 (method too new to be called from this world context.)
    monomialtype(::MonomialOrder) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] promote_rule(#unused#::Type{TupleMonomial{2, Int16, typeof(@degrevlex(x > y))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(z))}})
      @ PolynomialRings.AbstractMonomials ~/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:300
    [2] promote_type(#unused#::Type{TupleMonomial{2, Int16, typeof(@degrevlex(x > y))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(z))}})
      @ Base ./promotion.jl:233
    [3] promote_canonical_type(T1::Type{@ring(â„š[x,y])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:138
    [4] promote_canonical_type(T1::Type{@ring(â„š[x,y])}, T2::Type{@ring(Int64[z])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:118
    [5] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [6] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [7] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [8] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [9] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:222 [inlined]
   [10] _promote
      @ ./promotion.jl:268 [inlined]
   [11] promote
      @ ./promotion.jl:292 [inlined]
   [12] *(a::@ring(â„š[x,y]), b::Generator{@variable(z), @ring(Int64[z])})
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:251
   [13] *(::Generator{@variable(x), @ring(â„š[x,y])}, ::Generator{@variable(y), @ring(â„š[x,y])}, ::Generator{@variable(z), @ring(Int64[z])})
      @ Base ./operators.jl:540
   [14] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:75
   [15] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [16] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:74
   [17] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [18] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
conversions between rings: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:76
  Test threw exception
  Expression: (x + z) * (x - z) == x ^ 2 - z ^ 2
  MethodError: no method matching monomialtype(::typeof(@degrevlex(x > y > z)), ::Type{Int16})
  The applicable method may be too new: running in world age 30715, while current world is 31953.
  Closest candidates are:
    monomialtype(::MonomialOrder, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    monomialtype(!Matched::PolynomialRings.NamingSchemes.NamedVariable, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:27 (method too new to be called from this world context.)
    monomialtype(::MonomialOrder) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] promote_rule(#unused#::Type{TupleMonomial{2, Int16, typeof(@degrevlex(x > y))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(z))}})
      @ PolynomialRings.AbstractMonomials ~/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:300
    [2] promote_type(#unused#::Type{TupleMonomial{2, Int16, typeof(@degrevlex(x > y))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(z))}})
      @ Base ./promotion.jl:233
    [3] promote_canonical_type(T1::Type{@ring(â„š[x,y])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:138
    [4] promote_canonical_type(T1::Type{@ring(â„š[x,y])}, T2::Type{@ring(Int64[z])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:118
    [5] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [6] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [7] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [8] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [9] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:222 [inlined]
   [10] _promote
      @ ./promotion.jl:268 [inlined]
   [11] promote
      @ ./promotion.jl:292 [inlined]
   [12] +(a::Generator{@variable(x), @ring(â„š[x,y])}, b::Generator{@variable(z), @ring(Int64[z])})
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:251
   [13] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:76
   [14] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [15] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:74
   [16] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [17] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
conversions between rings: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:81
  Test threw exception
  Expression: div(x + y + z, [z]) == transpose([1])
  MethodError: no method matching monomialtype(::typeof(@degrevlex(x > y > z)), ::Type{Int16})
  The applicable method may be too new: running in world age 30715, while current world is 31953.
  Closest candidates are:
    monomialtype(::MonomialOrder, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    monomialtype(!Matched::PolynomialRings.NamingSchemes.NamedVariable, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:27 (method too new to be called from this world context.)
    monomialtype(::MonomialOrder) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] promote_rule(#unused#::Type{TupleMonomial{2, Int16, typeof(@degrevlex(x > y))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(z))}})
      @ PolynomialRings.AbstractMonomials ~/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:300
    [2] promote_type(#unused#::Type{TupleMonomial{2, Int16, typeof(@degrevlex(x > y))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(z))}})
      @ Base ./promotion.jl:233
    [3] promote_canonical_type(T1::Type{@ring(â„š[x,y])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:138
    [4] promote_canonical_type(T1::Type{@ring(â„š[x,y])}, T2::Type{@ring(Int64[z])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:118
    [5] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [6] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [7] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [8] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [9] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:222 [inlined]
   [10] _promote
      @ ./promotion.jl:268 [inlined]
   [11] promote
      @ ./promotion.jl:292 [inlined]
   [12] +(a::@ring(â„š[x,y]), b::Generator{@variable(z), @ring(Int64[z])})
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:251
   [13] +(::Generator{@variable(x), @ring(â„š[x,y])}, ::Generator{@variable(y), @ring(â„š[x,y])}, ::Generator{@variable(z), @ring(Int64[z])})
      @ Base ./operators.jl:540
   [14] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:81
   [15] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [16] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:74
   [17] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [18] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
conversions between rings: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:82
  Test threw exception
  Expression: rem(x + y + z, [z]) == x + y
  MethodError: no method matching monomialtype(::typeof(@degrevlex(x > y > z)), ::Type{Int16})
  The applicable method may be too new: running in world age 30715, while current world is 31953.
  Closest candidates are:
    monomialtype(::MonomialOrder, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    monomialtype(!Matched::PolynomialRings.NamingSchemes.NamedVariable, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:27 (method too new to be called from this world context.)
    monomialtype(::MonomialOrder) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] promote_rule(#unused#::Type{TupleMonomial{2, Int16, typeof(@degrevlex(x > y))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(z))}})
      @ PolynomialRings.AbstractMonomials ~/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:300
    [2] promote_type(#unused#::Type{TupleMonomial{2, Int16, typeof(@degrevlex(x > y))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(z))}})
      @ Base ./promotion.jl:233
    [3] promote_canonical_type(T1::Type{@ring(â„š[x,y])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:138
    [4] promote_canonical_type(T1::Type{@ring(â„š[x,y])}, T2::Type{@ring(Int64[z])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:118
    [5] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [6] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [7] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [8] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [9] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:222 [inlined]
   [10] _promote
      @ ./promotion.jl:268 [inlined]
   [11] promote
      @ ./promotion.jl:292 [inlined]
   [12] +(a::@ring(â„š[x,y]), b::Generator{@variable(z), @ring(Int64[z])})
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:251
   [13] +(::Generator{@variable(x), @ring(â„š[x,y])}, ::Generator{@variable(y), @ring(â„š[x,y])}, ::Generator{@variable(z), @ring(Int64[z])})
      @ Base ./operators.jl:540
   [14] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:82
   [15] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [16] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:74
   [17] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [18] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
conversions between rings: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:87
  Test threw exception
  Expression: eltype([x x; x x] * [z z; z z]) == typeof(x * z)
  MethodError: no method matching monomialtype(::typeof(@degrevlex(x > y > z)), ::Type{Int16})
  The applicable method may be too new: running in world age 30715, while current world is 31953.
  Closest candidates are:
    monomialtype(::MonomialOrder, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    monomialtype(!Matched::PolynomialRings.NamingSchemes.NamedVariable, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:27 (method too new to be called from this world context.)
    monomialtype(::MonomialOrder) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] promote_rule(#unused#::Type{TupleMonomial{2, Int16, typeof(@degrevlex(x > y))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(z))}})
      @ PolynomialRings.AbstractMonomials ~/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:300
    [2] promote_type(#unused#::Type{TupleMonomial{2, Int16, typeof(@degrevlex(x > y))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(z))}})
      @ Base ./promotion.jl:233
    [3] promote_canonical_type(T1::Type{@ring(â„š[x,y])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:138
    [4] promote_canonical_type(T1::Type{@ring(â„š[x,y])}, T2::Type{@ring(Int64[z])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:118
    [5] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [6] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [7] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [8] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [9] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:222 [inlined]
   [10] promote_op
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:301 [inlined]
   [11] *(A::Matrix{@ring(â„š[x,y])}, B::Matrix{@ring(Int64[z])})
      @ LinearAlgebra /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/matmul.jl:152
   [12] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:87
   [13] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:74
   [15] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [16] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
degrees: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:115
  Test threw exception
  Expression: deg((a * b * z + 9) ^ 39, :a, :b) == 2 * 39
  MethodError: no method matching monomialtype(::typeof(@degrevlex(a > b > z)), ::Type{Int16})
  The applicable method may be too new: running in world age 30715, while current world is 31953.
  Closest candidates are:
    monomialtype(::MonomialOrder, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    monomialtype(!Matched::PolynomialRings.NamingSchemes.NamedVariable, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:27 (method too new to be called from this world context.)
    monomialtype(::MonomialOrder) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] promote_rule(#unused#::Type{TupleMonomial{2, Int16, typeof(@degrevlex(a > b))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(z))}})
      @ PolynomialRings.AbstractMonomials ~/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:300
    [2] promote_type(#unused#::Type{TupleMonomial{2, Int16, typeof(@degrevlex(a > b))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(z))}})
      @ Base ./promotion.jl:233
    [3] promote_canonical_type(T1::Type{@ring(Int64[a,b])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:138
    [4] promote_canonical_type(T1::Type{@ring(Int64[a,b])}, T2::Type{@ring(Int64[z])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:118
    [5] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [6] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [7] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [8] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [9] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:222 [inlined]
   [10] _promote
      @ ./promotion.jl:268 [inlined]
   [11] promote
      @ ./promotion.jl:292 [inlined]
   [12] *(a::@ring(Int64[a,b]), b::Generator{@variable(z), @ring(Int64[z])})
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:251
   [13] *(::Generator{@variable(a), @ring(Int64[a,b])}, ::Generator{@variable(b), @ring(Int64[a,b])}, ::Generator{@variable(z), @ring(Int64[z])})
      @ Base ./operators.jl:540
   [14] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:115
   [15] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [16] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:112
   [17] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [18] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
degrees: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:116
  Test threw exception
  Expression: deg((a * b * z + 9) ^ 39, :a, :b, :z) == 3 * 39
  MethodError: no method matching monomialtype(::typeof(@degrevlex(a > b > z)), ::Type{Int16})
  The applicable method may be too new: running in world age 30715, while current world is 31953.
  Closest candidates are:
    monomialtype(::MonomialOrder, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    monomialtype(!Matched::PolynomialRings.NamingSchemes.NamedVariable, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:27 (method too new to be called from this world context.)
    monomialtype(::MonomialOrder) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] promote_rule(#unused#::Type{TupleMonomial{2, Int16, typeof(@degrevlex(a > b))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(z))}})
      @ PolynomialRings.AbstractMonomials ~/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:300
    [2] promote_type(#unused#::Type{TupleMonomial{2, Int16, typeof(@degrevlex(a > b))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(z))}})
      @ Base ./promotion.jl:233
    [3] promote_canonical_type(T1::Type{@ring(Int64[a,b])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:138
    [4] promote_canonical_type(T1::Type{@ring(Int64[a,b])}, T2::Type{@ring(Int64[z])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:118
    [5] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [6] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [7] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [8] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [9] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:222 [inlined]
   [10] _promote
      @ ./promotion.jl:268 [inlined]
   [11] promote
      @ ./promotion.jl:292 [inlined]
   [12] *(a::@ring(Int64[a,b]), b::Generator{@variable(z), @ring(Int64[z])})
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:251
   [13] *(::Generator{@variable(a), @ring(Int64[a,b])}, ::Generator{@variable(b), @ring(Int64[a,b])}, ::Generator{@variable(z), @ring(Int64[z])})
      @ Base ./operators.jl:540
   [14] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:116
   [15] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [16] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:112
   [17] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [18] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
constructors: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:158
  Got exception outside of a @test
  MethodError: no method matching monomialtype(::typeof(@degrevlex(x > y > Î±Î²Î³)), ::Type{Int16})
  The applicable method may be too new: running in world age 30715, while current world is 31961.
  Closest candidates are:
    monomialtype(::MonomialOrder, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    monomialtype(!Matched::PolynomialRings.NamingSchemes.NamedVariable, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:27 (method too new to be called from this world context.)
    monomialtype(::MonomialOrder) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] promote_rule(#unused#::Type{TupleMonomial{2, Int16, typeof(@degrevlex(x > y))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(Î±Î²Î³))}})
      @ PolynomialRings.AbstractMonomials ~/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:300
    [2] promote_type(#unused#::Type{TupleMonomial{2, Int16, typeof(@degrevlex(x > y))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(Î±Î²Î³))}})
      @ Base ./promotion.jl:233
    [3] promote_canonical_type(T1::Type{@ring(â„š[x,y])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:138
    [4] promote_canonical_type(T1::Type{@ring(â„š[x,y])}, T2::Type{@ring(Int64[Î±Î²Î³])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:118
    [5] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [6] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [7] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [8] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [9] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:222 [inlined]
   [10] base_extend
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Methods.jl:27 [inlined]
   [11] formal_coefficient(#unused#::Type{@ring(â„š[x,y])})
      @ PolynomialRings.EntryPoints ~/.julia/packages/PolynomialRings/gNALy/src/EntryPoints.jl:74
   [12] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:175
   [13] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:159
   [15] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [16] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
   [17] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [18] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/runtests.jl:4
   [19] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [20] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/runtests.jl:4
   [21] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [22] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/runtests.jl:15
   [23] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/runtests.jl:15
   [25] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/runtests.jl:4
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] top-level scope
      @ none:6
   [29] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [30] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [31] _start()
      @ Base ./client.jl:485
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
base extension: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:198
  Test threw exception
  Expression: base_extend(a[1] ^ 2 + x, S) == 2 + x
  Cannot create a polynomial ring over Any as it is not concrete
  Stacktrace:
    [1] error(s::String)
      @ Base ./error.jl:33
    [2] polynomialtype(M::Type{VectorMonomial{SparseArrays.SparseVector{Int16, Int64}, Int16, typeof(@degrevlex(a[]))}}, C::Type; sparse::Bool)
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:57
    [3] promote_canonical_type(T1::Type{@ring(â„š[a[]])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:136
    [4] promote_canonical_type(T1::Type{@ring(â„š[a[]][x,y])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:135
    [5] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [6] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [7] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [8] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [9] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:220 [inlined]
   [10] base_extend(p::@ring(â„š[a[]][x,y]), #unused#::Type{PolynomialRings.QuotientRings.QuotientRing{@ring(â„¤[a[]]), 0xbc6f05c2e120ca72}})
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:102
   [11] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:198
   [12] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [13] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:182
   [14] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [15] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
base extension: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:204
  Test threw exception
  Expression: base_extend(y, #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:204 =# @ring(â„š[y] / y ^ 2)) isa #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:204 =# @ring(â„š[y] / y ^ 2)
  Cannot create a polynomial ring over Any as it is not concrete
  Stacktrace:
    [1] error(s::String)
      @ Base ./error.jl:33
    [2] polynomialtype(M::Type{TupleMonomial{1, Int16, typeof(@degrevlex(y))}}, C::Type; sparse::Bool)
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:57
    [3] promote_canonical_type(T1::Type{@ring(â„¤[y])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:136
    [4] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [5] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [6] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [7] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [8] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:220 [inlined]
    [9] base_extend(p::Generator{@variable(y), @ring(â„¤[y])}, #unused#::Type{PolynomialRings.QuotientRings.QuotientRing{@ring(â„š[y]), 0x23898c758d039213}})
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:102
   [10] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:204
   [11] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [12] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:182
   [13] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
base extension: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:207
  Test threw exception
  Expression: base_extend(x * y, #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:207 =# @ring(â„š[y] / y ^ 2)) isa #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:207 =# @ring((â„š[y] / y ^ 2)[x])
  MethodError: no method matching monomialtype(::typeof(@degrevlex(x > y)), ::Type{Int16})
  The applicable method may be too new: running in world age 30715, while current world is 31968.
  Closest candidates are:
    monomialtype(::MonomialOrder, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    monomialtype(!Matched::PolynomialRings.NamingSchemes.NamedVariable, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:27 (method too new to be called from this world context.)
    monomialtype(::MonomialOrder) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] promote_rule(#unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(x))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(y))}})
      @ PolynomialRings.AbstractMonomials ~/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:300
    [2] promote_type
      @ ./promotion.jl:233 [inlined]
    [3] canonicaltype(P::Type{@ring(â„¤[x][y])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:164
    [4] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [5] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [6] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [7] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [8] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:220 [inlined]
    [9] base_extend(p::@ring(â„¤[x][y]), #unused#::Type{PolynomialRings.QuotientRings.QuotientRing{@ring(â„š[y]), 0x23898c758d039213}})
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:102
   [10] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:207
   [11] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [12] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:182
   [13] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
base extension: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:208
  Test threw exception
  Expression: base_extend(x * y, #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:208 =# @ring(â„š[x] / x ^ 2)) isa #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:208 =# @ring((â„š[x] / x ^ 2)[y])
  MethodError: no method matching monomialtype(::typeof(@degrevlex(x > y)), ::Type{Int16})
  The applicable method may be too new: running in world age 30715, while current world is 31968.
  Closest candidates are:
    monomialtype(::MonomialOrder, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    monomialtype(!Matched::PolynomialRings.NamingSchemes.NamedVariable, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:27 (method too new to be called from this world context.)
    monomialtype(::MonomialOrder) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] promote_rule(#unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(x))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(y))}})
      @ PolynomialRings.AbstractMonomials ~/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:300
    [2] promote_type
      @ ./promotion.jl:233 [inlined]
    [3] canonicaltype(P::Type{@ring(â„¤[x][y])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:164
    [4] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [5] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [6] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [7] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [8] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:220 [inlined]
    [9] base_extend(p::@ring(â„¤[x][y]), #unused#::Type{PolynomialRings.QuotientRings.QuotientRing{@ring(â„š[x]), 0x23898c758d039213}})
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:102
   [10] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:208
   [11] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [12] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:182
   [13] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
base extension: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:210
  Test threw exception
  Expression: base_extend(x * y, #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:210 =# @ring(â„š[y] / y ^ 2)) isa #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:210 =# @ring((â„š[y] / y ^ 2)[x])
  Cannot create a polynomial ring over Any as it is not concrete
  Stacktrace:
    [1] error(s::String)
      @ Base ./error.jl:33
    [2] polynomialtype(M::Type{TupleMonomial{2, Int16, typeof(@degrevlex(x > y))}}, C::Type; sparse::Bool)
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:57
    [3] promote_canonical_type(T1::Type{@ring(â„¤[x,y])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:136
    [4] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [5] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [6] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [7] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [8] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:220 [inlined]
    [9] base_extend(p::@ring(â„¤[x,y]), #unused#::Type{PolynomialRings.QuotientRings.QuotientRing{@ring(â„š[y]), 0x23898c758d039213}})
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:102
   [10] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:210
   [11] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [12] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:182
   [13] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
base extension: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:211
  Test threw exception
  Expression: base_extend(x * y, #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:211 =# @ring(â„š[x] / x ^ 2)) isa #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:211 =# @ring((â„š[x] / x ^ 2)[y])
  Cannot create a polynomial ring over Any as it is not concrete
  Stacktrace:
    [1] error(s::String)
      @ Base ./error.jl:33
    [2] polynomialtype(M::Type{TupleMonomial{2, Int16, typeof(@degrevlex(x > y))}}, C::Type; sparse::Bool)
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:57
    [3] promote_canonical_type(T1::Type{@ring(â„¤[x,y])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:136
    [4] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [5] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [6] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [7] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [8] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:220 [inlined]
    [9] base_extend(p::@ring(â„¤[x,y]), #unused#::Type{PolynomialRings.QuotientRings.QuotientRing{@ring(â„š[x]), 0x23898c758d039213}})
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:102
   [10] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:211
   [11] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [12] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:182
   [13] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
base extension: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:213
  Test threw exception
  Expression: base_extend(x * y * z, #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:213 =# @ring(â„š[y] / y ^ 2)) isa #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:213 =# @ring(((â„š[y] / y ^ 2)[x])[z])
  MethodError: no method matching monomialtype(::typeof(@degrevlex(x > y > z)), ::Type{Int16})
  The applicable method may be too new: running in world age 30715, while current world is 31970.
  Closest candidates are:
    monomialtype(::MonomialOrder, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    monomialtype(!Matched::PolynomialRings.NamingSchemes.NamedVariable, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:27 (method too new to be called from this world context.)
    monomialtype(::MonomialOrder) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] promote_rule(#unused#::Type{TupleMonomial{2, Int16, typeof(@degrevlex(x > y))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(z))}})
      @ PolynomialRings.AbstractMonomials ~/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:300
    [2] promote_type
      @ ./promotion.jl:233 [inlined]
    [3] canonicaltype(P::Type{@ring(â„¤[x,y][z])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:164
    [4] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [5] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [6] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [7] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [8] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:220 [inlined]
    [9] base_extend(p::@ring(â„¤[x,y][z]), #unused#::Type{PolynomialRings.QuotientRings.QuotientRing{@ring(â„š[y]), 0x23898c758d039213}})
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:102
   [10] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:213
   [11] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [12] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:182
   [13] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
base extension: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:214
  Test threw exception
  Expression: base_extend(x * y * z, #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:214 =# @ring(â„š[z] / z ^ 2)) isa #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:214 =# @ring((â„š[z] / z ^ 2)[x, y])
  MethodError: no method matching monomialtype(::typeof(@degrevlex(x > y > z)), ::Type{Int16})
  The applicable method may be too new: running in world age 30715, while current world is 31970.
  Closest candidates are:
    monomialtype(::MonomialOrder, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    monomialtype(!Matched::PolynomialRings.NamingSchemes.NamedVariable, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:27 (method too new to be called from this world context.)
    monomialtype(::MonomialOrder) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] promote_rule(#unused#::Type{TupleMonomial{2, Int16, typeof(@degrevlex(x > y))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(z))}})
      @ PolynomialRings.AbstractMonomials ~/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:300
    [2] promote_type
      @ ./promotion.jl:233 [inlined]
    [3] canonicaltype(P::Type{@ring(â„¤[x,y][z])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:164
    [4] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [5] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [6] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [7] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [8] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:220 [inlined]
    [9] base_extend(p::@ring(â„¤[x,y][z]), #unused#::Type{PolynomialRings.QuotientRings.QuotientRing{@ring(â„š[z]), 0x23898c758d039213}})
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:102
   [10] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:214
   [11] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [12] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:182
   [13] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
promotions: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:220
  Test threw exception
  Expression: promote_type(#= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:220 =# @ring(â„¤[x]), #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:220 =# @ring(â„š[y])) == #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:220 =# @ring(â„š[x, y])
  MethodError: no method matching monomialtype(::typeof(@degrevlex(x > y)), ::Type{Int16})
  The applicable method may be too new: running in world age 30715, while current world is 31970.
  Closest candidates are:
    monomialtype(::MonomialOrder, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    monomialtype(!Matched::PolynomialRings.NamingSchemes.NamedVariable, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:27 (method too new to be called from this world context.)
    monomialtype(::MonomialOrder) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] promote_rule(#unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(x))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(y))}})
      @ PolynomialRings.AbstractMonomials ~/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:300
    [2] promote_type(#unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(x))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(y))}})
      @ Base ./promotion.jl:233
    [3] promote_canonical_type(T1::Type{@ring(â„¤[x])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:138
    [4] promote_canonical_type(T1::Type{@ring(â„¤[x])}, T2::Type{@ring(â„š[y])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:118
    [5] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [6] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [7] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [8] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [9] promote_type(T::Type{@ring(â„¤[x])}, S::Type{@ring(â„š[y])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:222
   [10] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:220
   [11] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [12] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:218
   [13] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
promotions: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:221
  Test threw exception
  Expression: promote_type(#= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:221 =# @ring((â„¤[a[]])[x]), #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:221 =# @ring(â„š[y])) == #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:221 =# @ring((â„š[a[]])[x, y])
  MethodError: no method matching monomialtype(::typeof(@degrevlex(x > y)), ::Type{Int16})
  The applicable method may be too new: running in world age 30715, while current world is 31970.
  Closest candidates are:
    monomialtype(::MonomialOrder, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    monomialtype(!Matched::PolynomialRings.NamingSchemes.NamedVariable, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:27 (method too new to be called from this world context.)
    monomialtype(::MonomialOrder) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] promote_rule(#unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(x))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(y))}})
      @ PolynomialRings.AbstractMonomials ~/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:300
    [2] promote_type(#unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(x))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(y))}})
      @ Base ./promotion.jl:233
    [3] promote_canonical_type(T1::Type{@ring(â„¤[a[]][x])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:138
    [4] promote_canonical_type(T1::Type{@ring(â„¤[a[]][x])}, T2::Type{@ring(â„š[y])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:118
    [5] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [6] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [7] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [8] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [9] promote_type(T::Type{@ring(â„¤[a[]][x])}, S::Type{@ring(â„š[y])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:222
   [10] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:221
   [11] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [12] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:218
   [13] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
promotions: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:222
  Test threw exception
  Expression: promote_type(#= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:222 =# @ring((â„¤[a[]])[x]), #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:222 =# @ring((â„š[a[]])[y])) == #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:222 =# @ring((â„š[a[]])[x, y])
  MethodError: no method matching monomialtype(::typeof(@degrevlex(x > y)), ::Type{Int16})
  The applicable method may be too new: running in world age 30715, while current world is 31970.
  Closest candidates are:
    monomialtype(::MonomialOrder, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    monomialtype(!Matched::PolynomialRings.NamingSchemes.NamedVariable, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:27 (method too new to be called from this world context.)
    monomialtype(::MonomialOrder) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] promote_rule(#unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(x))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(y))}})
      @ PolynomialRings.AbstractMonomials ~/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:300
    [2] promote_type(#unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(x))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(y))}})
      @ Base ./promotion.jl:233
    [3] promote_canonical_type(T1::Type{@ring(â„¤[a[]][x])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:138
    [4] promote_canonical_type(T1::Type{@ring(â„¤[a[]][x])}, T2::Type{@ring(â„š[a[]][y])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:118
    [5] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [6] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [7] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [8] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [9] promote_type(T::Type{@ring(â„¤[a[]][x])}, S::Type{@ring(â„š[a[]][y])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:222
   [10] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:222
   [11] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [12] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:218
   [13] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
promotions: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:226
  Test threw exception
  Expression: promote_type(#= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:226 =# @ring((â„¤[y])[x]), #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:226 =# @ring((â„š[x])[y])) == #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:226 =# @ring(â„š[x, y])
  MethodError: no method matching monomialtype(::typeof(@degrevlex(x > y)), ::Type{Int16})
  The applicable method may be too new: running in world age 30715, while current world is 31970.
  Closest candidates are:
    monomialtype(::MonomialOrder, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    monomialtype(!Matched::PolynomialRings.NamingSchemes.NamedVariable, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:27 (method too new to be called from this world context.)
    monomialtype(::MonomialOrder) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] promote_rule(#unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(y))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(x))}})
      @ PolynomialRings.AbstractMonomials ~/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:300
    [2] promote_type
      @ ./promotion.jl:233 [inlined]
    [3] canonicaltype(P::Type{@ring(â„¤[y][x])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:164
    [4] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [5] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [6] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [7] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [8] promote_type(T::Type{@ring(â„¤[y][x])}, S::Type{@ring(â„š[x][y])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:222
    [9] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:226
   [10] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [11] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:218
   [12] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [13] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
promotions: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:232
  Test threw exception
  Expression: promote_type(#= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:232 =# @ring((â„¤[x])[y, z]), #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:232 =# @ring((â„š[x, y])[z])) == #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:232 =# @ring(â„š[x, y, z])
  MethodError: no method matching monomialtype(::typeof(@degrevlex(x > y > z)), ::Type{Int16})
  The applicable method may be too new: running in world age 30715, while current world is 31970.
  Closest candidates are:
    monomialtype(::MonomialOrder, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    monomialtype(!Matched::PolynomialRings.NamingSchemes.NamedVariable, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:27 (method too new to be called from this world context.)
    monomialtype(::MonomialOrder) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] promote_rule(#unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(x))}}, #unused#::Type{TupleMonomial{2, Int16, typeof(@degrevlex(y > z))}})
      @ PolynomialRings.AbstractMonomials ~/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:300
    [2] promote_type
      @ ./promotion.jl:233 [inlined]
    [3] canonicaltype(P::Type{@ring(â„¤[x][y,z])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:164
    [4] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [5] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [6] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [7] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [8] promote_type(T::Type{@ring(â„¤[x][y,z])}, S::Type{@ring(â„š[x,y][z])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:222
    [9] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:232
   [10] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [11] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:218
   [12] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [13] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
promotions: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:233
  Test threw exception
  Expression: promote_type(#= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:233 =# @ring((â„¤[a, b])[c, d]), #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:233 =# @ring((â„š[a, c])[b, d])) == #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:233 =# @ring(â„š[a, b, c, d])
  MethodError: no method matching monomialtype(::typeof(@degrevlex(a > b > c > d)), ::Type{Int16})
  The applicable method may be too new: running in world age 30715, while current world is 31970.
  Closest candidates are:
    monomialtype(::MonomialOrder, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    monomialtype(!Matched::PolynomialRings.NamingSchemes.NamedVariable, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:27 (method too new to be called from this world context.)
    monomialtype(::MonomialOrder) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] promote_rule(#unused#::Type{TupleMonomial{2, Int16, typeof(@degrevlex(a > b))}}, #unused#::Type{TupleMonomial{2, Int16, typeof(@degrevlex(c > d))}})
      @ PolynomialRings.AbstractMonomials ~/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:300
    [2] promote_type
      @ ./promotion.jl:233 [inlined]
    [3] canonicaltype(P::Type{@ring(â„¤[a,b][c,d])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:164
    [4] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [5] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [6] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [7] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [8] promote_type(T::Type{@ring(â„¤[a,b][c,d])}, S::Type{@ring(â„š[a,c][b,d])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:222
    [9] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:233
   [10] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [11] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:218
   [12] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [13] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
promotions: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:235
  Test threw exception
  Expression: promote_type(#= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:235 =# @ring((â„¤[a])[b]), #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:235 =# @ring((â„š[c])[b])) == #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:235 =# @ring((â„š[a, c])[b])
  MethodError: no method matching termtype(::Type{PolynomialRings.Polynomials.SparsePolynomial})
  Closest candidates are:
    termtype(!Matched::Type{var"#s20"} where var"#s20"<:Polynomial{M, C}) where {M, C} at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:96
    termtype(!Matched::PolynomialRings.NamingSchemes.NamingScheme) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:54 (method too new to be called from this world context.)
    termtype(!Matched::PolynomialRings.NamingSchemes.NamingScheme, !Matched::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:54 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] basering(#unused#::Type{PolynomialRings.Polynomials.SparsePolynomial})
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:100
    [2] nestednamingscheme(T::Type{PolynomialRings.Polynomials.SparsePolynomial})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:57
    [3] polynomialtype(M::Type{TupleMonomial{1, Int16, typeof(@degrevlex(b))}}, C::Type; sparse::Bool)
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:48
    [4] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:209 [inlined]
    [5] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [6] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [7] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [8] promote_type(T::Type{@ring(â„¤[a][b])}, S::Type{@ring(â„š[c][b])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:222
    [9] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:235
   [10] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [11] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:218
   [12] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [13] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
Sparse result types: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:278
  Test threw exception
  Expression: typeof(x * y) == R
  MethodError: no method matching monomialtype(::typeof(@degrevlex(x > y)), ::Type{Int16})
  The applicable method may be too new: running in world age 30715, while current world is 31974.
  Closest candidates are:
    monomialtype(::MonomialOrder, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    monomialtype(!Matched::PolynomialRings.NamingSchemes.NamedVariable, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:27 (method too new to be called from this world context.)
    monomialtype(::MonomialOrder) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] promote_rule(#unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(x))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(y))}})
      @ PolynomialRings.AbstractMonomials ~/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:300
    [2] promote_type(#unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(x))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(y))}})
      @ Base ./promotion.jl:233
    [3] promote_canonical_type(T1::Type{@ring(â„¤[x])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:138
    [4] promote_canonical_type(T1::Type{@ring(â„¤[x])}, T2::Type{@ring(â„¤[y])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:118
    [5] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [6] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [7] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [8] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [9] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:222 [inlined]
   [10] _promote
      @ ./promotion.jl:268 [inlined]
   [11] promote
      @ ./promotion.jl:292 [inlined]
   [12] *(a::Generator{@variable(x), @ring(â„¤[x])}, b::Generator{@variable(y), @ring(â„¤[y])})
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:251
   [13] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:278
   [14] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [15] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:274
   [16] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [17] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
Sparse result types: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:279
  Test threw exception
  Expression: eltype(x * [y]) == R
  MethodError: no method matching monomialtype(::typeof(@degrevlex(x > y)), ::Type{Int16})
  The applicable method may be too new: running in world age 30715, while current world is 31974.
  Closest candidates are:
    monomialtype(::MonomialOrder, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    monomialtype(!Matched::PolynomialRings.NamingSchemes.NamedVariable, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:27 (method too new to be called from this world context.)
    monomialtype(::MonomialOrder) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] promote_rule(#unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(x))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(y))}})
      @ PolynomialRings.AbstractMonomials ~/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:300
    [2] promote_type(#unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(x))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(y))}})
      @ Base ./promotion.jl:233
    [3] promote_canonical_type(T1::Type{@ring(â„¤[x])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:138
    [4] promote_canonical_type(T1::Type{@ring(â„¤[x])}, T2::Type{@ring(â„¤[y])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:118
    [5] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [6] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [7] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [8] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [9] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:222 [inlined]
   [10] _promote
      @ ./promotion.jl:268 [inlined]
   [11] promote
      @ ./promotion.jl:292 [inlined]
   [12] *(a::Generator{@variable(x), @ring(â„¤[x])}, b::Generator{@variable(y), @ring(â„¤[y])})
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:251
   [13] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [14] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [15] getindex
      @ ./broadcast.jl:575 [inlined]
   [16] copy
      @ ./broadcast.jl:876 [inlined]
   [17] materialize
      @ ./broadcast.jl:837 [inlined]
   [18] broadcast(::typeof(*), ::Generator{@variable(x), @ring(â„¤[x])}, ::Vector{Generator{@variable(y), @ring(â„¤[y])}})
      @ Base.Broadcast ./broadcast.jl:775
   [19] *(A::Generator{@variable(x), @ring(â„¤[x])}, B::Vector{Generator{@variable(y), @ring(â„¤[y])}})
      @ PolynomialRings.Arrays ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Arrays.jl:139
   [20] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:279
   [21] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [22] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:274
   [23] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
Sparse result types: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:280
  Test threw exception
  Expression: eltype([x x] * [y; y]) == R
  MethodError: no method matching monomialtype(::typeof(@degrevlex(x > y)), ::Type{Int16})
  The applicable method may be too new: running in world age 30715, while current world is 31974.
  Closest candidates are:
    monomialtype(::MonomialOrder, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    monomialtype(!Matched::PolynomialRings.NamingSchemes.NamedVariable, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:27 (method too new to be called from this world context.)
    monomialtype(::MonomialOrder) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] promote_rule(#unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(x))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(y))}})
      @ PolynomialRings.AbstractMonomials ~/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:300
    [2] promote_type(#unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(x))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(y))}})
      @ Base ./promotion.jl:233
    [3] promote_canonical_type(T1::Type{@ring(â„¤[x])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:138
    [4] promote_canonical_type(T1::Type{@ring(â„¤[x])}, T2::Type{@ring(â„¤[y])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:118
    [5] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [6] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [7] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [8] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [9] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:222 [inlined]
   [10] promote_op
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:301 [inlined]
   [11] *(A::Matrix{Generator{@variable(x), @ring(â„¤[x])}}, x::Vector{Generator{@variable(y), @ring(â„¤[y])}})
      @ LinearAlgebra /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/matmul.jl:50
   [12] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:280
   [13] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:274
   [15] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [16] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
Sparse result types: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:282
  Test threw exception
  Expression: eltype(x * sparse([y])) == R
  MethodError: no method matching monomialtype(::typeof(@degrevlex(x > y)), ::Type{Int16})
  The applicable method may be too new: running in world age 30715, while current world is 31974.
  Closest candidates are:
    monomialtype(::MonomialOrder, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    monomialtype(!Matched::PolynomialRings.NamingSchemes.NamedVariable, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:27 (method too new to be called from this world context.)
    monomialtype(::MonomialOrder) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] promote_rule(#unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(x))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(y))}})
      @ PolynomialRings.AbstractMonomials ~/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:300
    [2] promote_type(#unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(x))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(y))}})
      @ Base ./promotion.jl:233
    [3] promote_canonical_type(T1::Type{@ring(â„¤[x])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:138
    [4] promote_canonical_type(T1::Type{@ring(â„¤[x])}, T2::Type{@ring(â„¤[y])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:118
    [5] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [6] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [7] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [8] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [9] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:222 [inlined]
   [10] _promote
      @ ./promotion.jl:268 [inlined]
   [11] promote
      @ ./promotion.jl:292 [inlined]
   [12] *(a::Generator{@variable(x), @ring(â„¤[x])}, b::@ring(â„¤[y]))
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:251
   [13] #3
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/SparseArrays/src/higherorderfns.jl:1064 [inlined]
   [14] _noshapecheck_map(::SparseArrays.HigherOrderFns.var"#3#4"{typeof(*), SparseArrays.HigherOrderFns.var"#17#20"{Generator{@variable(x), @ring(â„¤[x])}, SparseArrays.HigherOrderFns.var"#21#24"}}, ::SparseArrays.SparseVector{Generator{@variable(y), @ring(â„¤[y])}, Int64})
      @ SparseArrays.HigherOrderFns /workspace/srcdir/usr/share/julia/stdlib/v1.6/SparseArrays/src/higherorderfns.jl:160
   [15] _shapecheckbc
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/SparseArrays/src/higherorderfns.jl:1026 [inlined]
   [16] _copy
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/SparseArrays/src/higherorderfns.jl:1015 [inlined]
   [17] _copy
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/SparseArrays/src/higherorderfns.jl:1021 [inlined]
   [18] copy
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/SparseArrays/src/higherorderfns.jl:1012 [inlined]
   [19] materialize
      @ ./broadcast.jl:837 [inlined]
   [20] broadcast
      @ ./broadcast.jl:775 [inlined]
   [21] *(A::Generator{@variable(x), @ring(â„¤[x])}, B::SparseArrays.SparseVector{Generator{@variable(y), @ring(â„¤[y])}, Int64})
      @ PolynomialRings.Arrays ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Arrays.jl:139
   [22] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:282
   [23] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [24] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:274
   [25] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
Sparse result types: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:283
  Test threw exception
  Expression: eltype([x x] * sparse([y; y])) == R
  MethodError: no method matching monomialtype(::typeof(@degrevlex(x > y)), ::Type{Int16})
  The applicable method may be too new: running in world age 30715, while current world is 31974.
  Closest candidates are:
    monomialtype(::MonomialOrder, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    monomialtype(!Matched::PolynomialRings.NamingSchemes.NamedVariable, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:27 (method too new to be called from this world context.)
    monomialtype(::MonomialOrder) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] promote_rule(#unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(x))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(y))}})
      @ PolynomialRings.AbstractMonomials ~/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:300
    [2] promote_type(#unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(x))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(y))}})
      @ Base ./promotion.jl:233
    [3] promote_canonical_type(T1::Type{@ring(â„¤[x])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:138
    [4] promote_canonical_type(T1::Type{@ring(â„¤[x])}, T2::Type{@ring(â„¤[y])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:118
    [5] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [6] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [7] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [8] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [9] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:222 [inlined]
   [10] promote_op
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:301 [inlined]
   [11] *(A::Matrix{Generator{@variable(x), @ring(â„¤[x])}}, x::SparseArrays.SparseVector{Generator{@variable(y), @ring(â„¤[y])}, Int64})
      @ SparseArrays /workspace/srcdir/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1540
   [12] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:283
   [13] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:274
   [15] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [16] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
Sparse result types: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:284
  Test threw exception
  Expression: eltype(sparse([x x]) * sparse([y; y])) == R
  MethodError: no method matching monomialtype(::typeof(@degrevlex(x > y)), ::Type{Int16})
  The applicable method may be too new: running in world age 30715, while current world is 31974.
  Closest candidates are:
    monomialtype(::MonomialOrder, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    monomialtype(!Matched::PolynomialRings.NamingSchemes.NamedVariable, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:27 (method too new to be called from this world context.)
    monomialtype(::MonomialOrder) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] promote_rule(#unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(x))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(y))}})
      @ PolynomialRings.AbstractMonomials ~/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:300
    [2] promote_type(#unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(x))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(y))}})
      @ Base ./promotion.jl:233
    [3] promote_canonical_type(T1::Type{@ring(â„¤[x])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:138
    [4] promote_canonical_type(T1::Type{@ring(â„¤[x])}, T2::Type{@ring(â„¤[y])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:118
    [5] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [6] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [7] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [8] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [9] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:222 [inlined]
   [10] promote_op
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:301 [inlined]
   [11] densemv(A::SparseArrays.SparseMatrixCSC{Generator{@variable(x), @ring(â„¤[x])}, Int64}, x::SparseArrays.SparseVector{Generator{@variable(y), @ring(â„¤[y])}, Int64}; trans::Char)
      @ SparseArrays /workspace/srcdir/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1670
   [12] densemv
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1659 [inlined]
   [13] *(A::SparseArrays.SparseMatrixCSC{Generator{@variable(x), @ring(â„¤[x])}, Int64}, x::SparseArrays.SparseVector{Generator{@variable(y), @ring(â„¤[y])}, Int64})
      @ SparseArrays /workspace/srcdir/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1763
   [14] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:284
   [15] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [16] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:274
   [17] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [18] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:18
Explicit types: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:302
  Test threw exception
  Expression: U(x + y) == V(x + y)
  MethodError: no method matching monomialtype(::typeof(@degrevlex(x > y)), ::Type{Int16})
  The applicable method may be too new: running in world age 30715, while current world is 31977.
  Closest candidates are:
    monomialtype(::MonomialOrder, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    monomialtype(!Matched::PolynomialRings.NamingSchemes.NamedVariable, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:27 (method too new to be called from this world context.)
    monomialtype(::MonomialOrder) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] promote_rule(#unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(x))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(y))}})
      @ PolynomialRings.AbstractMonomials ~/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:300
    [2] promote_type(#unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(x))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(y))}})
      @ Base ./promotion.jl:233
    [3] promote_canonical_type(T1::Type{@ring(â„¤[x])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:138
    [4] promote_canonical_type(T1::Type{@ring(â„¤[x])}, T2::Type{@ring(â„¤[y])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:118
    [5] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [6] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [7] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [8] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [9] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:222 [inlined]
   [10] _promote
      @ ./promotion.jl:268 [inlined]
   [11] promote
      @ ./promotion.jl:292 [inlined]
   [12] +(a::Generator{@variable(x), @ring(â„¤[x])}, b::Generator{@variable(y), @ring(â„¤[y])})
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:251
   [13] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:302
   [14] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [15] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:294
   [16] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [17] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:293
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
Operations: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:328
  Test threw exception
  Expression: one(A) + one(B) == 2
  MethodError: no method matching termtype(::Type{PolynomialRings.Polynomials.SparsePolynomial})
  Closest candidates are:
    termtype(!Matched::Type{var"#s20"} where var"#s20"<:Polynomial{M, C}) where {M, C} at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:96
    termtype(!Matched::PolynomialRings.NamingSchemes.NamingScheme) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:54 (method too new to be called from this world context.)
    termtype(!Matched::PolynomialRings.NamingSchemes.NamingScheme, !Matched::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:54 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] basering(#unused#::Type{PolynomialRings.Polynomials.SparsePolynomial})
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:100
    [2] nestednamingscheme(T::Type{PolynomialRings.Polynomials.SparsePolynomial})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:57
    [3] polynomialtype(M::Type{TupleMonomial{1, Int16, typeof(@degrevlex(c))}}, C::Type; sparse::Bool)
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:48
    [4] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:209 [inlined]
    [5] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [6] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [7] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [8] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:222 [inlined]
    [9] Base.Broadcast.BroadcastStyle(s::PolynomialRings.Broadcast.Termwise{typeof(@degrevlex(c)), @ring(Int64[a][b][c])}, t::PolynomialRings.Broadcast.Termwise{typeof(@degrevlex(c)), @ring(Int64[b][a][c])})
      @ PolynomialRings.Broadcast ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:132
   [10] result_style(s1::PolynomialRings.Broadcast.Termwise{typeof(@degrevlex(c)), @ring(Int64[a][b][c])}, s2::PolynomialRings.Broadcast.Termwise{typeof(@degrevlex(c)), @ring(Int64[b][a][c])})
      @ Base.Broadcast ./broadcast.jl:445
   [11] combine_styles
      @ ./broadcast.jl:421 [inlined]
   [12] broadcasted
      @ ./broadcast.jl:1263 [inlined]
   [13] +(a::@ring(Int64[a][b][c]), b::@ring(Int64[b][a][c]))
      @ PolynomialRings.Operators ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Operators.jl:35
   [14] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:328
   [15] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [16] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:322
   [17] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [18] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:293
Operations: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:329
  Test threw exception
  Expression: one(A) * one(B) == 1
  MethodError: no method matching termtype(::Type{PolynomialRings.Polynomials.SparsePolynomial})
  Closest candidates are:
    termtype(!Matched::Type{var"#s20"} where var"#s20"<:Polynomial{M, C}) where {M, C} at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:96
    termtype(!Matched::PolynomialRings.NamingSchemes.NamingScheme) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:54 (method too new to be called from this world context.)
    termtype(!Matched::PolynomialRings.NamingSchemes.NamingScheme, !Matched::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:54 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] basering(#unused#::Type{PolynomialRings.Polynomials.SparsePolynomial})
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:100
    [2] nestednamingscheme(T::Type{PolynomialRings.Polynomials.SparsePolynomial})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:57
    [3] polynomialtype(M::Type{TupleMonomial{1, Int16, typeof(@degrevlex(c))}}, C::Type; sparse::Bool)
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:48
    [4] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:209 [inlined]
    [5] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [6] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [7] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [8] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:222 [inlined]
    [9] *(a::@ring(Int64[a][b][c]), b::@ring(Int64[b][a][c]))
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/SparsePolynomials.jl:154
   [10] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:329
   [11] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [12] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:322
   [13] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/PolynomialRings.jl:293
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = termwise at Broadcast.jl:433 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:433
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = termwise at Broadcast.jl:433 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:433
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = termwise at Broadcast.jl:433 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:433
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = termwise at Broadcast.jl:433 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:433
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = termwise at Broadcast.jl:433 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:433
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = termwise at Broadcast.jl:433 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:433
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = termwise at Broadcast.jl:433 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:433
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = termwise at Broadcast.jl:433 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:433
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = termwise at Broadcast.jl:433 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:433
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = termwise at Broadcast.jl:433 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:433
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
Construction and conversion: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:42
  Test threw exception
  Expression: (Î± * x) ^ 2 == 2 * x ^ 2
  Cannot create a polynomial ring over Number as it is not concrete
  Stacktrace:
    [1] error(s::String)
      @ Base ./error.jl:33
    [2] polynomialtype(M::Type{TupleMonomial{1, Int16, typeof(@degrevlex(x))}}, C::Type; sparse::Bool)
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:57
    [3] #s153#1
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:76 [inlined]
    [4] var"#s153#1"(T2::Any, T1::Any, ::Any, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] promote_type(#unused#::Type{Rational{BigInt}}, #unused#::Type{Generator{@variable(x), @ring(NumberField{BigInt, 2, BigInt, 2}[x])}})
      @ Base ./promotion.jl:233
    [7] _promote_rule(T1::Type, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:62
    [8] #s153#1
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:75 [inlined]
    [9] var"#s153#1"(T2::Any, T1::Any, ::Any, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
   [10] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
   [11] _promote_type(T::Type, S::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216
   [12] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:222 [inlined]
   [13] _promote
      @ ./promotion.jl:268 [inlined]
   [14] promote
      @ ./promotion.jl:292 [inlined]
   [15] *(a::Generator{@variable(Î±), @ring(â„š[Î±])}, b::Generator{@variable(x), @ring(NumberField{BigInt, 2, BigInt, 2}[x])})
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:251
   [16] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:42
   [17] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [18] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:28
   [19] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [20] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:5
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
Construction and conversion: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:63
  Test threw exception
  Expression: base_extend(c[1] ^ 2 * x - 2x, D) == 0
  Cannot create a polynomial ring over Any as it is not concrete
  Stacktrace:
    [1] error(s::String)
      @ Base ./error.jl:33
    [2] polynomialtype(M::Type{TupleMonomial{2, Int16, typeof(@degrevlex(c[1:2]))}}, C::Type; sparse::Bool)
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:57
    [3] promote_canonical_type(T1::Type{@ring(â„š[c[1:2]])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:136
    [4] promote_canonical_type(T1::Type{@ring(â„š[c[1:2]][x])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:135
    [5] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [6] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [7] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [8] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [9] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:220 [inlined]
   [10] base_extend(p::@ring(â„š[c[1:2]][x]), #unused#::Type{PolynomialRings.QuotientRings.QuotientRing{@ring(â„š[c[1:2]]), 0x78171cf462a5756a}})
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:102
   [11] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:63
   [12] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [13] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:28
   [14] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [15] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:5
Construction and conversion: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:64
  Test threw exception
  Expression: base_extend(c[2] ^ 3 * x - 2x, D) == x
  Cannot create a polynomial ring over Any as it is not concrete
  Stacktrace:
    [1] error(s::String)
      @ Base ./error.jl:33
    [2] polynomialtype(M::Type{TupleMonomial{2, Int16, typeof(@degrevlex(c[1:2]))}}, C::Type; sparse::Bool)
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:57
    [3] promote_canonical_type(T1::Type{@ring(â„š[c[1:2]])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:136
    [4] promote_canonical_type(T1::Type{@ring(â„š[c[1:2]][x])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:135
    [5] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [6] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [7] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [8] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [9] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:220 [inlined]
   [10] base_extend(p::@ring(â„š[c[1:2]][x]), #unused#::Type{PolynomialRings.QuotientRings.QuotientRing{@ring(â„š[c[1:2]]), 0x78171cf462a5756a}})
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:102
   [11] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:64
   [12] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [13] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:28
   [14] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [15] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:5
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = termwise at Broadcast.jl:433 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:433
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
Interplay with conversions: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:81
  Test threw exception
  Expression: promote_type(Q, #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:81 =# @ring(â„¤[a])) == Q
  Cannot create a polynomial ring over Any as it is not concrete
  Stacktrace:
    [1] error(s::String)
      @ Base ./error.jl:33
    [2] polynomialtype(M::Type{TupleMonomial{1, Int16, typeof(@degrevlex(a))}}, C::Type; sparse::Bool)
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:57
    [3] promote_canonical_type(T1::Type{@ring(â„¤[a])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:136
    [4] promote_canonical_type(T1::Type, T2::Type{@ring(â„¤[a])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:116
    [5] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [6] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [7] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [8] _promote_type(T::Type, S::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216
    [9] promote_type(T::Type, S::Type{@ring(â„¤[a])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:221
   [10] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:81
   [11] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [12] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:74
   [13] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:5
Interplay with conversions: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:82
  Test threw exception
  Expression: promote_type(Q, #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:82 =# @ring(â„¤[a, b])) == #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:82 =# @ring(Q[b])
  Cannot create a polynomial ring over Any as it is not concrete
  Stacktrace:
    [1] error(s::String)
      @ Base ./error.jl:33
    [2] polynomialtype(M::Type{TupleMonomial{2, Int16, typeof(@degrevlex(a > b))}}, C::Type; sparse::Bool)
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:57
    [3] promote_canonical_type(T1::Type{@ring(â„¤[a,b])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:136
    [4] promote_canonical_type(T1::Type, T2::Type{@ring(â„¤[a,b])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:116
    [5] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [6] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [7] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [8] _promote_type(T::Type, S::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216
    [9] promote_type(T::Type, S::Type{@ring(â„¤[a,b])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:221
   [10] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:82
   [11] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [12] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:74
   [13] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:5
Interplay with conversions: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:83
  Test threw exception
  Expression: promote_type(Q, #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:83 =# @ring(â„¤[c])) == #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:83 =# @ring(Q[c])
  Cannot create a polynomial ring over Any as it is not concrete
  Stacktrace:
    [1] error(s::String)
      @ Base ./error.jl:33
    [2] polynomialtype(M::Type{TupleMonomial{1, Int16, typeof(@degrevlex(c))}}, C::Type; sparse::Bool)
      @ PolynomialRings.Polynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Polynomials.jl:57
    [3] promote_canonical_type(T1::Type{@ring(â„¤[c])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:136
    [4] promote_canonical_type(T1::Type, T2::Type{@ring(â„¤[c])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:116
    [5] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [6] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [7] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [8] _promote_type(T::Type, S::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216
    [9] promote_type(T::Type, S::Type{@ring(â„¤[c])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:221
   [10] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:83
   [11] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [12] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:74
   [13] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:5
Interplay with conversions: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:84
  Test threw exception
  Expression: promote_type(#= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:84 =# @ring(Q[c]), #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:84 =# @ring(â„¤[a])) == #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:84 =# @ring(Q[c])
  MethodError: no method matching monomialtype(::typeof(@degrevlex(a > c)), ::Type{Int16})
  The applicable method may be too new: running in world age 30715, while current world is 31999.
  Closest candidates are:
    monomialtype(::MonomialOrder, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    monomialtype(!Matched::PolynomialRings.NamingSchemes.NamedVariable, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:27 (method too new to be called from this world context.)
    monomialtype(::MonomialOrder) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] promote_rule(#unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(c))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(a))}})
      @ PolynomialRings.AbstractMonomials ~/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:300
    [2] promote_type(#unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(c))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(a))}})
      @ Base ./promotion.jl:233
    [3] promote_canonical_type(T1::Type{@ring(PolynomialRings.QuotientRings.QuotientRing{@ring(â„¤[a]), 0xbc6f05c2e120ca72}[c])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:138
    [4] promote_canonical_type(T1::Type{@ring(PolynomialRings.QuotientRings.QuotientRing{@ring(â„¤[a]), 0xbc6f05c2e120ca72}[c])}, T2::Type{@ring(â„¤[a])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:118
    [5] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [6] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [7] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [8] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [9] promote_type(T::Type{@ring(PolynomialRings.QuotientRings.QuotientRing{@ring(â„¤[a]), 0xbc6f05c2e120ca72}[c])}, S::Type{@ring(â„¤[a])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:222
   [10] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:84
   [11] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [12] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:74
   [13] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:5
Interplay with conversions: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:85
  Test threw exception
  Expression: promote_type(#= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:85 =# @ring(Q[c]), #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:85 =# @ring(â„¤[a, d])) == #= /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:85 =# @ring(Q[c, d])
  MethodError: no method matching monomialtype(::typeof(@degrevlex(a > c > d)), ::Type{Int16})
  The applicable method may be too new: running in world age 30715, while current world is 31999.
  Closest candidates are:
    monomialtype(::MonomialOrder, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    monomialtype(!Matched::PolynomialRings.NamingSchemes.NamedVariable, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:27 (method too new to be called from this world context.)
    monomialtype(::MonomialOrder) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] promote_rule(#unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(c))}}, #unused#::Type{TupleMonomial{2, Int16, typeof(@degrevlex(a > d))}})
      @ PolynomialRings.AbstractMonomials ~/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:300
    [2] promote_type(#unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(c))}}, #unused#::Type{TupleMonomial{2, Int16, typeof(@degrevlex(a > d))}})
      @ Base ./promotion.jl:233
    [3] promote_canonical_type(T1::Type{@ring(PolynomialRings.QuotientRings.QuotientRing{@ring(â„¤[a]), 0xbc6f05c2e120ca72}[c])}, T2::Type)
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:138
    [4] promote_canonical_type(T1::Type{@ring(PolynomialRings.QuotientRings.QuotientRing{@ring(â„¤[a]), 0xbc6f05c2e120ca72}[c])}, T2::Type{@ring(â„¤[a,d])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:118
    [5] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [6] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [7] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [8] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [9] promote_type(T::Type{@ring(PolynomialRings.QuotientRings.QuotientRing{@ring(â„¤[a]), 0xbc6f05c2e120ca72}[c])}, S::Type{@ring(â„¤[a,d])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:222
   [10] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:85
   [11] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [12] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:74
   [13] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:5
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = termwise at Broadcast.jl:433 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:433
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = termwise at Broadcast.jl:433 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:433
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
Interplay with conversions: Error During Test at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:95
  Test threw exception
  Expression: (a * z) ^ 2 == 2 * z ^ 2
  MethodError: no method matching monomialtype(::typeof(@degrevlex(y > z)), ::Type{Int16})
  The applicable method may be too new: running in world age 30715, while current world is 32001.
  Closest candidates are:
    monomialtype(::MonomialOrder, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    monomialtype(!Matched::PolynomialRings.NamingSchemes.NamedVariable, ::Any) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:27 (method too new to be called from this world context.)
    monomialtype(::MonomialOrder) at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/src/TypeUpgrades.jl:29 (method too new to be called from this world context.)
    ...
  Stacktrace:
    [1] promote_rule(#unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(y))}}, #unused#::Type{TupleMonomial{1, Int16, typeof(@degrevlex(z))}})
      @ PolynomialRings.AbstractMonomials ~/.julia/packages/PolynomialRings/gNALy/src/AbstractMonomials.jl:300
    [2] promote_type
      @ ./promotion.jl:233 [inlined]
    [3] canonicaltype(P::Type{@ring(PolynomialRings.QuotientRings.QuotientRing{@ring(â„¤[a]), 0xbc6f05c2e120ca72}[y][z])})
      @ PolynomialRings.NamedPolynomials ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:164
    [4] #s153#3
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:211 [inlined]
    [5] var"#s153#3"(T::Any, S::Any, LTR::Any, RTL::Any, ::Any, #unused#::Type, #unused#::Type, #unused#::Type, #unused#::Any)
      @ PolynomialRings.NamedPolynomials ./none:0
    [6] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [7] _promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:216 [inlined]
    [8] promote_type
      @ ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/NamedPolynomials.jl:221 [inlined]
    [9] _promote
      @ ./promotion.jl:268 [inlined]
   [10] promote
      @ ./promotion.jl:292 [inlined]
   [11] *(a::Int64, b::@ring(PolynomialRings.QuotientRings.QuotientRing{@ring(â„¤[a]), 0xbc6f05c2e120ca72}[y][z]))
      @ PolynomialRings.Conversions ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Conversions.jl:240
   [12] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:95
   [13] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:74
   [15] top-level scope
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [16] top-level scope
      @ ~/.julia/packages/PolynomialRings/gNALy/test/Assorted/CommutativeAlgebras.jl:5
â”Œ Warning: `f::Transducer |> g::Transducer` is deprecated. Use `xs |> f |> g |> collect` instead of `collect(f |> g, xs)`. For more information, see https://juliafolds.github.io/Transducers.jl/dev/howto/upgrade-to-ixf/
â”‚   caller = merge at Broadcast.jl:404 [inlined]
â”” @ Core ~/.julia/packages/PolynomialRings/gNALy/src/PolynomialRings/Broadcast.jl:404
Test Summary:                                   | Pass  Error  Total
PolynomialRings.jl                              |  704     48    752
  Constants                                     |    6             6
  NamingSchemes                                 |   90            90
  MonomialOrderings                             |   85            85
  Monomials                                     |   65            65
  Terms                                         |    7             7
  Expansions                                    |  122      2    124
    types                                       |   17            17
    expansion()                                 |   17      2     19
    numbered variables                          |    9             9
    coefficient()                               |   26            26
    Substitution                                |    9             9
    KeyOrder                                    |   10            10
    Arrays                                      |   18            18
    Generators + polynomials as expansion specs |    2             2
    Degree                                      |   14            14
  Generators                                    |   26            26
  Type upgrades                                 |   11            11
  exp-style construction                        |    6             6
  Conversion method ambiguity                   |   10            10
  to_dense_monomials inferrability              |    2             2
  canonical types                               |   11            11
  Arithmetic                                    |    2             2
  Assorted tests                                |  261     46    307
    PolynomialRings                             |  261     46    307
      PolynomialRings                           |  118     34    152
        Arithmetic                              |   27            27
        Hashing                                 |    3             3
        Extension of scalars                    |    5      4      9
        conversions between rings               |    4      6     10
        substitution                            |    9             9
        zero comparison in Base                 |    3             3
        degrees                                 |    3      2      5
        differentiation                         |    6             6
        sparse monomials                        |    7             7
        constructors                            |    9      1     10
        base extension                          |   10      8     18
        promotions                              |   22      7     29
        Minimal rings                           |   10            10
        Sparse result types                     |           6      6
      Nested types                              |   10      3     13
        Explicit types                          |    5      1      6
        Variable duplication                    |    3             3
        Operations                              |    2      2      4
      New types                                 |    1             1
      Arrays                                    |   18            18
      Display                                   |   22            22
      Reductions                                |   18            18
      GrÃ¶bner                                   |   40            40
      Syzygy                                    |    4             4
      CommutativeAlgebras                       |   30      9     39
        Ideals                                  |   14            14
        Construction and conversion             |   10      3     13
        Interplay with conversions              |    5      6     11
        Bound names                             |    1             1
ERROR: LoadError: Some tests did not pass: 704 passed, 0 failed, 48 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/PolynomialRings/gNALy/test/runtests.jl:3
ERROR: Package PolynomialRings errored during testing
Stacktrace:
  [1] pkgerror(msg::String)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1650
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:334
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:321
  [5] #test#62
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:71 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:70 [inlined]
  [7] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67
 [11] top-level scope
    @ none:31
