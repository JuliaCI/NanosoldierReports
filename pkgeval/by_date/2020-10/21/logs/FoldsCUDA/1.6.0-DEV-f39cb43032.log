Julia Version 1.6.0-DEV.1300
Commit f39cb43032 (2020-10-21 02:53 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807

   Resolving package versions...
   Installed DataValueInterfaces â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.0
   Installed JuliaVariables â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.2.3
   Installed FoldsCUDA â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.1.0
   Installed ContextVariablesX â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.1.0
   Installed Tables â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.1.0
   Installed Requires â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.1.0
   Installed AbstractFFTs â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.5.0
   Installed GPUArrays â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v6.0.1
   Installed IteratorInterfaceExtensions â”€ v1.0.0
   Installed TimerOutputs â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.5.6
   Installed ArgCheck â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v2.1.0
   Installed DataAPI â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.3.0
   Installed CompositionsBase â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.1.0
   Installed GPUCompiler â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.7.3
   Installed Reexport â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.2.0
   Installed BangBang â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.3.29
   Installed BFloat16s â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.1.0
   Installed ZygoteRules â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.2.0
   Installed Compat â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v3.21.0
   Installed CEnum â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.4.1
   Installed TableTraits â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.0
   Installed Setfield â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.7.0
   Installed NNlib â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.7.5
   Installed LLVM â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v3.2.0
   Installed SplittablesBase â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.1.10
   Installed FLoopsBase â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.1.0
   Installed NameResolution â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.1.5
   Installed ExprTools â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.1.3
   Installed MacroTools â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.5.6
   Installed FLoops â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.1.4
   Installed Transducers â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.4.53
   Installed MLStyle â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.4.6
   Installed Adapt â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v2.3.0
   Installed DefineSingletons â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.1.0
   Installed ConstructionBase â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.0
   Installed OrderedCollections â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.3.1
   Installed InitialValues â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.2.10
   Installed PrettyPrint â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.2.0
   Installed CUDA â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v2.0.2
   Installed MicroCollections â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.1.0
   Installed DataStructures â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.18.7
Updating `~/.julia/environments/v1.6/Project.toml`
  [6cd66ae4] + FoldsCUDA v0.1.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [621f4979] + AbstractFFTs v0.5.0
  [79e6a3ab] + Adapt v2.3.0
  [dce04be8] + ArgCheck v2.1.0
  [ab4f0b2a] + BFloat16s v0.1.0
  [198e06fe] + BangBang v0.3.29
  [fa961155] + CEnum v0.4.1
  [052768ef] + CUDA v2.0.2
  [34da2185] + Compat v3.21.0
  [a33af91c] + CompositionsBase v0.1.0
  [187b0558] + ConstructionBase v1.0.0
  [6add18c4] + ContextVariablesX v0.1.0
  [9a962f9c] + DataAPI v1.3.0
  [864edb3b] + DataStructures v0.18.7
  [e2d170a0] + DataValueInterfaces v1.0.0
  [244e2a9f] + DefineSingletons v0.1.0
  [e2ba6199] + ExprTools v0.1.3
  [cc61a311] + FLoops v0.1.4
  [b9860ae5] + FLoopsBase v0.1.0
  [6cd66ae4] + FoldsCUDA v0.1.0
  [0c68f7d7] + GPUArrays v6.0.1
  [61eb1bfa] + GPUCompiler v0.7.3
  [22cec73e] + InitialValues v0.2.10
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [b14d175d] + JuliaVariables v0.2.3
  [929cbde3] + LLVM v3.2.0
  [d8e11817] + MLStyle v0.4.6
  [1914dd2f] + MacroTools v0.5.6
  [128add7d] + MicroCollections v0.1.0
  [872c559c] + NNlib v0.7.5
  [71a1bf82] + NameResolution v0.1.5
  [bac558e1] + OrderedCollections v1.3.1
  [8162dcfd] + PrettyPrint v0.2.0
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v1.1.0
  [efcf1570] + Setfield v0.7.0
  [171d559e] + SplittablesBase v0.1.10
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.1.0
  [a759f4b9] + TimerOutputs v0.5.6
  [28d57a85] + Transducers v0.4.53
  [700de1a5] + ZygoteRules v0.2.0
  [0dad84c5] + ArgTools
  [56f22d72] + Artifacts
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [f43a241f] + Downloads
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [b27032c2] + LibCURL
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
  [deac9b47] + LibCURL_jll
  [14a3606d] + MozillaCACerts_jll
Precompiling project... (tip: to disable auto-precompilation set ENV["JULIA_PKG_PRECOMPILE_AUTO"]=0)
[32m  âœ“ [39m[90mExprTools[39m
[32m  âœ“ [39m[90mAdapt[39m
[32m  âœ“ [39m[90mCompositionsBase[39m
[32m  âœ“ [39m[90mDataAPI[39m
[32m  âœ“ [39m[90mReexport[39m
[32m  âœ“ [39m[90mDefineSingletons[39m
[32m  âœ“ [39m[90mDataValueInterfaces[39m
[32m  âœ“ [39m[90mIteratorInterfaceExtensions[39m
[32m  âœ“ [39m[90mArgCheck[39m
[32m  âœ“ [39m[90mCEnum[39m
[32m  âœ“ [39m[90mBFloat16s[39m
[32m  âœ“ [39m[90mRequires[39m
[32m  âœ“ [39m[90mAbstractFFTs[39m
[32m  âœ“ [39m[90mPrettyPrint[39m
[32m  âœ“ [39m[90mConstructionBase[39m
[32m  âœ“ [39m[90mOrderedCollections[39m
[32m  âœ“ [39m[90mTableTraits[39m
[32m  âœ“ [39m[90mTimerOutputs[39m
[32m  âœ“ [39m[90mInitialValues[39m
[32m  âœ“ [39m[90mCompat[39m
[32m  âœ“ [39m[90mNameResolution[39m
[32m  âœ“ [39m[90mContextVariablesX[39m
[32m  âœ“ [39m[90mFLoopsBase[39m
[32m  âœ“ [39m[90mTables[39m
[32m  âœ“ [39m[90mNNlib[39m
[32m  âœ“ [39m[90mMacroTools[39m
[32m  âœ“ [39m[90mGPUArrays[39m
[32m  âœ“ [39m[90mZygoteRules[39m
[32m  âœ“ [39m[90mDataStructures[39m
[32m  âœ“ [39m[90mLLVM[39m
[32m  âœ“ [39m[90mSetfield[39m
[32m  âœ“ [39m[90mSplittablesBase[39m
[32m  âœ“ [39m[90mGPUCompiler[39m
[32m  âœ“ [39m[90mMLStyle[39m
[32m  âœ“ [39m[90mBangBang[39m
[32m  âœ“ [39m[90mJuliaVariables[39m
[32m  âœ“ [39m[90mMicroCollections[39m
[32m  âœ“ [39m[90mTransducers[39m
[32m  âœ“ [39m[90mFLoops[39m
[32m  âœ“ [39m[90mCUDA[39m
[32m  âœ“ [39mFoldsCUDA
41 dependencies successfully precompiled
     Testing FoldsCUDA
Status `/tmp/jl_zzRDs0/Project.toml`
  [4c88cf16] Aqua v0.5.0
  [052768ef] CUDA v2.0.2
  [e30172f5] Documenter v0.25.2
  [cc61a311] FLoops v0.1.4
  [6cd66ae4] FoldsCUDA v0.1.0
  [0c68f7d7] GPUArrays v6.0.1
  [22cec73e] InitialValues v0.2.10
  [171d559e] SplittablesBase v0.1.10
  [28d57a85] Transducers v0.4.53
  [9a3f8284] Random
  [8dfed614] Test
Status `/tmp/jl_zzRDs0/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [79e6a3ab] Adapt v2.3.0
  [4c88cf16] Aqua v0.5.0
  [dce04be8] ArgCheck v2.1.0
  [ab4f0b2a] BFloat16s v0.1.0
  [198e06fe] BangBang v0.3.29
  [fa961155] CEnum v0.4.1
  [052768ef] CUDA v2.0.2
  [34da2185] Compat v3.21.0
  [a33af91c] CompositionsBase v0.1.0
  [187b0558] ConstructionBase v1.0.0
  [6add18c4] ContextVariablesX v0.1.0
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.18.7
  [e2d170a0] DataValueInterfaces v1.0.0
  [244e2a9f] DefineSingletons v0.1.0
  [ffbed154] DocStringExtensions v0.8.3
  [e30172f5] Documenter v0.25.2
  [e2ba6199] ExprTools v0.1.3
  [cc61a311] FLoops v0.1.4
  [b9860ae5] FLoopsBase v0.1.0
  [6cd66ae4] FoldsCUDA v0.1.0
  [0c68f7d7] GPUArrays v6.0.1
  [61eb1bfa] GPUCompiler v0.7.3
  [22cec73e] InitialValues v0.2.10
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.1
  [b14d175d] JuliaVariables v0.2.3
  [929cbde3] LLVM v3.2.0
  [d8e11817] MLStyle v0.4.6
  [1914dd2f] MacroTools v0.5.6
  [128add7d] MicroCollections v0.1.0
  [872c559c] NNlib v0.7.5
  [71a1bf82] NameResolution v0.1.5
  [bac558e1] OrderedCollections v1.3.1
  [69de0a69] Parsers v1.0.11
  [8162dcfd] PrettyPrint v0.2.0
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.1.0
  [efcf1570] Setfield v0.7.0
  [171d559e] SplittablesBase v0.1.10
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.1.0
  [a759f4b9] TimerOutputs v0.5.6
  [28d57a85] Transducers v0.4.53
  [700de1a5] ZygoteRules v0.2.0
  [0dad84c5] ArgTools
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [f43a241f] Downloads
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [b27032c2] LibCURL
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
  [deac9b47] LibCURL_jll
  [14a3606d] MozillaCACerts_jll
     Testing Running tests...
â”Œ Warning: The call to compilecache failed to create a usable precompiled cache file for FoldsCUDA [6cd66ae4-5932-4b96-926d-e73e578e42cc]
â”‚   exception = Required dependency FLoops [cc61a311-1640-44b5-9fba-1b764f453329] failed to load from a cache file.
â”” @ Base loading.jl:1045
[ Info: SetupBuildDirectory: setting up build directory.
[ Info: Doctest: running doctests.
â”Œ Error: doctest failure in ~/.julia/packages/FoldsCUDA/zyFOA/src/FoldsCUDA.jl
â”‚ 
â”‚ ```jldoctest README
â”‚ julia> using FoldsCUDA, CUDA, FLoops
â”‚ 
â”‚ julia> using GPUArrays: @allowscalar
â”‚ 
â”‚ julia> xs = CUDA.rand(10^8);
â”‚ 
â”‚ julia> @allowscalar xs[100] = 2;
â”‚ 
â”‚ julia> @allowscalar xs[200] = 2;
â”‚ 
â”‚ julia> @floop CUDAEx() for (x, i) in zip(xs, eachindex(xs))
â”‚            @reduce() do (imax = -1; i), (xmax = -Inf32; x)
â”‚                if xmax < x
â”‚                    xmax = x
â”‚                    imax = i
â”‚                end
â”‚            end
â”‚        end
â”‚ 
â”‚ julia> xmax
â”‚ 2.0f0
â”‚ 
â”‚ julia> imax  # the *first* position for the largest value
â”‚ 100
â”‚ ```
â”‚ 
â”‚ Subexpression:
â”‚ 
â”‚ xs = CUDA.rand(10^8);
â”‚ 
â”‚ Evaluated output:
â”‚ 
â”‚ â”Œ Error: Could not initialize CUDA
â”‚ â”‚   exception =
â”‚ â”‚    could not load library "libcuda"
â”‚ â”‚    libcuda.so: cannot open shared object file: No such file or directory
â”‚ â”‚    Stacktrace:
â”‚ â”‚      [1] dlopen(s::String, flags::UInt32; throw_error::Bool)
â”‚ â”‚        @ Base.Libc.Libdl ./libdl.jl:114
â”‚ â”‚      [2] dlopen
â”‚ â”‚        @ ./libdl.jl:114 [inlined]
â”‚ â”‚      [3] #dlopen#2
â”‚ â”‚        @ ./libdl.jl:110 [inlined]
â”‚ â”‚      [4] dlopen (repeats 2 times)
â”‚ â”‚        @ ./libdl.jl:110 [inlined]
â”‚ â”‚      [5] (::CUDA.var"#2976#cache_fptr!#615")()
â”‚ â”‚        @ CUDA ~/.julia/packages/CUDA/gKMm0/lib/utils/call.jl:31
â”‚ â”‚      [6] macro expansion
â”‚ â”‚        @ ~/.julia/packages/CUDA/gKMm0/lib/utils/call.jl:39 [inlined]
â”‚ â”‚      [7] __configure__(show_reason::Bool)
â”‚ â”‚        @ CUDA ~/.julia/packages/CUDA/gKMm0/src/initialization.jl:94
â”‚ â”‚      [8] macro expansion
â”‚ â”‚        @ ~/.julia/packages/CUDA/gKMm0/src/initialization.jl:29 [inlined]
â”‚ â”‚      [9] macro expansion
â”‚ â”‚        @ ./lock.jl:190 [inlined]
â”‚ â”‚     [10] _functional(show_reason::Bool)
â”‚ â”‚        @ CUDA ~/.julia/packages/CUDA/gKMm0/src/initialization.jl:26
â”‚ â”‚     [11] functional(show_reason::Bool)
â”‚ â”‚        @ CUDA ~/.julia/packages/CUDA/gKMm0/src/initialization.jl:19
â”‚ â”‚     [12] libcuda()
â”‚ â”‚        @ CUDA ~/.julia/packages/CUDA/gKMm0/src/initialization.jl:50
â”‚ â”‚     [13] (::CUDA.var"#658#cache_fptr!#9")()
â”‚ â”‚        @ CUDA ~/.julia/packages/CUDA/gKMm0/lib/utils/call.jl:31
â”‚ â”‚     [14] macro expansion
â”‚ â”‚        @ ~/.julia/packages/CUDA/gKMm0/lib/utils/call.jl:39 [inlined]
â”‚ â”‚     [15] macro expansion
â”‚ â”‚        @ ~/.julia/packages/CUDA/gKMm0/lib/cudadrv/libcuda.jl:29 [inlined]
â”‚ â”‚     [16] macro expansion
â”‚ â”‚        @ ~/.julia/packages/CUDA/gKMm0/lib/cudadrv/error.jl:108 [inlined]
â”‚ â”‚     [17] cuDeviceGet(device::Base.RefValue{Int32}, ordinal::Int64)
â”‚ â”‚        @ CUDA ~/.julia/packages/CUDA/gKMm0/lib/utils/call.jl:93
â”‚ â”‚     [18] CuDevice
â”‚ â”‚        @ ~/.julia/packages/CUDA/gKMm0/lib/cudadrv/devices.jl:25 [inlined]
â”‚ â”‚     [19] initialize_thread(tid::Int64)
â”‚ â”‚        @ CUDA ~/.julia/packages/CUDA/gKMm0/src/state.jl:121
â”‚ â”‚     [20] prepare_cuda_call()
â”‚ â”‚        @ CUDA ~/.julia/packages/CUDA/gKMm0/src/state.jl:80
â”‚ â”‚     [21] context
â”‚ â”‚        @ ~/.julia/packages/CUDA/gKMm0/src/state.jl:142 [inlined]
â”‚ â”‚     [22] default_rng()
â”‚ â”‚        @ CUDA.CURAND ~/.julia/packages/CUDA/gKMm0/lib/curand/CURAND.jl:29
â”‚ â”‚     [23] rand(::Int64)
â”‚ â”‚        @ CUDA ~/.julia/packages/CUDA/gKMm0/src/random.jl:70
â”‚ â”‚     [24] top-level scope
â”‚ â”‚        @ none:1
â”‚ â”‚     [25] eval
â”‚ â”‚        @ ./boot.jl:360 [inlined]
â”‚ â”‚     [26] #7
â”‚ â”‚        @ ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:220 [inlined]
â”‚ â”‚     [27] (::Documenter.Utilities.var"#14#15"{Documenter.DocTests.var"#7#8"{Module}, Vector{UInt8}, Pipe, Base.PipeEndpoint, Base.PipeEndpoint})()
â”‚ â”‚        @ Documenter.Utilities ~/.julia/packages/Documenter/pjwqp/src/Utilities/Utilities.jl:569
â”‚ â”‚     [28] with_logstate(f::Function, logstate::Any)
â”‚ â”‚        @ Base.CoreLogging ./logging.jl:491
â”‚ â”‚     [29] with_logger
â”‚ â”‚        @ ./logging.jl:603 [inlined]
â”‚ â”‚     [30] withoutput(f::Documenter.DocTests.var"#7#8"{Module})
â”‚ â”‚        @ Documenter.Utilities ~/.julia/packages/Documenter/pjwqp/src/Utilities/Utilities.jl:567
â”‚ â”‚     [31] eval_repl(block::Documenter.DocTests.MutableMD2CodeBlock, sandbox::Module, meta::Dict{Symbol, Any}, doc::Documenter.Documents.Document, page::String)
â”‚ â”‚        @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:219
â”‚ â”‚     [32] doctest(ctx::Documenter.DocTests.DocTestContext, block_immutable::Documenter.Utilities.Markdown2.CodeBlock)
â”‚ â”‚        @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:169
â”‚ â”‚     [33] (::Documenter.DocTests.var"#1#2"{Documenter.DocTests.DocTestContext})(node::Documenter.Utilities.Markdown2.CodeBlock)
â”‚ â”‚        @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:111
â”‚ â”‚     [34] walk(f::Documenter.DocTests.var"#1#2"{Documenter.DocTests.DocTestContext}, node::Documenter.Utilities.Markdown2.CodeBlock)
â”‚ â”‚        @ Documenter.Utilities.Markdown2 ~/.julia/packages/Documenter/pjwqp/src/Utilities/Markdown2.jl:297
â”‚ â”‚     [35] walk(f::Function, nodes::Vector{Documenter.Utilities.Markdown2.MarkdownBlockNode})
â”‚ â”‚        @ Documenter.Utilities.Markdown2 ~/.julia/packages/Documenter/pjwqp/src/Utilities/Markdown2.jl:306
â”‚ â”‚     [36] walk(f::Documenter.DocTests.var"#1#2"{Documenter.DocTests.DocTestContext}, node::Documenter.Utilities.Markdown2.MD)
â”‚ â”‚        @ Documenter.Utilities.Markdown2 ~/.julia/packages/Documenter/pjwqp/src/Utilities/Markdown2.jl:299
â”‚ â”‚     [37] doctest
â”‚ â”‚        @ ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:108 [inlined]
â”‚ â”‚     [38] doctest(docstr::Base.Docs.DocStr, mod::Module, doc::Documenter.Documents.Document)
â”‚ â”‚        @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:88
â”‚ â”‚     [39] doctest(blueprint::Documenter.Documents.DocumentBlueprint, doc::Documenter.Documents.Document)
â”‚ â”‚        @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:56
â”‚ â”‚     [40] runner(#unused#::Type{Documenter.Builder.Doctest}, doc::Documenter.Documents.Document)
â”‚ â”‚        @ Documenter.Builder ~/.julia/packages/Documenter/pjwqp/src/Builder.jl:214
â”‚ â”‚     [41] dispatch(#unused#::Type{Documenter.Builder.DocumentPipeline}, x::Documenter.Documents.Document)
â”‚ â”‚        @ Documenter.Utilities.Selectors ~/.julia/packages/Documenter/pjwqp/src/Utilities/Selectors.jl:167
â”‚ â”‚     [42] #2
â”‚ â”‚        @ ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:241 [inlined]
â”‚ â”‚     [43] cd(f::Documenter.var"#2#3"{Documenter.Documents.Document}, dir::String)
â”‚ â”‚        @ Base.Filesystem ./file.jl:104
â”‚ â”‚     [44] makedocs(; debug::Bool, format::Documenter.Writers.HTMLWriter.HTML, kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{5, Symbol}, NamedTuple{(:root, :source, :sitename, :doctest, :modules), Tuple{String, String, String, Symbol, Vector{Module}}}})
â”‚ â”‚        @ Documenter ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:240
â”‚ â”‚     [45] (::Documenter.var"#all_doctests#31"{Bool, Vector{Module}})()
â”‚ â”‚        @ Documenter ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:802
â”‚ â”‚     [46] macro expansion
â”‚ â”‚        @ ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:818 [inlined]
â”‚ â”‚     [47] macro expansion
â”‚ â”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
â”‚ â”‚     [48] doctest(source::Nothing, modules::Vector{Module}; fix::Bool, testset::String)
â”‚ â”‚        @ Documenter ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:818
â”‚ â”‚     [49] doctest(package::Module; manual::Bool, testset::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
â”‚ â”‚        @ Documenter ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:761
â”‚ â”‚     [50] top-level scope
â”‚ â”‚        @ ~/.julia/packages/FoldsCUDA/zyFOA/test/test_doctest.jl:8
â”‚ â”‚     [51] top-level scope
â”‚ â”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
â”‚ â”‚     [52] top-level scope
â”‚ â”‚        @ ~/.julia/packages/FoldsCUDA/zyFOA/test/test_doctest.jl:8
â”‚ â”‚     [53] include(mod::Module, _path::String)
â”‚ â”‚        @ Base ./Base.jl:389
â”‚ â”‚     [54] include(x::String)
â”‚ â”‚        @ Main.TestFoldsCUDA ~/.julia/packages/FoldsCUDA/zyFOA/test/runtests.jl:1
â”‚ â”‚     [55] top-level scope
â”‚ â”‚        @ ~/.julia/packages/FoldsCUDA/zyFOA/test/runtests.jl:13
â”‚ â”‚     [56] top-level scope
â”‚ â”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1219
â”‚ â”‚     [57] include(fname::String)
â”‚ â”‚        @ Base.MainInclude ./client.jl:444
â”‚ â”‚     [58] top-level scope
â”‚ â”‚        @ none:6
â”‚ â”‚     [59] eval(m::Module, e::Any)
â”‚ â”‚        @ Core ./boot.jl:360
â”‚ â”‚     [60] exec_options(opts::Base.JLOptions)
â”‚ â”‚        @ Base ./client.jl:261
â”‚ â”” @ CUDA ~/.julia/packages/CUDA/gKMm0/src/initialization.jl:101
â”‚ ERROR: CUDA.jl did not successfully initialize, and is not usable.
â”‚ If you did not see any other error message, try again in a new session
â”‚ with the JULIA_DEBUG environment variable set to 'CUDA'.
â”‚ Stacktrace:
â”‚   [1] error(s::String)
â”‚     @ Base ./error.jl:33
â”‚   [2] libcuda()
â”‚     @ CUDA ~/.julia/packages/CUDA/gKMm0/src/initialization.jl:51
â”‚   [3] (::CUDA.var"#658#cache_fptr!#9")()
â”‚     @ CUDA ~/.julia/packages/CUDA/gKMm0/lib/utils/call.jl:31
â”‚   [4] macro expansion
â”‚     @ ~/.julia/packages/CUDA/gKMm0/lib/utils/call.jl:39 [inlined]
â”‚   [5] macro expansion
â”‚     @ ~/.julia/packages/CUDA/gKMm0/lib/cudadrv/libcuda.jl:29 [inlined]
â”‚   [6] macro expansion
â”‚     @ ~/.julia/packages/CUDA/gKMm0/lib/cudadrv/error.jl:108 [inlined]
â”‚   [7] cuDeviceGet(device::Base.RefValue{Int32}, ordinal::Int64)
â”‚     @ CUDA ~/.julia/packages/CUDA/gKMm0/lib/utils/call.jl:93
â”‚   [8] CuDevice
â”‚     @ ~/.julia/packages/CUDA/gKMm0/lib/cudadrv/devices.jl:25 [inlined]
â”‚   [9] initialize_thread(tid::Int64)
â”‚     @ CUDA ~/.julia/packages/CUDA/gKMm0/src/state.jl:121
â”‚  [10] prepare_cuda_call()
â”‚     @ CUDA ~/.julia/packages/CUDA/gKMm0/src/state.jl:80
â”‚  [11] context
â”‚     @ ~/.julia/packages/CUDA/gKMm0/src/state.jl:142 [inlined]
â”‚  [12] default_rng()
â”‚     @ CUDA.CURAND ~/.julia/packages/CUDA/gKMm0/lib/curand/CURAND.jl:29
â”‚  [13] rand(::Int64)
â”‚     @ CUDA ~/.julia/packages/CUDA/gKMm0/src/random.jl:70
â”‚  [14] top-level scope
â”‚     @ none:1
â”‚ 
â”‚ Expected output:
â”‚ 
â”‚ 
â”‚ 
â”‚   diff =
â”‚    Warning: Diff output requires color.
â”‚    â”Œ Error: Could not initialize CUDA
â”‚    â”‚   exception =
â”‚    â”‚    could not load library "libcuda"
â”‚    â”‚    libcuda.so: cannot open shared object file: No such file or directory
â”‚    â”‚    Stacktrace:
â”‚    â”‚      [1] dlopen(s::String, flags::UInt32; throw_error::Bool)
â”‚    â”‚        @ Base.Libc.Libdl ./libdl.jl:114
â”‚    â”‚      [2] dlopen
â”‚    â”‚        @ ./libdl.jl:114 [inlined]
â”‚    â”‚      [3] #dlopen#2
â”‚    â”‚        @ ./libdl.jl:110 [inlined]
â”‚    â”‚      [4] dlopen (repeats 2 times)
â”‚    â”‚        @ ./libdl.jl:110 [inlined]
â”‚    â”‚      [5] (::CUDA.var"#2976#cache_fptr!#615")()
â”‚    â”‚        @ CUDA ~/.julia/packages/CUDA/gKMm0/lib/utils/call.jl:31
â”‚    â”‚      [6] macro expansion
â”‚    â”‚        @ ~/.julia/packages/CUDA/gKMm0/lib/utils/call.jl:39 [inlined]
â”‚    â”‚      [7] __configure__(show_reason::Bool)
â”‚    â”‚        @ CUDA ~/.julia/packages/CUDA/gKMm0/src/initialization.jl:94
â”‚    â”‚      [8] macro expansion
â”‚    â”‚        @ ~/.julia/packages/CUDA/gKMm0/src/initialization.jl:29 [inlined]
â”‚    â”‚      [9] macro expansion
â”‚    â”‚        @ ./lock.jl:190 [inlined]
â”‚    â”‚     [10] _functional(show_reason::Bool)
â”‚    â”‚        @ CUDA ~/.julia/packages/CUDA/gKMm0/src/initialization.jl:26
â”‚    â”‚     [11] functional(show_reason::Bool)
â”‚    â”‚        @ CUDA ~/.julia/packages/CUDA/gKMm0/src/initialization.jl:19
â”‚    â”‚     [12] libcuda()
â”‚    â”‚        @ CUDA ~/.julia/packages/CUDA/gKMm0/src/initialization.jl:50
â”‚    â”‚     [13] (::CUDA.var"#658#cache_fptr!#9")()
â”‚    â”‚        @ CUDA ~/.julia/packages/CUDA/gKMm0/lib/utils/call.jl:31
â”‚    â”‚     [14] macro expansion
â”‚    â”‚        @ ~/.julia/packages/CUDA/gKMm0/lib/utils/call.jl:39 [inlined]
â”‚    â”‚     [15] macro expansion
â”‚    â”‚        @ ~/.julia/packages/CUDA/gKMm0/lib/cudadrv/libcuda.jl:29 [inlined]
â”‚    â”‚     [16] macro expansion
â”‚    â”‚        @ ~/.julia/packages/CUDA/gKMm0/lib/cudadrv/error.jl:108 [inlined]
â”‚    â”‚     [17] cuDeviceGet(device::Base.RefValue{Int32}, ordinal::Int64)
â”‚    â”‚        @ CUDA ~/.julia/packages/CUDA/gKMm0/lib/utils/call.jl:93
â”‚    â”‚     [18] CuDevice
â”‚    â”‚        @ ~/.julia/packages/CUDA/gKMm0/lib/cudadrv/devices.jl:25 [inlined]
â”‚    â”‚     [19] initialize_thread(tid::Int64)
â”‚    â”‚        @ CUDA ~/.julia/packages/CUDA/gKMm0/src/state.jl:121
â”‚    â”‚     [20] prepare_cuda_call()
â”‚    â”‚        @ CUDA ~/.julia/packages/CUDA/gKMm0/src/state.jl:80
â”‚    â”‚     [21] context
â”‚    â”‚        @ ~/.julia/packages/CUDA/gKMm0/src/state.jl:142 [inlined]
â”‚    â”‚     [22] default_rng()
â”‚    â”‚        @ CUDA.CURAND ~/.julia/packages/CUDA/gKMm0/lib/curand/CURAND.jl:29
â”‚    â”‚     [23] rand(::Int64)
â”‚    â”‚        @ CUDA ~/.julia/packages/CUDA/gKMm0/src/random.jl:70
â”‚    â”‚     [24] top-level scope
â”‚    â”‚        @ none:1
â”‚    â”‚     [25] eval
â”‚    â”‚        @ ./boot.jl:360 [inlined]
â”‚    â”‚     [26] #7
â”‚    â”‚        @ ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:220 [inlined]
â”‚    â”‚     [27] (::Documenter.Utilities.var"#14#15"{Documenter.DocTests.var"#7#8"{Module}, Vector{UInt8}, Pipe, Base.PipeEndpoint, Base.PipeEndpoint})()
â”‚    â”‚        @ Documenter.Utilities ~/.julia/packages/Documenter/pjwqp/src/Utilities/Utilities.jl:569
â”‚    â”‚     [28] with_logstate(f::Function, logstate::Any)
â”‚    â”‚        @ Base.CoreLogging ./logging.jl:491
â”‚    â”‚     [29] with_logger
â”‚    â”‚        @ ./logging.jl:603 [inlined]
â”‚    â”‚     [30] withoutput(f::Documenter.DocTests.var"#7#8"{Module})
â”‚    â”‚        @ Documenter.Utilities ~/.julia/packages/Documenter/pjwqp/src/Utilities/Utilities.jl:567
â”‚    â”‚     [31] eval_repl(block::Documenter.DocTests.MutableMD2CodeBlock, sandbox::Module, meta::Dict{Symbol, Any}, doc::Documenter.Documents.Document, page::String)
â”‚    â”‚        @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:219
â”‚    â”‚     [32] doctest(ctx::Documenter.DocTests.DocTestContext, block_immutable::Documenter.Utilities.Markdown2.CodeBlock)
â”‚    â”‚        @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:169
â”‚    â”‚     [33] (::Documenter.DocTests.var"#1#2"{Documenter.DocTests.DocTestContext})(node::Documenter.Utilities.Markdown2.CodeBlock)
â”‚    â”‚        @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:111
â”‚    â”‚     [34] walk(f::Documenter.DocTests.var"#1#2"{Documenter.DocTests.DocTestContext}, node::Documenter.Utilities.Markdown2.CodeBlock)
â”‚    â”‚        @ Documenter.Utilities.Markdown2 ~/.julia/packages/Documenter/pjwqp/src/Utilities/Markdown2.jl:297
â”‚    â”‚     [35] walk(f::Function, nodes::Vector{Documenter.Utilities.Markdown2.MarkdownBlockNode})
â”‚    â”‚        @ Documenter.Utilities.Markdown2 ~/.julia/packages/Documenter/pjwqp/src/Utilities/Markdown2.jl:306
â”‚    â”‚     [36] walk(f::Documenter.DocTests.var"#1#2"{Documenter.DocTests.DocTestContext}, node::Documenter.Utilities.Markdown2.MD)
â”‚    â”‚        @ Documenter.Utilities.Markdown2 ~/.julia/packages/Documenter/pjwqp/src/Utilities/Markdown2.jl:299
â”‚    â”‚     [37] doctest
â”‚    â”‚        @ ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:108 [inlined]
â”‚    â”‚     [38] doctest(docstr::Base.Docs.DocStr, mod::Module, doc::Documenter.Documents.Document)
â”‚    â”‚        @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:88
â”‚    â”‚     [39] doctest(blueprint::Documenter.Documents.DocumentBlueprint, doc::Documenter.Documents.Document)
â”‚    â”‚        @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:56
â”‚    â”‚     [40] runner(#unused#::Type{Documenter.Builder.Doctest}, doc::Documenter.Documents.Document)
â”‚    â”‚        @ Documenter.Builder ~/.julia/packages/Documenter/pjwqp/src/Builder.jl:214
â”‚    â”‚     [41] dispatch(#unused#::Type{Documenter.Builder.DocumentPipeline}, x::Documenter.Documents.Document)
â”‚    â”‚        @ Documenter.Utilities.Selectors ~/.julia/packages/Documenter/pjwqp/src/Utilities/Selectors.jl:167
â”‚    â”‚     [42] #2
â”‚    â”‚        @ ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:241 [inlined]
â”‚    â”‚     [43] cd(f::Documenter.var"#2#3"{Documenter.Documents.Document}, dir::String)
â”‚    â”‚        @ Base.Filesystem ./file.jl:104
â”‚    â”‚     [44] makedocs(; debug::Bool, format::Documenter.Writers.HTMLWriter.HTML, kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{5, Symbol}, NamedTuple{(:root, :source, :sitename, :doctest, :modules), Tuple{String, String, String, Symbol, Vector{Module}}}})
â”‚    â”‚        @ Documenter ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:240
â”‚    â”‚     [45] (::Documenter.var"#all_doctests#31"{Bool, Vector{Module}})()
â”‚    â”‚        @ Documenter ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:802
â”‚    â”‚     [46] macro expansion
â”‚    â”‚        @ ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:818 [inlined]
â”‚    â”‚     [47] macro expansion
â”‚    â”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
â”‚    â”‚     [48] doctest(source::Nothing, modules::Vector{Module}; fix::Bool, testset::String)
â”‚    â”‚        @ Documenter ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:818
â”‚    â”‚     [49] doctest(package::Module; manual::Bool, testset::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
â”‚    â”‚        @ Documenter ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:761
â”‚    â”‚     [50] top-level scope
â”‚    â”‚        @ ~/.julia/packages/FoldsCUDA/zyFOA/test/test_doctest.jl:8
â”‚    â”‚     [51] top-level scope
â”‚    â”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
â”‚    â”‚     [52] top-level scope
â”‚    â”‚        @ ~/.julia/packages/FoldsCUDA/zyFOA/test/test_doctest.jl:8
â”‚    â”‚     [53] include(mod::Module, _path::String)
â”‚    â”‚        @ Base ./Base.jl:389
â”‚    â”‚     [54] include(x::String)
â”‚    â”‚        @ Main.TestFoldsCUDA ~/.julia/packages/FoldsCUDA/zyFOA/test/runtests.jl:1
â”‚    â”‚     [55] top-level scope
â”‚    â”‚        @ ~/.julia/packages/FoldsCUDA/zyFOA/test/runtests.jl:13
â”‚    â”‚     [56] top-level scope
â”‚    â”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1219
â”‚    â”‚     [57] include(fname::String)
â”‚    â”‚        @ Base.MainInclude ./client.jl:444
â”‚    â”‚     [58] top-level scope
â”‚    â”‚        @ none:6
â”‚    â”‚     [59] eval(m::Module, e::Any)
â”‚    â”‚        @ Core ./boot.jl:360
â”‚    â”‚     [60] exec_options(opts::Base.JLOptions)
â”‚    â”‚        @ Base ./client.jl:261
â”‚    â”” @ CUDA ~/.julia/packages/CUDA/gKMm0/src/initialization.jl:101
â”‚    ERROR: CUDA.jl did not successfully initialize, and is not usable.
â”‚    If you did not see any other error message, try again in a new session
â”‚    with the JULIA_DEBUG environment variable set to 'CUDA'.
â”‚    Stacktrace:
â”‚      [1] error(s::String)
â”‚        @ Base ./error.jl:33
â”‚      [2] libcuda()
â”‚        @ CUDA ~/.julia/packages/CUDA/gKMm0/src/initialization.jl:51
â”‚      [3] (::CUDA.var"#658#cache_fptr!#9")()
â”‚        @ CUDA ~/.julia/packages/CUDA/gKMm0/lib/utils/call.jl:31
â”‚      [4] macro expansion
â”‚        @ ~/.julia/packages/CUDA/gKMm0/lib/utils/call.jl:39 [inlined]
â”‚      [5] macro expansion
â”‚        @ ~/.julia/packages/CUDA/gKMm0/lib/cudadrv/libcuda.jl:29 [inlined]
â”‚      [6] macro expansion
â”‚        @ ~/.julia/packages/CUDA/gKMm0/lib/cudadrv/error.jl:108 [inlined]
â”‚      [7] cuDeviceGet(device::Base.RefValue{Int32}, ordinal::Int64)
â”‚        @ CUDA ~/.julia/packages/CUDA/gKMm0/lib/utils/call.jl:93
â”‚      [8] CuDevice
â”‚        @ ~/.julia/packages/CUDA/gKMm0/lib/cudadrv/devices.jl:25 [inlined]
â”‚      [9] initialize_thread(tid::Int64)
â”‚        @ CUDA ~/.julia/packages/CUDA/gKMm0/src/state.jl:121
â”‚     [10] prepare_cuda_call()
â”‚        @ CUDA ~/.julia/packages/CUDA/gKMm0/src/state.jl:80
â”‚     [11] context
â”‚        @ ~/.julia/packages/CUDA/gKMm0/src/state.jl:142 [inlined]
â”‚     [12] default_rng()
â”‚        @ CUDA.CURAND ~/.julia/packages/CUDA/gKMm0/lib/curand/CURAND.jl:29
â”‚     [13] rand(::Int64)
â”‚        @ CUDA ~/.julia/packages/CUDA/gKMm0/src/random.jl:70
â”‚     [14] top-level scope
â”‚        @ none:1
â”” @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
â”Œ Error: doctest failure in ~/.julia/packages/FoldsCUDA/zyFOA/src/FoldsCUDA.jl
â”‚ 
â”‚ ```jldoctest README
â”‚ julia> using FoldsCUDA, CUDA, FLoops
â”‚ 
â”‚ julia> using GPUArrays: @allowscalar
â”‚ 
â”‚ julia> xs = CUDA.rand(10^8);
â”‚ 
â”‚ julia> @allowscalar xs[100] = 2;
â”‚ 
â”‚ julia> @allowscalar xs[200] = 2;
â”‚ 
â”‚ julia> @floop CUDAEx() for (x, i) in zip(xs, eachindex(xs))
â”‚            @reduce() do (imax = -1; i), (xmax = -Inf32; x)
â”‚                if xmax < x
â”‚                    xmax = x
â”‚                    imax = i
â”‚                end
â”‚            end
â”‚        end
â”‚ 
â”‚ julia> xmax
â”‚ 2.0f0
â”‚ 
â”‚ julia> imax  # the *first* position for the largest value
â”‚ 100
â”‚ ```
â”‚ 
â”‚ Subexpression:
â”‚ 
â”‚ @allowscalar xs[100] = 2;
â”‚ 
â”‚ Evaluated output:
â”‚ 
â”‚ ERROR: UndefVarError: xs not defined
â”‚ Stacktrace:
â”‚  [1] top-level scope
â”‚    @ ~/.julia/packages/GPUArrays/SmL6R/src/host/indexing.jl:64
â”‚ 
â”‚ Expected output:
â”‚ 
â”‚ 
â”‚ 
â”‚   diff =
â”‚    Warning: Diff output requires color.
â”‚    ERROR: UndefVarError: xs not defined
â”‚    Stacktrace:
â”‚     [1] top-level scope
â”‚       @ ~/.julia/packages/GPUArrays/SmL6R/src/host/indexing.jl:64
â”” @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
â”Œ Error: doctest failure in ~/.julia/packages/FoldsCUDA/zyFOA/src/FoldsCUDA.jl
â”‚ 
â”‚ ```jldoctest README
â”‚ julia> using FoldsCUDA, CUDA, FLoops
â”‚ 
â”‚ julia> using GPUArrays: @allowscalar
â”‚ 
â”‚ julia> xs = CUDA.rand(10^8);
â”‚ 
â”‚ julia> @allowscalar xs[100] = 2;
â”‚ 
â”‚ julia> @allowscalar xs[200] = 2;
â”‚ 
â”‚ julia> @floop CUDAEx() for (x, i) in zip(xs, eachindex(xs))
â”‚            @reduce() do (imax = -1; i), (xmax = -Inf32; x)
â”‚                if xmax < x
â”‚                    xmax = x
â”‚                    imax = i
â”‚                end
â”‚            end
â”‚        end
â”‚ 
â”‚ julia> xmax
â”‚ 2.0f0
â”‚ 
â”‚ julia> imax  # the *first* position for the largest value
â”‚ 100
â”‚ ```
â”‚ 
â”‚ Subexpression:
â”‚ 
â”‚ @allowscalar xs[200] = 2;
â”‚ 
â”‚ Evaluated output:
â”‚ 
â”‚ ERROR: UndefVarError: xs not defined
â”‚ Stacktrace:
â”‚  [1] top-level scope
â”‚    @ ~/.julia/packages/GPUArrays/SmL6R/src/host/indexing.jl:64
â”‚ 
â”‚ Expected output:
â”‚ 
â”‚ 
â”‚ 
â”‚   diff =
â”‚    Warning: Diff output requires color.
â”‚    ERROR: UndefVarError: xs not defined
â”‚    Stacktrace:
â”‚     [1] top-level scope
â”‚       @ ~/.julia/packages/GPUArrays/SmL6R/src/host/indexing.jl:64
â”” @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
â”Œ Error: doctest failure in ~/.julia/packages/FoldsCUDA/zyFOA/src/FoldsCUDA.jl
â”‚ 
â”‚ ```jldoctest README
â”‚ julia> using FoldsCUDA, CUDA, FLoops
â”‚ 
â”‚ julia> using GPUArrays: @allowscalar
â”‚ 
â”‚ julia> xs = CUDA.rand(10^8);
â”‚ 
â”‚ julia> @allowscalar xs[100] = 2;
â”‚ 
â”‚ julia> @allowscalar xs[200] = 2;
â”‚ 
â”‚ julia> @floop CUDAEx() for (x, i) in zip(xs, eachindex(xs))
â”‚            @reduce() do (imax = -1; i), (xmax = -Inf32; x)
â”‚                if xmax < x
â”‚                    xmax = x
â”‚                    imax = i
â”‚                end
â”‚            end
â”‚        end
â”‚ 
â”‚ julia> xmax
â”‚ 2.0f0
â”‚ 
â”‚ julia> imax  # the *first* position for the largest value
â”‚ 100
â”‚ ```
â”‚ 
â”‚ Subexpression:
â”‚ 
â”‚ @floop CUDAEx() for (x, i) in zip(xs, eachindex(xs))
â”‚     @reduce() do (imax = -1; i), (xmax = -Inf32; x)
â”‚         if xmax < x
â”‚             xmax = x
â”‚             imax = i
â”‚         end
â”‚     end
â”‚ end
â”‚ 
â”‚ Evaluated output:
â”‚ 
â”‚ ERROR: UndefVarError: xs not defined
â”‚ Stacktrace:
â”‚  [1] top-level scope
â”‚    @ ~/.julia/packages/FLoops/puZKi/src/reduce.jl:308
â”‚ 
â”‚ Expected output:
â”‚ 
â”‚ 
â”‚ 
â”‚   diff =
â”‚    Warning: Diff output requires color.
â”‚    ERROR: UndefVarError: xs not defined
â”‚    Stacktrace:
â”‚     [1] top-level scope
â”‚       @ ~/.julia/packages/FLoops/puZKi/src/reduce.jl:308
â”” @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
â”Œ Error: doctest failure in ~/.julia/packages/FoldsCUDA/zyFOA/src/FoldsCUDA.jl
â”‚ 
â”‚ ```jldoctest README
â”‚ julia> using FoldsCUDA, CUDA, FLoops
â”‚ 
â”‚ julia> using GPUArrays: @allowscalar
â”‚ 
â”‚ julia> xs = CUDA.rand(10^8);
â”‚ 
â”‚ julia> @allowscalar xs[100] = 2;
â”‚ 
â”‚ julia> @allowscalar xs[200] = 2;
â”‚ 
â”‚ julia> @floop CUDAEx() for (x, i) in zip(xs, eachindex(xs))
â”‚            @reduce() do (imax = -1; i), (xmax = -Inf32; x)
â”‚                if xmax < x
â”‚                    xmax = x
â”‚                    imax = i
â”‚                end
â”‚            end
â”‚        end
â”‚ 
â”‚ julia> xmax
â”‚ 2.0f0
â”‚ 
â”‚ julia> imax  # the *first* position for the largest value
â”‚ 100
â”‚ ```
â”‚ 
â”‚ Subexpression:
â”‚ 
â”‚ xmax
â”‚ 
â”‚ Evaluated output:
â”‚ 
â”‚ ERROR: UndefVarError: xmax not defined
â”‚ 
â”‚ Expected output:
â”‚ 
â”‚ 2.0f0
â”‚ 
â”‚   diff =
â”‚    Warning: Diff output requires color.
â”‚    2.0f0ERROR: UndefVarError: xmax not defined
â”” @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
â”Œ Error: doctest failure in ~/.julia/packages/FoldsCUDA/zyFOA/src/FoldsCUDA.jl
â”‚ 
â”‚ ```jldoctest README
â”‚ julia> using FoldsCUDA, CUDA, FLoops
â”‚ 
â”‚ julia> using GPUArrays: @allowscalar
â”‚ 
â”‚ julia> xs = CUDA.rand(10^8);
â”‚ 
â”‚ julia> @allowscalar xs[100] = 2;
â”‚ 
â”‚ julia> @allowscalar xs[200] = 2;
â”‚ 
â”‚ julia> @floop CUDAEx() for (x, i) in zip(xs, eachindex(xs))
â”‚            @reduce() do (imax = -1; i), (xmax = -Inf32; x)
â”‚                if xmax < x
â”‚                    xmax = x
â”‚                    imax = i
â”‚                end
â”‚            end
â”‚        end
â”‚ 
â”‚ julia> xmax
â”‚ 2.0f0
â”‚ 
â”‚ julia> imax  # the *first* position for the largest value
â”‚ 100
â”‚ ```
â”‚ 
â”‚ Subexpression:
â”‚ 
â”‚ imax  # the *first* position for the largest value
â”‚ 
â”‚ Evaluated output:
â”‚ 
â”‚ ERROR: UndefVarError: imax not defined
â”‚ 
â”‚ Expected output:
â”‚ 
â”‚ 100
â”‚ 
â”‚   diff =
â”‚    Warning: Diff output requires color.
â”‚    100ERROR: UndefVarError: imax not defined
â”” @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
â”Œ Error: doctest failure in ~/.julia/packages/FoldsCUDA/zyFOA/src/FoldsCUDA.jl
â”‚ 
â”‚ ```jldoctest README
â”‚ julia> using Transducers
â”‚ 
â”‚ julia> @allowscalar xs[300] = -0.5;
â”‚ 
â”‚ julia> foldx_cuda(TeeRF(min, max), xs)
â”‚ (-0.5f0, 2.0f0)
â”‚ 
â”‚ julia> foldx_cuda(TeeRF(min, max), (2x for x in xs))  # iterator comprehension works
â”‚ (-1.0f0, 4.0f0)
â”‚ 
â”‚ julia> foldx_cuda(TeeRF(min, max), Map(x -> 2x), xs)  # equivalent, using a transducer
â”‚ (-1.0f0, 4.0f0)
â”‚ ```
â”‚ 
â”‚ Subexpression:
â”‚ 
â”‚ @allowscalar xs[300] = -0.5;
â”‚ 
â”‚ Evaluated output:
â”‚ 
â”‚ ERROR: UndefVarError: xs not defined
â”‚ Stacktrace:
â”‚  [1] top-level scope
â”‚    @ ~/.julia/packages/GPUArrays/SmL6R/src/host/indexing.jl:64
â”‚ 
â”‚ Expected output:
â”‚ 
â”‚ 
â”‚ 
â”‚   diff =
â”‚    Warning: Diff output requires color.
â”‚    ERROR: UndefVarError: xs not defined
â”‚    Stacktrace:
â”‚     [1] top-level scope
â”‚       @ ~/.julia/packages/GPUArrays/SmL6R/src/host/indexing.jl:64
â”” @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
â”Œ Error: doctest failure in ~/.julia/packages/FoldsCUDA/zyFOA/src/FoldsCUDA.jl
â”‚ 
â”‚ ```jldoctest README
â”‚ julia> using Transducers
â”‚ 
â”‚ julia> @allowscalar xs[300] = -0.5;
â”‚ 
â”‚ julia> foldx_cuda(TeeRF(min, max), xs)
â”‚ (-0.5f0, 2.0f0)
â”‚ 
â”‚ julia> foldx_cuda(TeeRF(min, max), (2x for x in xs))  # iterator comprehension works
â”‚ (-1.0f0, 4.0f0)
â”‚ 
â”‚ julia> foldx_cuda(TeeRF(min, max), Map(x -> 2x), xs)  # equivalent, using a transducer
â”‚ (-1.0f0, 4.0f0)
â”‚ ```
â”‚ 
â”‚ Subexpression:
â”‚ 
â”‚ foldx_cuda(TeeRF(min, max), xs)
â”‚ 
â”‚ Evaluated output:
â”‚ 
â”‚ ERROR: UndefVarError: xs not defined
â”‚ Stacktrace:
â”‚  [1] top-level scope
â”‚    @ none:1
â”‚ 
â”‚ Expected output:
â”‚ 
â”‚ (-0.5f0, 2.0f0)
â”‚ 
â”‚   diff =
â”‚    Warning: Diff output requires color.
â”‚    (-0.5f0, 2.0f0)ERROR: UndefVarError: xs not defined
â”‚    Stacktrace:
â”‚     [1] top-level scope
â”‚       @ none:1
â”” @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
â”Œ Error: doctest failure in ~/.julia/packages/FoldsCUDA/zyFOA/src/FoldsCUDA.jl
â”‚ 
â”‚ ```jldoctest README
â”‚ julia> using Transducers
â”‚ 
â”‚ julia> @allowscalar xs[300] = -0.5;
â”‚ 
â”‚ julia> foldx_cuda(TeeRF(min, max), xs)
â”‚ (-0.5f0, 2.0f0)
â”‚ 
â”‚ julia> foldx_cuda(TeeRF(min, max), (2x for x in xs))  # iterator comprehension works
â”‚ (-1.0f0, 4.0f0)
â”‚ 
â”‚ julia> foldx_cuda(TeeRF(min, max), Map(x -> 2x), xs)  # equivalent, using a transducer
â”‚ (-1.0f0, 4.0f0)
â”‚ ```
â”‚ 
â”‚ Subexpression:
â”‚ 
â”‚ foldx_cuda(TeeRF(min, max), (2x for x in xs))  # iterator comprehension works
â”‚ 
â”‚ Evaluated output:
â”‚ 
â”‚ ERROR: UndefVarError: xs not defined
â”‚ Stacktrace:
â”‚  [1] top-level scope
â”‚    @ none:1
â”‚ 
â”‚ Expected output:
â”‚ 
â”‚ (-1.0f0, 4.0f0)
â”‚ 
â”‚   diff =
â”‚    Warning: Diff output requires color.
â”‚    (-1.0f0, 4.0f0)ERROR: UndefVarError: xs not defined
â”‚    Stacktrace:
â”‚     [1] top-level scope
â”‚       @ none:1
â”” @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
â”Œ Error: doctest failure in ~/.julia/packages/FoldsCUDA/zyFOA/src/FoldsCUDA.jl
â”‚ 
â”‚ ```jldoctest README
â”‚ julia> using Transducers
â”‚ 
â”‚ julia> @allowscalar xs[300] = -0.5;
â”‚ 
â”‚ julia> foldx_cuda(TeeRF(min, max), xs)
â”‚ (-0.5f0, 2.0f0)
â”‚ 
â”‚ julia> foldx_cuda(TeeRF(min, max), (2x for x in xs))  # iterator comprehension works
â”‚ (-1.0f0, 4.0f0)
â”‚ 
â”‚ julia> foldx_cuda(TeeRF(min, max), Map(x -> 2x), xs)  # equivalent, using a transducer
â”‚ (-1.0f0, 4.0f0)
â”‚ ```
â”‚ 
â”‚ Subexpression:
â”‚ 
â”‚ foldx_cuda(TeeRF(min, max), Map(x -> 2x), xs)  # equivalent, using a transducer
â”‚ 
â”‚ Evaluated output:
â”‚ 
â”‚ ERROR: UndefVarError: xs not defined
â”‚ Stacktrace:
â”‚  [1] top-level scope
â”‚    @ none:1
â”‚ 
â”‚ Expected output:
â”‚ 
â”‚ (-1.0f0, 4.0f0)
â”‚ 
â”‚   diff =
â”‚    Warning: Diff output requires color.
â”‚    (-1.0f0, 4.0f0)ERROR: UndefVarError: xs not defined
â”‚    Stacktrace:
â”‚     [1] top-level scope
â”‚       @ none:1
â”” @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
â”Œ Error: Doctesting failed
â”‚   exception =
â”‚    `makedocs` encountered a doctest error. Terminating build
â”‚    Stacktrace:
â”‚      [1] error(s::String)
â”‚        @ Base ./error.jl:33
â”‚      [2] runner(#unused#::Type{Documenter.Builder.Doctest}, doc::Documenter.Documents.Document)
â”‚        @ Documenter.Builder ~/.julia/packages/Documenter/pjwqp/src/Builder.jl:217
â”‚      [3] dispatch(#unused#::Type{Documenter.Builder.DocumentPipeline}, x::Documenter.Documents.Document)
â”‚        @ Documenter.Utilities.Selectors ~/.julia/packages/Documenter/pjwqp/src/Utilities/Selectors.jl:167
â”‚      [4] #2
â”‚        @ ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:241 [inlined]
â”‚      [5] cd(f::Documenter.var"#2#3"{Documenter.Documents.Document}, dir::String)
â”‚        @ Base.Filesystem ./file.jl:104
â”‚      [6] makedocs(; debug::Bool, format::Documenter.Writers.HTMLWriter.HTML, kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{5, Symbol}, NamedTuple{(:root, :source, :sitename, :doctest, :modules), Tuple{String, String, String, Symbol, Vector{Module}}}})
â”‚        @ Documenter ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:240
â”‚      [7] (::Documenter.var"#all_doctests#31"{Bool, Vector{Module}})()
â”‚        @ Documenter ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:802
â”‚      [8] macro expansion
â”‚        @ ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:818 [inlined]
â”‚      [9] macro expansion
â”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
â”‚     [10] doctest(source::Nothing, modules::Vector{Module}; fix::Bool, testset::String)
â”‚        @ Documenter ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:818
â”‚     [11] doctest(package::Module; manual::Bool, testset::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
â”‚        @ Documenter ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:761
â”‚     [12] top-level scope
â”‚        @ ~/.julia/packages/FoldsCUDA/zyFOA/test/test_doctest.jl:8
â”‚     [13] top-level scope
â”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
â”‚     [14] top-level scope
â”‚        @ ~/.julia/packages/FoldsCUDA/zyFOA/test/test_doctest.jl:8
â”‚     [15] include(mod::Module, _path::String)
â”‚        @ Base ./Base.jl:389
â”‚     [16] include(x::String)
â”‚        @ Main.TestFoldsCUDA ~/.julia/packages/FoldsCUDA/zyFOA/test/runtests.jl:1
â”‚     [17] top-level scope
â”‚        @ ~/.julia/packages/FoldsCUDA/zyFOA/test/runtests.jl:13
â”‚     [18] top-level scope
â”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1219
â”‚     [19] include(fname::String)
â”‚        @ Base.MainInclude ./client.jl:444
â”‚     [20] top-level scope
â”‚        @ none:6
â”‚     [21] eval(m::Module, e::Any)
â”‚        @ Core ./boot.jl:360
â”‚     [22] exec_options(opts::Base.JLOptions)
â”‚        @ Base ./client.jl:261
â”‚     [23] _start()
â”‚        @ Base ./client.jl:485
â”” @ Documenter ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:811
Doctests: FoldsCUDA: Test Failed at /home/pkgeval/.julia/packages/Documenter/pjwqp/src/Documenter.jl:818
  Expression: all_doctests()
Stacktrace:
 [1] macro expansion
   @ ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:818 [inlined]
 [2] macro expansion
   @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
 [3] doctest(source::Nothing, modules::Vector{Module}; fix::Bool, testset::String)
   @ Documenter ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:818
Test Summary:           | Fail  Total
test_doctest.jl         |    1      1
  doctest               |    1      1
    Doctests: FoldsCUDA |    1      1
Test Summary:           | Fail  Total
test_doctest.jl         |    1      1
  doctest               |    1      1
    Doctests: FoldsCUDA |    1      1
ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 0 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/FoldsCUDA/zyFOA/test/runtests.jl:1

caused by: Some tests did not pass: 0 passed, 1 failed, 0 errored, 0 broken.
ERROR: Package FoldsCUDA errored during testing
Stacktrace:
  [1] pkgerror(msg::String)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1650
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:334
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:321
  [5] #test#62
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:71 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:70 [inlined]
  [7] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67
 [11] top-level scope
    @ none:31
