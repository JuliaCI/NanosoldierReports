Julia Version 1.6.0-DEV.1175
Commit 7f7ab69fd3 (2020-10-09 21:29 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-10.0.1 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed DataAPI ───────────────────── v1.3.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed TableTraits ───────────────── v1.0.0
  Installed DataKnots ─────────────────── v0.10.1
  Installed PrettyPrinting ────────────── v0.2.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Tables ────────────────────── v1.1.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [f3f2b2ad] + DataKnots v0.10.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [9a962f9c] + DataAPI v1.3.0
  [f3f2b2ad] + DataKnots v0.10.1
  [e2d170a0] + DataValueInterfaces v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [54e16d92] + PrettyPrinting v0.2.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.1.0
  [2a0f44e3] + Base64
  [b77e0a4c] + InteractiveUtils
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [9a3f8284] + Random
  [9e88b42a] + Serialization
  [8dfed614] + Test
    Testing DataKnots
Status `/tmp/jl_dlQ25X/Project.toml`
  [336ed68f] CSV v0.7.7
  [a93c6f00] DataFrames v0.21.7
  [f3f2b2ad] DataKnots v0.10.1
  [9563631e] NarrativeTest v0.5.0
  [54e16d92] PrettyPrinting v0.2.0
  [bd369af6] Tables v1.1.0
  [9a3f8284] Random
  [10745b16] Statistics
Status `/tmp/jl_dlQ25X/Manifest.toml`
  [336ed68f] CSV v0.7.7
  [324d7699] CategoricalArrays v0.8.3
  [34da2185] Compat v3.19.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.21.7
  [f3f2b2ad] DataKnots v0.10.1
  [864edb3b] DataStructures v0.18.7
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.1
  [e1d29d7a] Missings v0.4.4
  [9563631e] NarrativeTest v0.5.0
  [bac558e1] OrderedCollections v1.3.1
  [69de0a69] Parsers v1.0.11
  [2dfb63ee] PooledArrays v0.5.3
  [54e16d92] PrettyPrinting v0.2.0
  [189a3867] Reexport v0.2.0
  [91c51154] SentinelArrays v1.2.16
  [a2af1166] SortingAlgorithms v0.3.1
  [856f2bd8] StructTypes v1.1.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.1.0
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/highlypaid.md, line 16:
    using CSV

    employee_csv = """
        name,department,position,salary
        "ANTHONY A","POLICE","POLICE OFFICER",72510
        "DANIEL A","FIRE","FIRE FIGHTER-EMT",95484
        "JAMES A","FIRE","FIRE ENGINEER-EMT",103350
        "JEFFERY A","POLICE","SERGEANT",101442
        "NANCY A","POLICE","POLICE OFFICER",80016
        "ROBERT K","FIRE","FIRE FIGHTER-EMT",103272
        """ |> IOBuffer |> CSV.File
Expected output:
Actual output:
    ERROR: MethodError: no method matching typesubtract(::Type{Union{}}, ::Type{Int64})
    Closest candidates are:
      typesubtract(::Any, ::Any, !Matched::Int64) at compiler/typeutils.jl:66
    Stacktrace:
      [1] ts(T::Type, S::Type)
        @ CSV ~/.julia/packages/CSV/MKemC/src/utils.jl:214
      [2] nonstandardtype(T::Type)
        @ CSV ~/.julia/packages/CSV/MKemC/src/utils.jl:217
      [3] (::CSV.var"#17#23")(T::Type)
        @ CSV ./none:0
      [4] iterate(::Base.Iterators.Filter{CSV.var"#17#23", Vector{Type}})
        @ Base.Iterators ./iterators.jl:451
      [5] iterate
        @ ./generator.jl:44 [inlined]
      [6] Header
        @ ~/.julia/packages/CSV/MKemC/src/header.jl:232 [inlined]
      [7] CSV.File(source::IOBuffer; header::Int64, normalizenames::Bool, datarow::Int64, skipto::Nothing, footerskip::Int64, transpose::Bool, comment::Nothing, use_mmap::Nothing, ignoreemptylines::Bool, select::Nothing, drop::Nothing, missingstrings::Vector{String}, missingstring::String, delim::Nothing, ignorerepeated::Bool, quotechar::Char, openquotechar::Nothing, closequotechar::Nothing, escapechar::Char, dateformat::Nothing, dateformats::Nothing, decimal::UInt8, truestrings::Vector{String}, falsestrings::Vector{String}, type::Nothing, types::Nothing, typemap::Dict{Type, Type}, categorical::Nothing, pool::Float64, lazystrings::Bool, strict::Bool, silencewarnings::Bool, debug::Bool, parsingdebug::Bool, kw::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
        @ CSV ~/.julia/packages/CSV/MKemC/src/file.jl:216
      [8] CSV.File(source::IOBuffer)
        @ CSV ~/.julia/packages/CSV/MKemC/src/file.jl:216
      [9] |>(x::IOBuffer, f::Type{CSV.File})
        @ Base ./operators.jl:838
     [10] top-level scope
        @ ~/.julia/packages/DataKnots/pQbnw/doc/src/highlypaid.md:18
     [11] eval(m::Module, e::Any)
        @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/highlypaid.md, line 32:
    using DataKnots

    chicago = DataKnot(:employee => employee_csv)
Expected output:
Actual output:
    ERROR: UndefVarError: employee_csv not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/doc/src/highlypaid.md:34
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/highlypaid.md, line 38:
    using Statistics: mean

    @query chicago begin
        employee
        group(department)
        keep(mean_salary => mean(employee.salary))
        employee
        filter(salary > mean_salary)
    end
Expected output:
      │ employee                                         │
      │ name       department  position           salary │
    ──┼──────────────────────────────────────────────────┼
    1 │ JAMES A    FIRE        FIRE ENGINEER-EMT  103350 │
    2 │ ROBERT K   FIRE        FIRE FIGHTER-EMT   103272 │
    3 │ JEFFERY A  POLICE      SERGEANT           101442 │
Actual output:
    ERROR: UndefVarError: chicago not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:209
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/highlypaid.md, line 69:
    @query chicago employee
Expected output:
      │ employee                                         │
      │ name       department  position           salary │
    ──┼──────────────────────────────────────────────────┼
    1 │ ANTHONY A  POLICE      POLICE OFFICER      72510 │
    2 │ DANIEL A   FIRE        FIRE FIGHTER-EMT    95484 │
    3 │ JAMES A    FIRE        FIRE ENGINEER-EMT  103350 │
    4 │ JEFFERY A  POLICE      SERGEANT           101442 │
    5 │ NANCY A    POLICE      POLICE OFFICER      80016 │
    6 │ ROBERT K   FIRE        FIRE FIGHTER-EMT   103272 │
Actual output:
    ERROR: UndefVarError: chicago not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:209
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/highlypaid.md, line 86:
    @query chicago count(employee)
Expected output:
    ┼───┼
    │ 6 │
Actual output:
    ERROR: UndefVarError: chicago not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:209
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/highlypaid.md, line 96:
    @query chicago employee.name
Expected output:
      │ name      │
    ──┼───────────┼
    1 │ ANTHONY A │
    2 │ DANIEL A  │
    3 │ JAMES A   │
    4 │ JEFFERY A │
    5 │ NANCY A   │
    6 │ ROBERT K  │
Actual output:
    ERROR: UndefVarError: chicago not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:209
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/highlypaid.md, line 112:
    @query chicago begin
        employee
        name
    end
Expected output:
Actual output:
    ERROR: UndefVarError: chicago not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:209
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/highlypaid.md, line 122:
    @query chicago employee{name, salary}
Expected output:
      │ employee          │
      │ name       salary │
    ──┼───────────────────┼
    1 │ ANTHONY A   72510 │
    2 │ DANIEL A    95484 │
    3 │ JAMES A    103350 │
    4 │ JEFFERY A  101442 │
    5 │ NANCY A     80016 │
    6 │ ROBERT K   103272 │
Actual output:
    ERROR: UndefVarError: chicago not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:209
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/highlypaid.md, line 139:
    @query chicago employee{name, salary, threshold => 100_000}
Expected output:
      │ employee                     │
      │ name       salary  threshold │
    ──┼──────────────────────────────┼
    1 │ ANTHONY A   72510     100000 │
    2 │ DANIEL A    95484     100000 │
    3 │ JAMES A    103350     100000 │
    4 │ JEFFERY A  101442     100000 │
    5 │ NANCY A     80016     100000 │
    6 │ ROBERT K   103272     100000 │
Actual output:
    ERROR: UndefVarError: chicago not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:209
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/highlypaid.md, line 156:
    @query chicago begin
        employee
        {name => titlecase(name), highly_paid => salary > 100_000}
    end
Expected output:
      │ employee               │
      │ name       highly_paid │
    ──┼────────────────────────┼
    1 │ Anthony A        false │
    2 │ Daniel A         false │
    3 │ James A           true │
    4 │ Jeffery A         true │
    5 │ Nancy A          false │
    6 │ Robert K          true │
Actual output:
    ERROR: UndefVarError: chicago not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:209
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/highlypaid.md, line 175:
    @query chicago employee.filter(salary > 100_000)
Expected output:
      │ employee                                         │
      │ name       department  position           salary │
    ──┼──────────────────────────────────────────────────┼
    1 │ JAMES A    FIRE        FIRE ENGINEER-EMT  103350 │
    2 │ JEFFERY A  POLICE      SERGEANT           101442 │
    3 │ ROBERT K   FIRE        FIRE FIGHTER-EMT   103272 │
Actual output:
    ERROR: UndefVarError: chicago not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:209
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/highlypaid.md, line 202:
    @query chicago employee{name, salary}
Expected output:
      │ employee          │
      │ name       salary │
    ──┼───────────────────┼
    1 │ ANTHONY A   72510 │
    2 │ DANIEL A    95484 │
    3 │ JAMES A    103350 │
    4 │ JEFFERY A  101442 │
    5 │ NANCY A     80016 │
    6 │ ROBERT K   103272 │
Actual output:
    ERROR: UndefVarError: chicago not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:209
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/highlypaid.md, line 239:
    show(as=:shape, @query chicago employee{name, salary})
Expected output:
    6-element DataKnot:
      employee  0:N
      ├╴name    1:1 × String
      └╴salary  1:1 × Int64
Actual output:
    ERROR: UndefVarError: chicago not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:209
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/highlypaid.md, line 250:
    @query chicago count(employee)
Expected output:
    ┼───┼
    │ 6 │
Actual output:
    ERROR: UndefVarError: chicago not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:209
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/highlypaid.md, line 259:
    show(as=:shape, @query chicago count(employee))
Expected output:
    1-element DataKnot:
      #  1:1 × Int64
Actual output:
    ERROR: UndefVarError: chicago not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:209
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/highlypaid.md, line 269:
    show(as=:shape, chicago)
Expected output:
    1-element DataKnot:
      #               1:1
      └╴employee      0:N
        ├╴name        String
        ├╴department  String
        ├╴position    String
        └╴salary      Int64
Actual output:
    ERROR: UndefVarError: chicago not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/doc/src/highlypaid.md:269
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/highlypaid.md, line 309:
    chicago
Expected output:
    │ employee{name,department,position,salary}                           │
    ┼─────────────────────────────────────────────────────────────────────┼
    │ ANTHONY A, POLICE, POLICE OFFICER, 72510; DANIEL A, FIRE, FIRE FIGH…│
Actual output:
    ERROR: UndefVarError: chicago not defined
    Stacktrace:
     [1] top-level scope
       @ :0
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/highlypaid.md, line 327:
    using Statistics: mean

    @query chicago begin
        mean_salary => mean(employee.salary)
    end
Expected output:
    │ mean_salary │
    ┼─────────────┼
    │     92679.0 │
Actual output:
    ERROR: UndefVarError: chicago not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:209
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/highlypaid.md, line 343:
    @query chicago employee.group(department)
Expected output:
      │ department  employee{name,department,position,salary}             │
    ──┼───────────────────────────────────────────────────────────────────┼
    1 │ FIRE        DANIEL A, FIRE, FIRE FIGHTER-EMT, 95484; JAMES A, FIR…│
    2 │ POLICE      ANTHONY A, POLICE, POLICE OFFICER, 72510; JEFFERY A, …│
Actual output:
    ERROR: UndefVarError: chicago not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:209
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/highlypaid.md, line 394:
    @query chicago begin
        employee
        group(department)
        {department, employee.salary}
    end
Expected output:
      │ department  salary                │
    ──┼───────────────────────────────────┼
    1 │ FIRE        95484; 103350; 103272 │
    2 │ POLICE      72510; 101442; 80016  │
Actual output:
    ERROR: UndefVarError: chicago not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:209
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/highlypaid.md, line 410:
    @query chicago begin
        employee
        group(department)
        {department, mean_salary => mean(employee.salary)}
    end
Expected output:
      │ department  mean_salary │
    ──┼─────────────────────────┼
    1 │ FIRE           100702.0 │
    2 │ POLICE          84656.0 │
Actual output:
    ERROR: UndefVarError: chicago not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:209
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/highlypaid.md, line 444:
    @query chicago begin
        employee
        {name, salary, mean_salary => mean(employee.salary)}
    end
Expected output:
    ERROR: cannot find "employee" ⋮
Actual output:
    ERROR: UndefVarError: chicago not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:209
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/highlypaid.md, line 456:
    @query chicago begin
        keep(mean_salary => mean(employee.salary))
        employee
        {name, salary, mean_salary}
    end
Expected output:
      │ employee                       │
      │ name       salary  mean_salary │
    ──┼────────────────────────────────┼
    1 │ ANTHONY A   72510      92679.0 │
    2 │ DANIEL A    95484      92679.0 │
    3 │ JAMES A    103350      92679.0 │
    4 │ JEFFERY A  101442      92679.0 │
    5 │ NANCY A     80016      92679.0 │
    6 │ ROBERT K   103272      92679.0 │
Actual output:
    ERROR: UndefVarError: chicago not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:209
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/highlypaid.md, line 477:
    @query chicago begin
        employee
        group(department)
        keep(mean_salary => mean(employee.salary))
        employee
        {name, salary, mean_salary}
    end
Expected output:
      │ employee                       │
      │ name       salary  mean_salary │
    ──┼────────────────────────────────┼
    1 │ DANIEL A    95484     100702.0 │
    2 │ JAMES A    103350     100702.0 │
    3 │ ROBERT K   103272     100702.0 │
    4 │ ANTHONY A   72510      84656.0 │
    5 │ JEFFERY A  101442      84656.0 │
    6 │ NANCY A     80016      84656.0 │
Actual output:
    ERROR: UndefVarError: chicago not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:209
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/highlypaid.md, line 500:
    @query chicago begin
        employee
        group(department)
        keep(mean_salary => mean(employee.salary))
        employee
        filter(salary > mean_salary)
    end
Expected output:
      │ employee                                         │
      │ name       department  position           salary │
    ──┼──────────────────────────────────────────────────┼
    1 │ JAMES A    FIRE        FIRE ENGINEER-EMT  103350 │
    2 │ ROBERT K   FIRE        FIRE FIGHTER-EMT   103272 │
    3 │ JEFFERY A  POLICE      SERGEANT           101442 │
Actual output:
    ERROR: UndefVarError: chicago not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:209
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/knots.md, line 85:
    chicago_file = """
    name,department,position,salary,rate
    "JEFFERY A","POLICE","SERGEANT",101442,
    "NANCY A","POLICE","POLICE OFFICER",80016,
    "JAMES A","FIRE","FIRE ENGINEER-EMT",103350,
    "DANIEL A","FIRE","FIRE FIGHTER-EMT",95484,
    "LAKENYA A","OEMC","CROSSING GUARD",,17.68
    "DORIS A","OEMC","CROSSING GUARD",,19.38
    """ |> IOBuffer |> CSV.File

    chicago = DataKnot(:employee => chicago_file)

    chicago[It.employee]
Expected output:
      │ employee                                                │
      │ name       department  position           salary  rate  │
    ──┼─────────────────────────────────────────────────────────┼
    1 │ JEFFERY A  POLICE      SERGEANT           101442        │
    2 │ NANCY A    POLICE      POLICE OFFICER      80016        │
    3 │ JAMES A    FIRE        FIRE ENGINEER-EMT  103350        │
    4 │ DANIEL A   FIRE        FIRE FIGHTER-EMT    95484        │
    5 │ LAKENYA A  OEMC        CROSSING GUARD             17.68 │
    6 │ DORIS A    OEMC        CROSSING GUARD             19.38 │
Actual output:
    ERROR: MethodError: no method matching typesubtract(::Type{Union{}}, ::Type{Int64})
    Closest candidates are:
      typesubtract(::Any, ::Any, !Matched::Int64) at compiler/typeutils.jl:66
    Stacktrace:
      [1] ts(T::Type, S::Type)
        @ CSV ~/.julia/packages/CSV/MKemC/src/utils.jl:214
      [2] nonstandardtype(T::Type)
        @ CSV ~/.julia/packages/CSV/MKemC/src/utils.jl:217
      [3] (::CSV.var"#17#23")(T::Type)
        @ CSV ./none:0
      [4] iterate(::Base.Iterators.Filter{CSV.var"#17#23", Vector{Type}})
        @ Base.Iterators ./iterators.jl:451
      [5] iterate
        @ ./generator.jl:44 [inlined]
      [6] Header
        @ ~/.julia/packages/CSV/MKemC/src/header.jl:232 [inlined]
      [7] CSV.File(source::IOBuffer; header::Int64, normalizenames::Bool, datarow::Int64, skipto::Nothing, footerskip::Int64, transpose::Bool, comment::Nothing, use_mmap::Nothing, ignoreemptylines::Bool, select::Nothing, drop::Nothing, missingstrings::Vector{String}, missingstring::String, delim::Nothing, ignorerepeated::Bool, quotechar::Char, openquotechar::Nothing, closequotechar::Nothing, escapechar::Char, dateformat::Nothing, dateformats::Nothing, decimal::UInt8, truestrings::Vector{String}, falsestrings::Vector{String}, type::Nothing, types::Nothing, typemap::Dict{Type, Type}, categorical::Nothing, pool::Float64, lazystrings::Bool, strict::Bool, silencewarnings::Bool, debug::Bool, parsingdebug::Bool, kw::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
        @ CSV ~/.julia/packages/CSV/MKemC/src/file.jl:216
      [8] CSV.File(source::IOBuffer)
        @ CSV ~/.julia/packages/CSV/MKemC/src/file.jl:216
      [9] |>(x::IOBuffer, f::Type{CSV.File})
        @ Base ./operators.jl:838
     [10] top-level scope
        @ ~/.julia/packages/DataKnots/pQbnw/doc/src/knots.md:85
     [11] eval(m::Module, e::Any)
        @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/knots.md, line 112:
    chicago[It.employee >>
            Record(It.name, It.department, It.salary)
           ] |> DataFrame
Expected output:
    6×3 DataFrame
    │ Row │ name      │ department │ salary  │
    │     │ String    │ String     │ Int64?  │
    ├─────┼───────────┼────────────┼─────────┤
    │ 1   │ JEFFERY A │ POLICE     │ 101442  │
    │ 2   │ NANCY A   │ POLICE     │ 80016   │
    │ 3   │ JAMES A   │ FIRE       │ 103350  │
    │ 4   │ DANIEL A  │ FIRE       │ 95484   │
    │ 5   │ LAKENYA A │ OEMC       │ missing │
    │ 6   │ DORIS A   │ OEMC       │ missing │
Actual output:
    ERROR: UndefVarError: chicago not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/doc/src/knots.md:112
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/knots.md, line 400:
    show(chicago, as=:shape)
Expected output:
    1-element DataKnot:
      #               1:1
      └╴employee      0:N
        ├╴name        String
        ├╴department  String
        ├╴position    String
        ├╴salary      Union{Missing, Int64}
        └╴rate        Union{Missing, Float64}
Actual output:
    ERROR: UndefVarError: chicago not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/doc/src/knots.md:400
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/primer.md, line 870:
    unitknot[Lift(1:3) >> It .+ It]
Expected output:
    ERROR: cannot apply + to Tuple{Vector{Int64},Tuple{}}⋮
Actual output:
    ERROR: cannot apply + to Tuple{Vector{Int64}, Tuple{}}
    Stacktrace:
      [1] error(s::String)
        @ Base ./error.jl:33
      [2] assemble_lift(p::DataKnots.Pipeline, f::Function, xs::Vector{DataKnots.Pipeline})
        @ DataKnots ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:973
      [3] Lift(env::DataKnots.Environment, p::DataKnots.Pipeline, f::Function, Xs::Tuple{DataKnots.Query, DataKnots.Navigation})
        @ DataKnots ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:1094
      [4] BroadcastLift(::DataKnots.Environment, ::DataKnots.Pipeline, ::Function, ::Vararg{Any, N} where N)
        @ DataKnots ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:1129
      [5] assemble(env::DataKnots.Environment, p::DataKnots.Pipeline, F::DataKnots.Query)
        @ DataKnots ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:300
      [6] Each(env::DataKnots.Environment, p::DataKnots.Pipeline, X::DataKnots.Query)
        @ DataKnots ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:1170
      [7] assemble(env::DataKnots.Environment, p::DataKnots.Pipeline, F::DataKnots.Query)
        @ DataKnots ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:300
      [8] assemble
        @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:162 [inlined]
      [9] assemble(src::DataKnots.BlockOf, F::DataKnots.Query; rewrite::typeof(DataKnots.rewrite_all))
        @ DataKnots ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:150
     [10] assemble(src::DataKnots.BlockOf, F::DataKnots.Query)
        @ DataKnots ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:150
     [11] query(db::DataKnot, F::DataKnots.Query, params::Vector{Pair{Symbol, DataKnot}})
        @ DataKnots ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:131
     [12] query
        @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:130 [inlined]
     [13] #getindex#47
        @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:123 [inlined]
     [14] getindex(db::DataKnot, F::DataKnots.Query)
        @ DataKnots ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:123
     [15] top-level scope
        @ ~/.julia/packages/DataKnots/pQbnw/doc/src/primer.md:870
     [16] eval(m::Module, e::Any)
        @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/primer.md, line 916:
    DataKnots.shape(unitknot[Lift((msg="Hello",))])
Expected output:
    BlockOf(NamedTuple{(:msg,),Tuple{String}}, x1to1)
Actual output:
    BlockOf(NamedTuple{(:msg,), Tuple{String}}, x1to1)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/queries.md, line 1365:
    Q = Lift((name = "JEFFERY A", position = "SERGEANT", salary = 101442)) >>
        It.ssn

    chicago[Q]
Expected output:
    ERROR: cannot find "ssn" at
    (1:1) × NamedTuple{(:name, :position, :salary),Tuple{String,String,Int64}}
Actual output:
    ERROR: cannot find "ssn" at
    (1:1) × NamedTuple{(:name, :position, :salary), Tuple{String, String, Int64}}
    Stacktrace:
      [1] error(s::String)
        @ Base ./error.jl:33
      [2] Get(env::DataKnots.Environment, p::DataKnots.Pipeline, name::Symbol)
        @ DataKnots ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:1314
      [3] assemble
        @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:305 [inlined]
      [4] Compose(::DataKnots.Environment, ::DataKnots.Pipeline, ::DataKnots.Query, ::Vararg{Any, N} where N)
        @ DataKnots ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:566
      [5] assemble(env::DataKnots.Environment, p::DataKnots.Pipeline, F::DataKnots.Query)
        @ DataKnots ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:300
      [6] Each(env::DataKnots.Environment, p::DataKnots.Pipeline, X::DataKnots.Query)
        @ DataKnots ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:1170
      [7] assemble(env::DataKnots.Environment, p::DataKnots.Pipeline, F::DataKnots.Query)
        @ DataKnots ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:300
      [8] assemble
        @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:162 [inlined]
      [9] assemble(src::DataKnots.BlockOf, F::DataKnots.Query; rewrite::typeof(DataKnots.rewrite_all))
        @ DataKnots ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:150
     [10] assemble(src::DataKnots.BlockOf, F::DataKnots.Query)
        @ DataKnots ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:150
     [11] query(db::DataKnot, F::DataKnots.Query, params::Vector{Pair{Symbol, DataKnot}})
        @ DataKnots ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:131
     [12] query
        @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:130 [inlined]
     [13] #getindex#47
        @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:123 [inlined]
     [14] getindex(db::DataKnot, F::DataKnots.Query)
        @ DataKnots ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:123
     [15] top-level scope
        @ ~/.julia/packages/DataKnots/pQbnw/doc/src/queries.md:1368
     [16] eval(m::Module, e::Any)
        @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/queries.md, line 1383:
    Q = Lift(("JEFFERY A", "SERGEANT", 101442)) >>
        It.Z

    chicago[Q]
Expected output:
    ERROR: cannot find "Z" at
    (1:1) × Tuple{String,String,Int64}
Actual output:
    ERROR: cannot find "Z" at
    (1:1) × Tuple{String, String, Int64}
    Stacktrace:
      [1] error(s::String)
        @ Base ./error.jl:33
      [2] Get(env::DataKnots.Environment, p::DataKnots.Pipeline, name::Symbol)
        @ DataKnots ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:1314
      [3] assemble
        @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:305 [inlined]
      [4] Compose(::DataKnots.Environment, ::DataKnots.Pipeline, ::DataKnots.Query, ::Vararg{Any, N} where N)
        @ DataKnots ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:566
      [5] assemble(env::DataKnots.Environment, p::DataKnots.Pipeline, F::DataKnots.Query)
        @ DataKnots ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:300
      [6] Each(env::DataKnots.Environment, p::DataKnots.Pipeline, X::DataKnots.Query)
        @ DataKnots ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:1170
      [7] assemble(env::DataKnots.Environment, p::DataKnots.Pipeline, F::DataKnots.Query)
        @ DataKnots ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:300
      [8] assemble
        @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:162 [inlined]
      [9] assemble(src::DataKnots.BlockOf, F::DataKnots.Query; rewrite::typeof(DataKnots.rewrite_all))
        @ DataKnots ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:150
     [10] assemble(src::DataKnots.BlockOf, F::DataKnots.Query)
        @ DataKnots ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:150
     [11] query(db::DataKnot, F::DataKnots.Query, params::Vector{Pair{Symbol, DataKnot}})
        @ DataKnots ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:131
     [12] query
        @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:130 [inlined]
     [13] #getindex#47
        @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:123 [inlined]
     [14] getindex(db::DataKnot, F::DataKnots.Query)
        @ DataKnots ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:123
     [15] top-level scope
        @ ~/.julia/packages/DataKnots/pQbnw/doc/src/queries.md:1386
     [16] eval(m::Module, e::Any)
        @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/tutorial.md, line 1164:
    using CSV

    employee_data = """
        name,department,position,salary,rate
        "JEFFERY A","POLICE","SERGEANT",101442,
        "NANCY A","POLICE","POLICE OFFICER",80016,
        "ANTHONY A","POLICE","POLICE OFFICER",72510,
        "ALBA M","POLICE","POLICE CADET",,9.46
        "JAMES A","FIRE","FIRE ENGINEER-EMT",103350,
        "DANIEL A","FIRE","FIREFIGHTER-EMT",95484,
        "ROBERT K","FIRE","FIREFIGHTER-EMT",103272,
        "LAKENYA A","OEMC","CROSSING GUARD",,17.68
        "DORIS A","OEMC","CROSSING GUARD",,19.38
        "BRENDA B","OEMC","TRAFFIC CONTROL AIDE",64392,
        """ |> IOBuffer |> CSV.File

    chicago′ = DataKnot(:employee => employee_data)

    chicago′[It.employee]
Expected output:
       │ employee                                                   │
       │ name       department  position              salary  rate  │
    ───┼────────────────────────────────────────────────────────────┼
     1 │ JEFFERY A  POLICE      SERGEANT              101442        │
     2 │ NANCY A    POLICE      POLICE OFFICER         80016        │
     3 │ ANTHONY A  POLICE      POLICE OFFICER         72510        │
     4 │ ALBA M     POLICE      POLICE CADET                   9.46 │
     5 │ JAMES A    FIRE        FIRE ENGINEER-EMT     103350        │
     6 │ DANIEL A   FIRE        FIREFIGHTER-EMT        95484        │
     7 │ ROBERT K   FIRE        FIREFIGHTER-EMT       103272        │
     8 │ LAKENYA A  OEMC        CROSSING GUARD                17.68 │
     9 │ DORIS A    OEMC        CROSSING GUARD                19.38 │
    10 │ BRENDA B   OEMC        TRAFFIC CONTROL AIDE   64392        │
Actual output:
    ERROR: MethodError: no method matching typesubtract(::Type{Union{}}, ::Type{Int64})
    Closest candidates are:
      typesubtract(::Any, ::Any, !Matched::Int64) at compiler/typeutils.jl:66
    Stacktrace:
      [1] ts(T::Type, S::Type)
        @ CSV ~/.julia/packages/CSV/MKemC/src/utils.jl:214
      [2] nonstandardtype(T::Type)
        @ CSV ~/.julia/packages/CSV/MKemC/src/utils.jl:217
      [3] (::CSV.var"#17#23")(T::Type)
        @ CSV ./none:0
      [4] iterate(::Base.Iterators.Filter{CSV.var"#17#23", Vector{Type}})
        @ Base.Iterators ./iterators.jl:451
      [5] iterate
        @ ./generator.jl:44 [inlined]
      [6] Header
        @ ~/.julia/packages/CSV/MKemC/src/header.jl:232 [inlined]
      [7] CSV.File(source::IOBuffer; header::Int64, normalizenames::Bool, datarow::Int64, skipto::Nothing, footerskip::Int64, transpose::Bool, comment::Nothing, use_mmap::Nothing, ignoreemptylines::Bool, select::Nothing, drop::Nothing, missingstrings::Vector{String}, missingstring::String, delim::Nothing, ignorerepeated::Bool, quotechar::Char, openquotechar::Nothing, closequotechar::Nothing, escapechar::Char, dateformat::Nothing, dateformats::Nothing, decimal::UInt8, truestrings::Vector{String}, falsestrings::Vector{String}, type::Nothing, types::Nothing, typemap::Dict{Type, Type}, categorical::Nothing, pool::Float64, lazystrings::Bool, strict::Bool, silencewarnings::Bool, debug::Bool, parsingdebug::Bool, kw::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
        @ CSV ~/.julia/packages/CSV/MKemC/src/file.jl:216
      [8] CSV.File(source::IOBuffer)
        @ CSV ~/.julia/packages/CSV/MKemC/src/file.jl:216
      [9] |>(x::IOBuffer, f::Type{CSV.File})
        @ Base ./operators.jl:838
     [10] top-level scope
        @ ~/.julia/packages/DataKnots/pQbnw/doc/src/tutorial.md:1166
     [11] eval(m::Module, e::Any)
        @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/tutorial.md, line 1202:
    using Statistics: mean

    highly_compensated =
        chicago′[Keep(:avg_salary => mean.(It.employee.salary)) >>
                 It.employee >>
                 Filter(It.salary .> It.avg_salary) >>
                 Collect(:rate => nothing)]
Expected output:
      │ employee                                         │
      │ name       department  position           salary │
    ──┼──────────────────────────────────────────────────┼
    1 │ JEFFERY A  POLICE      SERGEANT           101442 │
    2 │ JAMES A    FIRE        FIRE ENGINEER-EMT  103350 │
    3 │ DANIEL A   FIRE        FIREFIGHTER-EMT     95484 │
    4 │ ROBERT K   FIRE        FIREFIGHTER-EMT    103272 │
Actual output:
    ERROR: UndefVarError: chicago′ not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/doc/src/tutorial.md:1204
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/tutorial.md, line 1221:
    using DataFrames

    highly_compensated |> DataFrame
Expected output:
    4×4 DataFrame
    │ Row │ name      │ department │ position          │ salary │
    │     │ String    │ String     │ String            │ Int64? │
    ├─────┼───────────┼────────────┼───────────────────┼────────┤
    │ 1   │ JEFFERY A │ POLICE     │ SERGEANT          │ 101442 │
    │ 2   │ JAMES A   │ FIRE       │ FIRE ENGINEER-EMT │ 103350 │
    │ 3   │ DANIEL A  │ FIRE       │ FIREFIGHTER-EMT   │ 95484  │
    │ 4   │ ROBERT K  │ FIRE       │ FIREFIGHTER-EMT   │ 103272 │
Actual output:
    ERROR: UndefVarError: highly_compensated not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/doc/src/tutorial.md:1223
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/tutorial.md, line 1241:
    chicago′[It.employee >> Group(It.department)]
Expected output:
      │ department  employee{name,department,position,salary,rate}        │
    ──┼───────────────────────────────────────────────────────────────────┼
    1 │ FIRE        JAMES A, FIRE, FIRE ENGINEER-EMT, 103350, missing; DA…│
    2 │ OEMC        LAKENYA A, OEMC, CROSSING GUARD, missing, 17.68; DORI…│
    3 │ POLICE      JEFFERY A, POLICE, SERGEANT, 101442, missing; NANCY A…│
Actual output:
    ERROR: UndefVarError: chicago′ not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/doc/src/tutorial.md:1241
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/tutorial.md, line 1253:
    Restructure =
        :department =>
            It.employee >>
            Group(It.department) >>
            Record(
               :name => It.department,
               :employee =>
                   It.employee >>
                   Collect(:department => nothing))

    chicago′[Restructure]
Expected output:
      │ department                                                        │
      │ name    employee{name,position,salary,rate}                       │
    ──┼───────────────────────────────────────────────────────────────────┼
    1 │ FIRE    JAMES A, FIRE ENGINEER-EMT, 103350, missing; DANIEL A, FI…│
    2 │ OEMC    LAKENYA A, CROSSING GUARD, missing, 17.68; DORIS A, CROSS…│
    3 │ POLICE  JEFFERY A, SERGEANT, 101442, missing; NANCY A, POLICE OFF…│
Actual output:
    ERROR: UndefVarError: chicago′ not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/doc/src/tutorial.md:1263
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/tutorial.md, line 1276:
    chicago″ = chicago′[Restructure >> Collect]
Expected output:
    │ employee{name,department,positio… department{name,employee{name,pos…│
    ┼─────────────────────────────────────────────────────────────────────┼
    │ JEFFERY A, POLICE, SERGEANT, 101… FIRE, [JAMES A, FIRE ENGINEER-EMT…│
Actual output:
    ERROR: UndefVarError: chicago′ not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/doc/src/tutorial.md:1276
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../doc/src/tutorial.md, line 1288:
    using Statistics: mean

    chicago″[
        It.department >>
        Record(
            It.name,
            :mean_salary => mean.(It.employee.salary))]
Expected output:
      │ department          │
      │ name    mean_salary │
    ──┼─────────────────────┼
    1 │ FIRE       100702.0 │
    2 │ OEMC        64392.0 │
    3 │ POLICE      84656.0 │
Actual output:
    ERROR: UndefVarError: chicago″ not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/doc/src/tutorial.md:1290
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../README.md, line 20:
    using DataKnots, CSV

    employee_csv_file = """
        name,department,position,salary
        "JEFFERY A","POLICE","SERGEANT",101442
        "NANCY A","POLICE","POLICE OFFICER",80016
        "JAMES A","FIRE","FIRE ENGINEER-EMT",103350
        "DANIEL A","FIRE","FIRE FIGHTER-EMT",95484
        "BRENDA B","OEMC","TRAFFIC CONTROL AIDE",64392
        """ |> IOBuffer |> CSV.File

    chicago = DataKnot(:employee => employee_csv_file)
Expected output:
Actual output:
    ERROR: MethodError: no method matching typesubtract(::Type{Union{}}, ::Type{Int64})
    Closest candidates are:
      typesubtract(::Any, ::Any, !Matched::Int64) at compiler/typeutils.jl:66
    Stacktrace:
      [1] ts(T::Type, S::Type)
        @ CSV ~/.julia/packages/CSV/MKemC/src/utils.jl:214
      [2] nonstandardtype(T::Type)
        @ CSV ~/.julia/packages/CSV/MKemC/src/utils.jl:217
      [3] (::CSV.var"#17#23")(T::Type)
        @ CSV ./none:0
      [4] iterate(::Base.Iterators.Filter{CSV.var"#17#23", Vector{Type}})
        @ Base.Iterators ./iterators.jl:451
      [5] iterate
        @ ./generator.jl:44 [inlined]
      [6] Header
        @ ~/.julia/packages/CSV/MKemC/src/header.jl:232 [inlined]
      [7] CSV.File(source::IOBuffer; header::Int64, normalizenames::Bool, datarow::Int64, skipto::Nothing, footerskip::Int64, transpose::Bool, comment::Nothing, use_mmap::Nothing, ignoreemptylines::Bool, select::Nothing, drop::Nothing, missingstrings::Vector{String}, missingstring::String, delim::Nothing, ignorerepeated::Bool, quotechar::Char, openquotechar::Nothing, closequotechar::Nothing, escapechar::Char, dateformat::Nothing, dateformats::Nothing, decimal::UInt8, truestrings::Vector{String}, falsestrings::Vector{String}, type::Nothing, types::Nothing, typemap::Dict{Type, Type}, categorical::Nothing, pool::Float64, lazystrings::Bool, strict::Bool, silencewarnings::Bool, debug::Bool, parsingdebug::Bool, kw::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
        @ CSV ~/.julia/packages/CSV/MKemC/src/file.jl:216
      [8] CSV.File(source::IOBuffer)
        @ CSV ~/.julia/packages/CSV/MKemC/src/file.jl:216
      [9] |>(x::IOBuffer, f::Type{CSV.File})
        @ Base ./operators.jl:838
     [10] top-level scope
        @ ~/.julia/packages/DataKnots/pQbnw/README.md:22
     [11] eval(m::Module, e::Any)
        @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../README.md, line 36:
    using Statistics: mean

    @query chicago begin
        employee
        group(department)
        keep(avg_salary => mean(employee.salary))
        employee
        filter(salary > avg_salary)
    end
Expected output:
      │ employee                                         │
      │ name       department  position           salary │
    ──┼──────────────────────────────────────────────────┼
    1 │ JAMES A    FIRE        FIRE ENGINEER-EMT  103350 │
    2 │ JEFFERY A  POLICE      SERGEANT           101442 │
Actual output:
    ERROR: UndefVarError: chicago not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/src/queries.jl:209
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Test failed at ../README.md, line 63:
    using Statistics: mean

    chicago[It.employee >>
            Group(It.department) >>
            Keep(:avg_salary => mean.(It.employee.salary)) >>
            It.employee >>
            Filter(It.salary .> It.avg_salary)]
Expected output:
      │ employee                                         │
      │ name       department  position           salary │
    ──┼──────────────────────────────────────────────────┼
    1 │ JAMES A    FIRE        FIRE ENGINEER-EMT  103350 │
    2 │ JEFFERY A  POLICE      SERGEANT           101442 │
Actual output:
    ERROR: UndefVarError: chicago not defined
    Stacktrace:
     [1] top-level scope
       @ ~/.julia/packages/DataKnots/pQbnw/README.md:65
     [2] eval(m::Module, e::Any)
       @ Core ./boot.jl:360
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Tests passed: 777
Tests failed: 42
Tests skipped: 3
TESTING UNSUCCESSFUL!
ERROR: Package DataKnots errored during testing
Stacktrace:
  [1] pkgerror(msg::String)
    @ Pkg.Types /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1609
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:331
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:318
  [5] #test#62
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [6] test
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [7] #test#61
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [8] test
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(pkg::String)
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope
    @ none:19
