################################################################################
# PkgEval set-up: 2020-10-30T04:00:07.392
#

Julia Version 1.6.0-DEV.1363
Commit f727f4ba82 (2020-10-28 23:50 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807



################################################################################
# Installation: 2020-10-30T04:00:08.815
#

   Resolving package versions...
   Installed ZygoteRules ────────────────── v0.2.0
   Installed SimpleTraits ───────────────── v0.9.3
   Installed ConsoleProgressMonitor ─────── v0.1.2
   Installed AbstractTrees ──────────────── v0.3.3
   Installed GPUCompiler ────────────────── v0.6.1
   Installed ColorTypes ─────────────────── v0.10.9
   Installed ChainRulesCore ─────────────── v0.9.17
   Installed DataValueInterfaces ────────── v1.0.0
   Installed Reexport ───────────────────── v0.2.0
   Installed Tables ─────────────────────── v1.1.0
   Installed CpuId ──────────────────────── v0.2.2
   Installed Requires ───────────────────── v1.1.0
   Installed ArrayLayouts ───────────────── v0.4.10
   Installed GPUArrays ──────────────────── v5.2.1
   Installed Rmath_jll ──────────────────── v0.2.2+1
   Installed InvertedIndices ────────────── v1.0.0
   Installed DeterminantalPointProcesses ── v0.1.0
   Installed Clustering ─────────────────── v0.14.2
   Installed SLEEFPirates ───────────────── v0.5.5
   Installed PrettyTables ───────────────── v0.9.1
   Installed BinaryProvider ─────────────── v0.5.10
   Installed LeftChildRightSiblingTrees ─── v0.1.2
   Installed LearnBase ──────────────────── v0.3.0
   Installed RecipesBase ────────────────── v1.1.0
   Installed StatsBase ──────────────────── v0.33.2
   Installed IRTools ────────────────────── v0.4.1
   Installed LoggingExtras ──────────────── v0.4.2
   Installed CompilerSupportLibraries_jll ─ v0.3.4+0
   Installed NaNMath ────────────────────── v0.3.4
   Installed AdvancedHMC ────────────────── v0.2.26
   Installed Zlib_jll ───────────────────── v1.2.11+18
   Installed DataStructures ─────────────── v0.18.8
   Installed MacroTools ─────────────────── v0.5.6
   Installed Richardson ─────────────────── v1.2.0
   Installed DocStringExtensions ────────── v0.8.3
   Installed Distributions ──────────────── v0.24.2
   Installed AbstractFFTs ───────────────── v0.5.0
   Installed ChainRulesTestUtils ────────── v0.5.3
   Installed CodecZlib ──────────────────── v0.7.0
   Installed LoopVectorization ──────────── v0.8.26
   Installed OrderedCollections ─────────── v1.3.1
   Installed MLJModelInterface ──────────── v0.3.6
   Installed TranscodingStreams ─────────── v0.9.5
   Installed ArgCheck ───────────────────── v2.1.0
   Installed ChainRules ─────────────────── v0.7.31
   Installed MLDataPattern ──────────────── v0.5.3
   Installed Parameters ─────────────────── v0.12.1
   Installed Adapt ──────────────────────── v2.3.0
   Installed SIMDPirates ────────────────── v0.8.25
   Installed KernelFunctions ────────────── v0.8.7
   Installed IntervalSets ───────────────── v0.5.1
   Installed SpecialFunctions ───────────── v0.10.3
   Installed Combinatorics ──────────────── v0.7.0
   Installed InitialValues ──────────────── v0.2.10
   Installed ZipFile ────────────────────── v0.9.3
   Installed Formatting ─────────────────── v0.4.1
   Installed OffsetArrays ───────────────── v1.3.1
   Installed Transducers ────────────────── v0.4.53
   Installed TimerOutputs ───────────────── v0.5.6
   Installed Distances ──────────────────── v0.10.0
   Installed ProgressMeter ──────────────── v1.4.0
   Installed DiffResults ────────────────── v1.0.2
   Installed IteratorInterfaceExtensions ── v1.0.0
   Installed Juno ───────────────────────── v0.8.4
   Installed ForwardDiff ────────────────── v0.10.12
   Installed AbstractMCMC ───────────────── v2.1.0
   Installed Parsers ────────────────────── v1.0.11
   Installed MicroCollections ───────────── v0.1.0
   Installed LLVM ───────────────────────── v2.0.0
   Installed Rmath ──────────────────────── v0.6.1
   Installed FastGaussQuadrature ────────── v0.4.3
   Installed ScientificTypes ────────────── v1.1.0
   Installed ProgressLogging ────────────── v0.1.3
   Installed VectorizationBase ──────────── v0.12.33
   Installed TableTraits ────────────────── v1.0.0
   Installed ExprTools ──────────────────── v0.1.3
   Installed JLLWrappers ────────────────── v1.1.3
   Installed Colors ─────────────────────── v0.12.4
   Installed FillArrays ─────────────────── v0.9.7
   Installed Compat ─────────────────────── v3.23.0
   Installed StructTypes ────────────────── v1.1.0
   Installed CUDA ───────────────────────── v1.3.3
   Installed Functors ───────────────────── v0.1.0
   Installed BangBang ───────────────────── v0.3.29
   Installed EllipsisNotation ───────────── v0.4.0
   Installed MuladdMacro ────────────────── v0.2.2
   Installed CompositionsBase ───────────── v0.1.0
   Installed Zygote ─────────────────────── v0.5.9
   Installed NearestNeighbors ───────────── v0.4.7
   Installed Media ──────────────────────── v0.5.0
   Installed PooledArrays ───────────────── v0.5.3
   Installed CategoricalArrays ──────────── v0.8.3
   Installed DiffRules ──────────────────── v1.0.1
   Installed CEnum ──────────────────────── v0.4.1
   Installed InplaceOps ─────────────────── v0.3.0
   Installed NaturalSort ────────────────── v1.0.0
   Installed StatsFuns ──────────────────── v0.9.5
   Installed RangeArrays ────────────────── v0.3.2
   Installed QuadGK ─────────────────────── v2.4.1
   Installed JSON ───────────────────────── v0.21.1
   Installed PDMats ─────────────────────── v0.10.1
   Installed CommonSubexpressions ───────── v0.3.0
   Installed MCMCChains ─────────────────── v4.2.4
   Installed Crayons ────────────────────── v4.0.4
   Installed SplittablesBase ────────────── v0.1.10
   Installed DataFrames ─────────────────── v0.21.8
   Installed FiniteDifferences ──────────── v0.11.2
   Installed Polynomials ────────────────── v0.5.2
   Installed MappedArrays ───────────────── v0.3.0
   Installed NNlib ──────────────────────── v0.7.5
   Installed DefineSingletons ───────────── v0.1.0
   Installed AxisArrays ─────────────────── v0.4.3
   Installed DataAPI ────────────────────── v1.3.0
   Installed UnPack ─────────────────────── v1.0.2
   Installed IterTools ──────────────────── v1.3.0
   Installed MLDataUtils ────────────────── v0.5.2
   Installed Missings ───────────────────── v0.4.4
   Installed OpenSpecFun_jll ────────────── v0.5.3+4
   Installed SortingAlgorithms ──────────── v0.3.1
   Installed ConstructionBase ───────────── v1.0.0
   Installed TerminalLoggers ────────────── v0.1.2
   Installed StaticArrays ───────────────── v0.12.5
   Installed Flux ───────────────────────── v0.11.1
   Installed Setfield ───────────────────── v0.7.0
   Installed FixedPointNumbers ──────────── v0.8.4
   Installed AugmentedGaussianProcesses ─── v0.9.1
   Installed MLLabelUtils ───────────────── v0.5.4
Updating `~/.julia/environments/v1.6/Project.toml`
  [38eea1fd] + AugmentedGaussianProcesses v0.9.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [621f4979] + AbstractFFTs v0.5.0
  [80f14c24] + AbstractMCMC v2.1.0
  [1520ce14] + AbstractTrees v0.3.3
  [79e6a3ab] + Adapt v2.3.0
  [0bf59076] + AdvancedHMC v0.2.26
  [dce04be8] + ArgCheck v2.1.0
  [4c555306] + ArrayLayouts v0.4.10
  [38eea1fd] + AugmentedGaussianProcesses v0.9.1
  [39de3d68] + AxisArrays v0.4.3
  [198e06fe] + BangBang v0.3.29
  [b99e7846] + BinaryProvider v0.5.10
  [fa961155] + CEnum v0.4.1
  [052768ef] + CUDA v1.3.3
  [324d7699] + CategoricalArrays v0.8.3
  [082447d4] + ChainRules v0.7.31
  [d360d2e6] + ChainRulesCore v0.9.17
  [cdddcdb0] + ChainRulesTestUtils v0.5.3
  [aaaa29a8] + Clustering v0.14.2
  [944b1d66] + CodecZlib v0.7.0
  [3da002f7] + ColorTypes v0.10.9
  [5ae59095] + Colors v0.12.4
  [861a8166] + Combinatorics v0.7.0
  [bbf7d656] + CommonSubexpressions v0.3.0
  [34da2185] + Compat v3.23.0
  [a33af91c] + CompositionsBase v0.1.0
  [88cd18e8] + ConsoleProgressMonitor v0.1.2
  [187b0558] + ConstructionBase v1.0.0
  [adafc99b] + CpuId v0.2.2
  [a8cc5b0e] + Crayons v4.0.4
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.21.8
  [864edb3b] + DataStructures v0.18.8
  [e2d170a0] + DataValueInterfaces v1.0.0
  [244e2a9f] + DefineSingletons v0.1.0
  [4d968f93] + DeterminantalPointProcesses v0.1.0
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.1
  [b4f34e82] + Distances v0.10.0
  [31c24e10] + Distributions v0.24.2
  [ffbed154] + DocStringExtensions v0.8.3
  [da5c29d0] + EllipsisNotation v0.4.0
  [e2ba6199] + ExprTools v0.1.3
  [442a2c76] + FastGaussQuadrature v0.4.3
  [1a297f60] + FillArrays v0.9.7
  [26cc04aa] + FiniteDifferences v0.11.2
  [53c48c17] + FixedPointNumbers v0.8.4
  [587475ba] + Flux v0.11.1
  [59287772] + Formatting v0.4.1
  [f6369f11] + ForwardDiff v0.10.12
  [d9f16b24] + Functors v0.1.0
  [0c68f7d7] + GPUArrays v5.2.1
  [61eb1bfa] + GPUCompiler v0.6.1
  [7869d1d1] + IRTools v0.4.1
  [22cec73e] + InitialValues v0.2.10
  [505f98c9] + InplaceOps v0.3.0
  [8197267c] + IntervalSets v0.5.1
  [41ab1584] + InvertedIndices v1.0.0
  [c8e1da08] + IterTools v1.3.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [692b3bcd] + JLLWrappers v1.1.3
  [682c06a0] + JSON v0.21.1
  [e5e0dc1b] + Juno v0.8.4
  [ec8451be] + KernelFunctions v0.8.7
  [929cbde3] + LLVM v2.0.0
  [7f8f8fb0] + LearnBase v0.3.0
  [1d6d02ad] + LeftChildRightSiblingTrees v0.1.2
  [e6f89c97] + LoggingExtras v0.4.2
  [bdcacae8] + LoopVectorization v0.8.26
  [c7f686f2] + MCMCChains v4.2.4
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.2
  [e80e1ace] + MLJModelInterface v0.3.6
  [66a33bbf] + MLLabelUtils v0.5.4
  [1914dd2f] + MacroTools v0.5.6
  [dbb5928d] + MappedArrays v0.3.0
  [e89f7d12] + Media v0.5.0
  [128add7d] + MicroCollections v0.1.0
  [e1d29d7a] + Missings v0.4.4
  [46d2c3a1] + MuladdMacro v0.2.2
  [872c559c] + NNlib v0.7.5
  [77ba4419] + NaNMath v0.3.4
  [c020b1a1] + NaturalSort v1.0.0
  [b8a86587] + NearestNeighbors v0.4.7
  [6fe1bfb0] + OffsetArrays v1.3.1
  [bac558e1] + OrderedCollections v1.3.1
  [90014a1f] + PDMats v0.10.1
  [d96e819e] + Parameters v0.12.1
  [69de0a69] + Parsers v1.0.11
  [f27b6e38] + Polynomials v0.5.2
  [2dfb63ee] + PooledArrays v0.5.3
  [08abe8d2] + PrettyTables v0.9.1
  [33c8b6b6] + ProgressLogging v0.1.3
  [92933f4c] + ProgressMeter v1.4.0
  [1fd47b50] + QuadGK v2.4.1
  [b3c3ace0] + RangeArrays v0.3.2
  [3cdcf5f2] + RecipesBase v1.1.0
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v1.1.0
  [708f8203] + Richardson v1.2.0
  [79098fc4] + Rmath v0.6.1
  [21efa798] + SIMDPirates v0.8.25
  [476501e8] + SLEEFPirates v0.5.5
  [321657f4] + ScientificTypes v1.1.0
  [efcf1570] + Setfield v0.7.0
  [699a6c99] + SimpleTraits v0.9.3
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.10.3
  [171d559e] + SplittablesBase v0.1.10
  [90137ffa] + StaticArrays v0.12.5
  [2913bbd2] + StatsBase v0.33.2
  [4c63d2b9] + StatsFuns v0.9.5
  [856f2bd8] + StructTypes v1.1.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.1.0
  [5d786b92] + TerminalLoggers v0.1.2
  [a759f4b9] + TimerOutputs v0.5.6
  [3bb67fe8] + TranscodingStreams v0.9.5
  [28d57a85] + Transducers v0.4.53
  [3a884ed6] + UnPack v1.0.2
  [3d5dd08c] + VectorizationBase v0.12.33
  [a5390f91] + ZipFile v0.9.3
  [e88e6eb3] + Zygote v0.5.9
  [700de1a5] + ZygoteRules v0.2.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.4+0
  [efe28fd5] + OpenSpecFun_jll v0.5.3+4
  [f50d1b31] + Rmath_jll v0.2.2+1
  [83775a58] + Zlib_jll v1.2.11+18
  [0dad84c5] + ArgTools
  [56f22d72] + Artifacts
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [f43a241f] + Downloads
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [b27032c2] + LibCURL
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [9abbd945] + Profile
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [4607b0f0] + SuiteSparse
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
  [deac9b47] + LibCURL_jll
  [14a3606d] + MozillaCACerts_jll
    Building SLEEFPirates → `~/.julia/scratchspaces/44cfe95a-1eb2-52ea-b672-e2afdf69b78f/67ae90a18aa8c22bf159318300e765fbd89ddf6e/build.log`


################################################################################
# Testing: 2020-10-30T04:02:26.016
#


     Testing AugmentedGaussianProcesses
Status `/tmp/jl_G9wb1Y/Project.toml`
  [38eea1fd] AugmentedGaussianProcesses v0.9.1
  [b4f34e82] Distances v0.10.0
  [31c24e10] Distributions v0.24.2
  [cc2ba9b6] MLDataUtils v0.5.2
  [90014a1f] PDMats v0.10.1
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [8dfed614] Test
Status `/tmp/jl_G9wb1Y/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [80f14c24] AbstractMCMC v2.1.0
  [1520ce14] AbstractTrees v0.3.3
  [79e6a3ab] Adapt v2.3.0
  [0bf59076] AdvancedHMC v0.2.26
  [dce04be8] ArgCheck v2.1.0
  [4c555306] ArrayLayouts v0.4.10
  [38eea1fd] AugmentedGaussianProcesses v0.9.1
  [39de3d68] AxisArrays v0.4.3
  [198e06fe] BangBang v0.3.29
  [b99e7846] BinaryProvider v0.5.10
  [fa961155] CEnum v0.4.1
  [052768ef] CUDA v1.3.3
  [324d7699] CategoricalArrays v0.8.3
  [082447d4] ChainRules v0.7.31
  [d360d2e6] ChainRulesCore v0.9.17
  [cdddcdb0] ChainRulesTestUtils v0.5.3
  [aaaa29a8] Clustering v0.14.2
  [944b1d66] CodecZlib v0.7.0
  [3da002f7] ColorTypes v0.10.9
  [5ae59095] Colors v0.12.4
  [861a8166] Combinatorics v0.7.0
  [bbf7d656] CommonSubexpressions v0.3.0
  [34da2185] Compat v3.23.0
  [a33af91c] CompositionsBase v0.1.0
  [88cd18e8] ConsoleProgressMonitor v0.1.2
  [187b0558] ConstructionBase v1.0.0
  [adafc99b] CpuId v0.2.2
  [a8cc5b0e] Crayons v4.0.4
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.21.8
  [864edb3b] DataStructures v0.18.8
  [e2d170a0] DataValueInterfaces v1.0.0
  [244e2a9f] DefineSingletons v0.1.0
  [4d968f93] DeterminantalPointProcesses v0.1.0
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [b4f34e82] Distances v0.10.0
  [31c24e10] Distributions v0.24.2
  [ffbed154] DocStringExtensions v0.8.3
  [da5c29d0] EllipsisNotation v0.4.0
  [e2ba6199] ExprTools v0.1.3
  [442a2c76] FastGaussQuadrature v0.4.3
  [1a297f60] FillArrays v0.9.7
  [26cc04aa] FiniteDifferences v0.11.2
  [53c48c17] FixedPointNumbers v0.8.4
  [587475ba] Flux v0.11.1
  [59287772] Formatting v0.4.1
  [f6369f11] ForwardDiff v0.10.12
  [d9f16b24] Functors v0.1.0
  [0c68f7d7] GPUArrays v5.2.1
  [61eb1bfa] GPUCompiler v0.6.1
  [7869d1d1] IRTools v0.4.1
  [22cec73e] InitialValues v0.2.10
  [505f98c9] InplaceOps v0.3.0
  [8197267c] IntervalSets v0.5.1
  [41ab1584] InvertedIndices v1.0.0
  [c8e1da08] IterTools v1.3.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [692b3bcd] JLLWrappers v1.1.3
  [682c06a0] JSON v0.21.1
  [e5e0dc1b] Juno v0.8.4
  [ec8451be] KernelFunctions v0.8.7
  [929cbde3] LLVM v2.0.0
  [7f8f8fb0] LearnBase v0.3.0
  [1d6d02ad] LeftChildRightSiblingTrees v0.1.2
  [e6f89c97] LoggingExtras v0.4.2
  [bdcacae8] LoopVectorization v0.8.26
  [c7f686f2] MCMCChains v4.2.4
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.2
  [e80e1ace] MLJModelInterface v0.3.6
  [66a33bbf] MLLabelUtils v0.5.4
  [1914dd2f] MacroTools v0.5.6
  [dbb5928d] MappedArrays v0.3.0
  [e89f7d12] Media v0.5.0
  [128add7d] MicroCollections v0.1.0
  [e1d29d7a] Missings v0.4.4
  [46d2c3a1] MuladdMacro v0.2.2
  [872c559c] NNlib v0.7.5
  [77ba4419] NaNMath v0.3.4
  [c020b1a1] NaturalSort v1.0.0
  [b8a86587] NearestNeighbors v0.4.7
  [6fe1bfb0] OffsetArrays v1.3.1
  [bac558e1] OrderedCollections v1.3.1
  [90014a1f] PDMats v0.10.1
  [d96e819e] Parameters v0.12.1
  [69de0a69] Parsers v1.0.11
  [f27b6e38] Polynomials v0.5.2
  [2dfb63ee] PooledArrays v0.5.3
  [08abe8d2] PrettyTables v0.9.1
  [33c8b6b6] ProgressLogging v0.1.3
  [92933f4c] ProgressMeter v1.4.0
  [1fd47b50] QuadGK v2.4.1
  [b3c3ace0] RangeArrays v0.3.2
  [3cdcf5f2] RecipesBase v1.1.0
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.1.0
  [708f8203] Richardson v1.2.0
  [79098fc4] Rmath v0.6.1
  [21efa798] SIMDPirates v0.8.25
  [476501e8] SLEEFPirates v0.5.5
  [321657f4] ScientificTypes v1.1.0
  [efcf1570] Setfield v0.7.0
  [699a6c99] SimpleTraits v0.9.3
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.3
  [171d559e] SplittablesBase v0.1.10
  [90137ffa] StaticArrays v0.12.5
  [2913bbd2] StatsBase v0.33.2
  [4c63d2b9] StatsFuns v0.9.5
  [856f2bd8] StructTypes v1.1.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.1.0
  [5d786b92] TerminalLoggers v0.1.2
  [a759f4b9] TimerOutputs v0.5.6
  [3bb67fe8] TranscodingStreams v0.9.5
  [28d57a85] Transducers v0.4.53
  [3a884ed6] UnPack v1.0.2
  [3d5dd08c] VectorizationBase v0.12.33
  [a5390f91] ZipFile v0.9.3
  [e88e6eb3] Zygote v0.5.9
  [700de1a5] ZygoteRules v0.2.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.4+0
  [efe28fd5] OpenSpecFun_jll v0.5.3+4
  [f50d1b31] Rmath_jll v0.2.2+1
  [83775a58] Zlib_jll v1.2.11+18
  [0dad84c5] ArgTools
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [f43a241f] Downloads
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [b27032c2] LibCURL
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [9abbd945] Profile
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
  [deac9b47] LibCURL_jll
  [14a3606d] MozillaCACerts_jll
     Testing Running tests...
WARNING: SqExponentialKernel changed convention in version 0.8.0.
This kernel now divides the squared distance by 2 to align with standard practice.
This warning will be removed in 0.9.0.
WARNING: using Distributions.params in module AugmentedGaussianProcesses conflicts with an existing identifier.
[ Info: Testing data
[ Info: Function tests
[ Info: Hyperparameter tests
[ Info: Inference tests
[ Info: Likelihood tests with Forward Diff
┌ Warning: α was too small for update
└ @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/inference/numericalVI.jl:138
┌ Warning: α was too small for update
└ @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/inference/numericalVI.jl:138
┌ Warning: α was too small for update
└ @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/inference/numericalVI.jl:138
┌ Warning: α was too small for update
└ @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/inference/numericalVI.jl:138
┌ Warning: α was too small for update
└ @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/inference/numericalVI.jl:138
┌ Warning: α was too small for update
└ @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/inference/numericalVI.jl:138
[ Info: Likelihood tests with Zygote
AnalyticVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:66
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:3 [inlined]
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}, X::SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:42
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}}, Vector{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}}}})
      @ Base.Broadcast ./broadcast.jl:906
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}}, Vector{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{AugmentedGaussianProcesses.IsFull{VGP{Float64, BayesianSVM{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}}}, m::VGP{Float64, BayesianSVM{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:12
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(model::VGP{Float64, BayesianSVM{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, iterations::Int64; callback::Nothing, convergence::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:41
   [22] train!
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:19 [inlined]
   [23] tests(model1::VGP{Float64, BayesianSVM{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, model2::VGP{Float64, BayesianSVM{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:46
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:93 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:67 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::BayesianSVM{Float64, Vector{Float64}}, ltype::Type{BayesianSVM}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, k::TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:64
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/bayesiansvm.jl:8 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/bayesiansvm.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
AnalyticVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:175
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse(f::Function, gp::AugmentedGaussianProcesses.OnlineVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.OnlineVarPosterior{Float64}, ADAM}, X::RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, ∇E_μ::Vector{Float64}, ∇E_Σ::Vector{Float64}, i::AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, opt::AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:29
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.OnlineVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.OnlineVarPosterior{Float64}, ADAM}, X::RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, ∇E_μ::Vector{Float64}, ∇E_Σ::Vector{Float64}, i::AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, vi_opt::AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:67
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy
      @ ./broadcast.jl:906 [inlined]
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.OnlineVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.OnlineVarPosterior{Float64}, ADAM}}, Base.RefValue{RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{Vector{Float64}}, Tuple{Vector{Float64}}, Vector{Any}, Tuple{AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{SimpleTraits.Not{AugmentedGaussianProcesses.IsFull{OnlineSVGP{Float64, BayesianSVM{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 1}}}}, m::OnlineSVGP{Float64, BayesianSVM{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 1})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:19
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(m::OnlineSVGP{Float64, BayesianSVM{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 1}, X::RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, y::Vector{Float64}; iterations::Int64, callback::Nothing, conv::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/onlinetraining.jl:105
   [22] #train!#165
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/onlinetraining.jl:23 [inlined]
   [23] tests(model1::OnlineSVGP{Float64, BayesianSVM{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 1}, model2::OnlineSVGP{Float64, BayesianSVM{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 1}, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:27
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:198 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:176 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::BayesianSVM{Float64, Vector{Float64}}, ltype::Type{BayesianSVM}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, k::TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:172
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/bayesiansvm.jl:8 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/bayesiansvm.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
AnalyticVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:281
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:12 [inlined]
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}, X::SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, ∇E_μ::Vector{Float64}, ∇E_Σ::Vector{Float64}, i::AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, vi_opt::AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:67
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy
      @ ./broadcast.jl:906 [inlined]
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}}, Base.RefValue{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}}, Tuple{Vector{Float64}}, Tuple{Vector{Float64}}, Vector{Any}, Tuple{AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{SimpleTraits.Not{AugmentedGaussianProcesses.IsFull{SVGP{Float64, BayesianSVM{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}}}}, m::SVGP{Float64, BayesianSVM{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:19
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(model::SVGP{Float64, BayesianSVM{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, iterations::Int64; callback::Nothing, convergence::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:41
   [22] train!
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:19 [inlined]
   [23] tests(model1::SVGP{Float64, BayesianSVM{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, model2::SVGP{Float64, BayesianSVM{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:46
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:311 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:282 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::BayesianSVM{Float64, Vector{Float64}}, ltype::Type{BayesianSVM}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, k::TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:279
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/bayesiansvm.jl:8 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/bayesiansvm.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
GP: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/gaussian.jl:21
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:3 [inlined]
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.LatentGP{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.Posterior{Float64}, ADAM}, X::SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:42
   [10] update_hyperparameters!(m::GP{Float64, GaussianLikelihood{Float64, ADAM, Vector{Float64}}, Analytic{Float64, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:6
   [11] train!(model::GP{Float64, GaussianLikelihood{Float64, ADAM, Vector{Float64}}, Analytic{Float64, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}}, iterations::Int64; callback::Nothing, convergence::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:41
   [12] train!
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:19 [inlined]
   [13] #21
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664 [inlined]
   [14] redirect_stderr(f::var"#21#23"{GP{Float64, GaussianLikelihood{Float64, ADAM, Vector{Float64}}, Analytic{Float64, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}}}, stream::IOStream)
      @ Base ./stream.jl:1224
   [15] #20
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [16] open(::var"#20#22"{GP{Float64, GaussianLikelihood{Float64, ADAM, Vector{Float64}}, Analytic{Float64, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}}}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [17] open(::Function, ::String, ::String)
      @ Base ./io.jl:328
   [18] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [19] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/gaussian.jl:32 [inlined]
   [20] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [21] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/gaussian.jl:22 [inlined]
   [22] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [23] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/gaussian.jl:2
   [24] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [25] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [26] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [27] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [28] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [29] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [30] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [31] top-level scope
      @ none:6
   [32] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [33] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [34] _start()
      @ Base ./client.jl:485
AnalyticVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/gaussian.jl:63
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:12 [inlined]
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}, X::SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, ∇E_μ::Vector{Float64}, ∇E_Σ::Vector{Float64}, i::AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, vi_opt::AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:67
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy
      @ ./broadcast.jl:906 [inlined]
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}}, Base.RefValue{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}}, Tuple{Vector{Float64}}, Tuple{Vector{Float64}}, Vector{Any}, Tuple{AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{SimpleTraits.Not{AugmentedGaussianProcesses.IsFull{SVGP{Float64, GaussianLikelihood{Float64, ADAM, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}}}}, m::SVGP{Float64, GaussianLikelihood{Float64, ADAM, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:19
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(model::SVGP{Float64, GaussianLikelihood{Float64, ADAM, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, iterations::Int64; callback::Nothing, convergence::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:41
   [22] train!
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:19 [inlined]
   [23] tests(model1::SVGP{Float64, GaussianLikelihood{Float64, Nothing, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, model2::SVGP{Float64, GaussianLikelihood{Float64, ADAM, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:14
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/gaussian.jl:93 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/gaussian.jl:64 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/gaussian.jl:62 [inlined]
   [29] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [30] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/gaussian.jl:2
   [31] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [32] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [33] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [34] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [35] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [36] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [37] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [38] top-level scope
      @ none:6
   [39] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [40] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [41] _start()
      @ Base ./client.jl:485
AnalyticVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:66
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:3 [inlined]
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}, X::SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:42
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy
      @ ./broadcast.jl:906 [inlined]
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}, AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}}, Vector{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{AugmentedGaussianProcesses.IsFull{VGP{Float64, HeteroscedasticLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 2, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 2}}}, m::VGP{Float64, HeteroscedasticLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 2, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 2})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:12
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(model::VGP{Float64, HeteroscedasticLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 2, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 2}, iterations::Int64; callback::Nothing, convergence::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:41
   [22] train!
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:19 [inlined]
   [23] tests(model1::VGP{Float64, HeteroscedasticLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 2, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 2}, model2::VGP{Float64, HeteroscedasticLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 2, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 2}, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:14
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:93 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:67 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::HeteroscedasticLikelihood{Float64, Vector{Float64}}, ltype::Type{HeteroscedasticLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, k::TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:64
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/heteroscedastic.jl:12 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/heteroscedastic.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
AnalyticVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:175
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse(f::Function, gp::AugmentedGaussianProcesses.OnlineVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.OnlineVarPosterior{Float64}, ADAM}, X::RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, ∇E_μ::Vector{Float64}, ∇E_Σ::Vector{Float64}, i::AnalyticVI{Float64, 2, Vector{Any}, Vector{Any}}, opt::AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:29
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.OnlineVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.OnlineVarPosterior{Float64}, ADAM}, X::RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, ∇E_μ::Vector{Float64}, ∇E_Σ::Vector{Float64}, i::AnalyticVI{Float64, 2, Vector{Any}, Vector{Any}}, vi_opt::AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:67
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy
      @ ./broadcast.jl:906 [inlined]
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.OnlineVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.OnlineVarPosterior{Float64}, ADAM}, AugmentedGaussianProcesses.OnlineVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.OnlineVarPosterior{Float64}, ADAM}}, Base.RefValue{RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{Vector{Float64}, Vector{Float64}}, Tuple{Vector{Float64}, Vector{Float64}}, Vector{Any}, Tuple{AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent}, AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{SimpleTraits.Not{AugmentedGaussianProcesses.IsFull{OnlineSVGP{Float64, HeteroscedasticLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 2, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 2}}}}, m::OnlineSVGP{Float64, HeteroscedasticLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 2, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 2})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:19
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(m::OnlineSVGP{Float64, HeteroscedasticLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 2, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 2}, X::RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, y::Vector{Float64}; iterations::Int64, callback::Nothing, conv::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/onlinetraining.jl:105
   [22] #train!#165
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/onlinetraining.jl:23 [inlined]
   [23] tests(model1::OnlineSVGP{Float64, HeteroscedasticLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 2, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 2}, model2::OnlineSVGP{Float64, HeteroscedasticLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 2, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 2}, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:27
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:198 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:176 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::HeteroscedasticLikelihood{Float64, Vector{Float64}}, ltype::Type{HeteroscedasticLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, k::TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:172
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/heteroscedastic.jl:12 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/heteroscedastic.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
AnalyticVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:281
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:12 [inlined]
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}, X::SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, ∇E_μ::Vector{Float64}, ∇E_Σ::Vector{Float64}, i::AnalyticVI{Float64, 2, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, vi_opt::AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:67
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy
      @ ./broadcast.jl:906 [inlined]
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}, AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}}, Base.RefValue{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}}, Tuple{Vector{Float64}, Vector{Float64}}, Tuple{Vector{Float64}, Vector{Float64}}, Vector{Any}, Tuple{AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent}, AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{SimpleTraits.Not{AugmentedGaussianProcesses.IsFull{SVGP{Float64, HeteroscedasticLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 2, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 2}}}}, m::SVGP{Float64, HeteroscedasticLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 2, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 2})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:19
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(model::SVGP{Float64, HeteroscedasticLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 2, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 2}, iterations::Int64; callback::Nothing, convergence::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:41
   [22] train!
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:19 [inlined]
   [23] tests(model1::SVGP{Float64, HeteroscedasticLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 2, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 2}, model2::SVGP{Float64, HeteroscedasticLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 2, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 2}, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:14
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:311 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:282 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::HeteroscedasticLikelihood{Float64, Vector{Float64}}, ltype::Type{HeteroscedasticLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, k::TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:279
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/heteroscedastic.jl:12 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/heteroscedastic.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
AnalyticVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:66
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:3 [inlined]
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}, X::SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:42
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}}, Vector{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}}}})
      @ Base.Broadcast ./broadcast.jl:906
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}}, Vector{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{AugmentedGaussianProcesses.IsFull{VGP{Float64, LaplaceLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}}}, m::VGP{Float64, LaplaceLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:12
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(model::VGP{Float64, LaplaceLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, iterations::Int64; callback::Nothing, convergence::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:41
   [22] train!
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:19 [inlined]
   [23] tests(model1::VGP{Float64, LaplaceLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, model2::VGP{Float64, LaplaceLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:14
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:93 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:67 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::LaplaceLikelihood{Float64, Vector{Float64}}, ltype::Type{LaplaceLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, k::TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:64
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/laplace.jl:8 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/laplace.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
NumericalVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:106
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:3 [inlined]
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}, X::SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:42
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}}, Vector{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}}}})
      @ Base.Broadcast ./broadcast.jl:906
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}}, Vector{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{AugmentedGaussianProcesses.IsFull{VGP{Float64, LaplaceLikelihood{Float64, Vector{Float64}}, QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}}}, m::VGP{Float64, LaplaceLikelihood{Float64, Vector{Float64}}, QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:12
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(model::VGP{Float64, LaplaceLikelihood{Float64, Vector{Float64}}, QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, iterations::Int64; callback::Nothing, convergence::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:41
   [22] train!
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:19 [inlined]
   [23] tests(model1::VGP{Float64, LaplaceLikelihood{Float64, Vector{Float64}}, QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, model2::VGP{Float64, LaplaceLikelihood{Float64, Vector{Float64}}, QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:14
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:125 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:107 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::LaplaceLikelihood{Float64, Vector{Float64}}, ltype::Type{LaplaceLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, k::TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:64
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/laplace.jl:8 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/laplace.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
AnalyticVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:175
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse(f::Function, gp::AugmentedGaussianProcesses.OnlineVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.OnlineVarPosterior{Float64}, ADAM}, X::RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, ∇E_μ::Vector{Float64}, ∇E_Σ::Vector{Float64}, i::AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, opt::AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:29
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.OnlineVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.OnlineVarPosterior{Float64}, ADAM}, X::RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, ∇E_μ::Vector{Float64}, ∇E_Σ::Vector{Float64}, i::AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, vi_opt::AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:67
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy
      @ ./broadcast.jl:906 [inlined]
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.OnlineVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.OnlineVarPosterior{Float64}, ADAM}}, Base.RefValue{RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{Vector{Float64}}, Tuple{Vector{Float64}}, Vector{Any}, Tuple{AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{SimpleTraits.Not{AugmentedGaussianProcesses.IsFull{OnlineSVGP{Float64, LaplaceLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 1}}}}, m::OnlineSVGP{Float64, LaplaceLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 1})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:19
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(m::OnlineSVGP{Float64, LaplaceLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 1}, X::RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, y::Vector{Float64}; iterations::Int64, callback::Nothing, conv::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/onlinetraining.jl:105
   [22] #train!#165
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/onlinetraining.jl:23 [inlined]
   [23] tests(model1::OnlineSVGP{Float64, LaplaceLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 1}, model2::OnlineSVGP{Float64, LaplaceLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 1}, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:27
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:198 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:176 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::LaplaceLikelihood{Float64, Vector{Float64}}, ltype::Type{LaplaceLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, k::TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:172
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/laplace.jl:8 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/laplace.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
AnalyticVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:281
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:12 [inlined]
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}, X::SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, ∇E_μ::Vector{Float64}, ∇E_Σ::Vector{Float64}, i::AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, vi_opt::AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:67
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy
      @ ./broadcast.jl:906 [inlined]
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}}, Base.RefValue{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}}, Tuple{Vector{Float64}}, Tuple{Vector{Float64}}, Vector{Any}, Tuple{AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{SimpleTraits.Not{AugmentedGaussianProcesses.IsFull{SVGP{Float64, LaplaceLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}}}}, m::SVGP{Float64, LaplaceLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:19
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(model::SVGP{Float64, LaplaceLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, iterations::Int64; callback::Nothing, convergence::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:41
   [22] train!
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:19 [inlined]
   [23] tests(model1::SVGP{Float64, LaplaceLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, model2::SVGP{Float64, LaplaceLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:14
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:311 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:282 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::LaplaceLikelihood{Float64, Vector{Float64}}, ltype::Type{LaplaceLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, k::TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:279
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/laplace.jl:8 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/laplace.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
NumericalVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:337
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:12 [inlined]
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}, X::SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, ∇E_μ::Vector{Float64}, ∇E_Σ::Vector{Float64}, i::QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, vi_opt::AugmentedGaussianProcesses.NVIOptimizer{Float64, Momentum})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:67
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy
      @ ./broadcast.jl:906 [inlined]
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}}, Base.RefValue{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}}, Tuple{Vector{Float64}}, Tuple{Vector{Float64}}, Vector{Any}, Tuple{AugmentedGaussianProcesses.NVIOptimizer{Float64, Momentum}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{SimpleTraits.Not{AugmentedGaussianProcesses.IsFull{SVGP{Float64, LaplaceLikelihood{Float64, Vector{Float64}}, QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}}}}, m::SVGP{Float64, LaplaceLikelihood{Float64, Vector{Float64}}, QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:19
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(model::SVGP{Float64, LaplaceLikelihood{Float64, Vector{Float64}}, QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, iterations::Int64; callback::Nothing, convergence::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:41
   [22] train!
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:19 [inlined]
   [23] tests(model1::SVGP{Float64, LaplaceLikelihood{Float64, Vector{Float64}}, QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, model2::SVGP{Float64, LaplaceLikelihood{Float64, Vector{Float64}}, QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:14
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:359 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:338 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::LaplaceLikelihood{Float64, Vector{Float64}}, ltype::Type{LaplaceLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, k::TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:279
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/laplace.jl:8 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/laplace.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
AnalyticVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:66
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:3 [inlined]
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, ScaledKernel{TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, Float64}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}, X::SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:42
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy
      @ ./broadcast.jl:906 [inlined]
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, ScaledKernel{TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, Float64}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}}, Vector{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{AugmentedGaussianProcesses.IsFull{VGP{Float64, LogisticLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}}}, m::VGP{Float64, LogisticLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:12
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(model::VGP{Float64, LogisticLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, iterations::Int64; callback::Nothing, convergence::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:41
   [22] train!
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:19 [inlined]
   [23] tests(model1::VGP{Float64, LogisticLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, model2::VGP{Float64, LogisticLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:14
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:93 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:67 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::LogisticLikelihood{Float64, Vector{Float64}}, ltype::Type{LogisticLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, k::ScaledKernel{TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, Float64})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:64
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/logistic.jl:7 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/logistic.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
NumericalVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:106
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:3 [inlined]
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, ScaledKernel{TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, Float64}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}, X::SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:42
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy
      @ ./broadcast.jl:906 [inlined]
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, ScaledKernel{TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, Float64}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}}, Vector{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{AugmentedGaussianProcesses.IsFull{VGP{Float64, LogisticLikelihood{Float64, Vector{Float64}}, QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}}}, m::VGP{Float64, LogisticLikelihood{Float64, Vector{Float64}}, QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:12
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(model::VGP{Float64, LogisticLikelihood{Float64, Vector{Float64}}, QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, iterations::Int64; callback::Nothing, convergence::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:41
   [22] train!
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:19 [inlined]
   [23] tests(model1::VGP{Float64, LogisticLikelihood{Float64, Vector{Float64}}, QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, model2::VGP{Float64, LogisticLikelihood{Float64, Vector{Float64}}, QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:14
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:125 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:107 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::LogisticLikelihood{Float64, Vector{Float64}}, ltype::Type{LogisticLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, k::ScaledKernel{TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, Float64})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:64
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/logistic.jl:7 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/logistic.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
AnalyticVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:175
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse(f::Function, gp::AugmentedGaussianProcesses.OnlineVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, ScaledKernel{TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, Float64}, ZeroMean{Float64}}, AugmentedGaussianProcesses.OnlineVarPosterior{Float64}, ADAM}, X::RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, ∇E_μ::Vector{Float64}, ∇E_Σ::Vector{Float64}, i::AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, opt::AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:29
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.OnlineVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, ScaledKernel{TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, Float64}, ZeroMean{Float64}}, AugmentedGaussianProcesses.OnlineVarPosterior{Float64}, ADAM}, X::RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, ∇E_μ::Vector{Float64}, ∇E_Σ::Vector{Float64}, i::AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, vi_opt::AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:67
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy
      @ ./broadcast.jl:906 [inlined]
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.OnlineVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, ScaledKernel{TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, Float64}, ZeroMean{Float64}}, AugmentedGaussianProcesses.OnlineVarPosterior{Float64}, ADAM}}, Base.RefValue{RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{Vector{Float64}}, Tuple{Vector{Float64}}, Vector{Any}, Tuple{AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{SimpleTraits.Not{AugmentedGaussianProcesses.IsFull{OnlineSVGP{Float64, LogisticLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 1}}}}, m::OnlineSVGP{Float64, LogisticLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 1})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:19
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(m::OnlineSVGP{Float64, LogisticLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 1}, X::RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, y::Vector{Float64}; iterations::Int64, callback::Nothing, conv::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/onlinetraining.jl:105
   [22] #train!#165
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/onlinetraining.jl:23 [inlined]
   [23] tests(model1::OnlineSVGP{Float64, LogisticLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 1}, model2::OnlineSVGP{Float64, LogisticLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 1}, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:27
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:198 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:176 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::LogisticLikelihood{Float64, Vector{Float64}}, ltype::Type{LogisticLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, k::ScaledKernel{TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, Float64})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:172
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/logistic.jl:7 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/logistic.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
AnalyticVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:281
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:12 [inlined]
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, ScaledKernel{TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, Float64}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}, X::SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, ∇E_μ::Vector{Float64}, ∇E_Σ::Vector{Float64}, i::AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, vi_opt::AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:67
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy
      @ ./broadcast.jl:906 [inlined]
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, ScaledKernel{TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, Float64}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}}, Base.RefValue{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}}, Tuple{Vector{Float64}}, Tuple{Vector{Float64}}, Vector{Any}, Tuple{AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{SimpleTraits.Not{AugmentedGaussianProcesses.IsFull{SVGP{Float64, LogisticLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}}}}, m::SVGP{Float64, LogisticLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:19
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(model::SVGP{Float64, LogisticLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, iterations::Int64; callback::Nothing, convergence::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:41
   [22] train!
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:19 [inlined]
   [23] tests(model1::SVGP{Float64, LogisticLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, model2::SVGP{Float64, LogisticLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:14
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:311 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:282 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::LogisticLikelihood{Float64, Vector{Float64}}, ltype::Type{LogisticLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, k::ScaledKernel{TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, Float64})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:279
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/logistic.jl:7 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/logistic.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
NumericalVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:337
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:12 [inlined]
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, ScaledKernel{TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, Float64}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}, X::SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, ∇E_μ::Vector{Float64}, ∇E_Σ::Vector{Float64}, i::QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, vi_opt::AugmentedGaussianProcesses.NVIOptimizer{Float64, Momentum})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:67
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy
      @ ./broadcast.jl:906 [inlined]
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, ScaledKernel{TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, Float64}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}}, Base.RefValue{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}}, Tuple{Vector{Float64}}, Tuple{Vector{Float64}}, Vector{Any}, Tuple{AugmentedGaussianProcesses.NVIOptimizer{Float64, Momentum}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{SimpleTraits.Not{AugmentedGaussianProcesses.IsFull{SVGP{Float64, LogisticLikelihood{Float64, Vector{Float64}}, QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}}}}, m::SVGP{Float64, LogisticLikelihood{Float64, Vector{Float64}}, QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:19
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(model::SVGP{Float64, LogisticLikelihood{Float64, Vector{Float64}}, QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, iterations::Int64; callback::Nothing, convergence::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:41
   [22] train!
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:19 [inlined]
   [23] tests(model1::SVGP{Float64, LogisticLikelihood{Float64, Vector{Float64}}, QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, model2::SVGP{Float64, LogisticLikelihood{Float64, Vector{Float64}}, QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:14
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:359 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:338 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::LogisticLikelihood{Float64, Vector{Float64}}, ltype::Type{LogisticLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, k::ScaledKernel{TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, Float64})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:279
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/logistic.jl:7 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/logistic.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
AnalyticVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:66
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:3 [inlined]
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}, X::SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:42
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy
      @ ./broadcast.jl:906 [inlined]
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}, AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}, AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}}, Vector{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{AugmentedGaussianProcesses.IsFull{VGP{Float64, LogisticSoftMaxLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{UnitRange{Int64}}, true}}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Bool, Vector{BitVector}}, 3}}}, m::VGP{Float64, LogisticSoftMaxLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{UnitRange{Int64}}, true}}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Bool, Vector{BitVector}}, 3})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:12
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(model::VGP{Float64, LogisticSoftMaxLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{UnitRange{Int64}}, true}}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Bool, Vector{BitVector}}, 3}, iterations::Int64; callback::Nothing, convergence::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:41
   [22] train!
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:19 [inlined]
   [23] tests(model1::VGP{Float64, LogisticSoftMaxLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{UnitRange{Int64}}, true}}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Bool, Vector{BitVector}}, 3}, model2::VGP{Float64, LogisticSoftMaxLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{UnitRange{Int64}}, true}}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Bool, Vector{BitVector}}, 3}, X::Matrix{Float64}, f::Vector{Vector{Float64}}, y::Vector{Int64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:14
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:93 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:67 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::LogisticSoftMaxLikelihood{Float64, Vector{Float64}}, ltype::Type{LogisticSoftMaxLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Vector{Float64}}, y::Vector{Int64}, k::TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:64
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/logisticsoftmax.jl:14 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/logisticsoftmax.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
NumericalVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:106
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:3 [inlined]
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}, X::SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:42
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy
      @ ./broadcast.jl:906 [inlined]
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}, AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}, AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}}, Vector{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{AugmentedGaussianProcesses.IsFull{VGP{Float64, LogisticSoftMaxLikelihood{Float64, Vector{Float64}}, MCIntegrationVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{UnitRange{Int64}}, true}}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Bool, Vector{BitVector}}, 3}}}, m::VGP{Float64, LogisticSoftMaxLikelihood{Float64, Vector{Float64}}, MCIntegrationVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{UnitRange{Int64}}, true}}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Bool, Vector{BitVector}}, 3})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:12
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(model::VGP{Float64, LogisticSoftMaxLikelihood{Float64, Vector{Float64}}, MCIntegrationVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{UnitRange{Int64}}, true}}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Bool, Vector{BitVector}}, 3}, iterations::Int64; callback::Nothing, convergence::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:41
   [22] train!
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:19 [inlined]
   [23] tests(model1::VGP{Float64, LogisticSoftMaxLikelihood{Float64, Vector{Float64}}, MCIntegrationVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{UnitRange{Int64}}, true}}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Bool, Vector{BitVector}}, 3}, model2::VGP{Float64, LogisticSoftMaxLikelihood{Float64, Vector{Float64}}, MCIntegrationVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{UnitRange{Int64}}, true}}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Bool, Vector{BitVector}}, 3}, X::Matrix{Float64}, f::Vector{Vector{Float64}}, y::Vector{Int64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:14
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:156 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:107 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::LogisticSoftMaxLikelihood{Float64, Vector{Float64}}, ltype::Type{LogisticSoftMaxLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Vector{Float64}}, y::Vector{Int64}, k::TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:64
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/logisticsoftmax.jl:14 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/logisticsoftmax.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
AnalyticVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:175
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse(f::Function, gp::AugmentedGaussianProcesses.OnlineVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.OnlineVarPosterior{Float64}, ADAM}, X::RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, ∇E_μ::Vector{Float64}, ∇E_Σ::Vector{Float64}, i::AnalyticVI{Float64, 3, Vector{Any}, Vector{Any}}, opt::AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:29
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.OnlineVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.OnlineVarPosterior{Float64}, ADAM}, X::RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, ∇E_μ::Vector{Float64}, ∇E_Σ::Vector{Float64}, i::AnalyticVI{Float64, 3, Vector{Any}, Vector{Any}}, vi_opt::AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:67
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy
      @ ./broadcast.jl:906 [inlined]
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.OnlineVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.OnlineVarPosterior{Float64}, ADAM}, AugmentedGaussianProcesses.OnlineVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.OnlineVarPosterior{Float64}, ADAM}, AugmentedGaussianProcesses.OnlineVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.OnlineVarPosterior{Float64}, ADAM}}, Base.RefValue{RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Vector{Vector{Float64}}, Vector{Vector{Float64}}, Vector{Any}, Tuple{AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent}, AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent}, AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{SimpleTraits.Not{AugmentedGaussianProcesses.IsFull{OnlineSVGP{Float64, LogisticSoftMaxLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 3, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 3}}}}, m::OnlineSVGP{Float64, LogisticSoftMaxLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 3, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 3})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:19
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(m::OnlineSVGP{Float64, LogisticSoftMaxLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 3, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 3}, X::RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, y::Vector{Int64}; iterations::Int64, callback::Nothing, conv::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/onlinetraining.jl:105
   [22] #train!#165
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/onlinetraining.jl:23 [inlined]
   [23] tests(model1::OnlineSVGP{Float64, LogisticSoftMaxLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 3, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 3}, model2::OnlineSVGP{Float64, LogisticSoftMaxLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 3, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 3}, X::Matrix{Float64}, f::Vector{Vector{Float64}}, y::Vector{Int64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:27
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:198 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:176 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::LogisticSoftMaxLikelihood{Float64, Vector{Float64}}, ltype::Type{LogisticSoftMaxLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Vector{Float64}}, y::Vector{Int64}, k::TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:172
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/logisticsoftmax.jl:14 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/logisticsoftmax.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
AnalyticVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:281
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:12 [inlined]
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}, X::SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, ∇E_μ::Vector{Float64}, ∇E_Σ::Vector{Float64}, i::AnalyticVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{Vector{Int64}}, false}}}, vi_opt::AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:67
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy
      @ ./broadcast.jl:906 [inlined]
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}, AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}, AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}}, Base.RefValue{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}}, Vector{Vector{Float64}}, Vector{Vector{Float64}}, Vector{Any}, Tuple{AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent}, AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent}, AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{SimpleTraits.Not{AugmentedGaussianProcesses.IsFull{SVGP{Float64, LogisticSoftMaxLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{Vector{Int64}}, false}}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Bool, Vector{BitVector}}, 3}}}}, m::SVGP{Float64, LogisticSoftMaxLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{Vector{Int64}}, false}}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Bool, Vector{BitVector}}, 3})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:19
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(model::SVGP{Float64, LogisticSoftMaxLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{Vector{Int64}}, false}}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Bool, Vector{BitVector}}, 3}, iterations::Int64; callback::Nothing, convergence::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:41
   [22] train!
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:19 [inlined]
   [23] tests(model1::SVGP{Float64, LogisticSoftMaxLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{Vector{Int64}}, false}}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Bool, Vector{BitVector}}, 3}, model2::SVGP{Float64, LogisticSoftMaxLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{Vector{Int64}}, false}}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Bool, Vector{BitVector}}, 3}, X::Matrix{Float64}, f::Vector{Vector{Float64}}, y::Vector{Int64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:14
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:311 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:282 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::LogisticSoftMaxLikelihood{Float64, Vector{Float64}}, ltype::Type{LogisticSoftMaxLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Vector{Float64}}, y::Vector{Int64}, k::TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:279
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/logisticsoftmax.jl:14 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/logisticsoftmax.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
NumericalVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:337
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:12 [inlined]
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}, X::SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, ∇E_μ::Vector{Float64}, ∇E_Σ::Vector{Float64}, i::MCIntegrationVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{Vector{Int64}}, false}}}, vi_opt::AugmentedGaussianProcesses.NVIOptimizer{Float64, Momentum})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:67
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy
      @ ./broadcast.jl:906 [inlined]
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}, AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}, AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}}, Base.RefValue{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}}, Tuple{Vector{Float64}}, Tuple{Vector{Float64}}, Vector{Any}, Tuple{AugmentedGaussianProcesses.NVIOptimizer{Float64, Momentum}, AugmentedGaussianProcesses.NVIOptimizer{Float64, Momentum}, AugmentedGaussianProcesses.NVIOptimizer{Float64, Momentum}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{SimpleTraits.Not{AugmentedGaussianProcesses.IsFull{SVGP{Float64, LogisticSoftMaxLikelihood{Float64, Vector{Float64}}, MCIntegrationVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{Vector{Int64}}, false}}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Bool, Vector{BitVector}}, 3}}}}, m::SVGP{Float64, LogisticSoftMaxLikelihood{Float64, Vector{Float64}}, MCIntegrationVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{Vector{Int64}}, false}}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Bool, Vector{BitVector}}, 3})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:19
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(model::SVGP{Float64, LogisticSoftMaxLikelihood{Float64, Vector{Float64}}, MCIntegrationVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{Vector{Int64}}, false}}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Bool, Vector{BitVector}}, 3}, iterations::Int64; callback::Nothing, convergence::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:41
   [22] train!
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:19 [inlined]
   [23] tests(model1::SVGP{Float64, LogisticSoftMaxLikelihood{Float64, Vector{Float64}}, MCIntegrationVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{Vector{Int64}}, false}}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Bool, Vector{BitVector}}, 3}, model2::SVGP{Float64, LogisticSoftMaxLikelihood{Float64, Vector{Float64}}, MCIntegrationVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{Vector{Int64}}, false}}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Bool, Vector{BitVector}}, 3}, X::Matrix{Float64}, f::Vector{Vector{Float64}}, y::Vector{Int64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:14
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:412 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:338 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::LogisticSoftMaxLikelihood{Float64, Vector{Float64}}, ltype::Type{LogisticSoftMaxLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Vector{Float64}}, y::Vector{Int64}, k::TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:279
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/logisticsoftmax.jl:14 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/logisticsoftmax.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
AnalyticVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:66
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:3 [inlined]
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}, X::SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:42
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}}, Vector{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}}}})
      @ Base.Broadcast ./broadcast.jl:906
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}}, Vector{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{AugmentedGaussianProcesses.IsFull{VGP{Float64, NegBinomialLikelihood{Float64, Int64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Int64, 1, Vector{Int64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Int64, Vector{Int64}}, 1}}}, m::VGP{Float64, NegBinomialLikelihood{Float64, Int64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Int64, 1, Vector{Int64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Int64, Vector{Int64}}, 1})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:12
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(model::VGP{Float64, NegBinomialLikelihood{Float64, Int64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Int64, 1, Vector{Int64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Int64, Vector{Int64}}, 1}, iterations::Int64; callback::Nothing, convergence::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:41
   [22] train!
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:19 [inlined]
   [23] tests(model1::VGP{Float64, NegBinomialLikelihood{Float64, Int64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Int64, 1, Vector{Int64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Int64, Vector{Int64}}, 1}, model2::VGP{Float64, NegBinomialLikelihood{Float64, Int64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Int64, 1, Vector{Int64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Int64, Vector{Int64}}, 1}, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Int64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:14
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:93 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:67 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::NegBinomialLikelihood{Float64, Int64, Vector{Float64}}, ltype::Type{NegBinomialLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Int64}, k::TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:64
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/negativebinomial.jl:8 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/negativebinomial.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
AnalyticVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:175
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse(f::Function, gp::AugmentedGaussianProcesses.OnlineVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.OnlineVarPosterior{Float64}, ADAM}, X::RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, ∇E_μ::Vector{Float64}, ∇E_Σ::Vector{Float64}, i::AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, opt::AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:29
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.OnlineVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.OnlineVarPosterior{Float64}, ADAM}, X::RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, ∇E_μ::Vector{Float64}, ∇E_Σ::Vector{Float64}, i::AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, vi_opt::AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:67
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy
      @ ./broadcast.jl:906 [inlined]
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.OnlineVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.OnlineVarPosterior{Float64}, ADAM}}, Base.RefValue{RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{Vector{Float64}}, Tuple{Vector{Float64}}, Vector{Any}, Tuple{AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{SimpleTraits.Not{AugmentedGaussianProcesses.IsFull{OnlineSVGP{Float64, NegBinomialLikelihood{Float64, Int64, Vector{Float64}}, AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 1}}}}, m::OnlineSVGP{Float64, NegBinomialLikelihood{Float64, Int64, Vector{Float64}}, AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 1})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:19
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(m::OnlineSVGP{Float64, NegBinomialLikelihood{Float64, Int64, Vector{Float64}}, AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 1}, X::RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, y::Vector{Int64}; iterations::Int64, callback::Nothing, conv::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/onlinetraining.jl:105
   [22] #train!#165
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/onlinetraining.jl:23 [inlined]
   [23] tests(model1::OnlineSVGP{Float64, NegBinomialLikelihood{Float64, Int64, Vector{Float64}}, AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 1}, model2::OnlineSVGP{Float64, NegBinomialLikelihood{Float64, Int64, Vector{Float64}}, AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 1}, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Int64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:27
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:198 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:176 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::NegBinomialLikelihood{Float64, Int64, Vector{Float64}}, ltype::Type{NegBinomialLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Int64}, k::TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:172
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/negativebinomial.jl:8 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/negativebinomial.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
AnalyticVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:281
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:12 [inlined]
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}, X::SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, ∇E_μ::Vector{Float64}, ∇E_Σ::Vector{Float64}, i::AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Int64, 1, Vector{Int64}, Tuple{Vector{Int64}}, false}}, vi_opt::AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:67
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy
      @ ./broadcast.jl:906 [inlined]
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}}, Base.RefValue{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}}, Tuple{Vector{Float64}}, Tuple{Vector{Float64}}, Vector{Any}, Tuple{AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{SimpleTraits.Not{AugmentedGaussianProcesses.IsFull{SVGP{Float64, NegBinomialLikelihood{Float64, Int64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Int64, 1, Vector{Int64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Int64, Vector{Int64}}, 1}}}}, m::SVGP{Float64, NegBinomialLikelihood{Float64, Int64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Int64, 1, Vector{Int64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Int64, Vector{Int64}}, 1})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:19
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(model::SVGP{Float64, NegBinomialLikelihood{Float64, Int64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Int64, 1, Vector{Int64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Int64, Vector{Int64}}, 1}, iterations::Int64; callback::Nothing, convergence::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:41
   [22] train!
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:19 [inlined]
   [23] tests(model1::SVGP{Float64, NegBinomialLikelihood{Float64, Int64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Int64, 1, Vector{Int64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Int64, Vector{Int64}}, 1}, model2::SVGP{Float64, NegBinomialLikelihood{Float64, Int64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Int64, 1, Vector{Int64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Int64, Vector{Int64}}, 1}, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Int64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:14
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:311 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:282 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::NegBinomialLikelihood{Float64, Int64, Vector{Float64}}, ltype::Type{NegBinomialLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Int64}, k::TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:279
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/negativebinomial.jl:8 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/negativebinomial.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
AnalyticVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:66
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:3 [inlined]
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}, X::SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:42
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}}, Vector{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}}}})
      @ Base.Broadcast ./broadcast.jl:906
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}}, Vector{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{AugmentedGaussianProcesses.IsFull{VGP{Float64, PoissonLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Int64, 1, Vector{Int64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Int64, Vector{Int64}}, 1}}}, m::VGP{Float64, PoissonLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Int64, 1, Vector{Int64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Int64, Vector{Int64}}, 1})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:12
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(model::VGP{Float64, PoissonLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Int64, 1, Vector{Int64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Int64, Vector{Int64}}, 1}, iterations::Int64; callback::Nothing, convergence::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:41
   [22] train!
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:19 [inlined]
   [23] tests(model1::VGP{Float64, PoissonLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Int64, 1, Vector{Int64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Int64, Vector{Int64}}, 1}, model2::VGP{Float64, PoissonLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Int64, 1, Vector{Int64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Int64, Vector{Int64}}, 1}, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Int64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:14
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:93 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:67 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::PoissonLikelihood{Float64, Vector{Float64}}, ltype::Type{PoissonLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Int64}, k::TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:64
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/poisson.jl:8 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/poisson.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
AnalyticVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:175
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse(f::Function, gp::AugmentedGaussianProcesses.OnlineVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.OnlineVarPosterior{Float64}, ADAM}, X::RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, ∇E_μ::Vector{Float64}, ∇E_Σ::Vector{Float64}, i::AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, opt::AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:29
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.OnlineVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.OnlineVarPosterior{Float64}, ADAM}, X::RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, ∇E_μ::Vector{Float64}, ∇E_Σ::Vector{Float64}, i::AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, vi_opt::AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:67
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy
      @ ./broadcast.jl:906 [inlined]
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.OnlineVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.OnlineVarPosterior{Float64}, ADAM}}, Base.RefValue{RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{Vector{Float64}}, Tuple{Vector{Float64}}, Vector{Any}, Tuple{AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{SimpleTraits.Not{AugmentedGaussianProcesses.IsFull{OnlineSVGP{Float64, PoissonLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 1}}}}, m::OnlineSVGP{Float64, PoissonLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 1})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:19
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(m::OnlineSVGP{Float64, PoissonLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 1}, X::RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, y::Vector{Int64}; iterations::Int64, callback::Nothing, conv::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/onlinetraining.jl:105
   [22] #train!#165
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/onlinetraining.jl:23 [inlined]
   [23] tests(model1::OnlineSVGP{Float64, PoissonLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 1}, model2::OnlineSVGP{Float64, PoissonLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 1}, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Int64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:27
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:198 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:176 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::PoissonLikelihood{Float64, Vector{Float64}}, ltype::Type{PoissonLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Int64}, k::TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:172
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/poisson.jl:8 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/poisson.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
AnalyticVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:281
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:12 [inlined]
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}, X::SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, ∇E_μ::Vector{Float64}, ∇E_Σ::Vector{Float64}, i::AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Int64, 1, Vector{Int64}, Tuple{Vector{Int64}}, false}}, vi_opt::AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:67
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy
      @ ./broadcast.jl:906 [inlined]
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}}, Base.RefValue{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}}, Tuple{Vector{Float64}}, Tuple{Vector{Float64}}, Vector{Any}, Tuple{AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{SimpleTraits.Not{AugmentedGaussianProcesses.IsFull{SVGP{Float64, PoissonLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Int64, 1, Vector{Int64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Int64, Vector{Int64}}, 1}}}}, m::SVGP{Float64, PoissonLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Int64, 1, Vector{Int64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Int64, Vector{Int64}}, 1})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:19
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(model::SVGP{Float64, PoissonLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Int64, 1, Vector{Int64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Int64, Vector{Int64}}, 1}, iterations::Int64; callback::Nothing, convergence::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:41
   [22] train!
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:19 [inlined]
   [23] tests(model1::SVGP{Float64, PoissonLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Int64, 1, Vector{Int64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Int64, Vector{Int64}}, 1}, model2::SVGP{Float64, PoissonLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Int64, 1, Vector{Int64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Int64, Vector{Int64}}, 1}, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Int64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:14
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:311 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:282 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::PoissonLikelihood{Float64, Vector{Float64}}, ltype::Type{PoissonLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Int64}, k::TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:279
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/poisson.jl:8 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/poisson.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
NumericalVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:106
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:3 [inlined]
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}, X::SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:42
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy
      @ ./broadcast.jl:906 [inlined]
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}, AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}, AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}}, Vector{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{AugmentedGaussianProcesses.IsFull{VGP{Float64, SoftMaxLikelihood{Float64, Vector{Float64}}, MCIntegrationVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{UnitRange{Int64}}, true}}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Bool, Vector{BitVector}}, 3}}}, m::VGP{Float64, SoftMaxLikelihood{Float64, Vector{Float64}}, MCIntegrationVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{UnitRange{Int64}}, true}}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Bool, Vector{BitVector}}, 3})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:12
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(model::VGP{Float64, SoftMaxLikelihood{Float64, Vector{Float64}}, MCIntegrationVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{UnitRange{Int64}}, true}}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Bool, Vector{BitVector}}, 3}, iterations::Int64; callback::Nothing, convergence::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:41
   [22] train!
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:19 [inlined]
   [23] tests(model1::VGP{Float64, SoftMaxLikelihood{Float64, Vector{Float64}}, MCIntegrationVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{UnitRange{Int64}}, true}}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Bool, Vector{BitVector}}, 3}, model2::VGP{Float64, SoftMaxLikelihood{Float64, Vector{Float64}}, MCIntegrationVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{UnitRange{Int64}}, true}}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Bool, Vector{BitVector}}, 3}, X::Matrix{Float64}, f::Vector{Vector{Float64}}, y::Vector{Int64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:14
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:156 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:107 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::SoftMaxLikelihood{Float64, Vector{Float64}}, ltype::Type{SoftMaxLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Vector{Float64}}, y::Vector{Int64}, k::TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:64
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/softmax.jl:12 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/softmax.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
NumericalVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:337
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:12 [inlined]
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}, X::SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, ∇E_μ::Vector{Float64}, ∇E_Σ::Vector{Float64}, i::MCIntegrationVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{Vector{Int64}}, false}}}, vi_opt::AugmentedGaussianProcesses.NVIOptimizer{Float64, Momentum})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:67
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy
      @ ./broadcast.jl:906 [inlined]
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}, AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}, AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}}, Base.RefValue{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}}, Tuple{Vector{Float64}}, Tuple{Vector{Float64}}, Vector{Any}, Tuple{AugmentedGaussianProcesses.NVIOptimizer{Float64, Momentum}, AugmentedGaussianProcesses.NVIOptimizer{Float64, Momentum}, AugmentedGaussianProcesses.NVIOptimizer{Float64, Momentum}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{SimpleTraits.Not{AugmentedGaussianProcesses.IsFull{SVGP{Float64, SoftMaxLikelihood{Float64, Vector{Float64}}, MCIntegrationVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{Vector{Int64}}, false}}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Bool, Vector{BitVector}}, 3}}}}, m::SVGP{Float64, SoftMaxLikelihood{Float64, Vector{Float64}}, MCIntegrationVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{Vector{Int64}}, false}}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Bool, Vector{BitVector}}, 3})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:19
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(model::SVGP{Float64, SoftMaxLikelihood{Float64, Vector{Float64}}, MCIntegrationVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{Vector{Int64}}, false}}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Bool, Vector{BitVector}}, 3}, iterations::Int64; callback::Nothing, convergence::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:41
   [22] train!
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:19 [inlined]
   [23] tests(model1::SVGP{Float64, SoftMaxLikelihood{Float64, Vector{Float64}}, MCIntegrationVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{Vector{Int64}}, false}}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Bool, Vector{BitVector}}, 3}, model2::SVGP{Float64, SoftMaxLikelihood{Float64, Vector{Float64}}, MCIntegrationVI{Float64, 3, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, Vector{SubArray{Bool, 1, BitVector, Tuple{Vector{Int64}}, false}}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Bool, Vector{BitVector}}, 3}, X::Matrix{Float64}, f::Vector{Vector{Float64}}, y::Vector{Int64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:14
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:412 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:338 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::SoftMaxLikelihood{Float64, Vector{Float64}}, ltype::Type{SoftMaxLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Vector{Float64}}, y::Vector{Int64}, k::TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:279
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/softmax.jl:12 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/softmax.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
AnalyticVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:66
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:3 [inlined]
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}, X::SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:42
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}}, Vector{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}}}})
      @ Base.Broadcast ./broadcast.jl:906
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}}, Vector{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{AugmentedGaussianProcesses.IsFull{VGP{Float64, StudentTLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}}}, m::VGP{Float64, StudentTLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:12
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(model::VGP{Float64, StudentTLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, iterations::Int64; callback::Nothing, convergence::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:41
   [22] train!
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:19 [inlined]
   [23] tests(model1::VGP{Float64, StudentTLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, model2::VGP{Float64, StudentTLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:14
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:93 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:67 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::StudentTLikelihood{Float64, Vector{Float64}}, ltype::Type{StudentTLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, k::TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:64
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/studentt.jl:8 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/studentt.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
NumericalVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:106
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:3 [inlined]
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}, X::SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:42
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}}, Vector{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}}}})
      @ Base.Broadcast ./broadcast.jl:906
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.VarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}}, Vector{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{AugmentedGaussianProcesses.IsFull{VGP{Float64, StudentTLikelihood{Float64, Vector{Float64}}, QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}}}, m::VGP{Float64, StudentTLikelihood{Float64, Vector{Float64}}, QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:12
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(model::VGP{Float64, StudentTLikelihood{Float64, Vector{Float64}}, QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, iterations::Int64; callback::Nothing, convergence::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:41
   [22] train!
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:19 [inlined]
   [23] tests(model1::VGP{Float64, StudentTLikelihood{Float64, Vector{Float64}}, QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, model2::VGP{Float64, StudentTLikelihood{Float64, Vector{Float64}}, QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Base.Slice{Base.OneTo{Int64}}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:14
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:125 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:107 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::StudentTLikelihood{Float64, Vector{Float64}}, ltype::Type{StudentTLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, k::TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:64
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/studentt.jl:8 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/studentt.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
AnalyticVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:175
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse(f::Function, gp::AugmentedGaussianProcesses.OnlineVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.OnlineVarPosterior{Float64}, ADAM}, X::RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, ∇E_μ::Vector{Float64}, ∇E_Σ::Vector{Float64}, i::AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, opt::AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:29
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.OnlineVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.OnlineVarPosterior{Float64}, ADAM}, X::RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, ∇E_μ::Vector{Float64}, ∇E_Σ::Vector{Float64}, i::AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, vi_opt::AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:67
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy
      @ ./broadcast.jl:906 [inlined]
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.OnlineVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.OnlineVarPosterior{Float64}, ADAM}}, Base.RefValue{RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}, Tuple{Vector{Float64}}, Tuple{Vector{Float64}}, Vector{Any}, Tuple{AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{SimpleTraits.Not{AugmentedGaussianProcesses.IsFull{OnlineSVGP{Float64, StudentTLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 1}}}}, m::OnlineSVGP{Float64, StudentTLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 1})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:19
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(m::OnlineSVGP{Float64, StudentTLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 1}, X::RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, y::Vector{Float64}; iterations::Int64, callback::Nothing, conv::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/onlinetraining.jl:105
   [22] #train!#165
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/onlinetraining.jl:23 [inlined]
   [23] tests(model1::OnlineSVGP{Float64, StudentTLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 1}, model2::OnlineSVGP{Float64, StudentTLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, Vector{Any}, Vector{Any}}, AugmentedGaussianProcesses.OnlineDataContainer, 1}, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:27
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:198 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:176 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::StudentTLikelihood{Float64, Vector{Float64}}, ltype::Type{StudentTLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, k::TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:172
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/studentt.jl:8 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/studentt.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
AnalyticVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:281
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:12 [inlined]
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}, X::SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, ∇E_μ::Vector{Float64}, ∇E_Σ::Vector{Float64}, i::AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, vi_opt::AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:67
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy
      @ ./broadcast.jl:906 [inlined]
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}}, Base.RefValue{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}}, Tuple{Vector{Float64}}, Tuple{Vector{Float64}}, Vector{Any}, Tuple{AugmentedGaussianProcesses.AVIOptimizer{Float64, Descent}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{SimpleTraits.Not{AugmentedGaussianProcesses.IsFull{SVGP{Float64, StudentTLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}}}}, m::SVGP{Float64, StudentTLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:19
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(model::SVGP{Float64, StudentTLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, iterations::Int64; callback::Nothing, convergence::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:41
   [22] train!
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:19 [inlined]
   [23] tests(model1::SVGP{Float64, StudentTLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, model2::SVGP{Float64, StudentTLikelihood{Float64, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:14
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:311 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:282 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::StudentTLikelihood{Float64, Vector{Float64}}, ltype::Type{StudentTLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, k::TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:279
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/studentt.jl:8 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/studentt.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
NumericalVI: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:337
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:12 [inlined]
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}, X::SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, ∇E_μ::Vector{Float64}, ∇E_Σ::Vector{Float64}, i::QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, vi_opt::AugmentedGaussianProcesses.NVIOptimizer{Float64, Momentum})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:67
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy
      @ ./broadcast.jl:906 [inlined]
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.SparseVarLatent{Float64, AugmentedGaussianProcesses.GPPrior{Float64, TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}}, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, OptimIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, KmeansIP{SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ColVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}}}, Nothing}, ADAM}}, Base.RefValue{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}}, Tuple{Vector{Float64}}, Tuple{Vector{Float64}}, Vector{Any}, Tuple{AugmentedGaussianProcesses.NVIOptimizer{Float64, Momentum}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{SimpleTraits.Not{AugmentedGaussianProcesses.IsFull{SVGP{Float64, StudentTLikelihood{Float64, Vector{Float64}}, QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}}}}, m::SVGP{Float64, StudentTLikelihood{Float64, Vector{Float64}}, QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:19
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(model::SVGP{Float64, StudentTLikelihood{Float64, Vector{Float64}}, QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, iterations::Int64; callback::Nothing, convergence::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:41
   [22] train!
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:19 [inlined]
   [23] tests(model1::SVGP{Float64, StudentTLikelihood{Float64, Vector{Float64}}, QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, model2::SVGP{Float64, StudentTLikelihood{Float64, Vector{Float64}}, QuadratureVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Vector{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{Vector{Int64}}, false}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, problem::String)
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:14
   [24] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:359 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:338 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] tests_likelihood(l::StudentTLikelihood{Float64, Vector{Float64}}, ltype::Type{StudentTLikelihood}, dict::Dict{String, Dict{String, Bool}}, floattypes::Vector{DataType}, problem::String, nLatent::Int64, X::Matrix{Float64}, f::Vector{Float64}, y::Vector{Float64}, k::TransformedKernel{SqExponentialKernel, ScaleTransform{Float64}})
      @ Main ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/testingtools.jl:279
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/studentt.jl:8 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/likelihood/studentt.jl:2
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:50 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:49 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
[ Info: Model tests
Variational Student-T Process with a Gaussian likelihood (σ² = 0.001) infered by Analytic Variational Inference 
Variational Student-T Processes: Error During Test at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/models/VStP.jl:7
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] pullback(f::Function, ps::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:172
    [7] gradient(f::Function, args::Zygote.Params)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:53
    [8] ∇L_ρ_reverse
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/zygote_rules.jl:3 [inlined]
    [9] update_hyperparameters!(gp::AugmentedGaussianProcesses.TVarLatent{Float64, AugmentedGaussianProcesses.TPrior{Float64, SqExponentialKernel, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}, X::SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{UnitRange{Int64}}, false})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:42
   [10] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
   [11] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
   [12] getindex
      @ ./broadcast.jl:575 [inlined]
   [13] macro expansion
      @ ./broadcast.jl:980 [inlined]
   [14] macro expansion
      @ ./simdloop.jl:77 [inlined]
   [15] copyto!
      @ ./broadcast.jl:979 [inlined]
   [16] copyto!
      @ ./broadcast.jl:934 [inlined]
   [17] copy
      @ ./broadcast.jl:906 [inlined]
   [18] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(AugmentedGaussianProcesses.update_hyperparameters!), Tuple{Tuple{AugmentedGaussianProcesses.TVarLatent{Float64, AugmentedGaussianProcesses.TPrior{Float64, SqExponentialKernel, ZeroMean{Float64}}, AugmentedGaussianProcesses.VarPosterior{Float64}, ADAM}}, Vector{SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{UnitRange{Int64}}, false}}}})
      @ Base.Broadcast ./broadcast.jl:881
   [19] update_hyperparameters!(::Type{AugmentedGaussianProcesses.IsFull{VStP{Float64, GaussianLikelihood{Float64, Nothing, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{UnitRange{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}}}, m::VStP{Float64, GaussianLikelihood{Float64, Nothing, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{UnitRange{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1})
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/hyperparameter/autotuning.jl:12
   [20] update_hyperparameters!
      @ ~/.julia/packages/SimpleTraits/1wYi7/src/SimpleTraits.jl:331 [inlined]
   [21] train!(model::VStP{Float64, GaussianLikelihood{Float64, Nothing, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{UnitRange{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, iterations::Int64; callback::Nothing, convergence::Nothing)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:41
   [22] train!(model::VStP{Float64, GaussianLikelihood{Float64, Nothing, Vector{Float64}}, AnalyticVI{Float64, 1, SubArray{SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{UnitRange{Int64}}, false}, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}}, AugmentedGaussianProcesses.DataContainer{Float64, RowVecs{Float64, Matrix{Float64}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Float64, Vector{Float64}}, 1}, iterations::Int64)
      @ AugmentedGaussianProcesses ~/.julia/packages/AugmentedGaussianProcesses/IguU7/src/training/training.jl:19
   [23] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/models/VStP.jl:23 [inlined]
   [24] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [25] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/models/VStP.jl:8
   [26] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [27] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:57 [inlined]
   [28] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [29] macro expansion
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:56 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] top-level scope
      @ ~/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:13
   [32] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [33] top-level scope
      @ none:6
   [34] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [35] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [36] _start()
      @ Base ./client.jl:485
[ Info: Prior tests
Test Summary:                       | Pass  Error  Broken  Total
AugmentedGaussianProcesses.jl tests | 1195     37      12   1244
  Data test                         |   33                    33
  Functions                         |                      No tests
  Hyperparameters                   |                      No tests
  Inference                         |   41                    41
  Likelihoods (ForwardDiff)         |  618              6    624
  Likelihoods (Zygote)              |  474     36       6    516
    bayesiansvm                     |   33      3             36
      VGP                           |   11      1             12
        AnalyticVI                  |    9      1             10
        NumericalVI                 |    2                     2
      OSVGP                         |    9      1             10
        AnalyticVI                  |    7      1              8
        NumericalVI                 |    2                     2
      SVGP                          |   11      1             12
        AnalyticVI                  |    9      1             10
        NumericalVI                 |    2                     2
      MCGP                          |    2                     2
    classification                  |    6                     6
    event                           |    2                     2
    gaussian                        |   31      2             33
      Likelihood                    |    6                     6
      GP                            |    7      1              8
      VGP                           |    3                     3
      SVGP                          |   13      1             14
        AnalyticVI                  |   11      1             12
      MCGP                          |    2                     2
    heteroscedastic                 |   35      3             38
      VGP                           |   12      1             13
        AnalyticVI                  |   10      1             11
        NumericalVI                 |    2                     2
      OSVGP                         |    9      1             10
        AnalyticVI                  |    7      1              8
        NumericalVI                 |    2                     2
      SVGP                          |   12      1             13
        AnalyticVI                  |   10      1             11
        NumericalVI                 |    2                     2
      MCGP                          |    2                     2
    laplace                         |   57      5       1     63
      VGP                           |   20      2             22
        AnalyticVI                  |   10      1             11
        NumericalVI                 |   10      1             11
      OSVGP                         |    9      1             10
        AnalyticVI                  |    7      1              8
        NumericalVI                 |    2                     2
      SVGP                          |   20      2             22
        AnalyticVI                  |   10      1             11
        NumericalVI                 |   10      1             11
      MCGP                          |    8              1      9
    likelihood                      |    2                     2
    logistic                        |   57      5       1     63
      VGP                           |   20      2             22
        AnalyticVI                  |   10      1             11
        NumericalVI                 |   10      1             11
      OSVGP                         |    9      1             10
        AnalyticVI                  |    7      1              8
        NumericalVI                 |    2                     2
      SVGP                          |   20      2             22
        AnalyticVI                  |   10      1             11
        NumericalVI                 |   10      1             11
      MCGP                          |    8              1      9
    logisticsoftmax                 |   59      5       1     65
      VGP                           |   21      2             23
        AnalyticVI                  |   10      1             11
        NumericalVI                 |   11      1             12
      OSVGP                         |    9      1             10
        AnalyticVI                  |    7      1              8
        NumericalVI                 |    2                     2
      SVGP                          |   21      2             23
        AnalyticVI                  |   10      1             11
        NumericalVI                 |   11      1             12
      MCGP                          |    8              1      9
    multiclass                      |   21                    21
    negativebinomial                |   41      3       1     45
      VGP                           |   12      1             13
        AnalyticVI                  |   10      1             11
        NumericalVI                 |    2                     2
      OSVGP                         |    9      1             10
        AnalyticVI                  |    7      1              8
        NumericalVI                 |    2                     2
      SVGP                          |   12      1             13
        AnalyticVI                  |   10      1             11
        NumericalVI                 |    2                     2
      MCGP                          |    8              1      9
    poisson                         |   41      3       1     45
      VGP                           |   12      1             13
        AnalyticVI                  |   10      1             11
        NumericalVI                 |    2                     2
      OSVGP                         |    9      1             10
        AnalyticVI                  |    7      1              8
        NumericalVI                 |    2                     2
      SVGP                          |   12      1             13
        AnalyticVI                  |   10      1             11
        NumericalVI                 |    2                     2
      MCGP                          |    8              1      9
    regresion                       |    3                     3
    softmax                         |   29      2             31
      VGP                           |   12      1             13
        AnalyticVI                  |    1                     1
        NumericalVI                 |   11      1             12
      OSVGP                         |    3                     3
      SVGP                          |   12      1             13
        AnalyticVI                  |    1                     1
        NumericalVI                 |   11      1             12
      MCGP                          |    2                     2
    studentt                        |   57      5       1     63
      VGP                           |   20      2             22
        AnalyticVI                  |   10      1             11
        NumericalVI                 |   10      1             11
      OSVGP                         |    9      1             10
        AnalyticVI                  |    7      1              8
        NumericalVI                 |    2                     2
      SVGP                          |   20      2             22
        AnalyticVI                  |   10      1             11
        NumericalVI                 |   10      1             11
      MCGP                          |    8              1      9
  Models                            |    5      1              6
    Variational Student-T Processes |    5      1              6
  Prior                             |   24                    24
ERROR: LoadError: Some tests did not pass: 1195 passed, 0 failed, 37 errored, 12 broken.
in expression starting at /home/pkgeval/.julia/packages/AugmentedGaussianProcesses/IguU7/test/runtests.jl:12

PkgEval failed: Package AugmentedGaussianProcesses errored during testing
Stacktrace:
  [1] pkgerror(msg::String)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1651
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:334
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:321
  [5] #test#62
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:71 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:70 [inlined]
  [7] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67
 [11] top-level scope
    @ none:44
 [12] eval
    @ ./boot.jl:360 [inlined]
 [13] eval(x::Expr)
    @ Base.MainInclude ./client.jl:446
 [14] top-level scope
    @ none:1
 [15] eval(m::Module, e::Any)
    @ Core ./boot.jl:360
 [16] exec_options(opts::Base.JLOptions)
    @ Base ./client.jl:261
 [17] _start()
    @ Base ./client.jl:485


################################################################################
# PkgEval teardown: 2020-10-30T04:15:57.539
CPU usage: 815.83s (783.54s user, 33.48s kernel)

Network usage:
- eth0: 21.590 MiB received, 430.729 KiB sent

Raw statistics: {"blkio_stats":{"io_queue_recursive":[],"io_serviced_recursive":[{"major":259,"value":0,"op":"Read","minor":0},{"major":259,"value":9,"op":"Write","minor":0},{"major":259,"value":0,"op":"Sync","minor":0},{"major":259,"value":9,"op":"Async","minor":0},{"major":259,"value":9,"op":"Total","minor":0},{"major":253,"value":0,"op":"Read","minor":2},{"major":253,"value":9,"op":"Write","minor":2},{"major":253,"value":0,"op":"Sync","minor":2},{"major":253,"value":9,"op":"Async","minor":2},{"major":253,"value":9,"op":"Total","minor":2}],"io_time_recursive":[],"sectors_recursive":[],"io_service_bytes_recursive":[{"major":259,"value":0,"op":"Read","minor":0},{"major":259,"value":86016,"op":"Write","minor":0},{"major":259,"value":0,"op":"Sync","minor":0},{"major":259,"value":86016,"op":"Async","minor":0},{"major":259,"value":86016,"op":"Total","minor":0},{"major":253,"value":0,"op":"Read","minor":2},{"major":253,"value":86016,"op":"Write","minor":2},{"major":253,"value":0,"op":"Sync","minor":2},{"major":253,"value":86016,"op":"Async","minor":2},{"major":253,"value":86016,"op":"Total","minor":2}],"io_wait_time_recursive":[],"io_merged_recursive":[],"io_service_time_recursive":[]},"memory_stats":{"usage":310820864,"max_usage":1915912192,"stats":{"hierarchical_memory_limit":9223372036854771712,"pgmajfault":0,"total_rss":191938560,"inactive_file":8192,"inactive_anon":40910848,"total_pgfault":13357238,"total_cache":107110400,"total_rss_huge":0,"total_active_anon":257802240,"total_pgmajfault":0,"pgpgin":9284763,"rss_huge":0,"mapped_file":0,"total_inactive_file":8192,"dirty":0,"total_unevictable":0,"total_dirty":0,"writeback":0,"pgpgout":9211753,"hierarchical_memsw_limit":0,"cache":107110400,"active_file":327680,"pgfault":13357238,"total_mapped_file":0,"total_pgpgout":9211753,"total_writeback":0,"rss":191938560,"unevictable":0,"total_inactive_anon":40910848,"total_pgpgin":9284763,"active_anon":257802240,"total_active_file":327680},"limit":540972998656},"name":"/AugmentedGaussianProcesses-SG3CGMH8","networks":{"eth0":{"rx_bytes":22639127,"rx_packets":7540,"tx_packets":3774,"tx_bytes":441066,"tx_dropped":0,"rx_dropped":32,"tx_errors":0,"rx_errors":0}},"id":"637ec5230dc48d79bca2472ae9f5d3e98c229a1b16d05a91e7cc62b531ec29d0","preread":"0001-01-01T00:00:00Z","storage_stats":{},"precpu_stats":{"throttling_data":{"throttled_periods":0,"throttled_time":0,"periods":0},"cpu_usage":{"usage_in_usermode":0,"usage_in_kernelmode":0,"total_usage":0}},"pids_stats":{"current":38},"num_procs":0,"cpu_stats":{"throttling_data":{"throttled_periods":0,"throttled_time":0,"periods":0},"system_cpu_usage":112762830230000000,"online_cpus":128,"cpu_usage":{"usage_in_usermode":783540000000,"usage_in_kernelmode":33480000000,"total_usage":815831615020,"percpu_usage":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,815827934700,2007190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1673130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},"read":"2020-10-30T04:15:57.894370269Z"}