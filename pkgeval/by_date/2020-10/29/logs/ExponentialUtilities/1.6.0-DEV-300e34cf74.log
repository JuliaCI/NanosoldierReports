################################################################################
# PkgEval set-up: 2020-10-30T05:45:59.556
#

Julia Version 1.6.0-DEV.1380
Commit 300e34cf74 (2020-10-30 02:28 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807



################################################################################
# Installation: 2020-10-30T05:46:00.651
#

   Resolving package versions...
   Installed ExponentialUtilities ─ v1.8.0
   Installed Requires ───────────── v1.1.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [d4d017d3] + ExponentialUtilities v1.8.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [d4d017d3] + ExponentialUtilities v1.8.0
  [ae029012] + Requires v1.1.0
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [de0858da] + Printf
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [2f01184e] + SparseArrays
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode


################################################################################
# Testing: 2020-10-30T05:48:12.283
#


     Testing ExponentialUtilities
Status `/tmp/jl_LL2gNY/Project.toml`
  [d4d017d3] ExponentialUtilities v1.8.0
  [f6369f11] ForwardDiff v0.10.12
  [ae029012] Requires v1.1.0
  [1bc83da4] SafeTestsets v0.0.1
  [37e2e46d] LinearAlgebra
  [de0858da] Printf
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_LL2gNY/Manifest.toml`
  [bbf7d656] CommonSubexpressions v0.3.0
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [d4d017d3] ExponentialUtilities v1.8.0
  [f6369f11] ForwardDiff v0.10.12
  [692b3bcd] JLLWrappers v1.1.3
  [1914dd2f] MacroTools v0.5.6
  [77ba4419] NaNMath v0.3.4
  [ae029012] Requires v1.1.0
  [1bc83da4] SafeTestsets v0.0.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.5
  [e66e0078] CompilerSupportLibraries_jll v0.3.4+0
  [efe28fd5] OpenSpecFun_jll v0.5.3+4
  [0dad84c5] ArgTools
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [f43a241f] Downloads
  [b77e0a4c] InteractiveUtils
  [b27032c2] LibCURL
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
  [deac9b47] LibCURL_jll
  [14a3606d] MozillaCACerts_jll
     Testing Running tests...
Test Summary: | Pass  Total
Exp           |    2      2
exp_generic: Error During Test at /home/pkgeval/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:21
  Test threw exception
  Expression: exp(M) ≈ exp_generic(M)
  MethodError: no method matching length(::UniformScaling{Float64})
  Closest candidates are:
    length(!Matched::Union{Base.KeySet, Base.ValueIterator}) at abstractdict.jl:54
    length(!Matched::Union{Adjoint{T, var"#s6"} where var"#s6"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, Diagonal{T, var"#s13"} where var"#s13"<:(StaticArrays.StaticVector{var"#s14", T} where var"#s14"), Hermitian{T, var"#s10"} where var"#s10"<:(StaticArrays.StaticMatrix{var"#s11", var"#s12", T} where var"#s12" where var"#s11"), LowerTriangular{T, var"#s18"} where var"#s18"<:(StaticArrays.StaticMatrix{var"#s19", var"#s20", T} where var"#s20" where var"#s19"), Symmetric{T, var"#s7"} where var"#s7"<:(StaticArrays.StaticMatrix{var"#s8", var"#s9", T} where var"#s9" where var"#s8"), Transpose{T, var"#s1"} where var"#s1"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, UnitLowerTriangular{T, var"#s24"} where var"#s24"<:(StaticArrays.StaticMatrix{var"#s25", var"#s26", T} where var"#s26" where var"#s25"), UnitUpperTriangular{T, var"#s21"} where var"#s21"<:(StaticArrays.StaticMatrix{var"#s22", var"#s23", T} where var"#s23" where var"#s22"), UpperTriangular{T, var"#s15"} where var"#s15"<:(StaticArrays.StaticMatrix{var"#s16", var"#s17", T} where var"#s17" where var"#s16"), StaticArrays.StaticVector{var"#s26", T} where var"#s26", StaticArrays.StaticMatrix{var"#s5", var"#s4", T} where var"#s4" where var"#s5", StaticArrays.StaticArray{var"#s26", T, N} where N where var"#s26"<:Tuple} where T) at /home/pkgeval/.julia/packages/StaticArrays/LJQEe/src/abstractarray.jl:1
    length(!Matched::Union{Adjoint{T, S}, Transpose{T, S}} where S where T) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:194
    ...
  Stacktrace:
    [1] _similar_for(c::UnitRange{Int64}, #unused#::Type{Float64}, itr::UniformScaling{Float64}, #unused#::Base.HasLength)
      @ Base ./array.jl:575
    [2] _collect(cont::UnitRange{Int64}, itr::UniformScaling{Float64}, #unused#::Base.HasEltype, isz::Base.HasLength)
      @ Base ./array.jl:608
    [3] collect(itr::UniformScaling{Float64})
      @ Base ./array.jl:602
    [4] broadcastable(x::UniformScaling{Float64})
      @ Base.Broadcast ./broadcast.jl:682
    [5] broadcasted
      @ ./broadcast.jl:1303 [inlined]
    [6] muladd(A::Matrix{Float64}, B::Matrix{Float64}, z::UniformScaling{Float64})
      @ LinearAlgebra /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/matmul.jl:214
    [7] macro expansion
      @ ./math.jl:123 [inlined]
    [8] evalpoly(x::Matrix{Float64}, p::NTuple{14, UniformScaling{Float64}})
      @ Base.Math ./math.jl:122
    [9] exp_pade_p(x::Matrix{Float64}, #unused#::Val{13}, #unused#::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:128
   [10] exp_generic(x::Matrix{Float64}, vk::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:123
   [11] exp_generic(x::Matrix{Float64}, vk::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:121
   [12] exp_generic(x::Matrix{Float64})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:118
   [13] macro expansion
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:21 [inlined]
   [14] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [15] top-level scope
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:19
exp_generic: Error During Test at /home/pkgeval/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:24
  Test threw exception
  Expression: exp(M′) ≈ exp_generic(M′)
  MethodError: no method matching length(::UniformScaling{Float64})
  Closest candidates are:
    length(!Matched::Union{Base.KeySet, Base.ValueIterator}) at abstractdict.jl:54
    length(!Matched::Union{Adjoint{T, var"#s6"} where var"#s6"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, Diagonal{T, var"#s13"} where var"#s13"<:(StaticArrays.StaticVector{var"#s14", T} where var"#s14"), Hermitian{T, var"#s10"} where var"#s10"<:(StaticArrays.StaticMatrix{var"#s11", var"#s12", T} where var"#s12" where var"#s11"), LowerTriangular{T, var"#s18"} where var"#s18"<:(StaticArrays.StaticMatrix{var"#s19", var"#s20", T} where var"#s20" where var"#s19"), Symmetric{T, var"#s7"} where var"#s7"<:(StaticArrays.StaticMatrix{var"#s8", var"#s9", T} where var"#s9" where var"#s8"), Transpose{T, var"#s1"} where var"#s1"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, UnitLowerTriangular{T, var"#s24"} where var"#s24"<:(StaticArrays.StaticMatrix{var"#s25", var"#s26", T} where var"#s26" where var"#s25"), UnitUpperTriangular{T, var"#s21"} where var"#s21"<:(StaticArrays.StaticMatrix{var"#s22", var"#s23", T} where var"#s23" where var"#s22"), UpperTriangular{T, var"#s15"} where var"#s15"<:(StaticArrays.StaticMatrix{var"#s16", var"#s17", T} where var"#s17" where var"#s16"), StaticArrays.StaticVector{var"#s26", T} where var"#s26", StaticArrays.StaticMatrix{var"#s5", var"#s4", T} where var"#s4" where var"#s5", StaticArrays.StaticArray{var"#s26", T, N} where N where var"#s26"<:Tuple} where T) at /home/pkgeval/.julia/packages/StaticArrays/LJQEe/src/abstractarray.jl:1
    length(!Matched::Union{Adjoint{T, S}, Transpose{T, S}} where S where T) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:194
    ...
  Stacktrace:
    [1] _similar_for(c::UnitRange{Int64}, #unused#::Type{Float64}, itr::UniformScaling{Float64}, #unused#::Base.HasLength)
      @ Base ./array.jl:575
    [2] _collect(cont::UnitRange{Int64}, itr::UniformScaling{Float64}, #unused#::Base.HasEltype, isz::Base.HasLength)
      @ Base ./array.jl:608
    [3] collect(itr::UniformScaling{Float64})
      @ Base ./array.jl:602
    [4] broadcastable(x::UniformScaling{Float64})
      @ Base.Broadcast ./broadcast.jl:682
    [5] broadcasted
      @ ./broadcast.jl:1303 [inlined]
    [6] muladd(A::Matrix{Float64}, B::Matrix{Float64}, z::UniformScaling{Float64})
      @ LinearAlgebra /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/matmul.jl:214
    [7] macro expansion
      @ ./math.jl:123 [inlined]
    [8] evalpoly(x::Matrix{Float64}, p::NTuple{14, UniformScaling{Float64}})
      @ Base.Math ./math.jl:122
    [9] exp_pade_p(x::Matrix{Float64}, #unused#::Val{13}, #unused#::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:128
   [10] exp_generic(x::Matrix{Float64}, vk::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:123
   [11] exp_generic(x::Matrix{Float64})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:118
   [12] macro expansion
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:24 [inlined]
   [13] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [14] top-level scope
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:19
exp_generic: Error During Test at /home/pkgeval/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:27
  Test threw exception
  Expression: exp(N) ≈ exp_generic(N)
  MethodError: no method matching length(::UniformScaling{Float64})
  Closest candidates are:
    length(!Matched::Union{Base.KeySet, Base.ValueIterator}) at abstractdict.jl:54
    length(!Matched::Union{Adjoint{T, var"#s6"} where var"#s6"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, Diagonal{T, var"#s13"} where var"#s13"<:(StaticArrays.StaticVector{var"#s14", T} where var"#s14"), Hermitian{T, var"#s10"} where var"#s10"<:(StaticArrays.StaticMatrix{var"#s11", var"#s12", T} where var"#s12" where var"#s11"), LowerTriangular{T, var"#s18"} where var"#s18"<:(StaticArrays.StaticMatrix{var"#s19", var"#s20", T} where var"#s20" where var"#s19"), Symmetric{T, var"#s7"} where var"#s7"<:(StaticArrays.StaticMatrix{var"#s8", var"#s9", T} where var"#s9" where var"#s8"), Transpose{T, var"#s1"} where var"#s1"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, UnitLowerTriangular{T, var"#s24"} where var"#s24"<:(StaticArrays.StaticMatrix{var"#s25", var"#s26", T} where var"#s26" where var"#s25"), UnitUpperTriangular{T, var"#s21"} where var"#s21"<:(StaticArrays.StaticMatrix{var"#s22", var"#s23", T} where var"#s23" where var"#s22"), UpperTriangular{T, var"#s15"} where var"#s15"<:(StaticArrays.StaticMatrix{var"#s16", var"#s17", T} where var"#s17" where var"#s16"), StaticArrays.StaticVector{var"#s26", T} where var"#s26", StaticArrays.StaticMatrix{var"#s5", var"#s4", T} where var"#s4" where var"#s5", StaticArrays.StaticArray{var"#s26", T, N} where N where var"#s26"<:Tuple} where T) at /home/pkgeval/.julia/packages/StaticArrays/LJQEe/src/abstractarray.jl:1
    length(!Matched::Union{Adjoint{T, S}, Transpose{T, S}} where S where T) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:194
    ...
  Stacktrace:
    [1] _similar_for(c::UnitRange{Int64}, #unused#::Type{Float64}, itr::UniformScaling{Float64}, #unused#::Base.HasLength)
      @ Base ./array.jl:575
    [2] _collect(cont::UnitRange{Int64}, itr::UniformScaling{Float64}, #unused#::Base.HasEltype, isz::Base.HasLength)
      @ Base ./array.jl:608
    [3] collect(itr::UniformScaling{Float64})
      @ Base ./array.jl:602
    [4] broadcastable(x::UniformScaling{Float64})
      @ Base.Broadcast ./broadcast.jl:682
    [5] broadcasted
      @ ./broadcast.jl:1303 [inlined]
    [6] muladd(A::Matrix{Float64}, B::Matrix{Float64}, z::UniformScaling{Float64})
      @ LinearAlgebra /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/matmul.jl:214
    [7] macro expansion
      @ ./math.jl:123 [inlined]
    [8] evalpoly(x::Matrix{Float64}, p::NTuple{14, UniformScaling{Float64}})
      @ Base.Math ./math.jl:122
    [9] exp_pade_p(x::Matrix{Float64}, #unused#::Val{13}, #unused#::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:128
   [10] exp_generic(x::Matrix{Float64}, vk::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:123
   [11] exp_generic(x::Matrix{Float64}, vk::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:121
   [12] exp_generic(x::Matrix{Float64})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:118
   [13] macro expansion
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:27 [inlined]
   [14] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [15] top-level scope
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:19
exp_generic: Error During Test at /home/pkgeval/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:21
  Test threw exception
  Expression: exp(M) ≈ exp_generic(M)
  MethodError: no method matching length(::UniformScaling{Float64})
  Closest candidates are:
    length(!Matched::Union{Base.KeySet, Base.ValueIterator}) at abstractdict.jl:54
    length(!Matched::Union{Adjoint{T, var"#s6"} where var"#s6"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, Diagonal{T, var"#s13"} where var"#s13"<:(StaticArrays.StaticVector{var"#s14", T} where var"#s14"), Hermitian{T, var"#s10"} where var"#s10"<:(StaticArrays.StaticMatrix{var"#s11", var"#s12", T} where var"#s12" where var"#s11"), LowerTriangular{T, var"#s18"} where var"#s18"<:(StaticArrays.StaticMatrix{var"#s19", var"#s20", T} where var"#s20" where var"#s19"), Symmetric{T, var"#s7"} where var"#s7"<:(StaticArrays.StaticMatrix{var"#s8", var"#s9", T} where var"#s9" where var"#s8"), Transpose{T, var"#s1"} where var"#s1"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, UnitLowerTriangular{T, var"#s24"} where var"#s24"<:(StaticArrays.StaticMatrix{var"#s25", var"#s26", T} where var"#s26" where var"#s25"), UnitUpperTriangular{T, var"#s21"} where var"#s21"<:(StaticArrays.StaticMatrix{var"#s22", var"#s23", T} where var"#s23" where var"#s22"), UpperTriangular{T, var"#s15"} where var"#s15"<:(StaticArrays.StaticMatrix{var"#s16", var"#s17", T} where var"#s17" where var"#s16"), StaticArrays.StaticVector{var"#s26", T} where var"#s26", StaticArrays.StaticMatrix{var"#s5", var"#s4", T} where var"#s4" where var"#s5", StaticArrays.StaticArray{var"#s26", T, N} where N where var"#s26"<:Tuple} where T) at /home/pkgeval/.julia/packages/StaticArrays/LJQEe/src/abstractarray.jl:1
    length(!Matched::Union{Adjoint{T, S}, Transpose{T, S}} where S where T) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:194
    ...
  Stacktrace:
    [1] _similar_for(c::UnitRange{Int64}, #unused#::Type{Float64}, itr::UniformScaling{Float64}, #unused#::Base.HasLength)
      @ Base ./array.jl:575
    [2] _collect(cont::UnitRange{Int64}, itr::UniformScaling{Float64}, #unused#::Base.HasEltype, isz::Base.HasLength)
      @ Base ./array.jl:608
    [3] collect(itr::UniformScaling{Float64})
      @ Base ./array.jl:602
    [4] broadcastable(x::UniformScaling{Float64})
      @ Base.Broadcast ./broadcast.jl:682
    [5] broadcasted
      @ ./broadcast.jl:1303 [inlined]
    [6] muladd(A::Matrix{Float64}, B::Matrix{Float64}, z::UniformScaling{Float64})
      @ LinearAlgebra /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/matmul.jl:214
    [7] macro expansion
      @ ./math.jl:123 [inlined]
    [8] evalpoly(x::Matrix{Float64}, p::NTuple{14, UniformScaling{Float64}})
      @ Base.Math ./math.jl:122
    [9] exp_pade_p(x::Matrix{Float64}, #unused#::Val{13}, #unused#::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:128
   [10] exp_generic(x::Matrix{Float64}, vk::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:123
   [11] exp_generic(x::Matrix{Float64}, vk::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:121
   [12] exp_generic(x::Matrix{Float64})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:118
   [13] macro expansion
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:21 [inlined]
   [14] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [15] top-level scope
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:19
exp_generic: Error During Test at /home/pkgeval/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:24
  Test threw exception
  Expression: exp(M′) ≈ exp_generic(M′)
  MethodError: no method matching length(::UniformScaling{Float64})
  Closest candidates are:
    length(!Matched::Union{Base.KeySet, Base.ValueIterator}) at abstractdict.jl:54
    length(!Matched::Union{Adjoint{T, var"#s6"} where var"#s6"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, Diagonal{T, var"#s13"} where var"#s13"<:(StaticArrays.StaticVector{var"#s14", T} where var"#s14"), Hermitian{T, var"#s10"} where var"#s10"<:(StaticArrays.StaticMatrix{var"#s11", var"#s12", T} where var"#s12" where var"#s11"), LowerTriangular{T, var"#s18"} where var"#s18"<:(StaticArrays.StaticMatrix{var"#s19", var"#s20", T} where var"#s20" where var"#s19"), Symmetric{T, var"#s7"} where var"#s7"<:(StaticArrays.StaticMatrix{var"#s8", var"#s9", T} where var"#s9" where var"#s8"), Transpose{T, var"#s1"} where var"#s1"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, UnitLowerTriangular{T, var"#s24"} where var"#s24"<:(StaticArrays.StaticMatrix{var"#s25", var"#s26", T} where var"#s26" where var"#s25"), UnitUpperTriangular{T, var"#s21"} where var"#s21"<:(StaticArrays.StaticMatrix{var"#s22", var"#s23", T} where var"#s23" where var"#s22"), UpperTriangular{T, var"#s15"} where var"#s15"<:(StaticArrays.StaticMatrix{var"#s16", var"#s17", T} where var"#s17" where var"#s16"), StaticArrays.StaticVector{var"#s26", T} where var"#s26", StaticArrays.StaticMatrix{var"#s5", var"#s4", T} where var"#s4" where var"#s5", StaticArrays.StaticArray{var"#s26", T, N} where N where var"#s26"<:Tuple} where T) at /home/pkgeval/.julia/packages/StaticArrays/LJQEe/src/abstractarray.jl:1
    length(!Matched::Union{Adjoint{T, S}, Transpose{T, S}} where S where T) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:194
    ...
  Stacktrace:
    [1] _similar_for(c::UnitRange{Int64}, #unused#::Type{Float64}, itr::UniformScaling{Float64}, #unused#::Base.HasLength)
      @ Base ./array.jl:575
    [2] _collect(cont::UnitRange{Int64}, itr::UniformScaling{Float64}, #unused#::Base.HasEltype, isz::Base.HasLength)
      @ Base ./array.jl:608
    [3] collect(itr::UniformScaling{Float64})
      @ Base ./array.jl:602
    [4] broadcastable(x::UniformScaling{Float64})
      @ Base.Broadcast ./broadcast.jl:682
    [5] broadcasted
      @ ./broadcast.jl:1303 [inlined]
    [6] muladd(A::Matrix{Float64}, B::Matrix{Float64}, z::UniformScaling{Float64})
      @ LinearAlgebra /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/matmul.jl:214
    [7] macro expansion
      @ ./math.jl:123 [inlined]
    [8] evalpoly(x::Matrix{Float64}, p::NTuple{14, UniformScaling{Float64}})
      @ Base.Math ./math.jl:122
    [9] exp_pade_p(x::Matrix{Float64}, #unused#::Val{13}, #unused#::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:128
   [10] exp_generic(x::Matrix{Float64}, vk::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:123
   [11] exp_generic(x::Matrix{Float64})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:118
   [12] macro expansion
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:24 [inlined]
   [13] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [14] top-level scope
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:19
exp_generic: Error During Test at /home/pkgeval/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:27
  Test threw exception
  Expression: exp(N) ≈ exp_generic(N)
  MethodError: no method matching length(::UniformScaling{Float64})
  Closest candidates are:
    length(!Matched::Union{Base.KeySet, Base.ValueIterator}) at abstractdict.jl:54
    length(!Matched::Union{Adjoint{T, var"#s6"} where var"#s6"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, Diagonal{T, var"#s13"} where var"#s13"<:(StaticArrays.StaticVector{var"#s14", T} where var"#s14"), Hermitian{T, var"#s10"} where var"#s10"<:(StaticArrays.StaticMatrix{var"#s11", var"#s12", T} where var"#s12" where var"#s11"), LowerTriangular{T, var"#s18"} where var"#s18"<:(StaticArrays.StaticMatrix{var"#s19", var"#s20", T} where var"#s20" where var"#s19"), Symmetric{T, var"#s7"} where var"#s7"<:(StaticArrays.StaticMatrix{var"#s8", var"#s9", T} where var"#s9" where var"#s8"), Transpose{T, var"#s1"} where var"#s1"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, UnitLowerTriangular{T, var"#s24"} where var"#s24"<:(StaticArrays.StaticMatrix{var"#s25", var"#s26", T} where var"#s26" where var"#s25"), UnitUpperTriangular{T, var"#s21"} where var"#s21"<:(StaticArrays.StaticMatrix{var"#s22", var"#s23", T} where var"#s23" where var"#s22"), UpperTriangular{T, var"#s15"} where var"#s15"<:(StaticArrays.StaticMatrix{var"#s16", var"#s17", T} where var"#s17" where var"#s16"), StaticArrays.StaticVector{var"#s26", T} where var"#s26", StaticArrays.StaticMatrix{var"#s5", var"#s4", T} where var"#s4" where var"#s5", StaticArrays.StaticArray{var"#s26", T, N} where N where var"#s26"<:Tuple} where T) at /home/pkgeval/.julia/packages/StaticArrays/LJQEe/src/abstractarray.jl:1
    length(!Matched::Union{Adjoint{T, S}, Transpose{T, S}} where S where T) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:194
    ...
  Stacktrace:
    [1] _similar_for(c::UnitRange{Int64}, #unused#::Type{Float64}, itr::UniformScaling{Float64}, #unused#::Base.HasLength)
      @ Base ./array.jl:575
    [2] _collect(cont::UnitRange{Int64}, itr::UniformScaling{Float64}, #unused#::Base.HasEltype, isz::Base.HasLength)
      @ Base ./array.jl:608
    [3] collect(itr::UniformScaling{Float64})
      @ Base ./array.jl:602
    [4] broadcastable(x::UniformScaling{Float64})
      @ Base.Broadcast ./broadcast.jl:682
    [5] broadcasted
      @ ./broadcast.jl:1303 [inlined]
    [6] muladd(A::Matrix{Float64}, B::Matrix{Float64}, z::UniformScaling{Float64})
      @ LinearAlgebra /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/matmul.jl:214
    [7] macro expansion
      @ ./math.jl:123 [inlined]
    [8] evalpoly(x::Matrix{Float64}, p::NTuple{14, UniformScaling{Float64}})
      @ Base.Math ./math.jl:122
    [9] exp_pade_p(x::Matrix{Float64}, #unused#::Val{13}, #unused#::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:128
   [10] exp_generic(x::Matrix{Float64}, vk::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:123
   [11] exp_generic(x::Matrix{Float64}, vk::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:121
   [12] exp_generic(x::Matrix{Float64})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:118
   [13] macro expansion
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:27 [inlined]
   [14] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [15] top-level scope
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:19
exp_generic: Error During Test at /home/pkgeval/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:21
  Test threw exception
  Expression: exp(M) ≈ exp_generic(M)
  MethodError: no method matching length(::UniformScaling{Float64})
  Closest candidates are:
    length(!Matched::Union{Base.KeySet, Base.ValueIterator}) at abstractdict.jl:54
    length(!Matched::Union{Adjoint{T, var"#s6"} where var"#s6"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, Diagonal{T, var"#s13"} where var"#s13"<:(StaticArrays.StaticVector{var"#s14", T} where var"#s14"), Hermitian{T, var"#s10"} where var"#s10"<:(StaticArrays.StaticMatrix{var"#s11", var"#s12", T} where var"#s12" where var"#s11"), LowerTriangular{T, var"#s18"} where var"#s18"<:(StaticArrays.StaticMatrix{var"#s19", var"#s20", T} where var"#s20" where var"#s19"), Symmetric{T, var"#s7"} where var"#s7"<:(StaticArrays.StaticMatrix{var"#s8", var"#s9", T} where var"#s9" where var"#s8"), Transpose{T, var"#s1"} where var"#s1"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, UnitLowerTriangular{T, var"#s24"} where var"#s24"<:(StaticArrays.StaticMatrix{var"#s25", var"#s26", T} where var"#s26" where var"#s25"), UnitUpperTriangular{T, var"#s21"} where var"#s21"<:(StaticArrays.StaticMatrix{var"#s22", var"#s23", T} where var"#s23" where var"#s22"), UpperTriangular{T, var"#s15"} where var"#s15"<:(StaticArrays.StaticMatrix{var"#s16", var"#s17", T} where var"#s17" where var"#s16"), StaticArrays.StaticVector{var"#s26", T} where var"#s26", StaticArrays.StaticMatrix{var"#s5", var"#s4", T} where var"#s4" where var"#s5", StaticArrays.StaticArray{var"#s26", T, N} where N where var"#s26"<:Tuple} where T) at /home/pkgeval/.julia/packages/StaticArrays/LJQEe/src/abstractarray.jl:1
    length(!Matched::Union{Adjoint{T, S}, Transpose{T, S}} where S where T) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:194
    ...
  Stacktrace:
    [1] _similar_for(c::UnitRange{Int64}, #unused#::Type{Float64}, itr::UniformScaling{Float64}, #unused#::Base.HasLength)
      @ Base ./array.jl:575
    [2] _collect(cont::UnitRange{Int64}, itr::UniformScaling{Float64}, #unused#::Base.HasEltype, isz::Base.HasLength)
      @ Base ./array.jl:608
    [3] collect(itr::UniformScaling{Float64})
      @ Base ./array.jl:602
    [4] broadcastable(x::UniformScaling{Float64})
      @ Base.Broadcast ./broadcast.jl:682
    [5] broadcasted
      @ ./broadcast.jl:1303 [inlined]
    [6] muladd(A::Matrix{Float64}, B::Matrix{Float64}, z::UniformScaling{Float64})
      @ LinearAlgebra /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/matmul.jl:214
    [7] macro expansion
      @ ./math.jl:123 [inlined]
    [8] evalpoly(x::Matrix{Float64}, p::NTuple{14, UniformScaling{Float64}})
      @ Base.Math ./math.jl:122
    [9] exp_pade_p(x::Matrix{Float64}, #unused#::Val{13}, #unused#::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:128
   [10] exp_generic(x::Matrix{Float64}, vk::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:123
   [11] exp_generic(x::Matrix{Float64}, vk::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:121
   [12] exp_generic(x::Matrix{Float64})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:118
   [13] macro expansion
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:21 [inlined]
   [14] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [15] top-level scope
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:19
exp_generic: Error During Test at /home/pkgeval/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:24
  Test threw exception
  Expression: exp(M′) ≈ exp_generic(M′)
  MethodError: no method matching length(::UniformScaling{Float64})
  Closest candidates are:
    length(!Matched::Union{Base.KeySet, Base.ValueIterator}) at abstractdict.jl:54
    length(!Matched::Union{Adjoint{T, var"#s6"} where var"#s6"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, Diagonal{T, var"#s13"} where var"#s13"<:(StaticArrays.StaticVector{var"#s14", T} where var"#s14"), Hermitian{T, var"#s10"} where var"#s10"<:(StaticArrays.StaticMatrix{var"#s11", var"#s12", T} where var"#s12" where var"#s11"), LowerTriangular{T, var"#s18"} where var"#s18"<:(StaticArrays.StaticMatrix{var"#s19", var"#s20", T} where var"#s20" where var"#s19"), Symmetric{T, var"#s7"} where var"#s7"<:(StaticArrays.StaticMatrix{var"#s8", var"#s9", T} where var"#s9" where var"#s8"), Transpose{T, var"#s1"} where var"#s1"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, UnitLowerTriangular{T, var"#s24"} where var"#s24"<:(StaticArrays.StaticMatrix{var"#s25", var"#s26", T} where var"#s26" where var"#s25"), UnitUpperTriangular{T, var"#s21"} where var"#s21"<:(StaticArrays.StaticMatrix{var"#s22", var"#s23", T} where var"#s23" where var"#s22"), UpperTriangular{T, var"#s15"} where var"#s15"<:(StaticArrays.StaticMatrix{var"#s16", var"#s17", T} where var"#s17" where var"#s16"), StaticArrays.StaticVector{var"#s26", T} where var"#s26", StaticArrays.StaticMatrix{var"#s5", var"#s4", T} where var"#s4" where var"#s5", StaticArrays.StaticArray{var"#s26", T, N} where N where var"#s26"<:Tuple} where T) at /home/pkgeval/.julia/packages/StaticArrays/LJQEe/src/abstractarray.jl:1
    length(!Matched::Union{Adjoint{T, S}, Transpose{T, S}} where S where T) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:194
    ...
  Stacktrace:
    [1] _similar_for(c::UnitRange{Int64}, #unused#::Type{Float64}, itr::UniformScaling{Float64}, #unused#::Base.HasLength)
      @ Base ./array.jl:575
    [2] _collect(cont::UnitRange{Int64}, itr::UniformScaling{Float64}, #unused#::Base.HasEltype, isz::Base.HasLength)
      @ Base ./array.jl:608
    [3] collect(itr::UniformScaling{Float64})
      @ Base ./array.jl:602
    [4] broadcastable(x::UniformScaling{Float64})
      @ Base.Broadcast ./broadcast.jl:682
    [5] broadcasted
      @ ./broadcast.jl:1303 [inlined]
    [6] muladd(A::Matrix{Float64}, B::Matrix{Float64}, z::UniformScaling{Float64})
      @ LinearAlgebra /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/matmul.jl:214
    [7] macro expansion
      @ ./math.jl:123 [inlined]
    [8] evalpoly(x::Matrix{Float64}, p::NTuple{14, UniformScaling{Float64}})
      @ Base.Math ./math.jl:122
    [9] exp_pade_p(x::Matrix{Float64}, #unused#::Val{13}, #unused#::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:128
   [10] exp_generic(x::Matrix{Float64}, vk::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:123
   [11] exp_generic(x::Matrix{Float64})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:118
   [12] macro expansion
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:24 [inlined]
   [13] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [14] top-level scope
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:19
exp_generic: Error During Test at /home/pkgeval/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:27
  Test threw exception
  Expression: exp(N) ≈ exp_generic(N)
  MethodError: no method matching length(::UniformScaling{Float64})
  Closest candidates are:
    length(!Matched::Union{Base.KeySet, Base.ValueIterator}) at abstractdict.jl:54
    length(!Matched::Union{Adjoint{T, var"#s6"} where var"#s6"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, Diagonal{T, var"#s13"} where var"#s13"<:(StaticArrays.StaticVector{var"#s14", T} where var"#s14"), Hermitian{T, var"#s10"} where var"#s10"<:(StaticArrays.StaticMatrix{var"#s11", var"#s12", T} where var"#s12" where var"#s11"), LowerTriangular{T, var"#s18"} where var"#s18"<:(StaticArrays.StaticMatrix{var"#s19", var"#s20", T} where var"#s20" where var"#s19"), Symmetric{T, var"#s7"} where var"#s7"<:(StaticArrays.StaticMatrix{var"#s8", var"#s9", T} where var"#s9" where var"#s8"), Transpose{T, var"#s1"} where var"#s1"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, UnitLowerTriangular{T, var"#s24"} where var"#s24"<:(StaticArrays.StaticMatrix{var"#s25", var"#s26", T} where var"#s26" where var"#s25"), UnitUpperTriangular{T, var"#s21"} where var"#s21"<:(StaticArrays.StaticMatrix{var"#s22", var"#s23", T} where var"#s23" where var"#s22"), UpperTriangular{T, var"#s15"} where var"#s15"<:(StaticArrays.StaticMatrix{var"#s16", var"#s17", T} where var"#s17" where var"#s16"), StaticArrays.StaticVector{var"#s26", T} where var"#s26", StaticArrays.StaticMatrix{var"#s5", var"#s4", T} where var"#s4" where var"#s5", StaticArrays.StaticArray{var"#s26", T, N} where N where var"#s26"<:Tuple} where T) at /home/pkgeval/.julia/packages/StaticArrays/LJQEe/src/abstractarray.jl:1
    length(!Matched::Union{Adjoint{T, S}, Transpose{T, S}} where S where T) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:194
    ...
  Stacktrace:
    [1] _similar_for(c::UnitRange{Int64}, #unused#::Type{Float64}, itr::UniformScaling{Float64}, #unused#::Base.HasLength)
      @ Base ./array.jl:575
    [2] _collect(cont::UnitRange{Int64}, itr::UniformScaling{Float64}, #unused#::Base.HasEltype, isz::Base.HasLength)
      @ Base ./array.jl:608
    [3] collect(itr::UniformScaling{Float64})
      @ Base ./array.jl:602
    [4] broadcastable(x::UniformScaling{Float64})
      @ Base.Broadcast ./broadcast.jl:682
    [5] broadcasted
      @ ./broadcast.jl:1303 [inlined]
    [6] muladd(A::Matrix{Float64}, B::Matrix{Float64}, z::UniformScaling{Float64})
      @ LinearAlgebra /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/matmul.jl:214
    [7] macro expansion
      @ ./math.jl:123 [inlined]
    [8] evalpoly(x::Matrix{Float64}, p::NTuple{14, UniformScaling{Float64}})
      @ Base.Math ./math.jl:122
    [9] exp_pade_p(x::Matrix{Float64}, #unused#::Val{13}, #unused#::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:128
   [10] exp_generic(x::Matrix{Float64}, vk::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:123
   [11] exp_generic(x::Matrix{Float64}, vk::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:121
   [12] exp_generic(x::Matrix{Float64})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:118
   [13] macro expansion
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:27 [inlined]
   [14] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [15] top-level scope
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:19
exp_generic: Error During Test at /home/pkgeval/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:21
  Test threw exception
  Expression: exp(M) ≈ exp_generic(M)
  MethodError: no method matching length(::UniformScaling{Float64})
  Closest candidates are:
    length(!Matched::Union{Base.KeySet, Base.ValueIterator}) at abstractdict.jl:54
    length(!Matched::Union{Adjoint{T, var"#s6"} where var"#s6"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, Diagonal{T, var"#s13"} where var"#s13"<:(StaticArrays.StaticVector{var"#s14", T} where var"#s14"), Hermitian{T, var"#s10"} where var"#s10"<:(StaticArrays.StaticMatrix{var"#s11", var"#s12", T} where var"#s12" where var"#s11"), LowerTriangular{T, var"#s18"} where var"#s18"<:(StaticArrays.StaticMatrix{var"#s19", var"#s20", T} where var"#s20" where var"#s19"), Symmetric{T, var"#s7"} where var"#s7"<:(StaticArrays.StaticMatrix{var"#s8", var"#s9", T} where var"#s9" where var"#s8"), Transpose{T, var"#s1"} where var"#s1"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, UnitLowerTriangular{T, var"#s24"} where var"#s24"<:(StaticArrays.StaticMatrix{var"#s25", var"#s26", T} where var"#s26" where var"#s25"), UnitUpperTriangular{T, var"#s21"} where var"#s21"<:(StaticArrays.StaticMatrix{var"#s22", var"#s23", T} where var"#s23" where var"#s22"), UpperTriangular{T, var"#s15"} where var"#s15"<:(StaticArrays.StaticMatrix{var"#s16", var"#s17", T} where var"#s17" where var"#s16"), StaticArrays.StaticVector{var"#s26", T} where var"#s26", StaticArrays.StaticMatrix{var"#s5", var"#s4", T} where var"#s4" where var"#s5", StaticArrays.StaticArray{var"#s26", T, N} where N where var"#s26"<:Tuple} where T) at /home/pkgeval/.julia/packages/StaticArrays/LJQEe/src/abstractarray.jl:1
    length(!Matched::Union{Adjoint{T, S}, Transpose{T, S}} where S where T) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:194
    ...
  Stacktrace:
    [1] _similar_for(c::UnitRange{Int64}, #unused#::Type{Float64}, itr::UniformScaling{Float64}, #unused#::Base.HasLength)
      @ Base ./array.jl:575
    [2] _collect(cont::UnitRange{Int64}, itr::UniformScaling{Float64}, #unused#::Base.HasEltype, isz::Base.HasLength)
      @ Base ./array.jl:608
    [3] collect(itr::UniformScaling{Float64})
      @ Base ./array.jl:602
    [4] broadcastable(x::UniformScaling{Float64})
      @ Base.Broadcast ./broadcast.jl:682
    [5] broadcasted
      @ ./broadcast.jl:1303 [inlined]
    [6] muladd(A::Matrix{Float64}, B::Matrix{Float64}, z::UniformScaling{Float64})
      @ LinearAlgebra /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/matmul.jl:214
    [7] macro expansion
      @ ./math.jl:123 [inlined]
    [8] evalpoly(x::Matrix{Float64}, p::NTuple{14, UniformScaling{Float64}})
      @ Base.Math ./math.jl:122
    [9] exp_pade_p(x::Matrix{Float64}, #unused#::Val{13}, #unused#::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:128
   [10] exp_generic(x::Matrix{Float64}, vk::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:123
   [11] exp_generic(x::Matrix{Float64}, vk::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:121
   [12] exp_generic(x::Matrix{Float64})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:118
   [13] macro expansion
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:21 [inlined]
   [14] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [15] top-level scope
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:19
exp_generic: Error During Test at /home/pkgeval/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:24
  Test threw exception
  Expression: exp(M′) ≈ exp_generic(M′)
  MethodError: no method matching length(::UniformScaling{Float64})
  Closest candidates are:
    length(!Matched::Union{Base.KeySet, Base.ValueIterator}) at abstractdict.jl:54
    length(!Matched::Union{Adjoint{T, var"#s6"} where var"#s6"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, Diagonal{T, var"#s13"} where var"#s13"<:(StaticArrays.StaticVector{var"#s14", T} where var"#s14"), Hermitian{T, var"#s10"} where var"#s10"<:(StaticArrays.StaticMatrix{var"#s11", var"#s12", T} where var"#s12" where var"#s11"), LowerTriangular{T, var"#s18"} where var"#s18"<:(StaticArrays.StaticMatrix{var"#s19", var"#s20", T} where var"#s20" where var"#s19"), Symmetric{T, var"#s7"} where var"#s7"<:(StaticArrays.StaticMatrix{var"#s8", var"#s9", T} where var"#s9" where var"#s8"), Transpose{T, var"#s1"} where var"#s1"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, UnitLowerTriangular{T, var"#s24"} where var"#s24"<:(StaticArrays.StaticMatrix{var"#s25", var"#s26", T} where var"#s26" where var"#s25"), UnitUpperTriangular{T, var"#s21"} where var"#s21"<:(StaticArrays.StaticMatrix{var"#s22", var"#s23", T} where var"#s23" where var"#s22"), UpperTriangular{T, var"#s15"} where var"#s15"<:(StaticArrays.StaticMatrix{var"#s16", var"#s17", T} where var"#s17" where var"#s16"), StaticArrays.StaticVector{var"#s26", T} where var"#s26", StaticArrays.StaticMatrix{var"#s5", var"#s4", T} where var"#s4" where var"#s5", StaticArrays.StaticArray{var"#s26", T, N} where N where var"#s26"<:Tuple} where T) at /home/pkgeval/.julia/packages/StaticArrays/LJQEe/src/abstractarray.jl:1
    length(!Matched::Union{Adjoint{T, S}, Transpose{T, S}} where S where T) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:194
    ...
  Stacktrace:
    [1] _similar_for(c::UnitRange{Int64}, #unused#::Type{Float64}, itr::UniformScaling{Float64}, #unused#::Base.HasLength)
      @ Base ./array.jl:575
    [2] _collect(cont::UnitRange{Int64}, itr::UniformScaling{Float64}, #unused#::Base.HasEltype, isz::Base.HasLength)
      @ Base ./array.jl:608
    [3] collect(itr::UniformScaling{Float64})
      @ Base ./array.jl:602
    [4] broadcastable(x::UniformScaling{Float64})
      @ Base.Broadcast ./broadcast.jl:682
    [5] broadcasted
      @ ./broadcast.jl:1303 [inlined]
    [6] muladd(A::Matrix{Float64}, B::Matrix{Float64}, z::UniformScaling{Float64})
      @ LinearAlgebra /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/matmul.jl:214
    [7] macro expansion
      @ ./math.jl:123 [inlined]
    [8] evalpoly(x::Matrix{Float64}, p::NTuple{14, UniformScaling{Float64}})
      @ Base.Math ./math.jl:122
    [9] exp_pade_p(x::Matrix{Float64}, #unused#::Val{13}, #unused#::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:128
   [10] exp_generic(x::Matrix{Float64}, vk::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:123
   [11] exp_generic(x::Matrix{Float64})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:118
   [12] macro expansion
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:24 [inlined]
   [13] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [14] top-level scope
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:19
exp_generic: Error During Test at /home/pkgeval/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:27
  Test threw exception
  Expression: exp(N) ≈ exp_generic(N)
  MethodError: no method matching length(::UniformScaling{Float64})
  Closest candidates are:
    length(!Matched::Union{Base.KeySet, Base.ValueIterator}) at abstractdict.jl:54
    length(!Matched::Union{Adjoint{T, var"#s6"} where var"#s6"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, Diagonal{T, var"#s13"} where var"#s13"<:(StaticArrays.StaticVector{var"#s14", T} where var"#s14"), Hermitian{T, var"#s10"} where var"#s10"<:(StaticArrays.StaticMatrix{var"#s11", var"#s12", T} where var"#s12" where var"#s11"), LowerTriangular{T, var"#s18"} where var"#s18"<:(StaticArrays.StaticMatrix{var"#s19", var"#s20", T} where var"#s20" where var"#s19"), Symmetric{T, var"#s7"} where var"#s7"<:(StaticArrays.StaticMatrix{var"#s8", var"#s9", T} where var"#s9" where var"#s8"), Transpose{T, var"#s1"} where var"#s1"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, UnitLowerTriangular{T, var"#s24"} where var"#s24"<:(StaticArrays.StaticMatrix{var"#s25", var"#s26", T} where var"#s26" where var"#s25"), UnitUpperTriangular{T, var"#s21"} where var"#s21"<:(StaticArrays.StaticMatrix{var"#s22", var"#s23", T} where var"#s23" where var"#s22"), UpperTriangular{T, var"#s15"} where var"#s15"<:(StaticArrays.StaticMatrix{var"#s16", var"#s17", T} where var"#s17" where var"#s16"), StaticArrays.StaticVector{var"#s26", T} where var"#s26", StaticArrays.StaticMatrix{var"#s5", var"#s4", T} where var"#s4" where var"#s5", StaticArrays.StaticArray{var"#s26", T, N} where N where var"#s26"<:Tuple} where T) at /home/pkgeval/.julia/packages/StaticArrays/LJQEe/src/abstractarray.jl:1
    length(!Matched::Union{Adjoint{T, S}, Transpose{T, S}} where S where T) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:194
    ...
  Stacktrace:
    [1] _similar_for(c::UnitRange{Int64}, #unused#::Type{Float64}, itr::UniformScaling{Float64}, #unused#::Base.HasLength)
      @ Base ./array.jl:575
    [2] _collect(cont::UnitRange{Int64}, itr::UniformScaling{Float64}, #unused#::Base.HasEltype, isz::Base.HasLength)
      @ Base ./array.jl:608
    [3] collect(itr::UniformScaling{Float64})
      @ Base ./array.jl:602
    [4] broadcastable(x::UniformScaling{Float64})
      @ Base.Broadcast ./broadcast.jl:682
    [5] broadcasted
      @ ./broadcast.jl:1303 [inlined]
    [6] muladd(A::Matrix{Float64}, B::Matrix{Float64}, z::UniformScaling{Float64})
      @ LinearAlgebra /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/matmul.jl:214
    [7] macro expansion
      @ ./math.jl:123 [inlined]
    [8] evalpoly(x::Matrix{Float64}, p::NTuple{14, UniformScaling{Float64}})
      @ Base.Math ./math.jl:122
    [9] exp_pade_p(x::Matrix{Float64}, #unused#::Val{13}, #unused#::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:128
   [10] exp_generic(x::Matrix{Float64}, vk::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:123
   [11] exp_generic(x::Matrix{Float64}, vk::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:121
   [12] exp_generic(x::Matrix{Float64})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:118
   [13] macro expansion
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:27 [inlined]
   [14] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [15] top-level scope
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:19
exp_generic: Error During Test at /home/pkgeval/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:21
  Test threw exception
  Expression: exp(M) ≈ exp_generic(M)
  MethodError: no method matching length(::UniformScaling{Float64})
  Closest candidates are:
    length(!Matched::Union{Base.KeySet, Base.ValueIterator}) at abstractdict.jl:54
    length(!Matched::Union{Adjoint{T, var"#s6"} where var"#s6"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, Diagonal{T, var"#s13"} where var"#s13"<:(StaticArrays.StaticVector{var"#s14", T} where var"#s14"), Hermitian{T, var"#s10"} where var"#s10"<:(StaticArrays.StaticMatrix{var"#s11", var"#s12", T} where var"#s12" where var"#s11"), LowerTriangular{T, var"#s18"} where var"#s18"<:(StaticArrays.StaticMatrix{var"#s19", var"#s20", T} where var"#s20" where var"#s19"), Symmetric{T, var"#s7"} where var"#s7"<:(StaticArrays.StaticMatrix{var"#s8", var"#s9", T} where var"#s9" where var"#s8"), Transpose{T, var"#s1"} where var"#s1"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, UnitLowerTriangular{T, var"#s24"} where var"#s24"<:(StaticArrays.StaticMatrix{var"#s25", var"#s26", T} where var"#s26" where var"#s25"), UnitUpperTriangular{T, var"#s21"} where var"#s21"<:(StaticArrays.StaticMatrix{var"#s22", var"#s23", T} where var"#s23" where var"#s22"), UpperTriangular{T, var"#s15"} where var"#s15"<:(StaticArrays.StaticMatrix{var"#s16", var"#s17", T} where var"#s17" where var"#s16"), StaticArrays.StaticVector{var"#s26", T} where var"#s26", StaticArrays.StaticMatrix{var"#s5", var"#s4", T} where var"#s4" where var"#s5", StaticArrays.StaticArray{var"#s26", T, N} where N where var"#s26"<:Tuple} where T) at /home/pkgeval/.julia/packages/StaticArrays/LJQEe/src/abstractarray.jl:1
    length(!Matched::Union{Adjoint{T, S}, Transpose{T, S}} where S where T) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:194
    ...
  Stacktrace:
    [1] _similar_for(c::UnitRange{Int64}, #unused#::Type{Float64}, itr::UniformScaling{Float64}, #unused#::Base.HasLength)
      @ Base ./array.jl:575
    [2] _collect(cont::UnitRange{Int64}, itr::UniformScaling{Float64}, #unused#::Base.HasEltype, isz::Base.HasLength)
      @ Base ./array.jl:608
    [3] collect(itr::UniformScaling{Float64})
      @ Base ./array.jl:602
    [4] broadcastable(x::UniformScaling{Float64})
      @ Base.Broadcast ./broadcast.jl:682
    [5] broadcasted
      @ ./broadcast.jl:1303 [inlined]
    [6] muladd(A::Matrix{Float64}, B::Matrix{Float64}, z::UniformScaling{Float64})
      @ LinearAlgebra /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/matmul.jl:214
    [7] macro expansion
      @ ./math.jl:123 [inlined]
    [8] evalpoly(x::Matrix{Float64}, p::NTuple{14, UniformScaling{Float64}})
      @ Base.Math ./math.jl:122
    [9] exp_pade_p(x::Matrix{Float64}, #unused#::Val{13}, #unused#::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:128
   [10] exp_generic(x::Matrix{Float64}, vk::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:123
   [11] exp_generic(x::Matrix{Float64}, vk::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:121
   [12] exp_generic(x::Matrix{Float64})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:118
   [13] macro expansion
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:21 [inlined]
   [14] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [15] top-level scope
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:19
exp_generic: Error During Test at /home/pkgeval/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:24
  Test threw exception
  Expression: exp(M′) ≈ exp_generic(M′)
  MethodError: no method matching length(::UniformScaling{Float64})
  Closest candidates are:
    length(!Matched::Union{Base.KeySet, Base.ValueIterator}) at abstractdict.jl:54
    length(!Matched::Union{Adjoint{T, var"#s6"} where var"#s6"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, Diagonal{T, var"#s13"} where var"#s13"<:(StaticArrays.StaticVector{var"#s14", T} where var"#s14"), Hermitian{T, var"#s10"} where var"#s10"<:(StaticArrays.StaticMatrix{var"#s11", var"#s12", T} where var"#s12" where var"#s11"), LowerTriangular{T, var"#s18"} where var"#s18"<:(StaticArrays.StaticMatrix{var"#s19", var"#s20", T} where var"#s20" where var"#s19"), Symmetric{T, var"#s7"} where var"#s7"<:(StaticArrays.StaticMatrix{var"#s8", var"#s9", T} where var"#s9" where var"#s8"), Transpose{T, var"#s1"} where var"#s1"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, UnitLowerTriangular{T, var"#s24"} where var"#s24"<:(StaticArrays.StaticMatrix{var"#s25", var"#s26", T} where var"#s26" where var"#s25"), UnitUpperTriangular{T, var"#s21"} where var"#s21"<:(StaticArrays.StaticMatrix{var"#s22", var"#s23", T} where var"#s23" where var"#s22"), UpperTriangular{T, var"#s15"} where var"#s15"<:(StaticArrays.StaticMatrix{var"#s16", var"#s17", T} where var"#s17" where var"#s16"), StaticArrays.StaticVector{var"#s26", T} where var"#s26", StaticArrays.StaticMatrix{var"#s5", var"#s4", T} where var"#s4" where var"#s5", StaticArrays.StaticArray{var"#s26", T, N} where N where var"#s26"<:Tuple} where T) at /home/pkgeval/.julia/packages/StaticArrays/LJQEe/src/abstractarray.jl:1
    length(!Matched::Union{Adjoint{T, S}, Transpose{T, S}} where S where T) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:194
    ...
  Stacktrace:
    [1] _similar_for(c::UnitRange{Int64}, #unused#::Type{Float64}, itr::UniformScaling{Float64}, #unused#::Base.HasLength)
      @ Base ./array.jl:575
    [2] _collect(cont::UnitRange{Int64}, itr::UniformScaling{Float64}, #unused#::Base.HasEltype, isz::Base.HasLength)
      @ Base ./array.jl:608
    [3] collect(itr::UniformScaling{Float64})
      @ Base ./array.jl:602
    [4] broadcastable(x::UniformScaling{Float64})
      @ Base.Broadcast ./broadcast.jl:682
    [5] broadcasted
      @ ./broadcast.jl:1303 [inlined]
    [6] muladd(A::Matrix{Float64}, B::Matrix{Float64}, z::UniformScaling{Float64})
      @ LinearAlgebra /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/matmul.jl:214
    [7] macro expansion
      @ ./math.jl:123 [inlined]
    [8] evalpoly(x::Matrix{Float64}, p::NTuple{14, UniformScaling{Float64}})
      @ Base.Math ./math.jl:122
    [9] exp_pade_p(x::Matrix{Float64}, #unused#::Val{13}, #unused#::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:128
   [10] exp_generic(x::Matrix{Float64}, vk::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:123
   [11] exp_generic(x::Matrix{Float64})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:118
   [12] macro expansion
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:24 [inlined]
   [13] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [14] top-level scope
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:19
exp_generic: Error During Test at /home/pkgeval/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:27
  Test threw exception
  Expression: exp(N) ≈ exp_generic(N)
  MethodError: no method matching length(::UniformScaling{Float64})
  Closest candidates are:
    length(!Matched::Union{Base.KeySet, Base.ValueIterator}) at abstractdict.jl:54
    length(!Matched::Union{Adjoint{T, var"#s6"} where var"#s6"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, Diagonal{T, var"#s13"} where var"#s13"<:(StaticArrays.StaticVector{var"#s14", T} where var"#s14"), Hermitian{T, var"#s10"} where var"#s10"<:(StaticArrays.StaticMatrix{var"#s11", var"#s12", T} where var"#s12" where var"#s11"), LowerTriangular{T, var"#s18"} where var"#s18"<:(StaticArrays.StaticMatrix{var"#s19", var"#s20", T} where var"#s20" where var"#s19"), Symmetric{T, var"#s7"} where var"#s7"<:(StaticArrays.StaticMatrix{var"#s8", var"#s9", T} where var"#s9" where var"#s8"), Transpose{T, var"#s1"} where var"#s1"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, UnitLowerTriangular{T, var"#s24"} where var"#s24"<:(StaticArrays.StaticMatrix{var"#s25", var"#s26", T} where var"#s26" where var"#s25"), UnitUpperTriangular{T, var"#s21"} where var"#s21"<:(StaticArrays.StaticMatrix{var"#s22", var"#s23", T} where var"#s23" where var"#s22"), UpperTriangular{T, var"#s15"} where var"#s15"<:(StaticArrays.StaticMatrix{var"#s16", var"#s17", T} where var"#s17" where var"#s16"), StaticArrays.StaticVector{var"#s26", T} where var"#s26", StaticArrays.StaticMatrix{var"#s5", var"#s4", T} where var"#s4" where var"#s5", StaticArrays.StaticArray{var"#s26", T, N} where N where var"#s26"<:Tuple} where T) at /home/pkgeval/.julia/packages/StaticArrays/LJQEe/src/abstractarray.jl:1
    length(!Matched::Union{Adjoint{T, S}, Transpose{T, S}} where S where T) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:194
    ...
  Stacktrace:
    [1] _similar_for(c::UnitRange{Int64}, #unused#::Type{Float64}, itr::UniformScaling{Float64}, #unused#::Base.HasLength)
      @ Base ./array.jl:575
    [2] _collect(cont::UnitRange{Int64}, itr::UniformScaling{Float64}, #unused#::Base.HasEltype, isz::Base.HasLength)
      @ Base ./array.jl:608
    [3] collect(itr::UniformScaling{Float64})
      @ Base ./array.jl:602
    [4] broadcastable(x::UniformScaling{Float64})
      @ Base.Broadcast ./broadcast.jl:682
    [5] broadcasted
      @ ./broadcast.jl:1303 [inlined]
    [6] muladd(A::Matrix{Float64}, B::Matrix{Float64}, z::UniformScaling{Float64})
      @ LinearAlgebra /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/matmul.jl:214
    [7] macro expansion
      @ ./math.jl:123 [inlined]
    [8] evalpoly(x::Matrix{Float64}, p::NTuple{14, UniformScaling{Float64}})
      @ Base.Math ./math.jl:122
    [9] exp_pade_p(x::Matrix{Float64}, #unused#::Val{13}, #unused#::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:128
   [10] exp_generic(x::Matrix{Float64}, vk::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:123
   [11] exp_generic(x::Matrix{Float64}, vk::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:121
   [12] exp_generic(x::Matrix{Float64})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:118
   [13] macro expansion
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:27 [inlined]
   [14] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [15] top-level scope
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:19
exp_generic: Error During Test at /home/pkgeval/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:21
  Test threw exception
  Expression: exp(M) ≈ exp_generic(M)
  MethodError: no method matching length(::UniformScaling{Float64})
  Closest candidates are:
    length(!Matched::Union{Base.KeySet, Base.ValueIterator}) at abstractdict.jl:54
    length(!Matched::Union{Adjoint{T, var"#s6"} where var"#s6"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, Diagonal{T, var"#s13"} where var"#s13"<:(StaticArrays.StaticVector{var"#s14", T} where var"#s14"), Hermitian{T, var"#s10"} where var"#s10"<:(StaticArrays.StaticMatrix{var"#s11", var"#s12", T} where var"#s12" where var"#s11"), LowerTriangular{T, var"#s18"} where var"#s18"<:(StaticArrays.StaticMatrix{var"#s19", var"#s20", T} where var"#s20" where var"#s19"), Symmetric{T, var"#s7"} where var"#s7"<:(StaticArrays.StaticMatrix{var"#s8", var"#s9", T} where var"#s9" where var"#s8"), Transpose{T, var"#s1"} where var"#s1"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, UnitLowerTriangular{T, var"#s24"} where var"#s24"<:(StaticArrays.StaticMatrix{var"#s25", var"#s26", T} where var"#s26" where var"#s25"), UnitUpperTriangular{T, var"#s21"} where var"#s21"<:(StaticArrays.StaticMatrix{var"#s22", var"#s23", T} where var"#s23" where var"#s22"), UpperTriangular{T, var"#s15"} where var"#s15"<:(StaticArrays.StaticMatrix{var"#s16", var"#s17", T} where var"#s17" where var"#s16"), StaticArrays.StaticVector{var"#s26", T} where var"#s26", StaticArrays.StaticMatrix{var"#s5", var"#s4", T} where var"#s4" where var"#s5", StaticArrays.StaticArray{var"#s26", T, N} where N where var"#s26"<:Tuple} where T) at /home/pkgeval/.julia/packages/StaticArrays/LJQEe/src/abstractarray.jl:1
    length(!Matched::Union{Adjoint{T, S}, Transpose{T, S}} where S where T) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:194
    ...
  Stacktrace:
    [1] _similar_for(c::UnitRange{Int64}, #unused#::Type{Float64}, itr::UniformScaling{Float64}, #unused#::Base.HasLength)
      @ Base ./array.jl:575
    [2] _collect(cont::UnitRange{Int64}, itr::UniformScaling{Float64}, #unused#::Base.HasEltype, isz::Base.HasLength)
      @ Base ./array.jl:608
    [3] collect(itr::UniformScaling{Float64})
      @ Base ./array.jl:602
    [4] broadcastable(x::UniformScaling{Float64})
      @ Base.Broadcast ./broadcast.jl:682
    [5] broadcasted
      @ ./broadcast.jl:1303 [inlined]
    [6] muladd(A::Matrix{Float64}, B::Matrix{Float64}, z::UniformScaling{Float64})
      @ LinearAlgebra /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/matmul.jl:214
    [7] macro expansion
      @ ./math.jl:123 [inlined]
    [8] evalpoly(x::Matrix{Float64}, p::NTuple{14, UniformScaling{Float64}})
      @ Base.Math ./math.jl:122
    [9] exp_pade_p(x::Matrix{Float64}, #unused#::Val{13}, #unused#::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:128
   [10] exp_generic(x::Matrix{Float64}, vk::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:123
   [11] exp_generic(x::Matrix{Float64}, vk::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:121
   [12] exp_generic(x::Matrix{Float64})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:118
   [13] macro expansion
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:21 [inlined]
   [14] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [15] top-level scope
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:19
exp_generic: Error During Test at /home/pkgeval/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:24
  Test threw exception
  Expression: exp(M′) ≈ exp_generic(M′)
  MethodError: no method matching length(::UniformScaling{Float64})
  Closest candidates are:
    length(!Matched::Union{Base.KeySet, Base.ValueIterator}) at abstractdict.jl:54
    length(!Matched::Union{Adjoint{T, var"#s6"} where var"#s6"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, Diagonal{T, var"#s13"} where var"#s13"<:(StaticArrays.StaticVector{var"#s14", T} where var"#s14"), Hermitian{T, var"#s10"} where var"#s10"<:(StaticArrays.StaticMatrix{var"#s11", var"#s12", T} where var"#s12" where var"#s11"), LowerTriangular{T, var"#s18"} where var"#s18"<:(StaticArrays.StaticMatrix{var"#s19", var"#s20", T} where var"#s20" where var"#s19"), Symmetric{T, var"#s7"} where var"#s7"<:(StaticArrays.StaticMatrix{var"#s8", var"#s9", T} where var"#s9" where var"#s8"), Transpose{T, var"#s1"} where var"#s1"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, UnitLowerTriangular{T, var"#s24"} where var"#s24"<:(StaticArrays.StaticMatrix{var"#s25", var"#s26", T} where var"#s26" where var"#s25"), UnitUpperTriangular{T, var"#s21"} where var"#s21"<:(StaticArrays.StaticMatrix{var"#s22", var"#s23", T} where var"#s23" where var"#s22"), UpperTriangular{T, var"#s15"} where var"#s15"<:(StaticArrays.StaticMatrix{var"#s16", var"#s17", T} where var"#s17" where var"#s16"), StaticArrays.StaticVector{var"#s26", T} where var"#s26", StaticArrays.StaticMatrix{var"#s5", var"#s4", T} where var"#s4" where var"#s5", StaticArrays.StaticArray{var"#s26", T, N} where N where var"#s26"<:Tuple} where T) at /home/pkgeval/.julia/packages/StaticArrays/LJQEe/src/abstractarray.jl:1
    length(!Matched::Union{Adjoint{T, S}, Transpose{T, S}} where S where T) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:194
    ...
  Stacktrace:
    [1] _similar_for(c::UnitRange{Int64}, #unused#::Type{Float64}, itr::UniformScaling{Float64}, #unused#::Base.HasLength)
      @ Base ./array.jl:575
    [2] _collect(cont::UnitRange{Int64}, itr::UniformScaling{Float64}, #unused#::Base.HasEltype, isz::Base.HasLength)
      @ Base ./array.jl:608
    [3] collect(itr::UniformScaling{Float64})
      @ Base ./array.jl:602
    [4] broadcastable(x::UniformScaling{Float64})
      @ Base.Broadcast ./broadcast.jl:682
    [5] broadcasted
      @ ./broadcast.jl:1303 [inlined]
    [6] muladd(A::Matrix{Float64}, B::Matrix{Float64}, z::UniformScaling{Float64})
      @ LinearAlgebra /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/matmul.jl:214
    [7] macro expansion
      @ ./math.jl:123 [inlined]
    [8] evalpoly(x::Matrix{Float64}, p::NTuple{14, UniformScaling{Float64}})
      @ Base.Math ./math.jl:122
    [9] exp_pade_p(x::Matrix{Float64}, #unused#::Val{13}, #unused#::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:128
   [10] exp_generic(x::Matrix{Float64}, vk::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:123
   [11] exp_generic(x::Matrix{Float64})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:118
   [12] macro expansion
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:24 [inlined]
   [13] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [14] top-level scope
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:19
exp_generic: Error During Test at /home/pkgeval/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:27
  Test threw exception
  Expression: exp(N) ≈ exp_generic(N)
  MethodError: no method matching length(::UniformScaling{Float64})
  Closest candidates are:
    length(!Matched::Union{Base.KeySet, Base.ValueIterator}) at abstractdict.jl:54
    length(!Matched::Union{Adjoint{T, var"#s6"} where var"#s6"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, Diagonal{T, var"#s13"} where var"#s13"<:(StaticArrays.StaticVector{var"#s14", T} where var"#s14"), Hermitian{T, var"#s10"} where var"#s10"<:(StaticArrays.StaticMatrix{var"#s11", var"#s12", T} where var"#s12" where var"#s11"), LowerTriangular{T, var"#s18"} where var"#s18"<:(StaticArrays.StaticMatrix{var"#s19", var"#s20", T} where var"#s20" where var"#s19"), Symmetric{T, var"#s7"} where var"#s7"<:(StaticArrays.StaticMatrix{var"#s8", var"#s9", T} where var"#s9" where var"#s8"), Transpose{T, var"#s1"} where var"#s1"<:Union{StaticArrays.StaticVector{var"#s1", T} where var"#s1", StaticArrays.StaticMatrix{var"#s4", var"#s5", T} where var"#s5" where var"#s4"}, UnitLowerTriangular{T, var"#s24"} where var"#s24"<:(StaticArrays.StaticMatrix{var"#s25", var"#s26", T} where var"#s26" where var"#s25"), UnitUpperTriangular{T, var"#s21"} where var"#s21"<:(StaticArrays.StaticMatrix{var"#s22", var"#s23", T} where var"#s23" where var"#s22"), UpperTriangular{T, var"#s15"} where var"#s15"<:(StaticArrays.StaticMatrix{var"#s16", var"#s17", T} where var"#s17" where var"#s16"), StaticArrays.StaticVector{var"#s26", T} where var"#s26", StaticArrays.StaticMatrix{var"#s5", var"#s4", T} where var"#s4" where var"#s5", StaticArrays.StaticArray{var"#s26", T, N} where N where var"#s26"<:Tuple} where T) at /home/pkgeval/.julia/packages/StaticArrays/LJQEe/src/abstractarray.jl:1
    length(!Matched::Union{Adjoint{T, S}, Transpose{T, S}} where S where T) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:194
    ...
  Stacktrace:
    [1] _similar_for(c::UnitRange{Int64}, #unused#::Type{Float64}, itr::UniformScaling{Float64}, #unused#::Base.HasLength)
      @ Base ./array.jl:575
    [2] _collect(cont::UnitRange{Int64}, itr::UniformScaling{Float64}, #unused#::Base.HasEltype, isz::Base.HasLength)
      @ Base ./array.jl:608
    [3] collect(itr::UniformScaling{Float64})
      @ Base ./array.jl:602
    [4] broadcastable(x::UniformScaling{Float64})
      @ Base.Broadcast ./broadcast.jl:682
    [5] broadcasted
      @ ./broadcast.jl:1303 [inlined]
    [6] muladd(A::Matrix{Float64}, B::Matrix{Float64}, z::UniformScaling{Float64})
      @ LinearAlgebra /workspace/srcdir/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/matmul.jl:214
    [7] macro expansion
      @ ./math.jl:123 [inlined]
    [8] evalpoly(x::Matrix{Float64}, p::NTuple{14, UniformScaling{Float64}})
      @ Base.Math ./math.jl:122
    [9] exp_pade_p(x::Matrix{Float64}, #unused#::Val{13}, #unused#::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:128
   [10] exp_generic(x::Matrix{Float64}, vk::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:123
   [11] exp_generic(x::Matrix{Float64}, vk::Val{13})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:121
   [12] exp_generic(x::Matrix{Float64})
      @ ExponentialUtilities ~/.julia/packages/ExponentialUtilities/0d0Nm/src/exp.jl:118
   [13] macro expansion
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:27 [inlined]
   [14] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [15] top-level scope
      @ ~/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:19
Test Summary: | Error  Total
exp_generic   |    18     18
ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 18 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/ExponentialUtilities/0d0Nm/test/runtests.jl:18

PkgEval failed: Package ExponentialUtilities errored during testing
Stacktrace:
  [1] pkgerror(msg::String)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1651
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:334
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:321
  [5] #test#62
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:71 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:70 [inlined]
  [7] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67
 [11] top-level scope
    @ none:44
 [12] eval
    @ ./boot.jl:360 [inlined]
 [13] eval(x::Expr)
    @ Base.MainInclude ./client.jl:446
 [14] top-level scope
    @ none:1
 [15] eval(m::Module, e::Any)
    @ Core ./boot.jl:360
 [16] exec_options(opts::Base.JLOptions)
    @ Base ./client.jl:261
 [17] _start()
    @ Base ./client.jl:485


################################################################################
# PkgEval teardown: 2020-10-30T05:49:02.595
CPU usage: 52.84s (49.30s user, 3.62s kernel)

Network usage:
- eth0: 579.746 KiB received, 57.414 KiB sent

Raw statistics: {"blkio_stats":{"io_queue_recursive":[],"io_serviced_recursive":[{"major":259,"value":0,"op":"Read","minor":0},{"major":259,"value":5,"op":"Write","minor":0},{"major":259,"value":0,"op":"Sync","minor":0},{"major":259,"value":5,"op":"Async","minor":0},{"major":259,"value":5,"op":"Total","minor":0},{"major":253,"value":0,"op":"Read","minor":2},{"major":253,"value":5,"op":"Write","minor":2},{"major":253,"value":0,"op":"Sync","minor":2},{"major":253,"value":5,"op":"Async","minor":2},{"major":253,"value":5,"op":"Total","minor":2}],"io_time_recursive":[],"sectors_recursive":[],"io_service_bytes_recursive":[{"major":259,"value":0,"op":"Read","minor":0},{"major":259,"value":24576,"op":"Write","minor":0},{"major":259,"value":0,"op":"Sync","minor":0},{"major":259,"value":24576,"op":"Async","minor":0},{"major":259,"value":24576,"op":"Total","minor":0},{"major":253,"value":0,"op":"Read","minor":2},{"major":253,"value":24576,"op":"Write","minor":2},{"major":253,"value":0,"op":"Sync","minor":2},{"major":253,"value":24576,"op":"Async","minor":2},{"major":253,"value":24576,"op":"Total","minor":2}],"io_wait_time_recursive":[],"io_merged_recursive":[],"io_service_time_recursive":[]},"memory_stats":{"usage":243613696,"max_usage":1016926208,"stats":{"hierarchical_memory_limit":9223372036854771712,"pgmajfault":0,"total_rss":231337984,"inactive_file":8192,"inactive_anon":2244608,"total_pgfault":1252327,"total_cache":6586368,"total_rss_huge":0,"total_active_anon":235671552,"total_pgmajfault":0,"pgpgin":729783,"rss_huge":0,"mapped_file":0,"total_inactive_file":8192,"dirty":0,"total_unevictable":0,"total_dirty":0,"writeback":0,"pgpgout":671696,"hierarchical_memsw_limit":0,"cache":6586368,"active_file":0,"pgfault":1252327,"total_mapped_file":0,"total_pgpgout":671696,"total_writeback":0,"rss":231337984,"unevictable":0,"total_inactive_anon":2244608,"total_pgpgin":729783,"active_anon":235671552,"total_active_file":0},"limit":540972998656},"name":"/ExponentialUtilities-3axqJFbB","networks":{"eth0":{"rx_bytes":593660,"rx_packets":633,"tx_packets":438,"tx_bytes":58792,"tx_dropped":0,"rx_dropped":6,"tx_errors":0,"rx_errors":0}},"id":"2aec955a4a515e6d558d39b00d78ac58335edac66032c774e00cf3683a526606","preread":"0001-01-01T00:00:00Z","storage_stats":{},"precpu_stats":{"throttling_data":{"throttled_periods":0,"throttled_time":0,"periods":0},"cpu_usage":{"usage_in_usermode":0,"usage_in_kernelmode":0,"total_usage":0}},"pids_stats":{"current":38},"num_procs":0,"cpu_stats":{"throttling_data":{"throttled_periods":0,"throttled_time":0,"periods":0},"system_cpu_usage":113474771250000000,"online_cpus":128,"cpu_usage":{"usage_in_usermode":49300000000,"usage_in_kernelmode":3620000000,"total_usage":52843116117,"percpu_usage":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52843116117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},"read":"2020-10-30T05:49:02.900346728Z"}