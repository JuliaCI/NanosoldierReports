################################################################################
# PkgEval set-up: 2020-10-30T04:12:22.427
#

Julia Version 1.6.0-DEV.1380
Commit 300e34cf74 (2020-10-30 02:28 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807



################################################################################
# Installation: 2020-10-30T04:12:23.926
#

   Resolving package versions...
   Installed TextWrap ─ v1.0.1
   Installed ArgParse ─ v1.1.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [c7e460c6] + ArgParse v1.1.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [c7e460c6] + ArgParse v1.1.0
  [b718987f] + TextWrap v1.0.1
  [56ddb016] + Logging


################################################################################
# Testing: 2020-10-30T04:12:26.975
#


     Testing ArgParse
Status `/tmp/jl_9AyI62/Project.toml`
  [c7e460c6] ArgParse v1.1.0
  [8dfed614] Test
Status `/tmp/jl_9AyI62/Manifest.toml`
  [c7e460c6] ArgParse v1.1.0
  [b718987f] TextWrap v1.0.1
  [2a0f44e3] Base64
  [b77e0a4c] InteractiveUtils
  [56ddb016] Logging
  [d6f4376e] Markdown
  [9a3f8284] Random
  [9e88b42a] Serialization
  [8dfed614] Test
     Testing Running tests...
Test Summary: | Pass  Total
test 01       |   32     32
Test Summary: | Pass  Total
test 02       |   85     85
test 03: Test Failed at /home/pkgeval/.julia/packages/ArgParse/WUIf8/test/argparse_test03.jl:82
  Expression: stringhelp(s) == "usage: $(basename(Base.source_path())) [--opt1] [--opt2] [-k] [-u] [--array ARRAY]\n                        [--custom CUSTOM] [--oddint ODDINT]\n                        [--collect C] [--awkward-option XY [XY...]]\n\nTest 3 for ArgParse.jl\n\noptional arguments:\n  --opt1                append O1\n  --opt2                append O2\n  -k                    provide the answer\n  -u                    provide the answer as floating point\n  --array ARRAY         create an array (type: Array{$(Int),1},\n                        default: $([7, 3, 2]))\n  --custom CUSTOM       the only accepted argument is \"custom\" (type:\n                        CustomType, default: CustomType())\n  --oddint ODDINT       an odd integer (type: $(Int), default: 1)\n  --collect C           collect things (type: $(Int))\n  --awkward-option XY [XY...]\n                        either X or Y; all XY's are stored in chunks\n                        (default: Any[Any[\"X\"]])\n\n"
   Evaluated: "usage: argparse_test03.jl [--opt1] [--opt2] [-k] [-u] [--array ARRAY]\n                        [--custom CUSTOM] [--oddint ODDINT]\n                        [--collect C] [--awkward-option XY [XY...]]\n\nTest 3 for ArgParse.jl\n\noptional arguments:\n  --opt1                append O1\n  --opt2                append O2\n  -k                    provide the answer\n  -u                    provide the answer as floating point\n  --array ARRAY         create an array (type: Vector{Int64}, default:\n                        [7, 3, 2])\n  --custom CUSTOM       the only accepted argument is \"custom\" (type:\n                        CustomType, default: CustomType())\n  --oddint ODDINT       an odd integer (type: Int64, default: 1)\n  --collect C           collect things (type: Int64)\n  --awkward-option XY [XY...]\n                        either X or Y; all XY's are stored in chunks\n                        (default: Any[Any[\"X\"]])\n\n" == "usage: argparse_test03.jl [--opt1] [--opt2] [-k] [-u] [--array ARRAY]\n                        [--custom CUSTOM] [--oddint ODDINT]\n                        [--collect C] [--awkward-option XY [XY...]]\n\nTest 3 for ArgParse.jl\n\noptional arguments:\n  --opt1                append O1\n  --opt2                append O2\n  -k                    provide the answer\n  -u                    provide the answer as floating point\n  --array ARRAY         create an array (type: Array{Int64,1},\n                        default: [7, 3, 2])\n  --custom CUSTOM       the only accepted argument is \"custom\" (type:\n                        CustomType, default: CustomType())\n  --oddint ODDINT       an odd integer (type: Int64, default: 1)\n  --collect C           collect things (type: Int64)\n  --awkward-option XY [XY...]\n                        either X or Y; all XY's are stored in chunks\n                        (default: Any[Any[\"X\"]])\n\n"
Stacktrace:
 [1] macro expansion
   @ ~/.julia/packages/ArgParse/WUIf8/test/argparse_test03.jl:82 [inlined]
 [2] macro expansion
   @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
 [3] top-level scope
   @ ~/.julia/packages/ArgParse/WUIf8/test/argparse_test03.jl:9
Test Summary: | Pass  Fail  Total
test 03       |   31     1     32

ERROR: LoadError: LoadError: Some tests did not pass: 31 passed, 1 failed, 0 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/ArgParse/WUIf8/test/argparse_test03.jl:7
in expression starting at /home/pkgeval/.julia/packages/ArgParse/WUIf8/test/runtests.jl:1

PkgEval failed: Package ArgParse errored during testing
Stacktrace:
  [1] pkgerror(msg::String)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1651
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:334
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:321
  [5] #test#62
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:71 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:70 [inlined]
  [7] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67
 [11] top-level scope
    @ none:44
 [12] eval
    @ ./boot.jl:360 [inlined]
 [13] eval(x::Expr)
    @ Base.MainInclude ./client.jl:446
 [14] top-level scope
    @ none:1
 [15] eval(m::Module, e::Any)
    @ Core ./boot.jl:360
 [16] exec_options(opts::Base.JLOptions)
    @ Base ./client.jl:261
 [17] _start()
    @ Base ./client.jl:485


################################################################################
# PkgEval teardown: 2020-10-30T04:13:00.421
CPU usage: 36.88s (34.75s user, 2.19s kernel)

Network usage:
- eth0: 84.787 KiB received, 9.056 KiB sent

Raw statistics: {"blkio_stats":{"io_queue_recursive":[],"io_serviced_recursive":[{"major":259,"value":0,"op":"Read","minor":0},{"major":259,"value":5,"op":"Write","minor":0},{"major":259,"value":0,"op":"Sync","minor":0},{"major":259,"value":5,"op":"Async","minor":0},{"major":259,"value":5,"op":"Total","minor":0},{"major":253,"value":0,"op":"Read","minor":2},{"major":253,"value":5,"op":"Write","minor":2},{"major":253,"value":0,"op":"Sync","minor":2},{"major":253,"value":5,"op":"Async","minor":2},{"major":253,"value":5,"op":"Total","minor":2}],"io_time_recursive":[],"sectors_recursive":[],"io_service_bytes_recursive":[{"major":259,"value":0,"op":"Read","minor":0},{"major":259,"value":20480,"op":"Write","minor":0},{"major":259,"value":0,"op":"Sync","minor":0},{"major":259,"value":20480,"op":"Async","minor":0},{"major":259,"value":20480,"op":"Total","minor":0},{"major":253,"value":0,"op":"Read","minor":2},{"major":253,"value":20480,"op":"Write","minor":2},{"major":253,"value":0,"op":"Sync","minor":2},{"major":253,"value":20480,"op":"Async","minor":2},{"major":253,"value":20480,"op":"Total","minor":2}],"io_wait_time_recursive":[],"io_merged_recursive":[],"io_service_time_recursive":[]},"memory_stats":{"usage":204877824,"max_usage":501964800,"stats":{"hierarchical_memory_limit":9223372036854771712,"pgmajfault":0,"total_rss":199839744,"inactive_file":8192,"inactive_anon":266240,"total_pgfault":426585,"total_cache":761856,"total_rss_huge":0,"total_active_anon":200273920,"total_pgmajfault":0,"pgpgin":185104,"rss_huge":0,"mapped_file":0,"total_inactive_file":8192,"dirty":0,"total_unevictable":0,"total_dirty":0,"writeback":0,"pgpgout":136129,"hierarchical_memsw_limit":0,"cache":761856,"active_file":0,"pgfault":426585,"total_mapped_file":0,"total_pgpgout":136129,"total_writeback":0,"rss":199839744,"unevictable":0,"total_inactive_anon":266240,"total_pgpgin":185104,"active_anon":200273920,"total_active_file":0},"limit":540972998656},"name":"/ArgParse-51XL5mkK","networks":{"eth0":{"rx_bytes":86822,"rx_packets":110,"tx_packets":65,"tx_bytes":9273,"tx_dropped":0,"rx_dropped":2,"tx_errors":0,"rx_errors":0}},"id":"37bf0fa98706bcadbaaba3232c2cd37f5402519540bbebb940c8d2f40869631e","preread":"0001-01-01T00:00:00Z","storage_stats":{},"precpu_stats":{"throttling_data":{"throttled_periods":0,"throttled_time":0,"periods":0},"cpu_usage":{"usage_in_usermode":0,"usage_in_kernelmode":0,"total_usage":0}},"pids_stats":{"current":38},"num_procs":0,"cpu_stats":{"throttling_data":{"throttled_periods":0,"throttled_time":0,"periods":0},"system_cpu_usage":112740230360000000,"online_cpus":128,"cpu_usage":{"usage_in_usermode":34750000000,"usage_in_kernelmode":2190000000,"total_usage":36882425121,"percpu_usage":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36882425121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},"read":"2020-10-30T04:13:00.424118064Z"}