################################################################################
# PkgEval set-up: 2020-10-30T04:01:06.313
#

Julia Version 1.6.0-DEV.1380
Commit 300e34cf74 (2020-10-30 02:28 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807



################################################################################
# Installation: 2020-10-30T04:01:07.705
#

   Resolving package versions...
   Installed NameResolution ─ v0.1.5
   Installed PrettyPrint ──── v0.2.0
   Installed JuliaVariables ─ v0.2.3
   Installed MLStyle ──────── v0.4.6
Updating `~/.julia/environments/v1.6/Project.toml`
  [b14d175d] + JuliaVariables v0.2.3
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [b14d175d] + JuliaVariables v0.2.3
  [d8e11817] + MLStyle v0.4.6
  [71a1bf82] + NameResolution v0.1.5
  [8162dcfd] + PrettyPrint v0.2.0


################################################################################
# Testing: 2020-10-30T04:01:09.784
#


     Testing JuliaVariables
Status `/tmp/jl_ZQAdC2/Project.toml`
  [b14d175d] JuliaVariables v0.2.3
  [d8e11817] MLStyle v0.4.6
  [71a1bf82] NameResolution v0.1.5
  [8dfed614] Test
Status `/tmp/jl_ZQAdC2/Manifest.toml`
  [b14d175d] JuliaVariables v0.2.3
  [d8e11817] MLStyle v0.4.6
  [71a1bf82] NameResolution v0.1.5
  [8162dcfd] PrettyPrint v0.2.0
  [2a0f44e3] Base64
  [b77e0a4c] InteractiveUtils
  [56ddb016] Logging
  [d6f4376e] Markdown
  [9a3f8284] Random
  [9e88b42a] Serialization
  [8dfed614] Test
     Testing Running tests...
$(Expr(:scoped, (bounds = Var[], freevars = Var[], bound_inits = Symbol[]), :(function (@global f)(x)
      $(Expr(:scoped, (bounds = Var[@local x], freevars = Var[], bound_inits = [:x]), quote
    let y = (@global +)(@local x, 1)
        $(Expr(:scoped, (bounds = Var[@local y], freevars = Var[], bound_inits = [:y]), quote
    @local y
end))
    end
end))
  end)))
$(Expr(:scoped, (bounds = Var[], freevars = Var[], bound_inits = Symbol[]), :(function (@global f)(x)
      $(Expr(:scoped, (bounds = Var[@local y, @local x], freevars = Var[], bound_inits = [:x]), quote
    @local y = (@global +)(@local x, 1)
    @global z->begin
            (@global +)(@global z, @local y)
        end
end))
  end)))
$(Expr(:scoped, (bounds = Var[], freevars = Var[], bound_inits = Symbol[]), :(function (@global f)(x)
      $(Expr(:scoped, (bounds = Var[@local y, @local x], freevars = Var[], bound_inits = [:x]), quote
    @local y = (@global +)(@local x, 1)
    let y = (@global +)(@local y, 1)
        $(Expr(:scoped, (bounds = Var[@local y], freevars = Var[], bound_inits = [:y]), quote
    for z = (@global :)(1, 10)
        $(Expr(:scoped, (bounds = Var[@local z], freevars = Var[], bound_inits = [:z]), quote
    (@global +)(@local x, @local y, @local z)
end))
    end
end))
    end
end))
  end)))
$(Expr(:scoped, (bounds = Var[], freevars = Var[], bound_inits = Symbol[]), :(function (@global f)(x)
      $(Expr(:scoped, (bounds = Var[@local y, @local x], freevars = Var[], bound_inits = [:x]), quote
    $(Expr(:meta, @global inline))
    @local y = (@global +)(@local x, 1)
    let y = (@global +)(@local y, 1)
        $(Expr(:scoped, (bounds = Var[@local y, @local z], freevars = Var[], bound_inits = [:y]), quote
    ((@global +)(@local x, @local y, @local z) for @local z = (@global :)(1, 10))
end))
    end
end))
  end)))
$(Expr(:scoped, (bounds = Var[], freevars = Var[], bound_inits = Symbol[]), quote
    @global a->begin
            (@global +)(@global a, @global z)
        end
end))
$(Expr(:scoped, (bounds = Var[@local z, @shared q], freevars = Var[], bound_inits = Symbol[]), quote
    @shared q = @global a
    function (@local z)(x, k = 1)
        $(Expr(:scoped, (bounds = Var[@local k, @local x], freevars = Var[@shared q], bound_inits = [:k, :x]), quote
    (x = @local x, k = @local k, q = @shared q)
end))
    end
end))
$(Expr(:scoped, (bounds = Var[], freevars = Var[], bound_inits = Symbol[]), :(function (x,)
      $(Expr(:scoped, (bounds = Var[mut @local z, @local x], freevars = Var[], bound_inits = [:x]), quote
    mut @local z = (@global +)(@local x, 1)
    @global y->begin
            mut @local z += 1
            mut @local z
        end
end))
  end)))
$(Expr(:scoped, (bounds = Var[], freevars = Var[], bound_inits = Symbol[]), :(function (x,)
      $(Expr(:scoped, (bounds = Var[mut @shared z, @local x], freevars = Var[], bound_inits = [:x]), quote
    $(Expr(:meta, @global inline))
    mut @shared z = (@global +)(@local x, 1)
    function (y,)
        $(Expr(:scoped, (bounds = Var[@local y], freevars = Var[mut @shared z], bound_inits = [:y]), quote
    $(Expr(:meta, @global inline))
    mut @shared z += 1
    mut @shared z
end))
    end
end))
  end)))
Test Summary:     | Pass  Total
JuliaVariables.jl |    6      6
Test Summary:                | Pass  Total
uninitialized bound variable |    1      1
Test Summary:  | Pass  Total
inplace binary |    1      1
Test Summary:  | Pass  Total
type variables |    3      3
Test Summary:                      | Pass  Total
default argument is free variables |    1      1
Test Summary: | Pass  Total
global mark   |    1      1
Test Summary: | Pass  Total
while         |    3      3
Test Summary: | Pass  Total
let           |    5      5
Test Summary: | Pass  Total
namedtuple    |    2      2
Test Summary: | Pass  Total
broadcast     |    3      3
Test Summary:    | Pass  Total
broadcast fusion |    3      3
Test Summary:  | Pass  Total
simplification |    1      1
Test Summary: | Pass  Total
no effect     |    4      4
Test Summary: | Pass  Total
depwarn       |    4      4
     Testing JuliaVariables tests passed 

PkgEval succeeded


################################################################################
# PkgEval teardown: 2020-10-30T04:02:08.611
CPU usage: 62.02s (59.67s user, 2.44s kernel)

Network usage:
- eth0: 218.231 KiB received, 18.461 KiB sent

Raw statistics: {"blkio_stats":{"io_queue_recursive":[],"io_serviced_recursive":[{"major":259,"value":0,"op":"Read","minor":0},{"major":259,"value":5,"op":"Write","minor":0},{"major":259,"value":0,"op":"Sync","minor":0},{"major":259,"value":5,"op":"Async","minor":0},{"major":259,"value":5,"op":"Total","minor":0},{"major":253,"value":0,"op":"Read","minor":2},{"major":253,"value":5,"op":"Write","minor":2},{"major":253,"value":0,"op":"Sync","minor":2},{"major":253,"value":5,"op":"Async","minor":2},{"major":253,"value":5,"op":"Total","minor":2}],"io_time_recursive":[],"sectors_recursive":[],"io_service_bytes_recursive":[{"major":259,"value":0,"op":"Read","minor":0},{"major":259,"value":20480,"op":"Write","minor":0},{"major":259,"value":0,"op":"Sync","minor":0},{"major":259,"value":20480,"op":"Async","minor":0},{"major":259,"value":20480,"op":"Total","minor":0},{"major":253,"value":0,"op":"Read","minor":2},{"major":253,"value":20480,"op":"Write","minor":2},{"major":253,"value":0,"op":"Sync","minor":2},{"major":253,"value":20480,"op":"Async","minor":2},{"major":253,"value":20480,"op":"Total","minor":2}],"io_wait_time_recursive":[],"io_merged_recursive":[],"io_service_time_recursive":[]},"memory_stats":{"usage":181514240,"max_usage":632619008,"stats":{"hierarchical_memory_limit":9223372036854771712,"pgmajfault":0,"total_rss":173150208,"inactive_file":8192,"inactive_anon":909312,"total_pgfault":768237,"total_cache":2347008,"total_rss_huge":0,"total_active_anon":174551040,"total_pgmajfault":0,"pgpgin":299508,"rss_huge":0,"mapped_file":0,"total_inactive_file":8192,"dirty":0,"total_unevictable":0,"total_dirty":0,"writeback":0,"pgpgout":256662,"hierarchical_memsw_limit":0,"cache":2347008,"active_file":0,"pgfault":768237,"total_mapped_file":0,"total_pgpgout":256662,"total_writeback":0,"rss":173150208,"unevictable":0,"total_inactive_anon":909312,"total_pgpgin":299508,"active_anon":174551040,"total_active_file":0},"limit":540972998656},"name":"/JuliaVariables-Anb90ewE","networks":{"eth0":{"rx_bytes":223469,"rx_packets":221,"tx_packets":134,"tx_bytes":18904,"tx_dropped":0,"rx_dropped":2,"tx_errors":0,"rx_errors":0}},"id":"412b005fb507e938475b469cdfd55610f5b2a2a0d26819218b770f15bd1f5bea","preread":"0001-01-01T00:00:00Z","storage_stats":{},"precpu_stats":{"throttling_data":{"throttled_periods":0,"throttled_time":0,"periods":0},"cpu_usage":{"usage_in_usermode":0,"usage_in_kernelmode":0,"total_usage":0}},"pids_stats":{"current":38},"num_procs":0,"cpu_stats":{"throttling_data":{"throttled_periods":0,"throttled_time":0,"periods":0},"system_cpu_usage":112657138890000000,"online_cpus":128,"cpu_usage":{"usage_in_usermode":59670000000,"usage_in_kernelmode":2440000000,"total_usage":62019051023,"percpu_usage":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62019051023,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},"read":"2020-10-30T04:02:08.647496342Z"}