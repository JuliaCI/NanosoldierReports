Julia Version 1.6.0-DEV.1148
Commit 7d3dac44dc (2020-10-06 21:26 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-10.0.1 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed SortingAlgorithms ── v0.3.1
  Installed DataAPI ──────────── v1.3.0
  Installed Parsers ──────────── v1.0.11
  Installed Missings ─────────── v0.4.4
  Installed DataStructures ───── v0.17.20
  Installed StatsBase ────────── v0.32.2
  Installed JSON ─────────────── v0.21.1
  Installed SimilaritySearch ─── v0.3.20
  Installed OrderedCollections ─ v1.3.1
Updating `~/.julia/environments/v1.6/Project.toml`
  [053f045d] + SimilaritySearch v0.3.20
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [9a962f9c] + DataAPI v1.3.0
  [864edb3b] + DataStructures v0.17.20
  [682c06a0] + JSON v0.21.1
  [e1d29d7a] + Missings v0.4.4
  [bac558e1] + OrderedCollections v1.3.1
  [69de0a69] + Parsers v1.0.11
  [053f045d] + SimilaritySearch v0.3.20
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [b77e0a4c] + InteractiveUtils
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [de0858da] + Printf
  [9a3f8284] + Random
  [9e88b42a] + Serialization
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [4ec0a83e] + Unicode
    Testing SimilaritySearch
Status `/tmp/jl_4Vf6iY/Project.toml`
  [864edb3b] DataStructures v0.17.20
  [682c06a0] JSON v0.21.1
  [053f045d] SimilaritySearch v0.3.20
  [2913bbd2] StatsBase v0.32.2
  [ade2ca70] Dates
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [10745b16] Statistics
  [8dfed614] Test
Status `/tmp/jl_4Vf6iY/Manifest.toml`
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.17.20
  [682c06a0] JSON v0.21.1
  [e1d29d7a] Missings v0.4.4
  [bac558e1] OrderedCollections v1.3.1
  [69de0a69] Parsers v1.0.11
  [053f045d] SimilaritySearch v0.3.20
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [b77e0a4c] InteractiveUtils
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [de0858da] Printf
  [9a3f8284] Random
  [9e88b42a] Serialization
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [4ec0a83e] Unicode
    Testing Running tests...
Test Summary: | Pass  Total
bit ops       |    3      3
res = KnnResult(4, 4, Item[Item(8, 0.008195162f0), Item(40, 0.021052241f0), Item(11, 0.02139771f0), Item(15, 0.082647204f0)])
Vsorted = Item[Item(8, 0.008195162f0), Item(40, 0.021052241f0), Item(11, 0.02139771f0), Item(15, 0.082647204f0)]
Test Summary: | Pass  Total
Result set    |    3      3
Test Summary: | Pass  Total
pairwise      |    1      1
(recall_lower_bound, dist) = (1.0, SimilaritySearch.l2_distance)
(dist, p) = (SimilaritySearch.l2_distance, PerformanceResult(1.0, 1.0, 1.0, 0.004265824953715007, 0.004293171564737955, 301.0, 49.69608796015382))
(recall_lower_bound, dist) = (1.0, SimilaritySearch.l1_distance)
(dist, p) = (SimilaritySearch.l1_distance, PerformanceResult(1.0, 1.0, 1.0, 0.003885618845621745, 0.004159402847290039, 301.0, 72.04325485229492))
(recall_lower_bound, dist) = (1.0, SimilaritySearch.linf_distance)
(dist, p) = (SimilaritySearch.linf_distance, PerformanceResult(1.0, 1.0, 1.0, 0.004711174964904785, 0.005355072021484375, 301.0, 40.793495535850525))
(recall_lower_bound, dist) = (0.1, SimilaritySearch.squared_l2_distance)
(dist, p) = (SimilaritySearch.squared_l2_distance, PerformanceResult(1.0, 1.0, 1.0, 0.0064073721567789715, 0.0043702363967895504, 301.0, 9.014606340031605))
(recall_lower_bound, dist) = (1.0, SimilaritySearch.var"#_lp#1"{Float64, Float64}(3.0, 0.3333333333333333))
(dist, p) = (SimilaritySearch.var"#_lp#1"{Float64, Float64}(3.0, 0.3333333333333333), PerformanceResult(1.0, 1.0, 1.0, 0.003590965270996094, 0.005747834841410319, 301.0, 45.13166111521423))
(recall_lower_bound, dist) = (0.1, SimilaritySearch.var"#_lp#1"{Float64, Float64}(0.5, 2.0))
(dist, p) = (SimilaritySearch.var"#_lp#1"{Float64, Float64}(0.5, 2.0), PerformanceResult(1.0, 1.0, 1.0, 3.886222839355469e-5, 2.3937225341796876e-5, 301.0, 178.24601186811924))
Test Summary:    | Pass  Total
indexing vectors |   18     18
[ Info: inserting items into the index
[ Info: inserting items into the index
[ Info: Creating a pivot table with 1 pivots and distance=jaccard_distance
[ Info: inserting items into the index
[ Info: inserting items into the index
[ Info: Creating a pivot table with 1 pivots and distance=dice_distance
[ Info: inserting items into the index
[ Info: inserting items into the index
[ Info: Creating a pivot table with 1 pivots and distance=intersection_distance
[ Info: inserting items into the index
[ Info: inserting items into the index
[ Info: Creating a pivot table with 1 pivots and distance=common_prefix_distance
[ Info: inserting items into the index
[ Info: inserting items into the index
[ Info: Creating a pivot table with 1 pivots and distance=levenshtein_distance
[ Info: inserting items into the index
[ Info: inserting items into the index
[ Info: Creating a pivot table with 1 pivots and distance=lcs_distance
[ Info: inserting items into the index
[ Info: inserting items into the index
[ Info: Creating a pivot table with 1 pivots and distance=hamming_distance
Test Summary:      | Pass  Total
indexing sequences |   28     28
p = PerformanceResult(1.0, 1.0, 1.0, 3.2734870910644534e-5, 0.010714427630106608, 300.0, 25.857425721362233)
p = PerformanceResult(1.0, 1.0, 1.0, 3.0350685119628906e-5, 1.9168853759765626e-5, 300.0, 25.857425721362233)
p = PerformanceResult(1.0, 1.0, 1.0, 0.003391448656717936, 0.003212134043375651, 300.0, 1.3791288401807833)
p = PerformanceResult(1.0, 1.0, 1.0, 2.5987625122070312e-5, 1.4162063598632812e-5, 300.0, 1.3791288401807833)
(p1, p2, p3, p4) = (PerformanceResult(1.0, 1.0, 1.0, 3.2734870910644534e-5, 0.010714427630106608, 300.0, 25.857425721362233), PerformanceResult(1.0, 1.0, 1.0, 3.0350685119628906e-5, 1.9168853759765626e-5, 300.0, 25.857425721362233), PerformanceResult(1.0, 1.0, 1.0, 0.003391448656717936, 0.003212134043375651, 300.0, 1.3791288401807833), PerformanceResult(1.0, 1.0, 1.0, 2.5987625122070312e-5, 1.4162063598632812e-5, 300.0, 1.3791288401807833))
[ Info: select_sss: db=Vector{Vector{UInt32}}, alpha=0.35, distance=hamming_distance, shuf=false
[ Info: the maximum distance estimated as 123.0, now selecting pivots
[ Info: Creating a pivot table with 300 pivots and distance=hamming_distance
p = PerformanceResult(1.0, 1.0, 1.0, 0.00758509635925293, 0.003511802355448405, 348.56666666666666, 28569.0)
[ Info: Creating a pivot table with 16 pivots and distance=hamming_distance
p = PerformanceResult(1.0, 1.0, 1.0, 0.006331149737040202, 0.0029113054275512694, 302.8333333333333, 6965.0)
Test Summary: | Pass  Total
misc          |   10     10
(recall_lower_bound, dist) = (1.0, SimilaritySearch.l2_distance)
Kvp = Kvp
[ Info: Kvp, refs=Vector{Vector{Float32}}, k=3, numrefs=32, dist=l2_distance
(dist, p) = (SimilaritySearch.l2_distance, PerformanceResult(1.0, 1.0, 1.0, 1.6617774963378907e-5, 8.304913838704428e-6, 100.1, 49.80263466760516))
(recall_lower_bound, dist) = (1.0, SimilaritySearch.l1_distance)
Kvp = Kvp
[ Info: Kvp, refs=Vector{Vector{Float32}}, k=3, numrefs=32, dist=l1_distance
(dist, p) = (SimilaritySearch.l1_distance, PerformanceResult(1.0, 1.0, 1.0, 1.629988352457682e-5, 6.731351216634115e-6, 88.86666666666666, 72.18340837955475))
(recall_lower_bound, dist) = (1.0, SimilaritySearch.linf_distance)
Kvp = Kvp
[ Info: Kvp, refs=Vector{Vector{Float32}}, k=3, numrefs=32, dist=linf_distance
(dist, p) = (SimilaritySearch.linf_distance, PerformanceResult(1.0, 1.0, 1.0, 1.2938181559244791e-5, 9.067853291829427e-6, 97.96666666666667, 40.90210998058319))
(recall_lower_bound, dist) = (1.0, SimilaritySearch.var"#_lp#1"{Float64, Float64}(3.0, 0.3333333333333333))
Kvp = Kvp
[ Info: Kvp, refs=Vector{Vector{Float32}}, k=3, numrefs=32, dist=_lp
(dist, p) = (SimilaritySearch.var"#_lp#1"{Float64, Float64}(3.0, 0.3333333333333333), PerformanceResult(1.0, 1.0, 1.0, 4.740556081136068e-5, 6.173451741536458e-5, 101.5, 45.24540891312063))
(recall_lower_bound, dist) = (0.1, SimilaritySearch.var"#_lp#1"{Float64, Float64}(0.5, 2.0))
Kvp = Kvp
[ Info: Kvp, refs=Vector{Vector{Float32}}, k=3, numrefs=32, dist=_lp
(dist, p) = (SimilaritySearch.var"#_lp#1"{Float64, Float64}(0.5, 2.0), PerformanceResult(0.8333333333333334, 0.8333333333333334, 0.8333333333333334, 1.846154530843099e-5, 2.4135907491048177e-5, 73.0, 186.86246366798878))
Test Summary:    | Pass  Total
indexing vectors |   10     10
[ Info: inserting items into the index
[ Info: Kvp, refs=Vector{Vector{Int64}}, k=3, numrefs=32, dist=jaccard_distance
[ Info: inserting items into the index
[ Info: Kvp, refs=Vector{Vector{Int64}}, k=3, numrefs=32, dist=dice_distance
[ Info: inserting items into the index
[ Info: Kvp, refs=Vector{Vector{Int64}}, k=3, numrefs=32, dist=intersection_distance
[ Info: inserting items into the index
[ Info: Kvp, refs=Vector{Vector{Int64}}, k=3, numrefs=32, dist=common_prefix_distance
[ Info: inserting items into the index
[ Info: Kvp, refs=Vector{Vector{Int64}}, k=3, numrefs=32, dist=levenshtein_distance
[ Info: inserting items into the index
[ Info: Kvp, refs=Vector{Vector{Int64}}, k=3, numrefs=32, dist=lcs_distance
[ Info: inserting items into the index
[ Info: Kvp, refs=Vector{Vector{Int64}}, k=3, numrefs=32, dist=hamming_distance
Test Summary:      | Pass  Total
indexing sequences |   14     14
*** advance 1 from 1000; 2020-10-08T06:13:31.026
(dist, p) = (SimilaritySearch.l2_distance, PerformanceResult(0.8833333333333334, 0.8800000000000001, 0.8812500000000001, 1.3909339904785157e-5, 1.121044158935547e-5, 151.58, 52.6458001161227))
[ Info: adding more items
(dist, p) = (SimilaritySearch.l2_distance, PerformanceResult(1.0, 1.0, 1.0, 1.566171646118164e-5, 1.2149810791015625e-5, 155.22, 0.0))
*** advance 1 from 1000; 2020-10-08T06:13:31.612
(dist, p) = (SimilaritySearch.l1_distance, PerformanceResult(0.8778888888888889, 0.877, 0.877421052631579, 1.4832019805908203e-5, 1.44195556640625e-5, 150.94, 78.58602553233504))
[ Info: adding more items
(dist, p) = (SimilaritySearch.l1_distance, PerformanceResult(1.0, 1.0, 1.0, 1.3644695281982421e-5, 1.0280609130859374e-5, 154.7, 0.0))
*** advance 1 from 1000; 2020-10-08T06:13:32.151
(dist, p) = (SimilaritySearch.linf_distance, PerformanceResult(0.872, 0.868, 0.8695, 1.575469970703125e-5, 1.9061565399169923e-5, 151.76, 43.24583719484508))
[ Info: adding more items
(dist, p) = (SimilaritySearch.linf_distance, PerformanceResult(1.0, 1.0, 1.0, 1.367807388305664e-5, 1.0318756103515625e-5, 155.45, 0.0))
*** advance 1 from 1000; 2020-10-08T06:13:32.710
(dist, p) = (SimilaritySearch.var"#_lp#1"{Float64, Float64}(3.0, 0.3333333333333333), PerformanceResult(0.8717500000000001, 0.8700000000000001, 0.8707777777777779, 4.300355911254883e-5, 0.00020309925079345703, 150.93, 47.77807829953963))
[ Info: adding more items
(dist, p) = (SimilaritySearch.var"#_lp#1"{Float64, Float64}(3.0, 0.3333333333333333), PerformanceResult(1.0, 1.0, 1.0, 4.3568611145019533e-5, 0.00020895957946777345, 154.56, 0.0))
*** advance 1 from 1000; 2020-10-08T06:13:33.118
(dist, p) = (SimilaritySearch.var"#_lp#1"{Float64, Float64}(0.5, 2.0), PerformanceResult(0.951, 0.951, 0.951, 2.8002262115478516e-5, 6.876945495605469e-5, 165.88, 194.40339515637606))
[ Info: adding more items
(dist, p) = (SimilaritySearch.var"#_lp#1"{Float64, Float64}(0.5, 2.0), PerformanceResult(1.0, 1.0, 1.0, 2.5854110717773437e-5, 7.29203224182129e-5, 170.9, 0.0))
*** advance 1 from 1000; 2020-10-08T06:13:33.864
(dist, p) = (SimilaritySearch.angle_distance, PerformanceResult(0.8833333333333334, 0.8800000000000001, 0.8812500000000001, 1.9512176513671876e-5, 4.852056503295898e-5, 151.58, 52.65793308254797))
[ Info: adding more items
(dist, p) = (SimilaritySearch.angle_distance, PerformanceResult(1.0, 1.0, 1.0, 1.8918514251708983e-5, 4.737138748168945e-5, 155.22, 0.015031004935735837))
Test Summary:    | Pass  Total
indexing vectors |   12     12
[ Info: inserting items into the index
*** advance 1 from 1000; 2020-10-08T06:13:35.390
(dist, p) = (SimilaritySearch.jaccard_distance, PerformanceResult(0.7830000000000003, 0.7830000000000003, 0.7830000000000003, 0.001591501235961914, 7.262945175170898e-5, 200.42, 179.2000020891428))
[ Info: inserting items into the index
*** advance 1 from 1000; 2020-10-08T06:13:36.445
(dist, p) = (SimilaritySearch.dice_distance, PerformanceResult(0.7740000000000005, 0.7740000000000005, 0.7740000000000005, 0.0015566587448120118, 6.705045700073243e-5, 201.28, 103.70000183582306))
[ Info: inserting items into the index
*** advance 1 from 1000; 2020-10-08T06:13:37.356
(dist, p) = (SimilaritySearch.intersection_distance, PerformanceResult(0.695, 0.695, 0.695, 0.0013875508308410645, 5.97691535949707e-5, 269.19, 0.75))
[ Info: inserting items into the index
*** advance 1 from 1000; 2020-10-08T06:13:38.098
(dist, p) = (SimilaritySearch.common_prefix_distance, PerformanceResult(0.9600000000000002, 0.9600000000000002, 0.9600000000000002, 0.0017911362648010253, 1.2500286102294922e-5, 220.6, 597.6000207364559))
[ Info: inserting items into the index
*** advance 1 from 1000; 2020-10-08T06:13:39.105
(dist, p) = (SimilaritySearch.levenshtein_distance, PerformanceResult(0.5890000000000001, 0.5890000000000001, 0.5890000000000001, 0.001535031795501709, 0.00022627115249633788, 258.39, 2319.0))
[ Info: inserting items into the index
*** advance 1 from 1000; 2020-10-08T06:13:39.957
(dist, p) = (SimilaritySearch.lcs_distance, PerformanceResult(0.39499999999999985, 0.39499999999999985, 0.39499999999999985, 0.0016513109207153321, 0.0003925895690917969, 252.81, 3644.0))
[ Info: inserting items into the index
*** advance 1 from 1000; 2020-10-08T06:13:40.854
(dist, p) = (SimilaritySearch.hamming_distance, PerformanceResult(0.5910000000000001, 0.5910000000000001, 0.5910000000000001, 0.0014362573623657227, 2.0008087158203125e-5, 248.8, 2362.0))
Test Summary:      | Pass  Total
indexing sequences |    7      7
[ Info: inserting items to the index
==== BEGIN Opt. IHCSearch, expected recall: 0.9, n: 9
  == Begin Opt. IHCSearch iteration: 1, expected recall: 0.9, n: 9
  == End Opt. IHCSearch. Iteration finished; {"score":2.089877010406812,"state":{"restarts":8},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.9489411630036635,"seconds":0.002383338287472725,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.2578125,"distances_sum":604.2895537018776}}, beam: 4, n: 9
==== END Opt. IHCSearch. Finished, best: {"score":2.089877010406812,"state":{"restarts":8},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.9489411630036635,"seconds":0.002383338287472725,"exhaustive_search_seconds":1.5851110219955444e-6,"evaluations":8.2578125,"distances_sum":604.2895537018776}}, n: 9
==== BEGIN Opt. IHCSearch, expected recall: 0.9, n: 99
  == Begin Opt. IHCSearch iteration: 1, expected recall: 0.9, n: 99
  == End Opt. IHCSearch. Iteration finished; {"score":3.002528445006321,"state":{"restarts":8},"perf":{"precision":0.9071180555555544,"recall":0.9071180555555544,"f1":0.9071180555555544,"seconds":1.566484570503235e-5,"exhaustive_search_seconds":5.116686224937439e-6,"evaluations":49.4375,"distances_sum":278.3865228611976}}, beam: 4, n: 99
==== END Opt. IHCSearch. Finished, best: {"score":3.002528445006321,"state":{"restarts":8},"perf":{"precision":0.9071180555555544,"recall":0.9071180555555544,"f1":0.9071180555555544,"seconds":1.566484570503235e-5,"exhaustive_search_seconds":5.116686224937439e-6,"evaluations":49.4375,"distances_sum":278.3865228611976}}, n: 99
==== BEGIN Opt. IHCSearch, expected recall: 0.9, n: 999
  == Begin Opt. IHCSearch iteration: 1, expected recall: 0.9, n: 999
  == End Opt. IHCSearch. Iteration finished; {"score":0.8741319444444432,"state":{"restarts":8},"perf":{"precision":0.8741319444444432,"recall":0.8741319444444432,"f1":0.8741319444444432,"seconds":3.2451003789901733e-5,"exhaustive_search_seconds":2.0133331418037415e-5,"evaluations":116.953125,"distances_sum":123.15926495473832}}, beam: 4, n: 999
==== END Opt. IHCSearch. Finished, best: {"score":0.8741319444444432,"state":{"restarts":8},"perf":{"precision":0.8741319444444432,"recall":0.8741319444444432,"f1":0.8741319444444432,"seconds":3.2451003789901733e-5,"exhaustive_search_seconds":2.0133331418037415e-5,"evaluations":116.953125,"distances_sum":123.15926495473832}}, n: 999
==== BEGIN Opt. IHCSearch, expected recall: 0.9, n: 9999
  == Begin Opt. IHCSearch iteration: 1, expected recall: 0.9, n: 9999
    ** Opt. IHCSearch. A new best conf was found> score: 0.8524305555555547, conf: {"restarts":7}, perf: {"precision":0.8524305555555547,"recall":0.8524305555555547,"f1":0.8524305555555547,"seconds":0.0001328159123659134,"exhaustive_search_seconds":0.00022460147738456726,"evaluations":182.484375,"distances_sum":57.82183604128659}, best_list's length: 2, n: 9999
    ** Opt. IHCSearch. A new best conf was found> score: 0.8602430555555545, conf: {"restarts":11}, perf: {"precision":0.8602430555555545,"recall":0.8602430555555545,"f1":0.8602430555555545,"seconds":8.975528180599213e-5,"exhaustive_search_seconds":0.00022460147738456726,"evaluations":219.140625,"distances_sum":57.191436192020774}, best_list's length: 3, n: 9999
    ** Opt. IHCSearch. A new best conf was found> score: 0.865451388888888, conf: {"restarts":22}, perf: {"precision":0.865451388888888,"recall":0.865451388888888,"f1":0.865451388888888,"seconds":0.00010797381401062012,"exhaustive_search_seconds":0.00022460147738456726,"evaluations":313.3671875,"distances_sum":57.2790064252913}, best_list's length: 4, n: 9999
  == End Opt. IHCSearch. Iteration finished; {"score":0.865451388888888,"state":{"restarts":22},"perf":{"precision":0.865451388888888,"recall":0.865451388888888,"f1":0.865451388888888,"seconds":0.00010797381401062012,"exhaustive_search_seconds":0.00022460147738456726,"evaluations":313.3671875,"distances_sum":57.2790064252913}}, beam: 4, n: 9999
  == Begin Opt. IHCSearch iteration: 2, expected recall: 0.9, n: 9999
  == End Opt. IHCSearch. Iteration finished; {"score":0.865451388888888,"state":{"restarts":22},"perf":{"precision":0.865451388888888,"recall":0.865451388888888,"f1":0.865451388888888,"seconds":0.00010797381401062012,"exhaustive_search_seconds":0.00022460147738456726,"evaluations":313.3671875,"distances_sum":57.2790064252913}}, beam: 4, n: 9999
==== END Opt. IHCSearch. Finished, best: {"score":0.865451388888888,"state":{"restarts":22},"perf":{"precision":0.865451388888888,"recall":0.865451388888888,"f1":0.865451388888888,"seconds":0.00010797381401062012,"exhaustive_search_seconds":0.00022460147738456726,"evaluations":313.3671875,"distances_sum":57.2790064252913}}, n: 9999
added n=10000, neighborhood=6, IHCSearch(22), SatNeighborhood(32), 2020-10-08T06:13:47.401
[ Info: done; now testing
res = KnnResult(10, 10, Item[Item(6603, 0.021964246f0), Item(9744, 0.026857948f0), Item(7709, 0.037943557f0), Item(3568, 0.040225808f0), Item(6426, 0.04049947f0), Item(5101, 0.044688787f0), Item(472, 0.04618133f0), Item(1934, 0.047979902f0), Item(236, 0.05341845f0), Item(4013, 0.054073647f0)])
[ Info: inserting items to the index
==== BEGIN Opt. BeamSearch, expected recall: 0.9, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":2.090909090909091,"state":{"bsize":3},"perf":{"precision":1.0,"recall":0.90625,"f1":0.9450148809523814,"seconds":0.003394661471247673,"exhaustive_search_seconds":1.8049031496047974e-6,"evaluations":8.25,"distances_sum":580.9600804597139}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":2.090909090909091,"state":{"bsize":3},"perf":{"precision":1.0,"recall":0.90625,"f1":0.9450148809523814,"seconds":0.003394661471247673,"exhaustive_search_seconds":1.8049031496047974e-6,"evaluations":8.25,"distances_sum":580.9600804597139}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.9, n: 99
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.9, n: 99
  == End Opt. BeamSearch. Iteration finished; {"score":4.122720551996057,"state":{"bsize":3},"perf":{"precision":0.9739583333333328,"recall":0.9739583333333328,"f1":0.9739583333333328,"seconds":1.0110437870025635e-5,"exhaustive_search_seconds":4.781410098075867e-6,"evaluations":31.703125,"distances_sum":284.5206292141229}}, beam: 4, n: 99
==== END Opt. BeamSearch. Finished, best: {"score":4.122720551996057,"state":{"bsize":3},"perf":{"precision":0.9739583333333328,"recall":0.9739583333333328,"f1":0.9739583333333328,"seconds":1.0110437870025635e-5,"exhaustive_search_seconds":4.781410098075867e-6,"evaluations":31.703125,"distances_sum":284.5206292141229}}, n: 99
==== BEGIN Opt. BeamSearch, expected recall: 0.9, n: 999
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.9, n: 999
  == End Opt. BeamSearch. Iteration finished; {"score":17.335206949412367,"state":{"bsize":3},"perf":{"precision":0.9730902777777773,"recall":0.9730902777777773,"f1":0.9730902777777773,"seconds":2.1237879991531372e-5,"exhaustive_search_seconds":1.9906088709831238e-5,"evaluations":61.15625,"distances_sum":120.74550032056868}}, beam: 4, n: 999
==== END Opt. BeamSearch. Finished, best: {"score":17.335206949412367,"state":{"bsize":3},"perf":{"precision":0.9730902777777773,"recall":0.9730902777777773,"f1":0.9730902777777773,"seconds":2.1237879991531372e-5,"exhaustive_search_seconds":1.9906088709831238e-5,"evaluations":61.15625,"distances_sum":120.74550032056868}}, n: 999
==== BEGIN Opt. BeamSearch, expected recall: 0.9, n: 9999
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.9, n: 9999
  == End Opt. BeamSearch. Iteration finished; {"score":95.8826451182445,"state":{"bsize":3},"perf":{"precision":0.9678819444444438,"recall":0.9678819444444438,"f1":0.9678819444444438,"seconds":4.236400127410889e-5,"exhaustive_search_seconds":0.0002826545387506485,"evaluations":105.3828125,"distances_sum":53.967672544997185}}, beam: 4, n: 9999
==== END Opt. BeamSearch. Finished, best: {"score":95.8826451182445,"state":{"bsize":3},"perf":{"precision":0.9678819444444438,"recall":0.9678819444444438,"f1":0.9678819444444438,"seconds":4.236400127410889e-5,"exhaustive_search_seconds":0.0002826545387506485,"evaluations":105.3828125,"distances_sum":53.967672544997185}}, n: 9999
added n=10000, neighborhood=4, BeamSearch(3), SatNeighborhood(32), 2020-10-08T06:13:50.776
[ Info: done; now testing
res = KnnResult(10, 10, Item[Item(502, 0.031057248f0), Item(9766, 0.04477918f0), Item(2325, 0.046543717f0), Item(6318, 0.054251205f0), Item(1073, 0.055346698f0), Item(5870, 0.05719373f0), Item(818, 0.06411111f0), Item(6478, 0.06601101f0), Item(4671, 0.06935287f0), Item(5187, 0.07290378f0)])
Test Summary:        | Pass  Total
some vector indexing |    2      2
    Testing SimilaritySearch tests passed 
