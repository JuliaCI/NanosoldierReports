Julia Version 1.6.0-DEV.1300
Commit f39cb43032 (2020-10-21 02:53 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807

   Resolving package versions...
   Installed MicroLogging â”€ v0.4.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [cecf6091] + MicroLogging v0.4.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [cecf6091] + MicroLogging v0.4.0
  [2a0f44e3] + Base64
  [b77e0a4c] + InteractiveUtils
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [9a3f8284] + Random
  [9e88b42a] + Serialization
  [8dfed614] + Test
Precompiling project... (tip: to disable auto-precompilation set ENV["JULIA_PKG_PRECOMPILE_AUTO"]=0)
[32m  âœ“ [39mMicroLogging
1 dependency successfully precompiled
     Testing MicroLogging
Status `/tmp/jl_dXB8s5/Project.toml`
  [cecf6091] MicroLogging v0.4.0
  [56ddb016] Logging
  [d6f4376e] Markdown
  [8dfed614] Test
Status `/tmp/jl_dXB8s5/Manifest.toml`
  [cecf6091] MicroLogging v0.4.0
  [2a0f44e3] Base64
  [b77e0a4c] InteractiveUtils
  [56ddb016] Logging
  [d6f4376e] Markdown
  [9a3f8284] Random
  [9e88b42a] Serialization
  [8dfed614] Test
     Testing Running tests...
ConsoleLogger: Test Failed at /home/pkgeval/.julia/packages/MicroLogging/sNmzu/test/ConsoleLogger.jl:169
  Expression: startswith(genmsg("msg", exception = (DivideError(), bt)), "â”Œ PREFIX msg\nâ”‚   exception =\nâ”‚    DivideError: integer division error\nâ”‚    Stacktrace:\nâ”‚     [1] func1() at")
   Evaluated: startswith("â”Œ PREFIX msg\nâ”‚   exception =\nâ”‚    DivideError: integer division error\nâ”‚    Stacktrace:\nâ”‚      [1] func1()\nâ”‚        @ Main ~/.julia/packages/MicroLogging/sNmzu/test/ConsoleLogger.jl:5\nâ”‚      [2] top-level scope\nâ”‚        @ ~/.julia/packages/MicroLogging/sNmzu/test/ConsoleLogger.jl:168\nâ”‚      [3] top-level scope\nâ”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144\nâ”‚      [4] top-level scope\nâ”‚        @ ~/.julia/packages/MicroLogging/sNmzu/test/ConsoleLogger.jl:9\nâ”‚      [5] include(fname::String)\nâ”‚        @ Base.MainInclude ./client.jl:444\nâ”‚      [6] top-level scope\nâ”‚        @ ~/.julia/packages/MicroLogging/sNmzu/test/runtests.jl:14\nâ”‚      [7] top-level scope\nâ”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144\nâ”‚      [8] top-level scope\nâ”‚        @ ~/.julia/packages/MicroLogging/sNmzu/test/runtests.jl:13\nâ”‚      [9] include(fname::String)\nâ”‚        @ Base.MainInclude ./client.jl:444\nâ”‚     [10] top-level scope\nâ”‚        @ none:6\nâ”‚     [11] eval(m::Module, e::Any)\nâ”‚        @ Core ./boot.jl:360\nâ”‚     [12] exec_options(opts::Base.JLOptions)\nâ”‚        @ Base ./client.jl:261\nâ”‚     [13] _start()\nâ”‚        @ Base ./client.jl:485\nâ”” SUFFIX\n", "â”Œ PREFIX msg\nâ”‚   exception =\nâ”‚    DivideError: integer division error\nâ”‚    Stacktrace:\nâ”‚     [1] func1() at")
Stacktrace:
 [1] top-level scope
   @ ~/.julia/packages/MicroLogging/sNmzu/test/ConsoleLogger.jl:169
 [2] top-level scope
   @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
 [3] top-level scope
   @ ~/.julia/packages/MicroLogging/sNmzu/test/ConsoleLogger.jl:9
Limiting large data structures: Test Failed at /home/pkgeval/.julia/packages/MicroLogging/sNmzu/test/ConsoleLogger.jl:179
  Expression: genmsg("msg", a = fill(1.00001, 100, 100), b = fill(2.00002, 10, 10)) == replace("â”Œ PREFIX msg\nâ”‚   a =\nâ”‚    100Ã—100 Array{Float64,2}:\nâ”‚     1.00001  1.00001  1.00001  1.00001  â€¦  1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001     1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001     1.00001  1.00001  1.00001\nâ”‚     â‹®                                   â‹±                           EOL\nâ”‚     1.00001  1.00001  1.00001  1.00001     1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001     1.00001  1.00001  1.00001\nâ”‚   b =\nâ”‚    10Ã—10 Array{Float64,2}:\nâ”‚     2.00002  2.00002  2.00002  2.00002  â€¦  2.00002  2.00002  2.00002\nâ”‚     2.00002  2.00002  2.00002  2.00002     2.00002  2.00002  2.00002\nâ”‚     2.00002  2.00002  2.00002  2.00002     2.00002  2.00002  2.00002\nâ”‚     â‹®                                   â‹±                           EOL\nâ”‚     2.00002  2.00002  2.00002  2.00002     2.00002  2.00002  2.00002\nâ”‚     2.00002  2.00002  2.00002  2.00002     2.00002  2.00002  2.00002\nâ”” SUFFIX\n", if VERSION < v"1.4"
                "EOL"
            else
                "       EOL"
            end => "")
   Evaluated: "â”Œ PREFIX msg\nâ”‚   a =\nâ”‚    100Ã—100 Matrix{Float64}:\nâ”‚     1.00001  1.00001  1.00001  1.00001  â€¦  1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001     1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001     1.00001  1.00001  1.00001\nâ”‚     â‹®                                   â‹±                    \nâ”‚     1.00001  1.00001  1.00001  1.00001     1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001     1.00001  1.00001  1.00001\nâ”‚   b =\nâ”‚    10Ã—10 Matrix{Float64}:\nâ”‚     2.00002  2.00002  2.00002  2.00002  â€¦  2.00002  2.00002  2.00002\nâ”‚     2.00002  2.00002  2.00002  2.00002     2.00002  2.00002  2.00002\nâ”‚     2.00002  2.00002  2.00002  2.00002     2.00002  2.00002  2.00002\nâ”‚     â‹®                                   â‹±                    \nâ”‚     2.00002  2.00002  2.00002  2.00002     2.00002  2.00002  2.00002\nâ”‚     2.00002  2.00002  2.00002  2.00002     2.00002  2.00002  2.00002\nâ”” SUFFIX\n" == "â”Œ PREFIX msg\nâ”‚   a =\nâ”‚    100Ã—100 Array{Float64,2}:\nâ”‚     1.00001  1.00001  1.00001  1.00001  â€¦  1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001     1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001     1.00001  1.00001  1.00001\nâ”‚     â‹®                                   â‹±                    \nâ”‚     1.00001  1.00001  1.00001  1.00001     1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001     1.00001  1.00001  1.00001\nâ”‚   b =\nâ”‚    10Ã—10 Array{Float64,2}:\nâ”‚     2.00002  2.00002  2.00002  2.00002  â€¦  2.00002  2.00002  2.00002\nâ”‚     2.00002  2.00002  2.00002  2.00002     2.00002  2.00002  2.00002\nâ”‚     2.00002  2.00002  2.00002  2.00002     2.00002  2.00002  2.00002\nâ”‚     â‹®                                   â‹±                    \nâ”‚     2.00002  2.00002  2.00002  2.00002     2.00002  2.00002  2.00002\nâ”‚     2.00002  2.00002  2.00002  2.00002     2.00002  2.00002  2.00002\nâ”” SUFFIX\n"
Stacktrace:
 [1] top-level scope
   @ ~/.julia/packages/MicroLogging/sNmzu/test/ConsoleLogger.jl:179
 [2] top-level scope
   @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
 [3] top-level scope
   @ ~/.julia/packages/MicroLogging/sNmzu/test/ConsoleLogger.jl:179
 [4] top-level scope
   @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
 [5] top-level scope
   @ ~/.julia/packages/MicroLogging/sNmzu/test/ConsoleLogger.jl:9
Limiting large data structures: Test Failed at /home/pkgeval/.julia/packages/MicroLogging/sNmzu/test/ConsoleLogger.jl:201
  Expression: genmsg("msg", a = fill(1.00001, 10, 10), show_limited = false) == "â”Œ PREFIX msg\nâ”‚   a =\nâ”‚    10Ã—10 Array{Float64,2}:\nâ”‚     1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001\nâ”” SUFFIX\n"
   Evaluated: "â”Œ PREFIX msg\nâ”‚   a =\nâ”‚    10Ã—10 Matrix{Float64}:\nâ”‚     1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001\nâ”” SUFFIX\n" == "â”Œ PREFIX msg\nâ”‚   a =\nâ”‚    10Ã—10 Array{Float64,2}:\nâ”‚     1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001\nâ”‚     1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001  1.00001\nâ”” SUFFIX\n"
Stacktrace:
 [1] top-level scope
   @ ~/.julia/packages/MicroLogging/sNmzu/test/ConsoleLogger.jl:201
 [2] top-level scope
   @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
 [3] top-level scope
   @ ~/.julia/packages/MicroLogging/sNmzu/test/ConsoleLogger.jl:179
 [4] top-level scope
   @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
 [5] top-level scope
   @ ~/.julia/packages/MicroLogging/sNmzu/test/ConsoleLogger.jl:9
Test Summary:                            | Pass  Fail  Total
Logging                                  |   50     3     53
  Logger configuration                   |    6            6
  configure_logging implementations      |    4            4
  disable_logging with parse_level       |    1            1
  ConsoleLogger                          |   30     3     33
    Default metadata formatting          |    8            8
    Prefix and suffix layout             |    4            4
    Metadata suffix, right justification |    7            7
    Limiting large data structures       |          2      2
  Sticky messages without ANSI codes     |    3            3
  Sticky messages with ANSI codes        |    6            6
ERROR: LoadError: Some tests did not pass: 50 passed, 3 failed, 0 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/MicroLogging/sNmzu/test/runtests.jl:11
ERROR: Package MicroLogging errored during testing
Stacktrace:
  [1] pkgerror(msg::String)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1650
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:334
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:321
  [5] #test#62
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:71 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:70 [inlined]
  [7] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67
 [11] top-level scope
    @ none:31
