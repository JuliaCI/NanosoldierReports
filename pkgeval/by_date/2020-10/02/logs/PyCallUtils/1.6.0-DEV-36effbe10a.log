Julia Version 1.6.0-DEV.1117
Commit 36effbe10a (2020-10-02 17:38 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-10.0.1 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed PyCallUtils ──── v0.2.2
  Installed Parsers ──────── v1.0.10
  Installed MacroTools ───── v0.5.5
  Installed VersionParsing ─ v1.2.0
  Installed Conda ────────── v1.4.1
  Installed PyCall ───────── v1.92.1
  Installed JSON ─────────── v0.21.1
  Installed BSON ─────────── v0.2.6
  Installed Requires ─────── v1.1.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [02651160] + PyCallUtils v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [fbb218c0] + BSON v0.2.6
  [8f4d0f93] + Conda v1.4.1
  [682c06a0] + JSON v0.21.1
  [1914dd2f] + MacroTools v0.5.5
  [69de0a69] + Parsers v1.0.10
  [438e738f] + PyCall v1.92.1
  [02651160] + PyCallUtils v0.2.2
  [ae029012] + Requires v1.1.0
  [81def892] + VersionParsing v1.2.0
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [de0858da] + Printf
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building Conda ─→ `~/.julia/scratchspaces/44cfe95a-1eb2-52ea-b672-e2afdf69b78f/7a58bb32ce5d85f8bf7559aa7c2842f9aecf52fc/build.log`
   Building PyCall → `~/.julia/scratchspaces/44cfe95a-1eb2-52ea-b672-e2afdf69b78f/b6dff5fa725eff4f775f472acd86756d6e31fb02/build.log`
    Testing PyCallUtils
Status `/tmp/jl_Jza6G0/Project.toml`
  [fbb218c0] BSON v0.2.6
  [438e738f] PyCall v1.92.1
  [02651160] PyCallUtils v0.2.2
  [ae029012] Requires v1.1.0
  [9a3f8284] Random
  [9e88b42a] Serialization
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_Jza6G0/Manifest.toml`
  [fbb218c0] BSON v0.2.6
  [8f4d0f93] Conda v1.4.1
  [682c06a0] JSON v0.21.1
  [1914dd2f] MacroTools v0.5.5
  [69de0a69] Parsers v1.0.10
  [438e738f] PyCall v1.92.1
  [02651160] PyCallUtils v0.2.2
  [ae029012] Requires v1.1.0
  [81def892] VersionParsing v1.2.0
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [de0858da] Printf
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
WARNING: Method definition getindex(PyCall.PyObject, Union{AbstractString, Symbol}) in module PyCall at /home/pkgeval/.julia/packages/PyCall/BcTLp/src/PyCall.jl:337 overwritten in module PyCallUtils at /home/pkgeval/.julia/packages/PyCallUtils/DufyN/src/PyCallUtils.jl:45.
  ** incremental compilation may be fatally broken for this module **

WARNING: Method definition setindex!(PyCall.PyObject, Any, Union{AbstractString, Symbol}) in module PyCall at /home/pkgeval/.julia/packages/PyCall/BcTLp/src/PyCall.jl:346 overwritten in module PyCallUtils at /home/pkgeval/.julia/packages/PyCallUtils/DufyN/src/PyCallUtils.jl:46.
  ** incremental compilation may be fatally broken for this module **

WARNING: Method definition getindex(PyCall.PyObject, Integer) in module PyCall at deprecated.jl:70 overwritten in module PyCallUtils at /home/pkgeval/.julia/packages/PyCallUtils/DufyN/src/PyCallUtils.jl:48.
  ** incremental compilation may be fatally broken for this module **

WARNING: Method definition getindex(PyCall.PyObject, Integer, Integer) in module PyCall at deprecated.jl:70 overwritten in module PyCallUtils at /home/pkgeval/.julia/packages/PyCallUtils/DufyN/src/PyCallUtils.jl:49.
  ** incremental compilation may be fatally broken for this module **

WARNING: Method definition getindex(PyCall.PyObject, Integer...) in module PyCall at deprecated.jl:70 overwritten in module PyCallUtils at /home/pkgeval/.julia/packages/PyCallUtils/DufyN/src/PyCallUtils.jl:50.
  ** incremental compilation may be fatally broken for this module **

WARNING: Method definition setindex!(PyCall.PyObject, Any, Integer) in module PyCall at deprecated.jl:70 overwritten in module PyCallUtils at /home/pkgeval/.julia/packages/PyCallUtils/DufyN/src/PyCallUtils.jl:51.
  ** incremental compilation may be fatally broken for this module **

WARNING: Method definition setindex!(PyCall.PyObject, Any, Integer, Integer) in module PyCall at deprecated.jl:70 overwritten in module PyCallUtils at /home/pkgeval/.julia/packages/PyCallUtils/DufyN/src/PyCallUtils.jl:52.
  ** incremental compilation may be fatally broken for this module **

WARNING: Method definition setindex!(PyCall.PyObject, Any, Integer...) in module PyCall at deprecated.jl:70 overwritten in module PyCallUtils at /home/pkgeval/.julia/packages/PyCallUtils/DufyN/src/PyCallUtils.jl:53.
  ** incremental compilation may be fatally broken for this module **

WARNING: Method definition jlwrap_iterator(Any) in module PyCall at /home/pkgeval/.julia/packages/PyCall/BcTLp/src/pyiterator.jl:137 overwritten in module PyCallUtils at /home/pkgeval/.julia/packages/PyCallUtils/DufyN/src/PyCallUtils.jl:55.
  ** incremental compilation may be fatally broken for this module **

Error During Test at /home/pkgeval/.julia/packages/PyCallUtils/DufyN/test/runtests.jl:14
  Test threw exception
  Expression: convert(SparseMatrixCSC, PyObject(x)) == x
  PyError (PyImport_ImportModule
  
  The Python package scipy.sparse could not be imported by pyimport. Usually this means
  that you did not install scipy.sparse in the Python version being used by PyCall.
  
  PyCall is currently configured to use the Julia-specific Python distribution
  installed by the Conda.jl package.  To install the scipy.sparse module, you can
  use `pyimport_conda("scipy.sparse", PKG)`, where PKG is the Anaconda
  package the contains the module scipy.sparse, or alternatively you can use the
  Conda package directly (via `using Conda` followed by `Conda.add` etcetera).
  
  Alternatively, if you want to use a different Python distribution on your
  system, such as a system-wide Python (as opposed to the Julia-specific Python),
  you can re-configure PyCall with that Python.   As explained in the PyCall
  documentation, set ENV["PYTHON"] to the path/name of the python executable
  you want to use, run Pkg.build("PyCall"), and re-launch Julia.
  
  ) <class 'ModuleNotFoundError'>
  ModuleNotFoundError("No module named 'scipy'")
  
  Stacktrace:
   [1] pyimport(name::String)
     @ PyCall ~/.julia/packages/PyCall/BcTLp/src/PyCall.jl:547
   [2] PyObject(S::SparseMatrixCSC{Float64, Int64})
     @ PyCallUtils ~/.julia/packages/PyCallUtils/DufyN/src/PyCallUtils.jl:67
   [3] top-level scope
     @ ~/.julia/packages/PyCallUtils/DufyN/test/runtests.jl:14
   [4] include(fname::String)
     @ Base.MainInclude ./client.jl:444
   [5] top-level scope
     @ none:6
   [6] eval(m::Module, e::Any)
     @ Core ./boot.jl:360
   [7] exec_options(opts::Base.JLOptions)
     @ Base ./client.jl:261
   [8] _start()
     @ Base ./client.jl:485
ERROR: LoadError: There was an error during testing
in expression starting at /home/pkgeval/.julia/packages/PyCallUtils/DufyN/test/runtests.jl:14
ERROR: Package PyCallUtils errored during testing
Stacktrace:
  [1] pkgerror(msg::String)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1609
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:331
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:318
  [5] #test#62
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [7] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope
    @ none:19
