Julia Version 1.6.0-DEV.1101
Commit 2fe2b43606 (2020-10-01 16:59 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-10.0.1 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed RBNF ─────────────── v0.2.0
  Installed PrettyPrint ──────── v0.2.0
  Installed OrderedCollections ─ v1.3.1
  Installed Compat ───────────── v3.18.0
  Installed DataStructures ───── v0.18.6
  Installed MLStyle ──────────── v0.4.6
Updating `~/.julia/environments/v1.6/Project.toml`
  [83ef0002] + RBNF v0.2.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [34da2185] + Compat v3.18.0
  [864edb3b] + DataStructures v0.18.6
  [d8e11817] + MLStyle v0.4.6
  [bac558e1] + OrderedCollections v1.3.1
  [8162dcfd] + PrettyPrint v0.2.0
  [83ef0002] + RBNF v0.2.0
  [56f22d72] + Artifacts
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing RBNF
Status `/tmp/jl_N6DsO8/Project.toml`
  [864edb3b] DataStructures v0.18.6
  [d8e11817] MLStyle v0.4.6
  [8162dcfd] PrettyPrint v0.2.0
  [83ef0002] RBNF v0.2.0
  [8dfed614] Test
Status `/tmp/jl_N6DsO8/Manifest.toml`
  [34da2185] Compat v3.18.0
  [864edb3b] DataStructures v0.18.6
  [d8e11817] MLStyle v0.4.6
  [bac558e1] OrderedCollections v1.3.1
  [8162dcfd] PrettyPrint v0.2.0
  [83ef0002] RBNF v0.2.0
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Main.QASM.Struct_mainprogram(
  ver=Token{nnreal}(str=2.0, lineno=1, colno=1),
  prog=[
         Main.QASM.Struct_gate(
           decl=Main.QASM.Struct_gatedecl(
                  id=Token{id}(str=cu1, lineno=3, colno=3),
                  arglist1=Token{id}(str=lambda, lineno=3, colno=3),
                  arglist2=(
                             Token{id}(str=a, lineno=3, colno=3),
                             Token{id}(str=b, lineno=3, colno=3),
                           ),
                ),
           goplist=[
                     Main.QASM.Struct_u(
                       exprs=(
                               (
                                 Token{nninteger}(str=0, lineno=5, colno=5),
                                 Token{nninteger}(str=0, lineno=5, colno=5),
                               ),
                               (
                                 Token{id}(str=theta, lineno=5, colno=5),
                                 Token{unnamed}(str=/, lineno=5, colno=5),
                                 Token{nninteger}(str=2, lineno=5, colno=5),
                               ),
                             ),
                       arg=Main.QASM.Struct_argument(
                             id=Token{id}(str=a, lineno=5, colno=5),
                             arg=nothing,
                           ),
                     ),
                     Main.QASM.Struct_cx(
                       arg1=Main.QASM.Struct_argument(
                              id=Token{id}(str=a, lineno=6, colno=6),
                              arg=nothing,
                            ),
                       arg2=Main.QASM.Struct_argument(
                              id=Token{id}(str=b, lineno=6, colno=6),
                              arg=nothing,
                            ),
                     ),
                     Main.QASM.Struct_u(
                       exprs=(
                               (
                                 Token{nninteger}(str=0, lineno=7, colno=7),
                                 Token{nninteger}(str=0, lineno=7, colno=7),
                               ),
                               Main.QASM.Struct_neg(
                                 value=(
                                         Token{id}(str=theta, lineno=7, colno=7),
                                         Token{unnamed}(str=/, lineno=7, colno=7),
                                         Token{nninteger}(str=2, lineno=7, colno=7),
                                       ),
                               ),
                             ),
                       arg=Main.QASM.Struct_argument(
                             id=Token{id}(str=b, lineno=7, colno=7),
                             arg=nothing,
                           ),
                     ),
                     Main.QASM.Struct_cx(
                       arg1=Main.QASM.Struct_argument(
                              id=Token{id}(str=a, lineno=8, colno=8),
                              arg=nothing,
                            ),
                       arg2=Main.QASM.Struct_argument(
                              id=Token{id}(str=b, lineno=8, colno=8),
                              arg=nothing,
                            ),
                     ),
                     Main.QASM.Struct_u(
                       exprs=(
                               (
                                 Token{nninteger}(str=0, lineno=9, colno=9),
                                 Token{nninteger}(str=0, lineno=9, colno=9),
                               ),
                               (
                                 Token{id}(str=theta, lineno=9, colno=9),
                                 Token{unnamed}(str=/, lineno=9, colno=9),
                                 Token{nninteger}(str=2, lineno=9, colno=9),
                               ),
                             ),
                       arg=Main.QASM.Struct_argument(
                             id=Token{id}(str=b, lineno=9, colno=9),
                             arg=nothing,
                           ),
                     ),
                   ],
         ),
         Main.QASM.Struct_decl(
           regtype=Token{id}(str=qreg, lineno=12, colno=12),
           id=Token{id}(str=q, lineno=12, colno=12),
           int=Token{nninteger}(str=3, lineno=12, colno=12),
         ),
         Main.QASM.Struct_decl(
           regtype=Token{id}(str=qreg, lineno=13, colno=13),
           id=Token{id}(str=a, lineno=13, colno=13),
           int=Token{nninteger}(str=2, lineno=13, colno=13),
         ),
         Main.QASM.Struct_decl(
           regtype=Token{id}(str=creg, lineno=14, colno=14),
           id=Token{id}(str=c, lineno=14, colno=14),
           int=Token{nninteger}(str=3, lineno=14, colno=14),
         ),
         Main.QASM.Struct_decl(
           regtype=Token{id}(str=creg, lineno=15, colno=15),
           id=Token{id}(str=syn, lineno=15, colno=15),
           int=Token{nninteger}(str=2, lineno=15, colno=15),
         ),
         Main.QASM.Struct_iduop(
           op=Token{id}(str=cu1, lineno=16, colno=16),
           lst1=(
                  Token{id}(str=pi, lineno=16, colno=16),
                  Token{unnamed}(str=/, lineno=16, colno=16),
                  Token{nninteger}(str=2, lineno=16, colno=16),
                ),
           lst2=(
                  Main.QASM.Struct_mixeditem(
                    id=Token{id}(str=q, lineno=16, colno=16),
                    arg=Token{nninteger}(str=0, lineno=16, colno=16),
                  ),
                  Main.QASM.Struct_mixeditem(
                    id=Token{id}(str=q, lineno=16, colno=16),
                    arg=Token{nninteger}(str=1, lineno=16, colno=16),
                  ),
                ),
         ),
       ],
)RModule(
  hd=Token{reserved}(str=module, lineno=1, colno=1),
  name=Token{id}(str=Poly, lineno=1, colno=1),
  stmts=[
          RDefine(
            hd=Token{reserved}(str=def, lineno=2, colno=2),
            name=Token{id}(str=a, lineno=2, colno=2),
            value=RExp(
                    hd=RComp(
                         forall=nothing,
                         value=RCall(
                                 fn=RAnnotate(
                                      value=RStr(
                                              value=Token{str}(str="12\"3", lineno=2, colno=2),
                                            ),
                                    ),
                                 args=[],
                               ),
                       ),
                    tl=[],
                  ),
          ),
          RClass(
            hd=Token{reserved}(str=class, lineno=4, colno=4),
            name=Token{id}(str=Monad, lineno=4, colno=4),
            ids=[
                  Token{id}(str=m, lineno=4, colno=4),
                ],
            constrains=RConstaints(
                         hd=Token{reserved}(str=that, lineno=4, colno=4),
                         elts=GoodSeq{Any}(
                                head=RCall(
                                       fn=RAnnotate(
                                            value=RVar(
                                                    value=Token{id}(str=Functor, lineno=4, colno=4),
                                                  ),
                                          ),
                                       args=[
                                              RAnnotate(
                                                value=RVar(
                                                        value=Token{id}(str=m, lineno=4, colno=4),
                                                      ),
                                              ),
                                            ],
                                     ),
                                tail=[],
                              ),
                       ),
            interfaces=[
                         RDecl(
                           hd=Token{reserved}(str=val, lineno=5, colno=5),
                           name=Token{id}(str=bind, lineno=5, colno=5),
                           typ=RExp(
                                 hd=RComp(
                                      forall=RForall(
                                               fresh=[
                                                       Token{id}(str=a, lineno=5, colno=5),
                                                       Token{id}(str=b, lineno=5, colno=5),
                                                     ],
                                               constraints=nothing,
                                             ),
                                      value=RCall(
                                              fn=RAnnotate(
                                                   value=RVar(
                                                           value=Token{id}(str=m, lineno=5, colno=5),
                                                         ),
                                                 ),
                                              args=[
                                                     RAnnotate(
                                                       value=RVar(
                                                               value=Token{id}(str=a, lineno=5, colno=5),
                                                             ),
                                                     ),
                                                   ],
                                            ),
                                    ),
                                 tl=[
                                      [Unreachable reached at 0x7fad7f43882f

signal (4): Illegal instruction
in expression starting at /home/pkgeval/.julia/packages/RBNF/z8tgF/test/reml.jl:126
Generator at ./generator.jl:32 [inlined]
Generator at ./generator.jl:32 [inlined]
pprint_for_seq at /home/pkgeval/.julia/packages/PrettyPrint/z2Fty/src/PrettyPrint.jl:60
unknown function (ip: 0x7fad7f4387bf)
unknown function (ip: 0x74c9)
Allocations: 26743461 (Pool: 26735555; Big: 7906); GC: 34
ERROR: Package RBNF errored during testing (received signal: 4)
Stacktrace:
  [1] pkgerror(msg::String)
    @ Pkg.Types /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1609
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:331
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:318
  [5] #test#62
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [6] test
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [7] #test#61
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [8] test
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(pkg::String)
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope
    @ none:19
