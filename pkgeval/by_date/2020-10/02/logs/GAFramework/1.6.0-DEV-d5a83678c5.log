Julia Version 1.6.0-DEV.1109
Commit d5a83678c5 (2020-10-02 08:27 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-10.0.1 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed GAFramework ─ v0.4.1
  Installed FileIO ────── v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [56f22d72] + Artifacts
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing GAFramework
Status `/tmp/jl_giqfDK/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_giqfDK/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21723246571203875
curgen: 20 fitness: 0.21723246571203875
curgen: 30 fitness: 0.21723246571203875
curgen: 40 fitness: 0.21723246571203875
curgen: 50 fitness: 0.21723246571203875
CoordinateCreature{Vector{Float64}}([0.22238620685529698], -0.21723246571203875) 0.22238620685529698 -0.21723246571203875
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2574826853071603
curgen: 100 fitness: 3.2578875615539054
curgen: 150 fitness: 3.2581800009172843
curgen: 200 fitness: 3.258202995676089
curgen: 250 fitness: 3.2583342583629444
curgen: 300 fitness: 3.258357827414219
curgen: 350 fitness: 3.2583873065260307
curgen: 400 fitness: 3.2583921434000502
curgen: 450 fitness: 3.2584525020455124
curgen: 500 fitness: 3.2584525020455124
CoordinateCreature{Vector{Float64}}([-0.22260722206058312, -0.22311583801673823, -0.2223213329480976, 0.22209282989239856, 0.2227025900571312, 0.2228080355242982, -0.2221213353282002, -0.22253069499799982, -0.22254100883829536, -0.2225232560273806, -0.22254454560064674, -0.22204101760618747, 0.2227776711796221, -0.2225808719398782, -0.22250363675407905], -3.2584525020455124) [-0.22260722206058312, -0.22311583801673823, -0.2223213329480976, 0.22209282989239856, 0.2227025900571312, 0.2228080355242982, -0.2221213353282002, -0.22253069499799982, -0.22254100883829536, -0.2225232560273806, -0.22254454560064674, -0.22204101760618747, 0.2227776711796221, -0.2225808719398782, -0.22250363675407905] -3.2584525020455124
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0012000071402553658
curgen: 100 fitness: -0.0011715834639005607
curgen: 150 fitness: -0.0009478339133295322
curgen: 200 fitness: -0.0009478339133295322
curgen: 250 fitness: -0.0009009101272567932
curgen: 300 fitness: -0.0007711642367098648
curgen: 350 fitness: -0.0007632905841035154
curgen: 400 fitness: -0.0007632905841035154
curgen: 450 fitness: -0.0007555742060390003
curgen: 500 fitness: -0.0007555742060390003
CoordinateCreature{Vector{Float64}}([8.655748776374358e-5, 0.00036391354156495217, -2.2674163840462444e-5, -0.00037387679383407577, 5.016360976231723e-5, -8.846248184044697e-5, 0.0004682370776243304, -0.00040047884403827396, -0.0001974598519257401, -0.0002286664921602269, -0.0016997479592437336, 0.00013441939682153498, 3.7048739933778394e-5, -0.00023174201356773272, 0.00029112783186431736], 0.0007555742060390003) [8.655748776374358e-5, 0.00036391354156495217, -2.2674163840462444e-5, -0.00037387679383407577, 5.016360976231723e-5, -8.846248184044697e-5, 0.0004682370776243304, -0.00040047884403827396, -0.0001974598519257401, -0.0002286664921602269, -0.0016997479592437336, 0.00013441939682153498, 3.7048739933778394e-5, -0.00023174201356773272, 0.00029112783186431736] 0.0007555742060390003
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
    Testing GAFramework tests passed 
