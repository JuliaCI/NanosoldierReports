Julia Version 1.6.0-DEV.1276
Commit 2655a3ad5d (2020-10-18 19:49 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807

   Resolving package versions...
   Installed GAFramework â”€ v0.4.1
   Installed FileIO â”€â”€â”€â”€â”€â”€ v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [0dad84c5] + ArgTools
  [56f22d72] + Artifacts
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [f43a241f] + Downloads
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [b27032c2] + LibCURL
  [deac9b47] + LibCURL_jll
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [14a3606d] + MozillaCACerts_jll
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
Precompiling project... (tip: to disable auto-precompilation set ENV["JULIA_PKG_PRECOMPILE_AUTO"]=0)
[90m[32m  âœ“ [39mFileIO[39m
[32m  âœ“ [39mGAFramework
2 dependencies successfully precompiled
     Testing GAFramework
Status `/tmp/jl_Wky24X/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_Wky24X/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [0dad84c5] ArgTools
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [f43a241f] Downloads
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [b27032c2] LibCURL
  [deac9b47] LibCURL_jll
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [14a3606d] MozillaCACerts_jll
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
     Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.2172197514522171
curgen: 20 fitness: 0.21722534724566678
curgen: 30 fitness: 0.21722534724566678
curgen: 40 fitness: 0.21722534724566678
curgen: 50 fitness: 0.21722534724566678
CoordinateCreature{Vector{Float64}}([0.22298117455325245], -0.21722534724566678) 0.22298117455325245 -0.21722534724566678
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2577609610320075
curgen: 100 fitness: 3.2579414751313536
curgen: 150 fitness: 3.258131669017199
curgen: 200 fitness: 3.258204420962401
curgen: 250 fitness: 3.258321959238478
curgen: 300 fitness: 3.2583776714619903
curgen: 350 fitness: 3.258381396707492
curgen: 400 fitness: 3.25845992178657
curgen: 450 fitness: 3.2584611811676347
curgen: 500 fitness: 3.258461619441445
CoordinateCreature{Vector{Float64}}([0.22250383946799412, 0.22280320219567393, 0.22262753726698664, 0.22229098265243943, -0.2228574858125941, 0.22250276170770225, 0.22244523478844888, -0.22266820291859107, 0.22286246169472038, 0.22273601083870664, -0.222875601199078, 0.22278611046256233, -0.22245883660100002, -0.2224699442796409, -0.22317636203554655], -3.258461619441445) [0.22250383946799412, 0.22280320219567393, 0.22262753726698664, 0.22229098265243943, -0.2228574858125941, 0.22250276170770225, 0.22244523478844888, -0.22266820291859107, 0.22286246169472038, 0.22273601083870664, -0.222875601199078, 0.22278611046256233, -0.22245883660100002, -0.2224699442796409, -0.22317636203554655] -3.258461619441445
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0006164919014395309
curgen: 100 fitness: -0.0005745999481518993
curgen: 150 fitness: -0.0005649186063010347
curgen: 200 fitness: -0.0005530145140255627
curgen: 250 fitness: -0.0004786888835042191
curgen: 300 fitness: -0.0004017869271137897
curgen: 350 fitness: -0.0004017869271137897
curgen: 400 fitness: -0.0004017869271137897
curgen: 450 fitness: -0.0004017869271137897
curgen: 500 fitness: -0.00034166483010267257
CoordinateCreature{Vector{Float64}}([-6.759582620101843e-5, -7.313232910494875e-5, -0.00024409647021305996, -0.00013187395232480475, 3.934168763379365e-5, -1.2528697110735225e-5, 0.0004308546314262568, -7.653823849023626e-5, -0.00010742412666475145, 3.0738284560124693e-5, 1.3600292458102685e-5, -0.00012088684916212252, 0.0008454288242613538, 0.0008064089477734084, -0.00022305659632713843], 0.00034166483010267257) [-6.759582620101843e-5, -7.313232910494875e-5, -0.00024409647021305996, -0.00013187395232480475, 3.934168763379365e-5, -1.2528697110735225e-5, 0.0004308546314262568, -7.653823849023626e-5, -0.00010742412666475145, 3.0738284560124693e-5, 1.3600292458102685e-5, -0.00012088684916212252, 0.0008454288242613538, 0.0008064089477734084, -0.00022305659632713843] 0.00034166483010267257
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
     Testing GAFramework tests passed 
