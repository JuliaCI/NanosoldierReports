Julia Version 1.6.0-DEV.1284
Commit 8c11d3c89e (2020-10-19 22:38 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807

   Resolving package versions...
   Installed FileIO â”€â”€â”€â”€â”€â”€ v1.4.3
   Installed GAFramework â”€ v0.4.1
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [0dad84c5] + ArgTools
  [56f22d72] + Artifacts
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [f43a241f] + Downloads
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [b27032c2] + LibCURL
  [deac9b47] + LibCURL_jll
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [14a3606d] + MozillaCACerts_jll
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
Precompiling project... (tip: to disable auto-precompilation set ENV["JULIA_PKG_PRECOMPILE_AUTO"]=0)
[90m[32m  âœ“ [39mFileIO[39m
[32m  âœ“ [39mGAFramework
2 dependencies successfully precompiled
     Testing GAFramework
Status `/tmp/jl_dfrxEW/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_dfrxEW/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [0dad84c5] ArgTools
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [f43a241f] Downloads
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [b27032c2] LibCURL
  [deac9b47] LibCURL_jll
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [14a3606d] MozillaCACerts_jll
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
     Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.2172245387150366
curgen: 20 fitness: 0.2172245387150366
curgen: 30 fitness: 0.2172335928413233
curgen: 40 fitness: 0.2172335928413233
curgen: 50 fitness: 0.2172335928413233
CoordinateCreature{Vector{Float64}}([0.22251989795989574], -0.2172335928413233) 0.22251989795989574 -0.2172335928413233
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2580998945639794
curgen: 100 fitness: 3.258250518871555
curgen: 150 fitness: 3.2582715785394845
curgen: 200 fitness: 3.2583184808750536
curgen: 250 fitness: 3.2583235058555164
curgen: 300 fitness: 3.25839007064339
curgen: 350 fitness: 3.2583909145783205
curgen: 400 fitness: 3.2584126473343855
curgen: 450 fitness: 3.258429692318558
curgen: 500 fitness: 3.2584300419699352
CoordinateCreature{Vector{Float64}}([-0.22223380052084726, 0.22245138244339746, 0.22258541631130402, -0.22206339183617932, 0.2226744173149993, 0.2218813261956798, -0.2222199722103233, 0.22239868269894345, -0.22291052290562172, -0.22238203552233674, -0.22257474410083466, 0.22223082021753435, 0.22253403868395175, -0.22323865692690203, 0.22262851904847333], -3.2584300419699352) [-0.22223380052084726, 0.22245138244339746, 0.22258541631130402, -0.22206339183617932, 0.2226744173149993, 0.2218813261956798, -0.2222199722103233, 0.22239868269894345, -0.22291052290562172, -0.22238203552233674, -0.22257474410083466, 0.22223082021753435, 0.22253403868395175, -0.22323865692690203, 0.22262851904847333] -3.2584300419699352
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0018649323495765202
curgen: 100 fitness: -0.0018268102335525782
curgen: 150 fitness: -0.0015138761636706022
curgen: 200 fitness: -0.0014879099803692952
curgen: 250 fitness: -0.0012359264302403972
curgen: 300 fitness: -0.0012359264302403972
curgen: 350 fitness: -0.0012083085298399965
curgen: 400 fitness: -0.0012083085298399965
curgen: 450 fitness: -0.0008576996007434445
curgen: 500 fitness: -0.0007741422547837828
CoordinateCreature{Vector{Float64}}([0.0004434785707903674, -0.001302381065522743, -9.829642793846655e-5, 1.3246702749106372e-6, 0.0006042551049201113, -0.00014648775672856102, 0.0008941456619899557, 0.0005556601343649887, -0.00023840925649762468, 8.84892895652406e-5, -0.0002331929036676943, -4.1544469835874464e-5, 4.028148311572156e-5, 0.000105190356927886, -0.0006093128728556331], 0.0007741422547837828) [0.0004434785707903674, -0.001302381065522743, -9.829642793846655e-5, 1.3246702749106372e-6, 0.0006042551049201113, -0.00014648775672856102, 0.0008941456619899557, 0.0005556601343649887, -0.00023840925649762468, 8.84892895652406e-5, -0.0002331929036676943, -4.1544469835874464e-5, 4.028148311572156e-5, 0.000105190356927886, -0.0006093128728556331] 0.0007741422547837828
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
     Testing GAFramework tests passed 
