Current time is 2020-10-25T09:17:36.606
Julia Version 1.6.0-DEV.1325
Commit d474c98667 (2020-10-24 16:32 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807
  JULIA_PKG_SERVER = 

Starting installation at 2020-10-25T09:17:38.783
   Resolving package versions...
   Installed MayOptimize â”€ v0.2.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [049513e6] + MayOptimize v0.2.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [049513e6] + MayOptimize v0.2.0
Precompiling project... (tip: to disable auto-precompilation set ENV["JULIA_PKG_PRECOMPILE_AUTO"]=0)
[32m  âœ“ [39mMayOptimize
1 dependency successfully precompiled
Starting tests at 2020-10-25T09:17:42.586
     Testing MayOptimize
Status `/tmp/jl_pXfbWW/Project.toml`
  [6e4b80f9] BenchmarkTools v0.5.0
  [049513e6] MayOptimize v0.2.0
  [37e2e46d] LinearAlgebra
  [8dfed614] Test
Status `/tmp/jl_pXfbWW/Manifest.toml`
  [6e4b80f9] BenchmarkTools v0.5.0
  [682c06a0] JSON v0.21.1
  [049513e6] MayOptimize v0.2.0
  [69de0a69] Parsers v1.0.11
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [b77e0a4c] InteractiveUtils
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [de0858da] Printf
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
     Testing Running tests...
Test Summary: | Pass  Total
Macros        |   62     62

Tests for T=Float32 and 10000 elements ("Basic" is Julia own implementation):
 - Time for `sum(Basic,x)` -------->   9.580 Î¼s (0 allocations: 0 bytes)
 - Time for `sum(Debug,x)` -------->   10.390 Î¼s (0 allocations: 0 bytes)
 - Time for `sum(InBounds,x)` ----->   9.779 Î¼s (0 allocations: 0 bytes)
 - Time for `sum(Vectorize,x)` ---->   10.469 Î¼s (0 allocations: 0 bytes)

 - Time for `dot(Basic,x,y)` -------->   816.097 ns (0 allocations: 0 bytes)
 - Time for `dot(Debug,x,y)` -------->   9.393 Î¼s (0 allocations: 0 bytes)
 - Time for `dot(InBounds,x,y)` ----->   9.479 Î¼s (0 allocations: 0 bytes)
 - Time for `dot(Vectorize,x,y)` ---->   17.200 Î¼s (0 allocations: 0 bytes)

Tests for T=Float64 and 10000 elements ("Basic" is Julia own implementation):
 - Time for `sum(Basic,x)` -------->   9.669 Î¼s (0 allocations: 0 bytes)
 - Time for `sum(Debug,x)` -------->   9.209 Î¼s (0 allocations: 0 bytes)
 - Time for `sum(InBounds,x)` ----->   9.039 Î¼s (0 allocations: 0 bytes)
 - Time for `sum(Vectorize,x)` ---->   8.976 Î¼s (0 allocations: 0 bytes)

 - Time for `dot(Basic,x,y)` -------->   1.545 Î¼s (0 allocations: 0 bytes)
 - Time for `dot(Debug,x,y)` -------->   9.037 Î¼s (0 allocations: 0 bytes)
 - Time for `dot(InBounds,x,y)` ----->   10.559 Î¼s (0 allocations: 0 bytes)
 - Time for `dot(Vectorize,x,y)` ---->   16.159 Î¼s (0 allocations: 0 bytes)
     Testing MayOptimize tests passed 
Finished at 2020-10-25T09:20:06.297
