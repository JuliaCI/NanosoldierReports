Current time is 2020-10-25T04:45:21.379
Julia Version 1.6.0-DEV.1324
Commit ae789ca1df (2020-10-24 01:55 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807
  JULIA_PKG_SERVER = 

Starting installation at 2020-10-25T04:45:22.964
   Resolving package versions...
   Installed RangeArrays â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.3.2
   Installed Formatting â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.4.1
   Installed NamedArrays â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.9.4
   Installed ArgCheck â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v2.1.0
   Installed Tracker â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.2.12
   Installed IterTools â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.3.0
   Installed ForwardDiff â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.10.12
   Installed ProgressMeter â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.4.0
   Installed EllipticalSliceSampling â”€â”€â”€â”€â”€â”€ v0.2.2
   Installed ConsoleProgressMonitor â”€â”€â”€â”€â”€â”€â”€ v0.1.2
   Installed Roots â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.5
   Installed Turing â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.14.10
   Installed DataAPI â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.3.0
   Installed EllipsisNotation â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.4.0
   Installed CommonSubexpressions â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.3.0
   Installed StatsFuns â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.9.5
   Installed AbstractTrees â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.3.3
   Installed Requires â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.1.0
   Installed ChainRulesCore â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.9.17
   Installed OpenSpecFun_jll â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.5.3+4
   Installed BenchmarkTools â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.5.0
   Installed Tables â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.1.0
   Installed AdvancedMH â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.5.1
   Installed PrettyTables â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.9.1
   Installed Rmath_jll â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.2.2+1
   Installed DataValueInterfaces â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.0
   Installed TableTraits â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.0
   Installed FixedPointNumbers â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.8.4
   Installed Bijectors â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.8.7
   Installed MuladdMacro â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.2.2
   Installed LogDensityProblems â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.10.3
   Installed MappedArrays â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.3.0
   Installed LoggingExtras â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.4.2
   Installed AbstractMCMC â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.1
   Installed DiffResults â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.2
   Installed ChainRules â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.7.31
   Installed MacroTools â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.5.6
   Installed ScientificTypes â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.1.0
   Installed InvertedIndices â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.0
   Installed IteratorInterfaceExtensions â”€â”€ v1.0.0
   Installed StaticArrays â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.12.4
   Installed Crayons â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v4.0.4
   Installed LeftChildRightSiblingTrees â”€â”€â”€ v0.1.2
   Installed Missings â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.4.4
   Installed ChainRulesTestUtils â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.5.3
   Installed Richardson â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.2.0
   Installed Parsers â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.11
   Installed FiniteDifferences â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.11.2
   Installed ProgressLogging â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.1.3
   Installed DocStringExtensions â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.8.3
   Installed QuadGK â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v2.4.1
   Installed IntervalSets â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.5.1
   Installed DiffRules â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.1
   Installed Reexport â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.2.0
   Installed NNlib â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.7.5
   Installed FillArrays â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.9.7
   Installed SpecialFunctions â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.10.3
   Installed UnPack â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.2
   Installed DataStructures â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.18.8
   Installed Parameters â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.12.1
   Installed BinaryProvider â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.5.10
   Installed Adapt â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v2.3.0
   Installed AxisArrays â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.4.3
   Installed Distributions â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.23.12
   Installed AbstractFFTs â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.5.0
   Installed StatsBase â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.33.2
   Installed AdvancedHMC â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.2.26
   Installed ArrayInterface â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v2.13.6
   Installed SortingAlgorithms â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.3.1
   Installed MCMCChains â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v4.2.4
   Installed NaturalSort â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.0
   Installed TerminalLoggers â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.1.2
   Installed InplaceOps â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.3.0
   Installed AdvancedVI â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.1.0
   Installed PDMats â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.10.1
   Installed JSON â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.21.1
   Installed JLLWrappers â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.1.3
   Installed MLJModelInterface â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.3.6
   Installed Combinatorics â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.2
   Installed Rmath â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.6.1
   Installed CompilerSupportLibraries_jll â”€ v0.3.4+0
   Installed DistributionsAD â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.6.9
     Cloning [366bfd00-2699-11ea-058f-f148b4cae6d8] DynamicPPL from https://github.com/TuringLang/DynamicPPL.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h   Installed DynamicPPL â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.9.6
     Cloning [bac558e1-5e72-5ebc-8fee-abe8a469f55d] OrderedCollections from https://github.com/JuliaCollections/OrderedCollections.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h   Installed OrderedCollections â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.3.1
     Cloning [6f1fad26-d15e-5dc8-ae53-837a1d7b8c9f] Libtask from https://github.com/TuringLang/Libtask.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h   Installed Libtask â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.4.2
     Cloning [3cdcf5f2-1ef4-517c-9805-6587b60abb01] RecipesBase from https://github.com/JuliaPlots/RecipesBase.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h   Installed RecipesBase â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.1.0
     Cloning [77ba4419-2d1f-58cd-9bb1-8ffee604a2e3] NaNMath from https://github.com/mlubin/NaNMath.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h   Installed NaNMath â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.3.4
     Cloning [34da2185-b29b-5c13-b0c7-acf172513d20] Compat from https://github.com/JuliaLang/Compat.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h   Installed Compat â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v3.22.0
     Cloning [84d833dd-6860-57f9-a1a7-6da5db126cff] TransformVariables from https://github.com/tpapp/TransformVariables.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h   Installed TransformVariables â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.3.10
     Cloning [700de1a5-db45-46bc-99cf-38207098b444] ZygoteRules from https://github.com/FluxML/ZygoteRules.jl.git
[?25l    Fetching: [>                                        ]  0.0 %[2K[?25h   Installed ZygoteRules â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.2.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [fce5fe82] + Turing v0.14.10
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [621f4979] + AbstractFFTs v0.5.0
  [80f14c24] + AbstractMCMC v1.0.1
  [1520ce14] + AbstractTrees v0.3.3
  [79e6a3ab] + Adapt v2.3.0
  [0bf59076] + AdvancedHMC v0.2.26
  [5b7e9947] + AdvancedMH v0.5.1
  [b5ca4192] + AdvancedVI v0.1.0
  [dce04be8] + ArgCheck v2.1.0
  [4fba245c] + ArrayInterface v2.13.6
  [39de3d68] + AxisArrays v0.4.3
  [6e4b80f9] + BenchmarkTools v0.5.0
  [76274a88] + Bijectors v0.8.7
  [b99e7846] + BinaryProvider v0.5.10
  [082447d4] + ChainRules v0.7.31
  [d360d2e6] + ChainRulesCore v0.9.17
  [cdddcdb0] + ChainRulesTestUtils v0.5.3
  [861a8166] + Combinatorics v1.0.2
  [bbf7d656] + CommonSubexpressions v0.3.0
  [34da2185] + Compat v3.22.0
  [88cd18e8] + ConsoleProgressMonitor v0.1.2
  [a8cc5b0e] + Crayons v4.0.4
  [9a962f9c] + DataAPI v1.3.0
  [864edb3b] + DataStructures v0.18.8
  [e2d170a0] + DataValueInterfaces v1.0.0
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.1
  [31c24e10] + Distributions v0.23.12
  [ced4e74d] + DistributionsAD v0.6.9
  [ffbed154] + DocStringExtensions v0.8.3
  [366bfd00] + DynamicPPL v0.9.6
  [da5c29d0] + EllipsisNotation v0.4.0
  [cad2338a] + EllipticalSliceSampling v0.2.2
  [1a297f60] + FillArrays v0.9.7
  [26cc04aa] + FiniteDifferences v0.11.2
  [53c48c17] + FixedPointNumbers v0.8.4
  [59287772] + Formatting v0.4.1
  [f6369f11] + ForwardDiff v0.10.12
  [505f98c9] + InplaceOps v0.3.0
  [8197267c] + IntervalSets v0.5.1
  [41ab1584] + InvertedIndices v1.0.0
  [c8e1da08] + IterTools v1.3.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [692b3bcd] + JLLWrappers v1.1.3
  [682c06a0] + JSON v0.21.1
  [1d6d02ad] + LeftChildRightSiblingTrees v0.1.2
  [6f1fad26] + Libtask v0.4.2
  [6fdf6af0] + LogDensityProblems v0.10.3
  [e6f89c97] + LoggingExtras v0.4.2
  [c7f686f2] + MCMCChains v4.2.4
  [e80e1ace] + MLJModelInterface v0.3.6
  [1914dd2f] + MacroTools v0.5.6
  [dbb5928d] + MappedArrays v0.3.0
  [e1d29d7a] + Missings v0.4.4
  [46d2c3a1] + MuladdMacro v0.2.2
  [872c559c] + NNlib v0.7.5
  [77ba4419] + NaNMath v0.3.4
  [86f7a689] + NamedArrays v0.9.4
  [c020b1a1] + NaturalSort v1.0.0
  [bac558e1] + OrderedCollections v1.3.1
  [90014a1f] + PDMats v0.10.1
  [d96e819e] + Parameters v0.12.1
  [69de0a69] + Parsers v1.0.11
  [08abe8d2] + PrettyTables v0.9.1
  [33c8b6b6] + ProgressLogging v0.1.3
  [92933f4c] + ProgressMeter v1.4.0
  [1fd47b50] + QuadGK v2.4.1
  [b3c3ace0] + RangeArrays v0.3.2
  [3cdcf5f2] + RecipesBase v1.1.0
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v1.1.0
  [708f8203] + Richardson v1.2.0
  [79098fc4] + Rmath v0.6.1
  [f2b01f46] + Roots v1.0.5
  [321657f4] + ScientificTypes v1.1.0
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.4
  [2913bbd2] + StatsBase v0.33.2
  [4c63d2b9] + StatsFuns v0.9.5
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.1.0
  [5d786b92] + TerminalLoggers v0.1.2
  [9f7883ad] + Tracker v0.2.12
  [84d833dd] + TransformVariables v0.3.10
  [fce5fe82] + Turing v0.14.10
  [3a884ed6] + UnPack v1.0.2
  [700de1a5] + ZygoteRules v0.2.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.4+0
  [efe28fd5] + OpenSpecFun_jll v0.5.3+4
  [f50d1b31] + Rmath_jll v0.2.2+1
  [0dad84c5] + ArgTools
  [56f22d72] + Artifacts
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [f43a241f] + Downloads
  [b77e0a4c] + InteractiveUtils
  [b27032c2] + LibCURL
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [4607b0f0] + SuiteSparse
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
  [deac9b47] + LibCURL_jll
  [14a3606d] + MozillaCACerts_jll
    Building Libtask â†’ `~/.julia/scratchspaces/44cfe95a-1eb2-52ea-b672-e2afdf69b78f/83e082fccb4e37d93df6440cdbd41dcbe5e46cb6/build.log`
Precompiling project... (tip: to disable auto-precompilation set ENV["JULIA_PKG_PRECOMPILE_AUTO"]=0)
[32m  âœ“ [39m[90mReexport[39m
[32m  âœ“ [39m[90mDataValueInterfaces[39m
[32m  âœ“ [39m[90mInplaceOps[39m
[32m  âœ“ [39m[90mIteratorInterfaceExtensions[39m
[32m  âœ“ [39m[90mRecipesBase[39m
[32m  âœ“ [39m[90mNaturalSort[39m
[32m  âœ“ [39m[90mInvertedIndices[39m
[32m  âœ“ [39m[90mAdapt[39m
[32m  âœ“ [39m[90mUnPack[39m
[32m  âœ“ [39m[90mDataAPI[39m
[32m  âœ“ [39m[90mEllipsisNotation[39m
[32m  âœ“ [39m[90mRichardson[39m
[32m  âœ“ [39m[90mArgCheck[39m
[32m  âœ“ [39m[90mScientificTypes[39m
[32m  âœ“ [39m[90mMuladdMacro[39m
[32m  âœ“ [39m[90mNaNMath[39m
[32m  âœ“ [39m[90mRequires[39m
[32m  âœ“ [39m[90mAbstractFFTs[39m
[32m  âœ“ [39m[90mRangeArrays[39m
[32m  âœ“ [39m[90mLoggingExtras[39m
[32m  âœ“ [39m[90mFormatting[39m
[32m  âœ“ [39m[90mJLLWrappers[39m
[32m  âœ“ [39m[90mProgressLogging[39m
[32m  âœ“ [39m[90mOrderedCollections[39m
[32m  âœ“ [39m[90mDocStringExtensions[39m
[32m  âœ“ [39m[90mTableTraits[39m
[32m  âœ“ [39m[90mAbstractTrees[39m
[32m  âœ“ [39m[90mPDMats[39m
[32m  âœ“ [39m[90mIterTools[39m
[32m  âœ“ [39m[90mLibtask[39m
[32m  âœ“ [39m[90mCompat[39m
[32m  âœ“ [39m[90mProgressMeter[39m
[32m  âœ“ [39m[90mCrayons[39m
[32m  âœ“ [39m[90mMLJModelInterface[39m
[32m  âœ“ [39m[90mCombinatorics[39m
[32m  âœ“ [39m[90mIntervalSets[39m
[32m  âœ“ [39m[90mFillArrays[39m
[32m  âœ“ [39m[90mLeftChildRightSiblingTrees[39m
[32m  âœ“ [39m[90mConsoleProgressMonitor[39m
[32m  âœ“ [39m[90mChainRulesCore[39m
[32m  âœ“ [39m[90mMissings[39m
[32m  âœ“ [39m[90mRmath_jll[39m
[32m  âœ“ [39m[90mTerminalLoggers[39m
[32m  âœ“ [39m[90mFiniteDifferences[39m
[32m  âœ“ [39m[90mAxisArrays[39m
[32m  âœ“ [39m[90mParameters[39m
[32m  âœ“ [39m[90mRoots[39m
[32m  âœ“ [39m[90mRmath[39m
[32m  âœ“ [39m[90mFixedPointNumbers[39m
[32m  âœ“ [39m[90mCompilerSupportLibraries_jll[39m
[32m  âœ“ [39m[90mMappedArrays[39m
[32m  âœ“ [39m[90mArrayInterface[39m
[32m  âœ“ [39m[90mMacroTools[39m
[32m  âœ“ [39m[90mNNlib[39m
[32m  âœ“ [39m[90mParsers[39m
[32m  âœ“ [39m[90mTables[39m
[32m  âœ“ [39m[90mCommonSubexpressions[39m
[32m  âœ“ [39m[90mStaticArrays[39m
[32m  âœ“ [39m[90mJSON[39m
[32m  âœ“ [39m[90mDataStructures[39m
[32m  âœ“ [39m[90mZygoteRules[39m
[32m  âœ“ [39m[90mOpenSpecFun_jll[39m
[32m  âœ“ [39m[90mDiffResults[39m
[32m  âœ“ [39m[90mBenchmarkTools[39m
[32m  âœ“ [39m[90mChainRulesTestUtils[39m
[32m  âœ“ [39m[90mSortingAlgorithms[39m
[32m  âœ“ [39m[90mPrettyTables[39m
[32m  âœ“ [39m[90mQuadGK[39m
[32m  âœ“ [39m[90mChainRules[39m
[32m  âœ“ [39m[90mSpecialFunctions[39m
[32m  âœ“ [39m[90mDiffRules[39m
[32m  âœ“ [39m[90mNamedArrays[39m
[32m  âœ“ [39m[90mStatsBase[39m
[32m  âœ“ [39m[90mStatsFuns[39m
[32m  âœ“ [39m[90mForwardDiff[39m
[32m  âœ“ [39m[90mAbstractMCMC[39m
[32m  âœ“ [39m[90mTracker[39m
[32m  âœ“ [39m[90mAdvancedHMC[39m
[32m  âœ“ [39m[90mDistributions[39m
[32m  âœ“ [39m[90mTransformVariables[39m
[32m  âœ“ [39m[90mLogDensityProblems[39m
[32m  âœ“ [39m[90mAdvancedMH[39m
[32m  âœ“ [39m[90mEllipticalSliceSampling[39m
[32m  âœ“ [39m[90mMCMCChains[39m
[32m  âœ“ [39m[90mDistributionsAD[39m
[32m  âœ“ [39m[90mBijectors[39m
[32m  âœ“ [39m[90mDynamicPPL[39m
[32m  âœ“ [39m[90mAdvancedVI[39m
[32m  âœ“ [39mTuring
89 dependencies successfully precompiled (1 already precompiled)
Starting tests at 2020-10-25T05:25:14.588
     Testing Turing
Status `/tmp/jl_HkjFnY/Project.toml`
  [80f14c24] AbstractMCMC v1.0.1
  [5b7e9947] AdvancedMH v0.5.1
  [b5ca4192] AdvancedVI v0.1.0
  [593b3428] CmdStan v6.0.9
  [31c24e10] Distributions v0.23.12
  [ced4e74d] DistributionsAD v0.6.9
  [bbc10e6e] DynamicHMC v2.2.0
  [366bfd00] DynamicPPL v0.9.6
  [26cc04aa] FiniteDifferences v0.11.2
  [f6369f11] ForwardDiff v0.10.12
  [c7f686f2] MCMCChains v4.2.4
  [6fafb56a] Memoization v0.1.5
  [86f7a689] NamedArrays v0.9.4
  [429524aa] Optim v1.2.0
  [90014a1f] PDMats v0.10.1
  [37e2e3b7] ReverseDiff v1.4.3
  [276daf66] SpecialFunctions v0.10.3
  [2913bbd2] StatsBase v0.33.2
  [4c63d2b9] StatsFuns v0.9.5
  [9f7883ad] Tracker v0.2.12
  [fce5fe82] Turing v0.14.10
  [e88e6eb3] Zygote v0.5.9
  [37e2e46d] LinearAlgebra
  [44cfe95a] Pkg
  [9a3f8284] Random
  [8dfed614] Test
Status `/tmp/jl_HkjFnY/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [80f14c24] AbstractMCMC v1.0.1
  [1520ce14] AbstractTrees v0.3.3
  [79e6a3ab] Adapt v2.3.0
  [0bf59076] AdvancedHMC v0.2.26
  [5b7e9947] AdvancedMH v0.5.1
  [b5ca4192] AdvancedVI v0.1.0
  [dce04be8] ArgCheck v2.1.0
  [4fba245c] ArrayInterface v2.13.6
  [4c555306] ArrayLayouts v0.4.10
  [39de3d68] AxisArrays v0.4.3
  [6e4b80f9] BenchmarkTools v0.5.0
  [76274a88] Bijectors v0.8.7
  [b99e7846] BinaryProvider v0.5.10
  [336ed68f] CSV v0.7.7
  [324d7699] CategoricalArrays v0.8.3
  [082447d4] ChainRules v0.7.31
  [d360d2e6] ChainRulesCore v0.9.17
  [cdddcdb0] ChainRulesTestUtils v0.5.3
  [593b3428] CmdStan v6.0.9
  [861a8166] Combinatorics v1.0.2
  [bbf7d656] CommonSubexpressions v0.3.0
  [34da2185] Compat v3.22.0
  [88cd18e8] ConsoleProgressMonitor v0.1.2
  [adafc99b] CpuId v0.2.2
  [a8cc5b0e] Crayons v4.0.4
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.21.8
  [864edb3b] DataStructures v0.18.8
  [e2d170a0] DataValueInterfaces v1.0.0
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [31c24e10] Distributions v0.23.12
  [ced4e74d] DistributionsAD v0.6.9
  [ffbed154] DocStringExtensions v0.8.3
  [bbc10e6e] DynamicHMC v2.2.0
  [366bfd00] DynamicPPL v0.9.6
  [da5c29d0] EllipsisNotation v0.4.0
  [cad2338a] EllipticalSliceSampling v0.2.2
  [1a297f60] FillArrays v0.9.7
  [6a86dc24] FiniteDiff v2.7.0
  [26cc04aa] FiniteDifferences v0.11.2
  [53c48c17] FixedPointNumbers v0.8.4
  [59287772] Formatting v0.4.1
  [f6369f11] ForwardDiff v0.10.12
  [069b7b12] FunctionWrappers v1.1.1
  [7869d1d1] IRTools v0.4.1
  [505f98c9] InplaceOps v0.3.0
  [8197267c] IntervalSets v0.5.1
  [41ab1584] InvertedIndices v1.0.0
  [c8e1da08] IterTools v1.3.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [692b3bcd] JLLWrappers v1.1.3
  [682c06a0] JSON v0.21.1
  [1d6d02ad] LeftChildRightSiblingTrees v0.1.2
  [6f1fad26] Libtask v0.4.2
  [d3d80556] LineSearches v7.1.0
  [6fdf6af0] LogDensityProblems v0.10.3
  [e6f89c97] LoggingExtras v0.4.2
  [bdcacae8] LoopVectorization v0.8.26
  [c7f686f2] MCMCChains v4.2.4
  [e80e1ace] MLJModelInterface v0.3.6
  [1914dd2f] MacroTools v0.5.6
  [dbb5928d] MappedArrays v0.3.0
  [6fafb56a] Memoization v0.1.5
  [e1d29d7a] Missings v0.4.4
  [46d2c3a1] MuladdMacro v0.2.2
  [d41bc354] NLSolversBase v7.7.1
  [872c559c] NNlib v0.7.5
  [77ba4419] NaNMath v0.3.4
  [86f7a689] NamedArrays v0.9.4
  [c020b1a1] NaturalSort v1.0.0
  [6fe1bfb0] OffsetArrays v1.3.1
  [429524aa] Optim v1.2.0
  [bac558e1] OrderedCollections v1.3.1
  [90014a1f] PDMats v0.10.1
  [d96e819e] Parameters v0.12.1
  [69de0a69] Parsers v1.0.11
  [2dfb63ee] PooledArrays v0.5.3
  [85a6dd25] PositiveFactorizations v0.2.3
  [08abe8d2] PrettyTables v0.9.1
  [33c8b6b6] ProgressLogging v0.1.3
  [92933f4c] ProgressMeter v1.4.0
  [1fd47b50] QuadGK v2.4.1
  [b3c3ace0] RangeArrays v0.3.2
  [3cdcf5f2] RecipesBase v1.1.0
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.1.0
  [37e2e3b7] ReverseDiff v1.4.3
  [708f8203] Richardson v1.2.0
  [79098fc4] Rmath v0.6.1
  [f2b01f46] Roots v1.0.5
  [21efa798] SIMDPirates v0.8.25
  [476501e8] SLEEFPirates v0.5.5
  [321657f4] ScientificTypes v1.1.0
  [91c51154] SentinelArrays v1.2.16
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [2913bbd2] StatsBase v0.33.2
  [4c63d2b9] StatsFuns v0.9.5
  [856f2bd8] StructTypes v1.1.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.1.0
  [5d786b92] TerminalLoggers v0.1.2
  [9f7883ad] Tracker v0.2.12
  [84d833dd] TransformVariables v0.3.10
  [fce5fe82] Turing v0.14.10
  [3a884ed6] UnPack v1.0.2
  [3d5dd08c] VectorizationBase v0.12.33
  [e88e6eb3] Zygote v0.5.9
  [700de1a5] ZygoteRules v0.2.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.4+0
  [efe28fd5] OpenSpecFun_jll v0.5.3+4
  [f50d1b31] Rmath_jll v0.2.2+1
  [0dad84c5] ArgTools
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [f43a241f] Downloads
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [b27032c2] LibCURL
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
  [deac9b47] LibCURL_jll
  [14a3606d] MozillaCACerts_jll
     Testing Running tests...
[ Info: [Turing]: progress logging is disabled globally
[ Info: [AdvancedVI]: global PROGRESS is set as false
adr: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] _pullback(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:38
    [7] pullback(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:44
    [8] gradient_logp(backend::ZygoteAD, Î¸::Vector{Float64}, vi::DynamicPPL.VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{DynamicPPL.VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{DynamicPPL.VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, model::DynamicPPL.Model{var"#43#44", (), (), (), Tuple{}, Tuple{}}, sampler::SampleFromPrior, context::DynamicPPL.DefaultContext)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/ad.jl:170
    [9] gradient_logp
      @ ~/.julia/packages/Turing/UsQlw/src/core/ad.jl:160 [inlined]
   [10] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:49 [inlined]
   [11] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [12] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:18 [inlined]
   [13] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [14] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:17
   [15] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [16] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [17] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [18] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [19] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [20] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [21] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [22] top-level scope
      @ none:6
   [23] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [24] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [25] _start()
      @ Base ./client.jl:485
Tracker, Zygote and ReverseDiff + logdet: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] _pullback(f::Function, args::Matrix{Float64})
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:38
    [7] pullback(f::Function, args::Matrix{Float64})
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:44
    [8] test_reverse_mode_ad(f::var"#58#113", È³::Float64, x::Matrix{Float64}; rtol::Float64, atol::Float64)
      @ Main ~/.julia/packages/Turing/UsQlw/test/test_utils/ad_utils.jl:19
    [9] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:99 [inlined]
   [10] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [11] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:97 [inlined]
   [12] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [13] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:17
   [14] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [15] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [16] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [18] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [19] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [20] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [21] top-level scope
      @ none:6
   [22] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [23] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [24] _start()
      @ Base ./client.jl:485
Tracker & Zygote + fill: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] _pullback(f::Function, args::Float64)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:38
    [7] pullback(f::Function, args::Float64)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:44
    [8] test_reverse_mode_ad(f::var"#59#114", È³::Vector{Float64}, x::Float64; rtol::Float64, atol::Float64)
      @ Main ~/.julia/packages/Turing/UsQlw/test/test_utils/ad_utils.jl:19
    [9] test_reverse_mode_ad(f::Function, È³::Vector{Float64}, x::Float64)
      @ Main ~/.julia/packages/Turing/UsQlw/test/test_utils/ad_utils.jl:12
   [10] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:103 [inlined]
   [11] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [12] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:102 [inlined]
   [13] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [14] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:17
   [15] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [16] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [17] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [18] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [19] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [20] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [21] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [22] top-level scope
      @ none:6
   [23] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [24] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [25] _start()
      @ Base ./client.jl:485
Tracker, Zygote and ReverseDiff + MvNormal: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] _pullback(::Function, ::Vector{Float64}, ::Matrix{Float64}, ::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:38
    [7] pullback(::Function, ::Vector{Float64}, ::Matrix{Float64}, ::Vararg{Any, N} where N)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:44
    [8] test_reverse_mode_ad(::var"#62#117", ::Float64, ::Vector{Float64}, ::Vararg{Any, N} where N; rtol::Float64, atol::Float64)
      @ Main ~/.julia/packages/Turing/UsQlw/test/test_utils/ad_utils.jl:19
    [9] test_reverse_mode_ad(::Function, ::Float64, ::Vector{Float64}, ::Vararg{Any, N} where N)
      @ Main ~/.julia/packages/Turing/UsQlw/test/test_utils/ad_utils.jl:12
   [10] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:120 [inlined]
   [11] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [12] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:108 [inlined]
   [13] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [14] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:17
   [15] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [16] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [17] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [18] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [19] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [20] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [21] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [22] top-level scope
      @ none:6
   [23] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [24] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [25] _start()
      @ Base ./client.jl:485
Tracker, Zygote and ReverseDiff + Diagonal Normal: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] _pullback(::Function, ::Vector{Float64}, ::Vector{Float64}, ::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:38
    [7] pullback(::Function, ::Vector{Float64}, ::Vector{Float64}, ::Vararg{Vector{Float64}, N} where N)
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:44
    [8] test_reverse_mode_ad(::var"#63#118", ::Float64, ::Vector{Float64}, ::Vararg{Vector{Float64}, N} where N; rtol::Float64, atol::Float64)
      @ Main ~/.julia/packages/Turing/UsQlw/test/test_utils/ad_utils.jl:19
    [9] test_reverse_mode_ad(::Function, ::Float64, ::Vector{Float64}, ::Vararg{Any, N} where N)
      @ Main ~/.julia/packages/Turing/UsQlw/test/test_utils/ad_utils.jl:12
   [10] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:133 [inlined]
   [11] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [12] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:123 [inlined]
   [13] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [14] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:17
   [15] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [16] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [17] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [18] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [19] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [20] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [21] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [22] top-level scope
      @ none:6
   [23] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [24] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [25] _start()
      @ Base ./client.jl:485
Tracker, Zygote and ReverseDiff + MvNormal Interface: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] _pullback(::Function, ::Matrix{Float64}, ::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:38
    [7] pullback(::Function, ::Matrix{Float64}, ::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:44
    [8] test_reverse_mode_ad(::var"#64#119", ::Float64, ::Matrix{Float64}, ::Vararg{Any, N} where N; rtol::Float64, atol::Float64)
      @ Main ~/.julia/packages/Turing/UsQlw/test/test_utils/ad_utils.jl:19
    [9] test_reverse_mode_ad(::Function, ::Float64, ::Matrix{Float64}, ::Vararg{Any, N} where N)
      @ Main ~/.julia/packages/Turing/UsQlw/test/test_utils/ad_utils.jl:12
   [10] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:144 [inlined]
   [11] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [12] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:139 [inlined]
   [13] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [14] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:17
   [15] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [16] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [17] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [18] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [19] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [20] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [21] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [22] top-level scope
      @ none:6
   [23] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [24] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [25] _start()
      @ Base ./client.jl:485
Simplex Tracker, Zygote and ReverseDiff (with and without caching) AD: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/core/ad.jl:266
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] _pullback(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:38
    [7] pullback(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:44
    [8] gradient_logp(backend::ZygoteAD, Î¸::Vector{Float64}, vi::DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Dirichlet{Float64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, model::DynamicPPL.Model{var"#100#156", (), (), (), Tuple{}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Dirichlet{Float64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, context::DynamicPPL.DefaultContext)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/ad.jl:170
    [9] gradient_logp
      @ ~/.julia/packages/Turing/UsQlw/src/core/ad.jl:83 [inlined]
   [10] âˆ‚logÏ€âˆ‚Î¸
      @ ~/.julia/packages/Turing/UsQlw/src/inference/hmc.jl:474 [inlined]
   [11] âˆ‚Hâˆ‚Î¸
      @ ~/.julia/packages/AdvancedHMC/QB368/src/hamiltonian.jl:31 [inlined]
   [12] phasepoint(h::AdvancedHMC.Hamiltonian{AdvancedHMC.UnitEuclideanMetric{Float64, Tuple{Int64}}, Turing.Inference.var"#logÏ€#55"{DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Dirichlet{Float64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Sampler{HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Dirichlet{Float64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, DynamicPPL.Model{var"#100#156", (), (), (), Tuple{}, Tuple{}}}, Turing.Inference.var"#âˆ‚logÏ€âˆ‚Î¸#54"{DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Dirichlet{Float64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Sampler{HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Dirichlet{Float64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, DynamicPPL.Model{var"#100#156", (), (), (), Tuple{}, Tuple{}}}}, Î¸::Vector{Float64}, r::Vector{Float64})
      @ AdvancedHMC ~/.julia/packages/AdvancedHMC/QB368/src/hamiltonian.jl:69
   [13] phasepoint
      @ ~/.julia/packages/AdvancedHMC/QB368/src/hamiltonian.jl:139 [inlined]
   [14] sample_init
      @ ~/.julia/packages/AdvancedHMC/QB368/src/sampler.jl:41 [inlined]
   [15] Turing.Inference.HMCState(model::DynamicPPL.Model{var"#100#156", (), (), (), Tuple{}, Tuple{}}, spl::DynamicPPL.Sampler{HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Dirichlet{Float64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, rng::Random._GLOBAL_RNG; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/hmc.jl:634
   [16] Turing.Inference.HMCState(model::DynamicPPL.Model{var"#100#156", (), (), (), Tuple{}, Tuple{}}, spl::DynamicPPL.Sampler{HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Dirichlet{Float64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, rng::Random._GLOBAL_RNG)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/hmc.jl:605
   [17] DynamicPPL.Sampler(alg::HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, model::DynamicPPL.Model{var"#100#156", (), (), (), Tuple{}, Tuple{}}, s::DynamicPPL.Selector)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/hmc.jl:384
   [18] Sampler
      @ ~/.julia/packages/Turing/UsQlw/src/inference/hmc.jl:376 [inlined]
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#100#156", (), (), (), Tuple{}, Tuple{}}, alg::HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [20] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [21] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [22] sample(model::DynamicPPL.Model{var"#100#156", (), (), (), Tuple{}, Tuple{}}, alg::HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [23] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:273 [inlined]
   [24] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [25] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:267 [inlined]
   [26] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [27] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [32] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [33] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485
PDMatDistribution AD: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/core/ad.jl:288
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2812#1248
      @ ~/.julia/packages/Zygote/c0awc/src/compiler/interface2.jl:34 [inlined]
    [4] var"#s2812#1248"(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] _pullback(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:38
    [7] pullback(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/c0awc/src/compiler/interface.jl:44
    [8] gradient_logp(backend::ZygoteAD, Î¸::Vector{Float64}, vi::DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Wishart{Float64, PDMat{Float64, Matrix{Float64}}, Int64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, model::DynamicPPL.Model{var"#101#158", (), (), (), Tuple{}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Wishart{Float64, PDMat{Float64, Matrix{Float64}}, Int64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, context::DynamicPPL.DefaultContext)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/ad.jl:170
    [9] gradient_logp
      @ ~/.julia/packages/Turing/UsQlw/src/core/ad.jl:83 [inlined]
   [10] âˆ‚logÏ€âˆ‚Î¸
      @ ~/.julia/packages/Turing/UsQlw/src/inference/hmc.jl:474 [inlined]
   [11] âˆ‚Hâˆ‚Î¸
      @ ~/.julia/packages/AdvancedHMC/QB368/src/hamiltonian.jl:31 [inlined]
   [12] phasepoint(h::AdvancedHMC.Hamiltonian{AdvancedHMC.UnitEuclideanMetric{Float64, Tuple{Int64}}, Turing.Inference.var"#logÏ€#55"{DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Wishart{Float64, PDMat{Float64, Matrix{Float64}}, Int64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Sampler{HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Wishart{Float64, PDMat{Float64, Matrix{Float64}}, Int64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, DynamicPPL.Model{var"#101#158", (), (), (), Tuple{}, Tuple{}}}, Turing.Inference.var"#âˆ‚logÏ€âˆ‚Î¸#54"{DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Wishart{Float64, PDMat{Float64, Matrix{Float64}}, Int64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Sampler{HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Wishart{Float64, PDMat{Float64, Matrix{Float64}}, Int64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, DynamicPPL.Model{var"#101#158", (), (), (), Tuple{}, Tuple{}}}}, Î¸::Vector{Float64}, r::Vector{Float64})
      @ AdvancedHMC ~/.julia/packages/AdvancedHMC/QB368/src/hamiltonian.jl:69
   [13] phasepoint
      @ ~/.julia/packages/AdvancedHMC/QB368/src/hamiltonian.jl:139 [inlined]
   [14] sample_init
      @ ~/.julia/packages/AdvancedHMC/QB368/src/sampler.jl:41 [inlined]
   [15] Turing.Inference.HMCState(model::DynamicPPL.Model{var"#101#158", (), (), (), Tuple{}, Tuple{}}, spl::DynamicPPL.Sampler{HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Wishart{Float64, PDMat{Float64, Matrix{Float64}}, Int64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, rng::Random._GLOBAL_RNG; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/hmc.jl:634
   [16] Turing.Inference.HMCState(model::DynamicPPL.Model{var"#101#158", (), (), (), Tuple{}, Tuple{}}, spl::DynamicPPL.Sampler{HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Wishart{Float64, PDMat{Float64, Matrix{Float64}}, Int64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, rng::Random._GLOBAL_RNG)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/hmc.jl:605
   [17] DynamicPPL.Sampler(alg::HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, model::DynamicPPL.Model{var"#101#158", (), (), (), Tuple{}, Tuple{}}, s::DynamicPPL.Selector)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/hmc.jl:384
   [18] Sampler
      @ ~/.julia/packages/Turing/UsQlw/src/inference/hmc.jl:376 [inlined]
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#101#158", (), (), (), Tuple{}, Tuple{}}, alg::HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [20] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [21] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [22] sample(model::DynamicPPL.Model{var"#101#158", (), (), (), Tuple{}, Tuple{}}, alg::HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [23] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:297 [inlined]
   [24] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [25] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:289 [inlined]
   [26] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [27] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [30] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [32] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [33] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485
memoization: issue #1393: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/core/ad.jl:348
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/FunctionWrappers/OAZAk/src/FunctionWrappers.jl:9 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/FunctionWrappers/OAZAk/src/FunctionWrappers.jl:107 [inlined]
    [3] do_ccall
      @ ~/.julia/packages/FunctionWrappers/OAZAk/src/FunctionWrappers.jl:97 [inlined]
    [4] FunctionWrapper
      @ ~/.julia/packages/FunctionWrappers/OAZAk/src/FunctionWrappers.jl:116 [inlined]
    [5] forward_pass!(compiled_tape::ReverseDiff.CompiledTape{ReverseDiff.GradientTape{Turing.Core.var"#f#31"{DynamicPPL.VarInfo{NamedTuple{(:sigma,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:sigma, Tuple{}}, Int64}, Vector{Uniform{Float64}}, Vector{DynamicPPL.VarName{:sigma, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#105#168", (:data,), (), (), Tuple{Vector{Float64}}, Tuple{}}, DynamicPPL.Sampler{NUTS{Turing.Core.ReverseDiffAD{true}, (), AdvancedHMC.DiagEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:sigma,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:sigma, Tuple{}}, Int64}, Vector{Uniform{Float64}}, Vector{DynamicPPL.VarName{:sigma, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, DynamicPPL.DefaultContext}, ReverseDiff.TrackedArray{Float64, Float64, 1, Vector{Float64}, Vector{Float64}}, ReverseDiff.TrackedReal{Float64, Float64, ReverseDiff.TrackedArray{Float64, Float64, 1, Vector{Float64}, Vector{Float64}}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/jFRo1/src/api/tape.jl:124
    [6] seeded_forward_pass!
      @ ~/.julia/packages/ReverseDiff/jFRo1/src/api/tape.jl:42 [inlined]
    [7] gradient!
      @ ~/.julia/packages/ReverseDiff/jFRo1/src/api/gradients.jl:79 [inlined]
    [8] gradient_logp(backend::Turing.Core.ReverseDiffAD{true}, Î¸::Vector{Float64}, vi::DynamicPPL.VarInfo{NamedTuple{(:sigma,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:sigma, Tuple{}}, Int64}, Vector{Uniform{Float64}}, Vector{DynamicPPL.VarName{:sigma, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, model::DynamicPPL.Model{var"#105#168", (:data,), (), (), Tuple{Vector{Float64}}, Tuple{}}, sampler::DynamicPPL.Sampler{NUTS{Turing.Core.ReverseDiffAD{true}, (), AdvancedHMC.DiagEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:sigma,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:sigma, Tuple{}}, Int64}, Vector{Uniform{Float64}}, Vector{DynamicPPL.VarName{:sigma, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, context::DynamicPPL.DefaultContext)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/compat/reversediff.jl:70
    [9] gradient_logp
      @ ~/.julia/packages/Turing/UsQlw/src/core/ad.jl:83 [inlined]
   [10] âˆ‚logÏ€âˆ‚Î¸
      @ ~/.julia/packages/Turing/UsQlw/src/inference/hmc.jl:474 [inlined]
   [11] âˆ‚Hâˆ‚Î¸
      @ ~/.julia/packages/AdvancedHMC/QB368/src/hamiltonian.jl:31 [inlined]
   [12] phasepoint
      @ ~/.julia/packages/AdvancedHMC/QB368/src/hamiltonian.jl:69 [inlined]
   [13] find_good_stepsize(rng::Random._GLOBAL_RNG, h::AdvancedHMC.Hamiltonian{AdvancedHMC.DiagEuclideanMetric{Float64, Vector{Float64}}, Turing.Inference.var"#logÏ€#55"{DynamicPPL.VarInfo{NamedTuple{(:sigma,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:sigma, Tuple{}}, Int64}, Vector{Uniform{Float64}}, Vector{DynamicPPL.VarName{:sigma, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Sampler{NUTS{Turing.Core.ReverseDiffAD{true}, (), AdvancedHMC.DiagEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:sigma,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:sigma, Tuple{}}, Int64}, Vector{Uniform{Float64}}, Vector{DynamicPPL.VarName{:sigma, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, DynamicPPL.Model{var"#105#168", (:data,), (), (), Tuple{Vector{Float64}}, Tuple{}}}, Turing.Inference.var"#âˆ‚logÏ€âˆ‚Î¸#54"{DynamicPPL.VarInfo{NamedTuple{(:sigma,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:sigma, Tuple{}}, Int64}, Vector{Uniform{Float64}}, Vector{DynamicPPL.VarName{:sigma, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Sampler{NUTS{Turing.Core.ReverseDiffAD{true}, (), AdvancedHMC.DiagEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:sigma,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:sigma, Tuple{}}, Int64}, Vector{Uniform{Float64}}, Vector{DynamicPPL.VarName{:sigma, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, DynamicPPL.Model{var"#105#168", (:data,), (), (), Tuple{Vector{Float64}}, Tuple{}}}}, Î¸::Vector{Float64}; max_n_iters::Int64)
      @ AdvancedHMC ~/.julia/packages/AdvancedHMC/QB368/src/trajectory.jl:813
   [14] #find_good_stepsize#13
      @ ~/.julia/packages/AdvancedHMC/QB368/src/trajectory.jl:873 [inlined]
   [15] find_good_stepsize
      @ ~/.julia/packages/AdvancedHMC/QB368/src/trajectory.jl:873 [inlined]
   [16] Turing.Inference.HMCState(model::DynamicPPL.Model{var"#105#168", (:data,), (), (), Tuple{Vector{Float64}}, Tuple{}}, spl::DynamicPPL.Sampler{NUTS{Turing.Core.ReverseDiffAD{true}, (), AdvancedHMC.DiagEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:sigma,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:sigma, Tuple{}}, Int64}, Vector{Uniform{Float64}}, Vector{DynamicPPL.VarName{:sigma, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, rng::Random._GLOBAL_RNG; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/hmc.jl:624
   [17] Turing.Inference.HMCState(model::DynamicPPL.Model{var"#105#168", (:data,), (), (), Tuple{Vector{Float64}}, Tuple{}}, spl::DynamicPPL.Sampler{NUTS{Turing.Core.ReverseDiffAD{true}, (), AdvancedHMC.DiagEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:sigma,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:sigma, Tuple{}}, Int64}, Vector{Uniform{Float64}}, Vector{DynamicPPL.VarName{:sigma, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, rng::Random._GLOBAL_RNG)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/hmc.jl:605
   [18] DynamicPPL.Sampler(alg::NUTS{Turing.Core.ReverseDiffAD{true}, (), AdvancedHMC.DiagEuclideanMetric}, model::DynamicPPL.Model{var"#105#168", (:data,), (), (), Tuple{Vector{Float64}}, Tuple{}}, s::DynamicPPL.Selector)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/hmc.jl:384
   [19] Sampler
      @ ~/.julia/packages/Turing/UsQlw/src/inference/hmc.jl:376 [inlined]
   [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#105#168", (:data,), (), (), Tuple{Vector{Float64}}, Tuple{}}, alg::NUTS{Turing.Core.ReverseDiffAD{true}, (), AdvancedHMC.DiagEuclideanMetric}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [21] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [22] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [23] sample(model::DynamicPPL.Model{var"#105#168", (:data,), (), (), Tuple{Vector{Float64}}, Tuple{}}, alg::NUTS{Turing.Core.ReverseDiffAD{true}, (), AdvancedHMC.DiagEuclideanMetric}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [24] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:361 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:349 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:17
   [29] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [30] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [31] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [33] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [34] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [35] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [36] top-level scope
      @ none:6
   [37] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [38] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [39] _start()
      @ Base ./client.jl:485
particle container: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(), Tuple{}}, Float64}, Float64}}, DynamicPPL.UntypedVarInfo{DynamicPPL.Metadata{Dict{VarName, Int64}, Vector{Distribution}, Vector{VarName}, Vector{Real}, Vector{Set{DynamicPPL.Selector}}}, Float64}, DynamicPPL.Model{var"#188#189", (), (), (), Tuple{}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(), Tuple{}}, Float64}, Float64}}, DynamicPPL.UntypedVarInfo{DynamicPPL.Metadata{Dict{VarName, Int64}, Vector{Distribution}, Vector{VarName}, Vector{Real}, Vector{Set{DynamicPPL.Selector}}}, Float64}, DynamicPPL.Model{var"#188#189", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(), Tuple{}}, Float64}, Float64}}, DynamicPPL.UntypedVarInfo{DynamicPPL.Metadata{Dict{VarName, Int64}, Vector{Distribution}, Vector{VarName}, Vector{Real}, Vector{Set{DynamicPPL.Selector}}}, Float64}, DynamicPPL.Model{var"#188#189", (), (), (), Tuple{}, Tuple{}}}}, randcat::typeof(Turing.Inference.resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] resample_propagate!
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:187 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/core/container.jl:67 [inlined]
    [8] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [9] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/core/container.jl:23 [inlined]
   [10] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [11] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/container.jl:13
   [12] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [13] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:17 [inlined]
   [14] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [15] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [16] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [17] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [18] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [19] top-level scope
      @ none:6
   [20] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [21] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [22] _start()
      @ Base ./client.jl:485
trace: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(), Tuple{}}, Float64}, Float64}}, DynamicPPL.UntypedVarInfo{DynamicPPL.Metadata{Dict{VarName, Int64}, Vector{Distribution}, Vector{VarName}, Vector{Real}, Vector{Set{DynamicPPL.Selector}}}, Float64}, DynamicPPL.Model{var"#188#189", (), (), (), Tuple{}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(), Tuple{}}, Float64}, Float64}}, DynamicPPL.UntypedVarInfo{DynamicPPL.Metadata{Dict{VarName, Int64}, Vector{Distribution}, Vector{VarName}, Vector{Real}, Vector{Set{DynamicPPL.Selector}}}, Float64}, DynamicPPL.Model{var"#188#189", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/core/container.jl:121 [inlined]
    [6] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/core/container.jl:96 [inlined]
    [8] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [9] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/container.jl:13
   [10] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [11] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:17 [inlined]
   [12] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [13] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [14] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [15] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [16] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [17] top-level scope
      @ none:6
   [18] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [19] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [20] _start()
      @ Base ./client.jl:485
gibbs constructor: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#237#238", (), (), (), Tuple{}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#237#238", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#237#238", (), (), (), Tuple{}, Tuple{}}}}, randcat::typeof(Turing.Inference.resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#237#238", (), (), (), Tuple{}, Tuple{}}}}, resampler::Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#237#238", (), (), (), Tuple{}, Tuple{}}}}, resampler::Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#237#238", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
   [10] (::Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#237#238", (), (), (), Tuple{}, Tuple{}}, Sampler{Gibbs{(:s, :m), Tuple{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, Int64, Nothing})(::Tuple{Int64, Sampler{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:187
   [11] iterate
      @ ./generator.jl:47 [inlined]
   [12] collect
      @ ./array.jl:686 [inlined]
   [13] map
      @ ./abstractarray.jl:2267 [inlined]
   [14] step!(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#237#238", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, N::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:179
   [15] #step!#8
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/interface.jl:87 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:78 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [18] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#237#238", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#237#238", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#237#238", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [21] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#237#238", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:s, :m), Tuple{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [22] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [23] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [24] sample(model::DynamicPPL.Model{var"#237#238", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:s, :m), Tuple{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [25] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/inference/gibbs.jl:24 [inlined]
   [26] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [27] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/inference/gibbs.jl:12 [inlined]
   [28] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [29] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/gibbs.jl:11
   [30] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [31] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [32] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [33] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:24 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
gibbs inference: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#235#236", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#235#236", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#235#236", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}}}, randcat::typeof(Turing.Inference.resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#235#236", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}}}, resampler::Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#235#236", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}}}, resampler::Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#235#236", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, spl::Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
   [10] (::Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#235#236", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, Int64, Nothing})(::Tuple{Int64, Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:187
   [11] iterate
      @ ./generator.jl:47 [inlined]
   [12] collect
      @ ./array.jl:686 [inlined]
   [13] map
      @ ./abstractarray.jl:2267 [inlined]
   [14] step!(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#235#236", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, spl::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:179
   [15] #step!#8
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/interface.jl:87 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:78 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [18] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#235#236", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#235#236", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#235#236", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [21] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#235#236", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, alg::Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [22] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [23] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [24] sample(model::DynamicPPL.Model{var"#235#236", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, alg::Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [25] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/inference/gibbs.jl:46 [inlined]
   [26] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [27] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/inference/gibbs.jl:42 [inlined]
   [28] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [29] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/gibbs.jl:11
   [30] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [31] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [32] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [33] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [34] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:24 [inlined]
   [36] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
[ Info: (symbol = :p, exact = 0.7142857142857143, evaluated = 0.7134439400037181)
[ Info: (symbol = "ps[1]", exact = 0.3125, evaluated = 0.3129158742030775)
[ Info: (symbol = "ps[2]", exact = 0.6875, evaluated = 0.6870841257969238)
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.0175279768556664)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.150595501966182)
â”Œ Info: Found initial step size
â””   Ïµ = 0.8500000000000001
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.0854561548044503)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.2583226998542636)
â”Œ Info: Found initial step size
â””   Ïµ = 6.4
hmcda inference: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}}}, randcat::typeof(Turing.Inference.resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}}}, resampler::Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}}}, resampler::Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Turing.Inference.ParticleTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64}; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
   [10] (::Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMCDA{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, Int64, Turing.Inference.GibbsTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64, Vector{Any}}})(::Tuple{Int64, Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:189
   [11] iterate
      @ ./generator.jl:47 [inlined]
   [12] collect
      @ ./array.jl:686 [inlined]
   [13] map
      @ ./abstractarray.jl:2267 [inlined]
   [14] step!(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMCDA{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64, transition::Turing.Inference.GibbsTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64, Vector{Any}}; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:179
   [15] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:93 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [17] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMCDA{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [18] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMCDA{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMCDA{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMCDA{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [21] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [22] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [23] sample(model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMCDA{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [24] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:131 [inlined]
   [25] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:117 [inlined]
   [27] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:12
   [29] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [30] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:26 [inlined]
   [31] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [33] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [34] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:24 [inlined]
   [35] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [36] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [37] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [38] top-level scope
      @ none:6
   [39] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [40] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [41] _start()
      @ Base ./client.jl:485
HMCDA{ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}(-1, 0.8, 0.75, 0.0)
â”Œ Info: Found initial step size
â””   Ïµ = 0.8500000000000001
HMCDA{ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}(200, 0.8, 0.75, 0.0)
â”Œ Info: Found initial step size
â””   Ïµ = 1.6
HMCDA{ForwardDiffAD{40}, (:s,), AdvancedHMC.UnitEuclideanMetric}(200, 0.8, 0.75, 0.0)
â”Œ Info: Found initial step size
â””   Ïµ = 1.6
â”Œ Info: Found initial step size
â””   Ïµ = 0.8500000000000001

signal (15): Terminated
in expression starting at none:35
pthread_cond_wait at /lib/x86_64-linux-gnu/libpthread.so.0 (unknown line)
