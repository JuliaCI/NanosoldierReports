Current time is 2020-10-25T12:35:54.552
Julia Version 1.6.0-DEV.1324
Commit ae789ca1df (2020-10-24 01:55 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807
  JULIA_PKG_SERVER = 

Starting installation at 2020-10-25T12:35:58.742
   Resolving package versions...
   Installed TextWrap â”€ v1.0.1
   Installed ArgParse â”€ v1.1.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [c7e460c6] + ArgParse v1.1.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [c7e460c6] + ArgParse v1.1.0
  [b718987f] + TextWrap v1.0.1
  [56ddb016] + Logging
Precompiling project... (tip: to disable auto-precompilation set ENV["JULIA_PKG_PRECOMPILE_AUTO"]=0)
[32m  âœ“ [39m[90mTextWrap[39m
[32m  âœ“ [39mArgParse
2 dependencies successfully precompiled
Starting tests at 2020-10-25T12:36:10.406
     Testing ArgParse
Status `/tmp/jl_uaf7IX/Project.toml`
  [c7e460c6] ArgParse v1.1.0
  [8dfed614] Test
Status `/tmp/jl_uaf7IX/Manifest.toml`
  [c7e460c6] ArgParse v1.1.0
  [b718987f] TextWrap v1.0.1
  [2a0f44e3] Base64
  [b77e0a4c] InteractiveUtils
  [56ddb016] Logging
  [d6f4376e] Markdown
  [9a3f8284] Random
  [9e88b42a] Serialization
  [8dfed614] Test
     Testing Running tests...
Test Summary: | Pass  Total
test 01       |   32     32
Test Summary: | Pass  Total
test 02       |   85     85
test 03: Test Failed at /home/pkgeval/.julia/packages/ArgParse/WUIf8/test/argparse_test03.jl:82
  Expression: stringhelp(s) == "usage: $(basename(Base.source_path())) [--opt1] [--opt2] [-k] [-u] [--array ARRAY]\n                        [--custom CUSTOM] [--oddint ODDINT]\n                        [--collect C] [--awkward-option XY [XY...]]\n\nTest 3 for ArgParse.jl\n\noptional arguments:\n  --opt1                append O1\n  --opt2                append O2\n  -k                    provide the answer\n  -u                    provide the answer as floating point\n  --array ARRAY         create an array (type: Array{$(Int),1},\n                        default: $([7, 3, 2]))\n  --custom CUSTOM       the only accepted argument is \"custom\" (type:\n                        CustomType, default: CustomType())\n  --oddint ODDINT       an odd integer (type: $(Int), default: 1)\n  --collect C           collect things (type: $(Int))\n  --awkward-option XY [XY...]\n                        either X or Y; all XY's are stored in chunks\n                        (default: Any[Any[\"X\"]])\n\n"
   Evaluated: "usage: argparse_test03.jl [--opt1] [--opt2] [-k] [-u] [--array ARRAY]\n                        [--custom CUSTOM] [--oddint ODDINT]\n                        [--collect C] [--awkward-option XY [XY...]]\n\nTest 3 for ArgParse.jl\n\noptional arguments:\n  --opt1                append O1\n  --opt2                append O2\n  -k                    provide the answer\n  -u                    provide the answer as floating point\n  --array ARRAY         create an array (type: Vector{Int64}, default:\n                        [7, 3, 2])\n  --custom CUSTOM       the only accepted argument is \"custom\" (type:\n                        CustomType, default: CustomType())\n  --oddint ODDINT       an odd integer (type: Int64, default: 1)\n  --collect C           collect things (type: Int64)\n  --awkward-option XY [XY...]\n                        either X or Y; all XY's are stored in chunks\n                        (default: Any[Any[\"X\"]])\n\n" == "usage: argparse_test03.jl [--opt1] [--opt2] [-k] [-u] [--array ARRAY]\n                        [--custom CUSTOM] [--oddint ODDINT]\n                        [--collect C] [--awkward-option XY [XY...]]\n\nTest 3 for ArgParse.jl\n\noptional arguments:\n  --opt1                append O1\n  --opt2                append O2\n  -k                    provide the answer\n  -u                    provide the answer as floating point\n  --array ARRAY         create an array (type: Array{Int64,1},\n                        default: [7, 3, 2])\n  --custom CUSTOM       the only accepted argument is \"custom\" (type:\n                        CustomType, default: CustomType())\n  --oddint ODDINT       an odd integer (type: Int64, default: 1)\n  --collect C           collect things (type: Int64)\n  --awkward-option XY [XY...]\n                        either X or Y; all XY's are stored in chunks\n                        (default: Any[Any[\"X\"]])\n\n"
Stacktrace:
 [1] macro expansion
   @ ~/.julia/packages/ArgParse/WUIf8/test/argparse_test03.jl:82 [inlined]
 [2] macro expansion
   @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
 [3] top-level scope
   @ ~/.julia/packages/ArgParse/WUIf8/test/argparse_test03.jl:9
Test Summary: | Pass  Fail  Total
test 03       |   31     1     32

ERROR: LoadError: LoadError: Some tests did not pass: 31 passed, 1 failed, 0 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/ArgParse/WUIf8/test/argparse_test03.jl:7
in expression starting at /home/pkgeval/.julia/packages/ArgParse/WUIf8/test/runtests.jl:1
ERROR: Package ArgParse errored during testing
Stacktrace:
  [1] pkgerror(msg::String)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1651
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:334
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:321
  [5] #test#62
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:71 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:70 [inlined]
  [7] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67
 [11] top-level scope
    @ none:35
