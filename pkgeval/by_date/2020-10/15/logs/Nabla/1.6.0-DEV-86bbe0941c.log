Julia Version 1.6.0-DEV.1227
Commit 86bbe0941c (2020-10-15 00:29 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807

  Resolving package versions...
  Installed Calculus â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.5.1
  Installed DualNumbers â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.6.2
  Installed OpenSpecFun_jll â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.5.3+3
  Installed CompilerSupportLibraries_jll â”€ v0.3.3+0
  Installed DiffRules â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.0.10
  Installed FDM â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.6.1
  Installed SpecialFunctions â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.10.3
  Installed Nabla â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.12.1
  Installed NaNMath â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.3.4
Updating `~/.julia/environments/v1.6/Project.toml`
  [49c96f43] + Nabla v0.12.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [49dc2e85] + Calculus v0.5.1
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [b552c78f] + DiffRules v0.0.10
  [fa6b7ba4] + DualNumbers v0.6.2
  [e25cca7e] + FDM v0.6.1
  [77ba4419] + NaNMath v0.3.4
  [49c96f43] + Nabla v0.12.1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [276daf66] + SpecialFunctions v0.10.3
  [56f22d72] + Artifacts
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
Precompiling project... (tip: to disable auto-precompilation set ENV["JULIA_PKG_PRECOMPILE_AUTO"]=0)
[90m[32m  âœ“ [39mNaNMath[39m
[90m[32m  âœ“ [39mFDM[39m
[90m[32m  âœ“ [39mDiffRules[39m
[90m[32m  âœ“ [39mCalculus[39m
[90m[32m  âœ“ [39mCompilerSupportLibraries_jll[39m
[90m[32m  âœ“ [39mOpenSpecFun_jll[39m
[90m[32m  âœ“ [39mSpecialFunctions[39m
[90m[32m  âœ“ [39mDualNumbers[39m
[32m  âœ“ [39mNabla
9 dependencies successfully precompiled
    Testing Nabla
Status `/tmp/jl_xwMVBZ/Project.toml`
  [6e4b80f9] BenchmarkTools v0.5.0
  [b552c78f] DiffRules v0.0.10
  [31c24e10] Distributions v0.24.0
  [fa6b7ba4] DualNumbers v0.6.2
  [e25cca7e] FDM v0.6.1
  [49c96f43] Nabla v0.12.1
  [276daf66] SpecialFunctions v0.10.3
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [10745b16] Statistics
  [8dfed614] Test
Status `/tmp/jl_xwMVBZ/Manifest.toml`
  [6e4b80f9] BenchmarkTools v0.5.0
  [49dc2e85] Calculus v0.5.1
  [34da2185] Compat v3.20.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.18.7
  [b552c78f] DiffRules v0.0.10
  [31c24e10] Distributions v0.24.0
  [fa6b7ba4] DualNumbers v0.6.2
  [e25cca7e] FDM v0.6.1
  [1a297f60] FillArrays v0.9.7
  [682c06a0] JSON v0.21.1
  [e1d29d7a] Missings v0.4.4
  [77ba4419] NaNMath v0.3.4
  [49c96f43] Nabla v0.12.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.3.1
  [90014a1f] PDMats v0.10.1
  [69de0a69] Parsers v1.0.11
  [1fd47b50] QuadGK v2.4.1
  [79098fc4] Rmath v0.6.1
  [f50d1b31] Rmath_jll v0.2.2+1
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [2913bbd2] StatsBase v0.33.2
  [4c63d2b9] StatsFuns v0.9.5
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
WARNING: Method definition f(Any) in module Main at /home/pkgeval/.julia/packages/Nabla/D60dX/test/core.jl:105 overwritten at /home/pkgeval/.julia/packages/Nabla/D60dX/test/core.jl:114.
Test Summary: | Pass  Total
Core          |  234    234
â”Œ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
â”‚   caller = in_domain(f::Function, x::Float64) at finite_differencing.jl:128
â”” @ Nabla ~/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:128
â”Œ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
â”‚   caller = #Branch#13 at core.jl:82 [inlined]
â”” @ Core ~/.julia/packages/Nabla/D60dX/src/core.jl:82
â”Œ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
â”‚   caller = #44 at finite_differencing.jl:24 [inlined]
â”” @ Core ~/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:24
â”Œ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
â”‚   caller = #44 at finite_differencing.jl:24 [inlined]
â”” @ Core ~/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:24
â”Œ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
â”‚   caller = #44 at finite_differencing.jl:24 [inlined]
â”” @ Core ~/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:24
â”Œ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
â”‚   caller = #44 at finite_differencing.jl:24 [inlined]
â”” @ Core ~/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:24
â”Œ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
â”‚   caller = #44 at finite_differencing.jl:24 [inlined]
â”” @ Core ~/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:24
â”Œ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
â”‚   caller = #44 at finite_differencing.jl:24 [inlined]
â”” @ Core ~/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:24
â”Œ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
â”‚   caller = #44 at finite_differencing.jl:24 [inlined]
â”” @ Core ~/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:24
â”Œ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
â”‚   caller = (::Nabla.var"#55#59"{Float64, typeof(lbeta)})(y::Float64) at finite_differencing.jl:197
â”” @ Nabla ~/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:197
â”Œ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
â”‚   caller = #Branch#13 at core.jl:82 [inlined]
â”” @ Core ~/.julia/packages/Nabla/D60dX/src/core.jl:82
â”Œ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
â”‚   caller = (::Nabla.var"#44#45"{typeof(lbeta), Float64, Tuple{Float64, Float64}, Tuple{Float64, Float64}})(Îµ::Float64) at finite_differencing.jl:24
â”” @ Nabla ~/.julia/packages/Nabla/D60dX/src/finite_differencing.jl:24
WARNING: Method definition f(Any, Any, Any) in module Main at /home/pkgeval/.julia/packages/Nabla/D60dX/test/sensitivities/array.jl:14 overwritten at /home/pkgeval/.julia/packages/Nabla/D60dX/test/sensitivities/array.jl:17.
â”Œ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
â”‚   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
â”” @ Core ./broadcast.jl:648
â”Œ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
â”‚   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
â”” @ Core ./broadcast.jl:648
â”Œ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
â”‚   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
â”” @ Core ./broadcast.jl:648
â”Œ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
â”‚   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
â”” @ Core ./broadcast.jl:648
â”Œ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
â”‚   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
â”” @ Core ./broadcast.jl:648
â”Œ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
â”‚   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
â”” @ Core ./broadcast.jl:648
â”Œ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
â”‚   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
â”” @ Core ./broadcast.jl:648
â”Œ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
â”‚   caller = broadcast(f::Function, x::Float64) at broadcast.jl:778
â”” @ Base.Broadcast ./broadcast.jl:778
â”Œ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
â”‚   caller = _broadcast_getindex_evalf(f::typeof(lgamma), args::Float64) at broadcast.jl:648
â”” @ Base.Broadcast ./broadcast.jl:648
â”Œ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
â”‚   caller = broadcast at broadcast.jl:778 [inlined]
â”” @ Core ./broadcast.jl:778
â”Œ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
â”‚   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
â”” @ Core ./broadcast.jl:648
â”Œ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
â”‚   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
â”” @ Core ./broadcast.jl:648
â”Œ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
â”‚   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
â”” @ Core ./broadcast.jl:648
â”Œ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
â”‚   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
â”” @ Core ./broadcast.jl:648
â”Œ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
â”‚   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
â”” @ Core ./broadcast.jl:648
â”Œ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
â”‚   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
â”” @ Core ./broadcast.jl:648
â”Œ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
â”‚   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
â”” @ Core ./broadcast.jl:648
â”Œ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
â”‚   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
â”” @ Core ./broadcast.jl:648
â”Œ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
â”‚   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
â”” @ Core ./broadcast.jl:648
â”Œ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
â”‚   caller = _broadcast_getindex_evalf at broadcast.jl:648 [inlined]
â”” @ Core ./broadcast.jl:648
â”Œ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
â”‚   caller = broadcast(::Function, ::Float64, ::Float64) at broadcast.jl:778
â”” @ Base.Broadcast ./broadcast.jl:778
â”Œ Warning: `lbeta(x::Real, w::Real)` is deprecated, use `(logabsbeta(x, w))[1]` instead.
â”‚   caller = broadcast at broadcast.jl:778 [inlined]
â”” @ Core ./broadcast.jl:778
â”Œ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
â”‚   caller = _mapreduce(f::typeof(lgamma), op::typeof(+), #unused#::IndexLinear, A::Vector{Float64}) at reduce.jl:408
â”” @ Base ./reduce.jl:408
â”Œ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
â”‚   caller = _mapreduce(f::typeof(lgamma), op::typeof(+), #unused#::IndexLinear, A::Vector{Float64}) at reduce.jl:408
â”” @ Base ./reduce.jl:408
â”Œ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
â”‚   caller = _mapreduce(f::typeof(lgamma), op::typeof(+), #unused#::IndexLinear, A::Vector{Float64}) at reduce.jl:411
â”” @ Base ./reduce.jl:411
â”Œ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
â”‚   caller = MappingRF at reduce.jl:93 [inlined]
â”” @ Core ./reduce.jl:93
â”Œ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
â”‚   caller = MappingRF at reduce.jl:93 [inlined]
â”” @ Core ./reduce.jl:93
â”Œ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
â”‚   caller = MappingRF at reduce.jl:93 [inlined]
â”” @ Core ./reduce.jl:93
â”Œ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
â”‚   caller = MappingRF at reduce.jl:93 [inlined]
â”” @ Core ./reduce.jl:93
â”Œ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
â”‚   caller = _mapreduce(f::typeof(lgamma), op::typeof(Base.add_sum), #unused#::IndexLinear, A::Vector{Float64}) at reduce.jl:408
â”” @ Base ./reduce.jl:408
â”Œ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
â”‚   caller = _mapreduce(f::typeof(lgamma), op::typeof(Base.add_sum), #unused#::IndexLinear, A::Vector{Float64}) at reduce.jl:408
â”” @ Base ./reduce.jl:408
â”Œ Warning: `lgamma(x::Real)` is deprecated, use `(logabsgamma(x))[1]` instead.
â”‚   caller = _mapreduce(f::typeof(lgamma), op::typeof(Base.add_sum), #unused#::IndexLinear, A::Vector{Float64}) at reduce.jl:411
â”” @ Base ./reduce.jl:411
Test Summary: | Pass  Total
Sensitivities | 3343   3343
    Testing Nabla tests passed 
