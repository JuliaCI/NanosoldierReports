Julia Version 1.6.0-DEV.1227
Commit 86bbe0941c (2020-10-15 00:29 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807

  Resolving package versions...
  Installed Formatting ─────────────────── v0.4.1
  Installed ArrayInterface ─────────────── v2.13.6
  Installed DataAPI ────────────────────── v1.3.0
  Installed Compat ─────────────────────── v3.20.0
  Installed Adapt ──────────────────────── v2.3.0
  Installed QuadGK ─────────────────────── v2.4.1
  Installed NamedArrays ────────────────── v0.9.4
  Installed EllipticalSliceSampling ────── v0.2.2
  Installed Missings ───────────────────── v0.4.4
  Installed DiffRules ──────────────────── v1.0.1
  Installed Tracker ────────────────────── v0.2.12
  Installed IterTools ──────────────────── v1.3.0
  Installed AdvancedHMC ────────────────── v0.2.25
  Installed AbstractTrees ──────────────── v0.3.3
  Installed Turing ─────────────────────── v0.14.10
  Installed EllipsisNotation ───────────── v0.4.0
  Installed IteratorInterfaceExtensions ── v1.0.0
  Installed ArgCheck ───────────────────── v2.1.0
  Installed TableTraits ────────────────── v1.0.0
  Installed Rmath_jll ──────────────────── v0.2.2+1
  Installed ChainRules ─────────────────── v0.7.25
  Installed IntervalSets ───────────────── v0.5.1
  Installed StatsBase ──────────────────── v0.33.2
  Installed DiffResults ────────────────── v1.0.2
  Installed DistributionsAD ────────────── v0.6.9
  Installed UnPack ─────────────────────── v1.0.2
  Installed CommonSubexpressions ───────── v0.3.0
  Installed ZygoteRules ────────────────── v0.2.0
  Installed AbstractMCMC ───────────────── v1.0.1
  Installed BenchmarkTools ─────────────── v0.5.0
  Installed NNlib ──────────────────────── v0.7.5
  Installed Reexport ───────────────────── v0.2.0
  Installed NaturalSort ────────────────── v1.0.0
  Installed Combinatorics ──────────────── v1.0.2
  Installed ConsoleProgressMonitor ─────── v0.1.2
  Installed Parsers ────────────────────── v1.0.11
  Installed Tables ─────────────────────── v1.1.0
  Installed MCMCChains ─────────────────── v4.2.3
  Installed Distributions ──────────────── v0.23.12
  Installed LeftChildRightSiblingTrees ─── v0.1.2
  Installed TransformVariables ─────────── v0.3.10
  Installed Libtask ────────────────────── v0.4.2
  Installed AxisArrays ─────────────────── v0.4.3
  Installed DataStructures ─────────────── v0.18.7
  Installed Requires ───────────────────── v1.1.0
  Installed SpecialFunctions ───────────── v0.10.3
  Installed BinaryProvider ─────────────── v0.5.10
  Installed FillArrays ─────────────────── v0.9.7
  Installed FixedPointNumbers ──────────── v0.8.4
  Installed ProgressLogging ────────────── v0.1.3
  Installed DataValueInterfaces ────────── v1.0.0
  Installed AdvancedVI ─────────────────── v0.1.0
  Installed RecipesBase ────────────────── v1.1.0
  Installed TerminalLoggers ────────────── v0.1.2
  Installed PrettyTables ───────────────── v0.9.1
  Installed PDMats ─────────────────────── v0.10.1
  Installed Roots ──────────────────────── v1.0.5
  Installed OrderedCollections ─────────── v1.3.1
  Installed MuladdMacro ────────────────── v0.2.2
  Installed InvertedIndices ────────────── v1.0.0
  Installed SortingAlgorithms ──────────── v0.3.1
  Installed MappedArrays ───────────────── v0.3.0
  Installed MLJModelInterface ──────────── v0.3.6
  Installed Crayons ────────────────────── v4.0.4
  Installed ProgressMeter ──────────────── v1.4.0
  Installed JSON ───────────────────────── v0.21.1
  Installed DynamicPPL ─────────────────── v0.9.6
  Installed NaNMath ────────────────────── v0.3.4
  Installed InplaceOps ─────────────────── v0.3.0
  Installed ScientificTypes ────────────── v1.1.0
  Installed Bijectors ──────────────────── v0.8.7
  Installed AbstractFFTs ───────────────── v0.5.0
  Installed AdvancedMH ─────────────────── v0.5.1
  Installed LogDensityProblems ─────────── v0.10.3
  Installed Parameters ─────────────────── v0.12.1
  Installed Rmath ──────────────────────── v0.6.1
  Installed DocStringExtensions ────────── v0.8.3
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed StatsFuns ──────────────────── v0.9.5
  Installed RangeArrays ────────────────── v0.3.2
  Installed StaticArrays ───────────────── v0.12.4
  Installed ForwardDiff ────────────────── v0.10.12
  Installed ChainRulesCore ─────────────── v0.9.16
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed LoggingExtras ──────────────── v0.4.2
  Installed MacroTools ─────────────────── v0.5.5
Updating `~/.julia/environments/v1.6/Project.toml`
  [fce5fe82] + Turing v0.14.10
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [621f4979] + AbstractFFTs v0.5.0
  [80f14c24] + AbstractMCMC v1.0.1
  [1520ce14] + AbstractTrees v0.3.3
  [79e6a3ab] + Adapt v2.3.0
  [0bf59076] + AdvancedHMC v0.2.25
  [5b7e9947] + AdvancedMH v0.5.1
  [b5ca4192] + AdvancedVI v0.1.0
  [dce04be8] + ArgCheck v2.1.0
  [4fba245c] + ArrayInterface v2.13.6
  [39de3d68] + AxisArrays v0.4.3
  [6e4b80f9] + BenchmarkTools v0.5.0
  [76274a88] + Bijectors v0.8.7
  [b99e7846] + BinaryProvider v0.5.10
  [082447d4] + ChainRules v0.7.25
  [d360d2e6] + ChainRulesCore v0.9.16
  [861a8166] + Combinatorics v1.0.2
  [bbf7d656] + CommonSubexpressions v0.3.0
  [34da2185] + Compat v3.20.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [88cd18e8] + ConsoleProgressMonitor v0.1.2
  [a8cc5b0e] + Crayons v4.0.4
  [9a962f9c] + DataAPI v1.3.0
  [864edb3b] + DataStructures v0.18.7
  [e2d170a0] + DataValueInterfaces v1.0.0
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.1
  [31c24e10] + Distributions v0.23.12
  [ced4e74d] + DistributionsAD v0.6.9
  [ffbed154] + DocStringExtensions v0.8.3
  [366bfd00] + DynamicPPL v0.9.6
  [da5c29d0] + EllipsisNotation v0.4.0
  [cad2338a] + EllipticalSliceSampling v0.2.2
  [1a297f60] + FillArrays v0.9.7
  [53c48c17] + FixedPointNumbers v0.8.4
  [59287772] + Formatting v0.4.1
  [f6369f11] + ForwardDiff v0.10.12
  [505f98c9] + InplaceOps v0.3.0
  [8197267c] + IntervalSets v0.5.1
  [41ab1584] + InvertedIndices v1.0.0
  [c8e1da08] + IterTools v1.3.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.1
  [1d6d02ad] + LeftChildRightSiblingTrees v0.1.2
  [6f1fad26] + Libtask v0.4.2
  [6fdf6af0] + LogDensityProblems v0.10.3
  [e6f89c97] + LoggingExtras v0.4.2
  [c7f686f2] + MCMCChains v4.2.3
  [e80e1ace] + MLJModelInterface v0.3.6
  [1914dd2f] + MacroTools v0.5.5
  [dbb5928d] + MappedArrays v0.3.0
  [e1d29d7a] + Missings v0.4.4
  [46d2c3a1] + MuladdMacro v0.2.2
  [872c559c] + NNlib v0.7.5
  [77ba4419] + NaNMath v0.3.4
  [86f7a689] + NamedArrays v0.9.4
  [c020b1a1] + NaturalSort v1.0.0
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [bac558e1] + OrderedCollections v1.3.1
  [90014a1f] + PDMats v0.10.1
  [d96e819e] + Parameters v0.12.1
  [69de0a69] + Parsers v1.0.11
  [08abe8d2] + PrettyTables v0.9.1
  [33c8b6b6] + ProgressLogging v0.1.3
  [92933f4c] + ProgressMeter v1.4.0
  [1fd47b50] + QuadGK v2.4.1
  [b3c3ace0] + RangeArrays v0.3.2
  [3cdcf5f2] + RecipesBase v1.1.0
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v1.1.0
  [79098fc4] + Rmath v0.6.1
  [f50d1b31] + Rmath_jll v0.2.2+1
  [f2b01f46] + Roots v1.0.5
  [321657f4] + ScientificTypes v1.1.0
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.4
  [2913bbd2] + StatsBase v0.33.2
  [4c63d2b9] + StatsFuns v0.9.5
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.1.0
  [5d786b92] + TerminalLoggers v0.1.2
  [9f7883ad] + Tracker v0.2.12
  [84d833dd] + TransformVariables v0.3.10
  [fce5fe82] + Turing v0.14.10
  [3a884ed6] + UnPack v1.0.2
  [700de1a5] + ZygoteRules v0.2.0
  [56f22d72] + Artifacts
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [4607b0f0] + SuiteSparse
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building Libtask → `~/.julia/scratchspaces/44cfe95a-1eb2-52ea-b672-e2afdf69b78f/83e082fccb4e37d93df6440cdbd41dcbe5e46cb6/build.log`
Precompiling project... (tip: to disable auto-precompilation set ENV["JULIA_PKG_PRECOMPILE_AUTO"]=0)
[90m[32m  ✓ [39mDataValueInterfaces[39m
[90m[32m  ✓ [39mUnPack[39m
[90m[32m  ✓ [39mScientificTypes[39m
[90m[32m  ✓ [39mEllipsisNotation[39m
[90m[32m  ✓ [39mIteratorInterfaceExtensions[39m
[90m[32m  ✓ [39mMuladdMacro[39m
[90m[32m  ✓ [39mInvertedIndices[39m
[90m[32m  ✓ [39mNaturalSort[39m
[90m[32m  ✓ [39mAdapt[39m
[90m[32m  ✓ [39mArgCheck[39m
[90m[32m  ✓ [39mInplaceOps[39m
[90m[32m  ✓ [39mRangeArrays[39m
[90m[32m  ✓ [39mNaNMath[39m
[90m[32m  ✓ [39mReexport[39m
[90m[32m  ✓ [39mRecipesBase[39m
[90m[32m  ✓ [39mDataAPI[39m
[90m[32m  ✓ [39mRequires[39m
[90m[32m  ✓ [39mLoggingExtras[39m
[90m[32m  ✓ [39mProgressLogging[39m
[90m[32m  ✓ [39mOrderedCollections[39m
[90m[32m  ✓ [39mFormatting[39m
[90m[32m  ✓ [39mTableTraits[39m
[90m[32m  ✓ [39mAbstractFFTs[39m
[90m[32m  ✓ [39mDocStringExtensions[39m
[90m[32m  ✓ [39mCompat[39m
[90m[32m  ✓ [39mAbstractTrees[39m
[90m[32m  ✓ [39mIterTools[39m
[90m[32m  ✓ [39mLibtask[39m
[90m[32m  ✓ [39mPDMats[39m
[90m[32m  ✓ [39mProgressMeter[39m
[90m[32m  ✓ [39mMissings[39m
[90m[32m  ✓ [39mMLJModelInterface[39m
[90m[32m  ✓ [39mIntervalSets[39m
[90m[32m  ✓ [39mLeftChildRightSiblingTrees[39m
[90m[32m  ✓ [39mCrayons[39m
[90m[32m  ✓ [39mChainRulesCore[39m
[90m[32m  ✓ [39mRmath_jll[39m
[90m[32m  ✓ [39mParameters[39m
[90m[32m  ✓ [39mCombinatorics[39m
[90m[32m  ✓ [39mFillArrays[39m
[90m[32m  ✓ [39mConsoleProgressMonitor[39m
[90m[32m  ✓ [39mTables[39m
[90m[32m  ✓ [39mCompilerSupportLibraries_jll[39m
[90m[32m  ✓ [39mTerminalLoggers[39m
[90m[32m  ✓ [39mRmath[39m
[90m[32m  ✓ [39mAxisArrays[39m
[90m[32m  ✓ [39mFixedPointNumbers[39m
[90m[32m  ✓ [39mRoots[39m
[90m[32m  ✓ [39mArrayInterface[39m
[90m[32m  ✓ [39mMacroTools[39m
[90m[32m  ✓ [39mMappedArrays[39m
[90m[32m  ✓ [39mOpenSpecFun_jll[39m
[90m[32m  ✓ [39mNNlib[39m
[90m[32m  ✓ [39mParsers[39m
[90m[32m  ✓ [39mDataStructures[39m
[90m[32m  ✓ [39mCommonSubexpressions[39m
[90m[32m  ✓ [39mSortingAlgorithms[39m
[90m[32m  ✓ [39mZygoteRules[39m
[90m[32m  ✓ [39mJSON[39m
[90m[32m  ✓ [39mPrettyTables[39m
[90m[32m  ✓ [39mQuadGK[39m
[90m[32m  ✓ [39mNamedArrays[39m
[90m[32m  ✓ [39mBenchmarkTools[39m
[90m[32m  ✓ [39mStaticArrays[39m
[90m[32m  ✓ [39mSpecialFunctions[39m
[90m[32m  ✓ [39mStatsBase[39m
[90m[32m  ✓ [39mDiffRules[39m
[90m[32m  ✓ [39mDiffResults[39m
[90m[32m  ✓ [39mAbstractMCMC[39m
[90m[32m  ✓ [39mStatsFuns[39m
[90m[32m  ✓ [39mChainRules[39m
[90m[32m  ✓ [39mAdvancedHMC[39m
[90m[32m  ✓ [39mForwardDiff[39m
[90m[32m  ✓ [39mDistributions[39m
[90m[32m  ✓ [39mTransformVariables[39m
[90m[32m  ✓ [39mAdvancedMH[39m
[90m[32m  ✓ [39mEllipticalSliceSampling[39m
[90m[32m  ✓ [39mBijectors[39m
[90m[32m  ✓ [39mLogDensityProblems[39m
[90m[32m  ✓ [39mMCMCChains[39m
[90m[32m  ✓ [39mTracker[39m
[90m[32m  ✓ [39mDynamicPPL[39m
[90m[32m  ✓ [39mDistributionsAD[39m
[90m[32m  ✓ [39mAdvancedVI[39m
[32m  ✓ [39mTuring
85 dependencies successfully precompiled (1 already precompiled)
    Testing Turing
Status `/tmp/jl_4ilTPW/Project.toml`
  [80f14c24] AbstractMCMC v1.0.1
  [5b7e9947] AdvancedMH v0.5.1
  [b5ca4192] AdvancedVI v0.1.0
  [593b3428] CmdStan v6.0.9
  [31c24e10] Distributions v0.23.12
  [ced4e74d] DistributionsAD v0.6.9
  [bbc10e6e] DynamicHMC v2.2.0
  [366bfd00] DynamicPPL v0.9.6
  [26cc04aa] FiniteDifferences v0.11.2
  [f6369f11] ForwardDiff v0.10.12
  [c7f686f2] MCMCChains v4.2.3
  [6fafb56a] Memoization v0.1.5
  [86f7a689] NamedArrays v0.9.4
  [429524aa] Optim v1.2.0
  [90014a1f] PDMats v0.10.1
  [37e2e3b7] ReverseDiff v1.4.3
  [276daf66] SpecialFunctions v0.10.3
  [2913bbd2] StatsBase v0.33.2
  [4c63d2b9] StatsFuns v0.9.5
  [9f7883ad] Tracker v0.2.12
  [fce5fe82] Turing v0.14.10
  [e88e6eb3] Zygote v0.5.8
  [37e2e46d] LinearAlgebra
  [44cfe95a] Pkg
  [9a3f8284] Random
  [8dfed614] Test
Status `/tmp/jl_4ilTPW/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [80f14c24] AbstractMCMC v1.0.1
  [1520ce14] AbstractTrees v0.3.3
  [79e6a3ab] Adapt v2.3.0
  [0bf59076] AdvancedHMC v0.2.25
  [5b7e9947] AdvancedMH v0.5.1
  [b5ca4192] AdvancedVI v0.1.0
  [dce04be8] ArgCheck v2.1.0
  [4fba245c] ArrayInterface v2.13.6
  [4c555306] ArrayLayouts v0.4.9
  [39de3d68] AxisArrays v0.4.3
  [6e4b80f9] BenchmarkTools v0.5.0
  [76274a88] Bijectors v0.8.7
  [b99e7846] BinaryProvider v0.5.10
  [336ed68f] CSV v0.7.7
  [324d7699] CategoricalArrays v0.8.3
  [082447d4] ChainRules v0.7.25
  [d360d2e6] ChainRulesCore v0.9.16
  [593b3428] CmdStan v6.0.9
  [861a8166] Combinatorics v1.0.2
  [bbf7d656] CommonSubexpressions v0.3.0
  [34da2185] Compat v3.20.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [88cd18e8] ConsoleProgressMonitor v0.1.2
  [adafc99b] CpuId v0.2.2
  [a8cc5b0e] Crayons v4.0.4
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.21.8
  [864edb3b] DataStructures v0.18.7
  [e2d170a0] DataValueInterfaces v1.0.0
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [31c24e10] Distributions v0.23.12
  [ced4e74d] DistributionsAD v0.6.9
  [ffbed154] DocStringExtensions v0.8.3
  [bbc10e6e] DynamicHMC v2.2.0
  [366bfd00] DynamicPPL v0.9.6
  [da5c29d0] EllipsisNotation v0.4.0
  [cad2338a] EllipticalSliceSampling v0.2.2
  [1a297f60] FillArrays v0.9.7
  [6a86dc24] FiniteDiff v2.7.0
  [26cc04aa] FiniteDifferences v0.11.2
  [53c48c17] FixedPointNumbers v0.8.4
  [59287772] Formatting v0.4.1
  [f6369f11] ForwardDiff v0.10.12
  [069b7b12] FunctionWrappers v1.1.1
  [7869d1d1] IRTools v0.4.1
  [505f98c9] InplaceOps v0.3.0
  [8197267c] IntervalSets v0.5.1
  [41ab1584] InvertedIndices v1.0.0
  [c8e1da08] IterTools v1.3.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.1
  [1d6d02ad] LeftChildRightSiblingTrees v0.1.2
  [6f1fad26] Libtask v0.4.2
  [d3d80556] LineSearches v7.1.0
  [6fdf6af0] LogDensityProblems v0.10.3
  [e6f89c97] LoggingExtras v0.4.2
  [bdcacae8] LoopVectorization v0.8.26
  [c7f686f2] MCMCChains v4.2.3
  [e80e1ace] MLJModelInterface v0.3.6
  [1914dd2f] MacroTools v0.5.5
  [dbb5928d] MappedArrays v0.3.0
  [6fafb56a] Memoization v0.1.5
  [e1d29d7a] Missings v0.4.4
  [46d2c3a1] MuladdMacro v0.2.2
  [d41bc354] NLSolversBase v7.7.1
  [872c559c] NNlib v0.7.5
  [77ba4419] NaNMath v0.3.4
  [86f7a689] NamedArrays v0.9.4
  [c020b1a1] NaturalSort v1.0.0
  [6fe1bfb0] OffsetArrays v1.3.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [429524aa] Optim v1.2.0
  [bac558e1] OrderedCollections v1.3.1
  [90014a1f] PDMats v0.10.1
  [d96e819e] Parameters v0.12.1
  [69de0a69] Parsers v1.0.11
  [2dfb63ee] PooledArrays v0.5.3
  [85a6dd25] PositiveFactorizations v0.2.3
  [08abe8d2] PrettyTables v0.9.1
  [33c8b6b6] ProgressLogging v0.1.3
  [92933f4c] ProgressMeter v1.4.0
  [1fd47b50] QuadGK v2.4.1
  [b3c3ace0] RangeArrays v0.3.2
  [3cdcf5f2] RecipesBase v1.1.0
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.1.0
  [37e2e3b7] ReverseDiff v1.4.3
  [708f8203] Richardson v1.2.0
  [79098fc4] Rmath v0.6.1
  [f50d1b31] Rmath_jll v0.2.2+1
  [f2b01f46] Roots v1.0.5
  [21efa798] SIMDPirates v0.8.25
  [476501e8] SLEEFPirates v0.5.5
  [321657f4] ScientificTypes v1.1.0
  [91c51154] SentinelArrays v1.2.16
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [2913bbd2] StatsBase v0.33.2
  [4c63d2b9] StatsFuns v0.9.5
  [856f2bd8] StructTypes v1.1.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.1.0
  [5d786b92] TerminalLoggers v0.1.2
  [9f7883ad] Tracker v0.2.12
  [84d833dd] TransformVariables v0.3.10
  [fce5fe82] Turing v0.14.10
  [3a884ed6] UnPack v1.0.2
  [3d5dd08c] VectorizationBase v0.12.33
  [e88e6eb3] Zygote v0.5.8
  [700de1a5] ZygoteRules v0.2.0
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
[ Info: [Turing]: progress logging is disabled globally
[ Info: [AdvancedVI]: global PROGRESS is set as false
adr: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2778#1234
      @ ~/.julia/packages/Zygote/chgvX/src/compiler/interface2.jl:34 [inlined]
    [4] #s2778#1234(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] _pullback(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/chgvX/src/compiler/interface.jl:38
    [7] pullback(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/chgvX/src/compiler/interface.jl:44
    [8] gradient_logp(backend::ZygoteAD, θ::Vector{Float64}, vi::DynamicPPL.VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{DynamicPPL.VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{DynamicPPL.VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, model::DynamicPPL.Model{var"#43#44", (), (), (), Tuple{}, Tuple{}}, sampler::SampleFromPrior, context::DynamicPPL.DefaultContext)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/ad.jl:170
    [9] gradient_logp
      @ ~/.julia/packages/Turing/UsQlw/src/core/ad.jl:160 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:49
   [11] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [12] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:18
   [13] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:17
   [15] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [16] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [17] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [18] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [19] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [20] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [21] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [22] top-level scope
      @ none:6
   [23] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [24] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [25] _start()
      @ Base ./client.jl:485
Tracker, Zygote and ReverseDiff + logdet: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2778#1234
      @ ~/.julia/packages/Zygote/chgvX/src/compiler/interface2.jl:34 [inlined]
    [4] #s2778#1234(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] _pullback(f::Function, args::Matrix{Float64})
      @ Zygote ~/.julia/packages/Zygote/chgvX/src/compiler/interface.jl:38
    [7] pullback(f::Function, args::Matrix{Float64})
      @ Zygote ~/.julia/packages/Zygote/chgvX/src/compiler/interface.jl:44
    [8] test_reverse_mode_ad(f::var"#58#113", ȳ::Float64, x::Matrix{Float64}; rtol::Float64, atol::Float64)
      @ Main ~/.julia/packages/Turing/UsQlw/test/test_utils/ad_utils.jl:19
    [9] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:99
   [10] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [11] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:97
   [12] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [13] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:17
   [14] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [15] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [16] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [18] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [19] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [20] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [21] top-level scope
      @ none:6
   [22] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [23] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [24] _start()
      @ Base ./client.jl:485
Tracker & Zygote + fill: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2778#1234
      @ ~/.julia/packages/Zygote/chgvX/src/compiler/interface2.jl:34 [inlined]
    [4] #s2778#1234(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] _pullback(f::Function, args::Float64)
      @ Zygote ~/.julia/packages/Zygote/chgvX/src/compiler/interface.jl:38
    [7] pullback(f::Function, args::Float64)
      @ Zygote ~/.julia/packages/Zygote/chgvX/src/compiler/interface.jl:44
    [8] test_reverse_mode_ad(f::var"#59#114", ȳ::Vector{Float64}, x::Float64; rtol::Float64, atol::Float64)
      @ Main ~/.julia/packages/Turing/UsQlw/test/test_utils/ad_utils.jl:19
    [9] test_reverse_mode_ad(f::Function, ȳ::Vector{Float64}, x::Float64)
      @ Main ~/.julia/packages/Turing/UsQlw/test/test_utils/ad_utils.jl:12
   [10] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:103
   [11] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [12] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:102
   [13] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:17
   [15] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [16] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [17] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [18] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [19] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [20] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [21] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [22] top-level scope
      @ none:6
   [23] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [24] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [25] _start()
      @ Base ./client.jl:485
Tracker, Zygote and ReverseDiff + MvNormal: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2778#1234
      @ ~/.julia/packages/Zygote/chgvX/src/compiler/interface2.jl:34 [inlined]
    [4] #s2778#1234(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] _pullback(::Function, ::Vector{Float64}, ::Matrix{Float64}, ::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/chgvX/src/compiler/interface.jl:38
    [7] pullback(::Function, ::Vector{Float64}, ::Matrix{Float64}, ::Vararg{Any, N} where N)
      @ Zygote ~/.julia/packages/Zygote/chgvX/src/compiler/interface.jl:44
    [8] test_reverse_mode_ad(::var"#62#117", ::Float64, ::Vector{Float64}, ::Vararg{Any, N} where N; rtol::Float64, atol::Float64)
      @ Main ~/.julia/packages/Turing/UsQlw/test/test_utils/ad_utils.jl:19
    [9] test_reverse_mode_ad(::Function, ::Float64, ::Vector{Float64}, ::Vararg{Any, N} where N)
      @ Main ~/.julia/packages/Turing/UsQlw/test/test_utils/ad_utils.jl:12
   [10] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:120
   [11] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [12] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:108
   [13] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:17
   [15] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [16] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [17] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [18] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [19] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [20] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [21] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [22] top-level scope
      @ none:6
   [23] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [24] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [25] _start()
      @ Base ./client.jl:485
Tracker, Zygote and ReverseDiff + Diagonal Normal: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2778#1234
      @ ~/.julia/packages/Zygote/chgvX/src/compiler/interface2.jl:34 [inlined]
    [4] #s2778#1234(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] _pullback(::Function, ::Vector{Float64}, ::Vector{Float64}, ::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/chgvX/src/compiler/interface.jl:38
    [7] pullback(::Function, ::Vector{Float64}, ::Vector{Float64}, ::Vararg{Vector{Float64}, N} where N)
      @ Zygote ~/.julia/packages/Zygote/chgvX/src/compiler/interface.jl:44
    [8] test_reverse_mode_ad(::var"#63#118", ::Float64, ::Vector{Float64}, ::Vararg{Vector{Float64}, N} where N; rtol::Float64, atol::Float64)
      @ Main ~/.julia/packages/Turing/UsQlw/test/test_utils/ad_utils.jl:19
    [9] test_reverse_mode_ad(::Function, ::Float64, ::Vector{Float64}, ::Vararg{Any, N} where N)
      @ Main ~/.julia/packages/Turing/UsQlw/test/test_utils/ad_utils.jl:12
   [10] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:133
   [11] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [12] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:123
   [13] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:17
   [15] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [16] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [17] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [18] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [19] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [20] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [21] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [22] top-level scope
      @ none:6
   [23] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [24] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [25] _start()
      @ Base ./client.jl:485
Tracker, Zygote and ReverseDiff + MvNormal Interface: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2778#1234
      @ ~/.julia/packages/Zygote/chgvX/src/compiler/interface2.jl:34 [inlined]
    [4] #s2778#1234(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] _pullback(::Function, ::Matrix{Float64}, ::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/chgvX/src/compiler/interface.jl:38
    [7] pullback(::Function, ::Matrix{Float64}, ::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/chgvX/src/compiler/interface.jl:44
    [8] test_reverse_mode_ad(::var"#64#119", ::Float64, ::Matrix{Float64}, ::Vararg{Any, N} where N; rtol::Float64, atol::Float64)
      @ Main ~/.julia/packages/Turing/UsQlw/test/test_utils/ad_utils.jl:19
    [9] test_reverse_mode_ad(::Function, ::Float64, ::Matrix{Float64}, ::Vararg{Any, N} where N)
      @ Main ~/.julia/packages/Turing/UsQlw/test/test_utils/ad_utils.jl:12
   [10] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:144
   [11] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [12] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:139
   [13] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:17
   [15] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [16] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [17] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [18] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [19] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [20] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [21] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [22] top-level scope
      @ none:6
   [23] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [24] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [25] _start()
      @ Base ./client.jl:485
Simplex Tracker, Zygote and ReverseDiff (with and without caching) AD: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/core/ad.jl:266
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2778#1234
      @ ~/.julia/packages/Zygote/chgvX/src/compiler/interface2.jl:34 [inlined]
    [4] #s2778#1234(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] _pullback(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/chgvX/src/compiler/interface.jl:38
    [7] pullback(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/chgvX/src/compiler/interface.jl:44
    [8] gradient_logp(backend::ZygoteAD, θ::Vector{Float64}, vi::DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Dirichlet{Float64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, model::DynamicPPL.Model{var"#100#156", (), (), (), Tuple{}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Dirichlet{Float64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, context::DynamicPPL.DefaultContext)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/ad.jl:170
    [9] gradient_logp
      @ ~/.julia/packages/Turing/UsQlw/src/core/ad.jl:83 [inlined]
   [10] ∂logπ∂θ
      @ ~/.julia/packages/Turing/UsQlw/src/inference/hmc.jl:474 [inlined]
   [11] ∂H∂θ
      @ ~/.julia/packages/AdvancedHMC/P9wqk/src/hamiltonian.jl:31 [inlined]
   [12] phasepoint(h::AdvancedHMC.Hamiltonian{AdvancedHMC.UnitEuclideanMetric{Float64, Tuple{Int64}}, Turing.Inference.var"#logπ#55"{DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Dirichlet{Float64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Sampler{HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Dirichlet{Float64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, DynamicPPL.Model{var"#100#156", (), (), (), Tuple{}, Tuple{}}}, Turing.Inference.var"#∂logπ∂θ#54"{DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Dirichlet{Float64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Sampler{HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Dirichlet{Float64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, DynamicPPL.Model{var"#100#156", (), (), (), Tuple{}, Tuple{}}}}, θ::Vector{Float64}, r::Vector{Float64})
      @ AdvancedHMC ~/.julia/packages/AdvancedHMC/P9wqk/src/hamiltonian.jl:69
   [13] phasepoint
      @ ~/.julia/packages/AdvancedHMC/P9wqk/src/hamiltonian.jl:139 [inlined]
   [14] sample_init
      @ ~/.julia/packages/AdvancedHMC/P9wqk/src/sampler.jl:42 [inlined]
   [15] Turing.Inference.HMCState(model::DynamicPPL.Model{var"#100#156", (), (), (), Tuple{}, Tuple{}}, spl::DynamicPPL.Sampler{HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Dirichlet{Float64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, rng::Random._GLOBAL_RNG; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/hmc.jl:634
   [16] Turing.Inference.HMCState(model::DynamicPPL.Model{var"#100#156", (), (), (), Tuple{}, Tuple{}}, spl::DynamicPPL.Sampler{HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Dirichlet{Float64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, rng::Random._GLOBAL_RNG)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/hmc.jl:605
   [17] DynamicPPL.Sampler(alg::HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, model::DynamicPPL.Model{var"#100#156", (), (), (), Tuple{}, Tuple{}}, s::DynamicPPL.Selector)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/hmc.jl:384
   [18] Sampler
      @ ~/.julia/packages/Turing/UsQlw/src/inference/hmc.jl:376 [inlined]
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#100#156", (), (), (), Tuple{}, Tuple{}}, alg::HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [20] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [21] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [22] sample(model::DynamicPPL.Model{var"#100#156", (), (), (), Tuple{}, Tuple{}}, alg::HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [23] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:273
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:267
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [32] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [33] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485
PDMatDistribution AD: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/core/ad.jl:288
  Got exception outside of a @test
  MethodError: no method matching Core.Compiler.IRCode(::Vector{Any}, ::Vector{Any}, ::Vector{Int32}, ::Vector{UInt8}, ::Core.Compiler.CFG, ::Vector{Core.LineInfoNode}, ::Vector{Any}, ::Vector{Any}, ::Vector{Any})
  Stacktrace:
    [1] Core.Compiler.IRCode(ir::IRTools.Inner.IR)
      @ IRTools.Inner.Wrap ~/.julia/packages/IRTools/GVPoj/src/ir/wrap.jl:55
    [2] update!(ci::Core.CodeInfo, ir::IRTools.Inner.IR)
      @ IRTools.Inner ~/.julia/packages/IRTools/GVPoj/src/reflection/utils.jl:143
    [3] #s2778#1234
      @ ~/.julia/packages/Zygote/chgvX/src/compiler/interface2.jl:34 [inlined]
    [4] #s2778#1234(::Any, ctx::Any, f::Any, args::Any)
      @ Zygote ./none:0
    [5] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)
      @ Core ./boot.jl:571
    [6] _pullback(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/chgvX/src/compiler/interface.jl:38
    [7] pullback(f::Function, args::Vector{Float64})
      @ Zygote ~/.julia/packages/Zygote/chgvX/src/compiler/interface.jl:44
    [8] gradient_logp(backend::ZygoteAD, θ::Vector{Float64}, vi::DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Wishart{Float64, PDMat{Float64, Matrix{Float64}}, Int64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, model::DynamicPPL.Model{var"#101#158", (), (), (), Tuple{}, Tuple{}}, sampler::DynamicPPL.Sampler{HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Wishart{Float64, PDMat{Float64, Matrix{Float64}}, Int64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, context::DynamicPPL.DefaultContext)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/ad.jl:170
    [9] gradient_logp
      @ ~/.julia/packages/Turing/UsQlw/src/core/ad.jl:83 [inlined]
   [10] ∂logπ∂θ
      @ ~/.julia/packages/Turing/UsQlw/src/inference/hmc.jl:474 [inlined]
   [11] ∂H∂θ
      @ ~/.julia/packages/AdvancedHMC/P9wqk/src/hamiltonian.jl:31 [inlined]
   [12] phasepoint(h::AdvancedHMC.Hamiltonian{AdvancedHMC.UnitEuclideanMetric{Float64, Tuple{Int64}}, Turing.Inference.var"#logπ#55"{DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Wishart{Float64, PDMat{Float64, Matrix{Float64}}, Int64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Sampler{HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Wishart{Float64, PDMat{Float64, Matrix{Float64}}, Int64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, DynamicPPL.Model{var"#101#158", (), (), (), Tuple{}, Tuple{}}}, Turing.Inference.var"#∂logπ∂θ#54"{DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Wishart{Float64, PDMat{Float64, Matrix{Float64}}, Int64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Sampler{HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Wishart{Float64, PDMat{Float64, Matrix{Float64}}, Int64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, DynamicPPL.Model{var"#101#158", (), (), (), Tuple{}, Tuple{}}}}, θ::Vector{Float64}, r::Vector{Float64})
      @ AdvancedHMC ~/.julia/packages/AdvancedHMC/P9wqk/src/hamiltonian.jl:69
   [13] phasepoint
      @ ~/.julia/packages/AdvancedHMC/P9wqk/src/hamiltonian.jl:139 [inlined]
   [14] sample_init
      @ ~/.julia/packages/AdvancedHMC/P9wqk/src/sampler.jl:42 [inlined]
   [15] Turing.Inference.HMCState(model::DynamicPPL.Model{var"#101#158", (), (), (), Tuple{}, Tuple{}}, spl::DynamicPPL.Sampler{HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Wishart{Float64, PDMat{Float64, Matrix{Float64}}, Int64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, rng::Random._GLOBAL_RNG; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/hmc.jl:634
   [16] Turing.Inference.HMCState(model::DynamicPPL.Model{var"#101#158", (), (), (), Tuple{}, Tuple{}}, spl::DynamicPPL.Sampler{HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:theta,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:theta, Tuple{}}, Int64}, Vector{Wishart{Float64, PDMat{Float64, Matrix{Float64}}, Int64}}, Vector{DynamicPPL.VarName{:theta, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, rng::Random._GLOBAL_RNG)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/hmc.jl:605
   [17] DynamicPPL.Sampler(alg::HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, model::DynamicPPL.Model{var"#101#158", (), (), (), Tuple{}, Tuple{}}, s::DynamicPPL.Selector)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/hmc.jl:384
   [18] Sampler
      @ ~/.julia/packages/Turing/UsQlw/src/inference/hmc.jl:376 [inlined]
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#101#158", (), (), (), Tuple{}, Tuple{}}, alg::HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [20] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [21] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [22] sample(model::DynamicPPL.Model{var"#101#158", (), (), (), Tuple{}, Tuple{}}, alg::HMC{ZygoteAD, (), AdvancedHMC.UnitEuclideanMetric}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [23] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:297
   [24] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [25] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:289
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:17
   [28] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [29] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [30] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [31] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [32] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [33] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [34] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [35] top-level scope
      @ none:6
   [36] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [37] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [38] _start()
      @ Base ./client.jl:485
memoization: issue #1393: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/core/ad.jl:348
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/FunctionWrappers/OAZAk/src/FunctionWrappers.jl:9 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/FunctionWrappers/OAZAk/src/FunctionWrappers.jl:107 [inlined]
    [3] do_ccall
      @ ~/.julia/packages/FunctionWrappers/OAZAk/src/FunctionWrappers.jl:97 [inlined]
    [4] FunctionWrapper
      @ ~/.julia/packages/FunctionWrappers/OAZAk/src/FunctionWrappers.jl:116 [inlined]
    [5] forward_pass!(compiled_tape::ReverseDiff.CompiledTape{ReverseDiff.GradientTape{Turing.Core.var"#f#31"{DynamicPPL.VarInfo{NamedTuple{(:sigma,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:sigma, Tuple{}}, Int64}, Vector{Uniform{Float64}}, Vector{DynamicPPL.VarName{:sigma, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#105#168", (:data,), (), (), Tuple{Vector{Float64}}, Tuple{}}, DynamicPPL.Sampler{NUTS{Turing.Core.ReverseDiffAD{true}, (), AdvancedHMC.DiagEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:sigma,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:sigma, Tuple{}}, Int64}, Vector{Uniform{Float64}}, Vector{DynamicPPL.VarName{:sigma, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, DynamicPPL.DefaultContext}, ReverseDiff.TrackedArray{Float64, Float64, 1, Vector{Float64}, Vector{Float64}}, ReverseDiff.TrackedReal{Float64, Float64, ReverseDiff.TrackedArray{Float64, Float64, 1, Vector{Float64}, Vector{Float64}}}}})
      @ ReverseDiff ~/.julia/packages/ReverseDiff/jFRo1/src/api/tape.jl:124
    [6] seeded_forward_pass!
      @ ~/.julia/packages/ReverseDiff/jFRo1/src/api/tape.jl:42 [inlined]
    [7] gradient!
      @ ~/.julia/packages/ReverseDiff/jFRo1/src/api/gradients.jl:79 [inlined]
    [8] gradient_logp(backend::Turing.Core.ReverseDiffAD{true}, θ::Vector{Float64}, vi::DynamicPPL.VarInfo{NamedTuple{(:sigma,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:sigma, Tuple{}}, Int64}, Vector{Uniform{Float64}}, Vector{DynamicPPL.VarName{:sigma, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, model::DynamicPPL.Model{var"#105#168", (:data,), (), (), Tuple{Vector{Float64}}, Tuple{}}, sampler::DynamicPPL.Sampler{NUTS{Turing.Core.ReverseDiffAD{true}, (), AdvancedHMC.DiagEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:sigma,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:sigma, Tuple{}}, Int64}, Vector{Uniform{Float64}}, Vector{DynamicPPL.VarName{:sigma, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, context::DynamicPPL.DefaultContext)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/compat/reversediff.jl:70
    [9] gradient_logp
      @ ~/.julia/packages/Turing/UsQlw/src/core/ad.jl:83 [inlined]
   [10] ∂logπ∂θ
      @ ~/.julia/packages/Turing/UsQlw/src/inference/hmc.jl:474 [inlined]
   [11] ∂H∂θ
      @ ~/.julia/packages/AdvancedHMC/P9wqk/src/hamiltonian.jl:31 [inlined]
   [12] phasepoint
      @ ~/.julia/packages/AdvancedHMC/P9wqk/src/hamiltonian.jl:69 [inlined]
   [13] find_good_stepsize(rng::Random._GLOBAL_RNG, h::AdvancedHMC.Hamiltonian{AdvancedHMC.DiagEuclideanMetric{Float64, Vector{Float64}}, Turing.Inference.var"#logπ#55"{DynamicPPL.VarInfo{NamedTuple{(:sigma,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:sigma, Tuple{}}, Int64}, Vector{Uniform{Float64}}, Vector{DynamicPPL.VarName{:sigma, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Sampler{NUTS{Turing.Core.ReverseDiffAD{true}, (), AdvancedHMC.DiagEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:sigma,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:sigma, Tuple{}}, Int64}, Vector{Uniform{Float64}}, Vector{DynamicPPL.VarName{:sigma, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, DynamicPPL.Model{var"#105#168", (:data,), (), (), Tuple{Vector{Float64}}, Tuple{}}}, Turing.Inference.var"#∂logπ∂θ#54"{DynamicPPL.VarInfo{NamedTuple{(:sigma,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:sigma, Tuple{}}, Int64}, Vector{Uniform{Float64}}, Vector{DynamicPPL.VarName{:sigma, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Sampler{NUTS{Turing.Core.ReverseDiffAD{true}, (), AdvancedHMC.DiagEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:sigma,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:sigma, Tuple{}}, Int64}, Vector{Uniform{Float64}}, Vector{DynamicPPL.VarName{:sigma, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, DynamicPPL.Model{var"#105#168", (:data,), (), (), Tuple{Vector{Float64}}, Tuple{}}}}, θ::Vector{Float64}; max_n_iters::Int64)
      @ AdvancedHMC ~/.julia/packages/AdvancedHMC/P9wqk/src/trajectory.jl:718
   [14] #find_good_stepsize#13
      @ ~/.julia/packages/AdvancedHMC/P9wqk/src/trajectory.jl:778 [inlined]
   [15] find_good_stepsize
      @ ~/.julia/packages/AdvancedHMC/P9wqk/src/trajectory.jl:778 [inlined]
   [16] Turing.Inference.HMCState(model::DynamicPPL.Model{var"#105#168", (:data,), (), (), Tuple{Vector{Float64}}, Tuple{}}, spl::DynamicPPL.Sampler{NUTS{Turing.Core.ReverseDiffAD{true}, (), AdvancedHMC.DiagEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:sigma,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:sigma, Tuple{}}, Int64}, Vector{Uniform{Float64}}, Vector{DynamicPPL.VarName{:sigma, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, rng::Random._GLOBAL_RNG; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/hmc.jl:624
   [17] Turing.Inference.HMCState(model::DynamicPPL.Model{var"#105#168", (:data,), (), (), Tuple{Vector{Float64}}, Tuple{}}, spl::DynamicPPL.Sampler{NUTS{Turing.Core.ReverseDiffAD{true}, (), AdvancedHMC.DiagEuclideanMetric}, Turing.Inference.SamplerState{DynamicPPL.VarInfo{NamedTuple{(:sigma,), Tuple{DynamicPPL.Metadata{Dict{DynamicPPL.VarName{:sigma, Tuple{}}, Int64}, Vector{Uniform{Float64}}, Vector{DynamicPPL.VarName{:sigma, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}, rng::Random._GLOBAL_RNG)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/hmc.jl:605
   [18] DynamicPPL.Sampler(alg::NUTS{Turing.Core.ReverseDiffAD{true}, (), AdvancedHMC.DiagEuclideanMetric}, model::DynamicPPL.Model{var"#105#168", (:data,), (), (), Tuple{Vector{Float64}}, Tuple{}}, s::DynamicPPL.Selector)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/hmc.jl:384
   [19] Sampler
      @ ~/.julia/packages/Turing/UsQlw/src/inference/hmc.jl:376 [inlined]
   [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#105#168", (:data,), (), (), Tuple{Vector{Float64}}, Tuple{}}, alg::NUTS{Turing.Core.ReverseDiffAD{true}, (), AdvancedHMC.DiagEuclideanMetric}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [21] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [22] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [23] sample(model::DynamicPPL.Model{var"#105#168", (:data,), (), (), Tuple{Vector{Float64}}, Tuple{}}, alg::NUTS{Turing.Core.ReverseDiffAD{true}, (), AdvancedHMC.DiagEuclideanMetric}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [24] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:361
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:349
   [27] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [28] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/ad.jl:17
   [29] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [30] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [33] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [34] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [35] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [36] top-level scope
      @ none:6
   [37] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [38] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [39] _start()
      @ Base ./client.jl:485
particle container: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(), Tuple{}}, Float64}, Float64}}, DynamicPPL.UntypedVarInfo{DynamicPPL.Metadata{Dict{VarName, Int64}, Vector{Distribution}, Vector{VarName}, Vector{Real}, Vector{Set{DynamicPPL.Selector}}}, Float64}, DynamicPPL.Model{var"#188#189", (), (), (), Tuple{}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(), Tuple{}}, Float64}, Float64}}, DynamicPPL.UntypedVarInfo{DynamicPPL.Metadata{Dict{VarName, Int64}, Vector{Distribution}, Vector{VarName}, Vector{Real}, Vector{Set{DynamicPPL.Selector}}}, Float64}, DynamicPPL.Model{var"#188#189", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(), Tuple{}}, Float64}, Float64}}, DynamicPPL.UntypedVarInfo{DynamicPPL.Metadata{Dict{VarName, Int64}, Vector{Distribution}, Vector{VarName}, Vector{Real}, Vector{Set{DynamicPPL.Selector}}}, Float64}, DynamicPPL.Model{var"#188#189", (), (), (), Tuple{}, Tuple{}}}}, randcat::typeof(Turing.Inference.resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] resample_propagate!
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:187 [inlined]
    [7] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/container.jl:67
    [8] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
    [9] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/container.jl:23
   [10] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [11] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/container.jl:13
   [12] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [13] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:17 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [15] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [16] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [17] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [18] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [19] top-level scope
      @ none:6
   [20] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [21] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [22] _start()
      @ Base ./client.jl:485
trace: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(), Tuple{}}, Float64}, Float64}}, DynamicPPL.UntypedVarInfo{DynamicPPL.Metadata{Dict{VarName, Int64}, Vector{Distribution}, Vector{VarName}, Vector{Real}, Vector{Set{DynamicPPL.Selector}}}, Float64}, DynamicPPL.Model{var"#188#189", (), (), (), Tuple{}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(), Tuple{}}, Float64}, Float64}}, DynamicPPL.UntypedVarInfo{DynamicPPL.Metadata{Dict{VarName, Int64}, Vector{Distribution}, Vector{VarName}, Vector{Real}, Vector{Set{DynamicPPL.Selector}}}, Float64}, DynamicPPL.Model{var"#188#189", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/container.jl:121
    [6] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
    [7] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/container.jl:96
    [8] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
    [9] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/core/container.jl:13
   [10] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [11] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:17 [inlined]
   [12] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [13] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:16 [inlined]
   [14] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [15] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [16] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [17] top-level scope
      @ none:6
   [18] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [19] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [20] _start()
      @ Base ./client.jl:485
gibbs constructor: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#237#238", (), (), (), Tuple{}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#237#238", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#237#238", (), (), (), Tuple{}, Tuple{}}}}, randcat::typeof(Turing.Inference.resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#237#238", (), (), (), Tuple{}, Tuple{}}}}, resampler::Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#237#238", (), (), (), Tuple{}, Tuple{}}}}, resampler::Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#237#238", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
   [10] (::Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#237#238", (), (), (), Tuple{}, Tuple{}}, Sampler{Gibbs{(:s, :m), Tuple{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, Int64, Nothing})(::Tuple{Int64, Sampler{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:187
   [11] iterate
      @ ./generator.jl:47 [inlined]
   [12] collect
      @ ./array.jl:686 [inlined]
   [13] map
      @ ./abstractarray.jl:2267 [inlined]
   [14] step!(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#237#238", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, N::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:179
   [15] #step!#8
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/interface.jl:87 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:78 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [18] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#237#238", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#237#238", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#237#238", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [21] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#237#238", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:s, :m), Tuple{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [22] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [23] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [24] sample(model::DynamicPPL.Model{var"#237#238", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:s, :m), Tuple{PG{(:s, :m), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [25] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/gibbs.jl:24
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/gibbs.jl:12
   [28] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [29] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/gibbs.jl:11
   [30] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [31] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [32] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [33] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [34] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:24 [inlined]
   [36] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
gibbs inference: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#235#236", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#235#236", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#235#236", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}}}, randcat::typeof(Turing.Inference.resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#235#236", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}}}, resampler::Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#235#236", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}}}, resampler::Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#235#236", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, spl::Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
   [10] (::Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#235#236", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, Int64, Nothing})(::Tuple{Int64, Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:187
   [11] iterate
      @ ./generator.jl:47 [inlined]
   [12] collect
      @ ./array.jl:686 [inlined]
   [13] map
      @ ./abstractarray.jl:2267 [inlined]
   [14] step!(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#235#236", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, spl::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:179
   [15] #step!#8
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/interface.jl:87 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:78 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [18] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#235#236", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#235#236", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#235#236", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [21] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#235#236", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, alg::Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [22] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [23] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [24] sample(model::DynamicPPL.Model{var"#235#236", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, alg::Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMC{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [25] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/gibbs.jl:46
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/gibbs.jl:42
   [28] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [29] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/gibbs.jl:11
   [30] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [31] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [32] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [33] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [34] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:24 [inlined]
   [36] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
[ Info: (symbol = :p, exact = 0.7142857142857143, evaluated = 0.7107606277088518)
[ Info: (symbol = "ps[1]", exact = 0.3125, evaluated = 0.3119612799231326)
[ Info: (symbol = "ps[2]", exact = 0.6875, evaluated = 0.6880387200768661)
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.0175279768556664)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.150595501966182)
┌ Info: Found initial step size
└   ϵ = 0.8500000000000001
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.0854561548044503)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.2583226998542636)
┌ Info: Found initial step size
└   ϵ = 6.4
hmcda inference: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}}}, randcat::typeof(Turing.Inference.resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}}}, resampler::Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}}}, resampler::Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Turing.Inference.ParticleTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64}; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
   [10] (::Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMCDA{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, Int64, Turing.Inference.GibbsTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64, Vector{Any}}})(::Tuple{Int64, Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:189
   [11] iterate
      @ ./generator.jl:47 [inlined]
   [12] collect
      @ ./array.jl:686 [inlined]
   [13] map
      @ ./abstractarray.jl:2267 [inlined]
   [14] step!(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMCDA{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64, transition::Turing.Inference.GibbsTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64, Vector{Any}}; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:179
   [15] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:93 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [17] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMCDA{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [18] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMCDA{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMCDA{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMCDA{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [21] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [22] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [23] sample(model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMCDA{ForwardDiffAD{40}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [24] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:131
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:117
   [27] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [28] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:12
   [29] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [30] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:26 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [33] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [34] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:24 [inlined]
   [35] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [36] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [37] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [38] top-level scope
      @ none:6
   [39] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [40] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [41] _start()
      @ Base ./client.jl:485
HMCDA{ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}(-1, 0.8, 0.75, 0.0)
┌ Info: Found initial step size
└   ϵ = 0.8500000000000001
HMCDA{ForwardDiffAD{40}, (), AdvancedHMC.UnitEuclideanMetric}(200, 0.8, 0.75, 0.0)
┌ Info: Found initial step size
└   ϵ = 1.6
HMCDA{ForwardDiffAD{40}, (:s,), AdvancedHMC.UnitEuclideanMetric}(200, 0.8, 0.75, 0.0)
┌ Info: Found initial step size
└   ϵ = 1.6
┌ Info: Found initial step size
└   ϵ = 0.8500000000000001
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.0161301812600656)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1450578205709525)
┌ Info: Found initial step size
└   ϵ = 0.8500000000000001
┌ Info: Found initial step size
└   ϵ = 1.6
┌ Info: Found initial step size
└   ϵ = 9.600000000000001
┌ Info: Found initial step size
└   ϵ = 0.8500000000000001
┌ Info: Found initial step size
└   ϵ = 1.6
┌ Info: Found initial step size
└   ϵ = 1.6
AHMC resize: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:184
  Test threw exception
  Expression: sample(gdemo_default, alg1, 300) isa Chains
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}}}, randcat::typeof(Turing.Inference.resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}}}, resampler::Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}}}, resampler::Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
   [10] (::Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, NUTS{ForwardDiffAD{40}, (:s,), AdvancedHMC.DiagEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{NUTS{ForwardDiffAD{40}, (:s,), AdvancedHMC.DiagEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.NUTS{AdvancedHMC.MultinomialTS, AdvancedHMC.GeneralisedNoUTurn, AdvancedHMC.Leapfrog{Float64}, Float64}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.WelfordVar{Float64, Vector{Float64}}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, Int64, Nothing})(::Tuple{Int64, Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:187
   [11] iterate
      @ ./generator.jl:47 [inlined]
   [12] collect
      @ ./array.jl:686 [inlined]
   [13] map
      @ ./abstractarray.jl:2267 [inlined]
   [14] step!(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, NUTS{ForwardDiffAD{40}, (:s,), AdvancedHMC.DiagEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{NUTS{ForwardDiffAD{40}, (:s,), AdvancedHMC.DiagEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.NUTS{AdvancedHMC.MultinomialTS, AdvancedHMC.GeneralisedNoUTurn, AdvancedHMC.Leapfrog{Float64}, Float64}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.WelfordVar{Float64, Vector{Float64}}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:179
   [15] #step!#8
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/interface.jl:87 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:78 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [18] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, NUTS{ForwardDiffAD{40}, (:s,), AdvancedHMC.DiagEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{NUTS{ForwardDiffAD{40}, (:s,), AdvancedHMC.DiagEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.NUTS{AdvancedHMC.MultinomialTS, AdvancedHMC.GeneralisedNoUTurn, AdvancedHMC.Leapfrog{Float64}, Float64}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.WelfordVar{Float64, Vector{Float64}}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, NUTS{ForwardDiffAD{40}, (:s,), AdvancedHMC.DiagEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{NUTS{ForwardDiffAD{40}, (:s,), AdvancedHMC.DiagEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.NUTS{AdvancedHMC.MultinomialTS, AdvancedHMC.GeneralisedNoUTurn, AdvancedHMC.Leapfrog{Float64}, Float64}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.WelfordVar{Float64, Vector{Float64}}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, NUTS{ForwardDiffAD{40}, (:s,), AdvancedHMC.DiagEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{NUTS{ForwardDiffAD{40}, (:s,), AdvancedHMC.DiagEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.NUTS{AdvancedHMC.MultinomialTS, AdvancedHMC.GeneralisedNoUTurn, AdvancedHMC.Leapfrog{Float64}, Float64}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.WelfordVar{Float64, Vector{Float64}}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [21] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:m, :s), Tuple{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, NUTS{ForwardDiffAD{40}, (:s,), AdvancedHMC.DiagEuclideanMetric}}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [22] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [23] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [24] sample(model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:m, :s), Tuple{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, NUTS{ForwardDiffAD{40}, (:s,), AdvancedHMC.DiagEuclideanMetric}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [25] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:184
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:181
   [28] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [29] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:12
AHMC resize: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:185
  Test threw exception
  Expression: sample(gdemo_default, alg2, 300) isa Chains
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}}}, randcat::typeof(Turing.Inference.resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}}}, resampler::Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}}}, resampler::Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
   [10] (::Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMC{ForwardDiffAD{40}, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{ForwardDiffAD{40}, (:s,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, Int64, Nothing})(::Tuple{Int64, Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:187
   [11] iterate
      @ ./generator.jl:47 [inlined]
   [12] collect
      @ ./array.jl:686 [inlined]
   [13] map
      @ ./abstractarray.jl:2267 [inlined]
   [14] step!(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMC{ForwardDiffAD{40}, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{ForwardDiffAD{40}, (:s,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:179
   [15] #step!#8
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/interface.jl:87 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:78 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [18] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMC{ForwardDiffAD{40}, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{ForwardDiffAD{40}, (:s,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMC{ForwardDiffAD{40}, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{ForwardDiffAD{40}, (:s,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMC{ForwardDiffAD{40}, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{ForwardDiffAD{40}, (:s,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [21] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:m, :s), Tuple{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMC{ForwardDiffAD{40}, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [22] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [23] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [24] sample(model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:m, :s), Tuple{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMC{ForwardDiffAD{40}, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [25] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:185
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:181
   [28] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [29] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:12
┌ Info: Found initial step size
└   ϵ = 1.6
AHMC resize: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:186
  Test threw exception
  Expression: sample(gdemo_default, alg3, 300) isa Chains
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}}}, randcat::typeof(Turing.Inference.resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}}}, resampler::Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}}}, resampler::Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
   [10] (::Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMCDA{ForwardDiffAD{40}, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{ForwardDiffAD{40}, (:s,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, Int64, Nothing})(::Tuple{Int64, Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:187
   [11] iterate
      @ ./generator.jl:47 [inlined]
   [12] collect
      @ ./array.jl:686 [inlined]
   [13] map
      @ ./abstractarray.jl:2267 [inlined]
   [14] step!(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMCDA{ForwardDiffAD{40}, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{ForwardDiffAD{40}, (:s,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:179
   [15] #step!#8
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/interface.jl:87 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:78 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [18] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMCDA{ForwardDiffAD{40}, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{ForwardDiffAD{40}, (:s,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMCDA{ForwardDiffAD{40}, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{ForwardDiffAD{40}, (:s,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMCDA{ForwardDiffAD{40}, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{ForwardDiffAD{40}, (:s,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [21] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:m, :s), Tuple{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMCDA{ForwardDiffAD{40}, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [22] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [23] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [24] sample(model::DynamicPPL.Model{var"#275#276", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:m, :s), Tuple{PG{(:m,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, HMCDA{ForwardDiffAD{40}, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [25] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:186
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:181
   [28] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [29] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:12
WARNING: Method definition mwe() in module Main at /home/pkgeval/.julia/packages/DynamicPPL/jOFDR/src/compiler.jl:344 overwritten on the same line.
WARNING: Method definition mwe() in module Main at /home/pkgeval/.julia/packages/DynamicPPL/jOFDR/src/compiler.jl:344 overwritten on the same line.
WARNING: Method definition mwe(Type{T}) where {T} in module Main at /home/pkgeval/.julia/packages/DynamicPPL/jOFDR/src/compiler.jl:344 overwritten on the same line.
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.0268554598193718)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1586543497235515)
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 1.9871561238767463)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.175057362302578)
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.060653526648612)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1243427492739857)
mh inference: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(:z1, :z2, :z3, :z4), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#368#369", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(:z1, :z2, :z3, :z4), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#368#369", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:z1, :z2, :z3, :z4), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#368#369", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}}}, randcat::typeof(Turing.Inference.resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:z1, :z2, :z3, :z4), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#368#369", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}}}, resampler::Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(:z1, :z2, :z3, :z4), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#368#369", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}}}, resampler::Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#368#369", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, spl::Sampler{PG{(:z1, :z2, :z3, :z4), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
   [10] (::Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#368#369", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, Sampler{Gibbs{(:z1, :z2, :z3, :z4, :mu1, :mu2), Tuple{PG{(:z1, :z2, :z3, :z4), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#374#375"{Int64}}, AdvancedMH.StaticProposal{var"#374#375"{Int64}}}}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:z1, :z2, :z3, :z4), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#374#375"{Int64}}, AdvancedMH.StaticProposal{var"#374#375"{Int64}}}}}, Turing.Inference.SamplerState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}}}}, Int64, Nothing})(::Tuple{Int64, Sampler{PG{(:z1, :z2, :z3, :z4), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:187
   [11] iterate
      @ ./generator.jl:47 [inlined]
   [12] collect
      @ ./array.jl:686 [inlined]
   [13] map
      @ ./abstractarray.jl:2267 [inlined]
   [14] step!(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#368#369", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, spl::Sampler{Gibbs{(:z1, :z2, :z3, :z4, :mu1, :mu2), Tuple{PG{(:z1, :z2, :z3, :z4), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#374#375"{Int64}}, AdvancedMH.StaticProposal{var"#374#375"{Int64}}}}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:z1, :z2, :z3, :z4), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#374#375"{Int64}}, AdvancedMH.StaticProposal{var"#374#375"{Int64}}}}}, Turing.Inference.SamplerState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}}}}, N::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:179
   [15] #step!#8
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/interface.jl:87 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:78 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [18] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#368#369", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, sampler::Sampler{Gibbs{(:z1, :z2, :z3, :z4, :mu1, :mu2), Tuple{PG{(:z1, :z2, :z3, :z4), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#374#375"{Int64}}, AdvancedMH.StaticProposal{var"#374#375"{Int64}}}}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:z1, :z2, :z3, :z4), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#374#375"{Int64}}, AdvancedMH.StaticProposal{var"#374#375"{Int64}}}}}, Turing.Inference.SamplerState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#368#369", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, sampler::Sampler{Gibbs{(:z1, :z2, :z3, :z4, :mu1, :mu2), Tuple{PG{(:z1, :z2, :z3, :z4), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#374#375"{Int64}}, AdvancedMH.StaticProposal{var"#374#375"{Int64}}}}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:z1, :z2, :z3, :z4), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#374#375"{Int64}}, AdvancedMH.StaticProposal{var"#374#375"{Int64}}}}}, Turing.Inference.SamplerState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#368#369", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, sampler::Sampler{Gibbs{(:z1, :z2, :z3, :z4, :mu1, :mu2), Tuple{PG{(:z1, :z2, :z3, :z4), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#374#375"{Int64}}, AdvancedMH.StaticProposal{var"#374#375"{Int64}}}}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:z1, :z2, :z3, :z4), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#374#375"{Int64}}, AdvancedMH.StaticProposal{var"#374#375"{Int64}}}}}, Turing.Inference.SamplerState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [21] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#368#369", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, alg::Gibbs{(:z1, :z2, :z3, :z4, :mu1, :mu2), Tuple{PG{(:z1, :z2, :z3, :z4), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#374#375"{Int64}}, AdvancedMH.StaticProposal{var"#374#375"{Int64}}}}}}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [22] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [23] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [24] sample(model::DynamicPPL.Model{var"#368#369", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, alg::Gibbs{(:z1, :z2, :z3, :z4, :mu1, :mu2), Tuple{PG{(:z1, :z2, :z3, :z4), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#374#375"{Int64}}, AdvancedMH.StaticProposal{var"#374#375"{Int64}}}}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [25] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/mh.jl:51
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/mh.jl:29
   [28] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [29] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/mh.jl:9
   [30] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [31] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:28 [inlined]
   [32] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [33] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [34] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:24 [inlined]
   [36] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 1.9555056586507373)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.170488022950531)
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.1133576835871724)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1999624481381215)
[ Info: (symbol = :m, exact = 0.8, evaluated = 0.8071917957209604)
[ Info: (symbol = "m[1]", exact = 0.0, evaluated = 0.012101637236617845)
[ Info: (symbol = "m[2]", exact = 0.8, evaluated = 0.7977683305612436)
ESS inference: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#397#398", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#397#398", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#397#398", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}}}, randcat::typeof(Turing.Inference.resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#397#398", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}}}, resampler::Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#397#398", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}}}, resampler::Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#397#398", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, spl::Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Turing.Inference.ParticleTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64}; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
   [10] (::Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#397#398", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, ESS{(:m,)}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{ESS{(:m,)}, Turing.Inference.ESSState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}}}}, Int64, Turing.Inference.GibbsTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64, Vector{Any}}})(::Tuple{Int64, Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:189
   [11] iterate
      @ ./generator.jl:47 [inlined]
   [12] collect
      @ ./array.jl:686 [inlined]
   [13] map
      @ ./abstractarray.jl:2267 [inlined]
   [14] step!(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#397#398", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, spl::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, ESS{(:m,)}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{ESS{(:m,)}, Turing.Inference.ESSState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}}}}, N::Int64, transition::Turing.Inference.GibbsTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64, Vector{Any}}; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:179
   [15] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:93 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [17] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#397#398", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, ESS{(:m,)}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{ESS{(:m,)}, Turing.Inference.ESSState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [18] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#397#398", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, ESS{(:m,)}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{ESS{(:m,)}, Turing.Inference.ESSState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#397#398", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, ESS{(:m,)}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{ESS{(:m,)}, Turing.Inference.ESSState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#397#398", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, alg::Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, ESS{(:m,)}}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [21] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [22] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [23] sample(model::DynamicPPL.Model{var"#397#398", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, alg::Gibbs{(:s, :m), Tuple{PG{(:s,), Turing.Core.ResampleWithESSThreshold{typeof(Turing.Inference.resample_systematic), Float64}}, ESS{(:m,)}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [24] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/ess.jl:52
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/ess.jl:40
   [27] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [28] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/ess.jl:7
   [29] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [30] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:29 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [33] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [34] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:24 [inlined]
   [35] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [36] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [37] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [38] top-level scope
      @ none:6
   [39] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [40] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [41] _start()
      @ Base ./client.jl:485
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.0619111243748667)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1592033998357865)
models: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#471#475", (), (), (), Tuple{}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#471#475", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#471#475", (), (), (), Tuple{}, Tuple{}}}}, randcat::typeof(resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#471#475", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#471#475", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] sample_init!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#471#475", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:117
   [10] sample_init!
      @ ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:100 [inlined]
   [11] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#471#475", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:74
   [12] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#471#475", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [13] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#471#475", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [14] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#471#475", (), (), (), Tuple{}, Tuple{}}, alg::SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [15] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [16] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [17] sample(model::DynamicPPL.Model{var"#471#475", (), (), (), Tuple{}, Tuple{}}, alg::SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [18] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/AdvancedSMC.jl:66
   [19] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [20] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/AdvancedSMC.jl:58
   [21] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [22] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/AdvancedSMC.jl:11
   [23] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [24] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:31 [inlined]
   [25] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [27] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:24 [inlined]
   [29] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [30] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [31] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [32] top-level scope
      @ none:6
   [33] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [34] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [35] _start()
      @ Base ./client.jl:485
┌ Warning: you are using the internal variable `_varinfo`
└ @ DynamicPPL ~/.julia/packages/DynamicPPL/jOFDR/src/compiler.jl:169
rng: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/inference/Inference.jl:15
  Got exception outside of a @test
  TaskFailedException
  
      nested task error: TaskFailedException
      Stacktrace:
       [1] wait
         @ ./task.jl:306 [inlined]
       [2] threading_run(func::Function)
         @ Base.Threads ./threadingconstructs.jl:34
       [3] macro expansion
         @ ./threadingconstructs.jl:93 [inlined]
       [4] macro expansion
         @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:230 [inlined]
       [5] (::AbstractMCMC.var"#44#59"{Bool, Base.Iterators.Pairs{Symbol, UnionAll, Tuple{Symbol}, NamedTuple{(:chain_type,), Tuple{UnionAll}}}, Int64, Int64, Vector{Any}, Vector{UInt64}, Vector{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}, Vector{DynamicPPL.Model{var"#498#499", (), (), (), Tuple{}, Tuple{}}}, Vector{Random._GLOBAL_RNG}})()
         @ AbstractMCMC ./task.jl:395
      
          nested task error: type Task has no field state
          Stacktrace:
            [1] setproperty!(x::Task, f::Symbol, v::Symbol)
              @ Base ./Base.jl:34
            [2] copy(ctask::CTask)
              @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
            [3] copy(trace::Trace{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#498#499", (), (), (), Tuple{}, Tuple{}}})
              @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
            [4] fork(trace::Trace{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#498#499", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
              @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
            [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#498#499", (), (), (), Tuple{}, Tuple{}}}}, randcat::typeof(resample_systematic), ref::Nothing; weights::Vector{Float64})
              @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
            [6] #resample_propagate!#6
              @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
            [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#498#499", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64}, ref::Nothing)
              @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
            [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#498#499", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64})
              @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
            [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#498#499", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
              @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
           [10] #step!#8
              @ ~/.julia/packages/AbstractMCMC/iOkTf/src/interface.jl:87 [inlined]
           [11] macro expansion
              @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:78 [inlined]
           [12] macro expansion
              @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
           [13] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#498#499", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
              @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
           [14] #sample#3
              @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178 [inlined]
           [15] macro expansion
              @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:239 [inlined]
           [16] (::AbstractMCMC.var"#747#threadsfor_fun#60"{UnitRange{Int64}, Bool, Base.Iterators.Pairs{Symbol, UnionAll, Tuple{Symbol}, NamedTuple{(:chain_type,), Tuple{UnionAll}}}, Int64, Vector{Any}, Vector{UInt64}, Vector{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}, Vector{DynamicPPL.Model{var"#498#499", (), (), (), Tuple{}, Tuple{}}}, Vector{Random._GLOBAL_RNG}})(onethread::Bool)
              @ AbstractMCMC ./threadingconstructs.jl:81
           [17] (::AbstractMCMC.var"#747#threadsfor_fun#60"{UnitRange{Int64}, Bool, Base.Iterators.Pairs{Symbol, UnionAll, Tuple{Symbol}, NamedTuple{(:chain_type,), Tuple{UnionAll}}}, Int64, Vector{Any}, Vector{UInt64}, Vector{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}, Vector{DynamicPPL.Model{var"#498#499", (), (), (), Tuple{}, Tuple{}}}, Vector{Random._GLOBAL_RNG}})()
              @ AbstractMCMC ./threadingconstructs.jl:48
  Stacktrace:
    [1] sync_end(c::Channel{Any})
      @ Base ./task.jl:353
    [2] macro expansion
      @ ./task.jl:372 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:217 [inlined]
    [4] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
    [5] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#498#499", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::MCMCThreads, N::Int64, nchains::Int64; progress::Bool, progressname::String, kwargs::Base.Iterators.Pairs{Symbol, UnionAll, Tuple{Symbol}, NamedTuple{(:chain_type,), Tuple{UnionAll}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:211
    [6] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#498#499", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, parallel::MCMCThreads, N::Int64, n_chains::Int64; chain_type::Type, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:239
    [7] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#498#499", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, parallel::MCMCThreads, N::Int64, n_chains::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:239
    [8] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#498#499", (), (), (), Tuple{}, Tuple{}}, alg::PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, parallel::MCMCThreads, N::Int64, n_chains::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:224
    [9] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:224 [inlined]
   [10] #sample#5
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:211 [inlined]
   [11] sample(model::DynamicPPL.Model{var"#498#499", (), (), (), Tuple{}, Tuple{}}, alg::PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, parallel::MCMCThreads, N::Int64, n_chains::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:211
   [12] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/Inference.jl:26
   [13] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/Inference.jl:16
   [15] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [16] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/Inference.jl:15
   [17] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [18] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/Inference.jl:12
   [19] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [20] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:32 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [22] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [23] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [24] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:24 [inlined]
   [25] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] top-level scope
      @ none:6
   [29] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [30] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [31] _start()
      @ Base ./client.jl:485
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.0752863060025715)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1228408482376615)
┌ Info: Found initial step size
└   ϵ = 1.6
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.11961884362735)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1900781908933946)
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.112570333849981)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1837014228002158)
┌ Info: Found initial step size
└   ϵ = 1.0
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 1.84919225571856)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.03321529518911)
┌ Info: Found initial step size
└   ϵ = 0.8
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.0844293622824943)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1743908093203548)
chain save/resume: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/inference/Inference.jl:47
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#498#499", (), (), (), Tuple{}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#498#499", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#498#499", (), (), (), Tuple{}, Tuple{}}}}, randcat::typeof(resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#498#499", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#498#499", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#498#499", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Integer, Tuple{Symbol, Symbol}, NamedTuple{(:iteration, :save_state), Tuple{Int64, Bool}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
   [10] #step!#8
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/interface.jl:87 [inlined]
   [11] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:78 [inlined]
   [12] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [13] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#498#499", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:save_state,), Tuple{Bool}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [14] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#498#499", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:save_state,), Tuple{Bool}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [15] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#498#499", (), (), (), Tuple{}, Tuple{}}, alg::PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, N::Int64; kwargs::Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:save_state,), Tuple{Bool}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [16] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [17] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/Inference.jl:66
   [18] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [19] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/Inference.jl:48
   [20] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [21] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/Inference.jl:12
   [22] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [23] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:32 [inlined]
   [24] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [25] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [26] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [27] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:24 [inlined]
   [28] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [29] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [30] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [31] top-level scope
      @ none:6
   [32] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [33] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [34] _start()
      @ Base ./client.jl:485
WARNING: Method definition testmodel(Any) in module Main at /home/pkgeval/.julia/packages/DynamicPPL/jOFDR/src/compiler.jl:344 overwritten on the same line.
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 1.9871597943445776)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1698144585269246)
┌ Info: [ADVI] Should only be seen once: optimizer created for θ
└   objectid(θ) = 0x2a1c289f930b0ad4
┌ Info: [ADVI] Should only be seen once: optimizer created for θ
└   objectid(θ) = 0xb96cc5f58adedeba
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 1.9243505766564128)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.131006257978716)
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 1.986925576092688)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.222200541230073)
┌ Info: [ADVI] Should only be seen once: optimizer created for θ
└   objectid(θ) = 0x87998d8de0290ef7
┌ Info: [ADVI] Should only be seen once: optimizer created for θ
└   objectid(θ) = 0x6314609588fe6597
gibbs constructor: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#627#628", (), (), (), Tuple{}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#627#628", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#627#628", (), (), (), Tuple{}, Tuple{}}}}, randcat::typeof(resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#627#628", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#627#628", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#627#628", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
   [10] (::Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#627#628", (), (), (), Tuple{}, Tuple{}}, Sampler{Gibbs{(:s, :m), Tuple{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, Int64, Nothing})(::Tuple{Int64, Sampler{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:187
   [11] iterate
      @ ./generator.jl:47 [inlined]
   [12] collect
      @ ./array.jl:686 [inlined]
   [13] map
      @ ./abstractarray.jl:2267 [inlined]
   [14] step!(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#627#628", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, N::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:179
   [15] #step!#8
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/interface.jl:87 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:78 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [18] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#627#628", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#627#628", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#627#628", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [21] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#627#628", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:s, :m), Tuple{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [22] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [23] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [24] sample(model::DynamicPPL.Model{var"#627#628", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:s, :m), Tuple{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [25] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/gibbs.jl:24
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/gibbs.jl:12
   [28] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [29] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/gibbs.jl:11
   [30] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [31] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [32] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [33] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [34] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:24 [inlined]
   [36] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
gibbs inference: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#625#626", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#625#626", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#625#626", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}}}, randcat::typeof(resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#625#626", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#625#626", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#625#626", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, spl::Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
   [10] (::Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#625#626", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMC{TrackerAD, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{TrackerAD, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, Int64, Nothing})(::Tuple{Int64, Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:187
   [11] iterate
      @ ./generator.jl:47 [inlined]
   [12] collect
      @ ./array.jl:686 [inlined]
   [13] map
      @ ./abstractarray.jl:2267 [inlined]
   [14] step!(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#625#626", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, spl::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMC{TrackerAD, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{TrackerAD, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:179
   [15] #step!#8
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/interface.jl:87 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:78 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [18] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#625#626", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMC{TrackerAD, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{TrackerAD, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#625#626", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMC{TrackerAD, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{TrackerAD, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#625#626", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMC{TrackerAD, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{TrackerAD, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [21] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#625#626", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, alg::Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMC{TrackerAD, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [22] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [23] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [24] sample(model::DynamicPPL.Model{var"#625#626", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, alg::Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMC{TrackerAD, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [25] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/gibbs.jl:46
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/gibbs.jl:42
   [28] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [29] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/gibbs.jl:11
   [30] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [31] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [32] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [33] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [34] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:24 [inlined]
   [36] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
[ Info: (symbol = :p, exact = 0.7142857142857143, evaluated = 0.6852061796516534)
[ Info: (symbol = "ps[1]", exact = 0.3125, evaluated = 0.311961279923133)
[ Info: (symbol = "ps[2]", exact = 0.6875, evaluated = 0.6880387200768658)
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.0175279768556664)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.150595501966182)
┌ Info: Found initial step size
└   ϵ = 0.8500000000000001
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.085456154804597)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.2583226998542383)
┌ Info: Found initial step size
└   ϵ = 6.4
hmcda inference: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}}}, randcat::typeof(resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Turing.Inference.ParticleTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64}; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
   [10] (::Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMCDA{TrackerAD, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{TrackerAD, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, Int64, Turing.Inference.GibbsTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64, Vector{Any}}})(::Tuple{Int64, Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:189
   [11] iterate
      @ ./generator.jl:47 [inlined]
   [12] collect
      @ ./array.jl:686 [inlined]
   [13] map
      @ ./abstractarray.jl:2267 [inlined]
   [14] step!(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMCDA{TrackerAD, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{TrackerAD, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64, transition::Turing.Inference.GibbsTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64, Vector{Any}}; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:179
   [15] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:93 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [17] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMCDA{TrackerAD, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{TrackerAD, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [18] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMCDA{TrackerAD, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{TrackerAD, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMCDA{TrackerAD, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{TrackerAD, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMCDA{TrackerAD, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [21] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [22] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [23] sample(model::DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMCDA{TrackerAD, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [24] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:131
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:117
   [27] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [28] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:12
   [29] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [30] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:26 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [33] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [34] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:24 [inlined]
   [35] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [36] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [37] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [38] top-level scope
      @ none:6
   [39] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [40] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [41] _start()
      @ Base ./client.jl:485
HMCDA{TrackerAD, (), AdvancedHMC.UnitEuclideanMetric}(-1, 0.8, 0.75, 0.0)
┌ Info: Found initial step size
└   ϵ = 0.8500000000000001
HMCDA{TrackerAD, (), AdvancedHMC.UnitEuclideanMetric}(200, 0.8, 0.75, 0.0)
┌ Info: Found initial step size
└   ϵ = 1.6
HMCDA{TrackerAD, (:s,), AdvancedHMC.UnitEuclideanMetric}(200, 0.8, 0.75, 0.0)
┌ Info: Found initial step size
└   ϵ = 1.6
┌ Info: Found initial step size
└   ϵ = 0.8500000000000001
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 1.982897874419249)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1719378973530503)
┌ Info: Found initial step size
└   ϵ = 0.8500000000000001
┌ Info: Found initial step size
└   ϵ = 1.6
┌ Info: Found initial step size
└   ϵ = 9.600000000000001
┌ Info: Found initial step size
└   ϵ = 0.8500000000000001
┌ Info: Found initial step size
└   ϵ = 1.6
┌ Info: Found initial step size
└   ϵ = 1.6
AHMC resize: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:184
  Test threw exception
  Expression: sample(gdemo_default, alg1, 300) isa Chains
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}}}, randcat::typeof(resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
   [10] (::Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, NUTS{TrackerAD, (:s,), AdvancedHMC.DiagEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{NUTS{TrackerAD, (:s,), AdvancedHMC.DiagEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.NUTS{AdvancedHMC.MultinomialTS, AdvancedHMC.GeneralisedNoUTurn, AdvancedHMC.Leapfrog{Float64}, Float64}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.WelfordVar{Float64, Vector{Float64}}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, Int64, Nothing})(::Tuple{Int64, Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:187
   [11] iterate
      @ ./generator.jl:47 [inlined]
   [12] collect
      @ ./array.jl:686 [inlined]
   [13] map
      @ ./abstractarray.jl:2267 [inlined]
   [14] step!(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, NUTS{TrackerAD, (:s,), AdvancedHMC.DiagEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{NUTS{TrackerAD, (:s,), AdvancedHMC.DiagEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.NUTS{AdvancedHMC.MultinomialTS, AdvancedHMC.GeneralisedNoUTurn, AdvancedHMC.Leapfrog{Float64}, Float64}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.WelfordVar{Float64, Vector{Float64}}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:179
   [15] #step!#8
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/interface.jl:87 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:78 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [18] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, NUTS{TrackerAD, (:s,), AdvancedHMC.DiagEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{NUTS{TrackerAD, (:s,), AdvancedHMC.DiagEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.NUTS{AdvancedHMC.MultinomialTS, AdvancedHMC.GeneralisedNoUTurn, AdvancedHMC.Leapfrog{Float64}, Float64}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.WelfordVar{Float64, Vector{Float64}}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, NUTS{TrackerAD, (:s,), AdvancedHMC.DiagEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{NUTS{TrackerAD, (:s,), AdvancedHMC.DiagEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.NUTS{AdvancedHMC.MultinomialTS, AdvancedHMC.GeneralisedNoUTurn, AdvancedHMC.Leapfrog{Float64}, Float64}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.WelfordVar{Float64, Vector{Float64}}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, NUTS{TrackerAD, (:s,), AdvancedHMC.DiagEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{NUTS{TrackerAD, (:s,), AdvancedHMC.DiagEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.NUTS{AdvancedHMC.MultinomialTS, AdvancedHMC.GeneralisedNoUTurn, AdvancedHMC.Leapfrog{Float64}, Float64}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.WelfordVar{Float64, Vector{Float64}}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [21] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, NUTS{TrackerAD, (:s,), AdvancedHMC.DiagEuclideanMetric}}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [22] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [23] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [24] sample(model::DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, NUTS{TrackerAD, (:s,), AdvancedHMC.DiagEuclideanMetric}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [25] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:184
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:181
   [28] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [29] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:12
AHMC resize: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:185
  Test threw exception
  Expression: sample(gdemo_default, alg2, 300) isa Chains
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}}}, randcat::typeof(resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
   [10] (::Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMC{TrackerAD, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{TrackerAD, (:s,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, Int64, Nothing})(::Tuple{Int64, Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:187
   [11] iterate
      @ ./generator.jl:47 [inlined]
   [12] collect
      @ ./array.jl:686 [inlined]
   [13] map
      @ ./abstractarray.jl:2267 [inlined]
   [14] step!(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMC{TrackerAD, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{TrackerAD, (:s,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:179
   [15] #step!#8
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/interface.jl:87 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:78 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [18] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMC{TrackerAD, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{TrackerAD, (:s,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMC{TrackerAD, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{TrackerAD, (:s,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMC{TrackerAD, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{TrackerAD, (:s,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [21] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMC{TrackerAD, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [22] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [23] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [24] sample(model::DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMC{TrackerAD, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [25] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:185
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:181
   [28] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [29] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:12
┌ Info: Found initial step size
└   ϵ = 1.6
AHMC resize: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:186
  Test threw exception
  Expression: sample(gdemo_default, alg3, 300) isa Chains
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}}}, randcat::typeof(resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
   [10] (::Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMCDA{TrackerAD, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{TrackerAD, (:s,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, Int64, Nothing})(::Tuple{Int64, Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:187
   [11] iterate
      @ ./generator.jl:47 [inlined]
   [12] collect
      @ ./array.jl:686 [inlined]
   [13] map
      @ ./abstractarray.jl:2267 [inlined]
   [14] step!(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMCDA{TrackerAD, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{TrackerAD, (:s,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:179
   [15] #step!#8
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/interface.jl:87 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:78 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [18] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMCDA{TrackerAD, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{TrackerAD, (:s,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMCDA{TrackerAD, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{TrackerAD, (:s,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMCDA{TrackerAD, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{TrackerAD, (:s,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [21] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMCDA{TrackerAD, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [22] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [23] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [24] sample(model::DynamicPPL.Model{var"#665#666", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMCDA{TrackerAD, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [25] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:186
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:181
   [28] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [29] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:12
WARNING: Method definition mwe() in module Main at /home/pkgeval/.julia/packages/DynamicPPL/jOFDR/src/compiler.jl:344 overwritten on the same line.
WARNING: Method definition mwe() in module Main at /home/pkgeval/.julia/packages/DynamicPPL/jOFDR/src/compiler.jl:344 overwritten on the same line.
WARNING: Method definition mwe(Type{T}) where {T} in module Main at /home/pkgeval/.julia/packages/DynamicPPL/jOFDR/src/compiler.jl:344 overwritten on the same line.
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.0268554598193718)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1586543497235515)
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 1.9871561238767463)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.175057362302578)
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.060653526648612)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1243427492739857)
mh inference: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#758#759", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#758#759", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#758#759", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}}}, randcat::typeof(resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#758#759", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#758#759", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#758#759", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, spl::Sampler{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
   [10] (::Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#758#759", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, Sampler{Gibbs{(:z1, :z2, :z3, :z4, :mu1, :mu2), Tuple{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#764#765"{Int64}}, AdvancedMH.StaticProposal{var"#764#765"{Int64}}}}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#764#765"{Int64}}, AdvancedMH.StaticProposal{var"#764#765"{Int64}}}}}, Turing.Inference.SamplerState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}}}}, Int64, Nothing})(::Tuple{Int64, Sampler{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:187
   [11] iterate
      @ ./generator.jl:47 [inlined]
   [12] collect
      @ ./array.jl:686 [inlined]
   [13] map
      @ ./abstractarray.jl:2267 [inlined]
   [14] step!(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#758#759", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, spl::Sampler{Gibbs{(:z1, :z2, :z3, :z4, :mu1, :mu2), Tuple{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#764#765"{Int64}}, AdvancedMH.StaticProposal{var"#764#765"{Int64}}}}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#764#765"{Int64}}, AdvancedMH.StaticProposal{var"#764#765"{Int64}}}}}, Turing.Inference.SamplerState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}}}}, N::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:179
   [15] #step!#8
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/interface.jl:87 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:78 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [18] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#758#759", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, sampler::Sampler{Gibbs{(:z1, :z2, :z3, :z4, :mu1, :mu2), Tuple{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#764#765"{Int64}}, AdvancedMH.StaticProposal{var"#764#765"{Int64}}}}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#764#765"{Int64}}, AdvancedMH.StaticProposal{var"#764#765"{Int64}}}}}, Turing.Inference.SamplerState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#758#759", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, sampler::Sampler{Gibbs{(:z1, :z2, :z3, :z4, :mu1, :mu2), Tuple{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#764#765"{Int64}}, AdvancedMH.StaticProposal{var"#764#765"{Int64}}}}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#764#765"{Int64}}, AdvancedMH.StaticProposal{var"#764#765"{Int64}}}}}, Turing.Inference.SamplerState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#758#759", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, sampler::Sampler{Gibbs{(:z1, :z2, :z3, :z4, :mu1, :mu2), Tuple{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#764#765"{Int64}}, AdvancedMH.StaticProposal{var"#764#765"{Int64}}}}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#764#765"{Int64}}, AdvancedMH.StaticProposal{var"#764#765"{Int64}}}}}, Turing.Inference.SamplerState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [21] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#758#759", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, alg::Gibbs{(:z1, :z2, :z3, :z4, :mu1, :mu2), Tuple{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#764#765"{Int64}}, AdvancedMH.StaticProposal{var"#764#765"{Int64}}}}}}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [22] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [23] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [24] sample(model::DynamicPPL.Model{var"#758#759", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, alg::Gibbs{(:z1, :z2, :z3, :z4, :mu1, :mu2), Tuple{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#764#765"{Int64}}, AdvancedMH.StaticProposal{var"#764#765"{Int64}}}}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [25] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/mh.jl:51
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/mh.jl:29
   [28] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [29] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/mh.jl:9
   [30] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [31] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:28 [inlined]
   [32] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [33] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [34] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:24 [inlined]
   [36] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 1.9555056586507373)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.170488022950531)
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.1133576835871724)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1999624481381215)
[ Info: (symbol = :m, exact = 0.8, evaluated = 0.8071917957209604)
[ Info: (symbol = "m[1]", exact = 0.0, evaluated = 0.012101637236617845)
[ Info: (symbol = "m[2]", exact = 0.8, evaluated = 0.7977683305612436)
ESS inference: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#787#788", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#787#788", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#787#788", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}}}, randcat::typeof(resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#787#788", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#787#788", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#787#788", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, spl::Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Turing.Inference.ParticleTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64}; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
   [10] (::Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#787#788", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, ESS{(:m,)}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{ESS{(:m,)}, Turing.Inference.ESSState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}}}}, Int64, Turing.Inference.GibbsTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64, Vector{Any}}})(::Tuple{Int64, Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:189
   [11] iterate
      @ ./generator.jl:47 [inlined]
   [12] collect
      @ ./array.jl:686 [inlined]
   [13] map
      @ ./abstractarray.jl:2267 [inlined]
   [14] step!(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#787#788", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, spl::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, ESS{(:m,)}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{ESS{(:m,)}, Turing.Inference.ESSState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}}}}, N::Int64, transition::Turing.Inference.GibbsTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64, Vector{Any}}; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:179
   [15] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:93 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [17] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#787#788", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, ESS{(:m,)}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{ESS{(:m,)}, Turing.Inference.ESSState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [18] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#787#788", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, ESS{(:m,)}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{ESS{(:m,)}, Turing.Inference.ESSState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#787#788", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, ESS{(:m,)}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{ESS{(:m,)}, Turing.Inference.ESSState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#787#788", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, alg::Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, ESS{(:m,)}}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [21] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [22] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [23] sample(model::DynamicPPL.Model{var"#787#788", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, alg::Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, ESS{(:m,)}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [24] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/ess.jl:52
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/ess.jl:40
   [27] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [28] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/ess.jl:7
   [29] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [30] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:29 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [33] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [34] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:24 [inlined]
   [35] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [36] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [37] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [38] top-level scope
      @ none:6
   [39] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [40] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [41] _start()
      @ Base ./client.jl:485
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.0619111243748667)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1592033998357865)
models: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#861#865", (), (), (), Tuple{}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#861#865", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#861#865", (), (), (), Tuple{}, Tuple{}}}}, randcat::typeof(resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#861#865", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#861#865", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] sample_init!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#861#865", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:117
   [10] sample_init!
      @ ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:100 [inlined]
   [11] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#861#865", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:74
   [12] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#861#865", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [13] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#861#865", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [14] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#861#865", (), (), (), Tuple{}, Tuple{}}, alg::SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [15] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [16] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [17] sample(model::DynamicPPL.Model{var"#861#865", (), (), (), Tuple{}, Tuple{}}, alg::SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [18] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/AdvancedSMC.jl:66
   [19] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [20] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/AdvancedSMC.jl:58
   [21] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [22] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/AdvancedSMC.jl:11
   [23] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [24] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:31 [inlined]
   [25] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [27] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:24 [inlined]
   [29] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [30] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [31] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [32] top-level scope
      @ none:6
   [33] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [34] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [35] _start()
      @ Base ./client.jl:485
┌ Warning: you are using the internal variable `_varinfo`
└ @ DynamicPPL ~/.julia/packages/DynamicPPL/jOFDR/src/compiler.jl:169
rng: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/inference/Inference.jl:15
  Got exception outside of a @test
  TaskFailedException
  
      nested task error: TaskFailedException
      Stacktrace:
       [1] wait
         @ ./task.jl:306 [inlined]
       [2] threading_run(func::Function)
         @ Base.Threads ./threadingconstructs.jl:34
       [3] macro expansion
         @ ./threadingconstructs.jl:93 [inlined]
       [4] macro expansion
         @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:230 [inlined]
       [5] (::AbstractMCMC.var"#44#59"{Bool, Base.Iterators.Pairs{Symbol, UnionAll, Tuple{Symbol}, NamedTuple{(:chain_type,), Tuple{UnionAll}}}, Int64, Int64, Vector{Any}, Vector{UInt64}, Vector{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}, Vector{DynamicPPL.Model{var"#888#889", (), (), (), Tuple{}, Tuple{}}}, Vector{Random._GLOBAL_RNG}})()
         @ AbstractMCMC ./task.jl:395
      
          nested task error: type Task has no field state
          Stacktrace:
            [1] setproperty!(x::Task, f::Symbol, v::Symbol)
              @ Base ./Base.jl:34
            [2] copy(ctask::CTask)
              @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
            [3] copy(trace::Trace{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#888#889", (), (), (), Tuple{}, Tuple{}}})
              @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
            [4] fork(trace::Trace{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#888#889", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
              @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
            [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#888#889", (), (), (), Tuple{}, Tuple{}}}}, randcat::typeof(resample_systematic), ref::Nothing; weights::Vector{Float64})
              @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
            [6] #resample_propagate!#6
              @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
            [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#888#889", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64}, ref::Nothing)
              @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
            [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#888#889", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64})
              @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
            [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#888#889", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
              @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
           [10] #step!#8
              @ ~/.julia/packages/AbstractMCMC/iOkTf/src/interface.jl:87 [inlined]
           [11] macro expansion
              @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:78 [inlined]
           [12] macro expansion
              @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
           [13] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#888#889", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
              @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
           [14] #sample#3
              @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178 [inlined]
           [15] macro expansion
              @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:239 [inlined]
           [16] (::AbstractMCMC.var"#747#threadsfor_fun#60"{UnitRange{Int64}, Bool, Base.Iterators.Pairs{Symbol, UnionAll, Tuple{Symbol}, NamedTuple{(:chain_type,), Tuple{UnionAll}}}, Int64, Vector{Any}, Vector{UInt64}, Vector{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}, Vector{DynamicPPL.Model{var"#888#889", (), (), (), Tuple{}, Tuple{}}}, Vector{Random._GLOBAL_RNG}})(onethread::Bool)
              @ AbstractMCMC ./threadingconstructs.jl:81
           [17] (::AbstractMCMC.var"#747#threadsfor_fun#60"{UnitRange{Int64}, Bool, Base.Iterators.Pairs{Symbol, UnionAll, Tuple{Symbol}, NamedTuple{(:chain_type,), Tuple{UnionAll}}}, Int64, Vector{Any}, Vector{UInt64}, Vector{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}, Vector{DynamicPPL.Model{var"#888#889", (), (), (), Tuple{}, Tuple{}}}, Vector{Random._GLOBAL_RNG}})()
              @ AbstractMCMC ./threadingconstructs.jl:48
  Stacktrace:
    [1] sync_end(c::Channel{Any})
      @ Base ./task.jl:353
    [2] macro expansion
      @ ./task.jl:372 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:217 [inlined]
    [4] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
    [5] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#888#889", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::MCMCThreads, N::Int64, nchains::Int64; progress::Bool, progressname::String, kwargs::Base.Iterators.Pairs{Symbol, UnionAll, Tuple{Symbol}, NamedTuple{(:chain_type,), Tuple{UnionAll}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:211
    [6] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#888#889", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, parallel::MCMCThreads, N::Int64, n_chains::Int64; chain_type::Type, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:239
    [7] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#888#889", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, parallel::MCMCThreads, N::Int64, n_chains::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:239
    [8] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#888#889", (), (), (), Tuple{}, Tuple{}}, alg::PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, parallel::MCMCThreads, N::Int64, n_chains::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:224
    [9] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:224 [inlined]
   [10] #sample#5
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:211 [inlined]
   [11] sample(model::DynamicPPL.Model{var"#888#889", (), (), (), Tuple{}, Tuple{}}, alg::PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, parallel::MCMCThreads, N::Int64, n_chains::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:211
   [12] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/Inference.jl:26
   [13] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/Inference.jl:16
   [15] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [16] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/Inference.jl:15
   [17] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [18] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/Inference.jl:12
   [19] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [20] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:32 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [22] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [23] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [24] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:24 [inlined]
   [25] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] top-level scope
      @ none:6
   [29] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [30] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [31] _start()
      @ Base ./client.jl:485
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.0752863060025715)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1228408482376615)
┌ Info: Found initial step size
└   ϵ = 1.6
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.1197809883728076)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1900764034471396)
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.1124799744994216)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1840075061175397)
┌ Info: Found initial step size
└   ϵ = 1.0
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 1.8493510196266671)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.0332150762821593)
┌ Info: Found initial step size
└   ϵ = 0.8
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.0845781332295994)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1743848991421266)
chain save/resume: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/inference/Inference.jl:47
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#888#889", (), (), (), Tuple{}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#888#889", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#888#889", (), (), (), Tuple{}, Tuple{}}}}, randcat::typeof(resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#888#889", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#888#889", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#888#889", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Integer, Tuple{Symbol, Symbol}, NamedTuple{(:iteration, :save_state), Tuple{Int64, Bool}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
   [10] #step!#8
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/interface.jl:87 [inlined]
   [11] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:78 [inlined]
   [12] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [13] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#888#889", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:save_state,), Tuple{Bool}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [14] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#888#889", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:save_state,), Tuple{Bool}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [15] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#888#889", (), (), (), Tuple{}, Tuple{}}, alg::PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, N::Int64; kwargs::Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:save_state,), Tuple{Bool}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [16] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [17] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/Inference.jl:66
   [18] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [19] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/Inference.jl:48
   [20] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [21] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/Inference.jl:12
   [22] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [23] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:32 [inlined]
   [24] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [25] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [26] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [27] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:24 [inlined]
   [28] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [29] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [30] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [31] top-level scope
      @ none:6
   [32] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [33] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [34] _start()
      @ Base ./client.jl:485
WARNING: Method definition testmodel(Any) in module Main at /home/pkgeval/.julia/packages/DynamicPPL/jOFDR/src/compiler.jl:344 overwritten on the same line.
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.0618144573643504)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1671926250857338)
┌ Info: [ADVI] Should only be seen once: optimizer created for θ
└   objectid(θ) = 0x33680d7813984b1d
┌ Info: [ADVI] Should only be seen once: optimizer created for θ
└   objectid(θ) = 0x33ac04156b176fe8
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 1.9243505766564128)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.131006257978716)
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 1.986925576092688)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.2222005412300732)
┌ Info: [ADVI] Should only be seen once: optimizer created for θ
└   objectid(θ) = 0xde71c068c1ea3d7f
┌ Info: [ADVI] Should only be seen once: optimizer created for θ
└   objectid(θ) = 0x1d909d96c1ce537e
gibbs constructor: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1017#1018", (), (), (), Tuple{}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1017#1018", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1017#1018", (), (), (), Tuple{}, Tuple{}}}}, randcat::typeof(resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1017#1018", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1017#1018", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1017#1018", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
   [10] (::Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#1017#1018", (), (), (), Tuple{}, Tuple{}}, Sampler{Gibbs{(:s, :m), Tuple{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, Int64, Nothing})(::Tuple{Int64, Sampler{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:187
   [11] iterate
      @ ./generator.jl:47 [inlined]
   [12] collect
      @ ./array.jl:686 [inlined]
   [13] map
      @ ./abstractarray.jl:2267 [inlined]
   [14] step!(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1017#1018", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, N::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:179
   [15] #step!#8
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/interface.jl:87 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:78 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [18] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1017#1018", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1017#1018", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1017#1018", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [21] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1017#1018", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:s, :m), Tuple{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [22] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [23] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [24] sample(model::DynamicPPL.Model{var"#1017#1018", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:s, :m), Tuple{PG{(:s, :m), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [25] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/gibbs.jl:24
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/gibbs.jl:12
   [28] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [29] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/gibbs.jl:11
   [30] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [31] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [32] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [33] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [34] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:24 [inlined]
   [36] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
gibbs inference: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1015#1016", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1015#1016", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1015#1016", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}}}, randcat::typeof(resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1015#1016", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1015#1016", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1015#1016", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, spl::Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
   [10] (::Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#1015#1016", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMC{Turing.Core.ReverseDiffAD{false}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{Turing.Core.ReverseDiffAD{false}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, Int64, Nothing})(::Tuple{Int64, Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:187
   [11] iterate
      @ ./generator.jl:47 [inlined]
   [12] collect
      @ ./array.jl:686 [inlined]
   [13] map
      @ ./abstractarray.jl:2267 [inlined]
   [14] step!(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1015#1016", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, spl::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMC{Turing.Core.ReverseDiffAD{false}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{Turing.Core.ReverseDiffAD{false}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:179
   [15] #step!#8
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/interface.jl:87 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:78 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [18] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1015#1016", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMC{Turing.Core.ReverseDiffAD{false}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{Turing.Core.ReverseDiffAD{false}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1015#1016", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMC{Turing.Core.ReverseDiffAD{false}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{Turing.Core.ReverseDiffAD{false}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1015#1016", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMC{Turing.Core.ReverseDiffAD{false}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{Turing.Core.ReverseDiffAD{false}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [21] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1015#1016", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, alg::Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMC{Turing.Core.ReverseDiffAD{false}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [22] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [23] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [24] sample(model::DynamicPPL.Model{var"#1015#1016", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, alg::Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMC{Turing.Core.ReverseDiffAD{false}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [25] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/gibbs.jl:46
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/gibbs.jl:42
   [28] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [29] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/gibbs.jl:11
   [30] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [31] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [32] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [33] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [34] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:24 [inlined]
   [36] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
[ Info: (symbol = :p, exact = 0.7142857142857143, evaluated = 0.688523926076531)
[ Info: (symbol = "ps[1]", exact = 0.3125, evaluated = 0.31196127992313294)
[ Info: (symbol = "ps[2]", exact = 0.6875, evaluated = 0.6880387200768658)
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.017527976855666)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.150595501966182)
┌ Info: Found initial step size
└   ϵ = 0.8500000000000001
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.0854561548046067)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.2583226998542372)
┌ Info: Found initial step size
└   ϵ = 6.4
hmcda inference: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}}}, randcat::typeof(resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Turing.Inference.ParticleTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64}; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
   [10] (::Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMCDA{Turing.Core.ReverseDiffAD{false}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{Turing.Core.ReverseDiffAD{false}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, Int64, Turing.Inference.GibbsTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64, Vector{Any}}})(::Tuple{Int64, Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:189
   [11] iterate
      @ ./generator.jl:47 [inlined]
   [12] collect
      @ ./array.jl:686 [inlined]
   [13] map
      @ ./abstractarray.jl:2267 [inlined]
   [14] step!(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMCDA{Turing.Core.ReverseDiffAD{false}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{Turing.Core.ReverseDiffAD{false}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64, transition::Turing.Inference.GibbsTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64, Vector{Any}}; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:179
   [15] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:93 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [17] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMCDA{Turing.Core.ReverseDiffAD{false}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{Turing.Core.ReverseDiffAD{false}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [18] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMCDA{Turing.Core.ReverseDiffAD{false}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{Turing.Core.ReverseDiffAD{false}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMCDA{Turing.Core.ReverseDiffAD{false}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{Turing.Core.ReverseDiffAD{false}, (:m,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMCDA{Turing.Core.ReverseDiffAD{false}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [21] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [22] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [23] sample(model::DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMCDA{Turing.Core.ReverseDiffAD{false}, (:m,), AdvancedHMC.UnitEuclideanMetric}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [24] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:131
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:117
   [27] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [28] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:12
   [29] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [30] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:26 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [33] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [34] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:24 [inlined]
   [35] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [36] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [37] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [38] top-level scope
      @ none:6
   [39] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [40] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [41] _start()
      @ Base ./client.jl:485
HMCDA{Turing.Core.ReverseDiffAD{false}, (), AdvancedHMC.UnitEuclideanMetric}(-1, 0.8, 0.75, 0.0)
┌ Info: Found initial step size
└   ϵ = 0.8500000000000001
HMCDA{Turing.Core.ReverseDiffAD{false}, (), AdvancedHMC.UnitEuclideanMetric}(200, 0.8, 0.75, 0.0)
┌ Info: Found initial step size
└   ϵ = 1.6
HMCDA{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.UnitEuclideanMetric}(200, 0.8, 0.75, 0.0)
┌ Info: Found initial step size
└   ϵ = 1.6
┌ Info: Found initial step size
└   ϵ = 0.8500000000000001
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.0470522612249127)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1766797362580932)
┌ Info: Found initial step size
└   ϵ = 0.8500000000000001
┌ Info: Found initial step size
└   ϵ = 1.6
┌ Info: Found initial step size
└   ϵ = 9.600000000000001
┌ Info: Found initial step size
└   ϵ = 0.8500000000000001
┌ Info: Found initial step size
└   ϵ = 1.6
┌ Info: Found initial step size
└   ϵ = 1.6
AHMC resize: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:184
  Test threw exception
  Expression: sample(gdemo_default, alg1, 300) isa Chains
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}}}, randcat::typeof(resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
   [10] (::Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, NUTS{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.DiagEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{NUTS{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.DiagEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.NUTS{AdvancedHMC.MultinomialTS, AdvancedHMC.GeneralisedNoUTurn, AdvancedHMC.Leapfrog{Float64}, Float64}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.WelfordVar{Float64, Vector{Float64}}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, Int64, Nothing})(::Tuple{Int64, Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:187
   [11] iterate
      @ ./generator.jl:47 [inlined]
   [12] collect
      @ ./array.jl:686 [inlined]
   [13] map
      @ ./abstractarray.jl:2267 [inlined]
   [14] step!(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, NUTS{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.DiagEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{NUTS{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.DiagEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.NUTS{AdvancedHMC.MultinomialTS, AdvancedHMC.GeneralisedNoUTurn, AdvancedHMC.Leapfrog{Float64}, Float64}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.WelfordVar{Float64, Vector{Float64}}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:179
   [15] #step!#8
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/interface.jl:87 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:78 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [18] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, NUTS{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.DiagEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{NUTS{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.DiagEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.NUTS{AdvancedHMC.MultinomialTS, AdvancedHMC.GeneralisedNoUTurn, AdvancedHMC.Leapfrog{Float64}, Float64}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.WelfordVar{Float64, Vector{Float64}}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, NUTS{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.DiagEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{NUTS{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.DiagEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.NUTS{AdvancedHMC.MultinomialTS, AdvancedHMC.GeneralisedNoUTurn, AdvancedHMC.Leapfrog{Float64}, Float64}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.WelfordVar{Float64, Vector{Float64}}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, NUTS{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.DiagEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{NUTS{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.DiagEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.NUTS{AdvancedHMC.MultinomialTS, AdvancedHMC.GeneralisedNoUTurn, AdvancedHMC.Leapfrog{Float64}, Float64}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.WelfordVar{Float64, Vector{Float64}}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [21] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, NUTS{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.DiagEuclideanMetric}}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [22] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [23] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [24] sample(model::DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, NUTS{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.DiagEuclideanMetric}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [25] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:184
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:181
   [28] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [29] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:12
AHMC resize: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:185
  Test threw exception
  Expression: sample(gdemo_default, alg2, 300) isa Chains
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}}}, randcat::typeof(resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
   [10] (::Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMC{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, Int64, Nothing})(::Tuple{Int64, Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:187
   [11] iterate
      @ ./generator.jl:47 [inlined]
   [12] collect
      @ ./array.jl:686 [inlined]
   [13] map
      @ ./abstractarray.jl:2267 [inlined]
   [14] step!(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMC{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:179
   [15] #step!#8
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/interface.jl:87 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:78 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [18] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMC{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMC{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMC{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMC{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.StaticTrajectory{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.NoAdaptation, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [21] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMC{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [22] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [23] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [24] sample(model::DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMC{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [25] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:185
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:181
   [28] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [29] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:12
┌ Info: Found initial step size
└   ϵ = 1.6
AHMC resize: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:186
  Test threw exception
  Expression: sample(gdemo_default, alg3, 300) isa Chains
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}}}, randcat::typeof(resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
   [10] (::Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMCDA{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, Int64, Nothing})(::Tuple{Int64, Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:187
   [11] iterate
      @ ./generator.jl:47 [inlined]
   [12] collect
      @ ./array.jl:686 [inlined]
   [13] map
      @ ./abstractarray.jl:2267 [inlined]
   [14] step!(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMCDA{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:179
   [15] #step!#8
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/interface.jl:87 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:78 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [18] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMCDA{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMCDA{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMCDA{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{HMCDA{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.UnitEuclideanMetric}, Turing.Inference.HMCState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, AdvancedHMC.HMCDA{AdvancedHMC.EndPointTS, AdvancedHMC.Leapfrog{Float64}}, AdvancedHMC.Adaptation.StanHMCAdaptor{AdvancedHMC.Adaptation.UnitMassMatrix{Float64}, AdvancedHMC.Adaptation.NesterovDualAveraging{Float64}}, AdvancedHMC.PhasePoint{Vector{Float64}, AdvancedHMC.DualValue{Float64, Vector{Float64}}}}}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [21] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMCDA{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [22] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [23] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [24] sample(model::DynamicPPL.Model{var"#1055#1056", (), (), (), Tuple{}, Tuple{}}, alg::Gibbs{(:m, :s), Tuple{PG{(:m,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, HMCDA{Turing.Core.ReverseDiffAD{false}, (:s,), AdvancedHMC.UnitEuclideanMetric}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [25] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:186
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:181
   [28] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [29] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/hmc.jl:12
WARNING: Method definition mwe() in module Main at /home/pkgeval/.julia/packages/DynamicPPL/jOFDR/src/compiler.jl:344 overwritten on the same line.
WARNING: Method definition mwe() in module Main at /home/pkgeval/.julia/packages/DynamicPPL/jOFDR/src/compiler.jl:344 overwritten on the same line.
WARNING: Method definition mwe(Type{T}) where {T} in module Main at /home/pkgeval/.julia/packages/DynamicPPL/jOFDR/src/compiler.jl:344 overwritten on the same line.
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.0268554598193718)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1586543497235515)
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 1.9871561238767463)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.175057362302578)
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.060653526648612)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1243427492739857)
mh inference: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1148#1149", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1148#1149", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1148#1149", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}}}, randcat::typeof(resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1148#1149", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1148#1149", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1148#1149", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, spl::Sampler{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
   [10] (::Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#1148#1149", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, Sampler{Gibbs{(:z1, :z2, :z3, :z4, :mu1, :mu2), Tuple{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#1154#1155"{Int64}}, AdvancedMH.StaticProposal{var"#1154#1155"{Int64}}}}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#1154#1155"{Int64}}, AdvancedMH.StaticProposal{var"#1154#1155"{Int64}}}}}, Turing.Inference.SamplerState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}}}}, Int64, Nothing})(::Tuple{Int64, Sampler{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:187
   [11] iterate
      @ ./generator.jl:47 [inlined]
   [12] collect
      @ ./array.jl:686 [inlined]
   [13] map
      @ ./abstractarray.jl:2267 [inlined]
   [14] step!(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1148#1149", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, spl::Sampler{Gibbs{(:z1, :z2, :z3, :z4, :mu1, :mu2), Tuple{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#1154#1155"{Int64}}, AdvancedMH.StaticProposal{var"#1154#1155"{Int64}}}}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#1154#1155"{Int64}}, AdvancedMH.StaticProposal{var"#1154#1155"{Int64}}}}}, Turing.Inference.SamplerState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}}}}, N::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:179
   [15] #step!#8
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/interface.jl:87 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:78 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [18] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1148#1149", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, sampler::Sampler{Gibbs{(:z1, :z2, :z3, :z4, :mu1, :mu2), Tuple{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#1154#1155"{Int64}}, AdvancedMH.StaticProposal{var"#1154#1155"{Int64}}}}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#1154#1155"{Int64}}, AdvancedMH.StaticProposal{var"#1154#1155"{Int64}}}}}, Turing.Inference.SamplerState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1148#1149", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, sampler::Sampler{Gibbs{(:z1, :z2, :z3, :z4, :mu1, :mu2), Tuple{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#1154#1155"{Int64}}, AdvancedMH.StaticProposal{var"#1154#1155"{Int64}}}}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#1154#1155"{Int64}}, AdvancedMH.StaticProposal{var"#1154#1155"{Int64}}}}}, Turing.Inference.SamplerState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1148#1149", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, sampler::Sampler{Gibbs{(:z1, :z2, :z3, :z4, :mu1, :mu2), Tuple{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#1154#1155"{Int64}}, AdvancedMH.StaticProposal{var"#1154#1155"{Int64}}}}}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#1154#1155"{Int64}}, AdvancedMH.StaticProposal{var"#1154#1155"{Int64}}}}}, Turing.Inference.SamplerState{VarInfo{NamedTuple{(:mu1, :mu2, :z1, :z2, :z3, :z4), Tuple{DynamicPPL.Metadata{Dict{VarName{:mu1, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu1, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:mu2, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:mu2, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z1, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z1, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z2, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z2, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z3, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z3, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:z4, Tuple{}}, Int64}, Vector{Categorical{Float64, Vector{Float64}}}, Vector{VarName{:z4, Tuple{}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [21] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1148#1149", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, alg::Gibbs{(:z1, :z2, :z3, :z4, :mu1, :mu2), Tuple{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#1154#1155"{Int64}}, AdvancedMH.StaticProposal{var"#1154#1155"{Int64}}}}}}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [22] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [23] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [24] sample(model::DynamicPPL.Model{var"#1148#1149", (:D,), (), (), Tuple{Matrix{Float64}}, Tuple{}}, alg::Gibbs{(:z1, :z2, :z3, :z4, :mu1, :mu2), Tuple{PG{(:z1, :z2, :z3, :z4), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, MH{(:mu1, :mu2), NamedTuple{(:mu1, :mu2), Tuple{AdvancedMH.StaticProposal{var"#1154#1155"{Int64}}, AdvancedMH.StaticProposal{var"#1154#1155"{Int64}}}}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [25] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/mh.jl:51
   [26] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [27] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/mh.jl:29
   [28] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [29] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/mh.jl:9
   [30] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [31] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:28 [inlined]
   [32] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [33] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [34] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [35] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:24 [inlined]
   [36] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [37] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [38] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [39] top-level scope
      @ none:6
   [40] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [41] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [42] _start()
      @ Base ./client.jl:485
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 1.9555056586507373)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.170488022950531)
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.1133576835871724)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1999624481381215)
[ Info: (symbol = :m, exact = 0.8, evaluated = 0.8071917957209604)
[ Info: (symbol = "m[1]", exact = 0.0, evaluated = 0.012101637236617845)
[ Info: (symbol = "m[2]", exact = 0.8, evaluated = 0.7977683305612436)
ESS inference: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1177#1178", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1177#1178", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1177#1178", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}}}, randcat::typeof(resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1177#1178", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1177#1178", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1177#1178", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, spl::Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Turing.Inference.ParticleTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64}; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
   [10] (::Turing.Inference.var"#85#86"{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}}, Random._GLOBAL_RNG, DynamicPPL.Model{var"#1177#1178", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, ESS{(:m,)}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{ESS{(:m,)}, Turing.Inference.ESSState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}}}}, Int64, Turing.Inference.GibbsTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64, Vector{Any}}})(::Tuple{Int64, Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:189
   [11] iterate
      @ ./generator.jl:47 [inlined]
   [12] collect
      @ ./array.jl:686 [inlined]
   [13] map
      @ ./abstractarray.jl:2267 [inlined]
   [14] step!(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1177#1178", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, spl::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, ESS{(:m,)}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{ESS{(:m,)}, Turing.Inference.ESSState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}}}}, N::Int64, transition::Turing.Inference.GibbsTransition{NamedTuple{(:s, :m), Tuple{Tuple{Vector{Float64}, Vector{String}}, Tuple{Vector{Float64}, Vector{String}}}}, Float64, Vector{Any}}; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/gibbs.jl:179
   [15] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:93 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [17] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1177#1178", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, ESS{(:m,)}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{ESS{(:m,)}, Turing.Inference.ESSState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}}}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [18] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1177#1178", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, ESS{(:m,)}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{ESS{(:m,)}, Turing.Inference.ESSState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}}}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [19] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1177#1178", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, sampler::Sampler{Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, ESS{(:m,)}}}, Turing.Inference.GibbsState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Tuple{Sampler{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, Sampler{ESS{(:m,)}, Turing.Inference.ESSState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}}}}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [20] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1177#1178", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, alg::Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, ESS{(:m,)}}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [21] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [22] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [23] sample(model::DynamicPPL.Model{var"#1177#1178", (:x, :y), (), (), Tuple{Float64, Float64}, Tuple{}}, alg::Gibbs{(:s, :m), Tuple{PG{(:s,), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, ESS{(:m,)}}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [24] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/ess.jl:52
   [25] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [26] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/ess.jl:40
   [27] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [28] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/ess.jl:7
   [29] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [30] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:29 [inlined]
   [31] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [32] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [33] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [34] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:24 [inlined]
   [35] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [36] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [37] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [38] top-level scope
      @ none:6
   [39] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [40] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [41] _start()
      @ Base ./client.jl:485
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.0619111243748667)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1592033998357865)
models: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/test_utils/staging.jl:42
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1251#1255", (), (), (), Tuple{}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1251#1255", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1251#1255", (), (), (), Tuple{}, Tuple{}}}}, randcat::typeof(resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1251#1255", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1251#1255", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] sample_init!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1251#1255", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:117
   [10] sample_init!
      @ ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:100 [inlined]
   [11] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1251#1255", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:74
   [12] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1251#1255", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [13] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1251#1255", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:a, :b), Tuple{DynamicPPL.Metadata{Dict{VarName{:a, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:a, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:b, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:b, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [14] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1251#1255", (), (), (), Tuple{}, Tuple{}}, alg::SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [15] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [16] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [17] sample(model::DynamicPPL.Model{var"#1251#1255", (), (), (), Tuple{}, Tuple{}}, alg::SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [18] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/AdvancedSMC.jl:66
   [19] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [20] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/AdvancedSMC.jl:58
   [21] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [22] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/AdvancedSMC.jl:11
   [23] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [24] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:31 [inlined]
   [25] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [27] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:24 [inlined]
   [29] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [30] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [31] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [32] top-level scope
      @ none:6
   [33] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [34] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [35] _start()
      @ Base ./client.jl:485
┌ Warning: you are using the internal variable `_varinfo`
└ @ DynamicPPL ~/.julia/packages/DynamicPPL/jOFDR/src/compiler.jl:169
rng: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/inference/Inference.jl:15
  Got exception outside of a @test
  TaskFailedException
  
      nested task error: TaskFailedException
      Stacktrace:
       [1] wait
         @ ./task.jl:306 [inlined]
       [2] threading_run(func::Function)
         @ Base.Threads ./threadingconstructs.jl:34
       [3] macro expansion
         @ ./threadingconstructs.jl:93 [inlined]
       [4] macro expansion
         @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:230 [inlined]
       [5] (::AbstractMCMC.var"#44#59"{Bool, Base.Iterators.Pairs{Symbol, UnionAll, Tuple{Symbol}, NamedTuple{(:chain_type,), Tuple{UnionAll}}}, Int64, Int64, Vector{Any}, Vector{UInt64}, Vector{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}, Vector{DynamicPPL.Model{var"#1278#1279", (), (), (), Tuple{}, Tuple{}}}, Vector{Random._GLOBAL_RNG}})()
         @ AbstractMCMC ./task.jl:395
      
          nested task error: type Task has no field state
          Stacktrace:
            [1] setproperty!(x::Task, f::Symbol, v::Symbol)
              @ Base ./Base.jl:34
            [2] copy(ctask::CTask)
              @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
            [3] copy(trace::Trace{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1278#1279", (), (), (), Tuple{}, Tuple{}}})
              @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
            [4] fork(trace::Trace{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1278#1279", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
              @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
            [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1278#1279", (), (), (), Tuple{}, Tuple{}}}}, randcat::typeof(resample_systematic), ref::Nothing; weights::Vector{Float64})
              @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
            [6] #resample_propagate!#6
              @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
            [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1278#1279", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64}, ref::Nothing)
              @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
            [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1278#1279", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64})
              @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
            [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1278#1279", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:iteration,), Tuple{Int64}}})
              @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
           [10] #step!#8
              @ ~/.julia/packages/AbstractMCMC/iOkTf/src/interface.jl:87 [inlined]
           [11] macro expansion
              @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:78 [inlined]
           [12] macro expansion
              @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
           [13] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1278#1279", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
              @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
           [14] #sample#3
              @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178 [inlined]
           [15] macro expansion
              @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:239 [inlined]
           [16] (::AbstractMCMC.var"#747#threadsfor_fun#60"{UnitRange{Int64}, Bool, Base.Iterators.Pairs{Symbol, UnionAll, Tuple{Symbol}, NamedTuple{(:chain_type,), Tuple{UnionAll}}}, Int64, Vector{Any}, Vector{UInt64}, Vector{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}, Vector{DynamicPPL.Model{var"#1278#1279", (), (), (), Tuple{}, Tuple{}}}, Vector{Random._GLOBAL_RNG}})(onethread::Bool)
              @ AbstractMCMC ./threadingconstructs.jl:81
           [17] (::AbstractMCMC.var"#747#threadsfor_fun#60"{UnitRange{Int64}, Bool, Base.Iterators.Pairs{Symbol, UnionAll, Tuple{Symbol}, NamedTuple{(:chain_type,), Tuple{UnionAll}}}, Int64, Vector{Any}, Vector{UInt64}, Vector{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}}, Vector{DynamicPPL.Model{var"#1278#1279", (), (), (), Tuple{}, Tuple{}}}, Vector{Random._GLOBAL_RNG}})()
              @ AbstractMCMC ./threadingconstructs.jl:48
  Stacktrace:
    [1] sync_end(c::Channel{Any})
      @ Base ./task.jl:353
    [2] macro expansion
      @ ./task.jl:372 [inlined]
    [3] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:217 [inlined]
    [4] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
    [5] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1278#1279", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::MCMCThreads, N::Int64, nchains::Int64; progress::Bool, progressname::String, kwargs::Base.Iterators.Pairs{Symbol, UnionAll, Tuple{Symbol}, NamedTuple{(:chain_type,), Tuple{UnionAll}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:211
    [6] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1278#1279", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, parallel::MCMCThreads, N::Int64, n_chains::Int64; chain_type::Type, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:239
    [7] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1278#1279", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, parallel::MCMCThreads, N::Int64, n_chains::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:239
    [8] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1278#1279", (), (), (), Tuple{}, Tuple{}}, alg::PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, parallel::MCMCThreads, N::Int64, n_chains::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:224
    [9] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:224 [inlined]
   [10] #sample#5
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:211 [inlined]
   [11] sample(model::DynamicPPL.Model{var"#1278#1279", (), (), (), Tuple{}, Tuple{}}, alg::PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, parallel::MCMCThreads, N::Int64, n_chains::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:211
   [12] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/Inference.jl:26
   [13] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/Inference.jl:16
   [15] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [16] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/Inference.jl:15
   [17] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [18] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/Inference.jl:12
   [19] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [20] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:32 [inlined]
   [21] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [22] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [23] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [24] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:24 [inlined]
   [25] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [27] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [28] top-level scope
      @ none:6
   [29] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [30] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [31] _start()
      @ Base ./client.jl:485
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.0752863060025715)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1228408482376615)
┌ Info: Found initial step size
└   ϵ = 1.6
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.119702072147068)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1900772723280826)
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.1126545007364177)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1837001143124894)
┌ Info: Found initial step size
└   ϵ = 1.0
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 1.8492737530223167)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.0332151824994393)
┌ Info: Found initial step size
└   ϵ = 0.8
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.084505725621626)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1743877744565385)
chain save/resume: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/inference/Inference.jl:47
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1278#1279", (), (), (), Tuple{}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1278#1279", (), (), (), Tuple{}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1278#1279", (), (), (), Tuple{}, Tuple{}}}}, randcat::typeof(resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1278#1279", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1278#1279", (), (), (), Tuple{}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] step!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1278#1279", (), (), (), Tuple{}, Tuple{}}, spl::Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, ::Int64, transition::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Integer, Tuple{Symbol, Symbol}, NamedTuple{(:iteration, :save_state), Tuple{Int64, Bool}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:266
   [10] #step!#8
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/interface.jl:87 [inlined]
   [11] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:78 [inlined]
   [12] macro expansion
      @ ~/.julia/packages/AbstractMCMC/iOkTf/src/logging.jl:15 [inlined]
   [13] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1278#1279", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:save_state,), Tuple{Bool}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:76
   [14] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1278#1279", (), (), (), Tuple{}, Tuple{}}, sampler::Sampler{PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.PGState{VarInfo{NamedTuple{(:s, :m), Tuple{DynamicPPL.Metadata{Dict{VarName{:s, Tuple{}}, Int64}, Vector{InverseGamma{Float64}}, Vector{VarName{:s, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:m, Tuple{}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:m, Tuple{}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:save_state,), Tuple{Bool}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [15] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1278#1279", (), (), (), Tuple{}, Tuple{}}, alg::PG{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, N::Int64; kwargs::Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:save_state,), Tuple{Bool}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [16] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [17] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/Inference.jl:66
   [18] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [19] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/Inference.jl:48
   [20] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [21] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/inference/Inference.jl:12
   [22] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [23] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:32 [inlined]
   [24] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [25] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:25 [inlined]
   [26] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [27] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:24 [inlined]
   [28] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [29] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [30] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [31] top-level scope
      @ none:6
   [32] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [33] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [34] _start()
      @ Base ./client.jl:485
WARNING: Method definition testmodel(Any) in module Main at /home/pkgeval/.julia/packages/DynamicPPL/jOFDR/src/compiler.jl:344 overwritten on the same line.
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 2.076857471103551)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1843792333528114)
┌ Info: [ADVI] Should only be seen once: optimizer created for θ
└   objectid(θ) = 0x878a3a83e21cfe69
┌ Info: [ADVI] Should only be seen once: optimizer created for θ
└   objectid(θ) = 0x7c8b77a8140c4b41
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 1.9243505766564126)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.1310062579787161)
[ Info: (symbol = :s, exact = 2.0416666666666665, evaluated = 1.986925576092688)
[ Info: (symbol = :m, exact = 1.1666666666666667, evaluated = 1.2222005412300732)
┌ Info: [ADVI] Should only be seen once: optimizer created for θ
└   objectid(θ) = 0x9593d9e3130c9479
┌ Info: [ADVI] Should only be seen once: optimizer created for θ
└   objectid(θ) = 0xcc04e2b8fc385148
┌ Info: Distribution(params)
└   dist = Arcsine{Float64}(a=1.0, b=3.0)
┌ Info: Distribution(params)
└   dist = Beta{Float64}(α=2.0, β=1.0)
┌ Info: Distribution(params)
└   dist = BetaPrime{Float64}(α=1.0, β=1.0)
┌ Info: Distribution(params)
└   dist = Biweight{Float64}(μ=0.0, σ=1.0)
┌ Info: Distribution(params)
└   dist = Chi{Float64}(ν=7.0)
┌ Info: Distribution(params)
└   dist = Chisq{Float64}(ν=7.0)
┌ Info: Distribution(params)
└   dist = Cosine{Float64}(μ=0.0, σ=1.0)
┌ Info: Distribution(params)
└   dist = Epanechnikov{Float64}(μ=0.0, σ=1.0)
┌ Info: Distribution(params)
└   dist = Erlang{Float64}(α=2, θ=3.0)
┌ Info: Distribution(params)
└   dist = Exponential{Float64}(θ=0.1)
┌ Info: Distribution(params)
└   dist = FDist{Float64}(ν1=7.0, ν2=7.0)
┌ Info: Distribution(params)
└   dist = Frechet{Float64}(α=2.0, θ=0.5)
┌ Info: Distribution(params)
└   dist = Normal{Float64}(μ=0.0, σ=1.0)
┌ Info: Distribution(params)
└   dist = GeneralizedExtremeValue{Float64}(μ=0.0, σ=1.0, ξ=0.5)
┌ Info: Distribution(params)
└   dist = GeneralizedPareto{Float64}(μ=0.0, σ=1.0, ξ=0.5)
┌ Info: Distribution(params)
└   dist = Gumbel{Float64}(μ=0.0, θ=0.5)
┌ Info: Distribution(params)
└   dist = InverseGaussian{Float64}(μ=1.0, λ=1.0)
┌ Info: Distribution(params)
└   dist = Kolmogorov()
┌ Info: Distribution(params)
└   dist = Laplace{Float64}(μ=0.0, θ=0.5)
┌ Info: Distribution(params)
└   dist = Levy{Float64}(μ=0.0, σ=1.0)
┌ Info: Distribution(params)
└   dist = Logistic{Float64}(μ=0.0, θ=1.0)
┌ Info: Distribution(params)
└   dist = LogNormal{Float64}(μ=0.0, σ=1.0)
┌ Info: Distribution(params)
└   dist = Gamma{Float64}(α=2.0, θ=3.0)
┌ Info: Distribution(params)
│   dist =
│    InverseGamma{Float64}(
│    invd: Gamma{Float64}(α=3.0, θ=1.0)
│    θ: 1.0
│    )
└    
┌ Info: Distribution(params)
└   dist = NormalCanon{Float64}(η=0.0, λ=1.0, μ=0.0)
┌ Info: Distribution(params)
└   dist = NormalInverseGaussian{Float64}(μ=0.0, α=2.0, β=1.0, δ=1.0, γ=1.7320508075688772)
┌ Info: Distribution(params)
└   dist = Pareto{Float64}(α=1.0, θ=1.0)
┌ Info: Distribution(params)
└   dist = Rayleigh{Float64}(σ=1.0)
┌ Info: Distribution(params)
└   dist = SymTriangularDist{Float64}(μ=0.0, σ=1.0)
┌ Info: Distribution(params)
└   dist = TDist{Float64}(ν=2.5)
┌ Info: Distribution(params)
└   dist = TriangularDist{Float64}(a=1.0, b=3.0, c=2.0)
┌ Info: Distribution(params)
└   dist = Triweight{Float64}(μ=0.0, σ=1.0)
┌ Info: Distribution(params)
└   dist = Uniform{Float64}(a=0.0, b=1.0)
┌ Info: Distribution(params)
└   dist = Weibull{Float64}(α=2.0, θ=1.0)
┌ Info: Distribution(params)
│   dist =
│    DiagNormal(
│    dim: 4
│    μ: [0.0, 0.0, 0.0, 0.0]
│    Σ: [1.0 0.0 0.0 0.0; 0.0 1.0 0.0 0.0; 0.0 0.0 1.0 0.0; 0.0 0.0 0.0 1.0]
│    )
└    
┌ Info: Distribution(params)
│   dist =
│    FullNormal(
│    dim: 2
│    μ: [0.0, 0.0]
│    Σ: [2.0 1.0; 1.0 4.0]
│    )
└    
┌ Info: Distribution(params)
└   dist = Dirichlet{Float64}(alpha=[2.0, 2.0, 2.0, 2.0])
┌ Info: Distribution(params)
│   dist =
│    Wishart{Float64, PDMat{Float64, Matrix{Float64}}, Int64}(
│    df: 7.0
│    S: [1.0 0.5; 0.5 1.0]
│    )
└    
┌ Info: Distribution(params)
│   dist =
│    InverseWishart{Float64, PDMat{Float64, Matrix{Float64}}}(
│    df: 7.0
│    Ψ: [1.0 0.5; 0.5 1.0]
│    )
└    
Infinite Mixture Model: Error During Test at /home/pkgeval/.julia/packages/Turing/UsQlw/test/stdlib/RandomMeasures.jl:10
  Got exception outside of a @test
  type Task has no field state
  Stacktrace:
    [1] setproperty!(x::Task, f::Symbol, v::Symbol)
      @ Base ./Base.jl:34
    [2] copy(ctask::CTask)
      @ Libtask ~/.julia/packages/Libtask/OtgFl/src/ctask.jl:97
    [3] copy(trace::Trace{Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:z, :μ), Tuple{DynamicPPL.Metadata{Dict{VarName{:z, Tuple{Tuple{Int64}}}, Int64}, Vector{ChineseRestaurantProcess{DirichletProcess{Float64}, Vector{Int64}}}, Vector{VarName{:z, Tuple{Tuple{Int64}}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:μ, Tuple{Tuple{Int64}}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:μ, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:z, :μ), Tuple{DynamicPPL.Metadata{Dict{VarName{:z, Tuple{Tuple{Int64}}}, Int64}, Vector{ChineseRestaurantProcess{DirichletProcess{Float64}, Vector{Int64}}}, Vector{VarName{:z, Tuple{Tuple{Int64}}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:μ, Tuple{Tuple{Int64}}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:μ, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1458#1461", (:x,), (), (), Tuple{Vector{Float64}}, Tuple{}}})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:18
    [4] fork(trace::Trace{Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:z, :μ), Tuple{DynamicPPL.Metadata{Dict{VarName{:z, Tuple{Tuple{Int64}}}, Int64}, Vector{ChineseRestaurantProcess{DirichletProcess{Float64}, Vector{Int64}}}, Vector{VarName{:z, Tuple{Tuple{Int64}}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:μ, Tuple{Tuple{Int64}}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:μ, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:z, :μ), Tuple{DynamicPPL.Metadata{Dict{VarName{:z, Tuple{Tuple{Int64}}}, Int64}, Vector{ChineseRestaurantProcess{DirichletProcess{Float64}, Vector{Int64}}}, Vector{VarName{:z, Tuple{Tuple{Int64}}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:μ, Tuple{Tuple{Int64}}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:μ, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1458#1461", (:x,), (), (), Tuple{Vector{Float64}}, Tuple{}}}, is_ref::Bool)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:61
    [5] resample_propagate!(pc::ParticleContainer{Trace{Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:z, :μ), Tuple{DynamicPPL.Metadata{Dict{VarName{:z, Tuple{Tuple{Int64}}}, Int64}, Vector{ChineseRestaurantProcess{DirichletProcess{Float64}, Vector{Int64}}}, Vector{VarName{:z, Tuple{Tuple{Int64}}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:μ, Tuple{Tuple{Int64}}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:μ, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:z, :μ), Tuple{DynamicPPL.Metadata{Dict{VarName{:z, Tuple{Tuple{Int64}}}, Int64}, Vector{ChineseRestaurantProcess{DirichletProcess{Float64}, Vector{Int64}}}, Vector{VarName{:z, Tuple{Tuple{Int64}}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:μ, Tuple{Tuple{Int64}}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:μ, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1458#1461", (:x,), (), (), Tuple{Vector{Float64}}, Tuple{}}}}, randcat::typeof(resample_systematic), ref::Nothing; weights::Vector{Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:216
    [6] #resample_propagate!#6
      @ ~/.julia/packages/Turing/UsQlw/src/core/container.jl:356 [inlined]
    [7] resample_propagate!(pc::ParticleContainer{Trace{Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:z, :μ), Tuple{DynamicPPL.Metadata{Dict{VarName{:z, Tuple{Tuple{Int64}}}, Int64}, Vector{ChineseRestaurantProcess{DirichletProcess{Float64}, Vector{Int64}}}, Vector{VarName{:z, Tuple{Tuple{Int64}}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:μ, Tuple{Tuple{Int64}}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:μ, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:z, :μ), Tuple{DynamicPPL.Metadata{Dict{VarName{:z, Tuple{Tuple{Int64}}}, Int64}, Vector{ChineseRestaurantProcess{DirichletProcess{Float64}, Vector{Int64}}}, Vector{VarName{:z, Tuple{Tuple{Int64}}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:μ, Tuple{Tuple{Int64}}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:μ, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1458#1461", (:x,), (), (), Tuple{Vector{Float64}}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64}, ref::Nothing)
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:353
    [8] sweep!(pc::ParticleContainer{Trace{Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:z, :μ), Tuple{DynamicPPL.Metadata{Dict{VarName{:z, Tuple{Tuple{Int64}}}, Int64}, Vector{ChineseRestaurantProcess{DirichletProcess{Float64}, Vector{Int64}}}, Vector{VarName{:z, Tuple{Tuple{Int64}}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:μ, Tuple{Tuple{Int64}}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:μ, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, VarInfo{NamedTuple{(:z, :μ), Tuple{DynamicPPL.Metadata{Dict{VarName{:z, Tuple{Tuple{Int64}}}, Int64}, Vector{ChineseRestaurantProcess{DirichletProcess{Float64}, Vector{Int64}}}, Vector{VarName{:z, Tuple{Tuple{Int64}}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:μ, Tuple{Tuple{Int64}}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:μ, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, DynamicPPL.Model{var"#1458#1461", (:x,), (), (), Tuple{Vector{Float64}}, Tuple{}}}}, resampler::ResampleWithESSThreshold{typeof(resample_systematic), Float64})
      @ Turing.Core ~/.julia/packages/Turing/UsQlw/src/core/container.jl:318
    [9] sample_init!(::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1458#1461", (:x,), (), (), Tuple{Vector{Float64}}, Tuple{}}, spl::Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:z, :μ), Tuple{DynamicPPL.Metadata{Dict{VarName{:z, Tuple{Tuple{Int64}}}, Int64}, Vector{ChineseRestaurantProcess{DirichletProcess{Float64}, Vector{Int64}}}, Vector{VarName{:z, Tuple{Tuple{Int64}}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:μ, Tuple{Tuple{Int64}}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:μ, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:117
   [10] sample_init!
      @ ~/.julia/packages/Turing/UsQlw/src/inference/AdvancedSMC.jl:100 [inlined]
   [11] mcmcsample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1458#1461", (:x,), (), (), Tuple{Vector{Float64}}, Tuple{}}, sampler::Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:z, :μ), Tuple{DynamicPPL.Metadata{Dict{VarName{:z, Tuple{Tuple{Int64}}}, Int64}, Vector{ChineseRestaurantProcess{DirichletProcess{Float64}, Vector{Int64}}}, Vector{VarName{:z, Tuple{Tuple{Int64}}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:μ, Tuple{Tuple{Int64}}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:μ, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; progress::Bool, progressname::String, callback::AbstractMCMC.var"#20#23", chain_type::Type, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ AbstractMCMC ~/.julia/packages/AbstractMCMC/iOkTf/src/sample.jl:74
   [12] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1458#1461", (:x,), (), (), Tuple{Vector{Float64}}, Tuple{}}, sampler::Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:z, :μ), Tuple{DynamicPPL.Metadata{Dict{VarName{:z, Tuple{Tuple{Int64}}}, Int64}, Vector{ChineseRestaurantProcess{DirichletProcess{Float64}, Vector{Int64}}}, Vector{VarName{:z, Tuple{Tuple{Int64}}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:μ, Tuple{Tuple{Int64}}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:μ, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64; chain_type::Type, resume_from::Nothing, progress::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:178
   [13] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1458#1461", (:x,), (), (), Tuple{Vector{Float64}}, Tuple{}}, sampler::Sampler{SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, Turing.Inference.SMCState{VarInfo{NamedTuple{(:z, :μ), Tuple{DynamicPPL.Metadata{Dict{VarName{:z, Tuple{Tuple{Int64}}}, Int64}, Vector{ChineseRestaurantProcess{DirichletProcess{Float64}, Vector{Int64}}}, Vector{VarName{:z, Tuple{Tuple{Int64}}}}, Vector{Int64}, Vector{Set{DynamicPPL.Selector}}}, DynamicPPL.Metadata{Dict{VarName{:μ, Tuple{Tuple{Int64}}}, Int64}, Vector{Normal{Float64}}, Vector{VarName{:μ, Tuple{Tuple{Int64}}}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}}, Float64}, Float64}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:177
   [14] sample(rng::Random._GLOBAL_RNG, model::DynamicPPL.Model{var"#1458#1461", (:x,), (), (), Tuple{Vector{Float64}}, Tuple{}}, alg::SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, N::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164
   [15] sample
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:164 [inlined]
   [16] #sample#1
      @ ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154 [inlined]
   [17] sample(model::DynamicPPL.Model{var"#1458#1461", (:x,), (), (), Tuple{Vector{Float64}}, Tuple{}}, alg::SMC{(), ResampleWithESSThreshold{typeof(resample_systematic), Float64}}, N::Int64)
      @ Turing.Inference ~/.julia/packages/Turing/UsQlw/src/inference/Inference.jl:154
   [18] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/stdlib/RandomMeasures.jl:61
   [19] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [20] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/stdlib/RandomMeasures.jl:11
   [21] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [22] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/stdlib/RandomMeasures.jl:10
   [23] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [24] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:52 [inlined]
   [25] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [26] macro expansion
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:51 [inlined]
   [27] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [28] top-level scope
      @ ~/.julia/packages/Turing/UsQlw/test/runtests.jl:15
   [29] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [30] top-level scope
      @ none:6
   [31] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [32] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [33] _start()
      @ Base ./client.jl:485
┌ Info: Found initial step size
└   ϵ = 0.003125
┌ Info: Found initial step size
└   ϵ = 0.003125
Test Summary:                                                               | Pass  Error  Total
Turing                                                                      | 9831     45   9876
  core                                                                      |   31     11     42
    ad.jl                                                                   |   13      9     22
      adr                                                                   |    1      1      2
      passing duals to distributions                                        |    6             6
      general AD tests                                                      |    2             2
      Tracker, Zygote and ReverseDiff + logdet                              |           1      1
      Tracker & Zygote + fill                                               |           1      1
      Tracker, Zygote and ReverseDiff + MvNormal                            |    1      1      2
      Tracker, Zygote and ReverseDiff + Diagonal Normal                     |    1      1      2
      Tracker, Zygote and ReverseDiff + MvNormal Interface                  |           1      1
      Simplex Tracker, Zygote and ReverseDiff (with and without caching) AD |           1      1
      PDMatDistribution AD                                                  |           1      1
      Hessian test                                                          |    2             2
      memoization: issue #1393                                              |           1      1
    container.jl                                                            |   18      2     20
      copy particle container                                               |    2             2
      particle container                                                    |   16      1     17
      trace                                                                 |           1      1
  inference: forwarddiff                                                    | 3212     11   3223
    samplers                                                                | 3212     11   3223
      gibbs.jl                                                              |    6      2      8
        gibbs constructor                                                   |    6      1      7
        gibbs inference                                                     |           1      1
        transitions                                                         |              No tests
        dynamic model                                                       |              No tests
      hmc.jl                                                                |   23      4     27
        constrained bounded                                                 |    1             1
        contrained simplex                                                  |    2             2
        hmc reverse diff                                                    |    2             2
        matrix support                                                      |    1             1
        multivariate support                                                |              No tests
        hmcda inference                                                     |    2      1      3
        hmcda constructor                                                   |    5             5
        nuts inference                                                      |    2             2
        nuts constructor                                                    |    3             3
        check discard                                                       |    2             2
        AHMC resize                                                         |           3      3
        Regression tests                                                    |    3             3
      is.jl                                                                 | 3002          3002
      mh.jl                                                                 |   78      1     79
        mh constructor                                                      |    3             3
        mh inference                                                        |    6      1      7
        shape                                                               |    8             8
        proposal matrix                                                     |    6             6
        vector of multivariate distributions                                |   55            55
      ESS                                                                   |    5      1      6
        ESS constructor                                                     |    2             2
        ESS inference                                                       |    3      1      4
      emcee.jl                                                              |    3             3
      SMC                                                                   |   24      1     25
        constructor                                                         |   22            22
        models                                                              |           1      1
        logevidence                                                         |    2             2
      PG                                                                    |   35            35
      resample.jl                                                           |    5             5
      io.jl                                                                 |   28      2     30
        threaded sampling                                                   |    4      1      5
          rng                                                               |    1      1      2
        chain save/resume                                                   |    8      1      9
        Contexts                                                            |    2             2
        Prior                                                               |   14            14
      dynamichmc.jl                                                         |    3             3
  variational algorithms : forwarddiff                                      |    6             6
  modes                                                                     |   20            20
  inference: tracker                                                        | 3212     11   3223
    samplers                                                                | 3212     11   3223
      gibbs.jl                                                              |    6      2      8
        gibbs constructor                                                   |    6      1      7
        gibbs inference                                                     |           1      1
        transitions                                                         |              No tests
        dynamic model                                                       |              No tests
      hmc.jl                                                                |   23      4     27
        constrained bounded                                                 |    1             1
        contrained simplex                                                  |    2             2
        hmc reverse diff                                                    |    2             2
        matrix support                                                      |    1             1
        multivariate support                                                |              No tests
        hmcda inference                                                     |    2      1      3
        hmcda constructor                                                   |    5             5
        nuts inference                                                      |    2             2
        nuts constructor                                                    |    3             3
        check discard                                                       |    2             2
        AHMC resize                                                         |           3      3
        Regression tests                                                    |    3             3
      is.jl                                                                 | 3002          3002
      mh.jl                                                                 |   78      1     79
        mh constructor                                                      |    3             3
        mh inference                                                        |    6      1      7
        shape                                                               |    8             8
        proposal matrix                                                     |    6             6
        vector of multivariate distributions                                |   55            55
      ESS                                                                   |    5      1      6
        ESS constructor                                                     |    2             2
        ESS inference                                                       |    3      1      4
      emcee.jl                                                              |    3             3
      SMC                                                                   |   24      1     25
        constructor                                                         |   22            22
        models                                                              |           1      1
        logevidence                                                         |    2             2
      PG                                                                    |   35            35
      resample.jl                                                           |    5             5
      io.jl                                                                 |   28      2     30
        threaded sampling                                                   |    4      1      5
          rng                                                               |    1      1      2
        chain save/resume                                                   |    8      1      9
        Contexts                                                            |    2             2
        Prior                                                               |   14            14
      dynamichmc.jl                                                         |    3             3
  variational algorithms : tracker                                          |    6             6
  modes                                                                     |   20            20
  inference: reversediff                                                    | 3212     11   3223
    samplers                                                                | 3212     11   3223
      gibbs.jl                                                              |    6      2      8
        gibbs constructor                                                   |    6      1      7
        gibbs inference                                                     |           1      1
        transitions                                                         |              No tests
        dynamic model                                                       |              No tests
      hmc.jl                                                                |   23      4     27
        constrained bounded                                                 |    1             1
        contrained simplex                                                  |    2             2
        hmc reverse diff                                                    |    2             2
        matrix support                                                      |    1             1
        multivariate support                                                |              No tests
        hmcda inference                                                     |    2      1      3
        hmcda constructor                                                   |    5             5
        nuts inference                                                      |    2             2
        nuts constructor                                                    |    3             3
        check discard                                                       |    2             2
        AHMC resize                                                         |           3      3
        Regression tests                                                    |    3             3
      is.jl                                                                 | 3002          3002
      mh.jl                                                                 |   78      1     79
        mh constructor                                                      |    3             3
        mh inference                                                        |    6      1      7
        shape                                                               |    8             8
        proposal matrix                                                     |    6             6
        vector of multivariate distributions                                |   55            55
      ESS                                                                   |    5      1      6
        ESS constructor                                                     |    2             2
        ESS inference                                                       |    3      1      4
      emcee.jl                                                              |    3             3
      SMC                                                                   |   24      1     25
        constructor                                                         |   22            22
        models                                                              |           1      1
        logevidence                                                         |    2             2
      PG                                                                    |   35            35
      resample.jl                                                           |    5             5
      io.jl                                                                 |   28      2     30
        threaded sampling                                                   |    4      1      5
          rng                                                               |    1      1      2
        chain save/resume                                                   |    8      1      9
        Contexts                                                            |    2             2
        Prior                                                               |   14            14
      dynamichmc.jl                                                         |    3             3
  variational algorithms : reversediff                                      |    6             6
  modes                                                                     |   20            20
  variational optimisers                                                    |    8             8
  stdlib                                                                    |   70      1     71
    distributions.jl                                                        |   70            70
    RandomMeasures.jl                                                       |           1      1
      Infinite Mixture Model                                                |           1      1
  utilities                                                                 |    8             8
ERROR: LoadError: Some tests did not pass: 9831 passed, 0 failed, 45 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/Turing/UsQlw/test/runtests.jl:14
ERROR: Package Turing errored during testing
Stacktrace:
  [1] pkgerror(msg::String)
    @ Pkg.Types /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1660
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:333
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:320
  [5] #test#62
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:70 [inlined]
  [6] test
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:69 [inlined]
  [7] #test#61
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [8] test
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66
 [10] test(pkg::String)
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66
 [11] top-level scope
    @ none:31
