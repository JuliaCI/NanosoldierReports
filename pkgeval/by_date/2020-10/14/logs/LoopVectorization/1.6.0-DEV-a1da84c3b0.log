Julia Version 1.6.0-DEV.1210
Commit a1da84c3b0 (2020-10-13 13:46 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807

  Resolving package versions...
  Installed CpuId â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.2.2
  Installed UnPack â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.2
  Installed SIMDPirates â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.8.25
  Installed SLEEFPirates â”€â”€â”€â”€â”€â”€â”€â”€ v0.5.5
  Installed VectorizationBase â”€â”€â”€ v0.12.33
  Installed OffsetArrays â”€â”€â”€â”€â”€â”€â”€â”€ v1.3.1
  Installed DocStringExtensions â”€ v0.8.3
  Installed LoopVectorization â”€â”€â”€ v0.8.26
Updating `~/.julia/environments/v1.6/Project.toml`
  [bdcacae8] + LoopVectorization v0.8.26
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [adafc99b] + CpuId v0.2.2
  [ffbed154] + DocStringExtensions v0.8.3
  [bdcacae8] + LoopVectorization v0.8.26
  [6fe1bfb0] + OffsetArrays v1.3.1
  [21efa798] + SIMDPirates v0.8.25
  [476501e8] + SLEEFPirates v0.5.5
  [3a884ed6] + UnPack v1.0.2
  [3d5dd08c] + VectorizationBase v0.12.33
  [56f22d72] + Artifacts
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building SLEEFPirates â†’ `~/.julia/scratchspaces/44cfe95a-1eb2-52ea-b672-e2afdf69b78f/67ae90a18aa8c22bf159318300e765fbd89ddf6e/build.log`
Precompiling project... (tip: to disable auto-precompilation set ENV["JULIA_PKG_PRECOMPILE_AUTO"]=0)
[90m[32m  âœ“ [39mUnPack[39m
[90m[32m  âœ“ [39mDocStringExtensions[39m
[90m[32m  âœ“ [39mOffsetArrays[39m
[90m[32m  âœ“ [39mSIMDPirates[39m
[90m[32m  âœ“ [39mSLEEFPirates[39m
[32m  âœ“ [39mLoopVectorization
6 dependencies successfully precompiled (2 already precompiled)

    Testing LoopVectorization
Status `/tmp/jl_Y9pVP0/Project.toml`
  [ffbed154] DocStringExtensions v0.8.3
  [bdcacae8] LoopVectorization v0.8.26
  [6fe1bfb0] OffsetArrays v1.3.1
  [21efa798] SIMDPirates v0.8.25
  [476501e8] SLEEFPirates v0.5.5
  [3a884ed6] UnPack v1.0.2
  [3d5dd08c] VectorizationBase v0.12.33
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [8dfed614] Test
Status `/tmp/jl_Y9pVP0/Manifest.toml`
  [adafc99b] CpuId v0.2.2
  [ffbed154] DocStringExtensions v0.8.3
  [bdcacae8] LoopVectorization v0.8.26
  [6fe1bfb0] OffsetArrays v1.3.1
  [21efa798] SIMDPirates v0.8.25
  [476501e8] SLEEFPirates v0.5.5
  [3a884ed6] UnPack v1.0.2
  [3d5dd08c] VectorizationBase v0.12.33
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
    Testing Running tests...
LoopVectorization.REGISTER_COUNT = 16
#= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/printmethods.jl:2 =# @__LINE__() = 2
  5.099469 seconds (2.69 M allocations: 152.946 MiB, 1.51% gc time, 99.55% compilation time)
(Float64, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/fallback.jl:4 =# @__LINE__()) = (Float64, 4)
Fall back behavior: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/fallback.jl:38
  Test threw exception
  Expression: msdavx(x) != msdavx(FallbackArrayWrapper(x))
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] (::var"#msdavx#2")(x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/fallback.jl:14
   [5] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/fallback.jl:38
   [6] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/fallback.jl:4
Fall back behavior: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/fallback.jl:41
  Test threw exception
  Expression: exp.(x) != #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/fallback.jl:41 =# @avx(exp.(x))
  Module IR does not contain specified entry function
  Stacktrace:
   [1] expect
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:315 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/broadcast.jl:248 [inlined]
   [3] vmaterialize!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/broadcast.jl:248 [inlined]
   [4] vmaterialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(exp), Tuple{Vector{Float64}}}, #unused#::Val{:Main})
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/broadcast.jl:327
   [5] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/fallback.jl:41
   [6] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/fallback.jl:4
 25.807516 seconds (13.62 M allocations: 768.863 MiB, 3.42% gc time, 97.74% compilation time)
  0.160261 seconds (71.01 k allocations: 4.352 MiB, 90.89% compilation time)
test set: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/arraywrappers.jl:16
  Test threw exception
  Expression: y5t == addone!(y5, x5)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] (::var"#addone!#3")(y::PermutedDimsArray{Float64, 2, (2, 1), (2, 1), Matrix{Float64}}, x::PermutedDimsArray{Float64, 2, (2, 1), (2, 1), Matrix{Float64}})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/arraywrappers.jl:6
   [5] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/arraywrappers.jl:16
   [6] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/arraywrappers.jl:5
test set: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/arraywrappers.jl:3
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [4] (::var"#addone!#3")(y::SubArray{Float64, 2, PermutedDimsArray{Float64, 2, (2, 1), (2, 1), Matrix{Float64}}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}, x::SubArray{Float64, 2, PermutedDimsArray{Float64, 2, (2, 1), (2, 1), Matrix{Float64}}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false})
      @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/arraywrappers.jl:6
    [5] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/arraywrappers.jl:22
    [6] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
    [7] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/arraywrappers.jl:5
    [8] include(fname::String)
      @ Base.MainInclude ./client.jl:444
    [9] macro expansion
      @ ./timing.jl:192 [inlined]
   [10] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/runtests.jl:44 [inlined]
   [11] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [12] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/runtests.jl:36 [inlined]
   [13] top-level scope
      @ ./timing.jl:192
   [14] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [15] top-level scope
      @ none:6
   [16] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [17] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [18] _start()
      @ Base ./client.jl:485
  9.360001 seconds (3.53 M allocations: 204.458 MiB, 1.89% gc time, 94.35% compilation time)
Check Empty: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/check_empty.jl:20
  Test threw exception
  Expression: mysum_checked(x) == mysum_unchecked(x) == sum(x)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] mysum_checked(x::Array{Int64, 3})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/check_empty.jl:4
   [5] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/check_empty.jl:20
   [6] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/check_empty.jl:18
Check Empty: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/check_empty.jl:22
  Test threw exception
  Expression: !(iszero(mysum_unchecked(xv)))
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] mysum_unchecked(x::SubArray{Int64, 3, Array{Int64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}, false})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/check_empty.jl:11
   [5] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/check_empty.jl:22
   [6] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/check_empty.jl:18
  4.055370 seconds (2.79 M allocations: 149.369 MiB, 1.88% gc time, 90.08% compilation time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/offsetarrays.jl:204 =# @__LINE__()) = (Float32, 204)
r = -1:1
OffsetArrays: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/offsetarrays.jl:6
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [4] (::var"#avx2d!#6")(out::OffsetMatrix{Float32, SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}}, A::SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}, kern::OffsetMatrix{Float32, Matrix{Float32}})
      @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/offsetarrays.jl:69
    [5] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/offsetarrays.jl:222
    [6] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
    [7] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/offsetarrays.jl:8
    [8] include(fname::String)
      @ Base.MainInclude ./client.jl:444
    [9] macro expansion
      @ ./timing.jl:192 [inlined]
   [10] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/runtests.jl:49 [inlined]
   [11] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [12] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/runtests.jl:36 [inlined]
   [13] top-level scope
      @ ./timing.jl:192
   [14] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [15] top-level scope
      @ none:6
   [16] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [17] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [18] _start()
      @ Base ./client.jl:485
  3.437187 seconds (2.11 M allocations: 121.651 MiB, 2.96% gc time, 86.92% compilation time)
(Float64, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/tensors.jl:51 =# @__LINE__()) = (Float64, 51)
Tensors: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/tensors.jl:63
  Test threw exception
  Expression: C1 â‰ˆ contracttest1!(C2, A, B)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:numericconstant, Symbol("##zero#549"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000043, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000431, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000432, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000004312, 0x0000000000000043, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01), :LoopVectorization, :identity, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000043, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000043, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memstore, 0x03, 0x04), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000043, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memstore, 0x04, 0x04)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:tiJaB_i, Symbol("##vptr##_tiJaB_i_subset_4_with_b##")}(0x0000000000010101, 0x0000000000040301, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:Wmnij, Symbol("##vptr##_Wmnij_subset_4_with_j##")}(0x0000000000010101, 0x0000000000040302, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:tiJaB_d_temp3, Symbol("##vptr##_tiJaB_d_temp3_subset_2_with_j##_subset_3_with_b##")}(0x0000000000000101, 0x0000000000000201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:tiJaB_d_temp3, Symbol("##vptr##_tiJaB_d_temp3_subset_1_with_j##_subset_2_with_b##")}(0x0000000000000101, 0x0000000000000201, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{(1, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:a, :i, :n, :m}}, ::Tuple{UnitRange{Int64}, UnitRange{Int64}, VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.SparseStridedPointer{Float64, 2})
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] contracttest1!(tiJaB_d_temp3::Array{Float64, 4}, tiJaB_i::Array{Float64, 4}, Wmnij::Array{Float64, 4})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/tensors.jl:22
   [5] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/tensors.jl:63
   [6] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/tensors.jl:51
Tensors: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/tensors.jl:64
  Test threw exception
  Expression: C1 â‰ˆ contracttest2!(C3, A, B)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:numericconstant, Symbol("##zero#560"), LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000032, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000032, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01), :LoopVectorization, :identity, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000032, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000032, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memstore, 0x03, 0x04), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000032, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memstore, 0x04, 0x04)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:tiJaB_i, Symbol("##vptr##_tiJaB_i_subset_3_with_a##_subset_3_with_b##")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:Wmnij, Symbol("##vptr##_Wmnij_subset_4_with_j##")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:tiJaB_d_temp3, Symbol("##vptr##_tiJaB_d_temp3_subset_2_with_j##_subset_2_with_a##_subset_2_with_b##")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:tiJaB_d_temp3, Symbol("##vptr##_tiJaB_d_temp3_subset_1_with_j##_subset_2_with_b##_subset_2_with_a##")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{(1, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:i, :n, :m}}, ::Tuple{UnitRange{Int64}, VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 2}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.SparseStridedPointer{Float64, 1})
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] contracttest2!(tiJaB_d_temp3::Array{Float64, 4}, tiJaB_i::Array{Float64, 4}, Wmnij::Array{Float64, 4})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/tensors.jl:38
   [5] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/tensors.jl:64
   [6] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/tensors.jl:51
Tensors: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/tensors.jl:68
  Test threw exception
  Expression: C1 â‰ˆ contracttest1!(C2, Apermute, Bpermute)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:numericconstant, Symbol("##zero#549"), LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000043, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000431, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000432, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000004312, 0x0000000000000043, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01), :LoopVectorization, :identity, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000043, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000043, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memstore, 0x03, 0x04), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000043, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memstore, 0x04, 0x04)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:tiJaB_i, Symbol("##vptr##_tiJaB_i_subset_4_with_b##")}(0x0000000000010101, 0x0000000000040301, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:Wmnij, Symbol("##vptr##_Wmnij_subset_4_with_j##")}(0x0000000000010101, 0x0000000000040302, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:tiJaB_d_temp3, Symbol("##vptr##_tiJaB_d_temp3_subset_2_with_j##_subset_3_with_b##")}(0x0000000000000101, 0x0000000000000201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:tiJaB_d_temp3, Symbol("##vptr##_tiJaB_d_temp3_subset_1_with_j##_subset_2_with_b##")}(0x0000000000000101, 0x0000000000000201, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{(1, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:a, :i, :n, :m}}, ::Tuple{UnitRange{Int64}, UnitRange{Int64}, VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PermutedDimsStridedPointer{(2, 1, 3), (2, 1, 3), Float64, VectorizationBase.PackedStridedPointer{Float64, 2}}, ::VectorizationBase.PermutedDimsStridedPointer{(2, 1, 3), (2, 1, 3), Float64, VectorizationBase.PackedStridedPointer{Float64, 2}}, ::VectorizationBase.PackedStridedPointer{Float64, 1}, ::VectorizationBase.SparseStridedPointer{Float64, 2})
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] contracttest1!(tiJaB_d_temp3::Array{Float64, 4}, tiJaB_i::PermutedDimsArray{Float64, 4, (3, 1, 4, 2), (2, 4, 1, 3), Array{Float64, 4}}, Wmnij::PermutedDimsArray{Float64, 4, (2, 1, 4, 3), (2, 1, 4, 3), Array{Float64, 4}})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/tensors.jl:22
   [5] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/tensors.jl:68
   [6] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/tensors.jl:51
Tensors: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/tensors.jl:69
  Test threw exception
  Expression: C1 â‰ˆ contracttest2!(C3, Apermute, Bpermute)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:numericconstant, Symbol("##zero#560"), LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000032, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000032, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000321, 0x0000000000000032, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01), :LoopVectorization, :identity, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000032, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000032, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memstore, 0x03, 0x04), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000032, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memstore, 0x04, 0x04)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:tiJaB_i, Symbol("##vptr##_tiJaB_i_subset_3_with_a##_subset_3_with_b##")}(0x0000000000000101, 0x0000000000000302, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:Wmnij, Symbol("##vptr##_Wmnij_subset_4_with_j##")}(0x0000000000010101, 0x0000000000030201, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:tiJaB_d_temp3, Symbol("##vptr##_tiJaB_d_temp3_subset_2_with_j##_subset_2_with_a##_subset_2_with_b##")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:tiJaB_d_temp3, Symbol("##vptr##_tiJaB_d_temp3_subset_1_with_j##_subset_2_with_b##_subset_2_with_a##")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{(1, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:i, :n, :m}}, ::Tuple{UnitRange{Int64}, VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PermutedDimsStridedPointer{(2, 1), (2, 1), Float64, VectorizationBase.PackedStridedPointer{Float64, 1}}, ::VectorizationBase.PermutedDimsStridedPointer{(2, 1, 3), (2, 1, 3), Float64, VectorizationBase.PackedStridedPointer{Float64, 2}}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.SparseStridedPointer{Float64, 1})
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] contracttest2!(tiJaB_d_temp3::Array{Float64, 4}, tiJaB_i::PermutedDimsArray{Float64, 4, (3, 1, 4, 2), (2, 4, 1, 3), Array{Float64, 4}}, Wmnij::PermutedDimsArray{Float64, 4, (2, 1, 4, 3), (2, 1, 4, 3), Array{Float64, 4}})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/tensors.jl:38
   [5] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/tensors.jl:69
   [6] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/tensors.jl:51
 11.176779 seconds (7.21 M allocations: 425.676 MiB, 18.29% gc time, 88.42% compilation time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/map.jl:4 =# @__LINE__()) = (Float32, 4)
map: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/map.jl:1
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] macro expansion
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/memory.jl:243 [inlined]
    [2] vload
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/memory.jl:209 [inlined]
    [3] vload
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/memory.jl:372 [inlined]
    [4] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
    [5] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
    [6] #19
      @ ./broadcast.jl:1046 [inlined]
    [7] ntuple
      @ ./ntuple.jl:49 [inlined]
    [8] copy
      @ ./broadcast.jl:1046 [inlined]
    [9] materialize
      @ ./broadcast.jl:837 [inlined]
   [10] vmap_singlethread!(::var"#foo#15", ::Vector{Float32}, ::Val{false}, ::Vector{Float32}, ::Vector{Float32})
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/map.jl:74
   [11] vmap!
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/map.jl:163 [inlined]
   [12] vmap_call
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/map.jl:260 [inlined]
   [13] vmap(::var"#foo#15", ::Vector{Float32}, ::Vector{Float32})
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/map.jl:270
   [14] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/map.jl:8
   [15] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [16] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/map.jl:2
   [17] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [18] macro expansion
      @ ./timing.jl:192 [inlined]
   [19] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/runtests.jl:54 [inlined]
   [20] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [21] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/runtests.jl:36 [inlined]
   [22] top-level scope
      @ ./timing.jl:192
   [23] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [24] top-level scope
      @ none:6
   [25] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [26] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [27] _start()
      @ Base ./client.jl:485
  1.870550 seconds (1.22 M allocations: 70.894 MiB, 5.95% gc time, 92.20% compilation time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/filter.jl:4 =# @__LINE__()) = (Float32, 4)
filter: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/filter.jl:1
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] vfilter!(f::var"#19#23", x::Vector{Float32}, y::Vector{Float32})
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/filter.jl:0
    [2] vfilter(f::var"#19#23", y::Vector{Float32})
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/filter.jl:29
    [3] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/filter.jl:11
    [4] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
    [5] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/filter.jl:2
    [6] include(fname::String)
      @ Base.MainInclude ./client.jl:444
    [7] macro expansion
      @ ./timing.jl:192 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/runtests.jl:56 [inlined]
    [9] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/runtests.jl:36 [inlined]
   [11] top-level scope
      @ ./timing.jl:192
   [12] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [13] top-level scope
      @ none:6
   [14] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [15] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [16] _start()
      @ Base ./client.jl:485
  0.700340 seconds (543.02 k allocations: 30.974 MiB, 4.08% gc time, 80.19% compilation time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:19 =# @__LINE__()) = (Int32, 19)
mapreduce: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:37
  Test threw exception
  Expression: vreduce(+, x7) â‰ˆ sum(x7)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] _vreduce(#unused#::typeof(+), arg::Vector{Int32})
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:119
   [5] #vreduce#103
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:86 [inlined]
   [6] vreduce(::typeof(+), arg::Vector{Int32})
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:86
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:37
   [8] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [9] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:4
mapreduce: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:38
  Test threw exception
  Expression: vreduce(+, x) â‰ˆ sum(x)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] _vreduce(#unused#::typeof(+), arg::Array{Int32, 3})
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:119
   [5] #vreduce#103
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:86 [inlined]
   [6] vreduce(::typeof(+), arg::Array{Int32, 3})
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:86
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:38
   [8] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [9] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:4
mapreduce: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:40
  Test threw exception
  Expression: vreduce(*, x7) == prod(x7) % Int32
  Module IR does not contain specified entry function
  Stacktrace:
    [1] vload
      @ ~/.julia/packages/VectorizationBase/so9eG/src/vectorizable.jl:128 [inlined]
    [2] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
    [3] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
    [4] #19
      @ ./broadcast.jl:1046 [inlined]
    [5] ntuple
      @ ./ntuple.jl:48 [inlined]
    [6] copy
      @ ./broadcast.jl:1046 [inlined]
    [7] materialize
      @ ./broadcast.jl:837 [inlined]
    [8] mapreduce_simple(f::typeof(identity), op::typeof(*), args::Vector{Int32})
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:21
    [9] vmapreduce(::typeof(identity), ::typeof(*), ::Vector{Int32})
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:40
   [10] vreduce(op::Function, arg::Vector{Int32})
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:82
   [11] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:40
   [12] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [13] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:4
mapreduce: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:41
  Test threw exception
  Expression: vreduce(*, x) == prod(x) % Int32
  Module IR does not contain specified entry function
  Stacktrace:
    [1] macro expansion
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/memory.jl:135 [inlined]
    [2] vload
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/memory.jl:110 [inlined]
    [3] vload
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/memory.jl:372 [inlined]
    [4] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
    [5] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
    [6] #19
      @ ./broadcast.jl:1046 [inlined]
    [7] ntuple
      @ ./ntuple.jl:48 [inlined]
    [8] copy
      @ ./broadcast.jl:1046 [inlined]
    [9] materialize
      @ ./broadcast.jl:837 [inlined]
   [10] _vmapreduce(f::typeof(identity), op::typeof(*), #unused#::Val{8}, N::Int64, #unused#::Type{Int32}, args::Array{Int32, 3})
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:47
   [11] vmapreduce(::typeof(identity), ::typeof(*), ::Array{Int32, 3})
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:42
   [12] vreduce(op::Function, arg::Array{Int32, 3})
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:82
   [13] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:41
   [14] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [15] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:4
mapreduce: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:46
  Test threw exception
  Expression: vmapreduce(abs2, max, x) â‰ˆ mapreduce(abs2, max, x)
  Module IR does not contain specified entry function
  Stacktrace:
    [1] macro expansion
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/memory.jl:135 [inlined]
    [2] vload
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/memory.jl:110 [inlined]
    [3] vload
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/memory.jl:372 [inlined]
    [4] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
    [5] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
    [6] #19
      @ ./broadcast.jl:1046 [inlined]
    [7] ntuple
      @ ./ntuple.jl:48 [inlined]
    [8] copy
      @ ./broadcast.jl:1046 [inlined]
    [9] materialize
      @ ./broadcast.jl:837 [inlined]
   [10] _vmapreduce(f::typeof(abs2), op::typeof(max), #unused#::Val{8}, N::Int64, #unused#::Type{Int32}, args::Array{Int32, 3})
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:47
   [11] vmapreduce(::typeof(abs2), ::typeof(max), ::Array{Int32, 3})
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:42
   [12] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:46
   [13] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:4
mapreduce: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:47
  Test threw exception
  Expression: vmapreduce(abs2, min, x) â‰ˆ mapreduce(abs2, min, x)
  Module IR does not contain specified entry function
  Stacktrace:
    [1] macro expansion
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/memory.jl:135 [inlined]
    [2] vload
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/memory.jl:110 [inlined]
    [3] vload
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/memory.jl:372 [inlined]
    [4] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
    [5] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
    [6] #19
      @ ./broadcast.jl:1046 [inlined]
    [7] ntuple
      @ ./ntuple.jl:48 [inlined]
    [8] copy
      @ ./broadcast.jl:1046 [inlined]
    [9] materialize
      @ ./broadcast.jl:837 [inlined]
   [10] _vmapreduce(f::typeof(abs2), op::typeof(min), #unused#::Val{8}, N::Int64, #unused#::Type{Int32}, args::Array{Int32, 3})
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:47
   [11] vmapreduce(::typeof(abs2), ::typeof(min), ::Array{Int32, 3})
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:42
   [12] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:47
   [13] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:4
mapreduce: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:48
  Test threw exception
  Expression: vmapreduce(sqrt, *, x) â‰ˆ mapreduce(sqrt, *, x)
  Module IR does not contain specified entry function
  Stacktrace:
    [1] macro expansion
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/memory.jl:135 [inlined]
    [2] vload
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/memory.jl:110 [inlined]
    [3] vload
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/memory.jl:372 [inlined]
    [4] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
    [5] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
    [6] #19
      @ ./broadcast.jl:1046 [inlined]
    [7] ntuple
      @ ./ntuple.jl:48 [inlined]
    [8] copy
      @ ./broadcast.jl:1046 [inlined]
    [9] materialize
      @ ./broadcast.jl:837 [inlined]
   [10] _vmapreduce(f::typeof(sqrt), op::typeof(*), #unused#::Val{8}, N::Int64, #unused#::Type{Int32}, args::Array{Int32, 3})
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:47
   [11] vmapreduce(::typeof(sqrt), ::typeof(*), ::Array{Int32, 3})
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:42
   [12] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:48
   [13] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:4
mapreduce: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:51
  Test threw exception
  Expression: vmapreduce((a->begin
                2a
            end), *, x) â‰ˆ mapreduce((a->begin
                2a
            end), *, x)
  Module IR does not contain specified entry function
  Stacktrace:
    [1] macro expansion
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/memory.jl:135 [inlined]
    [2] vload
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/memory.jl:110 [inlined]
    [3] vload
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/memory.jl:372 [inlined]
    [4] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
    [5] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
    [6] #19
      @ ./broadcast.jl:1046 [inlined]
    [7] ntuple
      @ ./ntuple.jl:48 [inlined]
    [8] copy
      @ ./broadcast.jl:1046 [inlined]
    [9] materialize
      @ ./broadcast.jl:837 [inlined]
   [10] _vmapreduce(f::var"#28#35", op::typeof(*), #unused#::Val{8}, N::Int64, #unused#::Type{Int32}, args::Array{Int32, 3})
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:47
   [11] vmapreduce(::var"#28#35", ::typeof(*), ::Array{Int32, 3})
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:42
   [12] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:51
   [13] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:4
mapreduce: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:52
  Test threw exception
  Expression: vmapreduce(sin, +, x7) â‰ˆ mapreduce(sin, +, x7)
  Module IR does not contain specified entry function
  Stacktrace:
    [1] vload
      @ ~/.julia/packages/VectorizationBase/so9eG/src/vectorizable.jl:128 [inlined]
    [2] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
    [3] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
    [4] #19
      @ ./broadcast.jl:1046 [inlined]
    [5] ntuple
      @ ./ntuple.jl:48 [inlined]
    [6] copy
      @ ./broadcast.jl:1046 [inlined]
    [7] materialize
      @ ./broadcast.jl:837 [inlined]
    [8] mapreduce_simple(f::typeof(sin), op::typeof(+), args::Vector{Int32})
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:21
    [9] vmapreduce(::typeof(sin), ::typeof(+), ::Vector{Int32})
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:40
   [10] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:52
   [11] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [12] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:4
mapreduce: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:57
  Test threw exception
  Expression: vmapreduce(log, +, x) â‰ˆ sum(log, x)
  Module IR does not contain specified entry function
  Stacktrace:
    [1] macro expansion
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/memory.jl:135 [inlined]
    [2] vload
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/memory.jl:110 [inlined]
    [3] vload
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/memory.jl:372 [inlined]
    [4] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
    [5] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
    [6] #19
      @ ./broadcast.jl:1046 [inlined]
    [7] ntuple
      @ ./ntuple.jl:48 [inlined]
    [8] copy
      @ ./broadcast.jl:1046 [inlined]
    [9] materialize
      @ ./broadcast.jl:837 [inlined]
   [10] _vmapreduce(f::typeof(log), op::typeof(+), #unused#::Val{8}, N::Int64, #unused#::Type{Int32}, args::Array{Int32, 3})
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:47
   [11] vmapreduce(::typeof(log), ::typeof(+), ::Array{Int32, 3})
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:42
   [12] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:57
   [13] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:4
mapreduce: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:58
  Test threw exception
  Expression: vmapreduce(abs2, +, x) â‰ˆ sum(abs2, x)
  Module IR does not contain specified entry function
  Stacktrace:
    [1] macro expansion
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/memory.jl:135 [inlined]
    [2] vload
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/memory.jl:110 [inlined]
    [3] vload
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/memory.jl:372 [inlined]
    [4] _broadcast_getindex_evalf
      @ ./broadcast.jl:648 [inlined]
    [5] _broadcast_getindex
      @ ./broadcast.jl:621 [inlined]
    [6] #19
      @ ./broadcast.jl:1046 [inlined]
    [7] ntuple
      @ ./ntuple.jl:48 [inlined]
    [8] copy
      @ ./broadcast.jl:1046 [inlined]
    [9] materialize
      @ ./broadcast.jl:837 [inlined]
   [10] _vmapreduce(f::typeof(abs2), op::typeof(+), #unused#::Val{8}, N::Int64, #unused#::Type{Int32}, args::Array{Int32, 3})
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:47
   [11] vmapreduce(::typeof(abs2), ::typeof(+), ::Array{Int32, 3})
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:42
   [12] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:58
   [13] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [14] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:4
mapreduce: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:59
  Test threw exception
  Expression: maximum(x) == vreduce(max, x) == maximum_avx(x)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] _vreduce(#unused#::typeof(max), arg::Array{Int32, 3})
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:119
   [5] #vreduce#120
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:86 [inlined]
   [6] vreduce(::typeof(max), arg::Array{Int32, 3})
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:86
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:59
   [8] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [9] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:4
mapreduce: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:60
  Test threw exception
  Expression: minimum(x) == vreduce(min, x) == minimum_avx(x)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] _vreduce(#unused#::typeof(min), arg::Array{Int32, 3})
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:119
   [5] #vreduce#137
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:86 [inlined]
   [6] vreduce(::typeof(min), arg::Array{Int32, 3})
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:86
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:60
   [8] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [9] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:4
mapreduce: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:62
  Test threw exception
  Expression: vreduce(max, vec(x); dims = 1) == maximum(vec(x); dims = 1)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] _vreduce(#unused#::typeof(max), arg::Vector{Int32})
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:119
   [5] #vreduce#120
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:87 [inlined]
   [6] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:62
   [7] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [8] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:4
mapreduce: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:63
  Test threw exception
  Expression: vreduce(min, vec(x); dims = 1) == minimum(vec(x); dims = 1)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] _vreduce(#unused#::typeof(min), arg::Vector{Int32})
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:119
   [5] #vreduce#137
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:87 [inlined]
   [6] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:63
   [7] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [8] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:4
mapreduce: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:64
  Test threw exception
  Expression: vreduce(+, vec(x); dims = 1) â‰ˆ sum(vec(x); dims = 1)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] _vreduce(#unused#::typeof(+), arg::Vector{Int32})
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:119
   [5] #vreduce#103
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:87 [inlined]
   [6] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:64
   [7] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [8] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:4
mapreduce: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:66
  Test threw exception
  Expression: vreduce(max, x; dims = d) == maximum(x; dims = d)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] _vreduce_dims!(out::Array{Int32, 3}, #unused#::typeof(max), Rpre::CartesianIndices{0, Tuple{}}, is::UnitRange{Int64}, Rpost::CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, arg::Array{Int32, 3})
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:107
   [5] vreduce(::typeof(max), arg::Array{Int32, 3}; dims::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:97
   [6] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:66
   [7] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [8] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:4
mapreduce: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:67
  Test threw exception
  Expression: vreduce(min, x; dims = d) == minimum(x; dims = d)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] _vreduce_dims!(out::Array{Int32, 3}, #unused#::typeof(min), Rpre::CartesianIndices{0, Tuple{}}, is::UnitRange{Int64}, Rpost::CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, arg::Array{Int32, 3})
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:107
   [5] vreduce(::typeof(min), arg::Array{Int32, 3}; dims::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:97
   [6] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:67
   [7] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [8] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:4
mapreduce: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:68
  Test threw exception
  Expression: vreduce(+, x; dims = d) â‰ˆ sum(x; dims = d)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] _vreduce_dims!(out::Array{Int32, 3}, #unused#::typeof(+), Rpre::CartesianIndices{0, Tuple{}}, is::UnitRange{Int64}, Rpost::CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, arg::Array{Int32, 3})
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:107
   [5] vreduce(::typeof(+), arg::Array{Int32, 3}; dims::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:97
   [6] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:68
   [7] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [8] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:4
mapreduce: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:66
  Test threw exception
  Expression: vreduce(max, x; dims = d) == maximum(x; dims = d)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] _vreduce_dims!(out::Array{Int32, 3}, #unused#::typeof(max), Rpre::CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, is::UnitRange{Int64}, Rpost::CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, arg::Array{Int32, 3})
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:107
   [5] vreduce(::typeof(max), arg::Array{Int32, 3}; dims::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:97
   [6] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:66
   [7] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [8] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:4
mapreduce: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:67
  Test threw exception
  Expression: vreduce(min, x; dims = d) == minimum(x; dims = d)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] _vreduce_dims!(out::Array{Int32, 3}, #unused#::typeof(min), Rpre::CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, is::UnitRange{Int64}, Rpost::CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, arg::Array{Int32, 3})
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:107
   [5] vreduce(::typeof(min), arg::Array{Int32, 3}; dims::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:97
   [6] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:67
   [7] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [8] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:4
mapreduce: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:68
  Test threw exception
  Expression: vreduce(+, x; dims = d) â‰ˆ sum(x; dims = d)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] _vreduce_dims!(out::Array{Int32, 3}, #unused#::typeof(+), Rpre::CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, is::UnitRange{Int64}, Rpost::CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, arg::Array{Int32, 3})
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:107
   [5] vreduce(::typeof(+), arg::Array{Int32, 3}; dims::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:97
   [6] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:68
   [7] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [8] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:4
mapreduce: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:66
  Test threw exception
  Expression: vreduce(max, x; dims = d) == maximum(x; dims = d)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] _vreduce_dims!(out::Array{Int32, 3}, #unused#::typeof(max), Rpre::CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, is::UnitRange{Int64}, Rpost::CartesianIndices{0, Tuple{}}, arg::Array{Int32, 3})
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:107
   [5] vreduce(::typeof(max), arg::Array{Int32, 3}; dims::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:97
   [6] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:66
   [7] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [8] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:4
mapreduce: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:67
  Test threw exception
  Expression: vreduce(min, x; dims = d) == minimum(x; dims = d)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] _vreduce_dims!(out::Array{Int32, 3}, #unused#::typeof(min), Rpre::CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, is::UnitRange{Int64}, Rpost::CartesianIndices{0, Tuple{}}, arg::Array{Int32, 3})
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:107
   [5] vreduce(::typeof(min), arg::Array{Int32, 3}; dims::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:97
   [6] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:67
   [7] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [8] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:4
mapreduce: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:68
  Test threw exception
  Expression: vreduce(+, x; dims = d) â‰ˆ sum(x; dims = d)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] _vreduce_dims!(out::Array{Int32, 3}, #unused#::typeof(+), Rpre::CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, is::UnitRange{Int64}, Rpost::CartesianIndices{0, Tuple{}}, arg::Array{Int32, 3})
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:107
   [5] vreduce(::typeof(+), arg::Array{Int32, 3}; dims::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:97
   [6] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:68
   [7] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [8] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:4
mapreduce: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:3
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, 0, 8)}, ::Type{Tuple{Symbol(""), :s, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000003, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000231, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02), :LoopVectorization, :max, LoopVectorization.OperationStruct(0x0000000000000231, 0x0000000000000003, 0x0000000000000000, 0x0000000000000102, LoopVectorization.compute, 0x00, 0x01), :LoopVectorization, :identity, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000003, 0x0000000000000000, 0x0000000000000003, LoopVectorization.compute, 0x00, 0x01), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000021, 0x0000000000000003, 0x0000000000000000, 0x0000000000000004, LoopVectorization.memstore, 0x02, 0x03)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:arg, Symbol("##vptr##_arg")}(0x0000000000010101, 0x0000000000020301, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:out, Symbol("##vptr##_out_subset_2_with_1##")}(0x0000000000000101, 0x0000000000000201, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{}}}, ::Type{Tuple{:Ipost, :Ipre, :i}}, ::Tuple{CartesianIndices{5, NTuple{5, VectorizationBase.StaticLowerUnitRange{1}}}, CartesianIndices{0, Tuple{}}, UnitRange{Int64}}, ::VectorizationBase.PackedStridedPointer{Int32, 5}, ::VectorizationBase.SparseStridedPointer{Int32, 5}, ::Int32)
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] _vreduce_dims!(out::Array{Int32, 6}, #unused#::typeof(max), Rpre::CartesianIndices{0, Tuple{}}, is::UnitRange{Int64}, Rpost::CartesianIndices{5, NTuple{5, Base.OneTo{Int64}}}, arg::Array{Int32, 6})
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:107
    [5] vreduce(::typeof(max), arg::Array{Int32, 6}; dims::Int64)
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/mapreduce.jl:97
    [6] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:71
    [7] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
    [8] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/mapreduce.jl:4
    [9] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [10] macro expansion
      @ ./timing.jl:192 [inlined]
   [11] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/runtests.jl:58 [inlined]
   [12] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [13] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/runtests.jl:36 [inlined]
   [14] top-level scope
      @ ./timing.jl:192
   [15] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [16] top-level scope
      @ none:6
   [17] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [18] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [19] _start()
      @ Base ./client.jl:485
 25.457386 seconds (41.37 M allocations: 2.497 GiB, 9.04% gc time, 84.33% compilation time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/ifelsemasks.jl:366 =# @__LINE__()) = (Float32, 366)
ifelse (masks): Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/ifelsemasks.jl:4
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [4] (::var"#promote_bool_storeavx!#41")(z::Vector{Float32}, x::Vector{Float32}, y::Vector{Float32})
      @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/ifelsemasks.jl:13
    [5] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/ifelsemasks.jl:375
    [6] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
    [7] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/ifelsemasks.jl:6
    [8] include(fname::String)
      @ Base.MainInclude ./client.jl:444
    [9] macro expansion
      @ ./timing.jl:192 [inlined]
   [10] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/runtests.jl:60 [inlined]
   [11] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [12] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/runtests.jl:36 [inlined]
   [13] top-level scope
      @ ./timing.jl:192
   [14] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [15] top-level scope
      @ none:6
   [16] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [17] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [18] _start()
      @ Base ./client.jl:485
  3.507029 seconds (999.91 k allocations: 59.182 MiB, 1.13% gc time, 61.70% compilation time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:234 =# @__LINE__()) = (Float32, 234)
dot: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:240
  Test threw exception
  Expression: mydotavx(a, b) â‰ˆ s
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] (::var"#mydotavx#90")(a::Vector{Float32}, b::Vector{Float32})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:19
   [5] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:240
   [6] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:5
dot: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:241
  Test threw exception
  Expression: mydot_avx(a, b) â‰ˆ s
  Module IR does not contain specified entry function
  Stacktrace:
   [1] (::var"#mydot_avx#91")(a::Vector{Float32}, b::Vector{Float32})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:0
   [2] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:241
   [3] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [4] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:5
dot: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:242
  Test threw exception
  Expression: mydotavx(ao, bo) â‰ˆ s
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] (::var"#mydotavx#90")(a::OffsetVector{Float32, Vector{Float32}}, b::OffsetVector{Float32, Vector{Float32}})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:19
   [5] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:242
   [6] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:5
dot: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:243
  Test threw exception
  Expression: mydot_avx(ao, bo) â‰ˆ s
  Module IR does not contain specified entry function
  Stacktrace:
   [1] macro expansion
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/memory.jl:169 [inlined]
   [2] vload
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/memory.jl:141 [inlined]
   [3] vload
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/memory.jl:372 [inlined]
   [4] vloadstride
     @ ~/.julia/packages/VectorizationBase/so9eG/src/vectorizable.jl:321 [inlined]
   [5] vload
     @ ~/.julia/packages/VectorizationBase/so9eG/src/vectorizable.jl:329 [inlined]
   [6] (::var"#mydot_avx#91")(a::OffsetVector{Float32, Vector{Float32}}, b::OffsetVector{Float32, Vector{Float32}})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:27
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:243
   [8] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [9] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:5
dot: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:244
  Test threw exception
  Expression: dot_unroll2avx(a, b) â‰ˆ s
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] (::var"#dot_unroll2avx#96")(x::Vector{Float32}, y::Vector{Float32})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:71
   [5] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:244
   [6] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:5
dot: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:245
  Test threw exception
  Expression: dot_unroll3avx(a, b) â‰ˆ s
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] (::var"#dot_unroll3avx#97")(x::Vector{Float32}, y::Vector{Float32})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:78
   [5] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:245
   [6] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:5
dot: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:246
  Test threw exception
  Expression: dot_unroll2_avx(a, b) â‰ˆ s
  Module IR does not contain specified entry function
  Stacktrace:
   [1] (::var"#dot_unroll2_avx#100")(x::Vector{Float32}, y::Vector{Float32})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:0
   [2] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:246
   [3] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [4] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:5
dot: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:247
  Test threw exception
  Expression: dot_unroll3_avx(a, b) â‰ˆ s
  Module IR does not contain specified entry function
  Stacktrace:
   [1] (::var"#dot_unroll3_avx#101")(x::Vector{Float32}, y::Vector{Float32})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:0
   [2] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:247
   [3] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [4] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:5
dot: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:248
  Test threw exception
  Expression: dot_unroll2avx_noinline(a, b) â‰ˆ s
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] (::var"#dot_unroll2avx_noinline#98")(x::Vector{Float32}, y::Vector{Float32})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:89
   [5] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:248
   [6] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:5
dot: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:249
  Test threw exception
  Expression: dot_unroll3avx_inline(a, b) â‰ˆ s
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] (::var"#dot_unroll3avx_inline#99")(x::Vector{Float32}, y::Vector{Float32})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:96
   [5] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:249
   [6] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:5
dot: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:251
  Test threw exception
  Expression: myselfdotavx(a) â‰ˆ s
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] (::var"#myselfdotavx#93")(a::Vector{Float32})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:49
   [5] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:251
   [6] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:5
dot: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:252
  Test threw exception
  Expression: myselfdotavx_range(a) â‰ˆ s
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] (::var"#myselfdotavx_range#94")(a::Vector{Float32})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:57
   [5] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:252
   [6] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:5
dot: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:253
  Test threw exception
  Expression: myselfdot_avx(a) â‰ˆ s
  Module IR does not contain specified entry function
  Stacktrace:
   [1] (::var"#myselfdot_avx#95")(a::Vector{Float32})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:0
   [2] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:253
   [3] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [4] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:5
dot: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:254
  Test threw exception
  Expression: myselfdotavx(a) â‰ˆ s
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] (::var"#myselfdotavx#93")(a::Vector{Float32})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:49
   [5] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:254
   [6] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:5
dot: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:256
  Test threw exception
  Expression: dot17(a, b) â‰ˆ (#= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:256 =# @view(a[1:17]))' * #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:256 =# @view(b[1:17])
  Module IR does not contain specified entry function
  Stacktrace:
   [1] macro expansion
     @ ~/.julia/packages/VectorizationBase/so9eG/src/vectorizable.jl:736 [inlined]
   [2] noalias!
     @ ~/.julia/packages/VectorizationBase/so9eG/src/vectorizable.jl:713 [inlined]
   [3] noalias!
     @ ~/.julia/packages/VectorizationBase/so9eG/src/vectorizable.jl:742 [inlined]
   [4] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [5] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [6] (::var"#dot17#115")(a::Vector{Float32}, b::Vector{Float32})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:222
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:256
   [8] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [9] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:5
dot: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:257
  Test threw exception
  Expression: dot33(a, b) â‰ˆ (#= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:257 =# @view(a[1:33]))' * #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:257 =# @view(b[1:33])
  Module IR does not contain specified entry function
  Stacktrace:
   [1] macro expansion
     @ ~/.julia/packages/VectorizationBase/so9eG/src/vectorizable.jl:736 [inlined]
   [2] noalias!
     @ ~/.julia/packages/VectorizationBase/so9eG/src/vectorizable.jl:713 [inlined]
   [3] noalias!
     @ ~/.julia/packages/VectorizationBase/so9eG/src/vectorizable.jl:742 [inlined]
   [4] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [5] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [6] (::var"#dot33#114")(a::Vector{Float32}, b::Vector{Float32})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:215
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:257
   [8] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [9] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:5
dot: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:261
  Test threw exception
  Expression: Ï€est == piavx(a, b)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] (::var"#piavx#107")(x::Vector{Float32}, y::Vector{Float32})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:165
   [5] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:261
   [6] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:5
dot: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:262
  Test threw exception
  Expression: Ï€est == piavx_u4(a, b)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] (::var"#piavx_u4#108")(x::Vector{Float32}, y::Vector{Float32})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:172
   [5] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:262
   [6] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:5
dot: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:263
  Test threw exception
  Expression: Ï€est == pi_avx(a, b)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] (::var"#pi_avx#109")(x::Vector{Float32}, y::Vector{Float32})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:0
   [2] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:263
   [3] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [4] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:5
dot: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:264
  Test threw exception
  Expression: Ï€est == pi_avx_u4(a, b)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] (::var"#pi_avx_u4#110")(x::Vector{Float32}, y::Vector{Float32})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:0
   [2] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:264
   [3] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [4] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:5
dot: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:268
  Test threw exception
  Expression: dotloopinductvarpow(a) â‰ˆ dotloopinductvarpowavx(a)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] (::var"#dotloopinductvarpowavx#112")(x::Vector{Float32})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:201
   [5] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:268
   [6] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:5
dot: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:270
  Test threw exception
  Expression: dot_from_n_to_100(a, b, 33) == #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:270 =# @views(mydotavx(a[33:100], b[33:100]))
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] (::var"#dot_from_n_to_100#113")(a::Vector{Float32}, b::Vector{Float32}, n::Int64)
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:208
   [5] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:270
   [6] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:5
dot: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:277
  Test threw exception
  Expression: mydot(ac, bc) â‰ˆ complex_dot_soa(a_re, a_im, b_re, b_im)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [4] (::var"#complex_dot_soa#102")(xre::Vector{Float32}, xim::Vector{Float32}, yre::Vector{Float32}, yim::Vector{Float32})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:121
   [5] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:277
   [6] top-level scope
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:5
dot: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:4
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [4] (::var"#complex_mul_with_index_offsetavx!#104")(c_re::Vector{Float32}, c_im::Vector{Float32}, a_re::Vector{Float32}, a_im::Vector{Float32}, b_re::Vector{Float32}, b_im::Vector{Float32})
      @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:139
    [5] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:283
    [6] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
    [7] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/dot.jl:5
    [8] include(fname::String)
      @ Base.MainInclude ./client.jl:444
    [9] macro expansion
      @ ./timing.jl:192 [inlined]
   [10] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/runtests.jl:62 [inlined]
   [11] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [12] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/runtests.jl:36 [inlined]
   [13] top-level scope
      @ ./timing.jl:192
   [14] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [15] top-level scope
      @ none:6
   [16] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [17] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [18] _start()
      @ Base ./client.jl:485
  7.689769 seconds (5.37 M allocations: 307.654 MiB, 2.10% gc time, 54.34% compilation time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/special.jl:339 =# @__LINE__()) = (Float32, 339)
Special Functions: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/special.jl:1
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [4] (::var"#myvexpavx!#118")(b::Vector{Float32}, a::Vector{Float32})
      @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/special.jl:14
    [5] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/special.jl:345
    [6] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
    [7] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/special.jl:2
    [8] include(fname::String)
      @ Base.MainInclude ./client.jl:444
    [9] macro expansion
      @ ./timing.jl:192 [inlined]
   [10] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/runtests.jl:64 [inlined]
   [11] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [12] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/runtests.jl:36 [inlined]
   [13] top-level scope
      @ ./timing.jl:192
   [14] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [15] top-level scope
      @ none:6
   [16] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [17] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [18] _start()
      @ Base ./client.jl:485
  0.928716 seconds (227.63 k allocations: 14.147 MiB, 34.91% compilation time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/gemv.jl:211 =# @__LINE__()) = (Float32, 211)
GEMV: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/gemv.jl:4
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!(::Val{(0, 0, 0, 8)}, ::Type{Tuple{:numericconstant, Symbol("##zero#2097"), LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000002, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x01, 0x02), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x03), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000002, 0x0000000000000000, 0x0000000000020301, LoopVectorization.compute, 0x00, 0x01), :LoopVectorization, :identity, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000002, 0x0000000000000000, 0x0000000000000004, LoopVectorization.compute, 0x00, 0x01), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000002, 0x0000000000000000, 0x0000000000000005, LoopVectorization.memstore, 0x03, 0x04)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000101, 0x0000000000000102, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{}, Tuple{}, Tuple{}, Tuple{(1, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:i, :j}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{Float32, 1}, ::VectorizationBase.PackedStridedPointer{Float32, 0}, ::VectorizationBase.PackedStridedPointer{Float32, 0})
      @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
    [4] (::var"#mygemvavx!#159")(y::SubArray{Float32, 1, Vector{Float32}, Tuple{UnitRange{Int64}}, true}, A::SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}, x::SubArray{Float32, 1, Vector{Float32}, Tuple{UnitRange{Int64}}, true})
      @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/gemv.jl:29
    [5] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/gemv.jl:228
    [6] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
    [7] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/gemv.jl:6
    [8] include(fname::String)
      @ Base.MainInclude ./client.jl:444
    [9] macro expansion
      @ ./timing.jl:192 [inlined]
   [10] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/runtests.jl:66 [inlined]
   [11] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [12] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/runtests.jl:36 [inlined]
   [13] top-level scope
      @ ./timing.jl:192
   [14] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [15] top-level scope
      @ none:6
   [16] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [17] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [18] _start()
      @ Base ./client.jl:485
  3.194671 seconds (1.38 M allocations: 79.290 MiB, 9.64% gc time, 81.23% compilation time)
(T, #= /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:789 =# @__LINE__()) = (Float32, 789)
Miscellaneous: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:5
  Got exception outside of a @test
  Module IR does not contain specified entry function
  Stacktrace:
    [1] assume
      @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
    [2] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [3] _avx_!
      @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
    [4] (::var"#mysubcolavx!#180")(B::Matrix{Float32}, A::Matrix{Float32}, x::Vector{Float32})
      @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:91
    [5] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:795
    [6] top-level scope
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144
    [7] top-level scope
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:7
    [8] include(fname::String)
      @ Base.MainInclude ./client.jl:444
    [9] macro expansion
      @ ./timing.jl:192 [inlined]
   [10] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/runtests.jl:68 [inlined]
   [11] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [12] macro expansion
      @ ~/.julia/packages/LoopVectorization/pHMnJ/test/runtests.jl:36 [inlined]
   [13] top-level scope
      @ ./timing.jl:192
   [14] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [15] top-level scope
      @ none:6
   [16] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [17] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [18] _start()
      @ Base ./client.jl:485
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130
UInt8 mul: Error During Test at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134
  Test threw exception
  Expression: mul1!(v1, A, v2) â‰ˆ mul2!(v3, A, v2)
  Module IR does not contain specified entry function
  Stacktrace:
   [1] assume
     @ ~/.julia/packages/SIMDPirates/EVSvY/src/llvm_utils.jl:308 [inlined]
   [2] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503 [inlined]
   [3] _avx_!(::Val{(0, 0, 0, 4)}, ::Type{Tuple{:LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x01), :i, :i, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x02), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x03), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000203, LoopVectorization.compute, 0x00, 0x04), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x05), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000405, LoopVectorization.compute, 0x00, 0x06), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000106, LoopVectorization.compute, 0x00, 0x07), :j, :j, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.loopvalue, 0x00, 0x08), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x09), :LoopVectorization, :-, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000803, LoopVectorization.compute, 0x00, 0x0a), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0b), :LoopVectorization, :*, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000a0b, LoopVectorization.compute, 0x00, 0x0c), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0d), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x0e), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000401, LoopVectorization.compute, 0x00, 0x0f), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x10), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x00000000000c0f03, LoopVectorization.compute, 0x00, 0x11), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000011, LoopVectorization.memload, 0x01, 0x12), :LoopVectorization, :>>, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001207, LoopVectorization.compute, 0x00, 0x13), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x14), :LoopVectorization, :&, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001305, LoopVectorization.compute, 0x00, 0x15), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x16), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001501, LoopVectorization.compute, 0x00, 0x17), :LoopVectorization, :LOOPCONSTANTINSTRUCTION, LoopVectorization.OperationStruct(0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x18), :LoopVectorization, :>=, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001505, LoopVectorization.compute, 0x00, 0x19), :LoopVectorization, :+, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000001719, LoopVectorization.compute, 0x00, 0x1a), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x02, 0x1b), :LoopVectorization, :getindex, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, LoopVectorization.memload, 0x03, 0x1c), :numericconstant, Symbol("##reductzero#2791"), LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000001, 0x0000000000000000, LoopVectorization.constant, 0x00, 0x1d), :LoopVectorization, :vfmadd_fast, LoopVectorization.OperationStruct(0x0000000000000012, 0x0000000000000001, 0x0000000000000000, 0x00000000001a1b1d, LoopVectorization.compute, 0x00, 0x1d), :LoopVectorization, :reduced_add, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000001, 0x0000000000000000, 0x0000000000001e1c, LoopVectorization.compute, 0x00, 0x1c), :LoopVectorization, :setindex!, LoopVectorization.OperationStruct(0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x000000000000001f, LoopVectorization.memstore, 0x03, 0x1e)}}, ::Type{Tuple{LoopVectorization.ArrayRefStruct{:A, Symbol("##vptr##_A")}(0x0000000000000002, 0x0000000000000011, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:x, Symbol("##vptr##_x")}(0x0000000000000001, 0x0000000000000001, 0x0000000000000000), LoopVectorization.ArrayRefStruct{:y, Symbol("##vptr##_y")}(0x0000000000000001, 0x0000000000000002, 0x0000000000000000)}}, ::Type{Tuple{0, Tuple{}, Tuple{11}, Tuple{(1, 2), (3, 1), (5, 3)}, Tuple{}, Tuple{(29, LoopVectorization.IntOrFloat)}, Tuple{}}}, ::Type{Tuple{:j, :i}}, ::Tuple{VectorizationBase.StaticLowerUnitRange{1}, VectorizationBase.StaticLowerUnitRange{1}}, ::VectorizationBase.PackedStridedPointer{UInt8, 1}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::VectorizationBase.PackedStridedPointer{Float64, 0}, ::Int64)
     @ LoopVectorization ~/.julia/packages/LoopVectorization/pHMnJ/src/reconstruct_loopset.jl:503
   [4] mul1!(y::Vector{Float64}, A::Matrix{UInt8}, x::Vector{Float64})
     @ Main ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1105
   [5] macro expansion
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1134 [inlined]
   [6] macro expansion
     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] top-level scope
     @ ~/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1130

signal (15): Terminated
in expression starting at none:31
pthread_cond_wait at /lib/x86_64-linux-gnu/libpthread.so.0 (unknown line)

signal (15): Terminated
in expression starting at /home/pkgeval/.julia/packages/LoopVectorization/pHMnJ/test/miscellaneous.jl:1128
pthread_cond_wait at /lib/x86_64-linux-gnu/libpthread.so.0 (unknown line)
