################################################################################
# PkgEval set-up: 2020-10-29T04:07:45.250
#

Julia Version 1.6.0-DEV.1352
Commit 8f71ea7f35 (2020-10-28 02:10 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807



################################################################################
# Installation: 2020-10-29T04:07:46.659
#

   Resolving package versions...
   Installed FastTransforms_jll ─────────── v0.3.3+0
   Installed OpenBLAS_jll ───────────────── v0.3.10+0
   Installed Mocking ────────────────────── v0.7.1
   Installed OrderedCollections ─────────── v1.3.1
   Installed RecipesBase ────────────────── v1.1.0
   Installed SpecialPolynomials ─────────── v0.1.1
   Installed Polynomials ────────────────── v1.1.10
   Installed FastTransforms ─────────────── v0.9.4
   Installed CompilerSupportLibraries_jll ─ v0.3.4+0
   Installed Zlib_jll ───────────────────── v1.2.11+18
   Installed QuadGK ─────────────────────── v2.4.1
   Installed Memoize ────────────────────── v0.4.3
   Installed DataAPI ────────────────────── v1.3.0
   Installed SortingAlgorithms ──────────── v0.3.1
   Installed GMP_jll ────────────────────── v6.2.0+3
   Installed DSP ────────────────────────── v0.6.8
   Installed EzXML ──────────────────────── v1.1.0
   Installed DualNumbers ────────────────── v0.6.2
   Installed Intervals ──────────────────── v1.5.0
   Installed Calculus ───────────────────── v0.5.1
   Installed TimeZones ──────────────────── v1.4.0
   Installed HypergeometricFunctions ────── v0.2.3
   Installed ToeplitzMatrices ───────────── v0.6.2
   Installed ArrayLayouts ───────────────── v0.3.8
   Installed OpenSpecFun_jll ────────────── v0.5.3+4
   Installed Compat ─────────────────────── v3.23.0
   Installed ExprTools ──────────────────── v0.1.3
   Installed FastGaussQuadrature ────────── v0.4.3
   Installed MacroTools ─────────────────── v0.5.6
   Installed MKL_jll ────────────────────── v2020.2.254+0
   Installed Reexport ───────────────────── v0.2.0
   Installed Libiconv_jll ───────────────── v1.16.0+7
   Installed FillArrays ─────────────────── v0.8.14
   Installed BinaryProvider ─────────────── v0.5.10
   Installed FFTW ───────────────────────── v1.2.4
   Installed AbstractFFTs ───────────────── v0.5.0
   Installed OffsetArrays ───────────────── v1.3.1
   Installed MPFR_jll ───────────────────── v4.1.0+1
   Installed SpecialFunctions ───────────── v0.10.3
   Installed IterTools ──────────────────── v1.3.0
   Installed Missings ───────────────────── v0.4.4
   Installed NaNMath ────────────────────── v0.3.4
   Installed StatsBase ──────────────────── v0.33.2
   Installed DataStructures ─────────────── v0.18.8
   Installed JLLWrappers ────────────────── v1.1.3
   Installed IntelOpenMP_jll ────────────── v2018.0.3+0
   Installed XML2_jll ───────────────────── v2.9.10+3
   Installed FFTW_jll ───────────────────── v3.3.9+6
Updating `~/.julia/environments/v1.6/Project.toml`
  [a25cea48] + SpecialPolynomials v0.1.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [621f4979] + AbstractFFTs v0.5.0
  [4c555306] + ArrayLayouts v0.3.8
  [b99e7846] + BinaryProvider v0.5.10
  [49dc2e85] + Calculus v0.5.1
  [34da2185] + Compat v3.23.0
  [717857b8] + DSP v0.6.8
  [9a962f9c] + DataAPI v1.3.0
  [864edb3b] + DataStructures v0.18.8
  [fa6b7ba4] + DualNumbers v0.6.2
  [e2ba6199] + ExprTools v0.1.3
  [8f5d6c58] + EzXML v1.1.0
  [7a1cc6ca] + FFTW v1.2.4
  [442a2c76] + FastGaussQuadrature v0.4.3
  [057dd010] + FastTransforms v0.9.4
  [1a297f60] + FillArrays v0.8.14
  [34004b35] + HypergeometricFunctions v0.2.3
  [d8418881] + Intervals v1.5.0
  [c8e1da08] + IterTools v1.3.0
  [692b3bcd] + JLLWrappers v1.1.3
  [1914dd2f] + MacroTools v0.5.6
  [c03570c3] + Memoize v0.4.3
  [e1d29d7a] + Missings v0.4.4
  [78c3b35d] + Mocking v0.7.1
  [77ba4419] + NaNMath v0.3.4
  [6fe1bfb0] + OffsetArrays v1.3.1
  [bac558e1] + OrderedCollections v1.3.1
  [f27b6e38] + Polynomials v1.1.10
  [1fd47b50] + QuadGK v2.4.1
  [3cdcf5f2] + RecipesBase v1.1.0
  [189a3867] + Reexport v0.2.0
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.10.3
  [a25cea48] + SpecialPolynomials v0.1.1
  [2913bbd2] + StatsBase v0.33.2
  [f269a46b] + TimeZones v1.4.0
  [c751599d] + ToeplitzMatrices v0.6.2
  [e66e0078] + CompilerSupportLibraries_jll v0.3.4+0
  [f5851436] + FFTW_jll v3.3.9+6
  [34b6f7d7] + FastTransforms_jll v0.3.3+0
  [781609d7] + GMP_jll v6.2.0+3
  [1d5cc7b8] + IntelOpenMP_jll v2018.0.3+0
  [94ce4f54] + Libiconv_jll v1.16.0+7
  [856f044c] + MKL_jll v2020.2.254+0
  [3a97d323] + MPFR_jll v4.1.0+1
  [4536629a] + OpenBLAS_jll v0.3.10+0
  [efe28fd5] + OpenSpecFun_jll v0.5.3+4
  [02c8fc9c] + XML2_jll v2.9.10+3
  [83775a58] + Zlib_jll v1.2.11+18
  [0dad84c5] + ArgTools
  [56f22d72] + Artifacts
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [f43a241f] + Downloads
  [b77e0a4c] + InteractiveUtils
  [b27032c2] + LibCURL
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
  [deac9b47] + LibCURL_jll
  [14a3606d] + MozillaCACerts_jll
    Building FFTW ──────────→ `~/.julia/scratchspaces/44cfe95a-1eb2-52ea-b672-e2afdf69b78f/8b7c16b56936047ca41bf25effa137ae0b381ae8/build.log`
    Building TimeZones ─────→ `~/.julia/scratchspaces/44cfe95a-1eb2-52ea-b672-e2afdf69b78f/2c48caca8f3912857973590a9757e1f86cbbff81/build.log`
    Building FastTransforms → `~/.julia/scratchspaces/44cfe95a-1eb2-52ea-b672-e2afdf69b78f/4e7a982af719a5ef8e099e4fe4d40d5758c5426f/build.log`


################################################################################
# Testing: 2020-10-29T04:08:12.444
#


     Testing SpecialPolynomials
Status `/tmp/jl_6kZtnX/Project.toml`
  [442a2c76] FastGaussQuadrature v0.4.3
  [057dd010] FastTransforms v0.9.4
  [34004b35] HypergeometricFunctions v0.2.3
  [c03570c3] Memoize v0.4.3
  [f27b6e38] Polynomials v1.1.10
  [1fd47b50] QuadGK v2.4.1
  [276daf66] SpecialFunctions v0.10.3
  [a25cea48] SpecialPolynomials v0.1.1
  [37e2e46d] LinearAlgebra
  [8dfed614] Test
Status `/tmp/jl_6kZtnX/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [4c555306] ArrayLayouts v0.3.8
  [b99e7846] BinaryProvider v0.5.10
  [49dc2e85] Calculus v0.5.1
  [34da2185] Compat v3.23.0
  [717857b8] DSP v0.6.8
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.18.8
  [fa6b7ba4] DualNumbers v0.6.2
  [e2ba6199] ExprTools v0.1.3
  [8f5d6c58] EzXML v1.1.0
  [7a1cc6ca] FFTW v1.2.4
  [442a2c76] FastGaussQuadrature v0.4.3
  [057dd010] FastTransforms v0.9.4
  [1a297f60] FillArrays v0.8.14
  [34004b35] HypergeometricFunctions v0.2.3
  [d8418881] Intervals v1.5.0
  [c8e1da08] IterTools v1.3.0
  [692b3bcd] JLLWrappers v1.1.3
  [1914dd2f] MacroTools v0.5.6
  [c03570c3] Memoize v0.4.3
  [e1d29d7a] Missings v0.4.4
  [78c3b35d] Mocking v0.7.1
  [77ba4419] NaNMath v0.3.4
  [6fe1bfb0] OffsetArrays v1.3.1
  [bac558e1] OrderedCollections v1.3.1
  [f27b6e38] Polynomials v1.1.10
  [1fd47b50] QuadGK v2.4.1
  [3cdcf5f2] RecipesBase v1.1.0
  [189a3867] Reexport v0.2.0
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.3
  [a25cea48] SpecialPolynomials v0.1.1
  [2913bbd2] StatsBase v0.33.2
  [f269a46b] TimeZones v1.4.0
  [c751599d] ToeplitzMatrices v0.6.2
  [e66e0078] CompilerSupportLibraries_jll v0.3.4+0
  [f5851436] FFTW_jll v3.3.9+6
  [34b6f7d7] FastTransforms_jll v0.3.3+0
  [781609d7] GMP_jll v6.2.0+3
  [1d5cc7b8] IntelOpenMP_jll v2018.0.3+0
  [94ce4f54] Libiconv_jll v1.16.0+7
  [856f044c] MKL_jll v2020.2.254+0
  [3a97d323] MPFR_jll v4.1.0+1
  [4536629a] OpenBLAS_jll v0.3.10+0
  [efe28fd5] OpenSpecFun_jll v0.5.3+4
  [02c8fc9c] XML2_jll v2.9.10+3
  [83775a58] Zlib_jll v1.2.11+18
  [0dad84c5] ArgTools
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [f43a241f] Downloads
  [b77e0a4c] InteractiveUtils
  [b27032c2] LibCURL
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
  [deac9b47] LibCURL_jll
  [14a3606d] MozillaCACerts_jll
     Testing Running tests...
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain(#unused#::Type{Chebyshev}) at Chebyshev.jl:40
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain at Chebyshev.jl:40 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain(#unused#::Type{Jacobi{0.5, 0.5, T, N} where N where T}) at Jacobi.jl:31
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain(#unused#::Type{Jacobi{0.25, 0.75, T, N} where N where T}) at Jacobi.jl:31
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `Interval(f, l, true, false)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Open}(f, l)` instead.
│   caller = domain(#unused#::Type{Jacobi{-0.5, 0.5, T, N} where N where T}) at Jacobi.jl:31
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `Interval(f, l, false, true)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Closed}(f, l)` instead.
│   caller = domain(#unused#::Type{Jacobi{0.5, -0.5, T, N} where N where T}) at Jacobi.jl:31
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain at Chebyshev.jl:40 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain at Chebyshev.jl:40 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Chebyshev}, f::Chebyshev{Float64, 3}, g::Chebyshev{Float64, 4}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Chebyshev}, f::Chebyshev{Float64, 3}, g::Chebyshev{Float64, 4}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain at Chebyshev.jl:40 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Chebyshev}, f::Chebyshev{Float64, 3}, g::Chebyshev{Float64, 5}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Chebyshev}, f::Chebyshev{Float64, 3}, g::Chebyshev{Float64, 5}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain at Chebyshev.jl:40 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Chebyshev}, f::Chebyshev{Float64, 3}, g::Chebyshev{Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Chebyshev}, f::Chebyshev{Float64, 3}, g::Chebyshev{Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain at Chebyshev.jl:40 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Chebyshev}, f::Chebyshev{Float64, 4}, g::Chebyshev{Float64, 5}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Chebyshev}, f::Chebyshev{Float64, 4}, g::Chebyshev{Float64, 5}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain at Chebyshev.jl:40 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Chebyshev}, f::Chebyshev{Float64, 4}, g::Chebyshev{Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Chebyshev}, f::Chebyshev{Float64, 4}, g::Chebyshev{Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain at Chebyshev.jl:40 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Chebyshev}, f::Chebyshev{Float64, 5}, g::Chebyshev{Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Chebyshev}, f::Chebyshev{Float64, 5}, g::Chebyshev{Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain at Chebyshev.jl:40 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain at Chebyshev.jl:40 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 3}, g::OrthonormalChebyshev{Float64, 4}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 3}, g::OrthonormalChebyshev{Float64, 4}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain at Chebyshev.jl:40 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 3}, g::OrthonormalChebyshev{Float64, 5}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 3}, g::OrthonormalChebyshev{Float64, 5}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain at Chebyshev.jl:40 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 3}, g::OrthonormalChebyshev{Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 3}, g::OrthonormalChebyshev{Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain at Chebyshev.jl:40 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 4}, g::OrthonormalChebyshev{Float64, 5}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 4}, g::OrthonormalChebyshev{Float64, 5}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain at Chebyshev.jl:40 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 4}, g::OrthonormalChebyshev{Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 4}, g::OrthonormalChebyshev{Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain at Chebyshev.jl:40 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 5}, g::OrthonormalChebyshev{Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 5}, g::OrthonormalChebyshev{Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{ChebyshevU}, f::ChebyshevU{Float64, 3}, g::ChebyshevU{Float64, 4}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{ChebyshevU}, f::ChebyshevU{Float64, 3}, g::ChebyshevU{Float64, 4}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{ChebyshevU}, f::ChebyshevU{Float64, 3}, g::ChebyshevU{Float64, 5}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{ChebyshevU}, f::ChebyshevU{Float64, 3}, g::ChebyshevU{Float64, 5}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{ChebyshevU}, f::ChebyshevU{Float64, 3}, g::ChebyshevU{Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{ChebyshevU}, f::ChebyshevU{Float64, 3}, g::ChebyshevU{Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{ChebyshevU}, f::ChebyshevU{Float64, 4}, g::ChebyshevU{Float64, 5}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{ChebyshevU}, f::ChebyshevU{Float64, 4}, g::ChebyshevU{Float64, 5}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{ChebyshevU}, f::ChebyshevU{Float64, 4}, g::ChebyshevU{Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{ChebyshevU}, f::ChebyshevU{Float64, 4}, g::ChebyshevU{Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{ChebyshevU}, f::ChebyshevU{Float64, 5}, g::ChebyshevU{Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{ChebyshevU}, f::ChebyshevU{Float64, 5}, g::ChebyshevU{Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.5, 0.5, T, N} where N where T}, f::Jacobi{0.5, 0.5, Float64, 3}, g::Jacobi{0.5, 0.5, Float64, 4}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.5, 0.5, T, N} where N where T}, f::Jacobi{0.5, 0.5, Float64, 3}, g::Jacobi{0.5, 0.5, Float64, 4}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.5, 0.5, T, N} where N where T}, f::Jacobi{0.5, 0.5, Float64, 3}, g::Jacobi{0.5, 0.5, Float64, 5}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.5, 0.5, T, N} where N where T}, f::Jacobi{0.5, 0.5, Float64, 3}, g::Jacobi{0.5, 0.5, Float64, 5}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.5, 0.5, T, N} where N where T}, f::Jacobi{0.5, 0.5, Float64, 3}, g::Jacobi{0.5, 0.5, Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.5, 0.5, T, N} where N where T}, f::Jacobi{0.5, 0.5, Float64, 3}, g::Jacobi{0.5, 0.5, Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.5, 0.5, T, N} where N where T}, f::Jacobi{0.5, 0.5, Float64, 4}, g::Jacobi{0.5, 0.5, Float64, 5}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.5, 0.5, T, N} where N where T}, f::Jacobi{0.5, 0.5, Float64, 4}, g::Jacobi{0.5, 0.5, Float64, 5}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.5, 0.5, T, N} where N where T}, f::Jacobi{0.5, 0.5, Float64, 4}, g::Jacobi{0.5, 0.5, Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.5, 0.5, T, N} where N where T}, f::Jacobi{0.5, 0.5, Float64, 4}, g::Jacobi{0.5, 0.5, Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.5, 0.5, T, N} where N where T}, f::Jacobi{0.5, 0.5, Float64, 5}, g::Jacobi{0.5, 0.5, Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.5, 0.5, T, N} where N where T}, f::Jacobi{0.5, 0.5, Float64, 5}, g::Jacobi{0.5, 0.5, Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.25, 0.75, T, N} where N where T}, f::Jacobi{0.25, 0.75, Float64, 3}, g::Jacobi{0.25, 0.75, Float64, 4}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.25, 0.75, T, N} where N where T}, f::Jacobi{0.25, 0.75, Float64, 3}, g::Jacobi{0.25, 0.75, Float64, 4}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.25, 0.75, T, N} where N where T}, f::Jacobi{0.25, 0.75, Float64, 3}, g::Jacobi{0.25, 0.75, Float64, 5}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.25, 0.75, T, N} where N where T}, f::Jacobi{0.25, 0.75, Float64, 3}, g::Jacobi{0.25, 0.75, Float64, 5}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.25, 0.75, T, N} where N where T}, f::Jacobi{0.25, 0.75, Float64, 3}, g::Jacobi{0.25, 0.75, Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.25, 0.75, T, N} where N where T}, f::Jacobi{0.25, 0.75, Float64, 3}, g::Jacobi{0.25, 0.75, Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.25, 0.75, T, N} where N where T}, f::Jacobi{0.25, 0.75, Float64, 4}, g::Jacobi{0.25, 0.75, Float64, 5}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.25, 0.75, T, N} where N where T}, f::Jacobi{0.25, 0.75, Float64, 4}, g::Jacobi{0.25, 0.75, Float64, 5}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.25, 0.75, T, N} where N where T}, f::Jacobi{0.25, 0.75, Float64, 4}, g::Jacobi{0.25, 0.75, Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.25, 0.75, T, N} where N where T}, f::Jacobi{0.25, 0.75, Float64, 4}, g::Jacobi{0.25, 0.75, Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.25, 0.75, T, N} where N where T}, f::Jacobi{0.25, 0.75, Float64, 5}, g::Jacobi{0.25, 0.75, Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.25, 0.75, T, N} where N where T}, f::Jacobi{0.25, 0.75, Float64, 5}, g::Jacobi{0.25, 0.75, Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, false)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Open}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `Interval(f, l, true, false)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Open}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{-0.5, 0.5, T, N} where N where T}, f::Jacobi{-0.5, 0.5, Float64, 3}, g::Jacobi{-0.5, 0.5, Float64, 4}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{-0.5, 0.5, T, N} where N where T}, f::Jacobi{-0.5, 0.5, Float64, 3}, g::Jacobi{-0.5, 0.5, Float64, 4}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, false)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Open}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{-0.5, 0.5, T, N} where N where T}, f::Jacobi{-0.5, 0.5, Float64, 3}, g::Jacobi{-0.5, 0.5, Float64, 5}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{-0.5, 0.5, T, N} where N where T}, f::Jacobi{-0.5, 0.5, Float64, 3}, g::Jacobi{-0.5, 0.5, Float64, 5}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, false)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Open}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{-0.5, 0.5, T, N} where N where T}, f::Jacobi{-0.5, 0.5, Float64, 3}, g::Jacobi{-0.5, 0.5, Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{-0.5, 0.5, T, N} where N where T}, f::Jacobi{-0.5, 0.5, Float64, 3}, g::Jacobi{-0.5, 0.5, Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, false)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Open}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{-0.5, 0.5, T, N} where N where T}, f::Jacobi{-0.5, 0.5, Float64, 4}, g::Jacobi{-0.5, 0.5, Float64, 5}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{-0.5, 0.5, T, N} where N where T}, f::Jacobi{-0.5, 0.5, Float64, 4}, g::Jacobi{-0.5, 0.5, Float64, 5}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, false)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Open}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{-0.5, 0.5, T, N} where N where T}, f::Jacobi{-0.5, 0.5, Float64, 4}, g::Jacobi{-0.5, 0.5, Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{-0.5, 0.5, T, N} where N where T}, f::Jacobi{-0.5, 0.5, Float64, 4}, g::Jacobi{-0.5, 0.5, Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, false)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Open}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{-0.5, 0.5, T, N} where N where T}, f::Jacobi{-0.5, 0.5, Float64, 5}, g::Jacobi{-0.5, 0.5, Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{-0.5, 0.5, T, N} where N where T}, f::Jacobi{-0.5, 0.5, Float64, 5}, g::Jacobi{-0.5, 0.5, Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, true)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `Interval(f, l, false, true)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.5, -0.5, T, N} where N where T}, f::Jacobi{0.5, -0.5, Float64, 3}, g::Jacobi{0.5, -0.5, Float64, 4}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.5, -0.5, T, N} where N where T}, f::Jacobi{0.5, -0.5, Float64, 3}, g::Jacobi{0.5, -0.5, Float64, 4}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, true)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.5, -0.5, T, N} where N where T}, f::Jacobi{0.5, -0.5, Float64, 3}, g::Jacobi{0.5, -0.5, Float64, 5}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.5, -0.5, T, N} where N where T}, f::Jacobi{0.5, -0.5, Float64, 3}, g::Jacobi{0.5, -0.5, Float64, 5}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, true)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.5, -0.5, T, N} where N where T}, f::Jacobi{0.5, -0.5, Float64, 3}, g::Jacobi{0.5, -0.5, Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.5, -0.5, T, N} where N where T}, f::Jacobi{0.5, -0.5, Float64, 3}, g::Jacobi{0.5, -0.5, Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, true)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.5, -0.5, T, N} where N where T}, f::Jacobi{0.5, -0.5, Float64, 4}, g::Jacobi{0.5, -0.5, Float64, 5}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.5, -0.5, T, N} where N where T}, f::Jacobi{0.5, -0.5, Float64, 4}, g::Jacobi{0.5, -0.5, Float64, 5}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, true)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.5, -0.5, T, N} where N where T}, f::Jacobi{0.5, -0.5, Float64, 4}, g::Jacobi{0.5, -0.5, Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.5, -0.5, T, N} where N where T}, f::Jacobi{0.5, -0.5, Float64, 4}, g::Jacobi{0.5, -0.5, Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, true)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.5, -0.5, T, N} where N where T}, f::Jacobi{0.5, -0.5, Float64, 5}, g::Jacobi{0.5, -0.5, Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.5, -0.5, T, N} where N where T}, f::Jacobi{0.5, -0.5, Float64, 5}, g::Jacobi{0.5, -0.5, Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 3}, g::OrthonormalJacobi{0.5, 0.5, Float64, 4}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 3}, g::OrthonormalJacobi{0.5, 0.5, Float64, 4}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 3}, g::OrthonormalJacobi{0.5, 0.5, Float64, 5}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 3}, g::OrthonormalJacobi{0.5, 0.5, Float64, 5}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 3}, g::OrthonormalJacobi{0.5, 0.5, Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 3}, g::OrthonormalJacobi{0.5, 0.5, Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 4}, g::OrthonormalJacobi{0.5, 0.5, Float64, 5}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 4}, g::OrthonormalJacobi{0.5, 0.5, Float64, 5}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 4}, g::OrthonormalJacobi{0.5, 0.5, Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 4}, g::OrthonormalJacobi{0.5, 0.5, Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 5}, g::OrthonormalJacobi{0.5, 0.5, Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 5}, g::OrthonormalJacobi{0.5, 0.5, Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Legendre}, f::Legendre{Float64, 3}, g::Legendre{Float64, 4}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Legendre}, f::Legendre{Float64, 3}, g::Legendre{Float64, 4}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Legendre}, f::Legendre{Float64, 3}, g::Legendre{Float64, 5}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Legendre}, f::Legendre{Float64, 3}, g::Legendre{Float64, 5}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Legendre}, f::Legendre{Float64, 3}, g::Legendre{Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Legendre}, f::Legendre{Float64, 3}, g::Legendre{Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Legendre}, f::Legendre{Float64, 4}, g::Legendre{Float64, 5}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Legendre}, f::Legendre{Float64, 4}, g::Legendre{Float64, 5}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Legendre}, f::Legendre{Float64, 4}, g::Legendre{Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Legendre}, f::Legendre{Float64, 4}, g::Legendre{Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Legendre}, f::Legendre{Float64, 5}, g::Legendre{Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Legendre}, f::Legendre{Float64, 5}, g::Legendre{Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 3}, g::OrthonormalLegendre{Float64, 4}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 3}, g::OrthonormalLegendre{Float64, 4}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 3}, g::OrthonormalLegendre{Float64, 5}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 3}, g::OrthonormalLegendre{Float64, 5}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 3}, g::OrthonormalLegendre{Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 3}, g::OrthonormalLegendre{Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 4}, g::OrthonormalLegendre{Float64, 5}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 4}, g::OrthonormalLegendre{Float64, 5}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 4}, g::OrthonormalLegendre{Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 4}, g::OrthonormalLegendre{Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 5}, g::OrthonormalLegendre{Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 5}, g::OrthonormalLegendre{Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Gegenbauer{0.5, T, N} where N where T}, f::Gegenbauer{0.5, Float64, 3}, g::Gegenbauer{0.5, Float64, 4}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Gegenbauer{0.5, T, N} where N where T}, f::Gegenbauer{0.5, Float64, 3}, g::Gegenbauer{0.5, Float64, 4}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Gegenbauer{0.5, T, N} where N where T}, f::Gegenbauer{0.5, Float64, 3}, g::Gegenbauer{0.5, Float64, 5}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Gegenbauer{0.5, T, N} where N where T}, f::Gegenbauer{0.5, Float64, 3}, g::Gegenbauer{0.5, Float64, 5}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Gegenbauer{0.5, T, N} where N where T}, f::Gegenbauer{0.5, Float64, 3}, g::Gegenbauer{0.5, Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Gegenbauer{0.5, T, N} where N where T}, f::Gegenbauer{0.5, Float64, 3}, g::Gegenbauer{0.5, Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Gegenbauer{0.5, T, N} where N where T}, f::Gegenbauer{0.5, Float64, 4}, g::Gegenbauer{0.5, Float64, 5}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Gegenbauer{0.5, T, N} where N where T}, f::Gegenbauer{0.5, Float64, 4}, g::Gegenbauer{0.5, Float64, 5}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Gegenbauer{0.5, T, N} where N where T}, f::Gegenbauer{0.5, Float64, 4}, g::Gegenbauer{0.5, Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Gegenbauer{0.5, T, N} where N where T}, f::Gegenbauer{0.5, Float64, 4}, g::Gegenbauer{0.5, Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Gegenbauer{0.5, T, N} where N where T}, f::Gegenbauer{0.5, Float64, 5}, g::Gegenbauer{0.5, Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Gegenbauer{0.5, T, N} where N where T}, f::Gegenbauer{0.5, Float64, 5}, g::Gegenbauer{0.5, Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 3}, g::OrthonormalGegenbauer{0.5, Float64, 4}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 3}, g::OrthonormalGegenbauer{0.5, Float64, 4}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 3}, g::OrthonormalGegenbauer{0.5, Float64, 5}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 3}, g::OrthonormalGegenbauer{0.5, Float64, 5}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 3}, g::OrthonormalGegenbauer{0.5, Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 3}, g::OrthonormalGegenbauer{0.5, Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 4}, g::OrthonormalGegenbauer{0.5, Float64, 5}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 4}, g::OrthonormalGegenbauer{0.5, Float64, 5}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 4}, g::OrthonormalGegenbauer{0.5, Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 4}, g::OrthonormalGegenbauer{0.5, Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 5}, g::OrthonormalGegenbauer{0.5, Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 5}, g::OrthonormalGegenbauer{0.5, Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
Internal error: encountered unexpected error in runtime:
MethodError(f=Core.Compiler.:(==), args=(typeof(Polynomials.:(⟒))(), Tuple), world=0x0000000000001081)
jl_method_error_bare at /workspace/srcdir/src/gf.c:1766
jl_method_error at /workspace/srcdir/src/gf.c:1784
jl_lookup_generic_ at /workspace/srcdir/src/gf.c:2354 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2369
apply_type_tfunc at ./compiler/tfuncs.jl:1178
_jl_invoke at /workspace/srcdir/src/gf.c:2191 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2373
jl_apply at /workspace/srcdir/src/julia.h:1691 [inlined]
do_apply at /workspace/srcdir/src/builtins.c:672
builtin_tfunction at ./compiler/tfuncs.jl:1519
abstract_call_builtin at ./compiler/abstractinterpretation.jl:794
jfptr_abstract_call_builtin_9277.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
_jl_invoke at /workspace/srcdir/src/gf.c:2191 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2373
abstract_call_known at ./compiler/abstractinterpretation.jl:924
abstract_call at ./compiler/abstractinterpretation.jl:1026
abstract_call at ./compiler/abstractinterpretation.jl:1010
abstract_eval_statement at ./compiler/abstractinterpretation.jl:1132
typeinf_local at ./compiler/abstractinterpretation.jl:1386
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1442
_typeinf at ./compiler/typeinfer.jl:212
typeinf at ./compiler/typeinfer.jl:207
typeinf_edge at ./compiler/typeinfer.jl:741
abstract_call_method at ./compiler/abstractinterpretation.jl:466
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:130
abstract_call_known at ./compiler/abstractinterpretation.jl:1003
abstract_call at ./compiler/abstractinterpretation.jl:1026
abstract_call at ./compiler/abstractinterpretation.jl:1010
abstract_eval_statement at ./compiler/abstractinterpretation.jl:1132
typeinf_local at ./compiler/abstractinterpretation.jl:1386
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1442
_typeinf at ./compiler/typeinfer.jl:212
typeinf at ./compiler/typeinfer.jl:207
typeinf_ext at ./compiler/typeinfer.jl:831
typeinf_ext_toplevel at ./compiler/typeinfer.jl:864
typeinf_ext_toplevel at ./compiler/typeinfer.jl:860
jfptr_typeinf_ext_toplevel_12331.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
_jl_invoke at /workspace/srcdir/src/gf.c:2191 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2373
jl_apply at /workspace/srcdir/src/julia.h:1691 [inlined]
jl_type_infer at /workspace/srcdir/src/gf.c:300
jl_generate_fptr at /workspace/srcdir/src/jitlayers.cpp:316
jl_compile_method_internal at /workspace/srcdir/src/gf.c:1924
jl_compile_method_internal at /workspace/srcdir/src/gf.c:2190 [inlined]
_jl_invoke at /workspace/srcdir/src/gf.c:2183 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2373
ComposedFunction at ./operators.jl:919
unknown function (ip: 0x7fc6dbb9bf71)
_jl_invoke at /workspace/srcdir/src/gf.c:2191 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2373
jl_apply at /workspace/srcdir/src/julia.h:1691 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:115
eval_value at /workspace/srcdir/src/interpreter.c:204
eval_stmt_value at /workspace/srcdir/src/interpreter.c:155 [inlined]
eval_body at /workspace/srcdir/src/interpreter.c:561
eval_body at /workspace/srcdir/src/interpreter.c:489
eval_body at /workspace/srcdir/src/interpreter.c:489
jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:669
macro expansion at /home/pkgeval/.julia/packages/SpecialPolynomials/infPj/test/Orthogonal.jl:351 [inlined]
macro expansion at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
top-level scope at /home/pkgeval/.julia/packages/SpecialPolynomials/infPj/test/Orthogonal.jl:328
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:879
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:827
jl_toplevel_eval_in at /workspace/srcdir/src/toplevel.c:931
eval at ./boot.jl:360 [inlined]
include_string at ./loading.jl:1082
_jl_invoke at /workspace/srcdir/src/gf.c:2191 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2373
_include at ./loading.jl:1136
include at ./client.jl:444
_jl_invoke at /workspace/srcdir/src/gf.c:2191 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2373
jl_apply at /workspace/srcdir/src/julia.h:1691 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:115
eval_value at /workspace/srcdir/src/interpreter.c:204
eval_stmt_value at /workspace/srcdir/src/interpreter.c:155 [inlined]
eval_body at /workspace/srcdir/src/interpreter.c:561
eval_body at /workspace/srcdir/src/interpreter.c:489
eval_body at /workspace/srcdir/src/interpreter.c:489
jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:669
macro expansion at /home/pkgeval/.julia/packages/SpecialPolynomials/infPj/test/runtests.jl:7 [inlined]
macro expansion at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
top-level scope at /home/pkgeval/.julia/packages/SpecialPolynomials/infPj/test/runtests.jl:7
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:879
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:827
jl_toplevel_eval_in at /workspace/srcdir/src/toplevel.c:931
eval at ./boot.jl:360 [inlined]
include_string at ./loading.jl:1082
_jl_invoke at /workspace/srcdir/src/gf.c:2191 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2373
_include at ./loading.jl:1136
include at ./client.jl:444
_jl_invoke at /workspace/srcdir/src/gf.c:2191 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2373
jl_apply at /workspace/srcdir/src/julia.h:1691 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:115
eval_value at /workspace/srcdir/src/interpreter.c:204
eval_stmt_value at /workspace/srcdir/src/interpreter.c:155 [inlined]
eval_body at /workspace/srcdir/src/interpreter.c:561
jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:669
top-level scope at none:6
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:879
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:827
jl_toplevel_eval_in at /workspace/srcdir/src/toplevel.c:931
eval at ./boot.jl:360
_jl_invoke at /workspace/srcdir/src/gf.c:2191 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2373
exec_options at ./client.jl:261
_start at ./client.jl:485
jfptr__start_18645.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
_jl_invoke at /workspace/srcdir/src/gf.c:2191 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2373
jl_apply at /workspace/srcdir/src/julia.h:1691 [inlined]
true_main at /workspace/srcdir/src/jlapi.c:553
repl_entrypoint at /workspace/srcdir/src/jlapi.c:672
main at /workspace/srcdir/cli/loader_exe.c:46
__libc_start_main at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)
unknown function (ip: 0x400bae)
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain at Chebyshev.jl:40 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain at Chebyshev.jl:40 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::typeof(one), g::typeof(one); atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::typeof(one), g::typeof(one); atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain at Chebyshev.jl:40 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 1}, g::OrthonormalChebyshev{Float64, 1}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 1}, g::OrthonormalChebyshev{Float64, 1}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain at Chebyshev.jl:40 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 2}, g::OrthonormalChebyshev{Float64, 2}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 2}, g::OrthonormalChebyshev{Float64, 2}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain at Chebyshev.jl:40 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 3}, g::OrthonormalChebyshev{Float64, 3}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 3}, g::OrthonormalChebyshev{Float64, 3}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain at Chebyshev.jl:40 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 4}, g::OrthonormalChebyshev{Float64, 4}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 4}, g::OrthonormalChebyshev{Float64, 4}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain at Chebyshev.jl:40 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 5}, g::OrthonormalChebyshev{Float64, 5}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 5}, g::OrthonormalChebyshev{Float64, 5}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain at Chebyshev.jl:40 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 6}, g::OrthonormalChebyshev{Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 6}, g::OrthonormalChebyshev{Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain at Chebyshev.jl:40 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 7}, g::OrthonormalChebyshev{Float64, 7}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 7}, g::OrthonormalChebyshev{Float64, 7}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain at Chebyshev.jl:40 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 8}, g::OrthonormalChebyshev{Float64, 8}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 8}, g::OrthonormalChebyshev{Float64, 8}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain at Chebyshev.jl:40 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 9}, g::OrthonormalChebyshev{Float64, 9}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 9}, g::OrthonormalChebyshev{Float64, 9}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain at Chebyshev.jl:40 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 10}, g::OrthonormalChebyshev{Float64, 10}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 10}, g::OrthonormalChebyshev{Float64, 10}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain at Chebyshev.jl:40 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 11}, g::OrthonormalChebyshev{Float64, 11}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::OrthonormalChebyshev{Float64, 11}, g::OrthonormalChebyshev{Float64, 11}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{ChebyshevU}, f::typeof(one), g::typeof(one); atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{ChebyshevU}, f::typeof(one), g::typeof(one); atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::typeof(one), g::typeof(one); atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::typeof(one), g::typeof(one); atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 1}, g::OrthonormalJacobi{0.5, 0.5, Float64, 1}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 1}, g::OrthonormalJacobi{0.5, 0.5, Float64, 1}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 2}, g::OrthonormalJacobi{0.5, 0.5, Float64, 2}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 2}, g::OrthonormalJacobi{0.5, 0.5, Float64, 2}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 3}, g::OrthonormalJacobi{0.5, 0.5, Float64, 3}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 3}, g::OrthonormalJacobi{0.5, 0.5, Float64, 3}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 4}, g::OrthonormalJacobi{0.5, 0.5, Float64, 4}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 4}, g::OrthonormalJacobi{0.5, 0.5, Float64, 4}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 5}, g::OrthonormalJacobi{0.5, 0.5, Float64, 5}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 5}, g::OrthonormalJacobi{0.5, 0.5, Float64, 5}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 6}, g::OrthonormalJacobi{0.5, 0.5, Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 6}, g::OrthonormalJacobi{0.5, 0.5, Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 7}, g::OrthonormalJacobi{0.5, 0.5, Float64, 7}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 7}, g::OrthonormalJacobi{0.5, 0.5, Float64, 7}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 8}, g::OrthonormalJacobi{0.5, 0.5, Float64, 8}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 8}, g::OrthonormalJacobi{0.5, 0.5, Float64, 8}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 9}, g::OrthonormalJacobi{0.5, 0.5, Float64, 9}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 9}, g::OrthonormalJacobi{0.5, 0.5, Float64, 9}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 10}, g::OrthonormalJacobi{0.5, 0.5, Float64, 10}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 10}, g::OrthonormalJacobi{0.5, 0.5, Float64, 10}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 11}, g::OrthonormalJacobi{0.5, 0.5, Float64, 11}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::OrthonormalJacobi{0.5, 0.5, Float64, 11}, g::OrthonormalJacobi{0.5, 0.5, Float64, 11}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::typeof(one), g::typeof(one); atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::typeof(one), g::typeof(one); atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 1}, g::OrthonormalLegendre{Float64, 1}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 1}, g::OrthonormalLegendre{Float64, 1}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 2}, g::OrthonormalLegendre{Float64, 2}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 2}, g::OrthonormalLegendre{Float64, 2}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 3}, g::OrthonormalLegendre{Float64, 3}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 3}, g::OrthonormalLegendre{Float64, 3}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 4}, g::OrthonormalLegendre{Float64, 4}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 4}, g::OrthonormalLegendre{Float64, 4}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 5}, g::OrthonormalLegendre{Float64, 5}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 5}, g::OrthonormalLegendre{Float64, 5}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 6}, g::OrthonormalLegendre{Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 6}, g::OrthonormalLegendre{Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 7}, g::OrthonormalLegendre{Float64, 7}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 7}, g::OrthonormalLegendre{Float64, 7}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 8}, g::OrthonormalLegendre{Float64, 8}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 8}, g::OrthonormalLegendre{Float64, 8}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 9}, g::OrthonormalLegendre{Float64, 9}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 9}, g::OrthonormalLegendre{Float64, 9}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 10}, g::OrthonormalLegendre{Float64, 10}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 10}, g::OrthonormalLegendre{Float64, 10}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 11}, g::OrthonormalLegendre{Float64, 11}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::OrthonormalLegendre{Float64, 11}, g::OrthonormalLegendre{Float64, 11}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Gegenbauer{0.5, T, N} where N where T}, f::typeof(one), g::typeof(one); atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Gegenbauer{0.5, T, N} where N where T}, f::typeof(one), g::typeof(one); atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::typeof(one), g::typeof(one); atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::typeof(one), g::typeof(one); atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 1}, g::OrthonormalGegenbauer{0.5, Float64, 1}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 1}, g::OrthonormalGegenbauer{0.5, Float64, 1}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 2}, g::OrthonormalGegenbauer{0.5, Float64, 2}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 2}, g::OrthonormalGegenbauer{0.5, Float64, 2}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 3}, g::OrthonormalGegenbauer{0.5, Float64, 3}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 3}, g::OrthonormalGegenbauer{0.5, Float64, 3}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 4}, g::OrthonormalGegenbauer{0.5, Float64, 4}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 4}, g::OrthonormalGegenbauer{0.5, Float64, 4}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 5}, g::OrthonormalGegenbauer{0.5, Float64, 5}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 5}, g::OrthonormalGegenbauer{0.5, Float64, 5}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 6}, g::OrthonormalGegenbauer{0.5, Float64, 6}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 6}, g::OrthonormalGegenbauer{0.5, Float64, 6}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 7}, g::OrthonormalGegenbauer{0.5, Float64, 7}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 7}, g::OrthonormalGegenbauer{0.5, Float64, 7}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 8}, g::OrthonormalGegenbauer{0.5, Float64, 8}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 8}, g::OrthonormalGegenbauer{0.5, Float64, 8}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 9}, g::OrthonormalGegenbauer{0.5, Float64, 9}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 9}, g::OrthonormalGegenbauer{0.5, Float64, 9}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 10}, g::OrthonormalGegenbauer{0.5, Float64, 10}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 10}, g::OrthonormalGegenbauer{0.5, Float64, 10}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 11}, g::OrthonormalGegenbauer{0.5, Float64, 11}; atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::OrthonormalGegenbauer{0.5, Float64, 11}, g::OrthonormalGegenbauer{0.5, Float64, 11}; atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain at Chebyshev.jl:40 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Chebyshev}, f::var"#f#29", g::typeof(one); atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Chebyshev}, f::var"#f#29", g::typeof(one); atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, false)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Open}(f, l)` instead.
│   caller = domain at Chebyshev.jl:40 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Chebyshev.jl:40
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::var"#f#29", g::typeof(one); atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalChebyshev}, f::var"#f#29", g::typeof(one); atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{ChebyshevU}, f::var"#f#29", g::typeof(one); atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{ChebyshevU}, f::var"#f#29", g::typeof(one); atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.5, 0.5, T, N} where N where T}, f::var"#f#29", g::typeof(one); atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.5, 0.5, T, N} where N where T}, f::var"#f#29", g::typeof(one); atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.25, 0.75, T, N} where N where T}, f::var"#f#29", g::typeof(one); atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.25, 0.75, T, N} where N where T}, f::var"#f#29", g::typeof(one); atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, false)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Open}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{-0.5, 0.5, T, N} where N where T}, f::var"#f#29", g::typeof(one); atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{-0.5, 0.5, T, N} where N where T}, f::var"#f#29", g::typeof(one); atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, false, true)` is deprecated, use `Interval{T,Intervals.Open,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.5, -0.5, T, N} where N where T}, f::var"#f#29", g::typeof(one); atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Jacobi{0.5, -0.5, T, N} where N where T}, f::var"#f#29", g::typeof(one); atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `Interval(f, l, true, true)` is deprecated, use `Interval{T,Intervals.Closed,Intervals.Closed}(f, l)` instead.
│   caller = domain at Jacobi.jl:31 [inlined]
└ @ Core ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/Jacobi.jl:31
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::var"#f#29", g::typeof(one); atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalJacobi{0.5, 0.5, T, N} where N where T}, f::var"#f#29", g::typeof(one); atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Legendre}, f::var"#f#29", g::typeof(one); atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Legendre}, f::var"#f#29", g::typeof(one); atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::var"#f#29", g::typeof(one); atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalLegendre}, f::var"#f#29", g::typeof(one); atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Gegenbauer{0.5, T, N} where N where T}, f::var"#f#29", g::typeof(one); atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{Gegenbauer{0.5, T, N} where N where T}, f::var"#f#29", g::typeof(one); atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::var"#f#29", g::typeof(one); atol::Float64) at orthogonal.jl:290
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:290
┌ Warning: `inclusivity(interval)` is deprecated and has no direct replacement. See `bounds_types(interval)` for similar functionality.
│   caller = innerproduct(P::Type{OrthonormalGegenbauer{0.5, T, N} where N where T}, f::var"#f#29", g::typeof(one); atol::Float64) at orthogonal.jl:293
└ @ SpecialPolynomials ~/.julia/packages/SpecialPolynomials/infPj/src/Orthogonal/orthogonal.jl:293
Test Summary: | Pass  Total
Orthogonal    | 6268   6268
Test Summary:                  | Pass  Total
Orthogonal compare with tables |  649    649
Test Summary: | Pass  Total
Lagrange      |   15     15
Test Summary: | Pass  Total
Newton        |   11     11
Test Summary: | Pass  Total
Bernstein     |  168    168
     Testing SpecialPolynomials tests passed 

PkgEval succeeded


################################################################################
# PkgEval teardown: 2020-10-29T04:21:41.144
CPU usage: 782.54s (767.99s user, 16.72s kernel)

Network usage:
- eth0: 2.366 MiB received, 139.421 KiB sent

Raw statistics: {"blkio_stats":{"io_queue_recursive":[],"io_serviced_recursive":[{"major":259,"value":0,"op":"Read","minor":0},{"major":259,"value":17,"op":"Write","minor":0},{"major":259,"value":0,"op":"Sync","minor":0},{"major":259,"value":17,"op":"Async","minor":0},{"major":259,"value":17,"op":"Total","minor":0},{"major":253,"value":0,"op":"Read","minor":2},{"major":253,"value":17,"op":"Write","minor":2},{"major":253,"value":0,"op":"Sync","minor":2},{"major":253,"value":17,"op":"Async","minor":2},{"major":253,"value":17,"op":"Total","minor":2}],"io_time_recursive":[],"sectors_recursive":[],"io_service_bytes_recursive":[{"major":259,"value":0,"op":"Read","minor":0},{"major":259,"value":102400,"op":"Write","minor":0},{"major":259,"value":0,"op":"Sync","minor":0},{"major":259,"value":102400,"op":"Async","minor":0},{"major":259,"value":102400,"op":"Total","minor":0},{"major":253,"value":0,"op":"Read","minor":2},{"major":253,"value":102400,"op":"Write","minor":2},{"major":253,"value":0,"op":"Sync","minor":2},{"major":253,"value":102400,"op":"Async","minor":2},{"major":253,"value":102400,"op":"Total","minor":2}],"io_wait_time_recursive":[],"io_merged_recursive":[],"io_service_time_recursive":[]},"memory_stats":{"usage":289181696,"max_usage":1265098752,"stats":{"hierarchical_memory_limit":9223372036854771712,"pgmajfault":0,"total_rss":251650048,"inactive_file":8192,"inactive_anon":11001856,"total_pgfault":4591722,"total_cache":26157056,"total_rss_huge":0,"total_active_anon":266792960,"total_pgmajfault":0,"pgpgin":2707662,"rss_huge":0,"mapped_file":0,"total_inactive_file":8192,"dirty":0,"total_unevictable":0,"total_dirty":0,"writeback":0,"pgpgout":2639838,"hierarchical_memsw_limit":0,"cache":26157056,"active_file":0,"pgfault":4591722,"total_mapped_file":0,"total_pgpgout":2639838,"total_writeback":0,"rss":251650048,"unevictable":0,"total_inactive_anon":11001856,"total_pgpgin":2707662,"active_anon":266792960,"total_active_file":0},"limit":540972998656},"name":"/SpecialPolynomials-85Pv4qia","networks":{"eth0":{"rx_bytes":2480611,"rx_packets":2087,"tx_packets":987,"tx_bytes":142767,"tx_dropped":0,"rx_dropped":28,"tx_errors":0,"rx_errors":0}},"id":"94fd45f9e36e23e62128208b5c8f2fdf67bd38c00934354e4717da3453b6a7ef","preread":"0001-01-01T00:00:00Z","storage_stats":{},"precpu_stats":{"throttling_data":{"throttled_periods":0,"throttled_time":0,"periods":0},"cpu_usage":{"usage_in_usermode":0,"usage_in_kernelmode":0,"total_usage":0}},"pids_stats":{"current":38},"num_procs":0,"cpu_stats":{"throttling_data":{"throttled_periods":0,"throttled_time":0,"periods":0},"system_cpu_usage":101754699240000000,"online_cpus":128,"cpu_usage":{"usage_in_usermode":767990000000,"usage_in_kernelmode":16720000000,"total_usage":782544929431,"percpu_usage":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,782544923451,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5980,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},"read":"2020-10-29T04:21:41.162075108Z"}