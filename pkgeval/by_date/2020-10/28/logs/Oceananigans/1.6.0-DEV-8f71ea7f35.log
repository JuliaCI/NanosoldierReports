################################################################################
# PkgEval set-up: 2020-10-29T04:22:20.245
#

Julia Version 1.6.0-DEV.1352
Commit 8f71ea7f35 (2020-10-28 02:10 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807



################################################################################
# Installation: 2020-10-29T04:22:21.774
#

   Resolving package versions...
   Installed SeawaterPolynomials ────────── v0.2.0
   Installed OrderedCollections ─────────── v1.3.1
   Installed Parsers ────────────────────── v1.0.11
   Installed NCDatasets ─────────────────── v0.10.4
   Installed NNlib ──────────────────────── v0.7.5
   Installed Cassette ───────────────────── v0.3.3
   Installed Crayons ────────────────────── v4.0.4
   Installed CompilerSupportLibraries_jll ─ v0.3.4+0
   Installed TranscodingStreams ─────────── v0.9.5
   Installed Zlib_jll ───────────────────── v1.2.11+18
   Installed CEnum ──────────────────────── v0.4.1
   Installed JLD2 ───────────────────────── v0.2.4
   Installed CFTime ─────────────────────── v0.1.0
   Installed TimerOutputs ───────────────── v0.5.6
   Installed Adapt ──────────────────────── v2.3.0
   Installed URIParser ──────────────────── v0.4.1
   Installed CondaBinDeps ───────────────── v0.2.0
   Installed ExprTools ──────────────────── v0.1.3
   Installed OpenSpecFun_jll ────────────── v0.5.3+4
   Installed BinDeps ────────────────────── v1.0.1
   Installed KernelAbstractions ─────────── v0.4.5
   Installed Compat ─────────────────────── v3.23.0
   Installed Glob ───────────────────────── v1.3.0
   Installed MacroTools ─────────────────── v0.5.6
   Installed LLVM ───────────────────────── v2.0.0
   Installed Reexport ───────────────────── v0.2.0
   Installed MKL_jll ────────────────────── v2020.2.254+0
   Installed FFTW ───────────────────────── v1.2.4
   Installed GPUArrays ──────────────────── v5.2.1
   Installed BinaryProvider ─────────────── v0.5.10
   Installed VersionParsing ─────────────── v1.2.0
   Installed SafeTestsets ───────────────── v0.0.1
   Installed AbstractFFTs ───────────────── v0.5.0
   Installed JSON ───────────────────────── v0.21.1
   Installed CodecZlib ──────────────────── v0.7.0
   Installed Oceananigans ───────────────── v0.44.0
   Installed SpecialFunctions ───────────── v0.10.3
   Installed Conda ──────────────────────── v1.4.1
   Installed OffsetArrays ───────────────── v1.3.1
   Installed DataStructures ─────────────── v0.18.8
   Installed StaticArrays ───────────────── v0.12.5
   Installed GPUCompiler ────────────────── v0.6.1
   Installed Requires ───────────────────── v1.1.0
   Installed CUDA ───────────────────────── v1.3.3
   Installed JLLWrappers ────────────────── v1.1.3
   Installed IntelOpenMP_jll ────────────── v2018.0.3+0
   Installed FFTW_jll ───────────────────── v3.3.9+6
Updating `~/.julia/environments/v1.6/Project.toml`
  [9e8cae18] + Oceananigans v0.44.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [621f4979] + AbstractFFTs v0.5.0
  [79e6a3ab] + Adapt v2.3.0
  [9e28174c] + BinDeps v1.0.1
  [b99e7846] + BinaryProvider v0.5.10
  [fa961155] + CEnum v0.4.1
  [179af706] + CFTime v0.1.0
  [052768ef] + CUDA v1.3.3
  [7057c7e9] + Cassette v0.3.3
  [944b1d66] + CodecZlib v0.7.0
  [34da2185] + Compat v3.23.0
  [8f4d0f93] + Conda v1.4.1
  [a9693cdc] + CondaBinDeps v0.2.0
  [a8cc5b0e] + Crayons v4.0.4
  [864edb3b] + DataStructures v0.18.8
  [e2ba6199] + ExprTools v0.1.3
  [7a1cc6ca] + FFTW v1.2.4
  [0c68f7d7] + GPUArrays v5.2.1
  [61eb1bfa] + GPUCompiler v0.6.1
  [c27321d9] + Glob v1.3.0
  [033835bb] + JLD2 v0.2.4
  [692b3bcd] + JLLWrappers v1.1.3
  [682c06a0] + JSON v0.21.1
  [63c18a36] + KernelAbstractions v0.4.5
  [929cbde3] + LLVM v2.0.0
  [1914dd2f] + MacroTools v0.5.6
  [85f8d34a] + NCDatasets v0.10.4
  [872c559c] + NNlib v0.7.5
  [9e8cae18] + Oceananigans v0.44.0
  [6fe1bfb0] + OffsetArrays v1.3.1
  [bac558e1] + OrderedCollections v1.3.1
  [69de0a69] + Parsers v1.0.11
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v1.1.0
  [1bc83da4] + SafeTestsets v0.0.1
  [d496a93d] + SeawaterPolynomials v0.2.0
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.12.5
  [a759f4b9] + TimerOutputs v0.5.6
  [3bb67fe8] + TranscodingStreams v0.9.5
  [30578b45] + URIParser v0.4.1
  [81def892] + VersionParsing v1.2.0
  [e66e0078] + CompilerSupportLibraries_jll v0.3.4+0
  [f5851436] + FFTW_jll v3.3.9+6
  [1d5cc7b8] + IntelOpenMP_jll v2018.0.3+0
  [856f044c] + MKL_jll v2020.2.254+0
  [efe28fd5] + OpenSpecFun_jll v0.5.3+4
  [83775a58] + Zlib_jll v1.2.11+18
  [0dad84c5] + ArgTools
  [56f22d72] + Artifacts
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [f43a241f] + Downloads
  [b77e0a4c] + InteractiveUtils
  [b27032c2] + LibCURL
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
  [deac9b47] + LibCURL_jll
  [14a3606d] + MozillaCACerts_jll
    Building Conda ─────→ `~/.julia/scratchspaces/44cfe95a-1eb2-52ea-b672-e2afdf69b78f/7a58bb32ce5d85f8bf7559aa7c2842f9aecf52fc/build.log`
    Building NCDatasets → `~/.julia/scratchspaces/44cfe95a-1eb2-52ea-b672-e2afdf69b78f/31ce6711bc8fa173d97c59066e78caa2846ed200/build.log`
    Building FFTW ──────→ `~/.julia/scratchspaces/44cfe95a-1eb2-52ea-b672-e2afdf69b78f/8b7c16b56936047ca41bf25effa137ae0b381ae8/build.log`


################################################################################
# Testing: 2020-10-29T04:23:33.733
#


     Testing Oceananigans
Status `/tmp/jl_ez9rg5/Project.toml`
  [79e6a3ab] Adapt v2.3.0
  [6e4b80f9] BenchmarkTools v0.5.0
  [052768ef] CUDA v1.3.3
  [a2441757] Coverage v1.1.1
  [a8cc5b0e] Crayons v4.0.4
  [7a1cc6ca] FFTW v1.2.4
  [c27321d9] Glob v1.3.0
  [033835bb] JLD2 v0.2.4
  [63c18a36] KernelAbstractions v0.4.5
  [85f8d34a] NCDatasets v0.10.4
  [9e8cae18] Oceananigans v0.44.0
  [6fe1bfb0] OffsetArrays v1.3.1
  [bac558e1] OrderedCollections v1.3.1
  [91a5bcdd] Plots v1.7.3
  [1bc83da4] SafeTestsets v0.0.1
  [d496a93d] SeawaterPolynomials v0.2.0
  [90137ffa] StaticArrays v0.12.5
  [a759f4b9] TimerOutputs v0.5.6
  [bdfc003b] TimesDates v0.2.6
  [ade2ca70] Dates
  [b77e0a4c] InteractiveUtils
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [44cfe95a] Pkg
  [de0858da] Printf
  [9a3f8284] Random
  [10745b16] Statistics
  [8dfed614] Test
Status `/tmp/jl_ez9rg5/Manifest.toml`
  [621f4979] AbstractFFTs v0.5.0
  [79e6a3ab] Adapt v2.3.0
  [6e4b80f9] BenchmarkTools v0.5.0
  [9e28174c] BinDeps v1.0.1
  [b99e7846] BinaryProvider v0.5.10
  [fa961155] CEnum v0.4.1
  [179af706] CFTime v0.1.0
  [052768ef] CUDA v1.3.3
  [7057c7e9] Cassette v0.3.3
  [944b1d66] CodecZlib v0.7.0
  [35d6a980] ColorSchemes v3.10.1
  [3da002f7] ColorTypes v0.10.9
  [5ae59095] Colors v0.12.4
  [34da2185] Compat v3.23.0
  [a216cea6] CompoundPeriods v0.4.0
  [8f4d0f93] Conda v1.4.1
  [a9693cdc] CondaBinDeps v0.2.0
  [d38c429a] Contour v0.5.5
  [a2441757] Coverage v1.1.1
  [c36e975a] CoverageTools v1.1.0
  [a8cc5b0e] Crayons v4.0.4
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.18.8
  [e2d170a0] DataValueInterfaces v1.0.0
  [e2ba6199] ExprTools v0.1.3
  [8f5d6c58] EzXML v1.1.0
  [c87230d0] FFMPEG v0.4.0
  [7a1cc6ca] FFTW v1.2.4
  [53c48c17] FixedPointNumbers v0.8.4
  [59287772] Formatting v0.4.1
  [0c68f7d7] GPUArrays v5.2.1
  [61eb1bfa] GPUCompiler v0.6.1
  [28b8d3ca] GR v0.52.0
  [5c1252a2] GeometryBasics v0.3.3
  [4d00f742] GeometryTypes v0.8.3
  [c27321d9] Glob v1.3.0
  [42e2da0e] Grisu v1.0.0
  [cd3eb016] HTTP v0.8.19
  [83e8ac13] IniFile v0.5.0
  [c8e1da08] IterTools v1.3.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [033835bb] JLD2 v0.2.4
  [692b3bcd] JLLWrappers v1.1.3
  [682c06a0] JSON v0.21.1
  [63c18a36] KernelAbstractions v0.4.5
  [929cbde3] LLVM v2.0.0
  [b964fa9f] LaTeXStrings v1.2.0
  [23fbe1c1] Latexify v0.14.1
  [1914dd2f] MacroTools v0.5.6
  [739be429] MbedTLS v1.0.3
  [442fdcdd] Measures v0.3.1
  [e1d29d7a] Missings v0.4.4
  [78c3b35d] Mocking v0.7.1
  [85f8d34a] NCDatasets v0.10.4
  [872c559c] NNlib v0.7.5
  [77ba4419] NaNMath v0.3.4
  [9e8cae18] Oceananigans v0.44.0
  [6fe1bfb0] OffsetArrays v1.3.1
  [bac558e1] OrderedCollections v1.3.1
  [69de0a69] Parsers v1.0.11
  [ccf2f8ad] PlotThemes v2.0.0
  [995b91a9] PlotUtils v1.0.7
  [91a5bcdd] Plots v1.7.3
  [3cdcf5f2] RecipesBase v1.1.0
  [01d81517] RecipesPipeline v0.1.13
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.1.0
  [1bc83da4] SafeTestsets v0.0.1
  [6c6a2e73] Scratch v1.0.3
  [d496a93d] SeawaterPolynomials v0.2.0
  [992d4aef] Showoff v0.3.2
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.5
  [2913bbd2] StatsBase v0.33.2
  [09ab397b] StructArrays v0.4.4
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.1.0
  [f269a46b] TimeZones v1.4.0
  [a759f4b9] TimerOutputs v0.5.6
  [bdfc003b] TimesDates v0.2.6
  [3bb67fe8] TranscodingStreams v0.9.5
  [30578b45] URIParser v0.4.1
  [81def892] VersionParsing v1.2.0
  [6e34b625] Bzip2_jll v1.0.6+5
  [e66e0078] CompilerSupportLibraries_jll v0.3.4+0
  [5ae413db] EarCut_jll v2.1.5+0
  [b22a6f82] FFMPEG_jll v4.3.1+4
  [f5851436] FFTW_jll v3.3.9+6
  [d7e528f0] FreeType2_jll v2.10.1+5
  [559328eb] FriBidi_jll v1.0.5+6
  [1d5cc7b8] IntelOpenMP_jll v2018.0.3+0
  [c1c5ebd0] LAME_jll v3.100.0+3
  [dd192d2f] LibVPX_jll v1.9.0+1
  [94ce4f54] Libiconv_jll v1.16.0+7
  [856f044c] MKL_jll v2020.2.254+0
  [c8ffd9c3] MbedTLS_jll v2.16.8+0
  [e7412a2a] Ogg_jll v1.3.4+2
  [458c3c95] OpenSSL_jll v1.1.1+6
  [efe28fd5] OpenSpecFun_jll v0.5.3+4
  [91d4177d] Opus_jll v1.3.1+3
  [02c8fc9c] XML2_jll v2.9.10+3
  [83775a58] Zlib_jll v1.2.11+18
  [0ac62f75] libass_jll v0.14.0+4
  [f638f0a6] libfdk_aac_jll v0.1.6+4
  [f27f6e37] libvorbis_jll v1.3.6+6
  [1270edf5] x264_jll v2020.7.14+2
  [dfaa095f] x265_jll v3.0.0+3
  [0dad84c5] ArgTools
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [f43a241f] Downloads
  [b77e0a4c] InteractiveUtils
  [b27032c2] LibCURL
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
  [deac9b47] LibCURL_jll
  [14a3606d] MozillaCACerts_jll
     Testing Running tests...
[2020/10/29 04:26:44.665] INFO  Testing grids...
[2020/10/29 04:26:45.154] INFO    Testing grid utilities...
[2020/10/29 04:26:48.236] INFO    Testing regular Cartesian grid...
[2020/10/29 04:26:48.236] INFO      Testing grid initialization...
[2020/10/29 04:26:52.509] INFO      Testing grid constructor errors...
[2020/10/29 04:26:58.481] INFO      Testing construction of grids with Flat dimensions...
RegularCartesianGrid{Float64, Periodic, Periodic, Periodic}
                   domain: x ∈ [0.0, 1.0], y ∈ [-3.141592653589793, 3.141592653589793], z ∈ [1.1102230246251526e-17, 6.283185307179586]
                 topology: (Periodic, Periodic, Periodic)
  resolution (Nx, Ny, Nz): (3, 7, 9)
   halo size (Hx, Hy, Hz): (1, 1, 1)
grid spacing (Δx, Δy, Δz): (0.3333333333333333, 0.8975979010256552, 0.6981317007977318)
[2020/10/29 04:27:01.806] INFO    Testing vertically stretched Cartesian grid...
[2020/10/29 04:27:01.806] INFO      Testing grid initialization...
[2020/10/29 04:27:13.831] INFO  Testing operators...
[2020/10/29 04:27:13.831] INFO    Testing function differentiation...
[2020/10/29 04:27:14.285] INFO    Testing function interpolation...
[2020/10/29 04:27:14.449] INFO    Testing 2D operators...
2D operators: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_operators.jl:70
  Got exception outside of a @test
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(32, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(2, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(32, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(2, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(32, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(2, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_operators.jl:84 [inlined]
    [5] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_operators.jl:71 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_operators.jl:58
    [9] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [10] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/runtests.jl:81 [inlined]
   [11] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [12] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/runtests.jl:80 [inlined]
   [13] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [14] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/runtests.jl:78
   [15] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [16] top-level scope
      @ none:6
   [17] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [18] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [19] _start()
      @ Base ./client.jl:485
[2020/10/29 04:27:34.576] INFO  Testing boundary conditions...
[2020/10/29 04:27:34.577] INFO    Testing boundary condition instantiation...
[2020/10/29 04:27:35.756] INFO    Testing field and coordinate boundary conditions...
[2020/10/29 04:27:39.399] INFO  Testing fields...
[2020/10/29 04:27:39.399] INFO    Testing field initialization...
[2020/10/29 04:27:44.824] INFO    Testing field setting...
[2020/10/29 04:28:08.436] INFO    Testing field utils...
[2020/10/29 04:28:08.615] INFO  Testing averaged fields...
[2020/10/29 04:28:08.625] INFO    Testing AveragedFields [CPU]
Averaged fields [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_averaged_field.jl:10
  Got exception outside of a @test
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(2, 2)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(2, 2)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(2, 2)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_averaged_field.jl:30 [inlined]
    [6] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [7] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_averaged_field.jl:11 [inlined]
    [8] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [9] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_averaged_field.jl:7
   [10] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [11] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/runtests.jl:84 [inlined]
   [12] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [13] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/runtests.jl:80 [inlined]
   [14] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [15] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/runtests.jl:78
   [16] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [17] top-level scope
      @ none:6
   [18] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [19] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [20] _start()
      @ Base ./client.jl:485
[2020/10/29 04:28:11.068] INFO    Testing conditional computation of AveragedFields [CPU]
[2020/10/29 04:28:17.566] INFO  Testing halo regions...
[2020/10/29 04:28:17.566] INFO    Testing initializing halo regions...
[2020/10/29 04:28:21.414] INFO    Testing filling halo regions...
Filling halo regions: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60
  Test threw exception
  Expression: halo_regions_correctly_filled(arch, FT, N...)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 8)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 8)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 8)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] halo_regions_correctly_filled(arch::CPU, FT::Type, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:30
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:58 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:42
Filling halo regions: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60
  Test threw exception
  Expression: halo_regions_correctly_filled(arch, FT, N...)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 8)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 8)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 8)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] halo_regions_correctly_filled(arch::CPU, FT::Type, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:30
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:58 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:42
Filling halo regions: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60
  Test threw exception
  Expression: halo_regions_correctly_filled(arch, FT, N...)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(10, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(10, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(10, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] halo_regions_correctly_filled(arch::CPU, FT::Type, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:30
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:58 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:42
Filling halo regions: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60
  Test threw exception
  Expression: halo_regions_correctly_filled(arch, FT, N...)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 8)}, KernelAbstractions.NDIteration.StaticSize{(1, 8)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 8)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 8)}, KernelAbstractions.NDIteration.StaticSize{(1, 8)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 8)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 8)}, KernelAbstractions.NDIteration.StaticSize{(1, 8)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 8)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] halo_regions_correctly_filled(arch::CPU, FT::Type, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:30
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:58 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:42
Filling halo regions: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60
  Test threw exception
  Expression: halo_regions_correctly_filled(arch, FT, N...)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 9)}, KernelAbstractions.NDIteration.StaticSize{(1, 9)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 9)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 9)}, KernelAbstractions.NDIteration.StaticSize{(1, 9)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 9)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 9)}, KernelAbstractions.NDIteration.StaticSize{(1, 9)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 9)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] halo_regions_correctly_filled(arch::CPU, FT::Type, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:30
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:58 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:42
Filling halo regions: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60
  Test threw exception
  Expression: halo_regions_correctly_filled(arch, FT, N...)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 8)}, KernelAbstractions.NDIteration.StaticSize{(8, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(8, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 8)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 8)}, KernelAbstractions.NDIteration.StaticSize{(8, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(8, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 8)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 8)}, KernelAbstractions.NDIteration.StaticSize{(8, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(8, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 8)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] halo_regions_correctly_filled(arch::CPU, FT::Type, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:30
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:58 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:42
Filling halo regions: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60
  Test threw exception
  Expression: halo_regions_correctly_filled(arch, FT, N...)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 5)}, KernelAbstractions.NDIteration.StaticSize{(5, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(5, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 5)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 5)}, KernelAbstractions.NDIteration.StaticSize{(5, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(5, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 5)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 5)}, KernelAbstractions.NDIteration.StaticSize{(5, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(5, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 5)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] halo_regions_correctly_filled(arch::CPU, FT::Type, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:30
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:58 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:42
Filling halo regions: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60
  Test threw exception
  Expression: halo_regions_correctly_filled(arch, FT, N...)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 8)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 8)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 8)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] halo_regions_correctly_filled(arch::CPU, FT::Type, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:30
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:58 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:42
Filling halo regions: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60
  Test threw exception
  Expression: halo_regions_correctly_filled(arch, FT, N...)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(5, 9)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(5, 9)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(5, 9)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] halo_regions_correctly_filled(arch::CPU, FT::Type, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:30
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:58 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:42
Filling halo regions: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60
  Test threw exception
  Expression: halo_regions_correctly_filled(arch, FT, N...)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}})
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] halo_regions_correctly_filled(arch::CPU, FT::Type, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:30
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:58 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:42
Filling halo regions: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60
  Test threw exception
  Expression: halo_regions_correctly_filled(arch, FT, N...)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 8)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 8)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 8)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] halo_regions_correctly_filled(arch::CPU, FT::Type, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:30
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:58 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:42
Filling halo regions: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60
  Test threw exception
  Expression: halo_regions_correctly_filled(arch, FT, N...)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 8)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 8)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 8)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] halo_regions_correctly_filled(arch::CPU, FT::Type, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:30
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:58 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:42
Filling halo regions: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60
  Test threw exception
  Expression: halo_regions_correctly_filled(arch, FT, N...)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(10, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(10, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(10, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] halo_regions_correctly_filled(arch::CPU, FT::Type, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:30
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:58 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:42
Filling halo regions: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60
  Test threw exception
  Expression: halo_regions_correctly_filled(arch, FT, N...)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 8)}, KernelAbstractions.NDIteration.StaticSize{(1, 8)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 8)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 8)}, KernelAbstractions.NDIteration.StaticSize{(1, 8)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 8)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 8)}, KernelAbstractions.NDIteration.StaticSize{(1, 8)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 8)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] halo_regions_correctly_filled(arch::CPU, FT::Type, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:30
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:58 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:42
Filling halo regions: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60
  Test threw exception
  Expression: halo_regions_correctly_filled(arch, FT, N...)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 9)}, KernelAbstractions.NDIteration.StaticSize{(1, 9)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 9)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 9)}, KernelAbstractions.NDIteration.StaticSize{(1, 9)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 9)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 9)}, KernelAbstractions.NDIteration.StaticSize{(1, 9)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 9)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] halo_regions_correctly_filled(arch::CPU, FT::Type, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:30
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:58 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:42
Filling halo regions: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60
  Test threw exception
  Expression: halo_regions_correctly_filled(arch, FT, N...)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 8)}, KernelAbstractions.NDIteration.StaticSize{(8, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(8, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 8)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 8)}, KernelAbstractions.NDIteration.StaticSize{(8, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(8, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 8)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 8)}, KernelAbstractions.NDIteration.StaticSize{(8, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(8, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 8)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] halo_regions_correctly_filled(arch::CPU, FT::Type, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:30
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:58 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:42
Filling halo regions: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60
  Test threw exception
  Expression: halo_regions_correctly_filled(arch, FT, N...)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 5)}, KernelAbstractions.NDIteration.StaticSize{(5, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(5, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 5)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 5)}, KernelAbstractions.NDIteration.StaticSize{(5, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(5, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 5)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 5)}, KernelAbstractions.NDIteration.StaticSize{(5, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(5, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 5)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] halo_regions_correctly_filled(arch::CPU, FT::Type, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:30
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:58 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:42
Filling halo regions: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60
  Test threw exception
  Expression: halo_regions_correctly_filled(arch, FT, N...)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 8)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 8)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 8)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] halo_regions_correctly_filled(arch::CPU, FT::Type, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:30
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:58 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:42
Filling halo regions: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60
  Test threw exception
  Expression: halo_regions_correctly_filled(arch, FT, N...)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(5, 9)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(5, 9)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(5, 9)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] halo_regions_correctly_filled(arch::CPU, FT::Type, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:30
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:58 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:42
Filling halo regions: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60
  Test threw exception
  Expression: halo_regions_correctly_filled(arch, FT, N...)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] halo_regions_correctly_filled(arch::CPU, FT::Type, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:30
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:60 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:58 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_halo_regions.jl:42
[2020/10/29 04:28:33.900] INFO  Testing Solvers...
Batched tridiagonal solver [CPU()]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:268
  Test threw exception
  Expression: can_solve_single_tridiagonal_system(arch, Nz)
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] wait
      @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
    [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
    [4] solve_batched_tridiagonal_system!(ϕ::Array{Float64, 3}, arch::CPU, solver::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing})
      @ Oceananigans.Solvers ~/.julia/packages/Oceananigans/IbUoB/src/Solvers/batched_tridiagonal_solver.jl:64
    [5] can_solve_single_tridiagonal_system(arch::CPU, N::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:24
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:268 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:267 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:263
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Batched tridiagonal solver [CPU()]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:269
  Test threw exception
  Expression: can_solve_single_tridiagonal_system_with_functions(arch, Nz)
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] wait
      @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
    [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
    [4] solve_batched_tridiagonal_system!(ϕ::Array{Float64, 3}, arch::CPU, solver::BatchedTridiagonalSolver{Vector{Float64}, var"#b#25", Vector{Float64}, var"#f#26", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing})
      @ Oceananigans.Solvers ~/.julia/packages/Oceananigans/IbUoB/src/Solvers/batched_tridiagonal_solver.jl:64
    [5] can_solve_single_tridiagonal_system_with_functions(arch::CPU, N::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:54
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:269 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:267 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:263
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#25", Vector{Float64}, var"#f#26", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#25", Vector{Float64}, var"#f#26", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#25", Vector{Float64}, var"#f#26", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Batched tridiagonal solver [CPU()]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:268
  Test threw exception
  Expression: can_solve_single_tridiagonal_system(arch, Nz)
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] wait
      @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
    [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
    [4] solve_batched_tridiagonal_system!(ϕ::Array{Float64, 3}, arch::CPU, solver::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing})
      @ Oceananigans.Solvers ~/.julia/packages/Oceananigans/IbUoB/src/Solvers/batched_tridiagonal_solver.jl:64
    [5] can_solve_single_tridiagonal_system(arch::CPU, N::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:24
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:268 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:267 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:263
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Batched tridiagonal solver [CPU()]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:269
  Test threw exception
  Expression: can_solve_single_tridiagonal_system_with_functions(arch, Nz)
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] wait
      @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
    [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
    [4] solve_batched_tridiagonal_system!(ϕ::Array{Float64, 3}, arch::CPU, solver::BatchedTridiagonalSolver{Vector{Float64}, var"#b#25", Vector{Float64}, var"#f#26", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing})
      @ Oceananigans.Solvers ~/.julia/packages/Oceananigans/IbUoB/src/Solvers/batched_tridiagonal_solver.jl:64
    [5] can_solve_single_tridiagonal_system_with_functions(arch::CPU, N::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:54
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:269 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:267 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:263
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#25", Vector{Float64}, var"#f#26", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#25", Vector{Float64}, var"#f#26", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#25", Vector{Float64}, var"#f#26", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Batched tridiagonal solver [CPU()]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:268
  Test threw exception
  Expression: can_solve_single_tridiagonal_system(arch, Nz)
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] wait
      @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
    [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
    [4] solve_batched_tridiagonal_system!(ϕ::Array{Float64, 3}, arch::CPU, solver::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing})
      @ Oceananigans.Solvers ~/.julia/packages/Oceananigans/IbUoB/src/Solvers/batched_tridiagonal_solver.jl:64
    [5] can_solve_single_tridiagonal_system(arch::CPU, N::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:24
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:268 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:267 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:263
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Batched tridiagonal solver [CPU()]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:269
  Test threw exception
  Expression: can_solve_single_tridiagonal_system_with_functions(arch, Nz)
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] wait
      @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
    [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
    [4] solve_batched_tridiagonal_system!(ϕ::Array{Float64, 3}, arch::CPU, solver::BatchedTridiagonalSolver{Vector{Float64}, var"#b#25", Vector{Float64}, var"#f#26", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing})
      @ Oceananigans.Solvers ~/.julia/packages/Oceananigans/IbUoB/src/Solvers/batched_tridiagonal_solver.jl:64
    [5] can_solve_single_tridiagonal_system_with_functions(arch::CPU, N::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:54
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:269 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:267 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:263
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#25", Vector{Float64}, var"#f#26", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#25", Vector{Float64}, var"#f#26", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#25", Vector{Float64}, var"#f#26", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Batched tridiagonal solver [CPU()]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:273
  Test threw exception
  Expression: can_solve_batched_tridiagonal_system_with_3D_RHS(arch, Nx, Ny, Nz)
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] wait
      @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
    [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
    [4] solve_batched_tridiagonal_system!(ϕ::Array{Float64, 3}, arch::CPU, solver::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing})
      @ Oceananigans.Solvers ~/.julia/packages/Oceananigans/IbUoB/src/Solvers/batched_tridiagonal_solver.jl:64
    [5] can_solve_batched_tridiagonal_system_with_3D_RHS(arch::CPU, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:83
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:273 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:267 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:263
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(3, 5)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(3, 5)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(3, 5)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Batched tridiagonal solver [CPU()]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:274
  Test threw exception
  Expression: can_solve_batched_tridiagonal_system_with_3D_functions(arch, Nx, Ny, Nz)
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] wait
      @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
    [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
    [4] solve_batched_tridiagonal_system!(ϕ::Array{Float64, 3}, arch::CPU, solver::BatchedTridiagonalSolver{Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing})
      @ Oceananigans.Solvers ~/.julia/packages/Oceananigans/IbUoB/src/Solvers/batched_tridiagonal_solver.jl:64
    [5] can_solve_batched_tridiagonal_system_with_3D_functions(arch::CPU, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:116
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:274 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:267 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:263
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(3, 5)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(3, 5)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(3, 5)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Batched tridiagonal solver [CPU()]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:273
  Test threw exception
  Expression: can_solve_batched_tridiagonal_system_with_3D_RHS(arch, Nx, Ny, Nz)
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] wait
      @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
    [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
    [4] solve_batched_tridiagonal_system!(ϕ::Array{Float64, 3}, arch::CPU, solver::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing})
      @ Oceananigans.Solvers ~/.julia/packages/Oceananigans/IbUoB/src/Solvers/batched_tridiagonal_solver.jl:64
    [5] can_solve_batched_tridiagonal_system_with_3D_RHS(arch::CPU, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:83
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:273 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:267 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:263
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(3, 5)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(3, 5)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(3, 5)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Batched tridiagonal solver [CPU()]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:274
  Test threw exception
  Expression: can_solve_batched_tridiagonal_system_with_3D_functions(arch, Nx, Ny, Nz)
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] wait
      @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
    [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
    [4] solve_batched_tridiagonal_system!(ϕ::Array{Float64, 3}, arch::CPU, solver::BatchedTridiagonalSolver{Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing})
      @ Oceananigans.Solvers ~/.julia/packages/Oceananigans/IbUoB/src/Solvers/batched_tridiagonal_solver.jl:64
    [5] can_solve_batched_tridiagonal_system_with_3D_functions(arch::CPU, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:116
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:274 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:267 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:263
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(3, 5)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(3, 5)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(3, 5)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Batched tridiagonal solver [CPU()]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:273
  Test threw exception
  Expression: can_solve_batched_tridiagonal_system_with_3D_RHS(arch, Nx, Ny, Nz)
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] wait
      @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
    [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
    [4] solve_batched_tridiagonal_system!(ϕ::Array{Float64, 3}, arch::CPU, solver::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing})
      @ Oceananigans.Solvers ~/.julia/packages/Oceananigans/IbUoB/src/Solvers/batched_tridiagonal_solver.jl:64
    [5] can_solve_batched_tridiagonal_system_with_3D_RHS(arch::CPU, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:83
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:273 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:267 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:263
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(3, 16)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(3, 16)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(3, 16)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Batched tridiagonal solver [CPU()]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:274
  Test threw exception
  Expression: can_solve_batched_tridiagonal_system_with_3D_functions(arch, Nx, Ny, Nz)
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] wait
      @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
    [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
    [4] solve_batched_tridiagonal_system!(ϕ::Array{Float64, 3}, arch::CPU, solver::BatchedTridiagonalSolver{Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing})
      @ Oceananigans.Solvers ~/.julia/packages/Oceananigans/IbUoB/src/Solvers/batched_tridiagonal_solver.jl:64
    [5] can_solve_batched_tridiagonal_system_with_3D_functions(arch::CPU, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:116
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:274 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:267 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:263
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(3, 16)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(3, 16)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(3, 16)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Batched tridiagonal solver [CPU()]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:273
  Test threw exception
  Expression: can_solve_batched_tridiagonal_system_with_3D_RHS(arch, Nx, Ny, Nz)
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] wait
      @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
    [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
    [4] solve_batched_tridiagonal_system!(ϕ::Array{Float64, 3}, arch::CPU, solver::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing})
      @ Oceananigans.Solvers ~/.julia/packages/Oceananigans/IbUoB/src/Solvers/batched_tridiagonal_solver.jl:64
    [5] can_solve_batched_tridiagonal_system_with_3D_RHS(arch::CPU, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:83
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:273 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:267 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:263
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(3, 16)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(3, 16)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(3, 16)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Batched tridiagonal solver [CPU()]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:274
  Test threw exception
  Expression: can_solve_batched_tridiagonal_system_with_3D_functions(arch, Nx, Ny, Nz)
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] wait
      @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
    [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
    [4] solve_batched_tridiagonal_system!(ϕ::Array{Float64, 3}, arch::CPU, solver::BatchedTridiagonalSolver{Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing})
      @ Oceananigans.Solvers ~/.julia/packages/Oceananigans/IbUoB/src/Solvers/batched_tridiagonal_solver.jl:64
    [5] can_solve_batched_tridiagonal_system_with_3D_functions(arch::CPU, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:116
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:274 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:267 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:263
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(3, 16)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(3, 16)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(3, 16)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Batched tridiagonal solver [CPU()]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:273
  Test threw exception
  Expression: can_solve_batched_tridiagonal_system_with_3D_RHS(arch, Nx, Ny, Nz)
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] wait
      @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
    [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
    [4] solve_batched_tridiagonal_system!(ϕ::Array{Float64, 3}, arch::CPU, solver::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing})
      @ Oceananigans.Solvers ~/.julia/packages/Oceananigans/IbUoB/src/Solvers/batched_tridiagonal_solver.jl:64
    [5] can_solve_batched_tridiagonal_system_with_3D_RHS(arch::CPU, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:83
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:273 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:267 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:263
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 5)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 5)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 5)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Batched tridiagonal solver [CPU()]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:274
  Test threw exception
  Expression: can_solve_batched_tridiagonal_system_with_3D_functions(arch, Nx, Ny, Nz)
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] wait
      @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
    [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
    [4] solve_batched_tridiagonal_system!(ϕ::Array{Float64, 3}, arch::CPU, solver::BatchedTridiagonalSolver{Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing})
      @ Oceananigans.Solvers ~/.julia/packages/Oceananigans/IbUoB/src/Solvers/batched_tridiagonal_solver.jl:64
    [5] can_solve_batched_tridiagonal_system_with_3D_functions(arch::CPU, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:116
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:274 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:267 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:263
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 5)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 5)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 5)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Batched tridiagonal solver [CPU()]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:273
  Test threw exception
  Expression: can_solve_batched_tridiagonal_system_with_3D_RHS(arch, Nx, Ny, Nz)
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] wait
      @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
    [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
    [4] solve_batched_tridiagonal_system!(ϕ::Array{Float64, 3}, arch::CPU, solver::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing})
      @ Oceananigans.Solvers ~/.julia/packages/Oceananigans/IbUoB/src/Solvers/batched_tridiagonal_solver.jl:64
    [5] can_solve_batched_tridiagonal_system_with_3D_RHS(arch::CPU, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:83
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:273 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:267 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:263
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 5)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 5)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 5)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Batched tridiagonal solver [CPU()]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:274
  Test threw exception
  Expression: can_solve_batched_tridiagonal_system_with_3D_functions(arch, Nx, Ny, Nz)
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] wait
      @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
    [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
    [4] solve_batched_tridiagonal_system!(ϕ::Array{Float64, 3}, arch::CPU, solver::BatchedTridiagonalSolver{Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing})
      @ Oceananigans.Solvers ~/.julia/packages/Oceananigans/IbUoB/src/Solvers/batched_tridiagonal_solver.jl:64
    [5] can_solve_batched_tridiagonal_system_with_3D_functions(arch::CPU, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:116
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:274 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:267 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:263
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 5)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 5)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 5)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Batched tridiagonal solver [CPU()]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:273
  Test threw exception
  Expression: can_solve_batched_tridiagonal_system_with_3D_RHS(arch, Nx, Ny, Nz)
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] wait
      @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
    [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
    [4] solve_batched_tridiagonal_system!(ϕ::Array{Float64, 3}, arch::CPU, solver::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing})
      @ Oceananigans.Solvers ~/.julia/packages/Oceananigans/IbUoB/src/Solvers/batched_tridiagonal_solver.jl:64
    [5] can_solve_batched_tridiagonal_system_with_3D_RHS(arch::CPU, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:83
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:273 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:267 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:263
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 16)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 16)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 16)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Batched tridiagonal solver [CPU()]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:274
  Test threw exception
  Expression: can_solve_batched_tridiagonal_system_with_3D_functions(arch, Nx, Ny, Nz)
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] wait
      @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
    [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
    [4] solve_batched_tridiagonal_system!(ϕ::Array{Float64, 3}, arch::CPU, solver::BatchedTridiagonalSolver{Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing})
      @ Oceananigans.Solvers ~/.julia/packages/Oceananigans/IbUoB/src/Solvers/batched_tridiagonal_solver.jl:64
    [5] can_solve_batched_tridiagonal_system_with_3D_functions(arch::CPU, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:116
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:274 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:267 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:263
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 16)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 16)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 16)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Batched tridiagonal solver [CPU()]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:273
  Test threw exception
  Expression: can_solve_batched_tridiagonal_system_with_3D_RHS(arch, Nx, Ny, Nz)
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] wait
      @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
    [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
    [4] solve_batched_tridiagonal_system!(ϕ::Array{Float64, 3}, arch::CPU, solver::BatchedTridiagonalSolver{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing})
      @ Oceananigans.Solvers ~/.julia/packages/Oceananigans/IbUoB/src/Solvers/batched_tridiagonal_solver.jl:64
    [5] can_solve_batched_tridiagonal_system_with_3D_RHS(arch::CPU, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:83
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:273 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:267 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:263
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 16)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 16)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 16)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{Array{Float64, 3}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, 3}, Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Batched tridiagonal solver [CPU()]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:274
  Test threw exception
  Expression: can_solve_batched_tridiagonal_system_with_3D_functions(arch, Nx, Ny, Nz)
  TaskFailedException
  Stacktrace:
    [1] wait
      @ ./task.jl:306 [inlined]
    [2] wait
      @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
    [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
    [4] solve_batched_tridiagonal_system!(ϕ::Array{Float64, 3}, arch::CPU, solver::BatchedTridiagonalSolver{Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing})
      @ Oceananigans.Solvers ~/.julia/packages/Oceananigans/IbUoB/src/Solvers/batched_tridiagonal_solver.jl:64
    [5] can_solve_batched_tridiagonal_system_with_3D_functions(arch::CPU, Nx::Int64, Ny::Int64, Nz::Int64)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:116
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:274 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:267 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_solvers.jl:263
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 16)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 16)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(8, 16)}, typeof(Oceananigans.Solvers.cpu_solve_batched_tridiagonal_system_kernel!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{Array{Float64, 3}, Vector{Float64}, var"#b#31", Vector{Float64}, var"#f#32", Array{Float64, 3}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
[2020/10/29 04:28:46.464] INFO    Testing vertically stretched Poisson solver [FACR, CPU()]...
[2020/10/29 04:28:49.370] INFO  Testing pressure solvers...
[2020/10/29 04:28:49.370] INFO    Testing pressure solver instantiation...
[2020/10/29 04:28:53.013] INFO    Testing divergence-free solution [CPU]...
[2020/10/29 04:28:53.067] INFO      Testing (Periodic, Periodic, Periodic) topology on square grids...
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, N, N, FFTW.ESTIMATE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(7, 7, 7)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 7)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(7, 7, 7)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 7)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(7, 7, 7)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 7)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, N, N, FFTW.MEASURE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7, 7)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7, 7)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7, 7)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, 1, N, FFTW.ESTIMATE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(7, 1, 7)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(7, 1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(7, 1, 7)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(7, 1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(7, 1, 7)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(7, 1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, 1, N, FFTW.MEASURE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1, 7)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 1, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1, 7)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 1, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1, 7)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 1, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, N, N, FFTW.ESTIMATE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(7, 7, 7)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 7)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(7, 7, 7)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 7)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(7, 7, 7)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 7)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, N, N, FFTW.MEASURE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7, 7)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7, 7)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7, 7)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, 1, N, FFTW.ESTIMATE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(7, 1, 7)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(7, 1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(7, 1, 7)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(7, 1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(7, 1, 7)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(7, 1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, 1, N, FFTW.MEASURE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1, 7)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 1, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1, 7)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 1, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1, 7)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 1, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, N, N, FFTW.ESTIMATE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 16)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, N, N, FFTW.MEASURE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16, 16)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, 1, N, FFTW.ESTIMATE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 1, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(16, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 1, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(16, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 1, 16)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(16, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, 1, N, FFTW.MEASURE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 1, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 1, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 1, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, N, N, FFTW.ESTIMATE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 16)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, N, N, FFTW.MEASURE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16, 16)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, 1, N, FFTW.ESTIMATE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 1, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(16, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 1, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(16, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 1, 16)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(16, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, 1, N, FFTW.MEASURE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 1, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 1, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 1, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
[2020/10/29 04:29:06.367] INFO      Testing (Periodic, Periodic, Bounded) topology on square grids...
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, N, N, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(7, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(7, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(7, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, N, N, FFTW.MEASURE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, 1, N, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(7, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(7, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(7, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(7, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(7, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(7, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, 1, N, FFTW.MEASURE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, N, N, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(7, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(7, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(7, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, N, N, FFTW.MEASURE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, 1, N, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(7, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(7, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(7, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(7, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(7, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(7, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, 1, N, FFTW.MEASURE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, N, N, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, N, N, FFTW.MEASURE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, 1, N, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(16, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(16, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(16, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, 1, N, FFTW.MEASURE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, N, N, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, N, N, FFTW.MEASURE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, 1, N, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(16, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(16, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(16, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, 1, N, FFTW.MEASURE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
[2020/10/29 04:29:15.282] INFO      Testing (Periodic, Bounded, Bounded) topology on square grids...
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, N, N, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(7, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(7, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(7, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, N, N, FFTW.MEASURE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, 1, N, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(7, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(7, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(7, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(7, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(7, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(7, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, 1, N, FFTW.MEASURE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, N, N, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(7, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(7, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(7, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, N, N, FFTW.MEASURE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, 1, N, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(7, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(7, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(7, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(7, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(7, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(7, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, 1, N, FFTW.MEASURE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, N, N, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, N, N, FFTW.MEASURE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, 1, N, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(16, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(16, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(16, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, 1, N, FFTW.MEASURE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, N, N, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, N, N, FFTW.MEASURE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, 1, N, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(16, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(16, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(16, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, 1, N, FFTW.MEASURE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
[2020/10/29 04:29:28.009] INFO      Testing (Bounded, Bounded, Bounded) topology on square grids...
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, N, N, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(7, 7)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(7, 7)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(7, 7)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, N, N, FFTW.MEASURE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(7, 7)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(7, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(7, 7)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(7, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(7, 7)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(7, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, 1, N, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, 1, N, FFTW.MEASURE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, N, N, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(7, 7)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(7, 7)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(7, 7)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, N, N, FFTW.MEASURE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(7, 7)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(7, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(7, 7)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(7, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(7, 7)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(7, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, 1, N, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, 1, N, FFTW.MEASURE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 7)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, N, N, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, N, N, FFTW.MEASURE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(16, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(16, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(16, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, 1, N, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, 1, N, FFTW.MEASURE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, N, N, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:121 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, N, N, FFTW.MEASURE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(16, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(16, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(16, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:122 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, N, 1, N, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:123 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, 1, 1, N, FFTW.MEASURE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 16)}, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:124 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
[2020/10/29 04:29:39.134] INFO      Testing (Periodic, Periodic, Periodic) topology on rectangular grids...
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11, 11)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 11)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11, 11)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 11)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11, 11)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 11)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11, 11)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 11)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11, 11)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 11)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11, 11)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 11)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11, 16)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11, 16)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16, 11)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 11)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16, 11)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 11)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16, 11)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 11)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16, 11)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 11)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16, 11)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 11)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16, 11)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 11)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16, 16)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16, 16)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11, 11)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 11)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11, 11)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 11)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11, 11)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 11)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11, 11)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 11)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11, 11)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 11)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11, 11)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 11)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11, 16)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11, 16)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 11)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 11)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 11)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 11)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 11)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 11)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 11)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 11)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 11)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 11)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 11)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 11)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 16)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float32, Periodic, Periodic, Periodic, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, OffsetArray{Float32, 3, Array{Float32, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  Stacktrace:
   [1] wait
     @ ./task.jl:306 [inlined]
   [2] wait
     @ ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:65 [inlined]
   [3] wait(::KernelAbstractions.CPU, ev::KernelAbstractions.CPUEvent)
     @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:64
   [4] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
     @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:35
   [5] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
   [6] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [7] macro expansion
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
   [8] macro expansion
     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [9] top-level scope
     @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 16)}, typeof(cpu_divergence!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, args::Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 16)}, typeof(cpu_divergence!)}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)}, Nothing, Nothing}, Tuple{RegularCartesianGrid{Float64, Periodic, Periodic, Periodic, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, OffsetArray{Float64, 3, Array{Float64, 3}}, Array{Float64, 3}}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
[2020/10/29 04:29:47.013] INFO      Testing (Periodic, Periodic, Bounded) topology on rectangular grids...
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Periodic, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_bottom_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 1 more exception.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{Tuple{KernelAbstractions.CPUEvent, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Periodic, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
[2020/10/29 04:29:52.056] INFO      Testing (Periodic, Bounded, Bounded) topology on rectangular grids...
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Periodic, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu__fill_south_halo!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, BoundaryCondition{Flux, Nothing}, Int64, Int64}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 3 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{4, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Periodic, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
[2020/10/29 04:29:56.425] INFO      Testing (Bounded, Bounded, Bounded) topology on rectangular grids...
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 11)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(11, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.DynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 11)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.DynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float32, 3, Array{Float32, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float32, 3, Array{Float32, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float32, 3, Array{Float32, 3}}, RegularCartesianGrid{Float32, Bounded, Bounded, Bounded, OffsetVector{Float32, StepRangeLen{Float32, Float64, Float64}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
Divergence-free solution [CPU]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132
  Test threw exception
  Expression: divergence_free_poisson_solution(CPU(), FT, topo, Nx, Ny, Nz, FFTW.ESTIMATE)
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
      Closest candidates are:
        CartesianIndex(!Matched::Tuple{Vararg{Integer, N}}) where N at multidimensional.jl:69
        CartesianIndex(!Matched::Integer...) at multidimensional.jl:70
        CartesianIndex(!Matched::Union{Integer, CartesianIndex}...) at multidimensional.jl:77
        ...
      Stacktrace:
       [1] call
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:456 [inlined]
       [2] fallback
         @ ~/.julia/packages/Cassette/158rp/src/context.jl:454 [inlined]
       [3] overdub
         @ ~/.julia/packages/Cassette/158rp/src/overdub.jl:536 [inlined]
       [4] overdub
         @ ./multidimensional.jl:432 [inlined]
       [5] overdub
         @ ./multidimensional.jl:373 [inlined]
       [6] overdub
         @ ./none:0 [inlined]
       [7] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:157
       [8] __run(obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, args::Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, dynamic::KernelAbstractions.NDIteration.NoDynamicCheck)
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:130
       [9] (::KernelAbstractions.var"#30#31"{Tuple{KernelAbstractions.NoneEvent}, Nothing, typeof(KernelAbstractions.__run), Tuple{KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, typeof(Oceananigans.BoundaryConditions.cpu_set_east_west_u_velocity!)}, Nothing, KernelAbstractions.NDIteration.NDRange{2, KernelAbstractions.NDIteration.StaticSize{(1, 1)}, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, Nothing, Nothing}, Tuple{OffsetArray{Float64, 3, Array{Float64, 3}}, Int64, BoundaryCondition{NormalFlow, Nothing}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Nothing, Nothing}, KernelAbstractions.NDIteration.NoDynamicCheck}})()
         @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:22
  
  ...and 5 more exceptions.
  
  Stacktrace:
    [1] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}}, progress::Nothing)
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:59
    [2] wait(cpu::KernelAbstractions.CPU, ev::KernelAbstractions.MultiEvent{NTuple{6, KernelAbstractions.CPUEvent}})
      @ KernelAbstractions ~/.julia/packages/KernelAbstractions/jAutM/src/backends/cpu.jl:33
    [3] fill_halo_regions!(::OffsetArray{Float64, 3, Array{Float64, 3}}, ::NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}, ::CPU, ::RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Nothing, ::Vararg{Nothing, N} where N)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:40
    [4] fill_halo_regions!(::Field{Cell, Cell, Cell, OffsetArray{Float64, 3, Array{Float64, 3}}, RegularCartesianGrid{Float64, Bounded, Bounded, Bounded, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, NamedTuple{(:x, :y, :z), Tuple{CoordinateBoundaryConditions{BoundaryCondition{NormalFlow, Nothing}, BoundaryCondition{NormalFlow, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}, CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing}, BoundaryCondition{Flux, Nothing}}}}}, ::CPU, ::Nothing, ::Nothing)
      @ Oceananigans.BoundaryConditions ~/.julia/packages/Oceananigans/IbUoB/src/BoundaryConditions/fill_halo_regions.jl:22
    [5] divergence_free_poisson_solution(arch::CPU, FT::Type, topology::Tuple{DataType, DataType, DataType}, Nx::Int64, Ny::Int64, Nz::Int64, planner_flag::UInt32)
      @ Main ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:27
    [6] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:132 [inlined]
    [7] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
    [8] macro expansion
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:116 [inlined]
    [9] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] top-level scope
      @ ~/.julia/packages/Oceananigans/IbUoB/test/test_pressure_solvers.jl:102
[2020/10/29 04:30:00.475] INFO    Testing convergence to analytical solution...
[2020/10/29 04:32:07.403] INFO  Convergence of L¹-normed error, Float64, (64³ -> 128³), topology=(Periodic, Periodic, Periodic): 2.0018252684303977
[2020/10/29 04:32:12.278] INFO  Convergence of L¹-normed error, Float64, (64³ -> 128³), topology=(Periodic, Periodic, Bounded): 2.0014347724571695
[2020/10/29 04:32:47.993] INFO  Convergence of L¹-normed error, Float64, (64³ -> 128³), topology=(Periodic, Bounded, Bounded): 2.0009850079541875
[2020/10/29 04:32:59.377] INFO  Convergence of L¹-normed error, Float64, (64³ -> 128³), topology=(Bounded, Bounded, Bounded): 2.0004562752677315
[2020/10/29 04:33:00.359] INFO  Testing Coriolis...
FPlane{Float32}: f = 1.03e-04
NonTraditionalFPlane{Float32}: fz = 1.03e-04, fy = 1.03e-04
BetaPlane{Float32}: f₀ = 1.03e-04, β = 1.62e-11
NonTraditionalBetaPlane{Float32}: fz = 1.03e-04, fy = 1.03e-04, β = 1.62e-11, γ = -3.24e-11, R = 6.37e+06
FPlane{Float64}: f = 1.03e-04
NonTraditionalFPlane{Float64}: fz = 1.03e-04, fy = 1.03e-04
BetaPlane{Float64}: f₀ = 1.03e-04, β = 1.62e-11
NonTraditionalBetaPlane{Float64}: fz = 1.03e-04, fy = 1.03e-04, β = 1.62e-11, γ = -3.24e-11, R = 6.37e+06
[2020/10/29 04:33:22.247] INFO  Testing buoyancy...
[2020/10/29 04:33:22.247] INFO    Testing equations of state...
[2020/10/29 04:33:32.624] INFO  Testing surface waves...
[2020/10/29 04:33:32.775] INFO  Testing WENO reconstruction...
[2020/10/29 04:33:33.634] INFO  WENO-3 coefficients [Compare with Table 2.1 of Shu (1998)]:
u(i+1//2) = + 3//2 u(i+1) - 1//2 u(i+2) 
u(i+1//2) = + 1//2 u(i) + 1//2 u(i+1) 
u(i+1//2) = - 1//2 u(i-1) + 3//2 u(i) 
Optimal weights γ: Rational[2//3, 1//3]
[2020/10/29 04:33:37.669] INFO  WENO-5 coefficients [Compare with Table 2.1 of Shu (1998) and equation (2.15) from Shu (2009)]:
u(i+1//2) = + 11//6 u(i+1) - 7//6 u(i+2) + 1//3 u(i+3) 
u(i+1//2) = + 1//3 u(i) + 5//6 u(i+1) - 1//6 u(i+2) 
u(i+1//2) = - 1//6 u(i-1) + 5//6 u(i) + 1//3 u(i+1) 
u(i+1//2) = + 1//3 u(i-2) - 7//6 u(i-1) + 11//6 u(i) 
Optimal weights γ: Rational[3//10, 3//5, 1//10]
[2020/10/29 04:33:37.895] INFO  WENO-7 coefficients [Compare with Table 2.1 of Shu (1998)]:
u(i+1//2) = + 25//12 u(i+1) - 23//12 u(i+2) + 13//12 u(i+3) - 1//4 u(i+4) 
u(i+1//2) = + 1//4 u(i) + 13//12 u(i+1) - 5//12 u(i+2) + 1//12 u(i+3) 
u(i+1//2) = - 1//12 u(i-1) + 7//12 u(i) + 7//12 u(i+1) - 1//12 u(i+2) 
u(i+1//2) = + 1//12 u(i-2) - 5//12 u(i-1) + 13//12 u(i) + 1//4 u(i+1) 
u(i+1//2) = - 1//4 u(i-3) + 13//12 u(i-2) - 23//12 u(i-1) + 25//12 u(i) 
Optimal weights γ: Rational[4//35, 18//35, 12//35, 1//35]
[2020/10/29 04:33:38.105] INFO  WENO-9 coefficients [Compare with Table 2.1 of Shu (1998) and equation (2.14) of Shu (2009)]:
u(i+1//2) = + 137//60 u(i+1) - 163//60 u(i+2) + 137//60 u(i+3) - 21//20 u(i+4) + 1//5 u(i+5) 
u(i+1//2) = + 1//5 u(i) + 77//60 u(i+1) - 43//60 u(i+2) + 17//60 u(i+3) - 1//20 u(i+4) 
u(i+1//2) = - 1//20 u(i-1) + 9//20 u(i) + 47//60 u(i+1) - 13//60 u(i+2) + 1//30 u(i+3) 
u(i+1//2) = + 1//30 u(i-2) - 13//60 u(i-1) + 47//60 u(i) + 9//20 u(i+1) - 1//20 u(i+2) 
u(i+1//2) = - 1//20 u(i-3) + 17//60 u(i-2) - 43//60 u(i-1) + 77//60 u(i) + 1//5 u(i+1) 
u(i+1//2) = + 1//5 u(i-4) - 21//20 u(i-3) + 137//60 u(i-2) - 163//60 u(i-1) + 137//60 u(i) 
Optimal weights γ: Rational[5//126, 20//63, 10//21, 10//63, 1//126]
[2020/10/29 04:33:38.601] INFO  Testing utils...
[2020/10/29 04:33:42.096] INFO  Testing models...
[2020/10/29 04:33:42.166] INFO    Testing (Periodic, Periodic, Periodic) model construction...
[2020/10/29 04:33:52.128] INFO    Testing (Periodic, Periodic, Bounded) model construction...
[2020/10/29 04:33:59.703] INFO    Testing (Periodic, Bounded, Bounded) model construction...
[2020/10/29 04:34:08.100] INFO    Testing (Bounded, Bounded, Bounded) model construction...
[2020/10/29 04:34:16.462] INFO    Testing adjustment of halos in IncompressibleModel constructor...
[2020/10/29 04:34:25.408] INFO    Testing model construction with single tracer and nothing tracer...
[2020/10/29 04:34:31.121] INFO    Testing non-dimensional model construction...
[2020/10/29 04:34:38.661] INFO    Testing setting model fields...
[2020/10/29 04:34:53.300] INFO  Testing time stepping...
[2020/10/29 04:34:53.300] INFO    Testing time stepping with datetime clocks [CPU, Float32]
Time stepping with DateTimes [CPU, Float32]: Error During Test at /home/pkgeval/.julia/packages/Oceananigans/IbUoB/test/test_time_stepping.jl:207
  Got exception outside of a @test
  TaskFailedException
  
      nested task error: MethodError: no method matching CartesianIndex(::typeof(first))
No statistics gathered.