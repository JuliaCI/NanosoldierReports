################################################################################
# Set-up: 2020-10-28T07:13:38.595
#

Julia Version 1.6.0-DEV.1352
Commit 8f71ea7f35 (2020-10-28 02:10 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807



################################################################################
# Installation: 2020-10-28T07:13:46.429
#

   Resolving package versions...
   Installed PowerDynSolve â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.0
   Installed Distances â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.9.2
   Installed Parameters â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.11.0
   Installed OrderedCollections â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.3.1
   Installed DocStringExtensions â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.8.3
   Installed IterativeSolvers â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.8.4
   Installed SIMDPirates â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.8.25
   Installed RecursiveArrayTools â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.2.1
   Installed ArrayInterface â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v2.13.7
   Installed RecipesBase â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.7.0
   Installed ForwardDiff â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.10.12
   Installed Calculus â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.5.1
   Installed VectorizationBase â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.12.33
   Installed MuladdMacro â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.2.2
   Installed LoopVectorization â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.8.26
   Installed CompilerSupportLibraries_jll â”€ v0.3.4+0
   Installed RecursiveFactorization â”€â”€â”€â”€â”€â”€â”€ v0.1.4
   Installed SLEEFPirates â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.5.5
   Installed CpuId â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.2.2
   Installed Compat â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v3.23.0
   Installed PowerDynBase â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.0
   Installed DiffEqOperators â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v3.5.0
   Installed LineSearches â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v7.1.0
   Installed DiffEqDiffTools â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.7.0
   Installed Reexport â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.2.0
   Installed UnPack â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.2
   Installed OpenSpecFun_jll â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.5.3+4
   Installed Lazy â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.15.1
   Installed PowerDynOperationPoint â”€â”€â”€â”€â”€â”€â”€ v1.0.0
   Installed DiffResults â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.2
   Installed MacroTools â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.5.6
   Installed NaNMath â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.3.4
   Installed SpecialFunctions â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.10.3
   Installed NLSolversBase â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v7.5.0
   Installed TreeViews â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.3.0
   Installed NLsolve â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v4.4.1
   Installed StaticArrays â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.11.1
   Installed Roots â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.8.4
   Installed OrdinaryDiffEq â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v5.10.0
   Installed FunctionWrappers â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.1.1
   Installed CommonSubexpressions â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.3.0
   Installed IteratorInterfaceExtensions â”€â”€ v1.0.0
   Installed OffsetArrays â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.3.1
   Installed Requires â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.5.2
   Installed GenericSVD â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.2.2
   Installed ExponentialUtilities â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.6.0
   Installed TableTraits â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.0
   Installed DataStructures â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.17.20
   Installed DiffEqBase â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v5.16.5
   Installed JLLWrappers â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.1.3
   Installed DiffRules â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.1
Updating `~/.julia/environments/v1.6/Project.toml`
  [b2d36aa5] + PowerDynSolve v1.0.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [4fba245c] + ArrayInterface v2.13.7
  [49dc2e85] + Calculus v0.5.1
  [bbf7d656] + CommonSubexpressions v0.3.0
  [34da2185] + Compat v3.23.0
  [adafc99b] + CpuId v0.2.2
  [864edb3b] + DataStructures v0.17.20
  [2b5f629d] + DiffEqBase v5.16.5
  [01453d9d] + DiffEqDiffTools v1.7.0
  [9fdde737] + DiffEqOperators v3.5.0
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.1
  [b4f34e82] + Distances v0.9.2
  [ffbed154] + DocStringExtensions v0.8.3
  [d4d017d3] + ExponentialUtilities v1.6.0
  [f6369f11] + ForwardDiff v0.10.12
  [069b7b12] + FunctionWrappers v1.1.1
  [01680d73] + GenericSVD v0.2.2
  [42fd0dbc] + IterativeSolvers v0.8.4
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [692b3bcd] + JLLWrappers v1.1.3
  [50d2b5c4] + Lazy v0.15.1
  [d3d80556] + LineSearches v7.1.0
  [bdcacae8] + LoopVectorization v0.8.26
  [1914dd2f] + MacroTools v0.5.6
  [46d2c3a1] + MuladdMacro v0.2.2
  [d41bc354] + NLSolversBase v7.5.0
  [2774e3e8] + NLsolve v4.4.1
  [77ba4419] + NaNMath v0.3.4
  [6fe1bfb0] + OffsetArrays v1.3.1
  [bac558e1] + OrderedCollections v1.3.1
  [1dea7af3] + OrdinaryDiffEq v5.10.0
  [d96e819e] + Parameters v0.11.0
  [7ffb48b1] + PowerDynBase v1.0.0
  [95be4243] + PowerDynOperationPoint v1.0.0
  [b2d36aa5] + PowerDynSolve v1.0.0
  [3cdcf5f2] + RecipesBase v0.7.0
  [731186ca] + RecursiveArrayTools v1.2.1
  [f2c3362d] + RecursiveFactorization v0.1.4
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v0.5.2
  [f2b01f46] + Roots v0.8.4
  [21efa798] + SIMDPirates v0.8.25
  [476501e8] + SLEEFPirates v0.5.5
  [276daf66] + SpecialFunctions v0.10.3
  [90137ffa] + StaticArrays v0.11.1
  [3783bdb8] + TableTraits v1.0.0
  [a2a6695c] + TreeViews v0.3.0
  [3a884ed6] + UnPack v1.0.2
  [3d5dd08c] + VectorizationBase v0.12.33
  [e66e0078] + CompilerSupportLibraries_jll v0.3.4+0
  [efe28fd5] + OpenSpecFun_jll v0.5.3+4
  [0dad84c5] + ArgTools
  [56f22d72] + Artifacts
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [f43a241f] + Downloads
  [b77e0a4c] + InteractiveUtils
  [b27032c2] + LibCURL
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [4607b0f0] + SuiteSparse
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
  [deac9b47] + LibCURL_jll
  [14a3606d] + MozillaCACerts_jll
    Building SLEEFPirates â†’ `~/.julia/scratchspaces/44cfe95a-1eb2-52ea-b672-e2afdf69b78f/67ae90a18aa8c22bf159318300e765fbd89ddf6e/build.log`
Precompiling project... (tip: to disable auto-precompilation set ENV["JULIA_PKG_PRECOMPILE_AUTO"]=0)
[32m  âœ“ [39m[90mIteratorInterfaceExtensions[39m
[32m  âœ“ [39m[90mMuladdMacro[39m
[32m  âœ“ [39m[90mUnPack[39m
[32m  âœ“ [39m[90mReexport[39m
[32m  âœ“ [39m[90mJLLWrappers[39m
[32m  âœ“ [39m[90mTreeViews[39m
[32m  âœ“ [39m[90mNaNMath[39m
[32m  âœ“ [39m[90mRecipesBase[39m
[32m  âœ“ [39m[90mTableTraits[39m
[32m  âœ“ [39m[90mGenericSVD[39m
[32m  âœ“ [39m[90mOrderedCollections[39m
[32m  âœ“ [39m[90mOffsetArrays[39m
[32m  âœ“ [39m[90mCompat[39m
[32m  âœ“ [39m[90mDocStringExtensions[39m
[32m  âœ“ [39m[90mExponentialUtilities[39m
[32m  âœ“ [39m[90mFunctionWrappers[39m
[32m  âœ“ [39m[90mParameters[39m
[32m  âœ“ [39m[90mDistances[39m
[32m  âœ“ [39m[90mCalculus[39m
[32m  âœ“ [39m[90mRequires[39m
[32m  âœ“ [39m[90mDataStructures[39m
[32m  âœ“ [39m[90mCompilerSupportLibraries_jll[39m
[32m  âœ“ [39m[90mIterativeSolvers[39m
[32m  âœ“ [39m[90mArrayInterface[39m
[32m  âœ“ [39m[90mStaticArrays[39m
[32m  âœ“ [39m[90mRoots[39m
[32m  âœ“ [39m[90mDiffResults[39m
[32m  âœ“ [39m[90mDiffEqDiffTools[39m
[32m  âœ“ [39m[90mOpenSpecFun_jll[39m
[32m  âœ“ [39m[90mSIMDPirates[39m
[32m  âœ“ [39m[90mMacroTools[39m
[32m  âœ“ [39m[90mRecursiveArrayTools[39m
[32m  âœ“ [39m[90mCommonSubexpressions[39m
[32m  âœ“ [39m[90mSLEEFPirates[39m
[32m  âœ“ [39m[90mSpecialFunctions[39m
[32m  âœ“ [39m[90mDiffRules[39m
[32m  âœ“ [39m[90mLazy[39m
[32m  âœ“ [39m[90mForwardDiff[39m
[32m  âœ“ [39m[90mNLSolversBase[39m
[32m  âœ“ [39m[90mLineSearches[39m
[32m  âœ“ [39m[90mPowerDynBase[39m
[32m  âœ“ [39m[90mNLsolve[39m
[32m  âœ“ [39m[90mLoopVectorization[39m
[32m  âœ“ [39m[90mPowerDynOperationPoint[39m
[32m  âœ“ [39m[90mRecursiveFactorization[39m
[32m  âœ“ [39m[90mDiffEqBase[39m
[32m  âœ“ [39m[90mDiffEqOperators[39m
[32m  âœ“ [39m[90mOrdinaryDiffEq[39m
[32m  âœ“ [39mPowerDynSolve
49 dependencies successfully precompiled (2 already precompiled)


################################################################################
# Testing: 2020-10-28T07:17:36.110
#

     Testing PowerDynSolve
Status `/tmp/jl_sOhBfY/Project.toml`
  [a8cc5b0e] Crayons v4.0.4
  [2b5f629d] DiffEqBase v5.16.5
  [50d2b5c4] Lazy v0.15.1
  [2774e3e8] NLsolve v4.4.1
  [1dea7af3] OrdinaryDiffEq v5.10.0
  [d96e819e] Parameters v0.11.0
  [7ffb48b1] PowerDynBase v1.0.0
  [95be4243] PowerDynOperationPoint v1.0.0
  [b2d36aa5] PowerDynSolve v1.0.0
  [3cdcf5f2] RecipesBase v0.7.0
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [8dfed614] Test
Status `/tmp/jl_sOhBfY/Manifest.toml`
  [4fba245c] ArrayInterface v2.13.7
  [49dc2e85] Calculus v0.5.1
  [bbf7d656] CommonSubexpressions v0.3.0
  [34da2185] Compat v3.23.0
  [adafc99b] CpuId v0.2.2
  [a8cc5b0e] Crayons v4.0.4
  [864edb3b] DataStructures v0.17.20
  [2b5f629d] DiffEqBase v5.16.5
  [01453d9d] DiffEqDiffTools v1.7.0
  [9fdde737] DiffEqOperators v3.5.0
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [b4f34e82] Distances v0.9.2
  [ffbed154] DocStringExtensions v0.8.3
  [d4d017d3] ExponentialUtilities v1.6.0
  [f6369f11] ForwardDiff v0.10.12
  [069b7b12] FunctionWrappers v1.1.1
  [01680d73] GenericSVD v0.2.2
  [42fd0dbc] IterativeSolvers v0.8.4
  [82899510] IteratorInterfaceExtensions v1.0.0
  [692b3bcd] JLLWrappers v1.1.3
  [50d2b5c4] Lazy v0.15.1
  [d3d80556] LineSearches v7.1.0
  [bdcacae8] LoopVectorization v0.8.26
  [1914dd2f] MacroTools v0.5.6
  [46d2c3a1] MuladdMacro v0.2.2
  [d41bc354] NLSolversBase v7.5.0
  [2774e3e8] NLsolve v4.4.1
  [77ba4419] NaNMath v0.3.4
  [6fe1bfb0] OffsetArrays v1.3.1
  [bac558e1] OrderedCollections v1.3.1
  [1dea7af3] OrdinaryDiffEq v5.10.0
  [d96e819e] Parameters v0.11.0
  [7ffb48b1] PowerDynBase v1.0.0
  [95be4243] PowerDynOperationPoint v1.0.0
  [b2d36aa5] PowerDynSolve v1.0.0
  [3cdcf5f2] RecipesBase v0.7.0
  [731186ca] RecursiveArrayTools v1.2.1
  [f2c3362d] RecursiveFactorization v0.1.4
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v0.5.2
  [f2b01f46] Roots v0.8.4
  [21efa798] SIMDPirates v0.8.25
  [476501e8] SLEEFPirates v0.5.5
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.11.1
  [3783bdb8] TableTraits v1.0.0
  [a2a6695c] TreeViews v0.3.0
  [3a884ed6] UnPack v1.0.2
  [3d5dd08c] VectorizationBase v0.12.33
  [e66e0078] CompilerSupportLibraries_jll v0.3.4+0
  [efe28fd5] OpenSpecFun_jll v0.5.3+4
  [0dad84c5] ArgTools
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [f43a241f] Downloads
  [b77e0a4c] InteractiveUtils
  [b27032c2] LibCURL
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
  [deac9b47] LibCURL_jll
  [14a3606d] MozillaCACerts_jll
     Testing Running tests...
WARNING: Compat.TypeUtils is deprecated, call the respective Base functions directly
  likely near /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/intergration.jl:1
random_seed = 1234 = 1234
WARNING: TypeUtils.typename is deprecated, use Base.typename instead.
  likely near /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/intergration.jl:26
WARNING: TypeUtils.typename is deprecated, use Base.typename instead.
  likely near /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/intergration.jl:26
WARNING: TypeUtils.typename is deprecated, use Base.typename instead.
  likely near /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/intergration.jl:26
WARNING: TypeUtils.typename is deprecated, use Base.typename instead.
  likely near /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/intergration.jl:26
WARNING: TypeUtils.typename is deprecated, use Base.typename instead.
  likely near /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/intergration.jl:26
WARNING: TypeUtils.typename is deprecated, use Base.typename instead.
  likely near /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/intergration.jl:26
WARNING: TypeUtils.typename is deprecated, use Base.typename instead.
  likely near /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/intergration.jl:26
WARNING: TypeUtils.typename is deprecated, use Base.typename instead.
  likely near /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/intergration.jl:26
WARNING: TypeUtils.typename is deprecated, use Base.typename instead.
  likely near /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/intergration.jl:26
WARNING: TypeUtils.typename is deprecated, use Base.typename instead.
  likely near /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/intergration.jl:26
WARNING: TypeUtils.typename is deprecated, use Base.typename instead.
  likely near /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/intergration.jl:26
in parameterless_type at /home/pkgeval/.julia/packages/DiffEqBase/DqkH4/src/utils.jl
Integration Tests: 147.427359044 s
random_seed = 1234 = 1234
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    convert(::Type{T}, !Matched::AbstractChar) where T<:Number at char.jl:180
    convert(::Type{T}, !Matched::CartesianIndex{1}) where T<:Number at multidimensional.jl:136
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:825
    [2] copyto_unaliased!
      @ ./abstractarray.jl:956 [inlined]
    [3] copyto!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:930
    [4] copyto_axcheck!
      @ ./abstractarray.jl:1036 [inlined]
    [5] Array
      @ ./array.jl:540 [inlined]
    [6] Array
      @ ./boot.jl:472 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:532
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::UnitRange{Int64}, #unused#::Type{Val{:u}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:85
    [9] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::UnitRange{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [11] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [12] macro expansion
      @ ./timing.jl:266 [inlined]
   [13] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [14] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1219 [inlined]
   [15] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [16] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [17] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    convert(::Type{T}, !Matched::AbstractChar) where T<:Number at char.jl:180
    convert(::Type{T}, !Matched::CartesianIndex{1}) where T<:Number at multidimensional.jl:136
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:825
    [2] copyto_unaliased!
      @ ./abstractarray.jl:956 [inlined]
    [3] copyto!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:930
    [4] copyto_axcheck!
      @ ./abstractarray.jl:1036 [inlined]
    [5] Array
      @ ./array.jl:540 [inlined]
    [6] Array
      @ ./boot.jl:472 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:532
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:u}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:85
    [9] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Colon, ::Symbol; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [11] GridSolution
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71 [inlined]
   [12] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::UnitRange{Int64}, #unused#::Type{Val{:i}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:91
   [13] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::UnitRange{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [14] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [15] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [16] macro expansion
      @ ./timing.jl:266 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [18] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1219 [inlined]
   [19] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [20] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [21] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    convert(::Type{T}, !Matched::AbstractChar) where T<:Number at char.jl:180
    convert(::Type{T}, !Matched::CartesianIndex{1}) where T<:Number at multidimensional.jl:136
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:825
    [2] copyto_unaliased!
      @ ./abstractarray.jl:956 [inlined]
    [3] copyto!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:930
    [4] copyto_axcheck!
      @ ./abstractarray.jl:1036 [inlined]
    [5] Array
      @ ./array.jl:540 [inlined]
    [6] Array
      @ ./boot.jl:472 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:532
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::UnitRange{Int64}, #unused#::Type{Val{:u}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:85
    [9] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::UnitRange{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::UnitRange{Int64}, #unused#::Type{Val{:s}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:95
   [11] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::UnitRange{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [12] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::UnitRange{Int64}, #unused#::Type{Val{:p}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:96
   [13] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::UnitRange{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [14] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [15] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [16] macro expansion
      @ ./timing.jl:266 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [18] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1219 [inlined]
   [19] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [20] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [21] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    convert(::Type{T}, !Matched::AbstractChar) where T<:Number at char.jl:180
    convert(::Type{T}, !Matched::CartesianIndex{1}) where T<:Number at multidimensional.jl:136
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:825
    [2] copyto_unaliased!
      @ ./abstractarray.jl:956 [inlined]
    [3] copyto!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:930
    [4] copyto_axcheck!
      @ ./abstractarray.jl:1036 [inlined]
    [5] Array
      @ ./array.jl:540 [inlined]
    [6] Array
      @ ./boot.jl:472 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:532
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::UnitRange{Int64}, #unused#::Type{Val{:u}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:85
    [9] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::UnitRange{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::UnitRange{Int64}, #unused#::Type{Val{:v}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:89
   [11] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::UnitRange{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [12] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [13] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [14] macro expansion
      @ ./timing.jl:266 [inlined]
   [15] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [16] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1219 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [18] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [19] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    convert(::Type{T}, !Matched::AbstractChar) where T<:Number at char.jl:180
    convert(::Type{T}, !Matched::CartesianIndex{1}) where T<:Number at multidimensional.jl:136
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:825
    [2] copyto_unaliased!
      @ ./abstractarray.jl:956 [inlined]
    [3] copyto!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:930
    [4] copyto_axcheck!
      @ ./abstractarray.jl:1036 [inlined]
    [5] Array
      @ ./array.jl:540 [inlined]
    [6] Array
      @ ./boot.jl:472 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:532
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::UnitRange{Int64}, #unused#::Type{Val{:int}}, i::Int64)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:98
    [9] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::UnitRange{Int64}, sym::Symbol, args::Int64)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [11] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [12] macro expansion
      @ ./timing.jl:266 [inlined]
   [13] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [14] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1219 [inlined]
   [15] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [16] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [17] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    convert(::Type{T}, !Matched::AbstractChar) where T<:Number at char.jl:180
    convert(::Type{T}, !Matched::CartesianIndex{1}) where T<:Number at multidimensional.jl:136
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:825
    [2] copyto_unaliased!
      @ ./abstractarray.jl:956 [inlined]
    [3] copyto!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:930
    [4] copyto_axcheck!
      @ ./abstractarray.jl:1036 [inlined]
    [5] Array
      @ ./array.jl:540 [inlined]
    [6] Array
      @ ./boot.jl:472 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:532
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::UnitRange{Int64}, #unused#::Type{Val{:int}}, i::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:98
    [9] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::UnitRange{Int64}, #unused#::Type{Val{:Ï‰}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:100
   [10] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::UnitRange{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [11] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [12] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [13] macro expansion
      @ ./timing.jl:266 [inlined]
   [14] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [15] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1219 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [17] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [18] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:120
  Test threw exception
  Expression: sol(t, n, :int, 1) == sol(t, n, :Ï‰)
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    convert(::Type{T}, !Matched::AbstractChar) where T<:Number at char.jl:180
    convert(::Type{T}, !Matched::CartesianIndex{1}) where T<:Number at multidimensional.jl:136
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:825
    [2] copyto_unaliased!
      @ ./abstractarray.jl:956 [inlined]
    [3] copyto!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:930
    [4] copyto_axcheck!
      @ ./abstractarray.jl:1036 [inlined]
    [5] Array
      @ ./array.jl:540 [inlined]
    [6] Array
      @ ./boot.jl:472 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:532
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::UnitRange{Int64}, #unused#::Type{Val{:int}}, i::Int64)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:98
    [9] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::UnitRange{Int64}, sym::Symbol, args::Int64)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:120
   [11] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [12] macro expansion
      @ ./timing.jl:266 [inlined]
   [13] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [14] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1219 [inlined]
   [15] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [16] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [17] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    convert(::Type{T}, !Matched::AbstractChar) where T<:Number at char.jl:180
    convert(::Type{T}, !Matched::CartesianIndex{1}) where T<:Number at multidimensional.jl:136
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:825
    [2] copyto_unaliased!
      @ ./abstractarray.jl:956 [inlined]
    [3] copyto!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:930
    [4] copyto_axcheck!
      @ ./abstractarray.jl:1036 [inlined]
    [5] Array
      @ ./array.jl:540 [inlined]
    [6] Array
      @ ./boot.jl:472 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:532
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:u}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:85
    [9] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Colon, ::Symbol; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [11] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Colon, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [12] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [13] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [14] macro expansion
      @ ./timing.jl:266 [inlined]
   [15] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [16] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1219 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [18] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [19] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    convert(::Type{T}, !Matched::AbstractChar) where T<:Number at char.jl:180
    convert(::Type{T}, !Matched::CartesianIndex{1}) where T<:Number at multidimensional.jl:136
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:825
    [2] copyto_unaliased!
      @ ./abstractarray.jl:956 [inlined]
    [3] copyto!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:930
    [4] copyto_axcheck!
      @ ./abstractarray.jl:1036 [inlined]
    [5] Array
      @ ./array.jl:540 [inlined]
    [6] Array
      @ ./boot.jl:472 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:532
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:u}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:85
    [9] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Colon, ::Symbol; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [11] GridSolution
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71 [inlined]
   [12] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:i}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:91
   [13] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [14] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Colon, ::Symbol; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [15] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Colon, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [16] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [17] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [18] macro expansion
      @ ./timing.jl:266 [inlined]
   [19] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [20] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1219 [inlined]
   [21] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [22] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [23] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    convert(::Type{T}, !Matched::AbstractChar) where T<:Number at char.jl:180
    convert(::Type{T}, !Matched::CartesianIndex{1}) where T<:Number at multidimensional.jl:136
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:825
    [2] copyto_unaliased!
      @ ./abstractarray.jl:956 [inlined]
    [3] copyto!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:930
    [4] copyto_axcheck!
      @ ./abstractarray.jl:1036 [inlined]
    [5] Array
      @ ./array.jl:540 [inlined]
    [6] Array
      @ ./boot.jl:472 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:532
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:u}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:85
    [9] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:s}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:95
   [11] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [12] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:p}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:96
   [13] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [14] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Colon, ::Symbol; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [15] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Colon, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [16] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [17] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [18] macro expansion
      @ ./timing.jl:266 [inlined]
   [19] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [20] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1219 [inlined]
   [21] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [22] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [23] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    convert(::Type{T}, !Matched::AbstractChar) where T<:Number at char.jl:180
    convert(::Type{T}, !Matched::CartesianIndex{1}) where T<:Number at multidimensional.jl:136
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:825
    [2] copyto_unaliased!
      @ ./abstractarray.jl:956 [inlined]
    [3] copyto!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:930
    [4] copyto_axcheck!
      @ ./abstractarray.jl:1036 [inlined]
    [5] Array
      @ ./array.jl:540 [inlined]
    [6] Array
      @ ./boot.jl:472 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:532
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:u}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:85
    [9] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:v}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:89
   [11] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [12] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Colon, ::Symbol; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [13] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Colon, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [14] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [15] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [16] macro expansion
      @ ./timing.jl:266 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [18] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1219 [inlined]
   [19] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [20] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [21] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    convert(::Type{T}, !Matched::AbstractChar) where T<:Number at char.jl:180
    convert(::Type{T}, !Matched::CartesianIndex{1}) where T<:Number at multidimensional.jl:136
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:825
    [2] copyto_unaliased!
      @ ./abstractarray.jl:956 [inlined]
    [3] copyto!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:930
    [4] copyto_axcheck!
      @ ./abstractarray.jl:1036 [inlined]
    [5] Array
      @ ./array.jl:540 [inlined]
    [6] Array
      @ ./boot.jl:472 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:532
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:int}}, i::Int64)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:98
    [9] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, sym::Symbol, args::Int64)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Colon, sym::Symbol, args::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [11] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Colon, sym::Symbol, args::Int64)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [12] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [13] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [14] macro expansion
      @ ./timing.jl:266 [inlined]
   [15] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [16] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1219 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [18] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [19] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    convert(::Type{T}, !Matched::AbstractChar) where T<:Number at char.jl:180
    convert(::Type{T}, !Matched::CartesianIndex{1}) where T<:Number at multidimensional.jl:136
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:825
    [2] copyto_unaliased!
      @ ./abstractarray.jl:956 [inlined]
    [3] copyto!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:930
    [4] copyto_axcheck!
      @ ./abstractarray.jl:1036 [inlined]
    [5] Array
      @ ./array.jl:540 [inlined]
    [6] Array
      @ ./boot.jl:472 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:532
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:int}}, i::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:98
    [9] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:Ï‰}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:100
   [10] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [11] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Colon, ::Symbol; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [12] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Colon, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [13] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [14] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [15] macro expansion
      @ ./timing.jl:266 [inlined]
   [16] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [17] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1219 [inlined]
   [18] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [19] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [20] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:120
  Test threw exception
  Expression: sol(t, n, :int, 1) == sol(t, n, :Ï‰)
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    convert(::Type{T}, !Matched::AbstractChar) where T<:Number at char.jl:180
    convert(::Type{T}, !Matched::CartesianIndex{1}) where T<:Number at multidimensional.jl:136
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:825
    [2] copyto_unaliased!
      @ ./abstractarray.jl:956 [inlined]
    [3] copyto!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:930
    [4] copyto_axcheck!
      @ ./abstractarray.jl:1036 [inlined]
    [5] Array
      @ ./array.jl:540 [inlined]
    [6] Array
      @ ./boot.jl:472 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:532
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:int}}, i::Int64)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:98
    [9] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, sym::Symbol, args::Int64)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Colon, sym::Symbol, args::Int64; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [11] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Colon, sym::Symbol, args::Int64)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [12] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:120
   [13] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [14] macro expansion
      @ ./timing.jl:266 [inlined]
   [15] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [16] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1219 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [18] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [19] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    convert(::Type{T}, !Matched::AbstractChar) where T<:Number at char.jl:180
    convert(::Type{T}, !Matched::CartesianIndex{1}) where T<:Number at multidimensional.jl:136
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:825
    [2] copyto_unaliased!
      @ ./abstractarray.jl:956 [inlined]
    [3] copyto!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:930
    [4] copyto_axcheck!
      @ ./abstractarray.jl:1036 [inlined]
    [5] Array
      @ ./array.jl:540 [inlined]
    [6] Array
      @ ./boot.jl:472 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:532
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:u}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:85
    [9] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Colon, ::Symbol; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [11] GridSolution
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71 [inlined]
   [12] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Int64, #unused#::Type{Val{:i}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:91
   [13] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Int64, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [14] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [15] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [16] macro expansion
      @ ./timing.jl:266 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [18] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1219 [inlined]
   [19] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [20] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [21] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    convert(::Type{T}, !Matched::AbstractChar) where T<:Number at char.jl:180
    convert(::Type{T}, !Matched::CartesianIndex{1}) where T<:Number at multidimensional.jl:136
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:825
    [2] copyto_unaliased!
      @ ./abstractarray.jl:956 [inlined]
    [3] copyto!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:930
    [4] copyto_axcheck!
      @ ./abstractarray.jl:1036 [inlined]
    [5] Array
      @ ./array.jl:540 [inlined]
    [6] Array
      @ ./boot.jl:472 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:532
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:u}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:85
    [9] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Colon, ::Symbol; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [11] GridSolution
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71 [inlined]
   [12] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Int64, #unused#::Type{Val{:i}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:91
   [13] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Int64, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [14] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Int64, #unused#::Type{Val{:s}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:95
   [15] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Int64, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [16] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Int64, #unused#::Type{Val{:p}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:96
   [17] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Int64, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [18] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [19] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [20] macro expansion
      @ ./timing.jl:266 [inlined]
   [21] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [22] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1219 [inlined]
   [23] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [24] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [25] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    convert(::Type{T}, !Matched::AbstractChar) where T<:Number at char.jl:180
    convert(::Type{T}, !Matched::CartesianIndex{1}) where T<:Number at multidimensional.jl:136
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:825
    [2] copyto_unaliased!
      @ ./abstractarray.jl:956 [inlined]
    [3] copyto!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:930
    [4] copyto_axcheck!
      @ ./abstractarray.jl:1036 [inlined]
    [5] Array
      @ ./array.jl:540 [inlined]
    [6] Array
      @ ./boot.jl:472 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:532
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:u}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:85
    [9] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Colon, ::Symbol; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [11] GridSolution
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71 [inlined]
   [12] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Int64, #unused#::Type{Val{:i}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:91
   [13] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Int64, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [14] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [15] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [16] macro expansion
      @ ./timing.jl:266 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [18] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1219 [inlined]
   [19] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [20] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [21] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
  Test threw exception
  Expression: size(sol(t, n, syms...)) == result_size
  MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    convert(::Type{T}, !Matched::AbstractChar) where T<:Number at char.jl:180
    convert(::Type{T}, !Matched::CartesianIndex{1}) where T<:Number at multidimensional.jl:136
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:825
    [2] copyto_unaliased!
      @ ./abstractarray.jl:956 [inlined]
    [3] copyto!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:930
    [4] copyto_axcheck!
      @ ./abstractarray.jl:1036 [inlined]
    [5] Array
      @ ./array.jl:540 [inlined]
    [6] Array
      @ ./boot.jl:472 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:532
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:u}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:85
    [9] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Colon, ::Symbol; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [11] GridSolution
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71 [inlined]
   [12] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Int64, #unused#::Type{Val{:i}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:91
   [13] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Int64, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [14] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Int64, #unused#::Type{Val{:s}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:95
   [15] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Int64, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [16] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Int64, #unused#::Type{Val{:p}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:96
   [17] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Int64, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [18] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:118
   [19] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [20] macro expansion
      @ ./timing.jl:266 [inlined]
   [21] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [22] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1219 [inlined]
   [23] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [24] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [25] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
Grid Solutions Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
  Got exception outside of a @test
  LoadError: MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    convert(::Type{T}, !Matched::AbstractChar) where T<:Number at char.jl:180
    convert(::Type{T}, !Matched::CartesianIndex{1}) where T<:Number at multidimensional.jl:136
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:825
    [2] copyto_unaliased!
      @ ./abstractarray.jl:956 [inlined]
    [3] copyto!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:930
    [4] copyto_axcheck!
      @ ./abstractarray.jl:1036 [inlined]
    [5] Array
      @ ./array.jl:540 [inlined]
    [6] Array
      @ ./boot.jl:472 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:532
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:int}}, i::Vector{Int64})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:98
    [9] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, sym::Symbol, args::Vector{Int64})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Colon, sym::Symbol, args::Vector{Int64}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71
   [11] GridSolution
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:71 [inlined]
   [12] (::var"#18#24"{StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, PowerDynSolve.GridSolution})()
      @ Main /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:664
   [13] redirect_stderr(f::var"#18#24"{StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, PowerDynSolve.GridSolution}, stream::IOStream)
      @ Base ./stream.jl:1224
   [14] #17
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:663 [inlined]
   [15] open(::var"#17#23"{StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, PowerDynSolve.GridSolution}, ::String, ::Vararg{String, N} where N; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ Base ./io.jl:330
   [16] open(::Function, ::String, ::String)
      @ Base ./io.jl:328
   [17] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:662 [inlined]
   [18] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:122
   [19] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [20] macro expansion
      @ ./timing.jl:266 [inlined]
   [21] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [22] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1219 [inlined]
   [23] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [24] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [25] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
   [26] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [27] top-level scope
      @ none:6
   [28] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [29] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [30] _start()
      @ Base ./client.jl:485
  in expression starting at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/gridsolutions.jl:101
random_seed = 1234 = 1234
Plot Recipes Tests: Error During Test at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
  Got exception outside of a @test
  LoadError: MethodError: Cannot `convert` an object of type Vector{Float64} to an object of type Float64
  Closest candidates are:
    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250
    convert(::Type{T}, !Matched::AbstractChar) where T<:Number at char.jl:180
    convert(::Type{T}, !Matched::CartesianIndex{1}) where T<:Number at multidimensional.jl:136
    ...
  Stacktrace:
    [1] setindex!(A::Matrix{Float64}, x::Vector{Float64}, i1::Int64)
      @ Base ./array.jl:825
    [2] copyto_unaliased!
      @ ./abstractarray.jl:956 [inlined]
    [3] copyto!(dest::Matrix{Float64}, src::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./abstractarray.jl:930
    [4] copyto_axcheck!
      @ ./abstractarray.jl:1036 [inlined]
    [5] Array
      @ ./array.jl:540 [inlined]
    [6] Array
      @ ./boot.jl:472 [inlined]
    [7] convert(#unused#::Type{Array}, a::RecursiveArrayTools.DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
      @ Base ./array.jl:532
    [8] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:u}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:85
    [9] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [10] (::PowerDynSolve.GridSolution)(t::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, n::Base.OneTo{Int64}, #unused#::Type{Val{:v}})
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:89
   [11] (::PowerDynSolve.GridSolution)(::StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:76
   [12] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/src/GridSolutions.jl:129 [inlined]
   [13] apply_recipe(::Dict{Symbol, Any}, ::PowerDynSolve.GridSolution, ::Base.OneTo{Int64}, ::Symbol)
      @ PowerDynSolve ~/.julia/packages/RecipesBase/zBoFG/src/RecipesBase.jl:275
   [14] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/plotrecipes.jl:48
   [15] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [16] macro expansion
      @ ./timing.jl:266 [inlined]
   [17] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:12 [inlined]
   [18] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1219 [inlined]
   [19] macro expansion
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11 [inlined]
   [20] macro expansion
      @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [21] top-level scope
      @ ~/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:11
   [22] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [23] top-level scope
      @ none:6
   [24] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [25] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [26] _start()
      @ Base ./client.jl:485
  in expression starting at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/plotrecipes.jl:25
Test Summary:          | Pass  Error  Broken  Total
All Tests              |  124     20       2    146
  Integration Tests    |   12              2     14
  Grid Solutions Tests |  100     19            119
  Plot Recipes Tests   |   12      1             13
ERROR: LoadError: Some tests did not pass: 124 passed, 0 failed, 20 errored, 2 broken.
in expression starting at /home/pkgeval/.julia/packages/PowerDynSolve/JJ3cs/test/runtests.jl:10
ERROR: Package PowerDynSolve errored during testing
Stacktrace:
  [1] pkgerror(msg::String)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1651
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:334
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:321
  [5] #test#62
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:71 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:70 [inlined]
  [7] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67
 [11] top-level scope
    @ none:39
CPU usage: 267.13s (236.99s user, 30.08s kernel)

Network usage:
- eth0: 9.979 MiB received, 186.947 KiB sent
