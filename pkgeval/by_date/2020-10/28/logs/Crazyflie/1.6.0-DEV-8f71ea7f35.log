################################################################################
# Set-up: 2020-10-28T08:37:34.174
#

Julia Version 1.6.0-DEV.1352
Commit 8f71ea7f35 (2020-10-28 02:10 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807



################################################################################
# Installation: 2020-10-28T08:37:37.664
#

   Resolving package versions...
   Installed VersionParsing â”€ v1.2.0
   Installed Crazyflie â”€â”€â”€â”€â”€â”€ v0.1.0
   Installed MacroTools â”€â”€â”€â”€â”€ v0.5.6
   Installed Parsers â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.11
   Installed Conda â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.4.1
   Installed PyCall â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.92.1
   Installed JSON â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.21.1
Updating `~/.julia/environments/v1.6/Project.toml`
  [69416ee2] + Crazyflie v0.1.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [8f4d0f93] + Conda v1.4.1
  [69416ee2] + Crazyflie v0.1.0
  [682c06a0] + JSON v0.21.1
  [1914dd2f] + MacroTools v0.5.6
  [69de0a69] + Parsers v1.0.11
  [438e738f] + PyCall v1.92.1
  [81def892] + VersionParsing v1.2.0
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [de0858da] + Printf
  [9a3f8284] + Random
  [9e88b42a] + Serialization
  [4ec0a83e] + Unicode
    Building Conda â”€â†’ `~/.julia/scratchspaces/44cfe95a-1eb2-52ea-b672-e2afdf69b78f/7a58bb32ce5d85f8bf7559aa7c2842f9aecf52fc/build.log`
    Building PyCall â†’ `~/.julia/scratchspaces/44cfe95a-1eb2-52ea-b672-e2afdf69b78f/b6dff5fa725eff4f775f472acd86756d6e31fb02/build.log`
Precompiling project... (tip: to disable auto-precompilation set ENV["JULIA_PKG_PRECOMPILE_AUTO"]=0)
[32m  âœ“ [39m[90mMacroTools[39m
[32m  âœ“ [39m[90mPyCall[39m
[32m  âœ“ [39mCrazyflie
3 dependencies successfully precompiled (4 already precompiled)


################################################################################
# Testing: 2020-10-28T08:39:25.728
#

     Testing Crazyflie
Status `/tmp/jl_JmKPBX/Project.toml`
  [69416ee2] Crazyflie v0.1.0
  [438e738f] PyCall v1.92.1
  [8dfed614] Test
Status `/tmp/jl_JmKPBX/Manifest.toml`
  [8f4d0f93] Conda v1.4.1
  [69416ee2] Crazyflie v0.1.0
  [682c06a0] JSON v0.21.1
  [1914dd2f] MacroTools v0.5.6
  [69de0a69] Parsers v1.0.11
  [438e738f] PyCall v1.92.1
  [81def892] VersionParsing v1.2.0
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [b77e0a4c] InteractiveUtils
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [de0858da] Printf
  [9a3f8284] Random
  [9e88b42a] Serialization
  [8dfed614] Test
  [4ec0a83e] Unicode
     Testing Running tests...
ERROR: LoadError: InitError: PyError (PyImport_ImportModule

The Python package cflib.bootloader could not be imported by pyimport. Usually this means
that you did not install cflib.bootloader in the Python version being used by PyCall.

PyCall is currently configured to use the Julia-specific Python distribution
installed by the Conda.jl package.  To install the cflib.bootloader module, you can
use `pyimport_conda("cflib.bootloader", PKG)`, where PKG is the Anaconda
package the contains the module cflib.bootloader, or alternatively you can use the
Conda package directly (via `using Conda` followed by `Conda.add` etcetera).

Alternatively, if you want to use a different Python distribution on your
system, such as a system-wide Python (as opposed to the Julia-specific Python),
you can re-configure PyCall with that Python.   As explained in the PyCall
documentation, set ENV["PYTHON"] to the path/name of the python executable
you want to use, run Pkg.build("PyCall"), and re-launch Julia.

) <class 'ModuleNotFoundError'>
ModuleNotFoundError("No module named 'cflib'")

Stacktrace:
 [1] pyimport(name::String)
   @ PyCall ~/.julia/packages/PyCall/BcTLp/src/PyCall.jl:547
 [2] __init__()
   @ Crazyflie ~/.julia/packages/Crazyflie/fuV6P/src/Crazyflie.jl:17
 [3] _include_from_serialized(path::String, depmods::Vector{Any})
   @ Base ./loading.jl:662
 [4] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String)
   @ Base ./loading.jl:748
 [5] _require(pkg::Base.PkgId)
   @ Base ./loading.jl:986
 [6] require(uuidkey::Base.PkgId)
   @ Base ./loading.jl:902
 [7] require(into::Module, mod::Symbol)
   @ Base ./loading.jl:889
 [8] include(fname::String)
   @ Base.MainInclude ./client.jl:444
 [9] top-level scope
   @ none:6
during initialization of module Crazyflie
in expression starting at /home/pkgeval/.julia/packages/Crazyflie/fuV6P/test/runtests.jl:1
ERROR: Package Crazyflie errored during testing
Stacktrace:
  [1] pkgerror(msg::String)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1651
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:334
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:321
  [5] #test#62
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:71 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:70 [inlined]
  [7] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67
 [11] top-level scope
    @ none:39
CPU usage: 77.59s (64.24s user, 13.14s kernel)

Network usage:
- eth0: 252.868 MiB received, 923.855 KiB sent
