################################################################################
# Set-up: 2020-10-28T08:11:51.846
#

Julia Version 1.6.0-DEV.1352
Commit 8f71ea7f35 (2020-10-28 02:10 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807



################################################################################
# Installation: 2020-10-28T08:11:56.966
#

   Resolving package versions...
   Installed IniFile â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.5.0
   Installed MbedTLS_jll â”€â”€â”€â”€â”€â”€â”€â”€ v2.16.8+0
   Installed Parsers â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.11
   Installed MbedTLS â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.3
   Installed StructTypes â”€â”€â”€â”€â”€â”€â”€â”€ v1.1.0
   Installed Parameters â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.12.1
   Installed HTTP â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.8.19
   Installed WebDriver â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v0.1.1
   Installed OrderedCollections â”€ v1.3.1
   Installed UnPack â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.0.2
   Installed JSON3 â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ v1.4.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [05625dda] + WebDriver v0.1.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [cd3eb016] + HTTP v0.8.19
  [83e8ac13] + IniFile v0.5.0
  [0f8b85d8] + JSON3 v1.4.0
  [739be429] + MbedTLS v1.0.3
  [bac558e1] + OrderedCollections v1.3.1
  [d96e819e] + Parameters v0.12.1
  [69de0a69] + Parsers v1.0.11
  [856f2bd8] + StructTypes v1.1.0
  [3a884ed6] + UnPack v1.0.2
  [05625dda] + WebDriver v0.1.1
  [c8ffd9c3] + MbedTLS_jll v2.16.8+0
  [0dad84c5] + ArgTools
  [56f22d72] + Artifacts
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [f43a241f] + Downloads
  [b77e0a4c] + InteractiveUtils
  [b27032c2] + LibCURL
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
  [deac9b47] + LibCURL_jll
  [14a3606d] + MozillaCACerts_jll
Precompiling project... (tip: to disable auto-precompilation set ENV["JULIA_PKG_PRECOMPILE_AUTO"]=0)
[32m  âœ“ [39m[90mIniFile[39m
[32m  âœ“ [39m[90mUnPack[39m
[32m  âœ“ [39m[90mStructTypes[39m
[32m  âœ“ [39m[90mOrderedCollections[39m
[32m  âœ“ [39m[90mParameters[39m
[32m  âœ“ [39m[90mMbedTLS_jll[39m
[32m  âœ“ [39m[90mMbedTLS[39m
[32m  âœ“ [39m[90mParsers[39m
[32m  âœ“ [39m[90mHTTP[39m
[32m  âœ“ [39m[90mJSON3[39m
[32m  âœ“ [39mWebDriver
11 dependencies successfully precompiled


################################################################################
# Testing: 2020-10-28T08:12:27.891
#

     Testing WebDriver
Status `/tmp/jl_47LEeX/Project.toml`
  [e30172f5] Documenter v0.25.2
  [cd3eb016] HTTP v0.8.19
  [0f8b85d8] JSON3 v1.4.0
  [d96e819e] Parameters v0.12.1
  [05625dda] WebDriver v0.1.1
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8dfed614] Test
Status `/tmp/jl_47LEeX/Manifest.toml`
  [ffbed154] DocStringExtensions v0.8.3
  [e30172f5] Documenter v0.25.2
  [cd3eb016] HTTP v0.8.19
  [83e8ac13] IniFile v0.5.0
  [682c06a0] JSON v0.21.1
  [0f8b85d8] JSON3 v1.4.0
  [739be429] MbedTLS v1.0.3
  [bac558e1] OrderedCollections v1.3.1
  [d96e819e] Parameters v0.12.1
  [69de0a69] Parsers v1.0.11
  [856f2bd8] StructTypes v1.1.0
  [3a884ed6] UnPack v1.0.2
  [05625dda] WebDriver v0.1.1
  [c8ffd9c3] MbedTLS_jll v2.16.8+0
  [0dad84c5] ArgTools
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [f43a241f] Downloads
  [b77e0a4c] InteractiveUtils
  [b27032c2] LibCURL
  [76f85450] LibGit2
  [8f399da3] Libdl
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
  [deac9b47] LibCURL_jll
  [14a3606d] MozillaCACerts_jll
     Testing Running tests...
[ Info: SetupBuildDirectory: setting up build directory.
[ Info: Doctest: running doctests.
â”Œ Error: doctest failure in ~/.julia/packages/WebDriver/bGMZk/src/01_structs/05_Session.jl:6-17
â”‚ 
â”‚ ```jldoctest
â”‚ julia> capabilities = Capabilities("chrome")
â”‚ Remote WebDriver Capabilities
â”‚ browserName: chrome
â”‚ julia> wd = RemoteWebDriver(capabilities, host = ENV["WEBDRIVER_HOST"], port = parse(Int, ENV["WEBDRIVER_PORT"]))
â”‚ Remote WebDriver
â”‚ julia> session = Session(wd)
â”‚ Session
â”‚ julia> isa(session, Session)
â”‚ true
â”‚ julia> delete!(session);
â”‚ 
â”‚ ```
â”‚ 
â”‚ Subexpression:
â”‚ 
â”‚ session = Session(wd)
â”‚ 
â”‚ Evaluated output:
â”‚ 
â”‚ ERROR: IOError(Base.IOError("connect: connection refused (ECONNREFUSED)", -111) during request(http://localhost:4444/wd/hub/session))
â”‚ 
â”‚ Stacktrace:
â”‚   [1] wait_connected(x::Sockets.TCPSocket)
â”‚     @ Sockets /workspace/srcdir/usr/share/julia/stdlib/v1.6/Sockets/src/Sockets.jl:532
â”‚   [2] connect
â”‚     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Sockets/src/Sockets.jl:567 [inlined]
â”‚   [3] connect(addr::Sockets.IPv4, port::UInt64)
â”‚     @ Sockets /workspace/srcdir/usr/share/julia/stdlib/v1.6/Sockets/src/Sockets.jl:553
â”‚   [4] getconnection(::Type{Sockets.TCPSocket}, host::SubString{String}, port::SubString{String}; keepalive::Bool, connect_timeout::Int64, kw::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :reached_redirect_limit), Tuple{Bool, Nothing, Bool}}})
â”‚     @ HTTP.ConnectionPool ~/.julia/packages/HTTP/IAI92/src/ConnectionPool.jl:630
â”‚   [5] newconnection(pod::HTTP.ConnectionPool.Pod, T::Type, host::SubString{String}, port::SubString{String}, pipeline_limit::Int64, require_ssl_verification::Bool, idle_timeout::Int64; kw::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}})
â”‚     @ HTTP.ConnectionPool ~/.julia/packages/HTTP/IAI92/src/ConnectionPool.jl:597
â”‚   [6] getconnection(::Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, host::SubString{String}, port::SubString{String}; connection_limit::Int64, pipeline_limit::Int64, idle_timeout::Int64, reuse_limit::Int64, require_ssl_verification::Bool, kw::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}})
â”‚     @ HTTP.ConnectionPool ~/.julia/packages/HTTP/IAI92/src/ConnectionPool.jl:541
â”‚   [7] request(::Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, url::HTTP.URIs.URI, req::HTTP.Messages.Request, body::String; proxy::Nothing, socket_type::Type, reuse_limit::Int64, kw::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}})
â”‚     @ HTTP.ConnectionRequest ~/.julia/packages/HTTP/IAI92/src/ConnectionRequest.jl:73
â”‚   [8] request(::Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, ::HTTP.URIs.URI, ::Vararg{Any, N} where N; kw::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}})
â”‚     @ HTTP.ExceptionRequest ~/.julia/packages/HTTP/IAI92/src/ExceptionRequest.jl:19
â”‚   [9] (::Base.var"#69#71"{Base.var"#69#70#72"{ExponentialBackOff, HTTP.RetryRequest.var"#2#3"{Bool, HTTP.Messages.Request}, typeof(HTTP.request)}})(::Type, ::Vararg{Any, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}})
â”‚     @ Base ./error.jl:301
â”‚  [10] #request#1
â”‚     @ ~/.julia/packages/HTTP/IAI92/src/RetryRequest.jl:44 [inlined]
â”‚  [11] request(::Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, method::String, url::HTTP.URIs.URI, headers::Vector{Pair{SubString{String}, SubString{String}}}, body::String; http_version::VersionNumber, target::String, parent::Nothing, iofunction::Nothing, kw::Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:reached_redirect_limit,), Tuple{Bool}}})
â”‚     @ HTTP.MessageRequest ~/.julia/packages/HTTP/IAI92/src/MessageRequest.jl:51
â”‚  [12] request(::Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, method::String, url::HTTP.URIs.URI, headers::Vector{Pair{SubString{String}, SubString{String}}}, body::String; kw::Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:reached_redirect_limit,), Tuple{Bool}}})
â”‚     @ HTTP.BasicAuthRequest ~/.julia/packages/HTTP/IAI92/src/BasicAuthRequest.jl:28
â”‚  [13] request(::Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, method::String, url::HTTP.URIs.URI, headers::Vector{Pair{SubString{String}, SubString{String}}}, body::String; redirect_limit::Int64, forwardheaders::Bool, kw::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
â”‚     @ HTTP.RedirectRequest ~/.julia/packages/HTTP/IAI92/src/RedirectRequest.jl:24
â”‚  [14] request(::Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, method::String, url::HTTP.URIs.URI, headers::Vector{Pair{SubString{String}, SubString{String}}}, body::String)
â”‚     @ HTTP.RedirectRequest ~/.julia/packages/HTTP/IAI92/src/RedirectRequest.jl:21
â”‚  [15] request(method::String, url::String, h::Vector{Pair{String, String}}, b::String; headers::Vector{Pair{String, String}}, body::String, query::Nothing, kw::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
â”‚     @ HTTP ~/.julia/packages/HTTP/IAI92/src/HTTP.jl:314
â”‚  [16] request
â”‚     @ ~/.julia/packages/HTTP/IAI92/src/HTTP.jl:314 [inlined]
â”‚  [17] #post#14
â”‚     @ ~/.julia/packages/HTTP/IAI92/src/HTTP.jl:405 [inlined]
â”‚  [18] post
â”‚     @ ~/.julia/packages/HTTP/IAI92/src/HTTP.jl:405 [inlined]
â”‚  [19] Session(wd::RemoteWebDriver{Capabilities{Nothing, Nothing, Nothing, Nothing}})
â”‚     @ WebDriver ~/.julia/packages/WebDriver/bGMZk/src/01_structs/05_Session.jl:26
â”‚  [20] top-level scope
â”‚     @ none:1
â”‚ 
â”‚ Expected output:
â”‚ 
â”‚ Session
â”‚ 
â”‚   diff =
â”‚    Warning: Diff output requires color.
â”‚    SessionERROR: IOError(Base.IOError("connect: connection refused (ECONNREFUSED)", -111) during request(http://localhost:4444/wd/hub/session))
â”‚    
â”‚    Stacktrace:
â”‚      [1] wait_connected(x::Sockets.TCPSocket)
â”‚        @ Sockets /workspace/srcdir/usr/share/julia/stdlib/v1.6/Sockets/src/Sockets.jl:532
â”‚      [2] connect
â”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Sockets/src/Sockets.jl:567 [inlined]
â”‚      [3] connect(addr::Sockets.IPv4, port::UInt64)
â”‚        @ Sockets /workspace/srcdir/usr/share/julia/stdlib/v1.6/Sockets/src/Sockets.jl:553
â”‚      [4] getconnection(::Type{Sockets.TCPSocket}, host::SubString{String}, port::SubString{String}; keepalive::Bool, connect_timeout::Int64, kw::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :reached_redirect_limit), Tuple{Bool, Nothing, Bool}}})
â”‚        @ HTTP.ConnectionPool ~/.julia/packages/HTTP/IAI92/src/ConnectionPool.jl:630
â”‚      [5] newconnection(pod::HTTP.ConnectionPool.Pod, T::Type, host::SubString{String}, port::SubString{String}, pipeline_limit::Int64, require_ssl_verification::Bool, idle_timeout::Int64; kw::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}})
â”‚        @ HTTP.ConnectionPool ~/.julia/packages/HTTP/IAI92/src/ConnectionPool.jl:597
â”‚      [6] getconnection(::Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, host::SubString{String}, port::SubString{String}; connection_limit::Int64, pipeline_limit::Int64, idle_timeout::Int64, reuse_limit::Int64, require_ssl_verification::Bool, kw::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}})
â”‚        @ HTTP.ConnectionPool ~/.julia/packages/HTTP/IAI92/src/ConnectionPool.jl:541
â”‚      [7] request(::Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, url::HTTP.URIs.URI, req::HTTP.Messages.Request, body::String; proxy::Nothing, socket_type::Type, reuse_limit::Int64, kw::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}})
â”‚        @ HTTP.ConnectionRequest ~/.julia/packages/HTTP/IAI92/src/ConnectionRequest.jl:73
â”‚      [8] request(::Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, ::HTTP.URIs.URI, ::Vararg{Any, N} where N; kw::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}})
â”‚        @ HTTP.ExceptionRequest ~/.julia/packages/HTTP/IAI92/src/ExceptionRequest.jl:19
â”‚      [9] (::Base.var"#69#71"{Base.var"#69#70#72"{ExponentialBackOff, HTTP.RetryRequest.var"#2#3"{Bool, HTTP.Messages.Request}, typeof(HTTP.request)}})(::Type, ::Vararg{Any, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}})
â”‚        @ Base ./error.jl:301
â”‚     [10] #request#1
â”‚        @ ~/.julia/packages/HTTP/IAI92/src/RetryRequest.jl:44 [inlined]
â”‚     [11] request(::Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, method::String, url::HTTP.URIs.URI, headers::Vector{Pair{SubString{String}, SubString{String}}}, body::String; http_version::VersionNumber, target::String, parent::Nothing, iofunction::Nothing, kw::Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:reached_redirect_limit,), Tuple{Bool}}})
â”‚        @ HTTP.MessageRequest ~/.julia/packages/HTTP/IAI92/src/MessageRequest.jl:51
â”‚     [12] request(::Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, method::String, url::HTTP.URIs.URI, headers::Vector{Pair{SubString{String}, SubString{String}}}, body::String; kw::Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:reached_redirect_limit,), Tuple{Bool}}})
â”‚        @ HTTP.BasicAuthRequest ~/.julia/packages/HTTP/IAI92/src/BasicAuthRequest.jl:28
â”‚     [13] request(::Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, method::String, url::HTTP.URIs.URI, headers::Vector{Pair{SubString{String}, SubString{String}}}, body::String; redirect_limit::Int64, forwardheaders::Bool, kw::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
â”‚        @ HTTP.RedirectRequest ~/.julia/packages/HTTP/IAI92/src/RedirectRequest.jl:24
â”‚     [14] request(::Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, method::String, url::HTTP.URIs.URI, headers::Vector{Pair{SubString{String}, SubString{String}}}, body::String)
â”‚        @ HTTP.RedirectRequest ~/.julia/packages/HTTP/IAI92/src/RedirectRequest.jl:21
â”‚     [15] request(method::String, url::String, h::Vector{Pair{String, String}}, b::String; headers::Vector{Pair{String, String}}, body::String, query::Nothing, kw::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
â”‚        @ HTTP ~/.julia/packages/HTTP/IAI92/src/HTTP.jl:314
â”‚     [16] request
â”‚        @ ~/.julia/packages/HTTP/IAI92/src/HTTP.jl:314 [inlined]
â”‚     [17] #post#14
â”‚        @ ~/.julia/packages/HTTP/IAI92/src/HTTP.jl:405 [inlined]
â”‚     [18] post
â”‚        @ ~/.julia/packages/HTTP/IAI92/src/HTTP.jl:405 [inlined]
â”‚     [19] Session(wd::RemoteWebDriver{Capabilities{Nothing, Nothing, Nothing, Nothing}})
â”‚        @ WebDriver ~/.julia/packages/WebDriver/bGMZk/src/01_structs/05_Session.jl:26
â”‚     [20] top-level scope
â”‚        @ none:1
â”” @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
â”Œ Error: doctest failure in ~/.julia/packages/WebDriver/bGMZk/src/01_structs/05_Session.jl:6-17
â”‚ 
â”‚ ```jldoctest
â”‚ julia> capabilities = Capabilities("chrome")
â”‚ Remote WebDriver Capabilities
â”‚ browserName: chrome
â”‚ julia> wd = RemoteWebDriver(capabilities, host = ENV["WEBDRIVER_HOST"], port = parse(Int, ENV["WEBDRIVER_PORT"]))
â”‚ Remote WebDriver
â”‚ julia> session = Session(wd)
â”‚ Session
â”‚ julia> isa(session, Session)
â”‚ true
â”‚ julia> delete!(session);
â”‚ 
â”‚ ```
â”‚ 
â”‚ Subexpression:
â”‚ 
â”‚ isa(session, Session)
â”‚ 
â”‚ Evaluated output:
â”‚ 
â”‚ ERROR: UndefVarError: session not defined
â”‚ Stacktrace:
â”‚  [1] top-level scope
â”‚    @ none:1
â”‚ 
â”‚ Expected output:
â”‚ 
â”‚ true
â”‚ 
â”‚   diff =
â”‚    Warning: Diff output requires color.
â”‚    trueERROR: UndefVarError: session not defined
â”‚    Stacktrace:
â”‚     [1] top-level scope
â”‚       @ none:1
â”” @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
â”Œ Error: doctest failure in ~/.julia/packages/WebDriver/bGMZk/src/01_structs/05_Session.jl:6-17
â”‚ 
â”‚ ```jldoctest
â”‚ julia> capabilities = Capabilities("chrome")
â”‚ Remote WebDriver Capabilities
â”‚ browserName: chrome
â”‚ julia> wd = RemoteWebDriver(capabilities, host = ENV["WEBDRIVER_HOST"], port = parse(Int, ENV["WEBDRIVER_PORT"]))
â”‚ Remote WebDriver
â”‚ julia> session = Session(wd)
â”‚ Session
â”‚ julia> isa(session, Session)
â”‚ true
â”‚ julia> delete!(session);
â”‚ 
â”‚ ```
â”‚ 
â”‚ Subexpression:
â”‚ 
â”‚ delete!(session);
â”‚ 
â”‚ Evaluated output:
â”‚ 
â”‚ ERROR: UndefVarError: session not defined
â”‚ Stacktrace:
â”‚  [1] top-level scope
â”‚    @ none:1
â”‚ 
â”‚ Expected output:
â”‚ 
â”‚ 
â”‚ 
â”‚   diff =
â”‚    Warning: Diff output requires color.
â”‚    ERROR: UndefVarError: session not defined
â”‚    Stacktrace:
â”‚     [1] top-level scope
â”‚       @ none:1
â”” @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
â”Œ Error: doctest failure in ~/.julia/packages/WebDriver/bGMZk/src/01_structs/06_Element.jl:9-20
â”‚ 
â”‚ ```jldoctest
â”‚ julia> capabilities = Capabilities("chrome")
â”‚ Remote WebDriver Capabilities
â”‚ browserName: chrome
â”‚ julia> wd = RemoteWebDriver(capabilities, host = ENV["WEBDRIVER_HOST"], port = parse(Int, ENV["WEBDRIVER_PORT"]))
â”‚ Remote WebDriver
â”‚ julia> session = Session(wd)
â”‚ Session
â”‚ julia> isa(session, Session)
â”‚ true
â”‚ julia> delete!(session);
â”‚ ```
â”‚ 
â”‚ Subexpression:
â”‚ 
â”‚ session = Session(wd)
â”‚ 
â”‚ Evaluated output:
â”‚ 
â”‚ ERROR: IOError(Base.IOError("connect: connection refused (ECONNREFUSED)", -111) during request(http://localhost:4444/wd/hub/session))
â”‚ 
â”‚ Stacktrace:
â”‚   [1] wait_connected(x::Sockets.TCPSocket)
â”‚     @ Sockets /workspace/srcdir/usr/share/julia/stdlib/v1.6/Sockets/src/Sockets.jl:532
â”‚   [2] connect
â”‚     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Sockets/src/Sockets.jl:567 [inlined]
â”‚   [3] connect(addr::Sockets.IPv4, port::UInt64)
â”‚     @ Sockets /workspace/srcdir/usr/share/julia/stdlib/v1.6/Sockets/src/Sockets.jl:553
â”‚   [4] getconnection(::Type{Sockets.TCPSocket}, host::SubString{String}, port::SubString{String}; keepalive::Bool, connect_timeout::Int64, kw::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :reached_redirect_limit), Tuple{Bool, Nothing, Bool}}})
â”‚     @ HTTP.ConnectionPool ~/.julia/packages/HTTP/IAI92/src/ConnectionPool.jl:630
â”‚   [5] newconnection(pod::HTTP.ConnectionPool.Pod, T::Type, host::SubString{String}, port::SubString{String}, pipeline_limit::Int64, require_ssl_verification::Bool, idle_timeout::Int64; kw::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}})
â”‚     @ HTTP.ConnectionPool ~/.julia/packages/HTTP/IAI92/src/ConnectionPool.jl:597
â”‚   [6] getconnection(::Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, host::SubString{String}, port::SubString{String}; connection_limit::Int64, pipeline_limit::Int64, idle_timeout::Int64, reuse_limit::Int64, require_ssl_verification::Bool, kw::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}})
â”‚     @ HTTP.ConnectionPool ~/.julia/packages/HTTP/IAI92/src/ConnectionPool.jl:541
â”‚   [7] request(::Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, url::HTTP.URIs.URI, req::HTTP.Messages.Request, body::String; proxy::Nothing, socket_type::Type, reuse_limit::Int64, kw::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}})
â”‚     @ HTTP.ConnectionRequest ~/.julia/packages/HTTP/IAI92/src/ConnectionRequest.jl:73
â”‚   [8] request(::Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, ::HTTP.URIs.URI, ::Vararg{Any, N} where N; kw::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}})
â”‚     @ HTTP.ExceptionRequest ~/.julia/packages/HTTP/IAI92/src/ExceptionRequest.jl:19
â”‚   [9] (::Base.var"#69#71"{Base.var"#69#70#72"{ExponentialBackOff, HTTP.RetryRequest.var"#2#3"{Bool, HTTP.Messages.Request}, typeof(HTTP.request)}})(::Type, ::Vararg{Any, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}})
â”‚     @ Base ./error.jl:301
â”‚  [10] #request#1
â”‚     @ ~/.julia/packages/HTTP/IAI92/src/RetryRequest.jl:44 [inlined]
â”‚  [11] request(::Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, method::String, url::HTTP.URIs.URI, headers::Vector{Pair{SubString{String}, SubString{String}}}, body::String; http_version::VersionNumber, target::String, parent::Nothing, iofunction::Nothing, kw::Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:reached_redirect_limit,), Tuple{Bool}}})
â”‚     @ HTTP.MessageRequest ~/.julia/packages/HTTP/IAI92/src/MessageRequest.jl:51
â”‚  [12] request(::Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, method::String, url::HTTP.URIs.URI, headers::Vector{Pair{SubString{String}, SubString{String}}}, body::String; kw::Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:reached_redirect_limit,), Tuple{Bool}}})
â”‚     @ HTTP.BasicAuthRequest ~/.julia/packages/HTTP/IAI92/src/BasicAuthRequest.jl:28
â”‚  [13] request(::Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, method::String, url::HTTP.URIs.URI, headers::Vector{Pair{SubString{String}, SubString{String}}}, body::String; redirect_limit::Int64, forwardheaders::Bool, kw::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
â”‚     @ HTTP.RedirectRequest ~/.julia/packages/HTTP/IAI92/src/RedirectRequest.jl:24
â”‚  [14] request(::Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, method::String, url::HTTP.URIs.URI, headers::Vector{Pair{SubString{String}, SubString{String}}}, body::String)
â”‚     @ HTTP.RedirectRequest ~/.julia/packages/HTTP/IAI92/src/RedirectRequest.jl:21
â”‚  [15] request(method::String, url::String, h::Vector{Pair{String, String}}, b::String; headers::Vector{Pair{String, String}}, body::String, query::Nothing, kw::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
â”‚     @ HTTP ~/.julia/packages/HTTP/IAI92/src/HTTP.jl:314
â”‚  [16] request
â”‚     @ ~/.julia/packages/HTTP/IAI92/src/HTTP.jl:314 [inlined]
â”‚  [17] #post#14
â”‚     @ ~/.julia/packages/HTTP/IAI92/src/HTTP.jl:405 [inlined]
â”‚  [18] post
â”‚     @ ~/.julia/packages/HTTP/IAI92/src/HTTP.jl:405 [inlined]
â”‚  [19] Session(wd::RemoteWebDriver{Capabilities{Nothing, Nothing, Nothing, Nothing}})
â”‚     @ WebDriver ~/.julia/packages/WebDriver/bGMZk/src/01_structs/05_Session.jl:26
â”‚  [20] top-level scope
â”‚     @ none:1
â”‚ 
â”‚ Expected output:
â”‚ 
â”‚ Session
â”‚ 
â”‚   diff =
â”‚    Warning: Diff output requires color.
â”‚    SessionERROR: IOError(Base.IOError("connect: connection refused (ECONNREFUSED)", -111) during request(http://localhost:4444/wd/hub/session))
â”‚    
â”‚    Stacktrace:
â”‚      [1] wait_connected(x::Sockets.TCPSocket)
â”‚        @ Sockets /workspace/srcdir/usr/share/julia/stdlib/v1.6/Sockets/src/Sockets.jl:532
â”‚      [2] connect
â”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Sockets/src/Sockets.jl:567 [inlined]
â”‚      [3] connect(addr::Sockets.IPv4, port::UInt64)
â”‚        @ Sockets /workspace/srcdir/usr/share/julia/stdlib/v1.6/Sockets/src/Sockets.jl:553
â”‚      [4] getconnection(::Type{Sockets.TCPSocket}, host::SubString{String}, port::SubString{String}; keepalive::Bool, connect_timeout::Int64, kw::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :reached_redirect_limit), Tuple{Bool, Nothing, Bool}}})
â”‚        @ HTTP.ConnectionPool ~/.julia/packages/HTTP/IAI92/src/ConnectionPool.jl:630
â”‚      [5] newconnection(pod::HTTP.ConnectionPool.Pod, T::Type, host::SubString{String}, port::SubString{String}, pipeline_limit::Int64, require_ssl_verification::Bool, idle_timeout::Int64; kw::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}})
â”‚        @ HTTP.ConnectionPool ~/.julia/packages/HTTP/IAI92/src/ConnectionPool.jl:597
â”‚      [6] getconnection(::Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, host::SubString{String}, port::SubString{String}; connection_limit::Int64, pipeline_limit::Int64, idle_timeout::Int64, reuse_limit::Int64, require_ssl_verification::Bool, kw::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}})
â”‚        @ HTTP.ConnectionPool ~/.julia/packages/HTTP/IAI92/src/ConnectionPool.jl:541
â”‚      [7] request(::Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, url::HTTP.URIs.URI, req::HTTP.Messages.Request, body::String; proxy::Nothing, socket_type::Type, reuse_limit::Int64, kw::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}})
â”‚        @ HTTP.ConnectionRequest ~/.julia/packages/HTTP/IAI92/src/ConnectionRequest.jl:73
â”‚      [8] request(::Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, ::HTTP.URIs.URI, ::Vararg{Any, N} where N; kw::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}})
â”‚        @ HTTP.ExceptionRequest ~/.julia/packages/HTTP/IAI92/src/ExceptionRequest.jl:19
â”‚      [9] (::Base.var"#69#71"{Base.var"#69#70#72"{ExponentialBackOff, HTTP.RetryRequest.var"#2#3"{Bool, HTTP.Messages.Request}, typeof(HTTP.request)}})(::Type, ::Vararg{Any, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}})
â”‚        @ Base ./error.jl:301
â”‚     [10] #request#1
â”‚        @ ~/.julia/packages/HTTP/IAI92/src/RetryRequest.jl:44 [inlined]
â”‚     [11] request(::Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, method::String, url::HTTP.URIs.URI, headers::Vector{Pair{SubString{String}, SubString{String}}}, body::String; http_version::VersionNumber, target::String, parent::Nothing, iofunction::Nothing, kw::Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:reached_redirect_limit,), Tuple{Bool}}})
â”‚        @ HTTP.MessageRequest ~/.julia/packages/HTTP/IAI92/src/MessageRequest.jl:51
â”‚     [12] request(::Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, method::String, url::HTTP.URIs.URI, headers::Vector{Pair{SubString{String}, SubString{String}}}, body::String; kw::Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:reached_redirect_limit,), Tuple{Bool}}})
â”‚        @ HTTP.BasicAuthRequest ~/.julia/packages/HTTP/IAI92/src/BasicAuthRequest.jl:28
â”‚     [13] request(::Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, method::String, url::HTTP.URIs.URI, headers::Vector{Pair{SubString{String}, SubString{String}}}, body::String; redirect_limit::Int64, forwardheaders::Bool, kw::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
â”‚        @ HTTP.RedirectRequest ~/.julia/packages/HTTP/IAI92/src/RedirectRequest.jl:24
â”‚     [14] request(::Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, method::String, url::HTTP.URIs.URI, headers::Vector{Pair{SubString{String}, SubString{String}}}, body::String)
â”‚        @ HTTP.RedirectRequest ~/.julia/packages/HTTP/IAI92/src/RedirectRequest.jl:21
â”‚     [15] request(method::String, url::String, h::Vector{Pair{String, String}}, b::String; headers::Vector{Pair{String, String}}, body::String, query::Nothing, kw::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
â”‚        @ HTTP ~/.julia/packages/HTTP/IAI92/src/HTTP.jl:314
â”‚     [16] request
â”‚        @ ~/.julia/packages/HTTP/IAI92/src/HTTP.jl:314 [inlined]
â”‚     [17] #post#14
â”‚        @ ~/.julia/packages/HTTP/IAI92/src/HTTP.jl:405 [inlined]
â”‚     [18] post
â”‚        @ ~/.julia/packages/HTTP/IAI92/src/HTTP.jl:405 [inlined]
â”‚     [19] Session(wd::RemoteWebDriver{Capabilities{Nothing, Nothing, Nothing, Nothing}})
â”‚        @ WebDriver ~/.julia/packages/WebDriver/bGMZk/src/01_structs/05_Session.jl:26
â”‚     [20] top-level scope
â”‚        @ none:1
â”” @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
â”Œ Error: doctest failure in ~/.julia/packages/WebDriver/bGMZk/src/01_structs/06_Element.jl:9-20
â”‚ 
â”‚ ```jldoctest
â”‚ julia> capabilities = Capabilities("chrome")
â”‚ Remote WebDriver Capabilities
â”‚ browserName: chrome
â”‚ julia> wd = RemoteWebDriver(capabilities, host = ENV["WEBDRIVER_HOST"], port = parse(Int, ENV["WEBDRIVER_PORT"]))
â”‚ Remote WebDriver
â”‚ julia> session = Session(wd)
â”‚ Session
â”‚ julia> isa(session, Session)
â”‚ true
â”‚ julia> delete!(session);
â”‚ ```
â”‚ 
â”‚ Subexpression:
â”‚ 
â”‚ isa(session, Session)
â”‚ 
â”‚ Evaluated output:
â”‚ 
â”‚ ERROR: UndefVarError: session not defined
â”‚ Stacktrace:
â”‚  [1] top-level scope
â”‚    @ none:1
â”‚ 
â”‚ Expected output:
â”‚ 
â”‚ true
â”‚ 
â”‚   diff =
â”‚    Warning: Diff output requires color.
â”‚    trueERROR: UndefVarError: session not defined
â”‚    Stacktrace:
â”‚     [1] top-level scope
â”‚       @ none:1
â”” @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
â”Œ Error: doctest failure in ~/.julia/packages/WebDriver/bGMZk/src/01_structs/06_Element.jl:9-20
â”‚ 
â”‚ ```jldoctest
â”‚ julia> capabilities = Capabilities("chrome")
â”‚ Remote WebDriver Capabilities
â”‚ browserName: chrome
â”‚ julia> wd = RemoteWebDriver(capabilities, host = ENV["WEBDRIVER_HOST"], port = parse(Int, ENV["WEBDRIVER_PORT"]))
â”‚ Remote WebDriver
â”‚ julia> session = Session(wd)
â”‚ Session
â”‚ julia> isa(session, Session)
â”‚ true
â”‚ julia> delete!(session);
â”‚ ```
â”‚ 
â”‚ Subexpression:
â”‚ 
â”‚ delete!(session);
â”‚ 
â”‚ Evaluated output:
â”‚ 
â”‚ ERROR: UndefVarError: session not defined
â”‚ Stacktrace:
â”‚  [1] top-level scope
â”‚    @ none:1
â”‚ 
â”‚ Expected output:
â”‚ 
â”‚ 
â”‚ 
â”‚   diff =
â”‚    Warning: Diff output requires color.
â”‚    ERROR: UndefVarError: session not defined
â”‚    Stacktrace:
â”‚     [1] top-level scope
â”‚       @ none:1
â”” @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
â”Œ Error: doctest failure in ~/.julia/packages/WebDriver/bGMZk/src/01_structs/04_WebDriver.jl:10-18
â”‚ 
â”‚ ```jldoctest
â”‚ julia> capabilities = Capabilities("chrome")
â”‚ Remote WebDriver Capabilities
â”‚ browserName: chrome
â”‚ julia> wd = RemoteWebDriver(capabilities, host = ENV["WEBDRIVER_HOST"], port = parse(Int, ENV["WEBDRIVER_PORT"]))
â”‚ Remote WebDriver
â”‚ julia> status(wd) # Ready to accept new sessions?
â”‚ true
â”‚ ```
â”‚ 
â”‚ Subexpression:
â”‚ 
â”‚ status(wd) # Ready to accept new sessions?
â”‚ 
â”‚ Evaluated output:
â”‚ 
â”‚ ERROR: IOError(Base.IOError("connect: connection refused (ECONNREFUSED)", -111) during request(http://localhost:4444/wd/hub/status))
â”‚ 
â”‚ Stacktrace:
â”‚   [1] wait_connected(x::Sockets.TCPSocket)
â”‚     @ Sockets /workspace/srcdir/usr/share/julia/stdlib/v1.6/Sockets/src/Sockets.jl:532
â”‚   [2] connect
â”‚     @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Sockets/src/Sockets.jl:567 [inlined]
â”‚   [3] connect(addr::Sockets.IPv4, port::UInt64)
â”‚     @ Sockets /workspace/srcdir/usr/share/julia/stdlib/v1.6/Sockets/src/Sockets.jl:553
â”‚   [4] getconnection(::Type{Sockets.TCPSocket}, host::SubString{String}, port::SubString{String}; keepalive::Bool, connect_timeout::Int64, kw::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :reached_redirect_limit), Tuple{Bool, Nothing, Bool}}})
â”‚     @ HTTP.ConnectionPool ~/.julia/packages/HTTP/IAI92/src/ConnectionPool.jl:630
â”‚   [5] newconnection(pod::HTTP.ConnectionPool.Pod, T::Type, host::SubString{String}, port::SubString{String}, pipeline_limit::Int64, require_ssl_verification::Bool, idle_timeout::Int64; kw::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}})
â”‚     @ HTTP.ConnectionPool ~/.julia/packages/HTTP/IAI92/src/ConnectionPool.jl:597
â”‚   [6] getconnection(::Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, host::SubString{String}, port::SubString{String}; connection_limit::Int64, pipeline_limit::Int64, idle_timeout::Int64, reuse_limit::Int64, require_ssl_verification::Bool, kw::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}})
â”‚     @ HTTP.ConnectionPool ~/.julia/packages/HTTP/IAI92/src/ConnectionPool.jl:541
â”‚   [7] request(::Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, url::HTTP.URIs.URI, req::HTTP.Messages.Request, body::Vector{UInt8}; proxy::Nothing, socket_type::Type, reuse_limit::Int64, kw::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}})
â”‚     @ HTTP.ConnectionRequest ~/.julia/packages/HTTP/IAI92/src/ConnectionRequest.jl:73
â”‚   [8] request(::Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, ::HTTP.URIs.URI, ::Vararg{Any, N} where N; kw::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}})
â”‚     @ HTTP.ExceptionRequest ~/.julia/packages/HTTP/IAI92/src/ExceptionRequest.jl:19
â”‚   [9] (::Base.var"#69#71"{Base.var"#69#70#72"{ExponentialBackOff, HTTP.RetryRequest.var"#2#3"{Bool, HTTP.Messages.Request}, typeof(HTTP.request)}})(::Type, ::Vararg{Any, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}})
â”‚     @ Base ./error.jl:301
â”‚  [10] #request#1
â”‚     @ ~/.julia/packages/HTTP/IAI92/src/RetryRequest.jl:44 [inlined]
â”‚  [11] request(::Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, method::String, url::HTTP.URIs.URI, headers::Vector{Pair{SubString{String}, SubString{String}}}, body::Vector{UInt8}; http_version::VersionNumber, target::String, parent::Nothing, iofunction::Nothing, kw::Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:reached_redirect_limit,), Tuple{Bool}}})
â”‚     @ HTTP.MessageRequest ~/.julia/packages/HTTP/IAI92/src/MessageRequest.jl:51
â”‚  [12] request(::Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, method::String, url::HTTP.URIs.URI, headers::Vector{Pair{SubString{String}, SubString{String}}}, body::Vector{UInt8}; kw::Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:reached_redirect_limit,), Tuple{Bool}}})
â”‚     @ HTTP.BasicAuthRequest ~/.julia/packages/HTTP/IAI92/src/BasicAuthRequest.jl:28
â”‚  [13] request(::Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, method::String, url::HTTP.URIs.URI, headers::Vector{Pair{SubString{String}, SubString{String}}}, body::Vector{UInt8}; redirect_limit::Int64, forwardheaders::Bool, kw::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
â”‚     @ HTTP.RedirectRequest ~/.julia/packages/HTTP/IAI92/src/RedirectRequest.jl:24
â”‚  [14] request(::Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, method::String, url::HTTP.URIs.URI, headers::Vector{Pair{SubString{String}, SubString{String}}}, body::Vector{UInt8})
â”‚     @ HTTP.RedirectRequest ~/.julia/packages/HTTP/IAI92/src/RedirectRequest.jl:21
â”‚  [15] request(method::String, url::String, h::Vector{Pair{String, String}}, b::Vector{UInt8}; headers::Vector{Pair{String, String}}, body::Vector{UInt8}, query::Nothing, kw::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
â”‚     @ HTTP ~/.julia/packages/HTTP/IAI92/src/HTTP.jl:314
â”‚  [16] request
â”‚     @ ~/.julia/packages/HTTP/IAI92/src/HTTP.jl:314 [inlined]
â”‚  [17] #get#12
â”‚     @ ~/.julia/packages/HTTP/IAI92/src/HTTP.jl:391 [inlined]
â”‚  [18] get
â”‚     @ ~/.julia/packages/HTTP/IAI92/src/HTTP.jl:391 [inlined]
â”‚  [19] status(wd::RemoteWebDriver{Capabilities{Nothing, Nothing, Nothing, Nothing}})
â”‚     @ WebDriver ~/.julia/packages/WebDriver/bGMZk/src/02_commands/01_Sessions/03_Status.jl:8
â”‚  [20] top-level scope
â”‚     @ none:1
â”‚ 
â”‚ Expected output:
â”‚ 
â”‚ true
â”‚ 
â”‚   diff =
â”‚    Warning: Diff output requires color.
â”‚    trueERROR: IOError(Base.IOError("connect: connection refused (ECONNREFUSED)", -111) during request(http://localhost:4444/wd/hub/status))
â”‚    
â”‚    Stacktrace:
â”‚      [1] wait_connected(x::Sockets.TCPSocket)
â”‚        @ Sockets /workspace/srcdir/usr/share/julia/stdlib/v1.6/Sockets/src/Sockets.jl:532
â”‚      [2] connect
â”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Sockets/src/Sockets.jl:567 [inlined]
â”‚      [3] connect(addr::Sockets.IPv4, port::UInt64)
â”‚        @ Sockets /workspace/srcdir/usr/share/julia/stdlib/v1.6/Sockets/src/Sockets.jl:553
â”‚      [4] getconnection(::Type{Sockets.TCPSocket}, host::SubString{String}, port::SubString{String}; keepalive::Bool, connect_timeout::Int64, kw::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction, :reached_redirect_limit), Tuple{Bool, Nothing, Bool}}})
â”‚        @ HTTP.ConnectionPool ~/.julia/packages/HTTP/IAI92/src/ConnectionPool.jl:630
â”‚      [5] newconnection(pod::HTTP.ConnectionPool.Pod, T::Type, host::SubString{String}, port::SubString{String}, pipeline_limit::Int64, require_ssl_verification::Bool, idle_timeout::Int64; kw::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}})
â”‚        @ HTTP.ConnectionPool ~/.julia/packages/HTTP/IAI92/src/ConnectionPool.jl:597
â”‚      [6] getconnection(::Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, host::SubString{String}, port::SubString{String}; connection_limit::Int64, pipeline_limit::Int64, idle_timeout::Int64, reuse_limit::Int64, require_ssl_verification::Bool, kw::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}})
â”‚        @ HTTP.ConnectionPool ~/.julia/packages/HTTP/IAI92/src/ConnectionPool.jl:541
â”‚      [7] request(::Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, url::HTTP.URIs.URI, req::HTTP.Messages.Request, body::Vector{UInt8}; proxy::Nothing, socket_type::Type, reuse_limit::Int64, kw::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}})
â”‚        @ HTTP.ConnectionRequest ~/.julia/packages/HTTP/IAI92/src/ConnectionRequest.jl:73
â”‚      [8] request(::Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, ::HTTP.URIs.URI, ::Vararg{Any, N} where N; kw::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}})
â”‚        @ HTTP.ExceptionRequest ~/.julia/packages/HTTP/IAI92/src/ExceptionRequest.jl:19
â”‚      [9] (::Base.var"#69#71"{Base.var"#69#70#72"{ExponentialBackOff, HTTP.RetryRequest.var"#2#3"{Bool, HTTP.Messages.Request}, typeof(HTTP.request)}})(::Type, ::Vararg{Any, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}})
â”‚        @ Base ./error.jl:301
â”‚     [10] #request#1
â”‚        @ ~/.julia/packages/HTTP/IAI92/src/RetryRequest.jl:44 [inlined]
â”‚     [11] request(::Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, method::String, url::HTTP.URIs.URI, headers::Vector{Pair{SubString{String}, SubString{String}}}, body::Vector{UInt8}; http_version::VersionNumber, target::String, parent::Nothing, iofunction::Nothing, kw::Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:reached_redirect_limit,), Tuple{Bool}}})
â”‚        @ HTTP.MessageRequest ~/.julia/packages/HTTP/IAI92/src/MessageRequest.jl:51
â”‚     [12] request(::Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, method::String, url::HTTP.URIs.URI, headers::Vector{Pair{SubString{String}, SubString{String}}}, body::Vector{UInt8}; kw::Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:reached_redirect_limit,), Tuple{Bool}}})
â”‚        @ HTTP.BasicAuthRequest ~/.julia/packages/HTTP/IAI92/src/BasicAuthRequest.jl:28
â”‚     [13] request(::Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, method::String, url::HTTP.URIs.URI, headers::Vector{Pair{SubString{String}, SubString{String}}}, body::Vector{UInt8}; redirect_limit::Int64, forwardheaders::Bool, kw::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
â”‚        @ HTTP.RedirectRequest ~/.julia/packages/HTTP/IAI92/src/RedirectRequest.jl:24
â”‚     [14] request(::Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, method::String, url::HTTP.URIs.URI, headers::Vector{Pair{SubString{String}, SubString{String}}}, body::Vector{UInt8})
â”‚        @ HTTP.RedirectRequest ~/.julia/packages/HTTP/IAI92/src/RedirectRequest.jl:21
â”‚     [15] request(method::String, url::String, h::Vector{Pair{String, String}}, b::Vector{UInt8}; headers::Vector{Pair{String, String}}, body::Vector{UInt8}, query::Nothing, kw::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
â”‚        @ HTTP ~/.julia/packages/HTTP/IAI92/src/HTTP.jl:314
â”‚     [16] request
â”‚        @ ~/.julia/packages/HTTP/IAI92/src/HTTP.jl:314 [inlined]
â”‚     [17] #get#12
â”‚        @ ~/.julia/packages/HTTP/IAI92/src/HTTP.jl:391 [inlined]
â”‚     [18] get
â”‚        @ ~/.julia/packages/HTTP/IAI92/src/HTTP.jl:391 [inlined]
â”‚     [19] status(wd::RemoteWebDriver{Capabilities{Nothing, Nothing, Nothing, Nothing}})
â”‚        @ WebDriver ~/.julia/packages/WebDriver/bGMZk/src/02_commands/01_Sessions/03_Status.jl:8
â”‚     [20] top-level scope
â”‚        @ none:1
â”” @ Documenter.DocTests ~/.julia/packages/Documenter/pjwqp/src/DocTests.jl:369
â”Œ Error: Doctesting failed
â”‚   exception =
â”‚    `makedocs` encountered a doctest error. Terminating build
â”‚    Stacktrace:
â”‚      [1] error(s::String)
â”‚        @ Base ./error.jl:33
â”‚      [2] runner(#unused#::Type{Documenter.Builder.Doctest}, doc::Documenter.Documents.Document)
â”‚        @ Documenter.Builder ~/.julia/packages/Documenter/pjwqp/src/Builder.jl:217
â”‚      [3] dispatch(#unused#::Type{Documenter.Builder.DocumentPipeline}, x::Documenter.Documents.Document)
â”‚        @ Documenter.Utilities.Selectors ~/.julia/packages/Documenter/pjwqp/src/Utilities/Selectors.jl:167
â”‚      [4] #2
â”‚        @ ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:241 [inlined]
â”‚      [5] cd(f::Documenter.var"#2#3"{Documenter.Documents.Document}, dir::String)
â”‚        @ Base.Filesystem ./file.jl:104
â”‚      [6] makedocs(; debug::Bool, format::Documenter.Writers.HTMLWriter.HTML, kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{5, Symbol}, NamedTuple{(:root, :source, :sitename, :doctest, :modules), Tuple{String, String, String, Symbol, Vector{Module}}}})
â”‚        @ Documenter ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:240
â”‚      [7] (::Documenter.var"#all_doctests#31"{Bool, Vector{Module}})()
â”‚        @ Documenter ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:802
â”‚      [8] macro expansion
â”‚        @ ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:818 [inlined]
â”‚      [9] macro expansion
â”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
â”‚     [10] doctest(source::String, modules::Vector{Module}; fix::Bool, testset::String)
â”‚        @ Documenter ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:818
â”‚     [11] doctest(package::Module; manual::Bool, testset::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
â”‚        @ Documenter ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:761
â”‚     [12] doctest(package::Module)
â”‚        @ Documenter ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:748
â”‚     [13] macro expansion
â”‚        @ ~/.julia/packages/WebDriver/bGMZk/test/runtests.jl:10 [inlined]
â”‚     [14] macro expansion
â”‚        @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
â”‚     [15] top-level scope
â”‚        @ ~/.julia/packages/WebDriver/bGMZk/test/runtests.jl:10
â”‚     [16] include(fname::String)
â”‚        @ Base.MainInclude ./client.jl:444
â”‚     [17] top-level scope
â”‚        @ none:6
â”‚     [18] eval(m::Module, e::Any)
â”‚        @ Core ./boot.jl:360
â”‚     [19] exec_options(opts::Base.JLOptions)
â”‚        @ Base ./client.jl:261
â”‚     [20] _start()
â”‚        @ Base ./client.jl:485
â”” @ Documenter ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:811
Doctests: WebDriver: Test Failed at /home/pkgeval/.julia/packages/Documenter/pjwqp/src/Documenter.jl:818
  Expression: all_doctests()
Stacktrace:
 [1] macro expansion
   @ ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:818 [inlined]
 [2] macro expansion
   @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
 [3] doctest(source::String, modules::Vector{Module}; fix::Bool, testset::String)
   @ Documenter ~/.julia/packages/Documenter/pjwqp/src/Documenter.jl:818
Test Summary:         | Fail  Total
WebDriver             |    1      1
  Doctests: WebDriver |    1      1
ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 0 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/WebDriver/bGMZk/test/runtests.jl:9
ERROR: Package WebDriver errored during testing
Stacktrace:
  [1] pkgerror(msg::String)
    @ Pkg.Types /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1651
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:334
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:321
  [5] #test#62
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:71 [inlined]
  [6] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:70 [inlined]
  [7] #test#61
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [8] test
    @ /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:68 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67
 [10] test(pkg::String)
    @ Pkg.API /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67
 [11] top-level scope
    @ none:39
CPU usage: 66.77s (54.53s user, 12.14s kernel)

Network usage:
- eth0: 1.107 MiB received, 61.574 KiB sent
