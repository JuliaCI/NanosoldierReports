Julia Version 1.6.0-DEV.1262
Commit 8078eacab7 (2020-10-17 01:19 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807

   Resolving package versions...
   Installed FileIO â”€â”€â”€â”€â”€â”€ v1.4.3
   Installed GAFramework â”€ v0.4.1
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [0dad84c5] + ArgTools
  [56f22d72] + Artifacts
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [f43a241f] + Downloads
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [b27032c2] + LibCURL
  [deac9b47] + LibCURL_jll
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [14a3606d] + MozillaCACerts_jll
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
Precompiling project... (tip: to disable auto-precompilation set ENV["JULIA_PKG_PRECOMPILE_AUTO"]=0)
[90m[32m  âœ“ [39mFileIO[39m
[32m  âœ“ [39mGAFramework
2 dependencies successfully precompiled
     Testing GAFramework
Status `/tmp/jl_PUvI9X/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_PUvI9X/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [0dad84c5] ArgTools
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [f43a241f] Downloads
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [b27032c2] LibCURL
  [deac9b47] LibCURL_jll
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [14a3606d] MozillaCACerts_jll
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
     Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21719032098050056
curgen: 20 fitness: 0.21723177227008938
curgen: 30 fitness: 0.21723177227008938
curgen: 40 fitness: 0.21723177227008938
curgen: 50 fitness: 0.2172333362171809
CoordinateCreature{Vector{Float64}}([-0.22246697249527023], -0.2172333362171809) -0.22246697249527023 -0.2172333362171809
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.256645814868083
curgen: 100 fitness: 3.2582325194642334
curgen: 150 fitness: 3.258391511946703
curgen: 200 fitness: 3.258391511946703
curgen: 250 fitness: 3.258404061228913
curgen: 300 fitness: 3.258405387714709
curgen: 350 fitness: 3.258405387714709
curgen: 400 fitness: 3.2584277761924456
curgen: 450 fitness: 3.258466451326072
curgen: 500 fitness: 3.2584700308828927
CoordinateCreature{Vector{Float64}}([-0.2226127256640771, 0.22273758973143065, 0.22315478601958588, -0.22254275932326464, -0.2225579040981097, -0.22282869926821222, -0.22227496811692812, 0.22227016860694385, -0.22247213649755299, 0.22256864651740507, -0.22236891408118348, -0.2225081719292346, 0.22283078750579907, 0.22258486162122643, 0.22241356613345767], -3.2584700308828927) [-0.2226127256640771, 0.22273758973143065, 0.22315478601958588, -0.22254275932326464, -0.2225579040981097, -0.22282869926821222, -0.22227496811692812, 0.22227016860694385, -0.22247213649755299, 0.22256864651740507, -0.22236891408118348, -0.2225081719292346, 0.22283078750579907, 0.22258486162122643, 0.22241356613345767] -3.2584700308828927
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0013865132295904914
curgen: 100 fitness: -0.0010191328825044366
curgen: 150 fitness: -0.0010191328825044366
curgen: 200 fitness: -0.000801210518886819
curgen: 250 fitness: -0.0007548416665486002
curgen: 300 fitness: -0.0007335645874491092
curgen: 350 fitness: -0.0006836669006133889
curgen: 400 fitness: -0.0005072421558338647
curgen: 450 fitness: -0.0005072421558338647
curgen: 500 fitness: -0.00042825103730592673
CoordinateCreature{Vector{Float64}}([-0.00019421403176147687, 9.716500642200894e-5, -0.0001907239973331365, -0.00017720606353488393, 0.00010709547448378308, -0.0003699863761253107, -0.00024735474767135964, 0.0008831876382733427, -0.00012554624607110802, -0.0003462881439790364, -0.0004693571100695959, 0.0006351601156769221, 2.191651459851176e-5, 0.0005008659741604813, -0.00020823478375609893], 0.00042825103730592673) [-0.00019421403176147687, 9.716500642200894e-5, -0.0001907239973331365, -0.00017720606353488393, 0.00010709547448378308, -0.0003699863761253107, -0.00024735474767135964, 0.0008831876382733427, -0.00012554624607110802, -0.0003462881439790364, -0.0004693571100695959, 0.0006351601156769221, 2.191651459851176e-5, 0.0005008659741604813, -0.00020823478375609893] 0.00042825103730592673
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
     Testing GAFramework tests passed 
