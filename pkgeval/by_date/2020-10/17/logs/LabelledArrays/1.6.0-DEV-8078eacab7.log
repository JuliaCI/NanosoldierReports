Julia Version 1.6.0-DEV.1262
Commit 8078eacab7 (2020-10-17 01:19 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807

   Resolving package versions...
   Installed LabelledArrays â”€ v1.3.0
   Installed MacroTools â”€â”€â”€â”€â”€ v0.5.5
   Installed ArrayInterface â”€ v2.13.6
   Installed Requires â”€â”€â”€â”€â”€â”€â”€ v1.1.0
   Installed StaticArrays â”€â”€â”€ v0.12.4
Updating `~/.julia/environments/v1.6/Project.toml`
  [2ee39098] + LabelledArrays v1.3.0
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [4fba245c] + ArrayInterface v2.13.6
  [2ee39098] + LabelledArrays v1.3.0
  [1914dd2f] + MacroTools v0.5.5
  [ae029012] + Requires v1.1.0
  [90137ffa] + StaticArrays v0.12.4
  [2a0f44e3] + Base64
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [d6f4376e] + Markdown
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [cf7118a7] + UUIDs
Precompiling project... (tip: to disable auto-precompilation set ENV["JULIA_PKG_PRECOMPILE_AUTO"]=0)
[90m[32m  âœ“ [39mRequires[39m
[90m[32m  âœ“ [39mArrayInterface[39m
[90m[32m  âœ“ [39mMacroTools[39m
[90m[32m  âœ“ [39mStaticArrays[39m
[32m  âœ“ [39mLabelledArrays
5 dependencies successfully precompiled
     Testing LabelledArrays
Status `/tmp/jl_STVcdZ/Project.toml`
  [4fba245c] ArrayInterface v2.13.6
  [2ee39098] LabelledArrays v1.3.0
  [1914dd2f] MacroTools v0.5.5
  [1dea7af3] OrdinaryDiffEq v5.43.0
  [90137ffa] StaticArrays v0.12.4
  [b77e0a4c] InteractiveUtils
  [37e2e46d] LinearAlgebra
  [8dfed614] Test
Status `/tmp/jl_STVcdZ/Manifest.toml`
  [79e6a3ab] Adapt v2.3.0
  [ec485272] ArnoldiMethod v0.0.4
  [4fba245c] ArrayInterface v2.13.6
  [d360d2e6] ChainRulesCore v0.9.17
  [bbf7d656] CommonSubexpressions v0.3.0
  [34da2185] Compat v3.20.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.4+0
  [adafc99b] CpuId v0.2.2
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.18.7
  [e2d170a0] DataValueInterfaces v1.0.0
  [2b5f629d] DiffEqBase v6.48.1
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [b4f34e82] Distances v0.9.2
  [ffbed154] DocStringExtensions v0.8.3
  [d4d017d3] ExponentialUtilities v1.8.0
  [9aa1b823] FastClosures v0.3.2
  [6a86dc24] FiniteDiff v2.7.0
  [f6369f11] ForwardDiff v0.10.12
  [069b7b12] FunctionWrappers v1.1.1
  [01680d73] GenericSVD v0.3.0
  [d25df0c9] Inflate v0.1.2
  [42fd0dbc] IterativeSolvers v0.8.4
  [82899510] IteratorInterfaceExtensions v1.0.0
  [692b3bcd] JLLWrappers v1.1.2
  [2ee39098] LabelledArrays v1.3.0
  [093fc24a] LightGraphs v1.3.0
  [d3d80556] LineSearches v7.1.0
  [bdcacae8] LoopVectorization v0.8.26
  [1914dd2f] MacroTools v0.5.5
  [46d2c3a1] MuladdMacro v0.2.2
  [d41bc354] NLSolversBase v7.7.1
  [2774e3e8] NLsolve v4.4.1
  [77ba4419] NaNMath v0.3.4
  [6fe1bfb0] OffsetArrays v1.3.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+4
  [bac558e1] OrderedCollections v1.3.1
  [1dea7af3] OrdinaryDiffEq v5.43.0
  [d96e819e] Parameters v0.12.1
  [3cdcf5f2] RecipesBase v1.1.0
  [731186ca] RecursiveArrayTools v2.7.2
  [f2c3362d] RecursiveFactorization v0.1.4
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.1.0
  [f2b01f46] Roots v1.0.5
  [21efa798] SIMDPirates v0.8.25
  [476501e8] SLEEFPirates v0.5.5
  [699a6c99] SimpleTraits v0.9.3
  [47a9eef4] SparseDiffTools v1.10.0
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.4
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.1.0
  [a2a6695c] TreeViews v0.3.0
  [3a884ed6] UnPack v1.0.2
  [3d5dd08c] VectorizationBase v0.12.33
  [19fa3120] VertexSafeGraphs v0.1.2
  [700de1a5] ZygoteRules v0.2.0
  [0dad84c5] ArgTools
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [f43a241f] Downloads
  [b77e0a4c] InteractiveUtils
  [b27032c2] LibCURL
  [deac9b47] LibCURL_jll
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [14a3606d] MozillaCACerts_jll
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
     Testing Running tests...
3-element SLArray{Tuple{3}, Int64, 1, 3, (:a, :b, :c)} with indices SOneTo(3):
 :a => 1
 :b => 2
 :c => 33-element SLArray{Tuple{3}, Float64, 1, 3, (a = 1:2, b = 3)} with indices SOneTo(3):
 :a => 1.0
 :a => 2.0
 :b => 3.03-element SLArray{Tuple{3}, Float64, 1, 3, (a = 1:2, b = 2:3)} with indices SOneTo(3):
 :a => 1.0
 :a => 2.0
 :b => 3.02-element SLArray{Tuple{2}, Int64, 1, 2, (a = 1, b = 2)} with indices SOneTo(2):
 :a => 1
 :b => 22Ã—2 SLArray{Tuple{2, 2}, Int64, 2, 4, (a = (2, Colon()), b = 3)} with indices SOneTo(2)Ã—SOneTo(2):
 nothing => 1  :b => 3
      :a => 2  :a => 4Test Summary: | Pass  Total
SLArrays      |   40     40
 15.158529 seconds (16.10 M allocations: 937.103 MiB, 4.63% gc time, 98.08% compilation time)
3-element LArray{Float64, 1, Vector{Float64}, (:a, :b, :c)}:
 :a => 1.0
 :b => 2.0
 :c => 3.0(i, s) = (1, :a)
(i, s) = (2, :b)
(i, s) = (3, :c)
  0.004398 seconds (898 allocations: 59.039 KiB, 99.53% compilation time)
  0.000011 seconds (7 allocations: 208 bytes)
  0.007579 seconds (3.65 k allocations: 253.384 KiB, 99.74% compilation time)
  0.000009 seconds (7 allocations: 208 bytes)
Variables
  #self#::Core.Const(var"#g#27"())
  x::LArray{Float64, 1, Vector{Float64}, (:a, :b, :c)}

Body::Float64
1 â”€ %1 = Base.getproperty(x, :a)::Float64
â””â”€â”€      return %1
Variables
  #unused#::Core.Const(Core.var"#Type##kw"())
  @_2::NamedTuple{(:a, :b, :c, :d), NTuple{4, Int64}}
  @_3::Type{LArray}
  size::Tuple{Int64, Int64}
  kwargs...::Base.Iterators.Pairs{Symbol, Int64, NTuple{4, Symbol}, NamedTuple{(:a, :b, :c, :d), NTuple{4, Int64}}}

Body::LArray{Int64, 2, Matrix{Int64}, (:a, :b, :c, :d)}
1 â”€      (kwargs... = Base.pairs(@_2))
â”‚   %2 = LabelledArrays.:(var"#LArray#7")(kwargs...::Core.PartialStruct(Base.Iterators.Pairs{Symbol, Int64, NTuple{4, Symbol}, NamedTuple{(:a, :b, :c, :d), NTuple{4, Int64}}}, Any[NamedTuple{(:a, :b, :c, :d), NTuple{4, Int64}}, Core.Const((:a, :b, :c, :d))]), @_3, size)::LArray{Int64, 2, Matrix{Int64}, (:a, :b, :c, :d)}
â””â”€â”€      return %2
Variables
  #self#::Core.Const(convert)
  #unused#::Type{NamedTuple}
  x::LArray{Int64, 2, Matrix{Int64}, (:a, :b, :c, :d)}
  tup::NTuple{4, Int64}

Body::NamedTuple{(:a, :b, :c, :d), NTuple{4, Int64}}
1 â”€ %1 = LabelledArrays.length($(Expr(:static_parameter, 4)))::Core.Const(4)
â”‚   %2 = Core.apply_type(LabelledArrays.NTuple, %1, $(Expr(:static_parameter, 1)))::Core.Const(NTuple{4, Int64})
â”‚        (tup = (%2)(x))
â”‚   %4 = $(Expr(:static_parameter, 4))::Core.Const((:a, :b, :c, :d))
â”‚   %5 = LabelledArrays.typeof(tup)::Core.Const(NTuple{4, Int64})
â”‚   %6 = Core.apply_type(LabelledArrays.NamedTuple, %4, %5)::Core.Const(NamedTuple{(:a, :b, :c, :d), NTuple{4, Int64}})
â”‚   %7 = (%6)(tup)::NamedTuple{(:a, :b, :c, :d), NTuple{4, Int64}}
â””â”€â”€      return %7
Variables
  #self#::Core.Const(collect)
  itr::Base.Generator{UnitRange{Int64}, LabelledArrays.var"#9#10"{(:a, :b, :c, :d), LArray{Int64, 2, Matrix{Int64}, (:a, :b, :c, :d)}}}
  @_3::Int64
  st::Int64
  v1::Pair{Symbol, Int64}
  y::UNION{NOTHING, TUPLE{PAIR{SYMBOL, INT64}, INT64}}
  et::Type{Pair{Symbol, Int64}}
  isz::Base.HasShape{1}
  @_9::Type{Pair{Symbol, Int64}}

Body::Vector{Pair{Symbol, Int64}}
1 â”€       Core.NewvarNode(:(@_3))
â”‚         Core.NewvarNode(:(st))
â”‚         Core.NewvarNode(:(v1))
â”‚         Core.NewvarNode(:(y))
â”‚         Core.NewvarNode(:(et))
â”‚   %6  = Base.getproperty(itr, :iter)::UnitRange{Int64}
â”‚         (isz = Base.IteratorSize(%6))
â”‚   %8  = (itr isa Base.Generator)::Core.Const(true)
â””â”€â”€       goto #4 if not %8
2 â”€ %10 = Base.getproperty(itr, :f)::LabelledArrays.var"#9#10"{(:a, :b, :c, :d), LArray{Int64, 2, Matrix{Int64}, (:a, :b, :c, :d)}}
â”‚   %11 = (%10 isa Base.Type)::Core.Const(false)
â””â”€â”€       goto #4 if not %11
3 â”€       Core.Const(:(@_9 = Base.getproperty(itr, :f)))
â””â”€â”€       Core.Const(:(goto %20))
4 â”„ %15 = Core.Compiler::Core.Const(Core.Compiler)
â”‚   %16 = Base.getproperty(%15, :return_type)::Core.Const(Core.Compiler.return_type)
â”‚   %17 = Base.typeof(itr)::Core.Const(Base.Generator{UnitRange{Int64}, LabelledArrays.var"#9#10"{(:a, :b, :c, :d), LArray{Int64, 2, Matrix{Int64}, (:a, :b, :c, :d)}}})
â”‚   %18 = Core.apply_type(Base.Tuple, %17)::Core.Const(Tuple{Base.Generator{UnitRange{Int64}, LabelledArrays.var"#9#10"{(:a, :b, :c, :d), LArray{Int64, 2, Matrix{Int64}, (:a, :b, :c, :d)}}}})
â”‚         (@_9 = (%16)(Base.first, %18))
â”‚         (et = @_9::Core.Const(Pair{Symbol, Int64}))
â”‚   %21 = (isz isa Base.SizeUnknown)::Core.Const(false)
â””â”€â”€       goto #6 if not %21
5 â”€       Core.Const(:(Core.apply_type(Base.Vector, et)))
â”‚         Core.Const(:((%23)()))
â”‚         Core.Const(:(Base.grow_to!(%24, itr)))
â””â”€â”€       Core.Const(:(return %25))
6 â”„       (y = Base.iterate(itr))
â”‚   %28 = (y === Base.nothing)::Bool
â””â”€â”€       goto #8 if not %28
7 â”€ %30 = et::Core.Const(Pair{Symbol, Int64})::Core.Const(Pair{Symbol, Int64})
â”‚   %31 = Base.getproperty(itr, :iter)::UnitRange{Int64}
â”‚   %32 = Base._array_for(%30, %31, isz)::Vector{Pair{Symbol, Int64}}
â””â”€â”€       return %32
8 â”€ %34 = Base.indexed_iterate(y::Tuple{Pair{Symbol, Int64}, Int64}, 1)::Core.PartialStruct(Tuple{Pair{Symbol, Int64}, Int64}, Any[Pair{Symbol, Int64}, Core.Const(2)])
â”‚         (v1 = Core.getfield(%34, 1))
â”‚         (@_3 = Core.getfield(%34, 2))
â”‚   %37 = Base.indexed_iterate(y::Tuple{Pair{Symbol, Int64}, Int64}, 2, @_3::Core.Const(2))::Core.PartialStruct(Tuple{Int64, Int64}, Any[Int64, Core.Const(3)])
â”‚         (st = Core.getfield(%37, 1))
â”‚   %39 = Base.typeof(v1)::Core.Const(Pair{Symbol, Int64})
â”‚   %40 = Base.getproperty(itr, :iter)::UnitRange{Int64}
â”‚   %41 = Base._array_for(%39, %40, isz)::Vector{Pair{Symbol, Int64}}
â”‚   %42 = v1::Pair{Symbol, Int64}
â”‚   %43 = Base.collect_to_with_first!(%41, %42, itr, st)::Vector{Pair{Symbol, Int64}}
â””â”€â”€       return %43
2Ã—2 LArray{Float64, 2, Matrix{Float64}, (:a, :b, :c, :d)}:
 :a => 5.0e-324  :c => 6.9301561371607e-310
 :b => 0.0       :d => 6.93011465076795e-3103-element LArray{Float64, 1, Vector{Float64}, (a = 1:2, b = 3)}:
 :a => 1.0
 :a => 2.0
 :b => 3.02-element LArray{Float64, 1, Vector{Float64}, (a = 1, b = 2)}:
 :a => 1.0
 :b => 2.02Ã—2 LArray{Int64, 2, Matrix{Int64}, (a = (2, Colon()), b = 2:3)}:
 nothing => 1  :b => 2
      :a => 3  :a => 4Test Summary: | Pass  Total
LArrays       |   51     51
  9.325010 seconds (17.42 M allocations: 973.217 MiB, 2.45% gc time, 92.57% compilation time)
ERROR: LoadError: LoadError: LoadError: LoadError: UndefVarError: arg not defined
Stacktrace:
  [1] macro expansion
    @ ~/.julia/packages/MacroTools/X77lQ/src/utils.jl:44 [inlined]
  [2] macro expansion
    @ ~/.julia/packages/MacroTools/X77lQ/src/match/macro.jl:18 [inlined]
  [3] shortdef1(ex::Expr)
    @ MacroTools ~/.julia/packages/MacroTools/X77lQ/src/utils.jl:240
  [4] prewalk
    @ ~/.julia/packages/MacroTools/X77lQ/src/utils.jl:126 [inlined]
  [5] (::MacroTools.var"#21#22"{typeof(MacroTools.shortdef1)})(x::Expr)
    @ MacroTools ~/.julia/packages/MacroTools/X77lQ/src/utils.jl:126
  [6] iterate
    @ ./generator.jl:47 [inlined]
  [7] collect_to!(dest::Vector{Expr}, itr::Base.Generator{Vector{Any}, MacroTools.var"#21#22"{typeof(MacroTools.shortdef1)}}, offs::Int64, st::Int64)
    @ Base ./array.jl:732
  [8] collect_to_with_first!(dest::Vector{Expr}, v1::Expr, itr::Base.Generator{Vector{Any}, MacroTools.var"#21#22"{typeof(MacroTools.shortdef1)}}, st::Int64)
    @ Base ./array.jl:710
  [9] _collect(c::Vector{Any}, itr::Base.Generator{Vector{Any}, MacroTools.var"#21#22"{typeof(MacroTools.shortdef1)}}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})
    @ Base ./array.jl:704
 [10] collect_similar(cont::Vector{Any}, itr::Base.Generator{Vector{Any}, MacroTools.var"#21#22"{typeof(MacroTools.shortdef1)}})
    @ Base ./array.jl:628
 [11] map(f::Function, A::Vector{Any})
    @ Base ./abstractarray.jl:2238
 [12] walk
    @ ~/.julia/packages/MacroTools/X77lQ/src/utils.jl:105 [inlined]
 [13] prewalk
    @ ~/.julia/packages/MacroTools/X77lQ/src/utils.jl:126 [inlined]
 [14] (::MacroTools.var"#21#22"{typeof(MacroTools.shortdef1)})(x::Expr)
    @ MacroTools ~/.julia/packages/MacroTools/X77lQ/src/utils.jl:126
 [15] iterate
    @ ./generator.jl:47 [inlined]
 [16] collect_to!(dest::Vector{LineNumberNode}, itr::Base.Generator{Vector{Any}, MacroTools.var"#21#22"{typeof(MacroTools.shortdef1)}}, offs::Int64, st::Int64)
    @ Base ./array.jl:732
 [17] collect_to_with_first!(dest::Vector{LineNumberNode}, v1::LineNumberNode, itr::Base.Generator{Vector{Any}, MacroTools.var"#21#22"{typeof(MacroTools.shortdef1)}}, st::Int64)
    @ Base ./array.jl:710
 [18] _collect(c::Vector{Any}, itr::Base.Generator{Vector{Any}, MacroTools.var"#21#22"{typeof(MacroTools.shortdef1)}}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})
    @ Base ./array.jl:704
 [19] collect_similar(cont::Vector{Any}, itr::Base.Generator{Vector{Any}, MacroTools.var"#21#22"{typeof(MacroTools.shortdef1)}})
    @ Base ./array.jl:628
 [20] map(f::Function, A::Vector{Any})
    @ Base ./abstractarray.jl:2238
 [21] walk
    @ ~/.julia/packages/MacroTools/X77lQ/src/utils.jl:105 [inlined]
 [22] prewalk
    @ ~/.julia/packages/MacroTools/X77lQ/src/utils.jl:126 [inlined]
 [23] (::MacroTools.var"#21#22"{typeof(MacroTools.shortdef1)})(x::Expr)
    @ MacroTools ~/.julia/packages/MacroTools/X77lQ/src/utils.jl:126
 [24] iterate
    @ ./generator.jl:47 [inlined]
 [25] collect_to!(dest::Vector{Expr}, itr::Base.Generator{Vector{Any}, MacroTools.var"#21#22"{typeof(MacroTools.shortdef1)}}, offs::Int64, st::Int64)
    @ Base ./array.jl:732
 [26] collect_to_with_first!(dest::Vector{Expr}, v1::Expr, itr::Base.Generator{Vector{Any}, MacroTools.var"#21#22"{typeof(MacroTools.shortdef1)}}, st::Int64)
    @ Base ./array.jl:710
 [27] _collect(c::Vector{Any}, itr::Base.Generator{Vector{Any}, MacroTools.var"#21#22"{typeof(MacroTools.shortdef1)}}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})
    @ Base ./array.jl:704
 [28] collect_similar(cont::Vector{Any}, itr::Base.Generator{Vector{Any}, MacroTools.var"#21#22"{typeof(MacroTools.shortdef1)}})
    @ Base ./array.jl:628
 [29] map(f::Function, A::Vector{Any})
    @ Base ./abstractarray.jl:2238
 [30] walk
    @ ~/.julia/packages/MacroTools/X77lQ/src/utils.jl:105 [inlined]
 [31] prewalk
    @ ~/.julia/packages/MacroTools/X77lQ/src/utils.jl:126 [inlined]
 [32] shortdef
    @ ~/.julia/packages/MacroTools/X77lQ/src/utils.jl:251 [inlined]
 [33] macro expansion
    @ ~/.julia/packages/MacroTools/X77lQ/src/match/macro.jl:72 [inlined]
 [34] gradm(ex::Expr, mut::Bool)
    @ ZygoteRules ~/.julia/packages/ZygoteRules/6nssF/src/adjoint.jl:24
 [35] @adjoint(__source__::LineNumberNode, __module__::Module, ex::Any)
    @ ZygoteRules ~/.julia/packages/ZygoteRules/6nssF/src/adjoint.jl:63
 [36] #macroexpand#47
    @ ./expr.jl:112 [inlined]
 [37] macroexpand(m::Module, x::Any)
    @ Base ./expr.jl:111
 [38] @require(__source__::LineNumberNode, __module__::Module, pkg::Any, expr::Any)
    @ Requires ~/.julia/packages/Requires/vyVBT/src/require.jl:90
 [39] include(mod::Module, _path::String)
    @ Base ./Base.jl:389
 [40] include(x::String)
    @ RecursiveArrayTools ~/.julia/packages/RecursiveArrayTools/BVS4M/src/RecursiveArrayTools.jl:3
 [41] top-level scope
    @ ~/.julia/packages/RecursiveArrayTools/BVS4M/src/RecursiveArrayTools.jl:14
 [42] include
    @ ./Base.jl:389 [inlined]
 [43] include_package_for_output(pkg::Base.PkgId, input::String, depot_path::Vector{String}, dl_load_path::Vector{String}, load_path::Vector{String}, concrete_deps::Vector{Pair{Base.PkgId, UInt64}}, source::String)
    @ Base ./loading.jl:1225
 [44] top-level scope
    @ none:1
 [45] eval
    @ ./boot.jl:360 [inlined]
 [46] eval(x::Expr)
    @ Base.MainInclude ./client.jl:446
 [47] top-level scope
    @ none:1
in expression starting at /home/pkgeval/.julia/packages/RecursiveArrayTools/BVS4M/src/init.jl:20
in expression starting at /home/pkgeval/.julia/packages/RecursiveArrayTools/BVS4M/src/init.jl:14
in expression starting at /home/pkgeval/.julia/packages/RecursiveArrayTools/BVS4M/src/init.jl:1
in expression starting at /home/pkgeval/.julia/packages/RecursiveArrayTools/BVS4M/src/RecursiveArrayTools.jl:3
ERROR: LoadError: Failed to precompile RecursiveArrayTools [731186ca-8d62-57ce-b412-fbd966d074cd] to /home/pkgeval/.julia/compiled/v1.6/RecursiveArrayTools/6B7tG_VzEFR.ji.
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:33
  [2] compilecache(pkg::Base.PkgId, path::String, internal_stderr::Base.PipeEndpoint, internal_stdout::Base.PipeEndpoint)
    @ Base ./loading.jl:1360
  [3] compilecache(pkg::Base.PkgId, path::String)
    @ Base ./loading.jl:1313
  [4] _require(pkg::Base.PkgId)
    @ Base ./loading.jl:1033
  [5] require(uuidkey::Base.PkgId)
    @ Base ./loading.jl:926
  [6] require(into::Module, mod::Symbol)
    @ Base ./loading.jl:913
  [7] include
    @ ./Base.jl:389 [inlined]
  [8] include_package_for_output(pkg::Base.PkgId, input::String, depot_path::Vector{String}, dl_load_path::Vector{String}, load_path::Vector{String}, concrete_deps::Vector{Pair{Base.PkgId, UInt64}}, source::String)
    @ Base ./loading.jl:1225
  [9] top-level scope
    @ none:1
 [10] eval
    @ ./boot.jl:360 [inlined]
 [11] eval(x::Expr)
    @ Base.MainInclude ./client.jl:446
 [12] top-level scope
    @ none:1
in expression starting at /home/pkgeval/.julia/packages/DiffEqBase/jJi5S/src/DiffEqBase.jl:1
ERROR: LoadError: Failed to precompile DiffEqBase [2b5f629d-d688-5b77-993f-72d75c75574e] to /home/pkgeval/.julia/compiled/v1.6/DiffEqBase/oaevG_aQ6jW.ji.
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:33
  [2] compilecache(pkg::Base.PkgId, path::String, internal_stderr::Base.PipeEndpoint, internal_stdout::Base.PipeEndpoint)
    @ Base ./loading.jl:1360
  [3] compilecache(pkg::Base.PkgId, path::String)
    @ Base ./loading.jl:1313
  [4] _require(pkg::Base.PkgId)
    @ Base ./loading.jl:1033
  [5] require(uuidkey::Base.PkgId)
    @ Base ./loading.jl:926
  [6] require(into::Module, mod::Symbol)
    @ Base ./loading.jl:913
  [7] include
    @ ./Base.jl:389 [inlined]
  [8] include_package_for_output(pkg::Base.PkgId, input::String, depot_path::Vector{String}, dl_load_path::Vector{String}, load_path::Vector{String}, concrete_deps::Vector{Pair{Base.PkgId, UInt64}}, source::String)
    @ Base ./loading.jl:1225
  [9] top-level scope
    @ none:1
 [10] eval
    @ ./boot.jl:360 [inlined]
 [11] eval(x::Expr)
    @ Base.MainInclude ./client.jl:446
 [12] top-level scope
    @ none:1
in expression starting at /home/pkgeval/.julia/packages/OrdinaryDiffEq/HO8vN/src/OrdinaryDiffEq.jl:1
DiffEq: Error During Test at /home/pkgeval/.julia/packages/LabelledArrays/74Tbn/test/runtests.jl:9
  Got exception outside of a @test
  LoadError: Failed to precompile OrdinaryDiffEq [1dea7af3-3e70-54e6-95c3-0bf5283fa5ed] to /home/pkgeval/.julia/compiled/v1.6/OrdinaryDiffEq/DlSvy_CNuN2.ji.
  Stacktrace:
    [1] error(s::String)
      @ Base ./error.jl:33
    [2] compilecache(pkg::Base.PkgId, path::String, internal_stderr::Base.PipeEndpoint, internal_stdout::Base.PipeEndpoint)
      @ Base ./loading.jl:1360
    [3] compilecache(pkg::Base.PkgId, path::String)
      @ Base ./loading.jl:1313
    [4] _require(pkg::Base.PkgId)
      @ Base ./loading.jl:1033
    [5] require(uuidkey::Base.PkgId)
      @ Base ./loading.jl:926
    [6] require(into::Module, mod::Symbol)
      @ Base ./loading.jl:913
    [7] include(fname::String)
      @ Base.MainInclude ./client.jl:444
    [8] macro expansion
      @ ~/.julia/packages/LabelledArrays/74Tbn/test/runtests.jl:9 [inlined]
    [9] macro expansion
      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1144 [inlined]
   [10] macro expansion
      @ ~/.julia/packages/LabelledArrays/74Tbn/test/runtests.jl:9 [inlined]
   [11] macro expansion
      @ ./timing.jl:192 [inlined]
   [12] macro expansion
      @ ~/.julia/packages/LabelledArrays/74Tbn/test/runtests.jl:9 [inlined]
   [13] top-level scope
      @ ./timing.jl:192
   [14] include(fname::String)
      @ Base.MainInclude ./client.jl:444
   [15] top-level scope
      @ none:6
   [16] eval(m::Module, e::Any)
      @ Core ./boot.jl:360
   [17] exec_options(opts::Base.JLOptions)
      @ Base ./client.jl:261
   [18] _start()
      @ Base ./client.jl:485
  in expression starting at /home/pkgeval/.julia/packages/LabelledArrays/74Tbn/test/diffeq.jl:1
Test Summary: | Error  Total
DiffEq        |     1      1
ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/LabelledArrays/74Tbn/test/runtests.jl:6
ERROR: Package LabelledArrays errored during testing
Stacktrace:
  [1] pkgerror(msg::String)
    @ Pkg.Types /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
  [2] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing)
    @ Pkg.Operations /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1667
  [3] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:333
  [4] test(ctx::Pkg.Types.Context, pkgs::Vector{Pkg.Types.PackageSpec})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:320
  [5] #test#62
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:70 [inlined]
  [6] test
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:69 [inlined]
  [7] #test#61
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [8] test
    @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
  [9] test(pkg::String; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66
 [10] test(pkg::String)
    @ Pkg.API /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66
 [11] top-level scope
    @ none:31
