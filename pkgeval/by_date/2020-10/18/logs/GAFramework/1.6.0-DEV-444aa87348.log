Julia Version 1.6.0-DEV.1274
Commit 444aa87348 (2020-10-17 22:11 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807

   Resolving package versions...
   Installed GAFramework â”€ v0.4.1
   Installed FileIO â”€â”€â”€â”€â”€â”€ v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [0dad84c5] + ArgTools
  [56f22d72] + Artifacts
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [f43a241f] + Downloads
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [b27032c2] + LibCURL
  [deac9b47] + LibCURL_jll
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [14a3606d] + MozillaCACerts_jll
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
Precompiling project... (tip: to disable auto-precompilation set ENV["JULIA_PKG_PRECOMPILE_AUTO"]=0)
[90m[32m  âœ“ [39mFileIO[39m
[32m  âœ“ [39mGAFramework
2 dependencies successfully precompiled
     Testing GAFramework
Status `/tmp/jl_19MaH0/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_19MaH0/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [0dad84c5] ArgTools
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [f43a241f] Downloads
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [b27032c2] LibCURL
  [deac9b47] LibCURL_jll
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [14a3606d] MozillaCACerts_jll
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
     Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21722257263126912
curgen: 20 fitness: 0.21722257263126912
curgen: 30 fitness: 0.21722852379847277
curgen: 40 fitness: 0.21722852379847277
curgen: 50 fitness: 0.21722852379847277
CoordinateCreature{Vector{Float64}}([0.22288803013721414], -0.21722852379847277) 0.22288803013721414 -0.21722852379847277
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.2578316220676307
curgen: 100 fitness: 3.258119583283878
curgen: 150 fitness: 3.2581750325671073
curgen: 200 fitness: 3.258324716018018
curgen: 250 fitness: 3.25840729521303
curgen: 300 fitness: 3.25842228880196
curgen: 350 fitness: 3.25842228880196
curgen: 400 fitness: 3.258437209380289
curgen: 450 fitness: 3.2584621557831945
curgen: 500 fitness: 3.2584632472601154
CoordinateCreature{Vector{Float64}}([0.2226817075737885, 0.22294892273321332, -0.2222073096346864, -0.22288489195902972, -0.22250664346442547, -0.22257014405060388, -0.22302510031046233, 0.22255436508271179, -0.22264579081225053, -0.22246066985699892, -0.2223958184675283, -0.2226463350898481, 0.22303675428847836, -0.2226097678909594, -0.22258493519587935], -3.2584632472601154) [0.2226817075737885, 0.22294892273321332, -0.2222073096346864, -0.22288489195902972, -0.22250664346442547, -0.22257014405060388, -0.22302510031046233, 0.22255436508271179, -0.22264579081225053, -0.22246066985699892, -0.2223958184675283, -0.2226463350898481, 0.22303675428847836, -0.2226097678909594, -0.22258493519587935] -3.2584632472601154
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0018845228256623159
curgen: 100 fitness: -0.0009192225669210075
curgen: 150 fitness: -0.0009192225669210075
curgen: 200 fitness: -0.0009065145019064857
curgen: 250 fitness: -0.0005893661077891466
curgen: 300 fitness: -0.0005893661077891466
curgen: 350 fitness: -0.0005751164964351574
curgen: 400 fitness: -0.0005751164964351574
curgen: 450 fitness: -0.0005751164964351574
curgen: 500 fitness: -0.0005751164964351574
CoordinateCreature{Vector{Float64}}([2.2511155787096834e-5, -0.0007879060801523305, 0.00024000663460969993, -0.00019556938105166682, -0.0005215440858253879, -4.8968375259903375e-5, 0.00038939130907435227, 6.531932832798838e-5, -0.00017558359538569213, 0.0009589710115081645, -0.0006685519601587959, 0.00015866919657957012, -6.29935083528127e-5, 0.0004658798867507065, -0.00032838535576782513], 0.0005751164964351574) [2.2511155787096834e-5, -0.0007879060801523305, 0.00024000663460969993, -0.00019556938105166682, -0.0005215440858253879, -4.8968375259903375e-5, 0.00038939130907435227, 6.531932832798838e-5, -0.00017558359538569213, 0.0009589710115081645, -0.0006685519601587959, 0.00015866919657957012, -6.29935083528127e-5, 0.0004658798867507065, -0.00032838535576782513] 0.0005751164964351574
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
     Testing GAFramework tests passed 
