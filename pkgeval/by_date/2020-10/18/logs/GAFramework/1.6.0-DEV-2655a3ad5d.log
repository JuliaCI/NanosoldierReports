Julia Version 1.6.0-DEV.1276
Commit 2655a3ad5d (2020-10-18 19:49 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: AMD EPYC 7502 32-Core Processor
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-11.0.0 (ORCJIT, znver2)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2
  JULIA_MAX_NUM_PRECOMPILE_FILES = 9223372036854775807

   Resolving package versions...
   Installed GAFramework â”€ v0.4.1
   Installed FileIO â”€â”€â”€â”€â”€â”€ v1.4.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [91ca9103] + GAFramework v0.4.1
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [5789e2e9] + FileIO v1.4.3
  [91ca9103] + GAFramework v0.4.1
  [0dad84c5] + ArgTools
  [56f22d72] + Artifacts
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [f43a241f] + Downloads
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [b27032c2] + LibCURL
  [deac9b47] + LibCURL_jll
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [14a3606d] + MozillaCACerts_jll
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [fa267f1f] + TOML
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
Precompiling project... (tip: to disable auto-precompilation set ENV["JULIA_PKG_PRECOMPILE_AUTO"]=0)
[90m[32m  âœ“ [39mFileIO[39m
[32m  âœ“ [39mGAFramework
2 dependencies successfully precompiled
     Testing GAFramework
Status `/tmp/jl_7iNuFZ/Project.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [9fa8497b] Future
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_7iNuFZ/Manifest.toml`
  [5789e2e9] FileIO v1.4.3
  [91ca9103] GAFramework v0.4.1
  [0dad84c5] ArgTools
  [56f22d72] Artifacts
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [f43a241f] Downloads
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [b27032c2] LibCURL
  [deac9b47] LibCURL_jll
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [14a3606d] MozillaCACerts_jll
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [fa267f1f] TOML
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
     Testing Running tests...
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 40 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 60 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 80 edge_score: 1.0 node_score: 1.0 score: 1.0
curgen: 100 edge_score: 1.0 node_score: 1.0 score: 1.0
Running genetic algorithm with population size 300, generation number 50, elite fraction 0.01.
curgen: 10 fitness: 0.21721718220683797
curgen: 20 fitness: 0.21721718220683797
curgen: 30 fitness: 0.217233556824948
curgen: 40 fitness: 0.217233556824948
curgen: 50 fitness: 0.217233556824948
CoordinateCreature{Vector{Float64}}([-0.22250801130571768], -0.217233556824948) -0.22250801130571768 -0.217233556824948
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: 3.258095096095389
curgen: 100 fitness: 3.258167476967911
curgen: 150 fitness: 3.2582872428308356
curgen: 200 fitness: 3.258301900090262
curgen: 250 fitness: 3.2583031340951796
curgen: 300 fitness: 3.2583289643632676
curgen: 350 fitness: 3.258371537168186
curgen: 400 fitness: 3.258388455024555
curgen: 450 fitness: 3.258418908664985
curgen: 500 fitness: 3.258424755990701
CoordinateCreature{Vector{Float64}}([-0.22252687142370756, -0.22251536109979564, -0.22288346608457446, -0.22209143974311413, 0.2229580215747968, 0.22244661964674461, 0.22267191012628884, -0.2225439811286182, -0.22192144669053326, -0.22290196333794998, 0.22301849462881623, -0.22275401259779223, 0.22325568612184543, 0.22252257203737438, 0.2225916017503962], -3.258424755990701) [-0.22252687142370756, -0.22251536109979564, -0.22288346608457446, -0.22209143974311413, 0.2229580215747968, 0.22244661964674461, 0.22267191012628884, -0.2225439811286182, -0.22192144669053326, -0.22290196333794998, 0.22301849462881623, -0.22275401259779223, 0.22325568612184543, 0.22252257203737438, 0.2225916017503962] -3.258424755990701
Running genetic algorithm with population size 300, generation number 500, elite fraction 0.01.
curgen: 50 fitness: -0.0038674401063474306
curgen: 100 fitness: -0.003212890529852075
curgen: 150 fitness: -0.002842382854993275
curgen: 200 fitness: -0.0020177341657472425
curgen: 250 fitness: -0.0020177341657472425
curgen: 300 fitness: -0.0019247858890594216
curgen: 350 fitness: -0.0010561146741849825
curgen: 400 fitness: -0.0010561146741849825
curgen: 450 fitness: -0.0010561146741849825
curgen: 500 fitness: -0.0009714504569160454
CoordinateCreature{Vector{Float64}}([-0.0010273058004155724, 0.0008039420001543537, -0.00042560272003054666, -9.743170097453431e-5, 0.0007692323169630811, -0.0001800440721102649, -0.0001482574768753319, -0.00012495139286620288, 0.0013111768603018639, -0.0007268658979973726, -0.00013383557836163236, 6.319288449147564e-5, 4.00423438319538e-5, -0.00017993753833926316, -0.00019797196721809486], 0.0009714504569160454) [-0.0010273058004155724, 0.0008039420001543537, -0.00042560272003054666, -9.743170097453431e-5, 0.0007692323169630811, -0.0001800440721102649, -0.0001482574768753319, -0.00012495139286620288, 0.0013111768603018639, -0.0007268658979973726, -0.00013383557836163236, 6.319288449147564e-5, 4.00423438319538e-5, -0.00017993753833926316, -0.00019797196721809486] 0.0009714504569160454
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
Running genetic algorithm with population size 6000, generation number 100, elite fraction 0.1.
curgen: 20 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 40 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 60 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 80 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
curgen: 100 value: [3, 2, 4, 8, 6, 1, 5, 10, 9, 7] score: 1.0
     Testing GAFramework tests passed 
