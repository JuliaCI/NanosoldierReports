Julia Version 1.5.0-DEV.199
Commit cc47f87314 (2020-01-29 16:52 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

 Resolving package versions...
 Installed CodeTracking ──────── v0.5.8
 Installed StagedFilters ─────── v0.1.0
 Installed Debugger ──────────── v0.6.4
 Installed Parsers ───────────── v0.3.10
 Installed JuliaInterpreter ──── v0.7.8
 Installed StaticArrays ──────── v0.12.1
 Installed DocStringExtensions ─ v0.8.1
 Installed Highlights ────────── v0.4.5
 Installed JSON ──────────────── v0.21.0
 Installed BenchmarkTools ────── v0.4.3
 Installed Crayons ───────────── v4.0.1
  Updating `~/.julia/environments/v1.5/Project.toml`
  [c9c6d8d2] + StagedFilters v0.1.0
  Updating `~/.julia/environments/v1.5/Manifest.toml`
  [6e4b80f9] + BenchmarkTools v0.4.3
  [da1fd8a2] + CodeTracking v0.5.8
  [a8cc5b0e] + Crayons v4.0.1
  [31a5f54b] + Debugger v0.6.4
  [ffbed154] + DocStringExtensions v0.8.1
  [eafb193a] + Highlights v0.4.5
  [682c06a0] + JSON v0.21.0
  [aa1ae85d] + JuliaInterpreter v0.7.8
  [69de0a69] + Parsers v0.3.10
  [c9c6d8d2] + StagedFilters v0.1.0
  [90137ffa] + StaticArrays v0.12.1
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
   Testing StagedFilters
 Installed VersionParsing ───── v1.2.0
 Installed Conda ────────────── v1.3.0
 Installed OrderedCollections ─ v1.1.0
 Installed MacroTools ───────── v0.5.3
 Installed DataStructures ───── v0.17.9
 Installed PyCall ───────────── v1.91.2
  Updating `/tmp/jl_lMgVGp/Project.toml`
  [438e738f] + PyCall v1.91.2
  Updating `/tmp/jl_lMgVGp/Manifest.toml`
  [8f4d0f93] + Conda v1.3.0
  [864edb3b] + DataStructures v0.17.9
  [1914dd2f] + MacroTools v0.5.3
  [bac558e1] + OrderedCollections v1.1.0
  [438e738f] + PyCall v1.91.2
  [81def892] + VersionParsing v1.2.0
  Building Conda ─→ `~/.julia/packages/Conda/kLXeC/deps/build.log`
  Updating `/tmp/jl_hAnFlJ/Project.toml`
 [no changes]
  Updating `/tmp/jl_hAnFlJ/Manifest.toml`
 [no changes]
  Building PyCall → `~/.julia/packages/PyCall/ttONZ/deps/build.log`
  Updating `/tmp/jl_91WAuP/Project.toml`
 [no changes]
  Updating `/tmp/jl_91WAuP/Manifest.toml`
 [no changes]
Running sandbox
Status `/tmp/jl_lMgVGp/Project.toml`
  [6e4b80f9] BenchmarkTools v0.4.3
  [31a5f54b] Debugger v0.6.4
  [438e738f] PyCall v1.91.2
  [c9c6d8d2] StagedFilters v0.1.0
  [90137ffa] StaticArrays v0.12.1
  [8dfed614] Test 
ERROR: LoadError: PyError (PyImport_ImportModule

The Python package scipy.signal could not be found by pyimport. Usually this means
that you did not install scipy.signal in the Python version being used by PyCall.

PyCall is currently configured to use the Python version at:

/usr/bin/python3

and you should use whatever mechanism you usually use (apt-get, pip, conda,
etcetera) to install the Python package containing the scipy.signal module.

One alternative is to re-configure PyCall to use a different Python
version on your system: set ENV["PYTHON"] to the path/name of the python
executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.

Another alternative is to configure PyCall to use a Julia-specific Python
distribution via the Conda.jl package (which installs a private Anaconda
Python distribution), which has the advantage that packages can be installed
and kept up-to-date via Julia.  As explained in the PyCall documentation,
set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
To install the scipy.signal module, you can use `pyimport_conda("scipy.signal", PKG)`,
where PKG is the Anaconda package the contains the module scipy.signal,
or alternatively you can use the Conda package directly (via
`using Conda` followed by `Conda.add` etcetera).

) <class 'ModuleNotFoundError'>
ModuleNotFoundError("No module named 'scipy'",)

Stacktrace:
 [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/ttONZ/src/PyCall.jl:544
 [2] top-level scope at /home/pkgeval/.julia/packages/StagedFilters/sn5DI/test/runtests.jl:7
 [3] include(::String) at ./client.jl:439
 [4] top-level scope at none:6
in expression starting at /home/pkgeval/.julia/packages/StagedFilters/sn5DI/test/runtests.jl:7
err = ProcessFailedException(Base.Process[Process(`/opt/julia/bin/julia -Cnative -J/opt/julia/lib/julia/sys.so -g1 --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --inline=yes --startup-file=no --track-allocation=none --eval 'append!(empty!(Base.DEPOT_PATH), ["/home/pkgeval/.julia", "/opt/julia/local/share/julia", "/opt/julia/share/julia", "/usr/local/share/julia"])
append!(empty!(Base.DL_LOAD_PATH), String[])

cd("/home/pkgeval/.julia/packages/StagedFilters/sn5DI/test")
append!(empty!(ARGS), String[])
include("/home/pkgeval/.julia/packages/StagedFilters/sn5DI/test/runtests.jl")
'`, ProcessExited(1))])
ERROR: Package StagedFilters errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:54
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1471
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:313
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:300
 [5] #test#66 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:294 [inlined]
 [6] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:294 [inlined]
 [7] #test#65 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:293 [inlined]
 [8] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:293 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:292
 [10] test(::String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:292
 [11] top-level scope at none:13
