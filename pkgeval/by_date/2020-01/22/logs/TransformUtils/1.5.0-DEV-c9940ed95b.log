Julia Version 1.5.0-DEV.133
Commit c9940ed95b (2020-01-21 18:51 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

 Resolving package versions...
 Installed TransformUtils ─ v0.2.3
  Updating `~/.julia/environments/v1.5/Project.toml`
  [9b8138ad] + TransformUtils v0.2.3
  Updating `~/.julia/environments/v1.5/Manifest.toml`
  [9b8138ad] + TransformUtils v0.2.3
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
   Testing TransformUtils
  Updating `/tmp/jl_kKLhQQ/Project.toml`
  [8dfed614] + Test 
  Updating `/tmp/jl_kKLhQQ/Manifest.toml`
  [2a0f44e3] + Base64 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [9a3f8284] + Random 
  [9e88b42a] + Serialization 
  [6462fe0b] + Sockets 
  [8dfed614] + Test 
Running sandbox
Status `/tmp/jl_kKLhQQ/Project.toml`
  [9b8138ad] TransformUtils v0.2.3
  [37e2e46d] LinearAlgebra 
  [8dfed614] Test 
Test Summary:                               |
Constructors SO3, Quaternion, AngleAxis...  | No tests
Test Summary:                           | Pass  Total
Ensure basic quaternion operations hold |   10     10
Test Summary:                                       | Pass  Total
Comparison functions for SO3, Quaternion, AngleAxis |    5      5
Test Summary:                                        | Pass  Total
Trivial case quaterion -> SO3 -> Euler -> quaternion |    2      2
┌ Warning: Need better coverage on convert function tests
└ @ Main ~/.julia/packages/TransformUtils/hYnkL/test/runtests.jl:89
dAA = AngleAxis(0.7853981633974483, [1.0, 0.0, 0.0])
dAA = so3([0.0 -0.24762130861165807 -0.10664810971853998; 0.24762130861165807 0.0 -0.04555030344635635; 0.10664810971853998 0.04555030344635635 0.0])
dAA = so3([0.0 0.11383115736052925 -0.14619430905817773; -0.11383115736052925 0.0 0.13521385371557912; 0.14619430905817773 -0.13521385371557912 0.0])
dAA = so3([0.0 0.06295250128539417 0.10569916829628423; -0.06295250128539417 0.0 -0.13073286849029522; -0.10569916829628423 0.13073286849029522 0.0])
dAA = Quaternion(0.9979011313500233, [0.02774018495099727, -0.0062420108924874495, -0.05817947652949455])
dAA = SO3([0.991956126668504 0.00110899881029206 0.12657730004411558; 0.004169237412701003 0.9991328280573664 -0.04142715724601552; -0.12651347842904256 0.0416216532555872 0.9910913064678029])
Test Summary:                        | Pass  Total
Compare SO3 and quaternion rotations |   24     24
Test Summary:       | Pass  Total
Basic SE3 mechanics |    4      4
Compare operations on two different SE3 transforms
xi = SE3(SO3([0.8956255686227833 0.32933506022841347 -0.29898705479244975; -0.20913683054512427 0.905020064034318 0.37040581772544934; 0.39257690576326065 -0.2692157161082282 0.8794352001493219]), [0.45550303446356344, -1.0664810971853997, 2.4762130861165805])
xj = SE3(SO3([0.9575271393915835 0.2851240888808275 -0.0429654659982755; -0.2883333456956287 0.9480344030122484 -0.1345163650459486; 0.002378883884531285 0.1411914467844557 0.9899794524465526]), [1.3073286849029522, 1.0569916829628423, -0.6295250128539417])
Dx = SE3(SO3([0.9188208056231489 0.11252401523710309 0.3782944265369869; 0.053759362208668046 0.9138805586505865 -0.40240807086266234; -0.39099649375530837 0.39007777495701085 0.8336432518503599]), [-0.900420587451716, 3.0384350297154135, -2.1994335775525085])
Test Summary:         | Pass  Total
SE3 ⊕ and ⊖ mechanics |    6      6
TransformUtils.convert(Euler, q) = Euler(0.7853981633974484, 0.0, 1.5707963267948963, Quaternion(1.0, [0.0, 0.0, 0.0]))
Test Summary:              | Pass  Total
Previous discovered issues |    3      3
Test Summary:      | Pass  Total
test SO3 logmap... |  301    301
Test Summary:                              | Pass  Total
test in-place and efficient inverse SE3... |    1      1
   Testing TransformUtils tests passed 
