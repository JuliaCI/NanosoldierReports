Julia Version 1.5.0-DEV.104
Commit 372a7a726d (2020-01-18 18:35 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

 Resolving package versions...
 Installed Tables ────────────────────── v0.2.11
 Installed KCenters ──────────────────── v0.1.8
 Installed Parsers ───────────────────── v0.3.10
 Installed IteratorInterfaceExtensions ─ v1.0.0
 Installed MLLabelUtils ──────────────── v0.5.1
 Installed DataStructures ────────────── v0.17.9
 Installed JSON ──────────────────────── v0.21.0
 Installed SimilaritySearch ──────────── v0.3.17
 Installed DataAPI ───────────────────── v1.1.0
 Installed SortingAlgorithms ─────────── v0.3.1
 Installed Reexport ──────────────────── v0.2.0
 Installed PooledArrays ──────────────── v0.5.3
 Installed LearnBase ─────────────────── v0.2.2
 Installed MLDataPattern ─────────────── v0.5.0
 Installed OrderedCollections ────────── v1.1.0
 Installed TableTraits ───────────────── v1.0.0
 Installed DataFrames ────────────────── v0.20.0
 Installed Compat ────────────────────── v3.2.0
 Installed MappedArrays ──────────────── v0.2.2
 Installed InvertedIndices ───────────── v1.0.0
 Installed StatsBase ─────────────────── v0.32.0
 Installed MLDataUtils ───────────────── v0.5.0
 Installed DataValueInterfaces ───────── v1.0.0
 Installed Missings ──────────────────── v0.4.3
 Installed CategoricalArrays ─────────── v0.7.7
  Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.1.8
  Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.2.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.0
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.1.8
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.10
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.17
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v0.2.11
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
   Testing KCenters
  Updating `/tmp/jl_CQRuak/Project.toml`
 [no changes]
  Updating `/tmp/jl_CQRuak/Manifest.toml`
 [no changes]
Running sandbox
Status `/tmp/jl_CQRuak/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.1.8
  [cc2ba9b6] MLDataUtils v0.5.0
  [053f045d] SimilaritySearch v0.3.17
  [2913bbd2] StatsBase v0.32.0
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [37e2e46d] LinearAlgebra 
  [9a3f8284] Random 
  [2f01184e] SparseArrays 
  [8dfed614] Test 
Test Summary: | Pass  Total
Scores        |    9      9
[ Info: 137.32000000000002
[ Info: 74.87
[ Info: 46.269999999999996
[ Info: 27.160000000000007
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 313.64000338064864
[ Info: 547.7199992669996
[ Info: 146.21999835129265
[ Info: 76.6400011840614
Test Summary:        |
Clustering with dnet | No tests
inertia(cfft.distances) = 18.786234176071783
inertia(cdnet.distances) = 30.12417925422544
inertia(crand.distances) = 21.497026388440403
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6005859375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.6005859375,"f1":null,"seconds":5.187466740608215e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.6015625,"distances_sum":1708.6914473987674}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6005859375,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.6005859375,"f1":null,"seconds":5.187466740608215e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.6015625,"distances_sum":1708.6914473987674}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7060546875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7060546875,"f1":0.8190918456543465,"seconds":5.895271897315979e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.2265625,"distances_sum":2084.2666110825226}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7060546875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.7060546875,"f1":0.8190918456543465,"seconds":5.895271897315979e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.2265625,"distances_sum":2084.2666110825226}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9162545787545796,"seconds":5.755573511123657e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.578125,"distances_sum":2681.7223047235293}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9614068223443231,"seconds":6.008893251419067e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.9375,"distances_sum":3049.619838229102}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9614068223443231,"seconds":6.008893251419067e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.9375,"distances_sum":3049.619838229102}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9306640625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9614068223443231,"seconds":6.008893251419067e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.9375,"distances_sum":3049.619838229102}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.361328125, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.361328125,"f1":null,"seconds":3.5874545574188232e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":5.0859375,"distances_sum":918.6293850563383}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.361328125,"state":{"ssize":3,"bsize":2},"perf":{"precision":null,"recall":0.361328125,"f1":null,"seconds":3.5874545574188232e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":5.0859375,"distances_sum":918.6293850563383}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8675829378954385,"seconds":5.152076482772827e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":7.7734375,"distances_sum":2200.994606090016}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7822265625,"state":{"ssize":6,"bsize":6},"perf":{"precision":1.0,"recall":0.7822265625,"f1":0.8675829378954385,"seconds":5.152076482772827e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":7.7734375,"distances_sum":2200.994606090016}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9472527472527478,"seconds":5.813315510749817e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.6875,"distances_sum":2727.2792600059934}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9437843406593412,"seconds":5.597248673439026e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.625,"distances_sum":2759.3205493121595}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.908203125,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9472527472527478,"seconds":5.813315510749817e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.6875,"distances_sum":2727.2792600059934}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.908203125,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9472527472527478,"seconds":5.813315510749817e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.6875,"distances_sum":2727.2792600059934}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5673828125, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5673828125,"f1":0.7091578560328565,"seconds":4.24310564994812e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.1328125,"distances_sum":1496.9645713188843}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2080078125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2080078125,"f1":null,"seconds":3.2279640436172485e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":5.5625,"distances_sum":561.1461713488735}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.208984375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.208984375,"f1":null,"seconds":3.1106173992156982e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":5.4609375,"distances_sum":530.3406757328424}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5673828125,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.5673828125,"f1":0.7091578560328565,"seconds":4.24310564994812e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.1328125,"distances_sum":1496.9645713188843}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6494140625, conf: {"ssize":9,"bsize":4}, perf: {"precision":1.0,"recall":0.6494140625,"f1":0.773684128371629,"seconds":4.649162292480469e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.6640625,"distances_sum":1780.334880234393}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8568785381285391,"seconds":5.174428224563599e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.3671875,"distances_sum":2138.7093893131578}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7626953125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7626953125,"f1":0.8568785381285391,"seconds":5.174428224563599e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.3671875,"distances_sum":2138.7093893131578}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.8981976356976366,"seconds":5.232170224189758e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.3828125,"distances_sum":2433.4638275415696}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8203125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8203125,"f1":0.8956189643689652,"seconds":5.403533577919006e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.3984375,"distances_sum":2344.644386046307}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.8962396978021987,"seconds":5.517154932022095e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.3125,"distances_sum":2412.5374339660452}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9505666208791211,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.828125,"distances_sum":2832.722405685711}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8603318556443565,"seconds":5.315989255905151e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.3203125,"distances_sum":2145.9588764974305}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":13,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9263335622710629,"seconds":5.763024091720581e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.7578125,"distances_sum":2587.0133730828957}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8583984375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8583984375,"f1":0.9168331668331677,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.6484375,"distances_sum":2551.8527434443095}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9505666208791211,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.828125,"distances_sum":2832.722405685711}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9130859375,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9505666208791211,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.828125,"distances_sum":2832.722405685711}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3125, conf: {"ssize":1,"bsize":2}, perf: {"precision":0.96875,"recall":0.3125,"f1":null,"seconds":3.842636942863464e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":6.1953125,"distances_sum":722.2666950910321}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1396484375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1396484375,"f1":null,"seconds":3.080815076828003e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":4.7421875,"distances_sum":357.34358290466685}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3125,"state":{"ssize":1,"bsize":2},"perf":{"precision":0.96875,"recall":0.3125,"f1":null,"seconds":3.842636942863464e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":6.1953125,"distances_sum":722.2666950910321}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7939453125, conf: {"ssize":5,"bsize":6}, perf: {"precision":0.9830822172619046,"recall":0.7939453125,"f1":0.8707243927947057,"seconds":5.431473255157471e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.4921875,"distances_sum":1903.999757569564}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7939453125,"state":{"ssize":5,"bsize":6},"perf":{"precision":0.9830822172619046,"recall":0.7939453125,"f1":0.8707243927947057,"seconds":5.431473255157471e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.4921875,"distances_sum":1903.999757569564}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8046875, conf: {"ssize":7,"bsize":6}, perf: {"precision":0.981361607142857,"recall":0.8046875,"f1":0.8775188353313357,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.515625,"distances_sum":1950.0589526433394}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8046875,"state":{"ssize":7,"bsize":6},"perf":{"precision":0.981361607142857,"recall":0.8046875,"f1":0.8775188353313357,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.515625,"distances_sum":1950.0589526433394}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8046875,"state":{"ssize":7,"bsize":6},"perf":{"precision":0.981361607142857,"recall":0.8046875,"f1":0.8775188353313357,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.515625,"distances_sum":1950.0589526433394}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.556640625, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.556640625,"f1":0.6998787670662676,"seconds":4.580244421958923e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.046875,"distances_sum":1141.7839296622801}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.556640625,"state":{"ssize":3,"bsize":3},"perf":{"precision":1.0,"recall":0.556640625,"f1":0.6998787670662676,"seconds":4.580244421958923e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.046875,"distances_sum":1141.7839296622801}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6806640625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6806640625,"f1":0.7987219377844385,"seconds":4.908069968223572e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.71875,"distances_sum":1521.6513576019338}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6806640625,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6806640625,"f1":0.7987219377844385,"seconds":4.908069968223572e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.71875,"distances_sum":1521.6513576019338}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8173828125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8173828125,"f1":0.8930808774558782,"seconds":5.621463060379028e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.390625,"distances_sum":1955.51948492756}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.685546875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.685546875,"f1":0.8013954795204801,"seconds":5.124136805534363e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.8515625,"distances_sum":1537.5856493346598}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8212890625,"f1":0.8953869047619056,"seconds":5.660578608512878e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.421875,"distances_sum":1982.6197490884235}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8212890625,"state":{"ssize":6,"bsize":6},"perf":{"precision":1.0,"recall":0.8212890625,"f1":0.8953869047619056,"seconds":5.660578608512878e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.421875,"distances_sum":1982.6197490884235}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8212890625,"state":{"ssize":6,"bsize":6},"perf":{"precision":1.0,"recall":0.8212890625,"f1":0.8953869047619056,"seconds":5.660578608512878e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.421875,"distances_sum":1982.6197490884235}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.8474306943056952,"seconds":5.17629086971283e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":7.9296875,"distances_sum":1757.364649700816}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.638671875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.638671875,"f1":0.7664817821067829,"seconds":4.980713129043579e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":7.515625,"distances_sum":1418.3290947153755}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.751953125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.751953125,"f1":0.8474306943056952,"seconds":5.17629086971283e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":7.9296875,"distances_sum":1757.364649700816}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9294871794871803,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.765625,"distances_sum":2238.5381228022593}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8969353563103576,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.4921875,"distances_sum":2010.4373563157642}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8759765625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8759765625,"f1":0.9294871794871803,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.765625,"distances_sum":2238.5381228022593}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9672447344322349,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.8828125,"distances_sum":2492.693296040202}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9394230769230775,"seconds":5.753710865974426e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.796875,"distances_sum":2288.235236228206}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.97029532967033,"seconds":5.843117833137512e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.921875,"distances_sum":2501.5214809810104}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.974759615384616,"seconds":5.7872384786605835e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.9375,"distances_sum":2540.6445947132624}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9554201007326015,"seconds":5.731359124183655e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.7890625,"distances_sum":2432.562374427742}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9661515567765572,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.8515625,"distances_sum":2492.4341983865393}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9450835622710629,"seconds":5.558133125305176e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.6640625,"distances_sum":2390.6153914269503}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.974759615384616,"seconds":5.7872384786605835e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.9375,"distances_sum":2540.6445947132624}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.974759615384616,"seconds":5.7872384786605835e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.9375,"distances_sum":2540.6445947132624}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5087890625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5087890625,"f1":0.6579330391830397,"seconds":4.259869456291199e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.3203125,"distances_sum":1145.7567817680947}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5087890625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5087890625,"f1":0.6579330391830397,"seconds":4.259869456291199e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.3203125,"distances_sum":1145.7567817680947}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6376953125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6376953125,"f1":0.7640326687201695,"seconds":4.520639777183533e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.703125,"distances_sum":1457.387389026781}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6376953125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6376953125,"f1":0.7640326687201695,"seconds":4.520639777183533e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.703125,"distances_sum":1457.387389026781}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8017578125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.8017578125,"f1":0.8822916666666674,"seconds":5.284324288368225e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.359375,"distances_sum":1954.9909721230326}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8017578125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.8017578125,"f1":0.8822916666666674,"seconds":5.284324288368225e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.359375,"distances_sum":1954.9909721230326}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8017578125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.8017578125,"f1":0.8822916666666674,"seconds":5.284324288368225e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.359375,"distances_sum":1954.9909721230326}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8549460955710962,"seconds":4.947185516357422e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.1015625,"distances_sum":1781.3883577516735}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4150390625, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.4150390625,"f1":null,"seconds":3.719702363014221e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":6.3828125,"distances_sum":923.3333991309025}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.572265625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.572265625,"f1":0.7092747530247535,"seconds":4.220753908157349e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.1875,"distances_sum":1251.456940311503}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7587890625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7587890625,"f1":0.8549460955710962,"seconds":4.947185516357422e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.1015625,"distances_sum":1781.3883577516735}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8037109375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8037109375,"f1":0.8846242299367308,"seconds":5.383044481277466e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.609375,"distances_sum":1906.4349215597185}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8515625,"f1":0.9135765276390283,"seconds":5.21540641784668e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.703125,"distances_sum":2149.8701963008234}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8569753163503173,"seconds":4.932284355163574e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.0234375,"distances_sum":1810.5349538314845}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8173828125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8173828125,"f1":0.8913529179154186,"seconds":5.3104013204574585e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.53125,"distances_sum":1995.5280297298018}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8515625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8515625,"f1":0.9135765276390283,"seconds":5.21540641784668e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.703125,"distances_sum":2149.8701963008234}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9595467032967038,"seconds":5.865469574928284e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.8984375,"distances_sum":2436.991509425037}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9591746794871799,"seconds":6.822869181632996e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.8125,"distances_sum":2466.0979359784883}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.956942536630037,"seconds":5.684792995452881e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.90625,"distances_sum":2409.7712782629965}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.953817536630037,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.921875,"distances_sum":2379.026822293482}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9474587912087917,"seconds":6.2193721532821655e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.84375,"distances_sum":2379.950286126563}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9652358058608063,"seconds":5.817040801048279e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.875,"distances_sum":2503.8663914355266}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9270890567765574,"seconds":5.494803190231323e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.7734375,"distances_sum":2250.699322591713}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9652358058608063,"seconds":5.817040801048279e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.875,"distances_sum":2503.8663914355266}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9652358058608063,"seconds":5.817040801048279e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.875,"distances_sum":2503.8663914355266}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.1611328125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.1611328125,"f1":null,"seconds":2.8051435947418213e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":4.4765625,"distances_sum":442.32525494631864}}, beam: 1, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.1611328125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.1611328125,"f1":null,"seconds":2.8051435947418213e-6,"exhaustive_search_seconds":1.3373792171478271e-6,"evaluations":4.4765625,"distances_sum":442.32525494631864}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.37890625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.37890625,"f1":null,"seconds":3.95067036151886e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":6.3828125,"distances_sum":866.5933837616656}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7880859375,"f1":0.8735283813408822,"seconds":5.200505256652832e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.265625,"distances_sum":1998.8742573349518}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7880859375,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7880859375,"f1":0.8735283813408822,"seconds":5.200505256652832e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.265625,"distances_sum":1998.8742573349518}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9571485805860811,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.828125,"distances_sum":2499.6260458274514}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8310546875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8310546875,"f1":0.9005296786546794,"seconds":5.4817646741867065e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.3671875,"distances_sum":2140.613181257855}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9571485805860811,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.828125,"distances_sum":2499.6260458274514}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.9773122710622715,"seconds":6.116926670074463e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.9453125,"distances_sum":2663.9183728306257}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9599609375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9773122710622715,"seconds":6.116926670074463e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.9453125,"distances_sum":2663.9183728306257}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9599609375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9773122710622715,"seconds":6.116926670074463e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.9453125,"distances_sum":2663.9183728306257}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.662109375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.662109375,"f1":0.7839015151515161,"seconds":4.582107067108154e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":7.4921875,"distances_sum":1560.0503594794561}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1728515625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1728515625,"f1":null,"seconds":3.1944364309310913e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":5.1484375,"distances_sum":403.34661805119777}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4326171875, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.4326171875,"f1":null,"seconds":3.943219780921936e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":6.3203125,"distances_sum":930.4847152813329}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.662109375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.662109375,"f1":0.7839015151515161,"seconds":4.582107067108154e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":7.4921875,"distances_sum":1560.0503594794561}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9445601273726278,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.71875,"distances_sum":2519.404677625008}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9444883241758247,"seconds":6.634742021560669e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.7578125,"distances_sum":2501.4087567719653}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9315075549450554,"seconds":5.7425349950790405e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.75,"distances_sum":2384.1812320011527}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":9,"bsize":5}, perf: {"precision":null,"recall":0.755859375,"f1":null,"seconds":5.064532160758972e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":7.953125,"distances_sum":1911.4229312113252}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9052734375,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9052734375,"f1":0.9445601273726278,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.71875,"distances_sum":2519.404677625008}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":9,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.963587454212455,"seconds":5.802139639854431e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.84375,"distances_sum":2632.5248473682072}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9694196428571432,"seconds":5.956739187240601e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.9296875,"distances_sum":2644.007589897619}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9713026556776562,"seconds":6.068497896194458e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.90625,"distances_sum":2672.8557501238474}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9659111721611726,"seconds":5.925074219703674e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.84375,"distances_sum":2651.3748992957508}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9551968864468869,"seconds":5.966052412986755e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.8046875,"distances_sum":2575.1844512798975}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9713026556776562,"seconds":6.068497896194458e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.90625,"distances_sum":2672.8557501238474}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9713026556776562,"seconds":6.068497896194458e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.90625,"distances_sum":2672.8557501238474}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69140625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.69140625,"f1":0.8085981726606735,"seconds":5.06080687046051e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.0546875,"distances_sum":1662.5588036966208}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8643096486846497,"seconds":5.375593900680542e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.328125,"distances_sum":1882.4010228895247}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2138671875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2138671875,"f1":null,"seconds":3.723427653312683e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":6.171875,"distances_sum":505.1535893220936}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7724609375,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7724609375,"f1":0.8643096486846497,"seconds":5.375593900680542e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.328125,"distances_sum":1882.4010228895247}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9590461621711626,"seconds":6.120651960372925e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.9140625,"distances_sum":2564.8723484003754}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9570741758241764,"seconds":6.068497896194458e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.859375,"distances_sum":2595.4821211177655}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9476221694971702,"seconds":6.061047315597534e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.8203125,"distances_sum":2532.964965041291}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9590461621711626,"seconds":6.120651960372925e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.9140625,"distances_sum":2564.8723484003754}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9677734375, conf: {"ssize":4,"bsize":13}, perf: {"precision":1.0,"recall":0.9677734375,"f1":0.9824404761904764,"seconds":6.226822733879089e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.984375,"distances_sum":2747.8853571850377}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9697265625, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.9697265625,"f1":0.9833161630036633,"seconds":6.107613444328308e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.96875,"distances_sum":2760.327429579877}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9697265625,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9697265625,"f1":0.9833161630036633,"seconds":6.107613444328308e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.96875,"distances_sum":2760.327429579877}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9697265625,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9697265625,"f1":0.9833161630036633,"seconds":6.107613444328308e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.96875,"distances_sum":2760.327429579877}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1669921875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1669921875,"f1":null,"seconds":3.121793270111084e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":4.9921875,"distances_sum":393.446590604433}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.79296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.79296875,"f1":0.8756829975579982,"seconds":5.230307579040527e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.6015625,"distances_sum":1974.1712467064522}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.671875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.671875,"f1":0.7942630286380294,"seconds":5.653128027915955e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.0078125,"distances_sum":1607.1959657553282}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.79296875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.79296875,"f1":0.8756829975579982,"seconds":5.230307579040527e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.6015625,"distances_sum":1974.1712467064522}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9508444680319685,"seconds":5.781650543212891e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.7265625,"distances_sum":2577.413249257784}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9610176282051286,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.828125,"distances_sum":2611.6391325120885}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9235837079587086,"seconds":5.541369318962097e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.7421875,"distances_sum":2343.035000875152}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9610176282051286,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.828125,"distances_sum":2611.6391325120885}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9657566391941398,"seconds":5.6438148021698e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.9375,"distances_sum":2586.6117104006225}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":8,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9744047619047623,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.9453125,"distances_sum":2670.8835140158085}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":8,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9744047619047623,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.9453125,"distances_sum":2670.8835140158085}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":8,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9744047619047623,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.9453125,"distances_sum":2670.8835140158085}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.798828125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.798828125,"f1":0.8781598609723619,"seconds":5.211681127548218e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.515625,"distances_sum":2047.1693652990214}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6806640625, conf: {"ssize":1,"bsize":4}, perf: {"precision":null,"recall":0.6806640625,"f1":null,"seconds":4.842877388000488e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.2265625,"distances_sum":1601.2332584268459}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.798828125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.798828125,"f1":0.8781598609723619,"seconds":5.211681127548218e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.515625,"distances_sum":2047.1693652990214}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9391655219780225,"seconds":5.578622221946716e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.890625,"distances_sum":2462.239349209161}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9519402472527478,"seconds":5.8002769947052e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.875,"distances_sum":2578.648949780659}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9519402472527478,"seconds":5.8002769947052e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.875,"distances_sum":2578.648949780659}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9676739926739932,"seconds":6.0070306062698364e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.96875,"distances_sum":2652.700502636774}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9676739926739932,"seconds":6.0070306062698364e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.96875,"distances_sum":2652.700502636774}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9676739926739932,"seconds":6.0070306062698364e-6,"exhaustive_search_seconds":1.3187527656555176e-6,"evaluations":8.96875,"distances_sum":2652.700502636774}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6669921875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6669921875,"f1":0.7864711677211684,"seconds":4.567205905914307e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.3515625,"distances_sum":1706.1075119162322}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7392578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7392578125,"f1":0.8359466921966932,"seconds":4.976987838745117e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.859375,"distances_sum":1928.9454229111675}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7392578125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7392578125,"f1":0.8359466921966932,"seconds":4.976987838745117e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.859375,"distances_sum":1928.9454229111675}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8212890625,"f1":0.8950778388278395,"seconds":5.207955837249756e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.21875,"distances_sum":2252.073278422841}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8056640625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8056640625,"f1":0.8822235056610066,"seconds":5.234032869338989e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.1328125,"distances_sum":2214.9026780638414}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8212890625,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.8212890625,"f1":0.8950778388278395,"seconds":5.207955837249756e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.21875,"distances_sum":2252.073278422841}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9655334249084253,"seconds":5.517154932022095e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.859375,"distances_sum":2633.1945383101083}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9346840659340666,"seconds":5.31412661075592e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.609375,"distances_sum":2472.158376939957}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9249370421245429,"seconds":5.276873707771301e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.5859375,"distances_sum":2424.6720511771414}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9608115842490847,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.828125,"distances_sum":2597.261439101909}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9344780219780224,"seconds":5.574896931648254e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.578125,"distances_sum":2484.986923034379}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9655334249084253,"seconds":5.517154932022095e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.859375,"distances_sum":2633.1945383101083}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9655334249084253,"seconds":5.517154932022095e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.859375,"distances_sum":2633.1945383101083}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1982421875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1982421875,"f1":null,"seconds":3.209337592124939e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":5.671875,"distances_sum":467.6436032416385}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1943359375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1943359375,"f1":null,"seconds":3.0118972063064575e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":5.625,"distances_sum":488.61583861537923}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.568359375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.568359375,"f1":0.7105183011433018,"seconds":4.135072231292725e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.1328125,"distances_sum":1320.3577096600811}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.568359375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.568359375,"f1":0.7105183011433018,"seconds":4.135072231292725e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.1328125,"distances_sum":1320.3577096600811}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8565653096903104,"seconds":5.7406723499298096e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.15625,"distances_sum":1919.1135034593449}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8591876873126881,"seconds":4.90434467792511e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.1796875,"distances_sum":1908.548240362567}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6826171875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6826171875,"f1":0.7996265886890896,"seconds":4.742294549942017e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":7.6640625,"distances_sum":1618.7232102532723}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.8542306651681659,"seconds":5.010515451431274e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.140625,"distances_sum":1890.2070018015615}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7666015625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7666015625,"f1":0.8591876873126881,"seconds":4.90434467792511e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.1796875,"distances_sum":1908.548240362567}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9393658424908432,"seconds":5.6568533182144165e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.8828125,"distances_sum":2480.216053661792}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9579498626373635,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.8984375,"distances_sum":2620.593524378054}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9237470862470871,"seconds":5.539506673812866e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.875,"distances_sum":2328.5936738618693}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8330078125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8330078125,"f1":0.9034600815850825,"seconds":5.422160029411316e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.671875,"distances_sum":2196.784606277824}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9592319139194144,"seconds":5.673617124557495e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.9140625,"distances_sum":2614.120749388341}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9296875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9592319139194144,"seconds":5.673617124557495e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.9140625,"distances_sum":2614.120749388341}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9296875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9592319139194144,"seconds":5.673617124557495e-6,"exhaustive_search_seconds":1.3131648302078247e-6,"evaluations":8.9140625,"distances_sum":2614.120749388341}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.15234375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.15234375,"f1":null,"seconds":2.818182110786438e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":4.40625,"distances_sum":436.08625713725297}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3671875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3671875,"f1":null,"seconds":3.4831464290618896e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":5.8046875,"distances_sum":902.5952040841772}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8483984765234772,"seconds":5.014240741729736e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.21875,"distances_sum":2012.6180245850692}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7529296875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7529296875,"f1":0.8483984765234772,"seconds":5.014240741729736e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.21875,"distances_sum":2012.6180245850692}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.961423992673993,"seconds":5.783513188362122e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.7890625,"distances_sum":2626.287546124997}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9143179736929744,"seconds":5.304813385009766e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.6796875,"distances_sum":2298.7127950925224}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9057640276390283,"seconds":5.276873707771301e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.640625,"distances_sum":2224.887366621023}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.961423992673993,"seconds":5.783513188362122e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.7890625,"distances_sum":2626.287546124997}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9632841117216122,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8671875,"distances_sum":2613.0281550018544}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.9781250000000001,"seconds":6.321817636489868e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.890625,"distances_sum":2750.7403507582267}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9599609375,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9781250000000001,"seconds":6.321817636489868e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.890625,"distances_sum":2750.7403507582267}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9599609375,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9781250000000001,"seconds":6.321817636489868e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.890625,"distances_sum":2750.7403507582267}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.79296875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.79296875,"f1":0.8756790084915093,"seconds":5.321577191352844e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.421875,"distances_sum":1308.5352062762618}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.794921875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.794921875,"f1":0.8757159507159514,"seconds":5.111098289489746e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.3984375,"distances_sum":1321.7015026224049}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.794921875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.794921875,"f1":0.8757159507159514,"seconds":5.111098289489746e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.3984375,"distances_sum":1321.7015026224049}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8779296875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8779296875,"f1":0.9291984057609064,"seconds":5.606561899185181e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.515625,"distances_sum":1542.600713436818}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9508470695970701,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.7109375,"distances_sum":1665.4984605835234}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9069029928404935,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.5625,"distances_sum":1432.1943556180197}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9328525641025647,"seconds":5.3960829973220825e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.59375,"distances_sum":1562.8736943570934}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9508470695970701,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.7109375,"distances_sum":1665.4984605835234}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":9,"bsize":12}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9735519688644693,"seconds":5.988404154777527e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.90625,"distances_sum":1773.1265289637013}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":6,"bsize":12}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9724702380952385,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.875,"distances_sum":1771.0276080984434}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":10,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9661286630036636,"seconds":5.723908543586731e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.859375,"distances_sum":1725.4628470422165}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":10,"bsize":11}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9621336996337,"seconds":5.982816219329834e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.8203125,"distances_sum":1721.427963298304}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9563701923076928,"seconds":5.68293035030365e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.7265625,"distances_sum":1694.3943722277736}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":9,"bsize":12},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9735519688644693,"seconds":5.988404154777527e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.90625,"distances_sum":1773.1265289637013}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":9,"bsize":12},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9735519688644693,"seconds":5.988404154777527e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.90625,"distances_sum":1773.1265289637013}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4306640625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4306640625,"f1":null,"seconds":3.5315752029418945e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":6.3125,"distances_sum":758.688421963522}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5458984375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5458984375,"f1":null,"seconds":4.280358552932739e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.1015625,"distances_sum":963.763239884571}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4208984375, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.4208984375,"f1":null,"seconds":3.688037395477295e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":6.234375,"distances_sum":768.3654504302159}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5458984375,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5458984375,"f1":null,"seconds":4.280358552932739e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.1015625,"distances_sum":963.763239884571}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8586803821178828,"seconds":5.116686224937439e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.96875,"distances_sum":1411.589759310451}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7138671875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7138671875,"f1":0.8242856102231112,"seconds":4.783272743225098e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.875,"distances_sum":1348.360410566095}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5888671875, conf: {"ssize":8,"bsize":3}, perf: {"precision":1.0,"recall":0.5888671875,"f1":0.725470883283384,"seconds":4.12575900554657e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.328125,"distances_sum":1092.4798033875243}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7646484375,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7646484375,"f1":0.8586803821178828,"seconds":5.116686224937439e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":7.96875,"distances_sum":1411.589759310451}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.961630036630037,"seconds":5.660578608512878e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8046875,"distances_sum":1952.8326184189452}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.791015625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.791015625,"f1":0.877200924075925,"seconds":5.6140124797821045e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.234375,"distances_sum":1533.0295131743721}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.943735951548452,"seconds":5.671754479408264e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.78125,"distances_sum":1826.0260895095969}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.961630036630037,"seconds":5.660578608512878e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8046875,"distances_sum":1952.8326184189452}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9326171875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.961630036630037,"seconds":5.660578608512878e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8046875,"distances_sum":1952.8326184189452}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8586626914751923,"seconds":5.27501106262207e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.3203125,"distances_sum":1439.0738681771566}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.369140625, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.369140625,"f1":null,"seconds":3.335997462272644e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":5.7265625,"distances_sum":693.735896450861}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7998046875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7998046875,"f1":0.8819482600732609,"seconds":5.152076482772827e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.4140625,"distances_sum":1511.6563928327316}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7998046875,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7998046875,"f1":0.8819482600732609,"seconds":5.152076482772827e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.4140625,"distances_sum":1511.6563928327316}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8271484375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8271484375,"f1":0.8990160880785891,"seconds":5.487352609634399e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.5234375,"distances_sum":1628.2447265419823}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9589342948717954,"seconds":5.66430389881134e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.8046875,"distances_sum":1942.0648682521667}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83203125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.83203125,"f1":0.9009532134532141,"seconds":5.509704351425171e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.4140625,"distances_sum":1662.1551543836545}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9589342948717954,"seconds":5.66430389881134e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.8046875,"distances_sum":1942.0648682521667}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9694024725274728,"seconds":6.38328492641449e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.8984375,"distances_sum":1989.6292919376106}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9689961080586085,"seconds":6.11133873462677e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.8828125,"distances_sum":2005.6652639443366}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9694024725274728,"seconds":6.38328492641449e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.8984375,"distances_sum":1989.6292919376106}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9694024725274728,"seconds":6.38328492641449e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.8984375,"distances_sum":1989.6292919376106}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2001953125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2001953125,"f1":null,"seconds":3.1050294637680054e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":5.171875,"distances_sum":354.9107939720599}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2001953125,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.2001953125,"f1":null,"seconds":3.1050294637680054e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":5.171875,"distances_sum":354.9107939720599}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6728515625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6728515625,"f1":0.7924533799533806,"seconds":4.606321454048157e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":7.625,"distances_sum":1179.4880377342356}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5537109375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5537109375,"f1":0.6949777652902659,"seconds":4.250556230545044e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":6.8046875,"distances_sum":972.645945392742}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6728515625,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6728515625,"f1":0.7924533799533806,"seconds":4.606321454048157e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":7.625,"distances_sum":1179.4880377342356}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.937917811355312,"seconds":5.465000867843628e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.6015625,"distances_sum":1804.3100273662867}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9032056485181492,"seconds":5.370005965232849e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.484375,"distances_sum":1605.0889811561417}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8095703125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8095703125,"f1":0.8863360597735606,"seconds":5.0924718379974365e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.3046875,"distances_sum":1545.9382167364843}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8583984375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8583984375,"f1":0.9176484973359981,"seconds":5.362555384635925e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.453125,"distances_sum":1687.7049644599992}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8948723151848159,"seconds":5.17629086971283e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.3828125,"distances_sum":1568.1117589697828}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.892578125,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.892578125,"f1":0.937917811355312,"seconds":5.465000867843628e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.6015625,"distances_sum":1804.3100273662867}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.892578125,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.892578125,"f1":0.937917811355312,"seconds":5.465000867843628e-6,"exhaustive_search_seconds":1.3578683137893677e-6,"evaluations":8.6015625,"distances_sum":1804.3100273662867}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6611328125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6611328125,"f1":0.7823726620601629,"seconds":4.429370164871216e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.453125,"distances_sum":1286.3637767114378}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6611328125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6611328125,"f1":0.7823726620601629,"seconds":4.429370164871216e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.453125,"distances_sum":1286.3637767114378}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9449633699633703,"seconds":5.3532421588897705e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.5859375,"distances_sum":1974.96742749993}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9033203125,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9033203125,"f1":0.9449633699633703,"seconds":5.3532421588897705e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.5859375,"distances_sum":1974.96742749993}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9033203125,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9033203125,"f1":0.9449633699633703,"seconds":5.3532421588897705e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.5859375,"distances_sum":1974.96742749993}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9033203125,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9033203125,"f1":0.9449633699633703,"seconds":5.3532421588897705e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.5859375,"distances_sum":1974.96742749993}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3916015625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3916015625,"f1":null,"seconds":3.6209821701049805e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":5.7890625,"distances_sum":734.9978408770794}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6865234375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6865234375,"f1":0.8040168165168173,"seconds":4.636123776435852e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.6796875,"distances_sum":1374.4826876891177}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6865234375,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6865234375,"f1":0.8040168165168173,"seconds":4.636123776435852e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.6796875,"distances_sum":1374.4826876891177}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9428857600732606,"seconds":5.409121513366699e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.6171875,"distances_sum":1978.7132021542295}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8359375,"f1":0.9041666666666678,"seconds":5.304813385009766e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.4375,"distances_sum":1742.7728842565527}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9013671875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9428857600732606,"seconds":5.409121513366699e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.6171875,"distances_sum":1978.7132021542295}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9013671875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9428857600732606,"seconds":5.409121513366699e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.6171875,"distances_sum":1978.7132021542295}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9013671875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9428857600732606,"seconds":5.409121513366699e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.6171875,"distances_sum":1978.7132021542295}}, n: 9
inertia(cfft.distances) = 21.055462683182885
inertia(cdnet.distances) = 25.890380867842495
inertia(crand.distances) = 22.068412846956964
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.9
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9022222222222221
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.9466666666666667
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9355555555555556
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9377777777777778
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8866666666666667
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8888888888888888
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8977777777777778
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8799999999999999
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8911111111111111
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9466666666666667
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9199999999999999
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9333333333333332
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9311111111111111
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.9333333333333335
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9222222222222222
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9244444444444445
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8888888888888888
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9066666666666666
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8777777777777778
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8999999999999999
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9088888888888889
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8555555555555555
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9155555555555556
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9044444444444445
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9066666666666667
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9111111111111111
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX===== rocchio like>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX==== clustering>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
nc.class_map = [3, 1, 2, 3, 1, 2, 3, 3, 1, 3, 3, 3, 2, 3, 3, 2, 3, 1, 2, 3, 3]
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.92
*** starting iteration: 1; err: [Inf, 0.41980000285247077] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.41980000285247077, 0.19108079299765396] ***
*** starting iteration: 2; err: [Inf, 0.41980000285247077, 0.19108079299765396] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.41980000285247077, 0.19108079299765396, 0.17312148843861697] ***
*** starting iteration: 3; err: [Inf, 0.41980000285247077, 0.19108079299765396, 0.17312148843861697] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.41980000285247077, 0.19108079299765396, 0.17312148843861697, 0.1654528532805047] ***
*** starting iteration: 4; err: [Inf, 0.41980000285247077, 0.19108079299765396, 0.17312148843861697, 0.1654528532805047] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.41980000285247077, 0.19108079299765396, 0.17312148843861697, 0.1654528532805047, 0.16349131641382694] ***
*** starting iteration: 5; err: [Inf, 0.41980000285247077, 0.19108079299765396, 0.17312148843861697, 0.1654528532805047, 0.16349131641382694] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.41980000285247077, 0.19108079299765396, 0.17312148843861697, 0.1654528532805047, 0.16349131641382694, 0.1623779148122655] ***
*** starting iteration: 6; err: [Inf, 0.41980000285247077, 0.19108079299765396, 0.17312148843861697, 0.1654528532805047, 0.16349131641382694, 0.1623779148122655] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.41980000285247077, 0.19108079299765396, 0.17312148843861697, 0.1654528532805047, 0.16349131641382694, 0.1623779148122655, 0.16209971251282457] ***
*** finished computation of 12 references, err: [Inf, 0.41980000285247077, 0.19108079299765396, 0.17312148843861697, 0.1654528532805047, 0.16349131641382694, 0.1623779148122655, 0.16209971251282457] ***
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
acc = 0.9733333333333334
Test Summary:   | Pass  Total
NearestCentroid |   10     10
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.311721118612094] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.311721118612094, 0.27422342381229664] ***
*** finished computation of 7 references, err: [Inf, 0.311721118612094, 0.27422342381229664] ***
*** center 1: selecting labels [1] (freq >= 1) [from [1, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 2, 21]]
** centroid: 2, normalized-entropy: 0.42622865699814483, [(2, 2), (3, 21)]
*** center 3: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 9, 10]]
** centroid: 6, normalized-entropy: 0.9980008838722993, [(2, 9), (3, 10)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.42956674138948014] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.42956674138948014, 0.2204921656513154] ***
*** starting iteration: 2; err: [Inf, 0.42956674138948014, 0.2204921656513154] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.42956674138948014, 0.2204921656513154, 0.20445615615248072] ***
*** starting iteration: 3; err: [Inf, 0.42956674138948014, 0.2204921656513154, 0.20445615615248072] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.42956674138948014, 0.2204921656513154, 0.20445615615248072, 0.1905582178127837] ***
*** finished computation of 7 references, err: [Inf, 0.42956674138948014, 0.2204921656513154, 0.20445615615248072, 0.1905582178127837] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 1, 18]]
*** center 2: selecting labels [1] (freq >= 2) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 12, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 15, 1]]
*** center 5: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 6, 5]]
** centroid: 7, normalized-entropy: 0.9940302114769566, [(2, 6), (3, 5)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3428993386200569] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3428993386200569, 0.18818258653384845] ***
*** starting iteration: 2; err: [Inf, 0.3428993386200569, 0.18818258653384845] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3428993386200569, 0.18818258653384845, 0.17882193907597904] ***
*** starting iteration: 3; err: [Inf, 0.3428993386200569, 0.18818258653384845, 0.17882193907597904] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3428993386200569, 0.18818258653384845, 0.17882193907597904, 0.17570408777769575] ***
*** finished computation of 7 references, err: [Inf, 0.3428993386200569, 0.18818258653384845, 0.17882193907597904, 0.17570408777769575] ***
*** center 1: selecting labels [1] (freq >= 2) [from [23, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 18, 2]]
** centroid: 3, normalized-entropy: 0.46899559358928133, [(2, 18), (3, 2)]
*** center 4: selecting labels [1] (freq >= 2) [from [10, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 4, 23]]
** centroid: 5, normalized-entropy: 0.6051865766334207, [(2, 4), (3, 23)]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 9, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.1167000078385207] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1167000078385207, 0.5923496545344638] ***
*** starting iteration: 2; err: [Inf, 1.1167000078385207, 0.5923496545344638] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1167000078385207, 0.5923496545344638, 0.5878339389883681] ***
*** starting iteration: 3; err: [Inf, 1.1167000078385207, 0.5923496545344638, 0.5878339389883681] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1167000078385207, 0.5923496545344638, 0.5878339389883681, 0.5842922634019099] ***
*** finished computation of 3 references, err: [Inf, 1.1167000078385207, 0.5923496545344638, 0.5878339389883681, 0.5842922634019099] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 10, 28]]
** centroid: 1, normalized-entropy: 0.8314743880097292, [(2, 10), (3, 28)]
*** center 2: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 24, 3]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(2, 24), (3, 3)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.25298832324108556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25298832324108556, 0.15746164325988116] ***
*** finished computation of 7 references, err: [Inf, 0.25298832324108556, 0.15746164325988116] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 2: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [24, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 13, 6]]
** centroid: 4, normalized-entropy: 0.8997437586982626, [(2, 13), (3, 6)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 1, 16]]
** centroid: 5, normalized-entropy: 0.32275695889739825, [(2, 1), (3, 16)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 2, 5]]
** centroid: 6, normalized-entropy: 0.8631205685666311, [(2, 2), (3, 5)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.8323692299376161] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8323692299376161, 0.33092497942714927] ***
*** finished computation of 7 references, err: [Inf, 0.8323692299376161, 0.33092497942714927] ***
*** center 1: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [1, 1, 0]]
** centroid: 3, normalized-entropy: 1.0, [(1, 1), (2, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 24]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 34, 9]]
** centroid: 7, normalized-entropy: 0.7401470427139037, [(2, 34), (3, 9)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 2.4450000209428144] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.4450000209428144, 0.5940772452262643] ***
*** starting iteration: 2; err: [Inf, 2.4450000209428144, 0.5940772452262643] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.4450000209428144, 0.5940772452262643, 0.5615972446196819] ***
*** starting iteration: 3; err: [Inf, 2.4450000209428144, 0.5940772452262643, 0.5615972446196819] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.4450000209428144, 0.5940772452262643, 0.5615972446196819, 0.5609759634480046] ***
*** finished computation of 3 references, err: [Inf, 2.4450000209428144, 0.5940772452262643, 0.5615972446196819, 0.5609759634480046] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 4, 25]]
** centroid: 1, normalized-entropy: 0.5787946246321198, [(2, 4), (3, 25)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 30, 6]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(2, 30), (3, 6)]
*** center 3: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.062100003815572] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.062100003815572, 0.5464846194497981] ***
*** starting iteration: 2; err: [Inf, 1.062100003815572, 0.5464846194497981] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.062100003815572, 0.5464846194497981, 0.5297345845047073] ***
*** starting iteration: 3; err: [Inf, 1.062100003815572, 0.5464846194497981, 0.5297345845047073] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.062100003815572, 0.5464846194497981, 0.5297345845047073, 0.5200197866785904] ***
*** finished computation of 3 references, err: [Inf, 1.062100003815572, 0.5464846194497981, 0.5297345845047073, 0.5200197866785904] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 2, 29]]
** centroid: 2, normalized-entropy: 0.3451173149449528, [(2, 2), (3, 29)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 29, 7]]
** centroid: 3, normalized-entropy: 0.710676853856123, [(2, 29), (3, 7)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9270000034276121] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9270000034276121, 0.540541203906472] ***
*** starting iteration: 2; err: [Inf, 0.9270000034276121, 0.540541203906472] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9270000034276121, 0.540541203906472, 0.5241442056589846] ***
*** starting iteration: 3; err: [Inf, 0.9270000034276121, 0.540541203906472, 0.5241442056589846] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9270000034276121, 0.540541203906472, 0.5241442056589846, 0.5203151871775268] ***
*** finished computation of 3 references, err: [Inf, 0.9270000034276121, 0.540541203906472, 0.5241442056589846, 0.5203151871775268] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 33, 9]]
** centroid: 1, normalized-entropy: 0.7495952572594798, [(2, 33), (3, 9)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 2, 24]]
** centroid: 2, normalized-entropy: 0.3912435636292556, [(2, 2), (3, 24)]
*** center 3: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 3.0505061554429656] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.0505061554429656, 0.8437644605143144] ***
*** starting iteration: 2; err: [Inf, 3.0505061554429656, 0.8437644605143144] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.0505061554429656, 0.8437644605143144, 0.39747492019055913] ***
*** starting iteration: 3; err: [Inf, 3.0505061554429656, 0.8437644605143144, 0.39747492019055913] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.0505061554429656, 0.8437644605143144, 0.39747492019055913, 0.3891570844564778] ***
*** finished computation of 3 references, err: [Inf, 3.0505061554429656, 0.8437644605143144, 0.39747492019055913, 0.3891570844564778] ***
*** center 1: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 3, 25]]
** centroid: 2, normalized-entropy: 0.4912373418243334, [(2, 3), (3, 25)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 31, 6]]
** centroid: 3, normalized-entropy: 0.6394571324851642, [(2, 31), (3, 6)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 3.35153588390536] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.35153588390536, 1.1878207914428276] ***
*** starting iteration: 2; err: [Inf, 3.35153588390536, 1.1878207914428276] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.35153588390536, 1.1878207914428276, 0.5871607170034906] ***
*** starting iteration: 3; err: [Inf, 3.35153588390536, 1.1878207914428276, 0.5871607170034906] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.35153588390536, 1.1878207914428276, 0.5871607170034906, 0.4005949946258056] ***
*** finished computation of 3 references, err: [Inf, 3.35153588390536, 1.1878207914428276, 0.5871607170034906, 0.4005949946258056] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 31, 22]]
** centroid: 1, normalized-entropy: 0.9790981671667148, [(2, 31), (3, 22)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 3: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.75601915216315] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.75601915216315, 0.6634355909199828] ***
*** starting iteration: 2; err: [Inf, 1.75601915216315, 0.6634355909199828] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.75601915216315, 0.6634355909199828, 0.6350486815522338] ***
*** starting iteration: 3; err: [Inf, 1.75601915216315, 0.6634355909199828, 0.6350486815522338] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.75601915216315, 0.6634355909199828, 0.6350486815522338, 0.6269542265865327] ***
*** finished computation of 3 references, err: [Inf, 1.75601915216315, 0.6634355909199828, 0.6350486815522338, 0.6269542265865327] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [19, 2, 0]]
** centroid: 1, normalized-entropy: 0.45371633918694493, [(1, 19), (2, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 33, 33]]
** centroid: 3, normalized-entropy: 1.0, [(2, 33), (3, 33)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.3457427276354523] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 2.3457427276354523, 0.3478277612195025] ***
*** starting iteration: 2; err: [Inf, 2.3457427276354523, 0.3478277612195025] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 2.3457427276354523, 0.3478277612195025, 0.20546360956842782] ***
*** starting iteration: 3; err: [Inf, 2.3457427276354523, 0.3478277612195025, 0.20546360956842782] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 2.3457427276354523, 0.3478277612195025, 0.20546360956842782, 0.200842109384447] ***
*** finished computation of 7 references, err: [Inf, 2.3457427276354523, 0.3478277612195025, 0.20546360956842782, 0.200842109384447] ***
*** center 1: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 21, 1]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 1, 5]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 11, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 1, 9]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23474611350667632] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23474611350667632, 0.1701987115171189] ***
*** starting iteration: 2; err: [Inf, 0.23474611350667632, 0.1701987115171189] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23474611350667632, 0.1701987115171189, 0.1700801575996249] ***
*** finished computation of 7 references, err: [Inf, 0.23474611350667632, 0.1701987115171189, 0.1700801575996249] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 15, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 16]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 2, 7]]
** centroid: 3, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 9, 4]]
** centroid: 4, normalized-entropy: 0.8904916402194913, [(2, 9), (3, 4)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 5, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6984969638625281] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6984969638625281, 0.5376922920303601] ***
*** starting iteration: 2; err: [Inf, 0.6984969638625281, 0.5376922920303601] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6984969638625281, 0.5376922920303601, 0.3994914067787314] ***
*** starting iteration: 3; err: [Inf, 0.6984969638625281, 0.5376922920303601, 0.3994914067787314] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6984969638625281, 0.5376922920303601, 0.3994914067787314, 0.34118615057617624] ***
*** finished computation of 7 references, err: [Inf, 0.6984969638625281, 0.5376922920303601, 0.3994914067787314, 0.34118615057617624] ***
*** center 1: selecting labels [1] (freq >= 2) [from [7, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [7, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [5, 0, 0]]
*** center 4: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [1, 0, 0]
*** center 5: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 18, 1]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 17, 32]]
** centroid: 7, normalized-entropy: 0.9313043685793762, [(2, 17), (3, 32)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.44704785481109577] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.44704785481109577, 0.23018793059949424] ***
*** finished computation of 7 references, err: [Inf, 0.44704785481109577, 0.23018793059949424] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 12, 1]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 4, 11]]
** centroid: 3, normalized-entropy: 0.8366407419411671, [(2, 4), (3, 11)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 18, 4]]
** centroid: 4, normalized-entropy: 0.6840384356390419, [(2, 18), (3, 4)]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 6: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6537527307977775] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6537527307977775, 0.23605182672110783] ***
*** finished computation of 7 references, err: [Inf, 0.6537527307977775, 0.23605182672110783] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 25, 1]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 4, 9]]
** centroid: 3, normalized-entropy: 0.8904916402194913, [(2, 4), (3, 9)]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 2, 5]]
** centroid: 5, normalized-entropy: 0.8631205685666311, [(2, 2), (3, 5)]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 7: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.9472852900590578] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.9472852900590578, 0.36371310751863634] ***
*** finished computation of 7 references, err: [Inf, 1.9472852900590578, 0.36371310751863634] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 4, 13]]
** centroid: 2, normalized-entropy: 0.787126586201269, [(2, 4), (3, 13)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 19, 6]]
** centroid: 3, normalized-entropy: 0.7950402793845225, [(2, 19), (3, 6)]
*** center 4: selecting labels [1] (freq >= 2) [from [32, 1, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 11, 1]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 5.440399932107166] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 5.440399932107166, 1.7165115564375533] ***
*** starting iteration: 2; err: [Inf, 5.440399932107166, 1.7165115564375533] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 5.440399932107166, 1.7165115564375533, 0.925101774062704] ***
*** starting iteration: 3; err: [Inf, 5.440399932107166, 1.7165115564375533, 0.925101774062704] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 5.440399932107166, 1.7165115564375533, 0.925101774062704, 0.6034849809517663] ***
*** starting iteration: 4; err: [Inf, 5.440399932107166, 1.7165115564375533, 0.925101774062704, 0.6034849809517663] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 5.440399932107166, 1.7165115564375533, 0.925101774062704, 0.6034849809517663, 0.5722639980506259] ***
*** starting iteration: 5; err: [Inf, 5.440399932107166, 1.7165115564375533, 0.925101774062704, 0.6034849809517663, 0.5722639980506259] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 5.440399932107166, 1.7165115564375533, 0.925101774062704, 0.6034849809517663, 0.5722639980506259, 0.5595018964808763] ***
*** starting iteration: 6; err: [Inf, 5.440399932107166, 1.7165115564375533, 0.925101774062704, 0.6034849809517663, 0.5722639980506259, 0.5595018964808763] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 5.440399932107166, 1.7165115564375533, 0.925101774062704, 0.6034849809517663, 0.5722639980506259, 0.5595018964808763, 0.5569065499520409] ***
*** starting iteration: 7; err: [Inf, 5.440399932107166, 1.7165115564375533, 0.925101774062704, 0.6034849809517663, 0.5722639980506259, 0.5595018964808763, 0.5569065499520409] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 5.440399932107166, 1.7165115564375533, 0.925101774062704, 0.6034849809517663, 0.5722639980506259, 0.5595018964808763, 0.5569065499520409, 0.5569065499520409] ***
*** finished computation of 3 references, err: [Inf, 5.440399932107166, 1.7165115564375533, 0.925101774062704, 0.6034849809517663, 0.5722639980506259, 0.5595018964808763, 0.5569065499520409, 0.5569065499520409] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 23]]
** centroid: 1, normalized-entropy: 0.24988229283318547, [(2, 1), (3, 23)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 33, 8]]
** centroid: 2, normalized-entropy: 0.7120640548905481, [(2, 33), (3, 8)]
*** center 3: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 3.5634999781726027] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.5634999781726027, 1.2388262468337876] ***
*** starting iteration: 2; err: [Inf, 3.5634999781726027, 1.2388262468337876] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.5634999781726027, 1.2388262468337876, 0.5548113764661445] ***
*** starting iteration: 3; err: [Inf, 3.5634999781726027, 1.2388262468337876, 0.5548113764661445] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.5634999781726027, 1.2388262468337876, 0.5548113764661445, 0.4957176980143138] ***
*** starting iteration: 4; err: [Inf, 3.5634999781726027, 1.2388262468337876, 0.5548113764661445, 0.4957176980143138] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.5634999781726027, 1.2388262468337876, 0.5548113764661445, 0.4957176980143138, 0.4935639981416892] ***
*** starting iteration: 5; err: [Inf, 3.5634999781726027, 1.2388262468337876, 0.5548113764661445, 0.4957176980143138, 0.4935639981416892] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.5634999781726027, 1.2388262468337876, 0.5548113764661445, 0.4957176980143138, 0.4935639981416892, 0.4935639981416892] ***
*** finished computation of 3 references, err: [Inf, 3.5634999781726027, 1.2388262468337876, 0.5548113764661445, 0.4957176980143138, 0.4935639981416892, 0.4935639981416892] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 30, 11]]
** centroid: 1, normalized-entropy: 0.8390040613676978, [(2, 30), (3, 11)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 1, 25]]
** centroid: 2, normalized-entropy: 0.23519338181924157, [(2, 1), (3, 25)]
*** center 3: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 3.3122999649006393] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.3122999649006393, 1.2959263654968367] ***
*** starting iteration: 2; err: [Inf, 3.3122999649006393, 1.2959263654968367] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.3122999649006393, 1.2959263654968367, 0.643556386710843] ***
*** starting iteration: 3; err: [Inf, 3.3122999649006393, 1.2959263654968367, 0.643556386710843] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.3122999649006393, 1.2959263654968367, 0.643556386710843, 0.533677223590741] ***
*** starting iteration: 4; err: [Inf, 3.3122999649006393, 1.2959263654968367, 0.643556386710843, 0.533677223590741] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.3122999649006393, 1.2959263654968367, 0.643556386710843, 0.533677223590741, 0.5241442056589846] ***
*** starting iteration: 5; err: [Inf, 3.3122999649006393, 1.2959263654968367, 0.643556386710843, 0.533677223590741, 0.5241442056589846] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.3122999649006393, 1.2959263654968367, 0.643556386710843, 0.533677223590741, 0.5241442056589846, 0.5203151871775268] ***
*** starting iteration: 6; err: [Inf, 3.3122999649006393, 1.2959263654968367, 0.643556386710843, 0.533677223590741, 0.5241442056589846, 0.5203151871775268] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.3122999649006393, 1.2959263654968367, 0.643556386710843, 0.533677223590741, 0.5241442056589846, 0.5203151871775268, 0.5195918315480754] ***
*** finished computation of 3 references, err: [Inf, 3.3122999649006393, 1.2959263654968367, 0.643556386710843, 0.533677223590741, 0.5241442056589846, 0.5203151871775268, 0.5195918315480754] ***
*** center 1: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 33, 9]]
** centroid: 2, normalized-entropy: 0.7495952572594798, [(2, 33), (3, 9)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 2, 24]]
** centroid: 3, normalized-entropy: 0.3912435636292556, [(2, 2), (3, 24)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.6086467160509] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.6086467160509, 0.7136678595038284] ***
*** starting iteration: 2; err: [Inf, 2.6086467160509, 0.7136678595038284] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.6086467160509, 0.7136678595038284, 0.4016201095403121] ***
*** starting iteration: 3; err: [Inf, 2.6086467160509, 0.7136678595038284, 0.4016201095403121] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.6086467160509, 0.7136678595038284, 0.4016201095403121, 0.38898139034592333] ***
*** starting iteration: 4; err: [Inf, 2.6086467160509, 0.7136678595038284, 0.4016201095403121, 0.38898139034592333] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.6086467160509, 0.7136678595038284, 0.4016201095403121, 0.38898139034592333, 0.3885787543440219] ***
*** finished computation of 3 references, err: [Inf, 2.6086467160509, 0.7136678595038284, 0.4016201095403121, 0.38898139034592333, 0.3885787543440219] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 25]]
** centroid: 1, normalized-entropy: 0.4912373418243334, [(2, 3), (3, 25)]
*** center 2: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 31, 6]]
** centroid: 3, normalized-entropy: 0.6394571324851642, [(2, 31), (3, 6)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 3.100248586963862] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.100248586963862, 0.5473050377524684] ***
*** starting iteration: 2; err: [Inf, 3.100248586963862, 0.5473050377524684] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.100248586963862, 0.5473050377524684, 0.370716738047161] ***
*** starting iteration: 3; err: [Inf, 3.100248586963862, 0.5473050377524684, 0.370716738047161] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.100248586963862, 0.5473050377524684, 0.370716738047161, 0.35760450035884955] ***
*** starting iteration: 4; err: [Inf, 3.100248586963862, 0.5473050377524684, 0.370716738047161, 0.35760450035884955] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.100248586963862, 0.5473050377524684, 0.370716738047161, 0.35760450035884955, 0.3486797077607943] ***
*** starting iteration: 5; err: [Inf, 3.100248586963862, 0.5473050377524684, 0.370716738047161, 0.35760450035884955, 0.3486797077607943] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.100248586963862, 0.5473050377524684, 0.370716738047161, 0.35760450035884955, 0.3486797077607943, 0.3418911745737674] ***
*** starting iteration: 6; err: [Inf, 3.100248586963862, 0.5473050377524684, 0.370716738047161, 0.35760450035884955, 0.3486797077607943, 0.3418911745737674] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.100248586963862, 0.5473050377524684, 0.370716738047161, 0.35760450035884955, 0.3486797077607943, 0.3418911745737674, 0.34016543718104175] ***
*** starting iteration: 7; err: [Inf, 3.100248586963862, 0.5473050377524684, 0.370716738047161, 0.35760450035884955, 0.3486797077607943, 0.3418911745737674, 0.34016543718104175] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.100248586963862, 0.5473050377524684, 0.370716738047161, 0.35760450035884955, 0.3486797077607943, 0.3418911745737674, 0.34016543718104175, 0.34016543718104175] ***
*** finished computation of 3 references, err: [Inf, 3.100248586963862, 0.5473050377524684, 0.370716738047161, 0.35760450035884955, 0.3486797077607943, 0.3418911745737674, 0.34016543718104175, 0.34016543718104175] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 30, 11]]
** centroid: 1, normalized-entropy: 0.8390040613676978, [(2, 30), (3, 11)]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 1, 25]]
** centroid: 3, normalized-entropy: 0.23519338181924157, [(2, 1), (3, 25)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.185784195454672] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.185784195454672, 0.5188638458881026] ***
*** starting iteration: 2; err: [Inf, 1.185784195454672, 0.5188638458881026] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.185784195454672, 0.5188638458881026, 0.37375016368322006] ***
*** starting iteration: 3; err: [Inf, 1.185784195454672, 0.5188638458881026, 0.37375016368322006] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.185784195454672, 0.5188638458881026, 0.37375016368322006, 0.3702076574627951] ***
*** starting iteration: 4; err: [Inf, 1.185784195454672, 0.5188638458881026, 0.37375016368322006, 0.3702076574627951] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.185784195454672, 0.5188638458881026, 0.37375016368322006, 0.3702076574627951, 0.3673387382139074] ***
*** starting iteration: 5; err: [Inf, 1.185784195454672, 0.5188638458881026, 0.37375016368322006, 0.3702076574627951, 0.3673387382139074] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.185784195454672, 0.5188638458881026, 0.37375016368322006, 0.3702076574627951, 0.3673387382139074, 0.3661769930996355] ***
*** starting iteration: 6; err: [Inf, 1.185784195454672, 0.5188638458881026, 0.37375016368322006, 0.3702076574627951, 0.3673387382139074, 0.3661769930996355] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.185784195454672, 0.5188638458881026, 0.37375016368322006, 0.3702076574627951, 0.3673387382139074, 0.3661769930996355, 0.3650706674560804] ***
*** starting iteration: 7; err: [Inf, 1.185784195454672, 0.5188638458881026, 0.37375016368322006, 0.3702076574627951, 0.3673387382139074, 0.3661769930996355, 0.3650706674560804] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.185784195454672, 0.5188638458881026, 0.37375016368322006, 0.3702076574627951, 0.3673387382139074, 0.3661769930996355, 0.3650706674560804, 0.36373801352864277] ***
*** starting iteration: 8; err: [Inf, 1.185784195454672, 0.5188638458881026, 0.37375016368322006, 0.3702076574627951, 0.3673387382139074, 0.3661769930996355, 0.3650706674560804, 0.36373801352864277] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.185784195454672, 0.5188638458881026, 0.37375016368322006, 0.3702076574627951, 0.3673387382139074, 0.3661769930996355, 0.3650706674560804, 0.36373801352864277, 0.36266355842282083] ***
*** starting iteration: 9; err: [Inf, 1.185784195454672, 0.5188638458881026, 0.37375016368322006, 0.3702076574627951, 0.3673387382139074, 0.3661769930996355, 0.3650706674560804, 0.36373801352864277, 0.36266355842282083] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.185784195454672, 0.5188638458881026, 0.37375016368322006, 0.3702076574627951, 0.3673387382139074, 0.3661769930996355, 0.3650706674560804, 0.36373801352864277, 0.36266355842282083, 0.36266355842282083] ***
*** finished computation of 3 references, err: [Inf, 1.185784195454672, 0.5188638458881026, 0.37375016368322006, 0.3702076574627951, 0.3673387382139074, 0.3661769930996355, 0.3650706674560804, 0.36373801352864277, 0.36266355842282083, 0.36266355842282083] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 31, 8]]
** centroid: 1, normalized-entropy: 0.7320666900931937, [(2, 31), (3, 8)]
*** center 2: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 4, 25]]
** centroid: 3, normalized-entropy: 0.5787946246321198, [(2, 4), (3, 25)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.5897158358714438] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5897158358714438, 0.5312041367941677] ***
*** starting iteration: 2; err: [Inf, 1.5897158358714438, 0.5312041367941677] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5897158358714438, 0.5312041367941677, 0.4108283567766001] ***
*** starting iteration: 3; err: [Inf, 1.5897158358714438, 0.5312041367941677, 0.4108283567766001] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5897158358714438, 0.5312041367941677, 0.4108283567766001, 0.40545225757446746] ***
*** starting iteration: 4; err: [Inf, 1.5897158358714438, 0.5312041367941677, 0.4108283567766001, 0.40545225757446746] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5897158358714438, 0.5312041367941677, 0.4108283567766001, 0.40545225757446746, 0.4028581861696665] ***
*** starting iteration: 5; err: [Inf, 1.5897158358714438, 0.5312041367941677, 0.4108283567766001, 0.40545225757446746, 0.4028581861696665] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5897158358714438, 0.5312041367941677, 0.4108283567766001, 0.40545225757446746, 0.4028581861696665, 0.39488405226604667] ***
*** starting iteration: 6; err: [Inf, 1.5897158358714438, 0.5312041367941677, 0.4108283567766001, 0.40545225757446746, 0.4028581861696665, 0.39488405226604667] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5897158358714438, 0.5312041367941677, 0.4108283567766001, 0.40545225757446746, 0.4028581861696665, 0.39488405226604667, 0.3891570844564778] ***
*** starting iteration: 7; err: [Inf, 1.5897158358714438, 0.5312041367941677, 0.4108283567766001, 0.40545225757446746, 0.4028581861696665, 0.39488405226604667, 0.3891570844564778] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5897158358714438, 0.5312041367941677, 0.4108283567766001, 0.40545225757446746, 0.4028581861696665, 0.39488405226604667, 0.3891570844564778, 0.3885787543440219] ***
*** finished computation of 3 references, err: [Inf, 1.5897158358714438, 0.5312041367941677, 0.4108283567766001, 0.40545225757446746, 0.4028581861696665, 0.39488405226604667, 0.3891570844564778, 0.3885787543440219] ***
*** center 1: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 3, 25]]
** centroid: 2, normalized-entropy: 0.4912373418243334, [(2, 3), (3, 25)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 31, 6]]
** centroid: 3, normalized-entropy: 0.6394571324851642, [(2, 31), (3, 6)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9023160009747145] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9023160009747145, 0.34109091546713016] ***
*** starting iteration: 2; err: [Inf, 0.9023160009747145, 0.34109091546713016] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9023160009747145, 0.34109091546713016, 0.34016543718104175] ***
*** finished computation of 3 references, err: [Inf, 0.9023160009747145, 0.34109091546713016, 0.34016543718104175] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 25]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 30, 11]]
** centroid: 3, normalized-entropy: 0.8390040613676978, [(2, 30), (3, 11)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.6613963068855218] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.6613963068855218, 1.0258678807317863] ***
*** starting iteration: 2; err: [Inf, 2.6613963068855218, 1.0258678807317863] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.6613963068855218, 1.0258678807317863, 0.5637143913774635] ***
*** starting iteration: 3; err: [Inf, 2.6613963068855218, 1.0258678807317863, 0.5637143913774635] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.6613963068855218, 1.0258678807317863, 0.5637143913774635, 0.44511370372376774] ***
*** starting iteration: 4; err: [Inf, 2.6613963068855218, 1.0258678807317863, 0.5637143913774635, 0.44511370372376774] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.6613963068855218, 1.0258678807317863, 0.5637143913774635, 0.44511370372376774, 0.39041826357317616] ***
*** starting iteration: 5; err: [Inf, 2.6613963068855218, 1.0258678807317863, 0.5637143913774635, 0.44511370372376774, 0.39041826357317616] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.6613963068855218, 1.0258678807317863, 0.5637143913774635, 0.44511370372376774, 0.39041826357317616, 0.3702076574627951] ***
*** starting iteration: 6; err: [Inf, 2.6613963068855218, 1.0258678807317863, 0.5637143913774635, 0.44511370372376774, 0.39041826357317616, 0.3702076574627951] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.6613963068855218, 1.0258678807317863, 0.5637143913774635, 0.44511370372376774, 0.39041826357317616, 0.3702076574627951, 0.3673387382139074] ***
*** starting iteration: 7; err: [Inf, 2.6613963068855218, 1.0258678807317863, 0.5637143913774635, 0.44511370372376774, 0.39041826357317616, 0.3702076574627951, 0.3673387382139074] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.6613963068855218, 1.0258678807317863, 0.5637143913774635, 0.44511370372376774, 0.39041826357317616, 0.3702076574627951, 0.3673387382139074, 0.3661769930996355] ***
*** starting iteration: 8; err: [Inf, 2.6613963068855218, 1.0258678807317863, 0.5637143913774635, 0.44511370372376774, 0.39041826357317616, 0.3702076574627951, 0.3673387382139074, 0.3661769930996355] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.6613963068855218, 1.0258678807317863, 0.5637143913774635, 0.44511370372376774, 0.39041826357317616, 0.3702076574627951, 0.3673387382139074, 0.3661769930996355, 0.3650706674560804] ***
*** starting iteration: 9; err: [Inf, 2.6613963068855218, 1.0258678807317863, 0.5637143913774635, 0.44511370372376774, 0.39041826357317616, 0.3702076574627951, 0.3673387382139074, 0.3661769930996355, 0.3650706674560804] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.6613963068855218, 1.0258678807317863, 0.5637143913774635, 0.44511370372376774, 0.39041826357317616, 0.3702076574627951, 0.3673387382139074, 0.3661769930996355, 0.3650706674560804, 0.36373801352864277] ***
*** starting iteration: 10; err: [Inf, 2.6613963068855218, 1.0258678807317863, 0.5637143913774635, 0.44511370372376774, 0.39041826357317616, 0.3702076574627951, 0.3673387382139074, 0.3661769930996355, 0.3650706674560804, 0.36373801352864277] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.6613963068855218, 1.0258678807317863, 0.5637143913774635, 0.44511370372376774, 0.39041826357317616, 0.3702076574627951, 0.3673387382139074, 0.3661769930996355, 0.3650706674560804, 0.36373801352864277, 0.36266355842282083] ***
*** finished computation of 3 references, err: [Inf, 2.6613963068855218, 1.0258678807317863, 0.5637143913774635, 0.44511370372376774, 0.39041826357317616, 0.3702076574627951, 0.3673387382139074, 0.3661769930996355, 0.3650706674560804, 0.36373801352864277, 0.36266355842282083] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 31, 8]]
** centroid: 1, normalized-entropy: 0.7320666900931937, [(2, 31), (3, 8)]
*** center 2: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 4, 25]]
** centroid: 3, normalized-entropy: 0.5787946246321198, [(2, 4), (3, 25)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4629250516414921] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4629250516414921, 0.2676894239531186] ***
*** starting iteration: 2; err: [Inf, 0.4629250516414921, 0.2676894239531186] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4629250516414921, 0.2676894239531186, 0.22293027718676728] ***
*** starting iteration: 3; err: [Inf, 0.4629250516414921, 0.2676894239531186, 0.22293027718676728] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4629250516414921, 0.2676894239531186, 0.22293027718676728, 0.21014330012580584] ***
*** finished computation of 7 references, err: [Inf, 0.4629250516414921, 0.2676894239531186, 0.22293027718676728, 0.21014330012580584] ***
*** center 1: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 6]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 20, 1]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 13, 2]]
** centroid: 5, normalized-entropy: 0.5665095065529052, [(2, 13), (3, 2)]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.45566080419990146] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.45566080419990146, 0.1867285125366947] ***
*** starting iteration: 2; err: [Inf, 0.45566080419990146, 0.1867285125366947] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.45566080419990146, 0.1867285125366947, 0.17888841750296458] ***
*** starting iteration: 3; err: [Inf, 0.45566080419990146, 0.1867285125366947, 0.17888841750296458] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.45566080419990146, 0.1867285125366947, 0.17888841750296458, 0.17843116771191211] ***
*** finished computation of 7 references, err: [Inf, 0.45566080419990146, 0.1867285125366947, 0.17888841750296458, 0.17843116771191211] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 14, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 7, 11]]
** centroid: 2, normalized-entropy: 0.9640787648082293, [(2, 7), (3, 11)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 9, 0]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 1, 18]]
*** center 5: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.506917039904047] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.506917039904047, 0.24873024117790632] ***
*** starting iteration: 2; err: [Inf, 0.506917039904047, 0.24873024117790632] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.506917039904047, 0.24873024117790632, 0.22151178113809786] ***
*** starting iteration: 3; err: [Inf, 0.506917039904047, 0.24873024117790632, 0.22151178113809786] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.506917039904047, 0.24873024117790632, 0.22151178113809786, 0.21382052843329763] ***
*** finished computation of 7 references, err: [Inf, 0.506917039904047, 0.24873024117790632, 0.22151178113809786, 0.21382052843329763] ***
*** center 1: selecting labels [1] (freq >= 2) [from [4, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 18, 9]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(2, 18), (3, 9)]
*** center 4: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [6, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 17, 1]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 23]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5234435663210673] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5234435663210673, 0.24267870487415621] ***
*** starting iteration: 2; err: [Inf, 0.5234435663210673, 0.24267870487415621] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5234435663210673, 0.24267870487415621, 0.19577941879274832] ***
*** starting iteration: 3; err: [Inf, 0.5234435663210673, 0.24267870487415621, 0.19577941879274832] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5234435663210673, 0.24267870487415621, 0.19577941879274832, 0.1890474071112353] ***
*** finished computation of 7 references, err: [Inf, 0.5234435663210673, 0.24267870487415621, 0.19577941879274832, 0.1890474071112353] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 2, 15]]
** centroid: 1, normalized-entropy: 0.5225593745369407, [(2, 2), (3, 15)]
*** center 2: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 11]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [18, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 4, 5]]
** centroid: 6, normalized-entropy: 0.9910760598382222, [(2, 4), (3, 5)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 10, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21472046965117994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21472046965117994, 0.15410360164934817] ***
*** starting iteration: 2; err: [Inf, 0.21472046965117994, 0.15410360164934817] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21472046965117994, 0.15410360164934817, 0.14670024215366034] ***
*** starting iteration: 3; err: [Inf, 0.21472046965117994, 0.15410360164934817, 0.14670024215366034] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21472046965117994, 0.15410360164934817, 0.14670024215366034, 0.1455414117727162] ***
*** finished computation of 7 references, err: [Inf, 0.21472046965117994, 0.15410360164934817, 0.14670024215366034, 0.1455414117727162] ***
*** center 1: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 12, 2]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(2, 12), (3, 2)]
*** center 4: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 4, 9]]
** centroid: 5, normalized-entropy: 0.8904916402194913, [(2, 4), (3, 9)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 15, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 16]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3236923399158412] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3236923399158412, 0.21276986430639078] ***
*** starting iteration: 2; err: [Inf, 0.3236923399158412, 0.21276986430639078] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3236923399158412, 0.21276986430639078, 0.1995311979911957] ***
*** starting iteration: 3; err: [Inf, 0.3236923399158412, 0.21276986430639078, 0.1995311979911957] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3236923399158412, 0.21276986430639078, 0.1995311979911957, 0.19761078257592832] ***
*** finished computation of 7 references, err: [Inf, 0.3236923399158412, 0.21276986430639078, 0.1995311979911957, 0.19761078257592832] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 23]]
*** center 2: selecting labels [1] (freq >= 2) [from [3, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 6, 9]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(2, 6), (3, 9)]
*** center 4: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 13, 1]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 16, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 5.805399970891416] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 5.805399970891416, 2.8410300799817687] ***
*** starting iteration: 2; err: [Inf, 5.805399970891416, 2.8410300799817687] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 5.805399970891416, 2.8410300799817687, 1.820792343673014] ***
*** starting iteration: 3; err: [Inf, 5.805399970891416, 2.8410300799817687, 1.820792343673014] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 5.805399970891416, 2.8410300799817687, 1.820792343673014, 1.1214968371039122] ***
*** finished computation of 3 references, err: [Inf, 5.805399970891416, 2.8410300799817687, 1.820792343673014, 1.1214968371039122] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 29, 24]]
** centroid: 1, normalized-entropy: 0.9935704757706079, [(2, 29), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [35, 5, 0]]
** centroid: 2, normalized-entropy: 0.5435644431995963, [(1, 35), (2, 5)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.8575999905657197] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.8575999905657197, 1.0188038964378854] ***
*** starting iteration: 2; err: [Inf, 2.8575999905657197, 1.0188038964378854] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.8575999905657197, 1.0188038964378854, 0.5491516882589984] ***
*** starting iteration: 3; err: [Inf, 2.8575999905657197, 1.0188038964378854, 0.5491516882589984] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.8575999905657197, 1.0188038964378854, 0.5491516882589984, 0.4935639981416892] ***
*** finished computation of 3 references, err: [Inf, 2.8575999905657197, 1.0188038964378854, 0.5491516882589984, 0.4935639981416892] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 1, 25]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 30, 11]]
** centroid: 2, normalized-entropy: 0.8390040613676978, [(2, 30), (3, 11)]
*** center 3: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.6905999986196394] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.6905999986196394, 0.7859287410539595] ***
*** starting iteration: 2; err: [Inf, 1.6905999986196394, 0.7859287410539595] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.6905999986196394, 0.7859287410539595, 0.5416009801890701] ***
*** starting iteration: 3; err: [Inf, 1.6905999986196394, 0.7859287410539595, 0.5416009801890701] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.6905999986196394, 0.7859287410539595, 0.5416009801890701, 0.5273691348344393] ***
*** finished computation of 3 references, err: [Inf, 1.6905999986196394, 0.7859287410539595, 0.5416009801890701, 0.5273691348344393] ***
*** center 1: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 34, 10]]
** centroid: 2, normalized-entropy: 0.7732266742876346, [(2, 34), (3, 10)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 23]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.421299993783502] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.421299993783502, 0.5938482939838174] ***
*** starting iteration: 2; err: [Inf, 1.421299993783502, 0.5938482939838174] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.421299993783502, 0.5938482939838174, 0.5547518968377279] ***
*** starting iteration: 3; err: [Inf, 1.421299993783502, 0.5938482939838174, 0.5547518968377279] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.421299993783502, 0.5938482939838174, 0.5547518968377279, 0.5163467756916732] ***
*** finished computation of 3 references, err: [Inf, 1.421299993783502, 0.5938482939838174, 0.5547518968377279, 0.5163467756916732] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 31, 12]]
** centroid: 1, normalized-entropy: 0.8541802051521676, [(2, 31), (3, 12)]
*** center 2: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 24]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.4955999943980025] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.4955999943980025, 0.519911882636575] ***
*** starting iteration: 2; err: [Inf, 2.4955999943980025, 0.519911882636575] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.4955999943980025, 0.519911882636575, 0.519911882636575] ***
*** finished computation of 3 references, err: [Inf, 2.4955999943980025, 0.519911882636575, 0.519911882636575] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 32, 9]]
** centroid: 1, normalized-entropy: 0.7592757847892834, [(2, 32), (3, 9)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 3, 24]]
** centroid: 2, normalized-entropy: 0.5032583347756457, [(2, 3), (3, 24)]
*** center 3: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.2794999937183695] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2794999937183695, 0.6110312201888776] ***
*** starting iteration: 2; err: [Inf, 1.2794999937183695, 0.6110312201888776] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2794999937183695, 0.6110312201888776, 0.5878339389883681] ***
*** starting iteration: 3; err: [Inf, 1.2794999937183695, 0.6110312201888776, 0.5878339389883681] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2794999937183695, 0.6110312201888776, 0.5878339389883681, 0.5842922634019099] ***
*** starting iteration: 4; err: [Inf, 1.2794999937183695, 0.6110312201888776, 0.5878339389883681, 0.5842922634019099] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2794999937183695, 0.6110312201888776, 0.5878339389883681, 0.5842922634019099, 0.5820801675098952] ***
*** starting iteration: 5; err: [Inf, 1.2794999937183695, 0.6110312201888776, 0.5878339389883681, 0.5842922634019099, 0.5820801675098952] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2794999937183695, 0.6110312201888776, 0.5878339389883681, 0.5842922634019099, 0.5820801675098952, 0.5759867841605294] ***
*** starting iteration: 6; err: [Inf, 1.2794999937183695, 0.6110312201888776, 0.5878339389883681, 0.5842922634019099, 0.5820801675098952, 0.5759867841605294] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2794999937183695, 0.6110312201888776, 0.5878339389883681, 0.5842922634019099, 0.5820801675098952, 0.5759867841605294, 0.5632044534045327] ***
*** starting iteration: 7; err: [Inf, 1.2794999937183695, 0.6110312201888776, 0.5878339389883681, 0.5842922634019099, 0.5820801675098952, 0.5759867841605294, 0.5632044534045327] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2794999937183695, 0.6110312201888776, 0.5878339389883681, 0.5842922634019099, 0.5820801675098952, 0.5759867841605294, 0.5632044534045327, 0.5609759634480046] ***
*** starting iteration: 8; err: [Inf, 1.2794999937183695, 0.6110312201888776, 0.5878339389883681, 0.5842922634019099, 0.5820801675098952, 0.5759867841605294, 0.5632044534045327, 0.5609759634480046] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2794999937183695, 0.6110312201888776, 0.5878339389883681, 0.5842922634019099, 0.5820801675098952, 0.5759867841605294, 0.5632044534045327, 0.5609759634480046, 0.5603297228997994] ***
*** finished computation of 3 references, err: [Inf, 1.2794999937183695, 0.6110312201888776, 0.5878339389883681, 0.5842922634019099, 0.5820801675098952, 0.5759867841605294, 0.5632044534045327, 0.5609759634480046, 0.5603297228997994] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 4, 25]]
** centroid: 1, normalized-entropy: 0.5787946246321198, [(2, 4), (3, 25)]
*** center 2: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 30, 6]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(2, 30), (3, 6)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9904000085466979] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9904000085466979, 0.5547518968377279] ***
*** starting iteration: 2; err: [Inf, 0.9904000085466979, 0.5547518968377279] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9904000085466979, 0.5547518968377279, 0.5163467756916732] ***
*** starting iteration: 3; err: [Inf, 0.9904000085466979, 0.5547518968377279, 0.5163467756916732] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9904000085466979, 0.5547518968377279, 0.5163467756916732, 0.4957176980143138] ***
*** starting iteration: 4; err: [Inf, 0.9904000085466979, 0.5547518968377279, 0.5163467756916732, 0.4957176980143138] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9904000085466979, 0.5547518968377279, 0.5163467756916732, 0.4957176980143138, 0.4935639981416892] ***
*** starting iteration: 5; err: [Inf, 0.9904000085466979, 0.5547518968377279, 0.5163467756916732, 0.4957176980143138, 0.4935639981416892] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9904000085466979, 0.5547518968377279, 0.5163467756916732, 0.4957176980143138, 0.4935639981416892, 0.4935639981416892] ***
*** finished computation of 3 references, err: [Inf, 0.9904000085466979, 0.5547518968377279, 0.5163467756916732, 0.4957176980143138, 0.4935639981416892, 0.4935639981416892] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 25]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 30, 11]]
** centroid: 3, normalized-entropy: 0.8390040613676978, [(2, 30), (3, 11)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0372000043112415] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0372000043112415, 0.5703618697377408] ***
*** starting iteration: 2; err: [Inf, 1.0372000043112415, 0.5703618697377408] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0372000043112415, 0.5703618697377408, 0.5498081731449855] ***
*** starting iteration: 3; err: [Inf, 1.0372000043112415, 0.5703618697377408, 0.5498081731449855] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0372000043112415, 0.5703618697377408, 0.5498081731449855, 0.5408639736076403] ***
*** starting iteration: 4; err: [Inf, 1.0372000043112415, 0.5703618697377408, 0.5498081731449855, 0.5408639736076403] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0372000043112415, 0.5703618697377408, 0.5498081731449855, 0.5408639736076403, 0.5395676617629374] ***
*** starting iteration: 5; err: [Inf, 1.0372000043112415, 0.5703618697377408, 0.5498081731449855, 0.5408639736076403, 0.5395676617629374] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0372000043112415, 0.5703618697377408, 0.5498081731449855, 0.5408639736076403, 0.5395676617629374, 0.5389522715284201] ***
*** finished computation of 3 references, err: [Inf, 1.0372000043112415, 0.5703618697377408, 0.5498081731449855, 0.5408639736076403, 0.5395676617629374, 0.5389522715284201] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 10, 32]]
** centroid: 1, normalized-entropy: 0.7918583525674836, [(2, 10), (3, 32)]
*** center 2: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 25, 1]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.6038000026834436] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.6038000026834436, 0.5781307829804339] ***
*** finished computation of 3 references, err: [Inf, 1.6038000026834436, 0.5781307829804339] ***
*** center 1: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 34, 10]]
** centroid: 3, normalized-entropy: 0.7732266742876346, [(2, 34), (3, 10)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.1591000014343147] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1591000014343147, 0.4935639981416892] ***
*** finished computation of 3 references, err: [Inf, 1.1591000014343147, 0.4935639981416892] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 25]]
** centroid: 1, normalized-entropy: 0.23519338181924157, [(2, 1), (3, 25)]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 30, 11]]
** centroid: 3, normalized-entropy: 0.8390040613676978, [(2, 30), (3, 11)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.624599995539833] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.624599995539833, 0.526614980259912] ***
*** finished computation of 3 references, err: [Inf, 2.624599995539833, 0.526614980259912] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 31, 7]]
** centroid: 1, normalized-entropy: 0.6892019851173655, [(2, 31), (3, 7)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 4, 26]]
** centroid: 2, normalized-entropy: 0.5665095065529052, [(2, 4), (3, 26)]
*** center 3: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5191557028866725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5191557028866725, 0.17532372162432755] ***
*** finished computation of 7 references, err: [Inf, 0.5191557028866725, 0.17532372162432755] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 3, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 20]]
*** center 4: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [18, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 11, 3]]
** centroid: 6, normalized-entropy: 0.7495952572594798, [(2, 11), (3, 3)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 19, 1]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.43057606770757173] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.43057606770757173, 0.17790740281953332] ***
*** finished computation of 7 references, err: [Inf, 0.43057606770757173, 0.17790740281953332] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 14, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 3: selecting labels [1] (freq >= 2) [from [10, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 3, 17]]
** centroid: 4, normalized-entropy: 0.6098403047164005, [(2, 3), (3, 17)]
*** center 5: selecting labels [1] (freq >= 2) [from [23, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 14, 9]]
** centroid: 6, normalized-entropy: 0.9656361333706099, [(2, 14), (3, 9)]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4559870245908722] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4559870245908722, 0.17162512361099128] ***
*** finished computation of 7 references, err: [Inf, 0.4559870245908722, 0.17162512361099128] ***
*** center 1: selecting labels [1] (freq >= 2) [from [23, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 9, 1]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 18, 8]]
** centroid: 4, normalized-entropy: 0.8904916402194913, [(2, 18), (3, 8)]
*** center 5: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 8, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 20]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.46333860413475736] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.46333860413475736, 0.2264128765209454] ***
*** starting iteration: 2; err: [Inf, 0.46333860413475736, 0.2264128765209454] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.46333860413475736, 0.2264128765209454, 0.20517558252651508] ***
*** starting iteration: 3; err: [Inf, 0.46333860413475736, 0.2264128765209454, 0.20517558252651508] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.46333860413475736, 0.2264128765209454, 0.20517558252651508, 0.19554719713403013] ***
*** finished computation of 7 references, err: [Inf, 0.46333860413475736, 0.2264128765209454, 0.20517558252651508, 0.19554719713403013] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 4, 17]]
** centroid: 1, normalized-entropy: 0.7024665512903904, [(2, 4), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 17, 1]]
*** center 5: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [1, 0, 0]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 14, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
finished with 7 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 16)
[0.9733333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9266666666666666, 0.9266666666666666, 0.9266666666666666, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9199999999999999, 0.9133333333333332, 0.9133333333333332, 0.9, 0.9, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 1, 1.0, :dnet, 0.3, 2) => 0.9733333333333333
finished with 16
iteration 2 finished
generating 4 configurations using top 4 configurations, starting with 16)
[0.9733333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9266666666666666, 0.9266666666666666, 0.9266666666666666, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9199999999999999, 0.9133333333333332, 0.9133333333333332, 0.9, 0.9, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 1, 1.0, :dnet, 0.3, 2) => 0.9733333333333333
finished with 17
iteration 3 finished
*** starting iteration: 1; err: [Inf, 1.2211905882199605] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2211905882199605, 0.6941211590411294] ***
*** starting iteration: 2; err: [Inf, 1.2211905882199605, 0.6941211590411294] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2211905882199605, 0.6941211590411294, 0.6806412413461477] ***
*** starting iteration: 3; err: [Inf, 1.2211905882199605, 0.6941211590411294, 0.6806412413461477] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2211905882199605, 0.6941211590411294, 0.6806412413461477, 0.6749116754302574] ***
*** starting iteration: 4; err: [Inf, 1.2211905882199605, 0.6941211590411294, 0.6806412413461477, 0.6749116754302574] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2211905882199605, 0.6941211590411294, 0.6806412413461477, 0.6749116754302574, 0.6741507911307947] ***
*** finished computation of 3 references, err: [Inf, 1.2211905882199605, 0.6941211590411294, 0.6806412413461477, 0.6749116754302574, 0.6741507911307947] ***
*** center 1: selecting labels [1] (freq >= 2) [from [17, 1, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [18, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 33, 31]]
** centroid: 3, normalized-entropy: 0.9992954443621548, [(2, 33), (3, 31)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.6122250308293231] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6122250308293231, 0.37731172148797315] ***
*** starting iteration: 2; err: [Inf, 0.6122250308293231, 0.37731172148797315] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6122250308293231, 0.37731172148797315, 0.3590286653518493] ***
*** starting iteration: 3; err: [Inf, 0.6122250308293231, 0.37731172148797315, 0.3590286653518493] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6122250308293231, 0.37731172148797315, 0.3590286653518493, 0.344699407094935] ***
*** starting iteration: 4; err: [Inf, 0.6122250308293231, 0.37731172148797315, 0.3590286653518493, 0.344699407094935] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6122250308293231, 0.37731172148797315, 0.3590286653518493, 0.344699407094935, 0.34016543718104175] ***
*** starting iteration: 5; err: [Inf, 0.6122250308293231, 0.37731172148797315, 0.3590286653518493, 0.344699407094935, 0.34016543718104175] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6122250308293231, 0.37731172148797315, 0.3590286653518493, 0.344699407094935, 0.34016543718104175, 0.34016543718104175] ***
*** finished computation of 3 references, err: [Inf, 0.6122250308293231, 0.37731172148797315, 0.3590286653518493, 0.344699407094935, 0.34016543718104175, 0.34016543718104175] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 25]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 30, 11]]
** centroid: 3, normalized-entropy: 0.8390040613676978, [(2, 30), (3, 11)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.271853594182884] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.271853594182884, 0.6260973912245889] ***
*** starting iteration: 2; err: [Inf, 1.271853594182884, 0.6260973912245889] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.271853594182884, 0.6260973912245889, 0.5795967345072112] ***
*** starting iteration: 3; err: [Inf, 1.271853594182884, 0.6260973912245889, 0.5795967345072112] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.271853594182884, 0.6260973912245889, 0.5795967345072112, 0.4886552292432612] ***
*** starting iteration: 4; err: [Inf, 1.271853594182884, 0.6260973912245889, 0.5795967345072112, 0.4886552292432612] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.271853594182884, 0.6260973912245889, 0.5795967345072112, 0.4886552292432612, 0.40317720576942334] ***
*** starting iteration: 5; err: [Inf, 1.271853594182884, 0.6260973912245889, 0.5795967345072112, 0.4886552292432612, 0.40317720576942334] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.271853594182884, 0.6260973912245889, 0.5795967345072112, 0.4886552292432612, 0.40317720576942334, 0.379016595691329] ***
*** starting iteration: 6; err: [Inf, 1.271853594182884, 0.6260973912245889, 0.5795967345072112, 0.4886552292432612, 0.40317720576942334, 0.379016595691329] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.271853594182884, 0.6260973912245889, 0.5795967345072112, 0.4886552292432612, 0.40317720576942334, 0.379016595691329, 0.373115360656824] ***
*** starting iteration: 7; err: [Inf, 1.271853594182884, 0.6260973912245889, 0.5795967345072112, 0.4886552292432612, 0.40317720576942334, 0.379016595691329, 0.373115360656824] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.271853594182884, 0.6260973912245889, 0.5795967345072112, 0.4886552292432612, 0.40317720576942334, 0.379016595691329, 0.373115360656824, 0.36904058251229793] ***
*** starting iteration: 8; err: [Inf, 1.271853594182884, 0.6260973912245889, 0.5795967345072112, 0.4886552292432612, 0.40317720576942334, 0.379016595691329, 0.373115360656824, 0.36904058251229793] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.271853594182884, 0.6260973912245889, 0.5795967345072112, 0.4886552292432612, 0.40317720576942334, 0.379016595691329, 0.373115360656824, 0.36904058251229793, 0.36684217299420946] ***
*** starting iteration: 9; err: [Inf, 1.271853594182884, 0.6260973912245889, 0.5795967345072112, 0.4886552292432612, 0.40317720576942334, 0.379016595691329, 0.373115360656824, 0.36904058251229793, 0.36684217299420946] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.271853594182884, 0.6260973912245889, 0.5795967345072112, 0.4886552292432612, 0.40317720576942334, 0.379016595691329, 0.373115360656824, 0.36904058251229793, 0.36684217299420946, 0.36649016117014377] ***
*** finished computation of 3 references, err: [Inf, 1.271853594182884, 0.6260973912245889, 0.5795967345072112, 0.4886552292432612, 0.40317720576942334, 0.379016595691329, 0.373115360656824, 0.36904058251229793, 0.36684217299420946, 0.36649016117014377] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 27, 2]]
** centroid: 1, normalized-entropy: 0.36205125173399805, [(2, 27), (3, 2)]
*** center 2: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 8, 31]]
** centroid: 3, normalized-entropy: 0.7320666900931937, [(2, 8), (3, 31)]
finished with 4 centroids; started with 3
generating 4 configurations using top 4 configurations, starting with 17)
[0.9733333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9266666666666666, 0.9266666666666666, 0.9266666666666666, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9199999999999999, 0.9133333333333332, 0.9133333333333332, 0.9, 0.9, 0.8866666666666667, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 1, 1.0, :dnet, 0.3, 2) => 0.9733333333333333
finished with 17
iteration 4 finished
generating 4 configurations using top 4 configurations, starting with 17)
[0.9733333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9266666666666666, 0.9266666666666666, 0.9266666666666666, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9199999999999999, 0.9133333333333332, 0.9133333333333332, 0.9, 0.9, 0.8866666666666667, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 1, 1.0, :dnet, 0.3, 2) => 0.9733333333333333
finished with 17
iteration 5 finished
generating 4 configurations using top 4 configurations, starting with 17)
[0.9733333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9266666666666666, 0.9266666666666666, 0.9266666666666666, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9199999999999999, 0.9133333333333332, 0.9133333333333332, 0.9, 0.9, 0.8866666666666667, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 1, 1.0, :dnet, 0.3, 2) => 0.9733333333333333
finished with 18
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.6601000047595832] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6601000047595832, 0.32371717222861085] ***
*** starting iteration: 2; err: [Inf, 0.6601000047595832, 0.32371717222861085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6601000047595832, 0.32371717222861085, 0.30767143474822045] ***
*** starting iteration: 3; err: [Inf, 0.6601000047595832, 0.32371717222861085, 0.30767143474822045] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6601000047595832, 0.32371717222861085, 0.30767143474822045, 0.2978200976097091] ***
*** finished computation of 7 references, err: [Inf, 0.6601000047595832, 0.32371717222861085, 0.30767143474822045, 0.2978200976097091] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 10]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 17, 1]]
*** center 3: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 1, 5]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 16, 1]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7481000012165697] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7481000012165697, 0.3772012219393728] ***
*** starting iteration: 2; err: [Inf, 0.7481000012165697, 0.3772012219393728] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7481000012165697, 0.3772012219393728, 0.34622646635830684] ***
*** starting iteration: 3; err: [Inf, 0.7481000012165697, 0.3772012219393728, 0.34622646635830684] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7481000012165697, 0.3772012219393728, 0.34622646635830684, 0.313326220781107] ***
*** finished computation of 7 references, err: [Inf, 0.7481000012165697, 0.3772012219393728, 0.34622646635830684, 0.313326220781107] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 27, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 4, 21]]
** centroid: 4, normalized-entropy: 0.634309554640566, [(2, 4), (3, 21)]
*** center 5: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [0, 0, 1]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6953000050628981] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6953000050628981, 0.2957753044353037] ***
*** starting iteration: 2; err: [Inf, 0.6953000050628981, 0.2957753044353037] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6953000050628981, 0.2957753044353037, 0.2509836610785249] ***
*** starting iteration: 3; err: [Inf, 0.6953000050628981, 0.2957753044353037, 0.2509836610785249] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6953000050628981, 0.2957753044353037, 0.2509836610785249, 0.24537512067327336] ***
*** finished computation of 7 references, err: [Inf, 0.6953000050628981, 0.2957753044353037, 0.2509836610785249, 0.24537512067327336] ***
*** center 1: selecting labels [1] (freq >= 2) [from [19, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 21, 9]]
** centroid: 4, normalized-entropy: 0.8812908992306927, [(2, 21), (3, 9)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 14, 1]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 12]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 18)
[0.9733333333333333, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9266666666666666, 0.9266666666666666, 0.9266666666666666, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9199999999999999, 0.9133333333333332, 0.9133333333333332, 0.9, 0.9, 0.8866666666666667, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 1, 1.0, :dnet, 0.3, 2) => 0.9733333333333333
finished with 19
iteration 7 finished
*** starting iteration: 1; err: [Inf, 1.1491000227319474] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.1491000227319474, 0.4811898000463462] ***
*** finished computation of 7 references, err: [Inf, 1.1491000227319474, 0.4811898000463462] ***
*** center 1: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [23, 1, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 33, 9]]
** centroid: 3, normalized-entropy: 0.7495952572594798, [(2, 33), (3, 9)]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7420999906228368] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7420999906228368, 0.2905308114505854] ***
*** finished computation of 7 references, err: [Inf, 0.7420999906228368, 0.2905308114505854] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 18, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 6]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 12, 10]]
** centroid: 3, normalized-entropy: 0.9940302114769566, [(2, 12), (3, 10)]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
*** center 5: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 10]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7646000070588183] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7646000070588183, 0.4693119395494406] ***
*** finished computation of 7 references, err: [Inf, 0.7646000070588183, 0.4693119395494406] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 2, 17]]
** centroid: 1, normalized-entropy: 0.48546076074591343, [(2, 2), (3, 17)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 26, 7]]
** centroid: 2, normalized-entropy: 0.7455178428108284, [(2, 26), (3, 7)]
*** center 3: selecting labels [1] (freq >= 2) [from [4, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 7, 2]]
** centroid: 4, normalized-entropy: 0.7642045065086204, [(2, 7), (3, 2)]
*** center 5: selecting labels [1] (freq >= 2) [from [28, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
finished with 10 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 19)
[0.9733333333333333, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.94, 0.9266666666666666, 0.9266666666666666, 0.9266666666666666, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9199999999999999, 0.9133333333333332, 0.9133333333333332, 0.9, 0.9, 0.8866666666666667, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 1, 1.0, :dnet, 0.3, 2) => 0.9733333333333333
finished with 19
iteration 8 finished
generating 4 configurations using top 4 configurations, starting with 19)
[0.9733333333333333, 0.9533333333333333, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.94, 0.9266666666666666, 0.9266666666666666, 0.9266666666666666, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9199999999999999, 0.9133333333333332, 0.9133333333333332, 0.9, 0.9, 0.8866666666666667, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 1, 1.0, :dnet, 0.3, 2) => 0.9733333333333333
finished with 19
iteration 9 finished
[ Info: ========== BEST MODEL ==========
[ Info: (AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 1, 1.0, :dnet, 0.3, 2), 0.9733333333333333)
[ Info: AKNC{Array{Float64,1}}[AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[5.4399999999999995, 2.4099999999999997, 3.7, 1.1099999999999999], [7.275, 3.1, 6.125000000000001, 1.8499999999999999], [6.8, 3.025, 4.8, 1.5], [6.4363636363636365, 2.9000000000000004, 5.354545454545455, 1.8545454545454547], [6.094444444444445, 2.8833333333333333, 4.4, 1.4055555555555557], [5.875, 2.575, 4.925000000000001, 1.825], [6.36, 3.18, 5.6, 2.4400000000000004], [5.000000000000001, 3.374285714285715, 1.4457142857142853, 0.24857142857142855], [7.675000000000001, 3.15, 6.525, 2.15]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2, 3, 2, 3, 2, 3, 3, 1, 3], 3), KCenters.var"#fun#70"{SimilaritySearch.var"#_lp#1"{Float64}}(SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25)), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 1, 1.0, :dnet, 0.3, 2)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[5.791428571428572, 2.708571428571429, 4.3914285714285715, 1.4057142857142855], [6.44, 3.1399999999999997, 5.4, 2.24], [6.325, 3.0500000000000003, 4.6, 1.5], [5.888888888888889, 2.8, 4.988888888888889, 1.9333333333333336], [7.566666666666667, 3.283333333333333, 6.5, 2.15], [6.800000000000001, 3.1, 4.800000000000001, 1.5], [6.7, 3.0200000000000005, 5.260000000000001, 2.12], [6.666666666666667, 3.0333333333333337, 5.433333333333334, 1.8444444444444446], [4.987878787878788, 3.43939393939394, 1.457575757575757, 0.2424242424242425]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2, 3, 2, 3, 3, 2, 3, 3, 1], 3), KCenters.var"#fun#70"{SimilaritySearch.var"#_lp#1"{Float64}}(SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25)), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 1, 1.0, :dnet, 0.3, 2)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[7.080000000000001, 3.06, 6.3, 2.3], [6.8500000000000005, 3.0250000000000004, 4.8500000000000005, 1.5], [6.576923076923077, 2.861538461538461, 5.4923076923076914, 1.9153846153846155], [6.1263157894736855, 2.889473684210526, 4.5052631578947375, 1.4368421052631581], [6.033333333333334, 2.8166666666666664, 4.933333333333333, 1.8333333333333337], [5.163636363636362, 3.184090909090909, 2.1022727272727275, 0.49772727272727263], [5.2, 2.55, 4.45, 1.45], [6.3, 3.3, 6.0, 2.5], [6.3999999999999995, 3.3666666666666667, 5.566666666666667, 2.4]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [3, 2, 3, 2, 3, 1, 2, 3, 3], 3), KCenters.var"#fun#70"{SimilaritySearch.var"#_lp#1"{Float64}}(SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25)), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 1, 1.0, :dnet, 0.3, 2))]
Test Summary: | Pass  Total
AKNC          |    1      1
[50, 1, 15, 31, 1, 21, 1, 24, 2, 31, 19, 27, 36, 42, 20, 18, 28, 12, 41, 19, 33, 20, 47, 2, 1, 32, 44, 24, 19, 41, 12, 40, 24, 19, 26, 12, 21, 42, 28, 24, 43, 24, 1, 46, 45, 29, 29, 23, 9, 7, 37, 36, 36, 34, 41, 30, 67, 32, 31, 27, 42, 23, 29, 31, 33, 38, 29, 41, 39, 36, 20, 39, 23, 13, 1, 21, 40, 38, 38, 7, 15, 6, 32, 45, 20, 21, 32, 21, 3, 29, 44, 25, 40, 34, 39, 29, 67, 45, 24, 1, 36, 32, 38, 25, 58, 48, 33, 1, 24, 22, 32, 38, 25, 41, 59, 28, 39, 32, 22, 21, 40, 38, 32, 14, 25, 44, 21, 53, 34, 41, 21, 32, 27, 43, 46, 37, 33, 31, 40, 34, 40, 55, 34, 65, 21, 24, 43, 31, 37, 8, 40, 45, 28, 41, 59, 26, 48, 18, 61, 55, 34, 39, 30, 30, 33, 47, 29, 24, 37, 38, 63, 29, 23, 38, 35, 21, 60, 33, 37, 28, 46, 58, 53, 17, 42, 29, 18, 41, 35, 1, 57, 38, 60, 38, 27, 56, 44, 26, 44, 34, 25, 51, 42, 47, 21, 54, 52, 31, 45, 25, 34, 36, 70, 13, 48, 28, 42, 45, 17, 27, 27, 24, 31, 24, 38, 27, 46, 53, 35, 40, 51, 17, 36, 31, 37, 33, 46, 21, 28, 17, 29, 36, 16, 31, 27, 52, 26, 30, 27, 37, 43, 37, 60, 32, 24, 43, 59, 34, 48, 35, 58, 49, 48, 33, 35, 22, 7, 34, 29, 52, 37, 55, 68, 51, 26, 32, 51, 25, 31, 36, 38, 77, 45, 20, 44, 53, 37, 47, 35, 31, 48, 65, 27, 13, 2, 30, 42, 37, 38, 30]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6019999999999999, speedup = 0.36308692801420184, eval_ratio = 0.041638999999999995)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.38715277777777785,"recall":0.38715277777777785,"f1":null,"seconds":6.735511124134064e-5,"exhaustive_search_seconds":0.0004370305687189102,"evaluations":338.796875,"distances_sum":1778.2730080295785}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5460069444444446,"recall":0.5460069444444446,"f1":0.5460069444444446,"seconds":8.89413058757782e-5,"exhaustive_search_seconds":0.0004370305687189102,"evaluations":377.78125,"distances_sum":1663.0333513923085}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6527777777777773,"recall":0.6527777777777773,"f1":0.6527777777777773,"seconds":0.00013055093586444855,"exhaustive_search_seconds":0.0004370305687189102,"evaluations":416.0234375,"distances_sum":1617.0606161030182}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7126736111111104,"recall":0.7126736111111104,"f1":0.7126736111111104,"seconds":0.00016915611922740936,"exhaustive_search_seconds":0.0004370305687189102,"evaluations":452.59375,"distances_sum":1596.187726762969}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7673611111111103,"recall":0.7673611111111103,"f1":0.7673611111111103,"seconds":0.00019588880240917206,"exhaustive_search_seconds":0.0004370305687189102,"evaluations":490.8515625,"distances_sum":1583.3619216315485}
KCenters.DeloneInvIndex> reached performance {"precision":0.8020833333333323,"recall":0.8020833333333323,"f1":0.8020833333333323,"seconds":0.0002825390547513962,"exhaustive_search_seconds":0.0004370305687189102,"evaluations":528.9375,"distances_sum":1574.8716469482797}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7799999999999998, speedup = 1.779689549628334, eval_ratio = 0.053647)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
   Testing KCenters tests passed 
