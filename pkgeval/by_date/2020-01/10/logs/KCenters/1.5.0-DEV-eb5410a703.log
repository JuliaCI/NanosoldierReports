Julia Version 1.5.0-DEV.45
Commit eb5410a703 (2020-01-10 02:37 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia

 Resolving package versions...
 Installed InvertedIndices ───────────── v1.0.0
 Installed MappedArrays ──────────────── v0.2.2
 Installed DataValueInterfaces ───────── v1.0.0
 Installed Tables ────────────────────── v0.2.11
 Installed KCenters ──────────────────── v0.1.8
 Installed Compat ────────────────────── v3.2.0
 Installed TableTraits ───────────────── v1.0.0
 Installed IteratorInterfaceExtensions ─ v1.0.0
 Installed Missings ──────────────────── v0.4.3
 Installed DataAPI ───────────────────── v1.1.0
 Installed OrderedCollections ────────── v1.1.0
 Installed CategoricalArrays ─────────── v0.7.6
 Installed JSON ──────────────────────── v0.21.0
 Installed StatsBase ─────────────────── v0.32.0
 Installed LearnBase ─────────────────── v0.2.2
 Installed SimilaritySearch ──────────── v0.3.17
 Installed Reexport ──────────────────── v0.2.0
 Installed SortingAlgorithms ─────────── v0.3.1
 Installed DataStructures ────────────── v0.17.7
 Installed Parsers ───────────────────── v0.3.10
 Installed PooledArrays ──────────────── v0.5.3
 Installed MLLabelUtils ──────────────── v0.5.1
 Installed MLDataUtils ───────────────── v0.5.0
 Installed DataFrames ────────────────── v0.20.0
 Installed MLDataPattern ─────────────── v0.5.0
  Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.1.8
  Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.6
  [34da2185] + Compat v3.2.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.0
  [864edb3b] + DataStructures v0.17.7
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.1.8
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.10
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.17
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v0.2.11
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
   Testing KCenters
  Updating `/tmp/jl_9WQ85r/Project.toml`
 [no changes]
  Updating `/tmp/jl_9WQ85r/Manifest.toml`
 [no changes]
Running sandbox
Status `/tmp/jl_9WQ85r/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.1.8
  [cc2ba9b6] MLDataUtils v0.5.0
  [053f045d] SimilaritySearch v0.3.17
  [2913bbd2] StatsBase v0.32.0
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [37e2e46d] LinearAlgebra 
  [9a3f8284] Random 
  [2f01184e] SparseArrays 
  [8dfed614] Test 
Test Summary: | Pass  Total
Scores        |    9      9
[ Info: 159.67999999999998
[ Info: 87.1500000000001
[ Info: 42.50999999999999
[ Info: 26.99999999999999
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 313.64000338064864
[ Info: 547.7999992523
[ Info: 146.2399983987154
[ Info: 76.32000114659134
Test Summary:        |
Clustering with dnet | No tests
inertia(cfft.distances) = 19.39851459248377
inertia(cdnet.distances) = 29.2589710029665
inertia(crand.distances) = 21.621457347393687
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.55078125, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.55078125,"f1":0.6953388625263631,"seconds":3.939494490623474e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":6.90625,"distances_sum":1562.6831988850765}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.587890625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.587890625,"f1":0.7253777472527478,"seconds":4.382804036140442e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":7.3125,"distances_sum":1691.2147685279224}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.587890625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.587890625,"f1":0.7253777472527478,"seconds":4.382804036140442e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":7.3125,"distances_sum":1691.2147685279224}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8537405303030313,"seconds":3.9245933294296265e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.2265625,"distances_sum":2331.286452905747}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.931504953379954,"seconds":6.319954991340637e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.609375,"distances_sum":2826.063906667764}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.880859375,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.880859375,"f1":0.931504953379954,"seconds":6.319954991340637e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.609375,"distances_sum":2826.063906667764}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9609775641025644,"seconds":6.813555955886841e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.875,"distances_sum":3142.7339059599026}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9706158424908429,"seconds":7.268041372299194e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.90625,"distances_sum":3240.357421498476}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9349650349650357,"seconds":8.964911103248596e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.578125,"distances_sum":2909.5993780833464}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9453754578754585,"seconds":6.418675184249878e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.7578125,"distances_sum":3022.059545432217}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9386217948717953,"seconds":6.362795829772949e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.65625,"distances_sum":2900.1208433552756}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9706158424908429,"seconds":7.268041372299194e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.90625,"distances_sum":3240.357421498476}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9706158424908429,"seconds":7.268041372299194e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.90625,"distances_sum":3240.357421498476}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4296875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4296875,"f1":null,"seconds":4.133209586143494e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":5.859375,"distances_sum":1075.2984263818273}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2275390625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2275390625,"f1":null,"seconds":3.295019268989563e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":5.8515625,"distances_sum":550.9229512679873}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.220703125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.220703125,"f1":null,"seconds":3.77558171749115e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":5.84375,"distances_sum":568.5324534829834}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4296875,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.4296875,"f1":null,"seconds":4.133209586143494e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":5.859375,"distances_sum":1075.2984263818273}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.8509271978021986,"seconds":5.969777703285217e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.015625,"distances_sum":2140.1751422527486}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8173828125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8173828125,"f1":0.892969010156511,"seconds":3.7923455238342285e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.390625,"distances_sum":2376.8289361764237}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8493829087579097,"seconds":5.504116415977478e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.046875,"distances_sum":2112.5552029271275}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8173828125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8173828125,"f1":0.892969010156511,"seconds":3.7923455238342285e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.390625,"distances_sum":2376.8289361764237}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.923520750083251,"seconds":5.964189767837524e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.515625,"distances_sum":2605.3374695123357}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8310546875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8310546875,"f1":0.9021551365301375,"seconds":5.552545189857483e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.4375,"distances_sum":2423.7644753276086}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.869140625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.869140625,"f1":0.923520750083251,"seconds":5.964189767837524e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.515625,"distances_sum":2605.3374695123357}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.869140625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.869140625,"f1":0.923520750083251,"seconds":5.964189767837524e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.515625,"distances_sum":2605.3374695123357}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.48828125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.48828125,"f1":0.6383547008547014,"seconds":4.172325134277344e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":6.5625,"distances_sum":1403.0743186653983}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1708984375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1708984375,"f1":null,"seconds":4.414469003677368e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":4.5859375,"distances_sum":475.4882121201658}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.48828125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.48828125,"f1":0.6383547008547014,"seconds":4.172325134277344e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":6.5625,"distances_sum":1403.0743186653983}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.8985519688644696,"seconds":6.055459380149841e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":8.3359375,"distances_sum":2465.6835639673873}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8515625,"f1":0.9146920787545796,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":8.4140625,"distances_sum":2599.6765347700825}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8515625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8515625,"f1":0.9146920787545796,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":8.4140625,"distances_sum":2599.6765347700825}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.952833104395605,"seconds":5.431473255157471e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":8.6875,"distances_sum":2911.231125200258}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9617616758241763,"seconds":9.242445230484009e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":8.8125,"distances_sum":2969.851833894708}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9682119963369966,"seconds":6.388872861862183e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":8.8515625,"distances_sum":3022.819447068659}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9568166208791214,"seconds":4.447996616363525e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":8.7734375,"distances_sum":2940.778295295612}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9682119963369966,"seconds":6.388872861862183e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":8.8515625,"distances_sum":3022.819447068659}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9682119963369966,"seconds":6.388872861862183e-6,"exhaustive_search_seconds":1.085922122001648e-6,"evaluations":8.8515625,"distances_sum":3022.819447068659}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8474972943722952,"seconds":6.161630153656006e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.265625,"distances_sum":2039.9978154909477}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4306640625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4306640625,"f1":null,"seconds":5.584210157394409e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":6.015625,"distances_sum":1088.4850071186133}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.21875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.21875,"f1":null,"seconds":4.550442099571228e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":6.0859375,"distances_sum":564.7828455013753}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7490234375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7490234375,"f1":0.8474972943722952,"seconds":6.161630153656006e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.265625,"distances_sum":2039.9978154909477}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9630265567765575,"seconds":4.276633262634277e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.890625,"distances_sum":2890.8991986723236}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9345703125,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9630265567765575,"seconds":4.276633262634277e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.890625,"distances_sum":2890.8991986723236}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9375,"f1":0.964251373626374,"seconds":6.729736924171448e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.8671875,"distances_sum":2938.603731068757}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9688472985347989,"seconds":6.459653377532959e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.8984375,"distances_sum":2948.6313302518815}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9688472985347989,"seconds":6.459653377532959e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.8984375,"distances_sum":2948.6313302518815}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9688472985347989,"seconds":6.459653377532959e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.8984375,"distances_sum":2948.6313302518815}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2236328125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2236328125,"f1":null,"seconds":3.296881914138794e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":6.4921875,"distances_sum":559.6947756626928}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2373046875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2373046875,"f1":null,"seconds":3.3918768167495728e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":6.671875,"distances_sum":619.963672965158}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.669921875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.669921875,"f1":0.7920719905094914,"seconds":4.9602240324020386e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.6875,"distances_sum":1777.798371331149}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.669921875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.669921875,"f1":0.7920719905094914,"seconds":4.9602240324020386e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.6875,"distances_sum":1777.798371331149}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8968755203130211,"seconds":7.769092917442322e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.625,"distances_sum":2426.119278203342}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6875, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6875,"f1":0.8052728521478532,"seconds":5.820766091346741e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.7265625,"distances_sum":1836.1167604657055}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8232421875,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8232421875,"f1":0.8968755203130211,"seconds":7.769092917442322e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.625,"distances_sum":2426.119278203342}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9649210164835171,"seconds":4.233792424201965e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9453125,"distances_sum":2943.1569449681156}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9648523351648357,"seconds":4.014000296592712e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9375,"distances_sum":2953.999120448228}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8310546875, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8310546875,"f1":0.9017347236097245,"seconds":3.7383288145065308e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.703125,"distances_sum":2409.1074085553114}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9648523351648357,"seconds":4.014000296592712e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9375,"distances_sum":2953.999120448228}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9648523351648357,"seconds":4.014000296592712e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9375,"distances_sum":2953.999120448228}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.564453125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.564453125,"f1":0.7109938672438678,"seconds":3.466382622718811e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":7.21875,"distances_sum":1501.2767763137394}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.740234375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.740234375,"f1":0.8412446928071935,"seconds":3.514811396598816e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.2734375,"distances_sum":2120.250475316277}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.740234375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.740234375,"f1":0.8412446928071935,"seconds":3.514811396598816e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.2734375,"distances_sum":2120.250475316277}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9613553113553117,"seconds":4.278495907783508e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.8203125,"distances_sum":2944.5131418682076}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.950005723443224,"seconds":4.2710453271865845e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.7890625,"distances_sum":2884.221499971607}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9613553113553117,"seconds":4.278495907783508e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.8203125,"distances_sum":2944.5131418682076}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9751316391941396,"seconds":6.899237632751465e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.875,"distances_sum":3073.8404718943384}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9751316391941396,"seconds":6.899237632751465e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.875,"distances_sum":3073.8404718943384}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9751316391941396,"seconds":6.899237632751465e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.875,"distances_sum":3073.8404718943384}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.517578125, conf: {"ssize":1,"bsize":3}, perf: {"precision":0.9928385416666667,"recall":0.517578125,"f1":0.6654544240481745,"seconds":3.6228448152542114e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":6.578125,"distances_sum":1056.3849793208994}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.193359375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.193359375,"f1":null,"seconds":2.2817403078079224e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":5.078125,"distances_sum":395.8596242338737}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.517578125,"state":{"ssize":1,"bsize":3},"perf":{"precision":0.9928385416666667,"recall":0.517578125,"f1":0.6654544240481745,"seconds":3.6228448152542114e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":6.578125,"distances_sum":1056.3849793208994}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":2,"bsize":6}, perf: {"precision":0.990531994047619,"recall":0.849609375,"f1":0.9086185949467206,"seconds":4.133209586143494e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":8.5546875,"distances_sum":1999.7482071826853}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":1,"bsize":7}, perf: {"precision":0.988653273809524,"recall":0.8701171875,"f1":0.9193967490842496,"seconds":4.079192876815796e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":8.6328125,"distances_sum":2089.4002804074385}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66796875, conf: {"ssize":6,"bsize":4}, perf: {"precision":0.9873697916666665,"recall":0.66796875,"f1":0.7853154657842164,"seconds":4.375353455543518e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":8.015625,"distances_sum":1445.9810873641522}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8701171875,"state":{"ssize":1,"bsize":7},"perf":{"precision":0.988653273809524,"recall":0.8701171875,"f1":0.9193967490842496,"seconds":4.079192876815796e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":8.6328125,"distances_sum":2089.4002804074385}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8701171875,"state":{"ssize":1,"bsize":7},"perf":{"precision":0.988653273809524,"recall":0.8701171875,"f1":0.9193967490842496,"seconds":4.079192876815796e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":8.6328125,"distances_sum":2089.4002804074385}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8701171875,"state":{"ssize":1,"bsize":7},"perf":{"precision":0.988653273809524,"recall":0.8701171875,"f1":0.9193967490842496,"seconds":4.079192876815796e-6,"exhaustive_search_seconds":1.1492520570755005e-6,"evaluations":8.6328125,"distances_sum":2089.4002804074385}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.439453125, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.439453125,"f1":null,"seconds":2.3692846298217773e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":6.046875,"distances_sum":878.8084412661752}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.439453125,"state":{"ssize":2,"bsize":2},"perf":{"precision":null,"recall":0.439453125,"f1":null,"seconds":2.3692846298217773e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":6.046875,"distances_sum":878.8084412661752}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6669921875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6669921875,"f1":0.7843554015429024,"seconds":3.2670795917510986e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":7.171875,"distances_sum":1392.8979041521266}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5361328125, conf: {"ssize":4,"bsize":3}, perf: {"precision":null,"recall":0.5361328125,"f1":null,"seconds":2.5462359189987183e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":6.671875,"distances_sum":1057.9379568274724}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6669921875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6669921875,"f1":0.7843554015429024,"seconds":3.2670795917510986e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":7.171875,"distances_sum":1392.8979041521266}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9209483225108229,"seconds":3.641471266746521e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.5,"distances_sum":1983.8732738438014}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8473646145521153,"seconds":4.284083843231201e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":7.7890625,"distances_sum":1571.9812334127562}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9451553654678658,"seconds":5.62518835067749e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.703125,"distances_sum":2103.045959283202}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9033203125,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9033203125,"f1":0.9451553654678658,"seconds":5.62518835067749e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.703125,"distances_sum":2103.045959283202}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9033203125,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9033203125,"f1":0.9451553654678658,"seconds":5.62518835067749e-6,"exhaustive_search_seconds":9.220093488693237e-7,"evaluations":8.703125,"distances_sum":2103.045959283202}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.68359375, conf: {"ssize":1,"bsize":4}, perf: {"precision":null,"recall":0.68359375,"f1":null,"seconds":4.665926098823547e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.7109375,"distances_sum":1388.470382150343}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.255859375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.255859375,"f1":null,"seconds":3.4570693969726562e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":6.84375,"distances_sum":515.3424364567082}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.68359375,"state":{"ssize":1,"bsize":4},"perf":{"precision":null,"recall":0.68359375,"f1":null,"seconds":4.665926098823547e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":7.7109375,"distances_sum":1388.470382150343}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.956593406593407,"seconds":5.794689059257507e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.84375,"distances_sum":2170.007620889191}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9228515625,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.956593406593407,"seconds":5.794689059257507e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.84375,"distances_sum":2170.007620889191}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9767513736263741,"seconds":3.6992132663726807e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.9296875,"distances_sum":2274.4081296304894}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.958984375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9767513736263741,"seconds":3.6992132663726807e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.9296875,"distances_sum":2274.4081296304894}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.958984375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.958984375,"f1":0.9767513736263741,"seconds":3.6992132663726807e-6,"exhaustive_search_seconds":1.3522803783416748e-6,"evaluations":8.9296875,"distances_sum":2274.4081296304894}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.669921875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.669921875,"f1":0.7894624472749481,"seconds":3.0528753995895386e-6,"exhaustive_search_seconds":1.1324882507324219e-6,"evaluations":7.2578125,"distances_sum":1401.7981534154376}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4072265625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4072265625,"f1":null,"seconds":3.254041075706482e-6,"exhaustive_search_seconds":1.1324882507324219e-6,"evaluations":6.2578125,"distances_sum":777.6590494478339}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.40234375, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.40234375,"f1":null,"seconds":3.3676624298095703e-6,"exhaustive_search_seconds":1.1324882507324219e-6,"evaluations":6.3125,"distances_sum":796.9039969278787}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.669921875,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.669921875,"f1":0.7894624472749481,"seconds":3.0528753995895386e-6,"exhaustive_search_seconds":1.1324882507324219e-6,"evaluations":7.2578125,"distances_sum":1401.7981534154376}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8575127997003004,"seconds":4.317611455917358e-6,"exhaustive_search_seconds":1.1324882507324219e-6,"evaluations":7.703125,"distances_sum":1671.6821724025283}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.671875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.671875,"f1":0.7899267399267409,"seconds":4.259869456291199e-6,"exhaustive_search_seconds":1.1324882507324219e-6,"evaluations":7.1484375,"distances_sum":1423.0659283381765}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8115234375, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8115234375,"f1":0.8885791292041301,"seconds":4.714354872703552e-6,"exhaustive_search_seconds":1.1324882507324219e-6,"evaluations":8.3359375,"distances_sum":1844.5972975775055}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9502346611721613,"seconds":4.079192876815796e-6,"exhaustive_search_seconds":1.1324882507324219e-6,"evaluations":8.7890625,"distances_sum":2165.0931805172245}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7265625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7265625,"f1":0.8284044080919091,"seconds":2.989545464515686e-6,"exhaustive_search_seconds":1.1324882507324219e-6,"evaluations":7.5234375,"distances_sum":1594.163729710889}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":8,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9502346611721613,"seconds":4.079192876815796e-6,"exhaustive_search_seconds":1.1324882507324219e-6,"evaluations":8.7890625,"distances_sum":2165.0931805172245}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":9,"bsize":12}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9746680402930408,"seconds":3.863126039505005e-6,"exhaustive_search_seconds":1.1324882507324219e-6,"evaluations":8.921875,"distances_sum":2319.1259674846333}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":12,"bsize":12}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9780162545787547,"seconds":3.7979334592819214e-6,"exhaustive_search_seconds":1.1324882507324219e-6,"evaluations":8.9375,"distances_sum":2341.901891264122}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.956501831501832,"seconds":5.304813385009766e-6,"exhaustive_search_seconds":1.1324882507324219e-6,"evaluations":8.7890625,"distances_sum":2236.9343232240353}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9578754578754582,"seconds":5.433335900306702e-6,"exhaustive_search_seconds":1.1324882507324219e-6,"evaluations":8.8359375,"distances_sum":2234.230258798359}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9609375,"state":{"ssize":12,"bsize":12},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9780162545787547,"seconds":3.7979334592819214e-6,"exhaustive_search_seconds":1.1324882507324219e-6,"evaluations":8.9375,"distances_sum":2341.901891264122}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9609375,"state":{"ssize":12,"bsize":12},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9780162545787547,"seconds":3.7979334592819214e-6,"exhaustive_search_seconds":1.1324882507324219e-6,"evaluations":8.9375,"distances_sum":2341.901891264122}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.697265625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.697265625,"f1":0.809055354367855,"seconds":4.040077328681946e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.53125,"distances_sum":1389.4060279627201}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.697265625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.697265625,"f1":0.809055354367855,"seconds":4.040077328681946e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.53125,"distances_sum":1389.4060279627201}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.9288804945054951,"seconds":3.4999102354049683e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.5546875,"distances_sum":2011.1604775781193}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.875,"f1":0.9288804945054951,"seconds":3.4999102354049683e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.5546875,"distances_sum":2011.1604775781193}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9593978937728942,"seconds":3.466382622718811e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.7421875,"distances_sum":2209.9685957028737}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9593978937728942,"seconds":3.466382622718811e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.7421875,"distances_sum":2209.9685957028737}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.927734375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9593978937728942,"seconds":3.466382622718811e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.7421875,"distances_sum":2209.9685957028737}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.576171875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.576171875,"f1":0.7092556748806754,"seconds":4.388391971588135e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":6.8828125,"distances_sum":1144.8136825317608}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.855939373126874,"seconds":5.3551048040390015e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.8515625,"distances_sum":1687.2180954852206}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7626953125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7626953125,"f1":0.855939373126874,"seconds":5.3551048040390015e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.8515625,"distances_sum":1687.2180954852206}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9374427655677664,"seconds":4.936009645462036e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.6328125,"distances_sum":2129.6092645352937}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.890625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.890625,"f1":0.9374427655677664,"seconds":4.936009645462036e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.6328125,"distances_sum":2129.6092645352937}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9730483058608062,"seconds":5.479902029037476e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.875,"distances_sum":2311.4950121231673}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9572973901098907,"seconds":3.946945071220398e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.828125,"distances_sum":2212.3216211138006}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9730483058608062,"seconds":5.479902029037476e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.875,"distances_sum":2311.4950121231673}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9730483058608062,"seconds":5.479902029037476e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.875,"distances_sum":2311.4950121231673}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2822265625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2822265625,"f1":null,"seconds":2.0675361156463623e-6,"exhaustive_search_seconds":8.996576070785522e-7,"evaluations":5.7421875,"distances_sum":681.3910862420288}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2822265625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2822265625,"f1":null,"seconds":2.0675361156463623e-6,"exhaustive_search_seconds":8.996576070785522e-7,"evaluations":5.7421875,"distances_sum":681.3910862420288}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.560546875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.560546875,"f1":null,"seconds":2.522021532058716e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":6.5078125,"distances_sum":1341.3682537658422}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.560546875,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.560546875,"f1":null,"seconds":2.522021532058716e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":6.5078125,"distances_sum":1341.3682537658422}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9325606684981691,"seconds":5.900859832763672e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.6796875,"distances_sum":2419.0889717981117}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.8640380452880461,"seconds":3.5297125577926636e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.28125,"distances_sum":1976.1358454916483}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8828125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8828125,"f1":0.9325606684981691,"seconds":5.900859832763672e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.6796875,"distances_sum":2419.0889717981117}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9454155219780227,"seconds":6.206333637237549e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.6953125,"distances_sum":2600.2848614426252}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9642914377289382,"seconds":7.673166692256927e-5,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.8359375,"distances_sum":2669.193460060856}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9511446886446895,"seconds":5.478039383888245e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.796875,"distances_sum":2561.9955774517716}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9607715201465206,"seconds":5.638226866722107e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.8046875,"distances_sum":2671.7823557430474}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9519059065934069,"seconds":5.383044481277466e-6,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.703125,"distances_sum":2628.7884574623035}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9642914377289382,"seconds":7.673166692256927e-5,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.8359375,"distances_sum":2669.193460060856}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9642914377289382,"seconds":7.673166692256927e-5,"exhaustive_search_seconds":8.903443813323975e-7,"evaluations":8.8359375,"distances_sum":2669.193460060856}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7421875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7421875,"f1":0.846248543123544,"seconds":3.3471733331680298e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.2890625,"distances_sum":1831.129438078727}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.732421875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.732421875,"f1":0.8389917374292383,"seconds":3.4365803003311157e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.2734375,"distances_sum":1806.9290526547586}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7421875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7421875,"f1":0.846248543123544,"seconds":3.3471733331680298e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.2890625,"distances_sum":1831.129438078727}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.94492902930403,"seconds":6.366521120071411e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.8203125,"distances_sum":2531.8343375599748}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9594150641025645,"seconds":4.408881068229675e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.90625,"distances_sum":2670.965370168528}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9641426282051287,"seconds":5.707144737243652e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.9453125,"distances_sum":2711.5527103988475}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9641426282051287,"seconds":5.707144737243652e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.9453125,"distances_sum":2711.5527103988475}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.9779418498168502,"seconds":6.144866347312927e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.984375,"distances_sum":2807.5521999513876}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9698889652014655,"seconds":5.690380930900574e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.90625,"distances_sum":2771.0524720463914}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9647722069597071,"seconds":3.6638230085372925e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.953125,"distances_sum":2704.557909838191}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9599609375,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9779418498168502,"seconds":6.144866347312927e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.984375,"distances_sum":2807.5521999513876}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9599609375,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9779418498168502,"seconds":6.144866347312927e-6,"exhaustive_search_seconds":9.145587682723999e-7,"evaluations":8.984375,"distances_sum":2807.5521999513876}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7685546875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7685546875,"f1":0.860723131035632,"seconds":3.4775584936141968e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.125,"distances_sum":1938.610813234623}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6826171875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6826171875,"f1":0.8002128080253088,"seconds":3.373250365257263e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":7.71875,"distances_sum":1671.3432024481556}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2734375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2734375,"f1":null,"seconds":2.4382025003433228e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":6.4296875,"distances_sum":587.1549492929191}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8556776556776564,"seconds":3.462657332420349e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.1015625,"distances_sum":1894.6545169959809}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7685546875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7685546875,"f1":0.860723131035632,"seconds":3.4775584936141968e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.125,"distances_sum":1938.610813234623}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9306318681318686,"seconds":4.841014742851257e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.828125,"distances_sum":2442.7899332141205}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8359375,"f1":0.9049653471528479,"seconds":6.139278411865234e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.796875,"distances_sum":2232.4140038748724}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9607200091575092,"seconds":5.666166543960571e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.921875,"distances_sum":2655.3287495662685}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.946214202464203,"seconds":5.649402737617493e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.8515625,"distances_sum":2538.226267132625}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9401161338661344,"seconds":5.446374416351318e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.796875,"distances_sum":2524.477004720578}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9564992299367304,"seconds":5.5693089962005615e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.8984375,"distances_sum":2642.311885945801}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9607200091575092,"seconds":5.666166543960571e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.921875,"distances_sum":2655.3287495662685}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9783482142857145,"seconds":5.988404154777527e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.96875,"distances_sum":2782.3803824529323}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9680288461538463,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.9375,"distances_sum":2709.6279074876315}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9733630952380956,"seconds":5.606561899185181e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.9453125,"distances_sum":2751.3319728706983}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9696829212454217,"seconds":5.707144737243652e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.921875,"distances_sum":2739.8405376282776}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9658882783882787,"seconds":5.183741450309753e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.953125,"distances_sum":2692.0495059599684}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9677734375, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9677734375,"f1":0.9822916666666668,"seconds":4.081055521965027e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.96875,"distances_sum":2826.6865059688594}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9795386904761907,"seconds":3.905966877937317e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.9609375,"distances_sum":2809.6987662275524}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.974593635531136,"seconds":3.822147846221924e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.9296875,"distances_sum":2783.916880109874}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9616128663003669,"seconds":4.4424086809158325e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.9375,"distances_sum":2664.1192850479997}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.971543040293041,"seconds":6.649643182754517e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.90625,"distances_sum":2755.884627280997}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9677734375,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9822916666666668,"seconds":4.081055521965027e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.96875,"distances_sum":2826.6865059688594}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9677734375,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9822916666666668,"seconds":4.081055521965027e-6,"exhaustive_search_seconds":8.828938007354736e-7,"evaluations":8.96875,"distances_sum":2826.6865059688594}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5517578125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5517578125,"f1":null,"seconds":2.644956111907959e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":6.640625,"distances_sum":1292.262622539031}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2314453125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2314453125,"f1":null,"seconds":1.998618245124817e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":5.796875,"distances_sum":540.7932528604393}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2119140625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2119140625,"f1":null,"seconds":1.9278377294540405e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":5.8046875,"distances_sum":535.7252748324688}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5517578125,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5517578125,"f1":null,"seconds":2.644956111907959e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":6.640625,"distances_sum":1292.262622539031}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9340664543789549,"seconds":4.600733518600464e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.71875,"distances_sum":2565.495992195924}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.67578125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.67578125,"f1":0.7918988997114005,"seconds":3.4458935260772705e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":7.125,"distances_sum":1696.2379074979597}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6689453125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6689453125,"f1":0.7920095529470538,"seconds":2.8423964977264404e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":7.046875,"distances_sum":1632.9606408472778}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8876953125,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8876953125,"f1":0.9340664543789549,"seconds":4.600733518600464e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.71875,"distances_sum":2565.495992195924}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.966796875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.966796875,"f1":0.9818452380952382,"seconds":4.015862941741943e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9765625,"distances_sum":2892.423369477245}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.954169788544789,"seconds":5.129724740982056e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.8359375,"distances_sum":2684.429019032049}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9547676282051288,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.8828125,"distances_sum":2681.826573617435}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.966796875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9818452380952382,"seconds":4.015862941741943e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9765625,"distances_sum":2892.423369477245}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.966796875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9818452380952382,"seconds":4.015862941741943e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9765625,"distances_sum":2892.423369477245}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.8468321608946617,"seconds":4.980713129043579e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.2265625,"distances_sum":1931.8432180205427}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.64453125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.64453125,"f1":0.7708373223998232,"seconds":4.151836037635803e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":7.4296875,"distances_sum":1609.424988614773}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7509765625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7509765625,"f1":0.8468321608946617,"seconds":4.980713129043579e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.2265625,"distances_sum":1931.8432180205427}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8691735347985358,"seconds":4.567205905914307e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.453125,"distances_sum":2017.8902673075968}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8046875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8046875,"f1":0.8813757423132431,"seconds":3.384426236152649e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.453125,"distances_sum":2199.073193789477}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9429632867132874,"seconds":3.7364661693573e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.7265625,"distances_sum":2635.5277076046013}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9371794871794877,"seconds":5.792826414108276e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8203125,"distances_sum":2518.0279568529386}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9013671875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9429632867132874,"seconds":3.7364661693573e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.7265625,"distances_sum":2635.5277076046013}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9689961080586085,"seconds":3.6954879760742188e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8984375,"distances_sum":2792.7914407953263}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9689961080586085,"seconds":3.6954879760742188e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8984375,"distances_sum":2792.7914407953263}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9689961080586085,"seconds":3.6954879760742188e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8984375,"distances_sum":2792.7914407953263}}, n: 9
inertia(cfft.distances) = 19.398514610389615
inertia(cdnet.distances) = 23.375970313715225
inertia(crand.distances) = 21.990005952380958
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8866666666666667
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.9022222222222221
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.94
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.94
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9377777777777778
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.9355555555555556
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.88
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9311111111111111
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.931111111111111
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9488888888888889
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9266666666666667
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9222222222222222
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9288888888888889
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.888888888888889
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9355555555555556
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9333333333333332
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9288888888888889
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.931111111111111
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9155555555555556
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9111111111111111
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8999999999999999
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8888888888888888
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8822222222222221
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9066666666666667
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX===== rocchio like>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX==== clustering>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
nc.class_map = [2, 1, 3, 2, 1, 3, 3, 3, 3, 3, 3, 2, 1, 3, 2, 3, 3, 2, 1, 3, 3]
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 9, 11]]
** centroid: 6, normalized-entropy: 0.9927744539878083, [(2, 9), (3, 11)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 3]]
** centroid: 8, normalized-entropy: 1.0, [(2, 3), (3, 3)]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [3, 1, 2, 3, 1, 2, 3, 3, 2, 3, 2, 3, 2, 1]
acc = 0.9533333333333334
*** starting iteration: 1; err: [Inf, 0.381266670418703] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.381266670418703, 0.19534129184447974] ***
*** starting iteration: 2; err: [Inf, 0.381266670418703, 0.19534129184447974] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.381266670418703, 0.19534129184447974, 0.17805814728706332] ***
*** starting iteration: 3; err: [Inf, 0.381266670418703, 0.19534129184447974, 0.17805814728706332] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.381266670418703, 0.19534129184447974, 0.17805814728706332, 0.16619682591598425] ***
*** starting iteration: 4; err: [Inf, 0.381266670418703, 0.19534129184447974, 0.17805814728706332, 0.16619682591598425] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.381266670418703, 0.19534129184447974, 0.17805814728706332, 0.16619682591598425, 0.1635783610426073] ***
*** starting iteration: 5; err: [Inf, 0.381266670418703, 0.19534129184447974, 0.17805814728706332, 0.16619682591598425, 0.1635783610426073] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.381266670418703, 0.19534129184447974, 0.17805814728706332, 0.16619682591598425, 0.1635783610426073, 0.1623779148122655] ***
*** starting iteration: 6; err: [Inf, 0.381266670418703, 0.19534129184447974, 0.17805814728706332, 0.16619682591598425, 0.1635783610426073, 0.1623779148122655] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.381266670418703, 0.19534129184447974, 0.17805814728706332, 0.16619682591598425, 0.1635783610426073, 0.1623779148122655, 0.16209971251282457] ***
*** finished computation of 12 references, err: [Inf, 0.381266670418703, 0.19534129184447974, 0.17805814728706332, 0.16619682591598425, 0.1635783610426073, 0.1623779148122655, 0.16209971251282457] ***
*** center 1: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 8, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
acc = 0.9733333333333334
Test Summary:   | Pass  Total
NearestCentroid |   10     10
iteration 1 finished
*** starting iteration: 1; err: [Inf, 2.5904872367854197] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.5904872367854197, 0.7429653974259803] ***
*** starting iteration: 2; err: [Inf, 2.5904872367854197, 0.7429653974259803] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.5904872367854197, 0.7429653974259803, 0.625966511274744] ***
*** starting iteration: 3; err: [Inf, 2.5904872367854197, 0.7429653974259803, 0.625966511274744] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.5904872367854197, 0.7429653974259803, 0.625966511274744, 0.6244032645178685] ***
*** finished computation of 3 references, err: [Inf, 2.5904872367854197, 0.7429653974259803, 0.625966511274744, 0.6244032645178685] ***
*** center 1: selecting labels [1] (freq >= 1) [from [28, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [7, 2, 0]]
** centroid: 2, normalized-entropy: 0.7642045065086204, [(1, 7), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 32, 31]]
** centroid: 3, normalized-entropy: 0.9998182469603427, [(2, 32), (3, 31)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.237184994582598] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.237184994582598, 0.6849038659785454] ***
*** starting iteration: 2; err: [Inf, 1.237184994582598, 0.6849038659785454] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.237184994582598, 0.6849038659785454, 0.6826257144355132] ***
*** starting iteration: 3; err: [Inf, 1.237184994582598, 0.6849038659785454, 0.6826257144355132] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.237184994582598, 0.6849038659785454, 0.6826257144355132, 0.6826257144355132] ***
*** finished computation of 3 references, err: [Inf, 1.237184994582598, 0.6849038659785454, 0.6826257144355132, 0.6826257144355132] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 33, 35]]
** centroid: 1, normalized-entropy: 0.9993759069576513, [(2, 33), (3, 35)]
*** center 2: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [15, 2, 0]]
** centroid: 3, normalized-entropy: 0.5225593745369407, [(1, 15), (2, 2)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.6066166774109063] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.6066166774109063, 0.6193210839183914] ***
*** starting iteration: 2; err: [Inf, 1.6066166774109063, 0.6193210839183914] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.6066166774109063, 0.6193210839183914, 0.615422807718562] ***
*** starting iteration: 3; err: [Inf, 1.6066166774109063, 0.6193210839183914, 0.615422807718562] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.6066166774109063, 0.6193210839183914, 0.615422807718562, 0.6149490784223631] ***
*** finished computation of 3 references, err: [Inf, 1.6066166774109063, 0.6193210839183914, 0.615422807718562, 0.6149490784223631] ***
*** center 1: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [24, 1, 0]]
** centroid: 2, normalized-entropy: 0.24229218908241482, [(1, 24), (2, 1)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 30, 34]]
** centroid: 3, normalized-entropy: 0.9971803988942641, [(2, 30), (3, 34)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3222974628309229] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3222974628309229, 0.21315803788228482] ***
*** finished computation of 7 references, err: [Inf, 0.3222974628309229, 0.21315803788228482] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 15, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 15, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 2, 11]]
** centroid: 4, normalized-entropy: 0.6193821946787638, [(2, 2), (3, 11)]
*** center 5: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 2, 2]]
** centroid: 6, normalized-entropy: 1.0, [(2, 2), (3, 2)]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 12]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3762774026914579] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3762774026914579, 0.25936968219605494] ***
*** finished computation of 7 references, err: [Inf, 0.3762774026914579, 0.25936968219605494] ***
*** center 1: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 5, 20]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(2, 5), (3, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [2, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 30, 8]]
** centroid: 4, normalized-entropy: 0.7424875695421234, [(2, 30), (3, 8)]
*** center 5: selecting labels [1] (freq >= 2) [from [5, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 7: selecting labels [1] (freq >= 2) [from [8, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.33174960347922394] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33174960347922394, 0.16998661502965765] ***
*** finished computation of 7 references, err: [Inf, 0.33174960347922394, 0.16998661502965765] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 11, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 10, 6]]
** centroid: 3, normalized-entropy: 0.954434002924965, [(2, 10), (3, 6)]
*** center 4: selecting labels [1] (freq >= 2) [from [18, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 8, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 2, 13]]
** centroid: 7, normalized-entropy: 0.5665095065529052, [(2, 2), (3, 13)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 10.929000024501763] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 10.929000024501763, 1.6992410978770964] ***
*** starting iteration: 2; err: [Inf, 10.929000024501763, 1.6992410978770964] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 10.929000024501763, 1.6992410978770964, 0.9317941484325432] ***
*** starting iteration: 3; err: [Inf, 10.929000024501763, 1.6992410978770964, 0.9317941484325432] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 10.929000024501763, 1.6992410978770964, 0.9317941484325432, 0.9272989022129423] ***
*** starting iteration: 4; err: [Inf, 10.929000024501763, 1.6992410978770964, 0.9317941484325432, 0.9272989022129423] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 10.929000024501763, 1.6992410978770964, 0.9317941484325432, 0.9272989022129423, 0.9264734344738413] ***
*** finished computation of 3 references, err: [Inf, 10.929000024501763, 1.6992410978770964, 0.9317941484325432, 0.9272989022129423, 0.9264734344738413] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [19, 1, 0]]
** centroid: 1, normalized-entropy: 0.2863969571159561, [(1, 19), (2, 1)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 33, 31]]
** centroid: 2, normalized-entropy: 0.9992954443621548, [(2, 33), (3, 31)]
*** center 3: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.3339000015663907] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3339000015663907, 0.5453545511619062] ***
*** starting iteration: 2; err: [Inf, 1.3339000015663907, 0.5453545511619062] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3339000015663907, 0.5453545511619062, 0.538425184974381] ***
*** starting iteration: 3; err: [Inf, 1.3339000015663907, 0.5453545511619062, 0.538425184974381] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3339000015663907, 0.5453545511619062, 0.538425184974381, 0.53589551285568] ***
*** starting iteration: 4; err: [Inf, 1.3339000015663907, 0.5453545511619062, 0.538425184974381, 0.53589551285568] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3339000015663907, 0.5453545511619062, 0.538425184974381, 0.53589551285568, 0.53589551285568] ***
*** finished computation of 3 references, err: [Inf, 1.3339000015663907, 0.5453545511619062, 0.538425184974381, 0.53589551285568, 0.53589551285568] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 33, 8]]
** centroid: 1, normalized-entropy: 0.7120640548905481, [(2, 33), (3, 8)]
*** center 2: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 2, 27]]
** centroid: 3, normalized-entropy: 0.36205125173399805, [(2, 2), (3, 27)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8435000020397208] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8435000020397208, 0.5169591472827237] ***
*** starting iteration: 2; err: [Inf, 0.8435000020397208, 0.5169591472827237] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8435000020397208, 0.5169591472827237, 0.5122876981349963] ***
*** starting iteration: 3; err: [Inf, 0.8435000020397208, 0.5169591472827237, 0.5122876981349963] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8435000020397208, 0.5169591472827237, 0.5122876981349963, 0.5054036096419149] ***
*** starting iteration: 4; err: [Inf, 0.8435000020397208, 0.5169591472827237, 0.5122876981349963, 0.5054036096419149] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8435000020397208, 0.5169591472827237, 0.5122876981349963, 0.5054036096419149, 0.5041357811419013] ***
*** starting iteration: 5; err: [Inf, 0.8435000020397208, 0.5169591472827237, 0.5122876981349963, 0.5054036096419149, 0.5041357811419013] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8435000020397208, 0.5169591472827237, 0.5122876981349963, 0.5054036096419149, 0.5041357811419013, 0.5019168161723454] ***
*** starting iteration: 6; err: [Inf, 0.8435000020397208, 0.5169591472827237, 0.5122876981349963, 0.5054036096419149, 0.5041357811419013, 0.5019168161723454] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8435000020397208, 0.5169591472827237, 0.5122876981349963, 0.5054036096419149, 0.5041357811419013, 0.5019168161723454, 0.5014247619705448] ***
*** finished computation of 3 references, err: [Inf, 0.8435000020397208, 0.5169591472827237, 0.5122876981349963, 0.5054036096419149, 0.5041357811419013, 0.5019168161723454, 0.5014247619705448] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 29]]
** centroid: 1, normalized-entropy: 0.2108423003185322, [(2, 1), (3, 29)]
*** center 2: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 30, 5]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(2, 30), (3, 5)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.441971510011983] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.441971510011983, 0.23057813553310033] ***
*** starting iteration: 2; err: [Inf, 0.441971510011983, 0.23057813553310033] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.441971510011983, 0.23057813553310033, 0.18918035320138668] ***
*** starting iteration: 3; err: [Inf, 0.441971510011983, 0.23057813553310033, 0.18918035320138668] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.441971510011983, 0.23057813553310033, 0.18918035320138668, 0.18072378884891072] ***
*** starting iteration: 4; err: [Inf, 0.441971510011983, 0.23057813553310033, 0.18918035320138668, 0.18072378884891072] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.441971510011983, 0.23057813553310033, 0.18918035320138668, 0.18072378884891072, 0.1764448689652345] ***
*** starting iteration: 5; err: [Inf, 0.441971510011983, 0.23057813553310033, 0.18918035320138668, 0.18072378884891072, 0.1764448689652345] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.441971510011983, 0.23057813553310033, 0.18918035320138668, 0.18072378884891072, 0.1764448689652345, 0.17629777735712004] ***
*** finished computation of 7 references, err: [Inf, 0.441971510011983, 0.23057813553310033, 0.18918035320138668, 0.18072378884891072, 0.1764448689652345, 0.17629777735712004] ***
*** center 1: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 13]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 16, 1]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 18, 9]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(2, 18), (3, 9)]
*** center 7: selecting labels [1] (freq >= 2) [from [7, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3903326072524776] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3903326072524776, 0.27840437319585193] ***
*** starting iteration: 2; err: [Inf, 0.3903326072524776, 0.27840437319585193] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3903326072524776, 0.27840437319585193, 0.24764904488490694] ***
*** starting iteration: 3; err: [Inf, 0.3903326072524776, 0.27840437319585193, 0.24764904488490694] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3903326072524776, 0.27840437319585193, 0.24764904488490694, 0.23627607664410585] ***
*** starting iteration: 4; err: [Inf, 0.3903326072524776, 0.27840437319585193, 0.24764904488490694, 0.23627607664410585] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3903326072524776, 0.27840437319585193, 0.24764904488490694, 0.23627607664410585, 0.23248238316324918] ***
*** starting iteration: 5; err: [Inf, 0.3903326072524776, 0.27840437319585193, 0.24764904488490694, 0.23627607664410585, 0.23248238316324918] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3903326072524776, 0.27840437319585193, 0.24764904488490694, 0.23627607664410585, 0.23248238316324918, 0.2316599515648321] ***
*** finished computation of 7 references, err: [Inf, 0.3903326072524776, 0.27840437319585193, 0.24764904488490694, 0.23627607664410585, 0.23248238316324918, 0.2316599515648321] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 11]]
*** center 2: selecting labels [1] (freq >= 2) [from [3, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 12, 23]]
** centroid: 5, normalized-entropy: 0.927526588431676, [(2, 12), (3, 23)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 23, 1]]
*** center 7: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [1, 0, 0]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21951588940505282] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21951588940505282, 0.1626661672967162] ***
*** starting iteration: 2; err: [Inf, 0.21951588940505282, 0.1626661672967162] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21951588940505282, 0.1626661672967162, 0.15535339991540648] ***
*** starting iteration: 3; err: [Inf, 0.21951588940505282, 0.1626661672967162, 0.15535339991540648] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21951588940505282, 0.1626661672967162, 0.15535339991540648, 0.15450287984531258] ***
*** finished computation of 7 references, err: [Inf, 0.21951588940505282, 0.1626661672967162, 0.15535339991540648, 0.15450287984531258] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 10, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 17]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 11, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 3, 10]]
** centroid: 7, normalized-entropy: 0.7793498372920851, [(2, 3), (3, 10)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.0576999987989466] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0576999987989466, 0.5407135491752626] ***
*** starting iteration: 2; err: [Inf, 1.0576999987989466, 0.5407135491752626] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0576999987989466, 0.5407135491752626, 0.5271976295695551] ***
*** starting iteration: 3; err: [Inf, 1.0576999987989466, 0.5407135491752626, 0.5271976295695551] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0576999987989466, 0.5407135491752626, 0.5271976295695551, 0.5264345137356937] ***
*** finished computation of 3 references, err: [Inf, 1.0576999987989466, 0.5407135491752626, 0.5271976295695551, 0.5264345137356937] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 21]]
** centroid: 1, normalized-entropy: 0.5435644431995963, [(2, 3), (3, 21)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 31, 10]]
** centroid: 2, normalized-entropy: 0.8014698931335286, [(2, 31), (3, 10)]
*** center 3: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.135699999565045] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.135699999565045, 0.5663616200335452] ***
*** starting iteration: 2; err: [Inf, 1.135699999565045, 0.5663616200335452] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.135699999565045, 0.5663616200335452, 0.5426923065405355] ***
*** starting iteration: 3; err: [Inf, 1.135699999565045, 0.5663616200335452, 0.5426923065405355] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.135699999565045, 0.5663616200335452, 0.5426923065405355, 0.538425184974381] ***
*** starting iteration: 4; err: [Inf, 1.135699999565045, 0.5663616200335452, 0.5426923065405355, 0.538425184974381] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.135699999565045, 0.5663616200335452, 0.5426923065405355, 0.538425184974381, 0.53589551285568] ***
*** starting iteration: 5; err: [Inf, 1.135699999565045, 0.5663616200335452, 0.5426923065405355, 0.538425184974381, 0.53589551285568] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.135699999565045, 0.5663616200335452, 0.5426923065405355, 0.538425184974381, 0.53589551285568, 0.53589551285568] ***
*** finished computation of 3 references, err: [Inf, 1.135699999565045, 0.5663616200335452, 0.5426923065405355, 0.538425184974381, 0.53589551285568, 0.53589551285568] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 33, 8]]
** centroid: 1, normalized-entropy: 0.7120640548905481, [(2, 33), (3, 8)]
*** center 2: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 2, 27]]
** centroid: 3, normalized-entropy: 0.36205125173399805, [(2, 2), (3, 27)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0915999943346475] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0915999943346475, 0.49940112713939677] ***
*** starting iteration: 2; err: [Inf, 1.0915999943346475, 0.49940112713939677] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0915999943346475, 0.49940112713939677, 0.49940112713939677] ***
*** finished computation of 3 references, err: [Inf, 1.0915999943346475, 0.49940112713939677, 0.49940112713939677] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 31, 7]]
** centroid: 1, normalized-entropy: 0.6892019851173655, [(2, 31), (3, 7)]
*** center 2: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 27]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.28092165591241375] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28092165591241375, 0.2171696276265601] ***
*** starting iteration: 2; err: [Inf, 0.28092165591241375, 0.2171696276265601] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28092165591241375, 0.2171696276265601, 0.21121199554880132] ***
*** starting iteration: 3; err: [Inf, 0.28092165591241375, 0.2171696276265601, 0.21121199554880132] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28092165591241375, 0.2171696276265601, 0.21121199554880132, 0.21121199554880132] ***
*** finished computation of 7 references, err: [Inf, 0.28092165591241375, 0.2171696276265601, 0.21121199554880132, 0.21121199554880132] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 3, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 13, 18]]
** centroid: 4, normalized-entropy: 0.9811522341999134, [(2, 13), (3, 18)]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2564856770537152] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2564856770537152, 0.19651456707083897] ***
*** starting iteration: 2; err: [Inf, 0.2564856770537152, 0.19651456707083897] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2564856770537152, 0.19651456707083897, 0.18411173084489904] ***
*** starting iteration: 3; err: [Inf, 0.2564856770537152, 0.19651456707083897, 0.18411173084489904] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2564856770537152, 0.19651456707083897, 0.18411173084489904, 0.17233192878548217] ***
*** starting iteration: 4; err: [Inf, 0.2564856770537152, 0.19651456707083897, 0.18411173084489904, 0.17233192878548217] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2564856770537152, 0.19651456707083897, 0.18411173084489904, 0.17233192878548217, 0.17176530302822016] ***
*** finished computation of 7 references, err: [Inf, 0.2564856770537152, 0.19651456707083897, 0.18411173084489904, 0.17233192878548217, 0.17176530302822016] ***
*** center 1: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [2, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 19, 1]]
** centroid: 6, normalized-entropy: 0.2863969571159561, [(2, 19), (3, 1)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 16, 8]]
** centroid: 7, normalized-entropy: 0.9182958340544894, [(2, 16), (3, 8)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4244210096749393] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4244210096749393, 0.1944868520260531] ***
*** starting iteration: 2; err: [Inf, 0.4244210096749393, 0.1944868520260531] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4244210096749393, 0.1944868520260531, 0.17264708964791795] ***
*** starting iteration: 3; err: [Inf, 0.4244210096749393, 0.1944868520260531, 0.17264708964791795] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4244210096749393, 0.1944868520260531, 0.17264708964791795, 0.1689147260471551] ***
*** starting iteration: 4; err: [Inf, 0.4244210096749393, 0.1944868520260531, 0.17264708964791795, 0.1689147260471551] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4244210096749393, 0.1944868520260531, 0.17264708964791795, 0.1689147260471551, 0.1647125880125674] ***
*** starting iteration: 5; err: [Inf, 0.4244210096749393, 0.1944868520260531, 0.17264708964791795, 0.1689147260471551, 0.1647125880125674] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4244210096749393, 0.1944868520260531, 0.17264708964791795, 0.1689147260471551, 0.1647125880125674, 0.1624210780429084] ***
*** starting iteration: 6; err: [Inf, 0.4244210096749393, 0.1944868520260531, 0.17264708964791795, 0.1689147260471551, 0.1647125880125674, 0.1624210780429084] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4244210096749393, 0.1944868520260531, 0.17264708964791795, 0.1689147260471551, 0.1647125880125674, 0.1624210780429084, 0.15878405284832056] ***
*** starting iteration: 7; err: [Inf, 0.4244210096749393, 0.1944868520260531, 0.17264708964791795, 0.1689147260471551, 0.1647125880125674, 0.1624210780429084, 0.15878405284832056] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4244210096749393, 0.1944868520260531, 0.17264708964791795, 0.1689147260471551, 0.1647125880125674, 0.1624210780429084, 0.15878405284832056, 0.15548273469196577] ***
*** starting iteration: 8; err: [Inf, 0.4244210096749393, 0.1944868520260531, 0.17264708964791795, 0.1689147260471551, 0.1647125880125674, 0.1624210780429084, 0.15878405284832056, 0.15548273469196577] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4244210096749393, 0.1944868520260531, 0.17264708964791795, 0.1689147260471551, 0.1647125880125674, 0.1624210780429084, 0.15878405284832056, 0.15548273469196577, 0.15412884842164368] ***
*** starting iteration: 9; err: [Inf, 0.4244210096749393, 0.1944868520260531, 0.17264708964791795, 0.1689147260471551, 0.1647125880125674, 0.1624210780429084, 0.15878405284832056, 0.15548273469196577, 0.15412884842164368] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4244210096749393, 0.1944868520260531, 0.17264708964791795, 0.1689147260471551, 0.1647125880125674, 0.1624210780429084, 0.15878405284832056, 0.15548273469196577, 0.15412884842164368, 0.15412884842164368] ***
*** finished computation of 7 references, err: [Inf, 0.4244210096749393, 0.1944868520260531, 0.17264708964791795, 0.1689147260471551, 0.1647125880125674, 0.1624210780429084, 0.15878405284832056, 0.15548273469196577, 0.15412884842164368, 0.15412884842164368] ***
*** center 1: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 3, 11]]
** centroid: 4, normalized-entropy: 0.7495952572594798, [(2, 3), (3, 11)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.8519000023283171] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8519000023283171, 0.5733512341506831] ***
*** finished computation of 3 references, err: [Inf, 0.8519000023283171, 0.5733512341506831] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 34, 15]]
** centroid: 1, normalized-entropy: 0.8886466698980794, [(2, 34), (3, 15)]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 16]]
*** center 3: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.9739999992346242] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.9739999992346242, 1.0659114537321994] ***
*** finished computation of 3 references, err: [Inf, 1.9739999992346242, 1.0659114537321994] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 33, 35]]
** centroid: 1, normalized-entropy: 0.9993759069576513, [(2, 33), (3, 35)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [26, 2, 0]]
** centroid: 2, normalized-entropy: 0.3712323266408756, [(1, 26), (2, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [4, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.9321000264598265] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.9321000264598265, 0.5717226726034303] ***
*** finished computation of 3 references, err: [Inf, 2.9321000264598265, 0.5717226726034303] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 30, 11]]
** centroid: 1, normalized-entropy: 0.8390040613676978, [(2, 30), (3, 11)]
*** center 2: selecting labels [1] (freq >= 2) [from [35, 1, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 23]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.37803250164878177] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37803250164878177, 0.21451383427029921] ***
*** starting iteration: 2; err: [Inf, 0.37803250164878177, 0.21451383427029921] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37803250164878177, 0.21451383427029921, 0.210917909147383] ***
*** starting iteration: 3; err: [Inf, 0.37803250164878177, 0.21451383427029921, 0.210917909147383] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37803250164878177, 0.21451383427029921, 0.210917909147383, 0.20850879219314336] ***
*** finished computation of 7 references, err: [Inf, 0.37803250164878177, 0.21451383427029921, 0.210917909147383, 0.20850879219314336] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 17, 1]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 16, 4]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(2, 16), (3, 4)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 6]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 20]]
*** center 5: selecting labels [1] (freq >= 2) [from [18, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [4, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4018019625585593] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4018019625585593, 0.21526679904399237] ***
*** starting iteration: 2; err: [Inf, 0.4018019625585593, 0.21526679904399237] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4018019625585593, 0.21526679904399237, 0.16783128206380035] ***
*** starting iteration: 3; err: [Inf, 0.4018019625585593, 0.21526679904399237, 0.16783128206380035] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4018019625585593, 0.21526679904399237, 0.16783128206380035, 0.15811534435051214] ***
*** finished computation of 7 references, err: [Inf, 0.4018019625585593, 0.21526679904399237, 0.16783128206380035, 0.15811534435051214] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 13, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 21]]
*** center 4: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 4, 7]]
** centroid: 6, normalized-entropy: 0.9456603046006401, [(2, 4), (3, 7)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 18, 1]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.30887463661625125] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30887463661625125, 0.20795297947143035] ***
*** starting iteration: 2; err: [Inf, 0.30887463661625125, 0.20795297947143035] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30887463661625125, 0.20795297947143035, 0.2057793952997147] ***
*** starting iteration: 3; err: [Inf, 0.30887463661625125, 0.20795297947143035, 0.2057793952997147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30887463661625125, 0.20795297947143035, 0.2057793952997147, 0.20460360216701243] ***
*** finished computation of 7 references, err: [Inf, 0.30887463661625125, 0.20795297947143035, 0.2057793952997147, 0.20460360216701243] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [6, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 12, 20]]
** centroid: 3, normalized-entropy: 0.954434002924965, [(2, 12), (3, 20)]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 14]]
*** center 5: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
*** center 7: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [1, 0, 0]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 2.6205999985288666] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.6205999985288666, 1.0000516130983967] ***
*** starting iteration: 2; err: [Inf, 2.6205999985288666, 1.0000516130983967] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.6205999985288666, 1.0000516130983967, 0.9300447074449584] ***
*** starting iteration: 3; err: [Inf, 2.6205999985288666, 1.0000516130983967, 0.9300447074449584] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.6205999985288666, 1.0000516130983967, 0.9300447074449584, 0.9289061184641486] ***
*** starting iteration: 4; err: [Inf, 2.6205999985288666, 1.0000516130983967, 0.9300447074449584, 0.9289061184641486] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.6205999985288666, 1.0000516130983967, 0.9300447074449584, 0.9289061184641486, 0.9289061184641486] ***
*** finished computation of 3 references, err: [Inf, 2.6205999985288666, 1.0000516130983967, 0.9300447074449584, 0.9289061184641486, 0.9289061184641486] ***
*** center 1: selecting labels [1] (freq >= 2) [from [24, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [11, 2, 0]]
** centroid: 2, normalized-entropy: 0.6193821946787638, [(1, 11), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 32, 31]]
** centroid: 3, normalized-entropy: 0.9998182469603427, [(2, 32), (3, 31)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.1867999795053836] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1867999795053836, 0.5741535631680346] ***
*** starting iteration: 2; err: [Inf, 1.1867999795053836, 0.5741535631680346] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1867999795053836, 0.5741535631680346, 0.545989237750553] ***
*** starting iteration: 3; err: [Inf, 1.1867999795053836, 0.5741535631680346, 0.545989237750553] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1867999795053836, 0.5741535631680346, 0.545989237750553, 0.5362808390431012] ***
*** starting iteration: 4; err: [Inf, 1.1867999795053836, 0.5741535631680346, 0.545989237750553, 0.5362808390431012] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1867999795053836, 0.5741535631680346, 0.545989237750553, 0.5362808390431012, 0.5362808390431012] ***
*** finished computation of 3 references, err: [Inf, 1.1867999795053836, 0.5741535631680346, 0.545989237750553, 0.5362808390431012, 0.5362808390431012] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 3, 27]]
** centroid: 1, normalized-entropy: 0.46899559358928133, [(2, 3), (3, 27)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 32, 8]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(2, 32), (3, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 3.45100002222706] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.45100002222706, 0.8018940991319923] ***
*** starting iteration: 2; err: [Inf, 3.45100002222706, 0.8018940991319923] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.45100002222706, 0.8018940991319923, 0.5377453912436454] ***
*** starting iteration: 3; err: [Inf, 3.45100002222706, 0.8018940991319923, 0.5377453912436454] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.45100002222706, 0.8018940991319923, 0.5377453912436454, 0.502157794138318] ***
*** starting iteration: 4; err: [Inf, 3.45100002222706, 0.8018940991319923, 0.5377453912436454, 0.502157794138318] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.45100002222706, 0.8018940991319923, 0.5377453912436454, 0.502157794138318, 0.498714317688858] ***
*** starting iteration: 5; err: [Inf, 3.45100002222706, 0.8018940991319923, 0.5377453912436454, 0.502157794138318, 0.498714317688858] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.45100002222706, 0.8018940991319923, 0.5377453912436454, 0.502157794138318, 0.498714317688858, 0.498714317688858] ***
*** finished computation of 3 references, err: [Inf, 3.45100002222706, 0.8018940991319923, 0.5377453912436454, 0.502157794138318, 0.498714317688858, 0.498714317688858] ***
*** center 1: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 24]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 31, 10]]
** centroid: 3, normalized-entropy: 0.8014698931335286, [(2, 31), (3, 10)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9443843427868853] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9443843427868853, 0.6277062226285238] ***
*** finished computation of 3 references, err: [Inf, 0.9443843427868853, 0.6277062226285238] ***
*** center 1: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 34, 31]]
** centroid: 2, normalized-entropy: 0.9984628557283827, [(2, 34), (3, 31)]
*** center 3: selecting labels [1] (freq >= 2) [from [26, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 3.829055859958321] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.829055859958321, 2.0242536343800626] ***
*** finished computation of 3 references, err: [Inf, 3.829055859958321, 2.0242536343800626] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [30, 30, 5]]
** centroid: 1, normalized-entropy: 0.8292439007914473, [(1, 30), (2, 30), (3, 5)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 5, 28]]
** centroid: 2, normalized-entropy: 0.6136190195993708, [(2, 5), (3, 28)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.6082524714134884] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6082524714134884, 0.3667696350347158] ***
*** finished computation of 3 references, err: [Inf, 0.6082524714134884, 0.3667696350347158] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 30, 11]]
** centroid: 1, normalized-entropy: 0.8390040613676978, [(2, 30), (3, 11)]
*** center 2: selecting labels [1] (freq >= 2) [from [35, 1, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 23]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 8.437429364292887] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 8.437429364292887, 0.7261570475656156] ***
*** finished computation of 3 references, err: [Inf, 8.437429364292887, 0.7261570475656156] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 2, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 32, 31]]
** centroid: 2, normalized-entropy: 0.9998182469603427, [(2, 32), (3, 31)]
*** center 3: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 4.037196900659559] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 4.037196900659559, 2.1433896161040202] ***
*** finished computation of 3 references, err: [Inf, 4.037196900659559, 2.1433896161040202] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [30, 33, 8]]
** centroid: 1, normalized-entropy: 0.8793945263308963, [(1, 30), (2, 33), (3, 8)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 2, 25]]
** centroid: 2, normalized-entropy: 0.38094658570539014, [(2, 2), (3, 25)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.579067949501186] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.579067949501186, 0.6172749856540832] ***
*** finished computation of 3 references, err: [Inf, 1.579067949501186, 0.6172749856540832] ***
*** center 1: selecting labels [1] (freq >= 2) [from [19, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [16, 1, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 30, 34]]
** centroid: 3, normalized-entropy: 0.9971803988942641, [(2, 30), (3, 34)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.4667999942404435] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.4667999942404435, 0.9396591653830723] ***
*** starting iteration: 2; err: [Inf, 1.4667999942404435, 0.9396591653830723] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.4667999942404435, 0.9396591653830723, 0.9305938076513223] ***
*** starting iteration: 3; err: [Inf, 1.4667999942404435, 0.9396591653830723, 0.9305938076513223] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.4667999942404435, 0.9396591653830723, 0.9305938076513223, 0.9297369211425827] ***
*** finished computation of 3 references, err: [Inf, 1.4667999942404435, 0.9396591653830723, 0.9305938076513223, 0.9297369211425827] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 33, 31]]
** centroid: 1, normalized-entropy: 0.9992954443621548, [(2, 33), (3, 31)]
*** center 2: selecting labels [1] (freq >= 2) [from [19, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [16, 1, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9972000025918113] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9972000025918113, 0.5726825047367352] ***
*** starting iteration: 2; err: [Inf, 0.9972000025918113, 0.5726825047367352] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9972000025918113, 0.5726825047367352, 0.5466516481468802] ***
*** starting iteration: 3; err: [Inf, 0.9972000025918113, 0.5726825047367352, 0.5466516481468802] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9972000025918113, 0.5726825047367352, 0.5466516481468802, 0.5389161761261737] ***
*** starting iteration: 4; err: [Inf, 0.9972000025918113, 0.5726825047367352, 0.5466516481468802, 0.5389161761261737] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9972000025918113, 0.5726825047367352, 0.5466516481468802, 0.5389161761261737, 0.5362808390431012] ***
*** starting iteration: 5; err: [Inf, 0.9972000025918113, 0.5726825047367352, 0.5466516481468802, 0.5389161761261737, 0.5362808390431012] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9972000025918113, 0.5726825047367352, 0.5466516481468802, 0.5389161761261737, 0.5362808390431012, 0.5362808390431012] ***
*** finished computation of 3 references, err: [Inf, 0.9972000025918113, 0.5726825047367352, 0.5466516481468802, 0.5389161761261737, 0.5362808390431012, 0.5362808390431012] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 3, 27]]
** centroid: 1, normalized-entropy: 0.46899559358928133, [(2, 3), (3, 27)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 32, 8]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(2, 32), (3, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.718400009776834] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.718400009776834, 0.5247048384895464] ***
*** starting iteration: 2; err: [Inf, 0.718400009776834, 0.5247048384895464] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.718400009776834, 0.5247048384895464, 0.5210198207509875] ***
*** starting iteration: 3; err: [Inf, 0.718400009776834, 0.5247048384895464, 0.5210198207509875] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.718400009776834, 0.5247048384895464, 0.5210198207509875, 0.5177736214848457] ***
*** starting iteration: 4; err: [Inf, 0.718400009776834, 0.5247048384895464, 0.5210198207509875, 0.5177736214848457] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.718400009776834, 0.5247048384895464, 0.5210198207509875, 0.5177736214848457, 0.5172451233709134] ***
*** finished computation of 3 references, err: [Inf, 0.718400009776834, 0.5247048384895464, 0.5210198207509875, 0.5177736214848457, 0.5172451233709134] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 7, 34]]
** centroid: 1, normalized-entropy: 0.6593758812786991, [(2, 7), (3, 34)]
*** center 2: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 24, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.27815066818834266] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27815066818834266, 0.1857239204360151] ***
*** finished computation of 7 references, err: [Inf, 0.27815066818834266, 0.1857239204360151] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 17, 9]]
** centroid: 2, normalized-entropy: 0.9305861291319927, [(2, 17), (3, 9)]
*** center 3: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 17, 1]]
** centroid: 4, normalized-entropy: 0.3095434291503252, [(2, 17), (3, 1)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2641920616893798] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2641920616893798, 0.17026491605373895] ***
*** finished computation of 7 references, err: [Inf, 0.2641920616893798, 0.17026491605373895] ***
*** center 1: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 5: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 12, 6]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(2, 12), (3, 6)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 12, 2]]
** centroid: 7, normalized-entropy: 0.5916727785823274, [(2, 12), (3, 2)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3282764269368796] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3282764269368796, 0.2116222726428796] ***
*** finished computation of 7 references, err: [Inf, 0.3282764269368796, 0.2116222726428796] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 12, 11]]
** centroid: 1, normalized-entropy: 0.9986359641585719, [(2, 12), (3, 11)]
*** center 2: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 23]]
*** center 4: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4895000060117839] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4895000060117839, 0.32790367410238075] ***
*** starting iteration: 2; err: [Inf, 0.4895000060117839, 0.32790367410238075] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4895000060117839, 0.32790367410238075, 0.3037160013690756] ***
*** starting iteration: 3; err: [Inf, 0.4895000060117839, 0.32790367410238075, 0.3037160013690756] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4895000060117839, 0.32790367410238075, 0.3037160013690756, 0.28436251045213273] ***
*** finished computation of 7 references, err: [Inf, 0.4895000060117839, 0.32790367410238075, 0.3037160013690756, 0.28436251045213273] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 3: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 3, 2]]
** centroid: 4, normalized-entropy: 0.9709505944546688, [(2, 3), (3, 2)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 1, 16]]
** centroid: 7, normalized-entropy: 0.32275695889739825, [(2, 1), (3, 16)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.49639999799511186] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.49639999799511186, 0.3570458987891392] ***
*** starting iteration: 2; err: [Inf, 0.49639999799511186, 0.3570458987891392] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.49639999799511186, 0.3570458987891392, 0.3012620996550302] ***
*** starting iteration: 3; err: [Inf, 0.49639999799511186, 0.3570458987891392, 0.3012620996550302] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.49639999799511186, 0.3570458987891392, 0.3012620996550302, 0.2885566156654853] ***
*** finished computation of 7 references, err: [Inf, 0.49639999799511186, 0.3570458987891392, 0.3012620996550302, 0.2885566156654853] ***
*** center 1: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 6, 1]]
** centroid: 2, normalized-entropy: 0.5916727785823274, [(2, 6), (3, 1)]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 4, 17]]
** centroid: 4, normalized-entropy: 0.7024665512903904, [(2, 4), (3, 17)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 17, 7]]
** centroid: 6, normalized-entropy: 0.8708644692353648, [(2, 17), (3, 7)]
*** center 7: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6361000131286743] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6361000131286743, 0.40678183414237395] ***
*** starting iteration: 2; err: [Inf, 0.6361000131286743, 0.40678183414237395] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6361000131286743, 0.40678183414237395, 0.34750602230927397] ***
*** starting iteration: 3; err: [Inf, 0.6361000131286743, 0.40678183414237395, 0.34750602230927397] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6361000131286743, 0.40678183414237395, 0.34750602230927397, 0.2697918013262465] ***
*** finished computation of 7 references, err: [Inf, 0.6361000131286743, 0.40678183414237395, 0.34750602230927397, 0.2697918013262465] ***
*** center 1: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 15]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 17, 6]]
** centroid: 5, normalized-entropy: 0.828055725379504, [(2, 17), (3, 6)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 7: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.0168000101000294] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0168000101000294, 0.6303195878349213] ***
*** starting iteration: 2; err: [Inf, 1.0168000101000294, 0.6303195878349213] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0168000101000294, 0.6303195878349213, 0.5856097308943728] ***
*** starting iteration: 3; err: [Inf, 1.0168000101000294, 0.6303195878349213, 0.5856097308943728] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0168000101000294, 0.6303195878349213, 0.5856097308943728, 0.5693247994465735] ***
*** finished computation of 3 references, err: [Inf, 1.0168000101000294, 0.6303195878349213, 0.5856097308943728, 0.5693247994465735] ***
*** center 1: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 25, 2]]
** centroid: 2, normalized-entropy: 0.38094658570539014, [(2, 25), (3, 2)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 9, 29]]
** centroid: 3, normalized-entropy: 0.7897492536625221, [(2, 9), (3, 29)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.6587000102871376] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.6587000102871376, 0.5978493676705395] ***
*** starting iteration: 2; err: [Inf, 1.6587000102871376, 0.5978493676705395] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.6587000102871376, 0.5978493676705395, 0.5802314208017259] ***
*** starting iteration: 3; err: [Inf, 1.6587000102871376, 0.5978493676705395, 0.5802314208017259] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.6587000102871376, 0.5978493676705395, 0.5802314208017259, 0.5729307825704872] ***
*** finished computation of 3 references, err: [Inf, 1.6587000102871376, 0.5978493676705395, 0.5802314208017259, 0.5729307825704872] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 28, 3]]
** centroid: 1, normalized-entropy: 0.45868581620054033, [(2, 28), (3, 3)]
*** center 2: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 7, 32]]
** centroid: 3, normalized-entropy: 0.6789538995185759, [(2, 7), (3, 32)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 3.152000012408505] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.152000012408505, 0.8834472539915619] ***
*** starting iteration: 2; err: [Inf, 3.152000012408505, 0.8834472539915619] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.152000012408505, 0.8834472539915619, 0.6544195962689947] ***
*** starting iteration: 3; err: [Inf, 3.152000012408505, 0.8834472539915619, 0.6544195962689947] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.152000012408505, 0.8834472539915619, 0.6544195962689947, 0.5517588725026896] ***
*** finished computation of 3 references, err: [Inf, 3.152000012408505, 0.8834472539915619, 0.6544195962689947, 0.5517588725026896] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 12, 34]]
** centroid: 2, normalized-entropy: 0.828055725379504, [(2, 12), (3, 34)]
*** center 3: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8607031846144487] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8607031846144487, 0.41470288258391497] ***
*** finished computation of 3 references, err: [Inf, 0.8607031846144487, 0.41470288258391497] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 34, 19]]
** centroid: 1, normalized-entropy: 0.9414231081869789, [(2, 34), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 12]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.2502838924498363] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.2502838924498363, 0.3984721512684671] ***
*** finished computation of 3 references, err: [Inf, 1.2502838924498363, 0.3984721512684671] ***
*** center 1: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 26]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 35, 9]]
** centroid: 3, normalized-entropy: 0.7309263775906009, [(2, 35), (3, 9)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5936820562774883] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5936820562774883, 0.37814753921824446] ***
*** finished computation of 3 references, err: [Inf, 0.5936820562774883, 0.37814753921824446] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 12, 34]]
** centroid: 1, normalized-entropy: 0.828055725379504, [(2, 12), (3, 34)]
*** center 2: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 19, 0]]
finished with 4 centroids; started with 3
generating 4 configurations using top 4 configurations, starting with 16)
[0.9733333333333333, 0.9666666666666667, 0.96, 0.96, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9199999999999999, 0.9133333333333332, 0.9133333333333332, 0.9133333333333332, 0.9, 0.8999999999999999, 0.8933333333333332, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.3, 2) => 0.9733333333333333
finished with 17
iteration 2 finished
*** starting iteration: 1; err: [Inf, 1.8611000195347516] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.8611000195347516, 0.6115936415166476] ***
*** finished computation of 7 references, err: [Inf, 1.8611000195347516, 0.6115936415166476] ***
*** center 1: selecting labels [1] (freq >= 2) [from [7, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 16, 1]]
*** center 3: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 18, 30]]
** centroid: 4, normalized-entropy: 0.954434002924965, [(2, 18), (3, 30)]
*** center 5: selecting labels [1] (freq >= 2) [from [4, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [6, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [5, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7045000064280945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7045000064280945, 0.30806033439193187] ***
*** finished computation of 7 references, err: [Inf, 0.7045000064280945, 0.30806033439193187] ***
*** center 1: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 19, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
*** center 6: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [0, 0, 1]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 1, 21]]
finished with 6 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4383999959706915] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4383999959706915, 0.3412080705577742] ***
*** finished computation of 7 references, err: [Inf, 0.4383999959706915, 0.3412080705577742] ***
*** center 1: selecting labels [1] (freq >= 2) [from [7, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 18]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 22, 3]]
** centroid: 4, normalized-entropy: 0.5293608652873645, [(2, 22), (3, 3)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 2, 13]]
** centroid: 5, normalized-entropy: 0.5665095065529052, [(2, 2), (3, 13)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
finished with 7 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 17)
[0.9733333333333333, 0.9666666666666667, 0.96, 0.96, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9199999999999999, 0.9133333333333332, 0.9133333333333332, 0.9133333333333332, 0.9066666666666666, 0.9, 0.8999999999999999, 0.8933333333333332, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.3, 2) => 0.9733333333333333
finished with 18
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.3452451417716891] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3452451417716891, 0.20201452533413244] ***
*** starting iteration: 2; err: [Inf, 0.3452451417716891, 0.20201452533413244] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3452451417716891, 0.20201452533413244, 0.18168251609696437] ***
*** starting iteration: 3; err: [Inf, 0.3452451417716891, 0.20201452533413244, 0.18168251609696437] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3452451417716891, 0.20201452533413244, 0.18168251609696437, 0.17933807723291584] ***
*** finished computation of 7 references, err: [Inf, 0.3452451417716891, 0.20201452533413244, 0.18168251609696437, 0.17933807723291584] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 3, 12]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(2, 3), (3, 12)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 17, 1]]
** centroid: 3, normalized-entropy: 0.3095434291503252, [(2, 17), (3, 1)]
*** center 4: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 14, 10]]
** centroid: 7, normalized-entropy: 0.9798687566511527, [(2, 14), (3, 10)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.35172989101387203] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.35172989101387203, 0.19827280756345922] ***
*** starting iteration: 2; err: [Inf, 0.35172989101387203, 0.19827280756345922] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.35172989101387203, 0.19827280756345922, 0.1756130862301478] ***
*** starting iteration: 3; err: [Inf, 0.35172989101387203, 0.19827280756345922, 0.1756130862301478] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.35172989101387203, 0.19827280756345922, 0.1756130862301478, 0.16466739669344996] ***
*** finished computation of 7 references, err: [Inf, 0.35172989101387203, 0.19827280756345922, 0.1756130862301478, 0.16466739669344996] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 13, 8]]
** centroid: 1, normalized-entropy: 0.9587118829771317, [(2, 13), (3, 8)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 9, 1]]
** centroid: 5, normalized-entropy: 0.46899559358928133, [(2, 9), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.34682665495548903] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34682665495548903, 0.22127056726899877] ***
*** starting iteration: 2; err: [Inf, 0.34682665495548903, 0.22127056726899877] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34682665495548903, 0.22127056726899877, 0.208636290338971] ***
*** starting iteration: 3; err: [Inf, 0.34682665495548903, 0.22127056726899877, 0.208636290338971] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34682665495548903, 0.22127056726899877, 0.208636290338971, 0.20372919874196577] ***
*** finished computation of 7 references, err: [Inf, 0.34682665495548903, 0.22127056726899877, 0.208636290338971, 0.20372919874196577] ***
*** center 1: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 12, 22]]
** centroid: 4, normalized-entropy: 0.9366673818775627, [(2, 12), (3, 22)]
*** center 5: selecting labels [1] (freq >= 1) [from [2, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 18)
[0.9733333333333333, 0.9666666666666667, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9199999999999999, 0.9133333333333332, 0.9133333333333332, 0.9133333333333332, 0.9066666666666666, 0.9, 0.8999999999999999, 0.8933333333333332, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.3, 2) => 0.9733333333333333
finished with 19
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.4572709736395615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4572709736395615, 0.35729635009976846] ***
*** starting iteration: 2; err: [Inf, 0.4572709736395615, 0.35729635009976846] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4572709736395615, 0.35729635009976846, 0.3322949510224584] ***
*** starting iteration: 3; err: [Inf, 0.4572709736395615, 0.35729635009976846, 0.3322949510224584] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4572709736395615, 0.35729635009976846, 0.3322949510224584, 0.32034762969572905] ***
*** finished computation of 7 references, err: [Inf, 0.4572709736395615, 0.35729635009976846, 0.3322949510224584, 0.32034762969572905] ***
*** center 1: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 27, 4]]
** centroid: 2, normalized-entropy: 0.5547781633412736, [(2, 27), (3, 4)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 7, 27]]
** centroid: 3, normalized-entropy: 0.7335379291086666, [(2, 7), (3, 27)]
*** center 4: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [1, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5174214919647921] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5174214919647921, 0.22001960322678396] ***
*** starting iteration: 2; err: [Inf, 0.5174214919647921, 0.22001960322678396] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5174214919647921, 0.22001960322678396, 0.1804337356074746] ***
*** starting iteration: 3; err: [Inf, 0.5174214919647921, 0.22001960322678396, 0.1804337356074746] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5174214919647921, 0.22001960322678396, 0.1804337356074746, 0.1652740037800683] ***
*** finished computation of 7 references, err: [Inf, 0.5174214919647921, 0.22001960322678396, 0.1804337356074746, 0.1652740037800683] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 18, 1]]
** centroid: 3, normalized-entropy: 0.2974722489192896, [(2, 18), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 7, 7]]
** centroid: 4, normalized-entropy: 1.0, [(2, 7), (3, 7)]
*** center 5: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.9505833374346782] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.9505833374346782, 0.27919492127311424] ***
*** starting iteration: 2; err: [Inf, 0.9505833374346782, 0.27919492127311424] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.9505833374346782, 0.27919492127311424, 0.23105330925430284] ***
*** starting iteration: 3; err: [Inf, 0.9505833374346782, 0.27919492127311424, 0.23105330925430284] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.9505833374346782, 0.27919492127311424, 0.23105330925430284, 0.1993147477808135] ***
*** finished computation of 7 references, err: [Inf, 0.9505833374346782, 0.27919492127311424, 0.23105330925430284, 0.1993147477808135] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 15, 10]]
** centroid: 1, normalized-entropy: 0.9709505944546688, [(2, 15), (3, 10)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 24]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 19)
[0.9733333333333333, 0.9666666666666667, 0.9666666666666667, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9199999999999999, 0.9133333333333332, 0.9133333333333332, 0.9133333333333332, 0.9066666666666666, 0.9, 0.8999999999999999, 0.8933333333333332, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.3, 2) => 0.9733333333333333
finished with 19
iteration 5 finished
generating 4 configurations using top 4 configurations, starting with 19)
[0.9733333333333333, 0.9666666666666667, 0.9666666666666667, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9199999999999999, 0.9133333333333332, 0.9133333333333332, 0.9133333333333332, 0.9066666666666666, 0.9, 0.8999999999999999, 0.8933333333333332, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.3, 2) => 0.9733333333333333
finished with 19
iteration 6 finished
generating 4 configurations using top 4 configurations, starting with 19)
[0.9733333333333333, 0.9666666666666667, 0.9666666666666667, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9199999999999999, 0.9133333333333332, 0.9133333333333332, 0.9133333333333332, 0.9066666666666666, 0.9, 0.8999999999999999, 0.8933333333333332, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.3, 2) => 0.9733333333333333
finished with 21
iteration 7 finished
*** starting iteration: 1; err: [Inf, 1.3203999966744226] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3203999966744226, 0.6099131147286166] ***
*** starting iteration: 2; err: [Inf, 1.3203999966744226, 0.6099131147286166] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3203999966744226, 0.6099131147286166, 0.5736798949224544] ***
*** starting iteration: 3; err: [Inf, 1.3203999966744226, 0.6099131147286166, 0.5736798949224544] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3203999966744226, 0.6099131147286166, 0.5736798949224544, 0.5671737523520218] ***
*** finished computation of 3 references, err: [Inf, 1.3203999966744226, 0.6099131147286166, 0.5736798949224544, 0.5671737523520218] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 9, 29]]
** centroid: 1, normalized-entropy: 0.7897492536625221, [(2, 9), (3, 29)]
*** center 2: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 25, 2]]
** centroid: 3, normalized-entropy: 0.38094658570539014, [(2, 25), (3, 2)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.373800006146639] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.373800006146639, 0.5608702844186477] ***
*** starting iteration: 2; err: [Inf, 1.373800006146639, 0.5608702844186477] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.373800006146639, 0.5608702844186477, 0.5402995850211483] ***
*** starting iteration: 3; err: [Inf, 1.373800006146639, 0.5608702844186477, 0.5402995850211483] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.373800006146639, 0.5608702844186477, 0.5402995850211483, 0.5366162282962236] ***
*** finished computation of 3 references, err: [Inf, 1.373800006146639, 0.5608702844186477, 0.5402995850211483, 0.5366162282962236] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 33, 8]]
** centroid: 1, normalized-entropy: 0.7120640548905481, [(2, 33), (3, 8)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 2, 27]]
** centroid: 2, normalized-entropy: 0.36205125173399805, [(2, 2), (3, 27)]
*** center 3: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9858999948318877] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9858999948318877, 0.5393713138069858] ***
*** starting iteration: 2; err: [Inf, 0.9858999948318877, 0.5393713138069858] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9858999948318877, 0.5393713138069858, 0.5247048384895464] ***
*** starting iteration: 3; err: [Inf, 0.9858999948318877, 0.5393713138069858, 0.5247048384895464] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9858999948318877, 0.5393713138069858, 0.5247048384895464, 0.5210198207509875] ***
*** finished computation of 3 references, err: [Inf, 0.9858999948318877, 0.5393713138069858, 0.5247048384895464, 0.5210198207509875] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 8, 34]]
** centroid: 1, normalized-entropy: 0.7024665512903904, [(2, 8), (3, 34)]
*** center 2: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.6165666381242545] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6165666381242545, 0.4109360663523549] ***
*** starting iteration: 2; err: [Inf, 0.6165666381242545, 0.4109360663523549] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6165666381242545, 0.4109360663523549, 0.3988603825565514] ***
*** starting iteration: 3; err: [Inf, 0.6165666381242545, 0.4109360663523549, 0.3988603825565514] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6165666381242545, 0.4109360663523549, 0.3988603825565514, 0.38148105830177387] ***
*** finished computation of 3 references, err: [Inf, 0.6165666381242545, 0.4109360663523549, 0.3988603825565514, 0.38148105830177387] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 34, 11]]
** centroid: 1, normalized-entropy: 0.80235344282919, [(2, 34), (3, 11)]
*** center 2: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7264242715298971] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7264242715298971, 0.47199260143769406] ***
*** starting iteration: 2; err: [Inf, 0.7264242715298971, 0.47199260143769406] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7264242715298971, 0.47199260143769406, 0.42008426166719803] ***
*** starting iteration: 3; err: [Inf, 0.7264242715298971, 0.47199260143769406, 0.42008426166719803] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7264242715298971, 0.47199260143769406, 0.42008426166719803, 0.39962588359632817] ***
*** finished computation of 3 references, err: [Inf, 0.7264242715298971, 0.47199260143769406, 0.42008426166719803, 0.39962588359632817] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 35, 10]]
** centroid: 1, normalized-entropy: 0.7642045065086204, [(2, 35), (3, 10)]
*** center 2: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 25]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7093216587208994] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7093216587208994, 0.37960800122781746] ***
*** starting iteration: 2; err: [Inf, 0.7093216587208994, 0.37960800122781746] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7093216587208994, 0.37960800122781746, 0.35465371480553315] ***
*** starting iteration: 3; err: [Inf, 0.7093216587208994, 0.37960800122781746, 0.35465371480553315] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7093216587208994, 0.37960800122781746, 0.35465371480553315, 0.34628141268668117] ***
*** finished computation of 3 references, err: [Inf, 0.7093216587208994, 0.37960800122781746, 0.35465371480553315, 0.34628141268668117] ***
*** center 1: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 25]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 31, 9]]
** centroid: 3, normalized-entropy: 0.7691928290130138, [(2, 31), (3, 9)]
finished with 4 centroids; started with 3
generating 4 configurations using top 4 configurations, starting with 21)
[0.9733333333333333, 0.9666666666666667, 0.9666666666666667, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9466666666666667, 0.9333333333333332, 0.9199999999999999, 0.9133333333333332, 0.9133333333333332, 0.9133333333333332, 0.9066666666666666, 0.9, 0.8999999999999999, 0.8933333333333332, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.3, 2) => 0.9733333333333333
finished with 22
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.6564000001474546] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6564000001474546, 0.3939620652119028] ***
*** starting iteration: 2; err: [Inf, 0.6564000001474546, 0.3939620652119028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6564000001474546, 0.3939620652119028, 0.3511117541836438] ***
*** starting iteration: 3; err: [Inf, 0.6564000001474546, 0.3939620652119028, 0.3511117541836438] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6564000001474546, 0.3939620652119028, 0.3511117541836438, 0.3250191569163408] ***
*** finished computation of 7 references, err: [Inf, 0.6564000001474546, 0.3939620652119028, 0.3511117541836438, 0.3250191569163408] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 13]]
*** center 2: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [4, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 13, 17]]
** centroid: 4, normalized-entropy: 0.9871377743721862, [(2, 13), (3, 17)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 21, 1]]
*** center 6: selecting labels [1] (freq >= 2) [from [18, 0, 0]]
*** center 7: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [1, 0, 0]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6659999994835829] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6659999994835829, 0.27725297875072785] ***
*** starting iteration: 2; err: [Inf, 0.6659999994835829, 0.27725297875072785] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6659999994835829, 0.27725297875072785, 0.25941521384304456] ***
*** starting iteration: 3; err: [Inf, 0.6659999994835829, 0.27725297875072785, 0.25941521384304456] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6659999994835829, 0.27725297875072785, 0.25941521384304456, 0.2451185189738592] ***
*** finished computation of 7 references, err: [Inf, 0.6659999994835829, 0.27725297875072785, 0.25941521384304456, 0.2451185189738592] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 3, 8]]
** centroid: 1, normalized-entropy: 0.8453509366224364, [(2, 3), (3, 8)]
*** center 2: selecting labels [1] (freq >= 2) [from [23, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 20]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 16, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [7, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 16, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.8470999996902333] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8470999996902333, 0.45503492683198987] ***
*** starting iteration: 2; err: [Inf, 0.8470999996902333, 0.45503492683198987] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8470999996902333, 0.45503492683198987, 0.3657580604961855] ***
*** starting iteration: 3; err: [Inf, 0.8470999996902333, 0.45503492683198987, 0.3657580604961855] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.8470999996902333, 0.45503492683198987, 0.3657580604961855, 0.32149709153802264] ***
*** finished computation of 7 references, err: [Inf, 0.8470999996902333, 0.45503492683198987, 0.3657580604961855, 0.32149709153802264] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 23, 10]]
** centroid: 1, normalized-entropy: 0.8849636363831529, [(2, 23), (3, 10)]
*** center 2: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [1, 0, 0]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 24]]
*** center 4: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [21, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 8, 0]]
*** center 7: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [1, 0, 0]
finished with 6 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 22)
[0.9733333333333333, 0.9666666666666667, 0.9666666666666667, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9333333333333332, 0.9199999999999999, 0.9133333333333332, 0.9133333333333332, 0.9133333333333332, 0.9066666666666666, 0.9, 0.8999999999999999, 0.8933333333333332, 0.8866666666666667]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.3, 2) => 0.9733333333333333
finished with 24
iteration 9 finished
*** starting iteration: 1; err: [Inf, 1.3164000136881118] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.3164000136881118, 0.906200245592026] ***
*** finished computation of 7 references, err: [Inf, 1.3164000136881118, 0.906200245592026] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 33, 31]]
** centroid: 1, normalized-entropy: 0.9992954443621548, [(2, 33), (3, 31)]
*** center 2: selecting labels [1] (freq >= 2) [from [4, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [11, 1, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [4, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [2, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [5, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5941000043481689] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5941000043481689, 0.27227084511829] ***
*** finished computation of 7 references, err: [Inf, 0.5941000043481689, 0.27227084511829] ***
*** center 1: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 10]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 19]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 15, 0]]
*** center 5: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [0, 1, 1]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 18, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
finished with 6 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.9096000021712972] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.9096000021712972, 0.47353649228418276] ***
*** finished computation of 7 references, err: [Inf, 0.9096000021712972, 0.47353649228418276] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 21, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 10, 34]]
** centroid: 2, normalized-entropy: 0.7732266742876346, [(2, 10), (3, 34)]
*** center 3: selecting labels [1] (freq >= 2) [from [2, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 7: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [1, 0, 0]
finished with 6 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6406958375627176] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6406958375627176, 0.32719440637685265] ***
*** finished computation of 7 references, err: [Inf, 0.6406958375627176, 0.32719440637685265] ***
*** center 1: selecting labels [1] (freq >= 2) [from [18, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [8, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 29, 6]]
** centroid: 3, normalized-entropy: 0.6609623351442084, [(2, 29), (3, 6)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 5, 25]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 25)]
*** center 5: selecting labels [1] (freq >= 2) [from [4, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [5, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.46384130243335436] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.46384130243335436, 0.21150256868204362] ***
*** finished computation of 7 references, err: [Inf, 0.46384130243335436, 0.21150256868204362] ***
*** center 1: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 15, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 19]]
*** center 4: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 2, 7]]
** centroid: 5, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 18, 1]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7884912335658192] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7884912335658192, 0.40384324354202183] ***
*** finished computation of 7 references, err: [Inf, 0.7884912335658192, 0.40384324354202183] ***
*** center 1: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 3, 32]]
** centroid: 2, normalized-entropy: 0.4220005168831531, [(2, 3), (3, 32)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 27, 2]]
** centroid: 3, normalized-entropy: 0.36205125173399805, [(2, 27), (3, 2)]
*** center 4: selecting labels [1] (freq >= 2) [from [5, 1, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [6, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
*** center 7: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [1, 0, 0]
finished with 6 centroids; started with 7
[ Info: ========== BEST MODEL ==========
[ Info: (AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.3, 2), 0.9733333333333333)
[ Info: AKNC{Array{Float64,1}}[AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[5.605882352941176, 2.564705882352941, 4.011764705882353, 1.2294117647058826], [6.374999999999999, 2.925, 4.65, 1.45625], [6.2250000000000005, 2.75, 4.949999999999999, 1.75], [5.671428571428571, 2.657142857142857, 5.042857142857144, 1.9], [6.910000000000001, 3.1450000000000005, 5.84, 2.145], [4.822222222222223, 3.2222222222222223, 1.4555555555555557, 0.2333333333333334], [5.675, 4.1, 1.4500000000000002, 0.275], [5.230769230769231, 3.7076923076923074, 1.5538461538461539, 0.31538461538461543]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2, 2, 3, 3, 3, 1, 1, 1], 3), KCenters.var"#fun#70"{SimilaritySearch.var"#_lp#1"{Float64}}(SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25)), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.3, 2)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[7.6499999999999995, 3.266666666666666, 6.483333333333333, 2.216666666666667], [6.466666666666667, 3.02, 4.6, 1.4533333333333334], [6.67, 3.0900000000000003, 5.6, 2.165], [5.25, 3.6857142857142855, 1.457142857142857, 0.2571428571428571], [4.6875, 3.05625, 1.4000000000000001, 0.18750000000000006], [6.0, 2.675, 4.625, 1.425], [5.928571428571428, 2.6999999999999997, 5.0, 1.8142857142857143], [5.538888888888889, 2.627777777777778, 3.927777777777778, 1.2055555555555557]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [3, 2, 3, 1, 1, 2, 3, 2], 3), KCenters.var"#fun#70"{SimilaritySearch.var"#_lp#1"{Float64}}(SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25)), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.3, 2)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[5.499999999999999, 2.6631578947368424, 3.905263157894737, 1.2210526315789474], [4.6499999999999995, 3.3833333333333333, 1.25, 0.21666666666666667], [6.333333333333335, 2.9499999999999997, 4.575, 1.4666666666666668], [6.234999999999999, 2.835, 5.1899999999999995, 1.8799999999999997], [7.085714285714286, 3.05, 5.985714285714286, 2.0642857142857145], [4.8374999999999995, 3.1625, 1.5125000000000002, 0.21875000000000003], [5.341666666666666, 3.641666666666666, 1.5166666666666666, 0.2916666666666667]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2, 1, 2, 3, 3, 1, 1], 3), KCenters.var"#fun#70"{SimilaritySearch.var"#_lp#1"{Float64}}(SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25)), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.3, 2))]
Test Summary: | Pass  Total
AKNC          |    1      1
[84, 5, 1, 6, 8, 19, 3, 29, 12, 27, 10, 22, 32, 38, 33, 2, 23, 18, 16, 22, 12, 32, 1, 19, 39, 20, 29, 6, 41, 21, 45, 28, 49, 26, 33, 29, 15, 19, 51, 2, 27, 43, 50, 39, 18, 28, 41, 40, 35, 20, 44, 19, 30, 25, 31, 26, 23, 33, 48, 51, 36, 36, 34, 35, 26, 28, 52, 44, 41, 62, 21, 4, 32, 41, 20, 34, 28, 45, 43, 24, 45, 33, 30, 34, 36, 22, 24, 47, 49, 65, 41, 1, 28, 29, 25, 49, 34, 53, 61, 35, 27, 26, 30, 17, 29, 24, 31, 41, 45, 38, 15, 25, 39, 51, 55, 35, 21, 30, 41, 14, 47, 56, 41, 54, 1, 38, 41, 33, 36, 51, 33, 36, 35, 45, 28, 30, 36, 26, 1, 13, 29, 42, 17, 35, 31, 31, 32, 57, 37, 28, 24, 17, 2, 54, 23, 48, 49, 21, 32, 34, 37, 34, 30, 32, 46, 35, 31, 25, 56, 27, 46, 39, 16, 28, 45, 33, 14, 38, 51, 53, 41, 33, 15, 39, 36, 29, 44, 68, 24, 43, 54, 41, 34, 30, 27, 31, 2, 66, 13, 30, 27, 34, 39, 37, 33, 2, 21, 1, 31, 35, 48, 37, 43, 24, 59, 66, 10, 45, 27, 39, 30, 40, 32, 32, 40, 36, 43, 21, 11, 29, 30, 48, 19, 91, 27, 47, 44, 25, 58, 1, 49, 48, 40, 32, 48, 38, 17, 45, 36, 30, 43, 49, 31, 24, 28, 39, 38, 46, 20, 27, 14, 27, 25, 52, 30, 25, 27, 54, 71, 26, 47, 34, 31, 40, 36, 43, 34, 27, 1, 53, 19, 31, 53, 57, 44, 49, 38, 38, 36, 29, 28, 22, 44, 48, 46, 35, 46, 73, 46, 32]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6300000000000002, speedup = 0.37423089340897564, eval_ratio = 0.041533999999999995)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.3932291666666669,"recall":0.3932291666666669,"f1":null,"seconds":7.473863661289215e-5,"exhaustive_search_seconds":0.0004858747124671936,"evaluations":338.546875,"distances_sum":1808.238246477523}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5390624999999999,"recall":0.5390624999999999,"f1":null,"seconds":0.0001057647168636322,"exhaustive_search_seconds":0.0004858747124671936,"evaluations":374.7890625,"distances_sum":1699.661564874953}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6467013888888886,"recall":0.6467013888888886,"f1":0.6467013888888886,"seconds":0.00013935379683971405,"exhaustive_search_seconds":0.0004858747124671936,"evaluations":413.828125,"distances_sum":1652.9445458015612}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7230902777777772,"recall":0.7230902777777772,"f1":0.7230902777777772,"seconds":0.00017854012548923492,"exhaustive_search_seconds":0.0004858747124671936,"evaluations":452.9453125,"distances_sum":1627.2329434573403}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7855902777777772,"recall":0.7855902777777772,"f1":0.7855902777777772,"seconds":0.00019595399498939514,"exhaustive_search_seconds":0.0004858747124671936,"evaluations":492.125,"distances_sum":1611.0171985505563}
KCenters.DeloneInvIndex> reached performance {"precision":0.8385416666666659,"recall":0.8385416666666659,"f1":0.8385416666666659,"seconds":0.00023443251848220825,"exhaustive_search_seconds":0.0004858747124671936,"evaluations":533.046875,"distances_sum":1600.300154509584}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.814, speedup = 1.6715836749830033, eval_ratio = 0.053104)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
   Testing KCenters tests passed 
