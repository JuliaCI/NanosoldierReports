Julia Version 1.5.0-DEV.158
Commit ed177d17d6 (2020-01-27 16:45 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

 Resolving package versions...
 Installed SortingAlgorithms ─────────── v0.3.1
 Installed Parsers ───────────────────── v0.3.10
 Installed Tables ────────────────────── v0.2.11
 Installed KCenters ──────────────────── v0.1.9
 Installed Compat ────────────────────── v3.2.0
 Installed MLLabelUtils ──────────────── v0.5.1
 Installed MLDataPattern ─────────────── v0.5.0
 Installed SimilaritySearch ──────────── v0.3.17
 Installed OrderedCollections ────────── v1.1.0
 Installed IteratorInterfaceExtensions ─ v1.0.0
 Installed Missings ──────────────────── v0.4.3
 Installed DataValueInterfaces ───────── v1.0.0
 Installed MappedArrays ──────────────── v0.2.2
 Installed StatsBase ─────────────────── v0.32.0
 Installed DataStructures ────────────── v0.17.9
 Installed MLDataUtils ───────────────── v0.5.0
 Installed JSON ──────────────────────── v0.21.0
 Installed PooledArrays ──────────────── v0.5.3
 Installed CategoricalArrays ─────────── v0.7.7
 Installed DataAPI ───────────────────── v1.1.0
 Installed Reexport ──────────────────── v0.2.0
 Installed TableTraits ───────────────── v1.0.0
 Installed InvertedIndices ───────────── v1.0.0
 Installed DataFrames ────────────────── v0.20.0
 Installed LearnBase ─────────────────── v0.2.2
  Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.1.9
  Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.2.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.0
  [864edb3b] + DataStructures v0.17.9
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.1.9
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.10
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.17
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v0.2.11
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
   Testing KCenters
  Updating `/tmp/jl_lwoBxp/Project.toml`
 [no changes]
  Updating `/tmp/jl_lwoBxp/Manifest.toml`
 [no changes]
Running sandbox
Status `/tmp/jl_lwoBxp/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.1.9
  [cc2ba9b6] MLDataUtils v0.5.0
  [053f045d] SimilaritySearch v0.3.17
  [2913bbd2] StatsBase v0.32.0
  [8bb1440f] DelimitedFiles 
  [8ba89e20] Distributed 
  [37e2e46d] LinearAlgebra 
  [9a3f8284] Random 
  [2f01184e] SparseArrays 
  [8dfed614] Test 
Test Summary: | Pass  Total
Scores        |    9      9
[ Info: 144.96999999999997
[ Info: 72.17000000000002
[ Info: 40.78999999999999
[ Info: 24.250000000000007
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 313.64000338064864
[ Info: 547.7199992669996
[ Info: 146.2399983987154
[ Info: 76.6400011840614
Test Summary:        |
Clustering with dnet | No tests
inertia(cfft.distances) = 18.661931180798724
inertia(cdnet.distances) = 23.397999947766287
inertia(crand.distances) = 20.247107452166134
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.8688790376290383,"seconds":6.249174475669861e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":8.3828125,"distances_sum":2118.9495052382485}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6767578125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6767578125,"f1":0.7957427988677997,"seconds":5.234032869338989e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":7.9609375,"distances_sum":1764.9036735909822}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5732421875, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5732421875,"f1":0.7121404637029642,"seconds":4.51505184173584e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":6.890625,"distances_sum":1459.39617409224}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.78125,"f1":0.8688790376290383,"seconds":6.249174475669861e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":8.3828125,"distances_sum":2118.9495052382485}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9258673618048624,"seconds":5.424022674560547e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":8.7421875,"distances_sum":2453.8431811909827}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9630265567765575,"seconds":5.999580025672913e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":8.9609375,"distances_sum":2727.6728702679306}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9381410256410263,"seconds":5.2638351917266846e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":8.7734375,"distances_sum":2540.5029387081922}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9310611263736269,"seconds":5.969777703285217e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":8.75,"distances_sum":2484.153684352254}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9477709790209795,"seconds":5.8319419622421265e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":8.7890625,"distances_sum":2615.391440797417}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9358688186813192,"seconds":5.999580025672913e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":8.8046875,"distances_sum":2526.7594277051376}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9630265567765575,"seconds":5.999580025672913e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":8.9609375,"distances_sum":2727.6728702679306}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9783310439560442,"seconds":6.7390501499176025e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":8.953125,"distances_sum":2866.102992386139}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":11,"bsize":10}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9772321428571433,"seconds":6.346032023429871e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":8.9453125,"distances_sum":2846.104730020098}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9654590201465209,"seconds":6.370246410369873e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":8.9296875,"distances_sum":2735.961751445355}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9692021520146523,"seconds":6.658956408500671e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":8.9296875,"distances_sum":2793.9564712502265}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9627664002664009,"seconds":6.282702088356018e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":8.8828125,"distances_sum":2740.6858565997013}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9660370879120884,"seconds":6.008893251419067e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":8.8828125,"distances_sum":2776.1655708806525}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9609375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9783310439560442,"seconds":6.7390501499176025e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":8.953125,"distances_sum":2866.102992386139}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9609375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9783310439560442,"seconds":6.7390501499176025e-6,"exhaustive_search_seconds":1.560896635055542e-6,"evaluations":8.953125,"distances_sum":2866.102992386139}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69921875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.69921875,"f1":0.8153913794538802,"seconds":4.8317015171051025e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.703125,"distances_sum":1688.5955314381138}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.18359375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.18359375,"f1":null,"seconds":3.3639371395111084e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":5.265625,"distances_sum":429.19402141908887}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.69921875,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.69921875,"f1":0.8153913794538802,"seconds":4.8317015171051025e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.703125,"distances_sum":1688.5955314381138}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8212890625,"f1":0.8967121420246427,"seconds":5.820766091346741e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.3515625,"distances_sum":2027.25985965986}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8212890625,"state":{"ssize":6,"bsize":6},"perf":{"precision":1.0,"recall":0.8212890625,"f1":0.8967121420246427,"seconds":5.820766091346741e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.3515625,"distances_sum":2027.25985965986}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9496508699633704,"seconds":5.448237061500549e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.6875,"distances_sum":2442.49407355316}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.912109375,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9496508699633704,"seconds":5.448237061500549e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.6875,"distances_sum":2442.49407355316}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.912109375,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9496508699633704,"seconds":5.448237061500549e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.6875,"distances_sum":2442.49407355316}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3701171875, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.3701171875,"f1":null,"seconds":3.4533441066741943e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":5.4296875,"distances_sum":920.6055113221654}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5302734375, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5302734375,"f1":0.6768273393273396,"seconds":4.116445779800415e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":6.640625,"distances_sum":1307.7692186495026}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1494140625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1494140625,"f1":null,"seconds":3.1087547540664673e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":4.46875,"distances_sum":398.65628804293465}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6611328125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6611328125,"f1":0.7866570929070937,"seconds":4.47593629360199e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":7.5703125,"distances_sum":1604.4037479513336}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6611328125,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6611328125,"f1":0.7866570929070937,"seconds":4.47593629360199e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":7.5703125,"distances_sum":1604.4037479513336}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7470703125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7470703125,"f1":0.8454389360639367,"seconds":5.073845386505127e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":7.984375,"distances_sum":1929.40956458359}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.732421875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.732421875,"f1":0.8357694388944397,"seconds":5.025416612625122e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":7.8984375,"distances_sum":1883.0027300264485}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7373046875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7373046875,"f1":0.8409522768897778,"seconds":5.11854887008667e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":7.8203125,"distances_sum":1929.7035581837927}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7470703125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7470703125,"f1":0.8454389360639367,"seconds":5.073845386505127e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":7.984375,"distances_sum":1929.40956458359}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.9114588536463542,"seconds":5.435198545455933e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.515625,"distances_sum":2298.9988914500755}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9522722069597075,"seconds":5.76116144657135e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.7578125,"distances_sum":2528.648585681171}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9380328005328014,"seconds":5.582347512245178e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.6796875,"distances_sum":2458.93491833784}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9432952464202468,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.75,"distances_sum":2461.6807015911763}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.8990702006327014,"seconds":5.422160029411316e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.4921875,"distances_sum":2167.6782874107957}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9538347069597075,"seconds":5.496665835380554e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.75,"distances_sum":2563.532194390284}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9538347069597075,"seconds":5.496665835380554e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.75,"distances_sum":2563.532194390284}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91796875,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9538347069597075,"seconds":5.496665835380554e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.75,"distances_sum":2563.532194390284}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2421875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2421875,"f1":null,"seconds":3.4943222999572754e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":7.2265625,"distances_sum":556.358772952097}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4443359375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4443359375,"f1":null,"seconds":4.015862941741943e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":7.5078125,"distances_sum":1019.9479312305673}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4443359375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.4443359375,"f1":null,"seconds":4.015862941741943e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":7.5078125,"distances_sum":1019.9479312305673}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.58984375, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.58984375,"f1":0.727869873182374,"seconds":4.563480615615845e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":7.9375,"distances_sum":1318.780287587117}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8682978479853488,"seconds":5.457550287246704e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.7734375,"distances_sum":1890.0359359419847}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7197265625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7197265625,"f1":0.8282290626040634,"seconds":4.932284355163574e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.328125,"distances_sum":1721.6762232325736}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6142578125, conf: {"ssize":7,"bsize":3}, perf: {"precision":1.0,"recall":0.6142578125,"f1":0.7498116466866473,"seconds":4.598870873451233e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.0234375,"distances_sum":1434.1413437511296}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8605347777222785,"seconds":5.273148417472839e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.78125,"distances_sum":1854.9650391112195}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.77734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.77734375,"f1":0.8682978479853488,"seconds":5.457550287246704e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.7734375,"distances_sum":1890.0359359419847}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.8962230477855486,"seconds":5.990266799926758e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9453125,"distances_sum":2067.267774378854}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9446485805860813,"seconds":6.036832928657532e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.984375,"distances_sum":2358.601249964229}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.963175366300367,"seconds":6.115064024925232e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9921875,"distances_sum":2495.2390426763136}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9662030677655681,"seconds":6.275251507759094e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9609375,"distances_sum":2519.6997226233866}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9091434607059614,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.96875,"distances_sum":2133.575772865848}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.787109375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.787109375,"f1":0.8757700632700643,"seconds":5.466863512992859e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.7890625,"distances_sum":1935.961452775757}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9662030677655681,"seconds":6.275251507759094e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9609375,"distances_sum":2519.6997226233866}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9662030677655681,"seconds":6.275251507759094e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9609375,"distances_sum":2519.6997226233866}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7919921875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7919921875,"f1":0.87790750915751,"seconds":5.116686224937439e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.7890625,"distances_sum":1983.2381464935404}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7919921875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7919921875,"f1":0.87790750915751,"seconds":5.116686224937439e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.7890625,"distances_sum":1983.2381464935404}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8623046875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8623046875,"f1":0.9204904470529476,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.96875,"distances_sum":2227.4754390892876}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9585451007326011,"seconds":5.9176236391067505e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.953125,"distances_sum":2490.092695073067}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.83203125,"f1":0.9024896978021986,"seconds":5.7015568017959595e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.9609375,"distances_sum":2066.959476624493}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9585451007326011,"seconds":5.9176236391067505e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.953125,"distances_sum":2490.092695073067}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9790922619047622,"seconds":6.2659382820129395e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.9921875,"distances_sum":2655.7691341670175}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9600675366300369,"seconds":6.146728992462158e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.921875,"distances_sum":2528.874511780772}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9609775641025646,"seconds":6.068497896194458e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.96875,"distances_sum":2508.749389704616}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9790922619047622,"seconds":6.2659382820129395e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.9921875,"distances_sum":2655.7691341670175}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9790922619047622,"seconds":6.2659382820129395e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.9921875,"distances_sum":2655.7691341670175}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.494140625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.494140625,"f1":null,"seconds":4.034489393234253e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":6.1953125,"distances_sum":1178.76275374233}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.494140625,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.494140625,"f1":null,"seconds":4.034489393234253e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":6.1953125,"distances_sum":1178.76275374233}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.8497039418914427,"seconds":5.256384611129761e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.015625,"distances_sum":1800.6615682376314}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84765625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.84765625,"f1":0.9124973984348994,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.3046875,"distances_sum":2112.173195127977}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7470703125, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7470703125,"f1":0.8419060106560116,"seconds":5.403533577919006e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":7.90625,"distances_sum":1797.4717499372114}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8514235764235772,"seconds":5.217269062995911e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.09375,"distances_sum":1807.1814350319012}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.84765625,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.84765625,"f1":0.9124973984348994,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.3046875,"distances_sum":2112.173195127977}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9216288919413927,"seconds":6.230548024177551e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.578125,"distances_sum":2190.015687153472}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9299049908424916,"seconds":5.5264681577682495e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.640625,"distances_sum":2211.206593545867}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9334764194139201,"seconds":5.5693089962005615e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.546875,"distances_sum":2320.0570282734525}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9523523351648355,"seconds":6.1783939599990845e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.734375,"distances_sum":2406.2283781488045}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9525526556776561,"seconds":5.748122930526733e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.7265625,"distances_sum":2381.8456824612385}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":9,"bsize":9},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9523523351648355,"seconds":6.1783939599990845e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.734375,"distances_sum":2406.2283781488045}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.916015625,"state":{"ssize":9,"bsize":9},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9523523351648355,"seconds":6.1783939599990845e-6,"exhaustive_search_seconds":1.5068799257278442e-6,"evaluations":8.734375,"distances_sum":2406.2283781488045}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5791015625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5791015625,"f1":0.718495740370741,"seconds":4.557892680168152e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":7.3046875,"distances_sum":1248.6931912959813}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8554060522810532,"seconds":5.727633833885193e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.4609375,"distances_sum":1785.0480421572238}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8577302905427914,"seconds":5.552545189857483e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.5078125,"distances_sum":1807.259450526316}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7607421875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7607421875,"f1":0.8577302905427914,"seconds":5.552545189857483e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.5078125,"distances_sum":1807.259450526316}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9333447802197808,"seconds":5.776062607765198e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.890625,"distances_sum":2236.017858870439}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9659855769230773,"seconds":6.012618541717529e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.953125,"distances_sum":2477.528216436769}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9560325091575098,"seconds":6.0908496379852295e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.96875,"distances_sum":2394.5009049197006}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9590086996337002,"seconds":6.034970283508301e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.9453125,"distances_sum":2439.2063049593216}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9627632783882789,"seconds":6.120651960372925e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.96875,"distances_sum":2460.807336904794}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9351133241758246,"seconds":5.718320608139038e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.859375,"distances_sum":2297.1461632468254}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.941208791208792,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.8984375,"distances_sum":2311.8172528816317}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9659855769230773,"seconds":6.012618541717529e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.953125,"distances_sum":2477.528216436769}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.970703125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.970703125,"f1":0.9841517857142859,"seconds":6.144866347312927e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.9921875,"distances_sum":2619.4403925458164}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.969608516483517,"seconds":6.087124347686768e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.96875,"distances_sum":2497.3635085049464}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96484375, conf: {"ssize":12,"bsize":11}, perf: {"precision":1.0,"recall":0.96484375,"f1":0.9807291666666667,"seconds":6.12996518611908e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.9765625,"distances_sum":2582.5631427747744}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9676968864468868,"seconds":7.798895239830017e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.96875,"distances_sum":2503.166006023401}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9677734375, conf: {"ssize":8,"bsize":12}, perf: {"precision":1.0,"recall":0.9677734375,"f1":0.9824233058608062,"seconds":6.141141057014465e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.9921875,"distances_sum":2591.270872538133}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9775390625, conf: {"ssize":9,"bsize":12}, perf: {"precision":1.0,"recall":0.9775390625,"f1":0.9877232142857143,"seconds":6.120651960372925e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":9.0,"distances_sum":2636.712967380602}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.966796875, conf: {"ssize":8,"bsize":13}, perf: {"precision":1.0,"recall":0.966796875,"f1":0.9819940476190478,"seconds":7.7076256275177e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":9.0,"distances_sum":2587.4461387675783}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9775390625,"state":{"ssize":9,"bsize":12},"perf":{"precision":1.0,"recall":0.9775390625,"f1":0.9877232142857143,"seconds":6.120651960372925e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":9.0,"distances_sum":2636.712967380602}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9775390625,"state":{"ssize":9,"bsize":12},"perf":{"precision":1.0,"recall":0.9775390625,"f1":0.9877232142857143,"seconds":6.120651960372925e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":9.0,"distances_sum":2636.712967380602}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.552734375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.552734375,"f1":0.6946357461982468,"seconds":4.101544618606567e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.03125,"distances_sum":1271.2567904811408}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.552734375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.552734375,"f1":0.6946357461982468,"seconds":4.101544618606567e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.03125,"distances_sum":1271.2567904811408}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.681640625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.681640625,"f1":0.8016983016983027,"seconds":4.693865776062012e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.78125,"distances_sum":1606.797882248278}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9219093406593413,"seconds":5.373731255531311e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.5,"distances_sum":2200.748358230626}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.8995566933066936,"seconds":5.386769771575928e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.4453125,"distances_sum":2078.4628354273236}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6865234375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6865234375,"f1":0.8032186563436572,"seconds":4.757195711135864e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.7421875,"distances_sum":1629.6825694636898}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.865234375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.865234375,"f1":0.9219093406593413,"seconds":5.373731255531311e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.5,"distances_sum":2200.748358230626}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9591975732600737,"seconds":5.794689059257507e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.859375,"distances_sum":2463.920841735192}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9720810439560444,"seconds":6.195157766342163e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8828125,"distances_sum":2559.4963599851353}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9641197344322348,"seconds":5.673617124557495e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8671875,"distances_sum":2529.113567838276}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9399095695970701,"seconds":5.448237061500549e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.6796875,"distances_sum":2396.518025604239}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.935685668498169,"seconds":5.476176738739014e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.5625,"distances_sum":2310.1782482774115}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9720810439560444,"seconds":6.195157766342163e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8828125,"distances_sum":2559.4963599851353}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9720810439560444,"seconds":6.195157766342163e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.8828125,"distances_sum":2559.4963599851353}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.251953125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.251953125,"f1":null,"seconds":3.4905970096588135e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":5.9296875,"distances_sum":452.6485321720825}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.255859375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.255859375,"f1":null,"seconds":3.5017728805541992e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":5.8828125,"distances_sum":540.1732285548677}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.255859375,"state":{"ssize":4,"bsize":1},"perf":{"precision":null,"recall":0.255859375,"f1":null,"seconds":3.5017728805541992e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":5.8828125,"distances_sum":540.1732285548677}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.671875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.671875,"f1":0.7931365509490518,"seconds":4.5318156480789185e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.6796875,"distances_sum":1203.9133149777895}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.8655079295704304,"seconds":5.0086528062820435e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.0546875,"distances_sum":1461.3058136676234}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7734375,"state":{"ssize":8,"bsize":5},"perf":{"precision":1.0,"recall":0.7734375,"f1":0.8655079295704304,"seconds":5.0086528062820435e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.0546875,"distances_sum":1461.3058136676234}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9455299908424912,"seconds":5.487352609634399e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.703125,"distances_sum":1851.2698645663816}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9580586080586084,"seconds":5.461275577545166e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8203125,"distances_sum":1897.0460505693716}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9063249250749258,"seconds":5.217269062995911e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.2109375,"distances_sum":1648.34706194701}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.84375,"f1":0.9085424991674999,"seconds":5.174428224563599e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.125,"distances_sum":1648.003462267952}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9580586080586084,"seconds":5.461275577545166e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8203125,"distances_sum":1897.0460505693716}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9248046875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9580586080586084,"seconds":5.461275577545166e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8203125,"distances_sum":1897.0460505693716}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8579618298368308,"seconds":5.193054676055908e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.859375,"distances_sum":1459.0519187611972}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69921875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.69921875,"f1":0.813072691197692,"seconds":4.5709311962127686e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.796875,"distances_sum":1335.9019504008718}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7626953125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7626953125,"f1":0.8579618298368308,"seconds":5.193054676055908e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.859375,"distances_sum":1459.0519187611972}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9442078754578759,"seconds":6.027519702911377e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.7578125,"distances_sum":1919.9328669677}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.8621810481185489,"seconds":4.978850483894348e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.0390625,"distances_sum":1507.8705985812683}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8684700715950722,"seconds":4.978850483894348e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.9296875,"distances_sum":1555.6263649516548}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.8650183150183158,"seconds":5.1371753215789795e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.8828125,"distances_sum":1499.7694877189228}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90234375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.9442078754578759,"seconds":6.027519702911377e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.7578125,"distances_sum":1919.9328669677}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9548019688644693,"seconds":5.837529897689819e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.8046875,"distances_sum":1936.4858851586032}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9548019688644693,"seconds":5.837529897689819e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.8046875,"distances_sum":1936.4858851586032}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.919921875,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9548019688644693,"seconds":5.837529897689819e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.8046875,"distances_sum":1936.4858851586032}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3896484375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3896484375,"f1":null,"seconds":3.7401914596557617e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":5.734375,"distances_sum":746.4657015181848}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6806640625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6806640625,"f1":0.7962754259629268,"seconds":4.881992936134338e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":7.3671875,"distances_sum":1370.1135207229643}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.853125520313021,"seconds":4.936009645462036e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":7.7421875,"distances_sum":1575.7660109380363}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.755859375,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.755859375,"f1":0.853125520313021,"seconds":4.936009645462036e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":7.7421875,"distances_sum":1575.7660109380363}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8607923326673336,"seconds":5.057081580162048e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":7.796875,"distances_sum":1575.7713371325988}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.84375,"f1":0.9087199259074267,"seconds":5.271285772323608e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.34375,"distances_sum":1788.0740144041595}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.84375,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.84375,"f1":0.9087199259074267,"seconds":5.271285772323608e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.34375,"distances_sum":1788.0740144041595}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9737351190476193,"seconds":5.9623271226882935e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.875,"distances_sum":2176.971445100082}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9641597985347987,"seconds":5.772337317466736e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.8984375,"distances_sum":2103.6241551124576}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9511217948717954,"seconds":5.513429641723633e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.734375,"distances_sum":2069.2816612974507}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9737351190476193,"seconds":5.9623271226882935e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.875,"distances_sum":2176.971445100082}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9737351190476193,"seconds":5.9623271226882935e-6,"exhaustive_search_seconds":1.6335397958755493e-6,"evaluations":8.875,"distances_sum":2176.971445100082}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2119140625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2119140625,"f1":null,"seconds":3.285706043243408e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":5.3984375,"distances_sum":440.6449058292306}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6728515625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6728515625,"f1":0.7915490759240766,"seconds":4.682689905166626e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":7.5859375,"distances_sum":1235.5673480061205}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.369140625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.369140625,"f1":null,"seconds":3.6954879760742188e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":5.4296875,"distances_sum":698.1540436575725}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6728515625,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6728515625,"f1":0.7915490759240766,"seconds":4.682689905166626e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":7.5859375,"distances_sum":1235.5673480061205}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.857421875, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.857421875,"f1":0.9158258408258413,"seconds":5.8766454458236694e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.5390625,"distances_sum":1790.1621203760956}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.854628184315685,"seconds":5.343928933143616e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":7.9140625,"distances_sum":1466.4680191270418}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.8639688436563445,"seconds":5.234032869338989e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":7.921875,"distances_sum":1490.641493377278}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.68359375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.68359375,"f1":0.7981433497058505,"seconds":4.742294549942017e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":7.5703125,"distances_sum":1321.0189752582294}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.857421875,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.857421875,"f1":0.9158258408258413,"seconds":5.8766454458236694e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.5390625,"distances_sum":1790.1621203760956}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9402789918414922,"seconds":5.455687642097473e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.703125,"distances_sum":1911.9405400764804}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.968137591575092,"seconds":5.790963768959045e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.8671875,"distances_sum":2067.0398582346934}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9510874542124549,"seconds":5.580484867095947e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.7421875,"distances_sum":1965.5765928948954}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9448603479853483,"seconds":5.453824996948242e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.6640625,"distances_sum":1964.461173239911}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":12,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9589717574092578,"seconds":5.798414349555969e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.7890625,"distances_sum":2016.3061888579286}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9247143481518489,"seconds":4.971399903297424e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.53125,"distances_sum":1830.6233348390383}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.968137591575092,"seconds":5.790963768959045e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.8671875,"distances_sum":2067.0398582346934}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.968137591575092,"seconds":5.790963768959045e-6,"exhaustive_search_seconds":1.4938414096832275e-6,"evaluations":8.8671875,"distances_sum":2067.0398582346934}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8701043747918755,"seconds":5.0924718379974365e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.8671875,"distances_sum":1538.3691866509566}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.205078125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.205078125,"f1":null,"seconds":3.3639371395111084e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":5.484375,"distances_sum":439.69138827807853}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1923828125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1923828125,"f1":null,"seconds":3.3192336559295654e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":5.34375,"distances_sum":391.73080923822664}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78515625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.78515625,"f1":0.8701043747918755,"seconds":5.0924718379974365e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.8671875,"distances_sum":1538.3691866509566}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78515625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.78515625,"f1":0.8701043747918755,"seconds":5.0924718379974365e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.8671875,"distances_sum":1538.3691866509566}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.78515625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.78515625,"f1":0.8701043747918755,"seconds":5.0924718379974365e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.8671875,"distances_sum":1538.3691866509566}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.33984375, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.33984375,"f1":null,"seconds":3.4365803003311157e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":5.6484375,"distances_sum":672.5342153350647}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.599609375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.599609375,"f1":0.73740460927961,"seconds":4.481524229049683e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.59375,"distances_sum":1222.8068495828738}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.599609375,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.599609375,"f1":0.73740460927961,"seconds":4.481524229049683e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.59375,"distances_sum":1222.8068495828738}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6220703125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6220703125,"f1":0.7530486874236882,"seconds":4.4852495193481445e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.6796875,"distances_sum":1302.037205406305}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9416011072261077,"seconds":5.4426491260528564e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.765625,"distances_sum":2116.693661531385}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.716796875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.716796875,"f1":0.8210771867021873,"seconds":4.969537258148193e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.2109375,"distances_sum":1583.692149814}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90234375,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.9416011072261077,"seconds":5.4426491260528564e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.765625,"distances_sum":2116.693661531385}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9585222069597076,"seconds":5.619600415229797e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.8671875,"distances_sum":2210.330953106131}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9516769688644695,"seconds":5.597248673439026e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.8671875,"distances_sum":2146.4238858781027}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9648466117216123,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.9296875,"distances_sum":2222.736808714173}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":9,"bsize":10}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9576496420246424,"seconds":5.85801899433136e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.84375,"distances_sum":2200.0801977292404}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9648466117216123,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.9296875,"distances_sum":2222.736808714173}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9648466117216123,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.9296875,"distances_sum":2222.736808714173}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5478515625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5478515625,"f1":0.692782911532912,"seconds":4.317611455917358e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.875,"distances_sum":1065.9949739548056}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5478515625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5478515625,"f1":0.692782911532912,"seconds":4.317611455917358e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.875,"distances_sum":1065.9949739548056}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7197265625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7197265625,"f1":0.8277399683649691,"seconds":4.794448614120483e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.8125,"distances_sum":1424.7795150929205}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7197265625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.7197265625,"f1":0.8277399683649691,"seconds":4.794448614120483e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.8125,"distances_sum":1424.7795150929205}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9522550366300371,"seconds":5.444511771202087e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.6328125,"distances_sum":2130.1951973177934}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9150390625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.9522550366300371,"seconds":5.444511771202087e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.6328125,"distances_sum":2130.1951973177934}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9150390625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.9522550366300371,"seconds":5.444511771202087e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.6328125,"distances_sum":2130.1951973177934}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6630859375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6630859375,"f1":0.7862099705849713,"seconds":4.937872290611267e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":7.8984375,"distances_sum":1320.026300025466}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6630859375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6630859375,"f1":0.7862099705849713,"seconds":4.937872290611267e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":7.8984375,"distances_sum":1320.026300025466}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9179835789210797,"seconds":5.718320608139038e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.8359375,"distances_sum":1830.3045414758792}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8511368839493849,"seconds":5.198642611503601e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.265625,"distances_sum":1517.4766386197587}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8642578125,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.8642578125,"f1":0.9179835789210797,"seconds":5.718320608139038e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.8359375,"distances_sum":1830.3045414758792}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.951476648351649,"seconds":5.9623271226882935e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.859375,"distances_sum":2013.1473247671056}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9452438186813196,"seconds":5.867332220077515e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.8515625,"distances_sum":1976.3562198480229}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.922427572427573,"seconds":5.463138222694397e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.8828125,"distances_sum":1816.8161143370382}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.951476648351649,"seconds":5.9623271226882935e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.859375,"distances_sum":2013.1473247671056}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9140625,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.951476648351649,"seconds":5.9623271226882935e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.859375,"distances_sum":2013.1473247671056}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8115234375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.8115234375,"f1":0.8870369214119221,"seconds":5.405396223068237e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.3828125,"distances_sum":1768.0022513498184}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8115234375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.8115234375,"f1":0.8870369214119221,"seconds":5.405396223068237e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.3828125,"distances_sum":1768.0022513498184}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.947567536630037,"seconds":5.83939254283905e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.8046875,"distances_sum":2134.640246908191}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.90625,"f1":0.947567536630037,"seconds":5.83939254283905e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.8046875,"distances_sum":2134.640246908191}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9660771520146526,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.9296875,"distances_sum":2211.3795912082646}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9695684523809527,"seconds":5.841255187988281e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.921875,"distances_sum":2237.320628617414}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9695684523809527,"seconds":5.841255187988281e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.921875,"distances_sum":2237.320628617414}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9695684523809527,"seconds":5.841255187988281e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.921875,"distances_sum":2237.320628617414}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.701171875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.701171875,"f1":0.8115041208791216,"seconds":4.699453711509705e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.9296875,"distances_sum":1427.7790941612232}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.701171875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.701171875,"f1":0.8115041208791216,"seconds":4.699453711509705e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":7.9296875,"distances_sum":1427.7790941612232}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.9238069222444231,"seconds":5.5711716413497925e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.421875,"distances_sum":1956.3251142037468}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8671875,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8671875,"f1":0.9238069222444231,"seconds":5.5711716413497925e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.421875,"distances_sum":1956.3251142037468}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9652243589743595,"seconds":5.956739187240601e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.8125,"distances_sum":2195.285020058837}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9741815476190481,"seconds":6.373971700668335e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.8671875,"distances_sum":2256.0283153675796}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9741815476190481,"seconds":6.373971700668335e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.8671875,"distances_sum":2256.0283153675796}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9741815476190481,"seconds":6.373971700668335e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.8671875,"distances_sum":2256.0283153675796}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.55078125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.55078125,"f1":0.6903469794094801,"seconds":4.4014304876327515e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":7.4765625,"distances_sum":1034.6741769389453}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.24609375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.24609375,"f1":null,"seconds":3.63960862159729e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":6.2109375,"distances_sum":452.22151508118947}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.55078125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.55078125,"f1":0.6903469794094801,"seconds":4.4014304876327515e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":7.4765625,"distances_sum":1034.6741769389453}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.920123626373627,"seconds":5.420297384262085e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.390625,"distances_sum":1837.5723409500006}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.863860098235099,"seconds":5.038455128669739e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.1640625,"distances_sum":1557.879568874841}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7939453125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7939453125,"f1":0.8786744505494515,"seconds":5.5693089962005615e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.2578125,"distances_sum":1600.019028939913}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8504880536130544,"seconds":5.02169132232666e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.15625,"distances_sum":1520.4354855255767}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.861328125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.861328125,"f1":0.920123626373627,"seconds":5.420297384262085e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.390625,"distances_sum":1837.5723409500006}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9649439102564107,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.8828125,"distances_sum":2117.526577267655}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9506009615384622,"seconds":5.666166543960571e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.8046875,"distances_sum":2025.703255584026}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8623046875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8623046875,"f1":0.9196917665667671,"seconds":5.301088094711304e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.390625,"distances_sum":1855.9427525229387}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.953725961538462,"seconds":5.7034194469451904e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.828125,"distances_sum":2065.46209656287}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9240759240759249,"seconds":5.671754479408264e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.421875,"distances_sum":1867.3563780267036}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9351278929403933,"seconds":5.694106221199036e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.4609375,"distances_sum":1903.5579314482761}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9649439102564107,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.8828125,"distances_sum":2117.526577267655}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9649439102564107,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.1567026376724243e-6,"evaluations":8.8828125,"distances_sum":2117.526577267655}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.36328125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.36328125,"f1":null,"seconds":3.6749988794326782e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":5.9140625,"distances_sum":651.2133992815278}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.36328125,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.36328125,"f1":null,"seconds":3.6749988794326782e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":5.9140625,"distances_sum":651.2133992815278}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7421875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7421875,"f1":0.8378812160062168,"seconds":4.950910806655884e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.328125,"distances_sum":1465.3713095347161}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.70703125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.70703125,"f1":0.8176781551781559,"seconds":4.86522912979126e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.1328125,"distances_sum":1315.2727702252516}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7421875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.7421875,"f1":0.8378812160062168,"seconds":4.950910806655884e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.328125,"distances_sum":1465.3713095347161}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9457532051282055,"seconds":5.597248673439026e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.828125,"distances_sum":1990.3753635981795}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7890625,"f1":0.8727517274392284,"seconds":5.241483449935913e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.3515625,"distances_sum":1582.144599039402}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90625,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.90625,"f1":0.9457532051282055,"seconds":5.597248673439026e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.828125,"distances_sum":1990.3753635981795}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.90625,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.90625,"f1":0.9457532051282055,"seconds":5.597248673439026e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.828125,"distances_sum":1990.3753635981795}}, n: 9
inertia(cfft.distances) = 18.661931013431015
inertia(cdnet.distances) = 21.786240141511154
inertia(crand.distances) = 24.870674242424258
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.9400000000000001
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9111111111111111
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8911111111111111
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.9
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.94
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9422222222222222
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.8866666666666667
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8911111111111111
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8777777777777778
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9422222222222222
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9311111111111111
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9244444444444445
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8911111111111111
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9311111111111111
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9177777777777777
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9333333333333332
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.888888888888889
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9311111111111111
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9466666666666667
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8955555555555555
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9466666666666667
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8822222222222221
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9066666666666667
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9066666666666666
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9111111111111111
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.86
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9133333333333334
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9155555555555556
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9088888888888889
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9066666666666667
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX===== rocchio like>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX==== clustering>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
nc.class_map = [1, 3, 3, 2, 3, 2, 1, 2, 3, 3, 3, 3, 2, 3, 1, 3, 1, 2, 1, 3, 3]
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 19, 1]]
** centroid: 12, normalized-entropy: 0.2863969571159561, [(2, 19), (3, 1)]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 3, 3, 1, 2]
acc = 0.92
*** starting iteration: 1; err: [Inf, 0.35453333580456053] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.35453333580456053, 0.18917570255323118] ***
*** starting iteration: 2; err: [Inf, 0.35453333580456053, 0.18917570255323118] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.35453333580456053, 0.18917570255323118, 0.1803677856084977] ***
*** starting iteration: 3; err: [Inf, 0.35453333580456053, 0.18917570255323118, 0.1803677856084977] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.35453333580456053, 0.18917570255323118, 0.1803677856084977, 0.1709699776887881] ***
*** starting iteration: 4; err: [Inf, 0.35453333580456053, 0.18917570255323118, 0.1803677856084977, 0.1709699776887881] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.35453333580456053, 0.18917570255323118, 0.1803677856084977, 0.1709699776887881, 0.16059817987546385] ***
*** starting iteration: 5; err: [Inf, 0.35453333580456053, 0.18917570255323118, 0.1803677856084977, 0.1709699776887881, 0.16059817987546385] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.35453333580456053, 0.18917570255323118, 0.1803677856084977, 0.1709699776887881, 0.16059817987546385, 0.15905360358839024] ***
*** starting iteration: 6; err: [Inf, 0.35453333580456053, 0.18917570255323118, 0.1803677856084977, 0.1709699776887881, 0.16059817987546385, 0.15905360358839024] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.35453333580456053, 0.18917570255323118, 0.1803677856084977, 0.1709699776887881, 0.16059817987546385, 0.15905360358839024, 0.15887631030848956] ***
*** finished computation of 12 references, err: [Inf, 0.35453333580456053, 0.18917570255323118, 0.1803677856084977, 0.1709699776887881, 0.16059817987546385, 0.15905360358839024, 0.15887631030848956] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 17, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 9, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 19, 1]]
** centroid: 12, normalized-entropy: 0.2863969571159561, [(2, 19), (3, 1)]
finished with 13 centroids; started with 12
acc = 0.9266666666666666
Test Summary:   | Pass  Total
NearestCentroid |   10     10
iteration 1 finished
*** starting iteration: 1; err: [Inf, 6.16739999220135] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 6.16739999220135, 2.708072928600062] ***
*** finished computation of 3 references, err: [Inf, 6.16739999220135, 2.708072928600062] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [34, 26, 5]]
** centroid: 1, normalized-entropy: 0.8217529830876902, [(1, 34), (2, 26), (3, 5)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 6, 25]]
** centroid: 2, normalized-entropy: 0.708835673332196, [(2, 6), (3, 25)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 3.7183999854805565] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.7183999854805565, 0.9358159372606895] ***
*** finished computation of 3 references, err: [Inf, 3.7183999854805565, 0.9358159372606895] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [36, 3, 0]]
** centroid: 1, normalized-entropy: 0.3912435636292556, [(1, 36), (2, 3)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 27, 27]]
** centroid: 2, normalized-entropy: 1.0, [(2, 27), (3, 27)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 3.370899984267796] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.370899984267796, 1.684957275491697] ***
*** finished computation of 3 references, err: [Inf, 3.370899984267796, 1.684957275491697] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 22, 26]]
** centroid: 1, normalized-entropy: 0.9949848281859699, [(2, 22), (3, 26)]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [30, 16, 0]]
** centroid: 3, normalized-entropy: 0.9321115676166747, [(1, 30), (2, 16)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.696058954417818] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.696058954417818, 0.7921509241981177] ***
*** starting iteration: 2; err: [Inf, 2.696058954417818, 0.7921509241981177] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.696058954417818, 0.7921509241981177, 0.409577321819239] ***
*** starting iteration: 3; err: [Inf, 2.696058954417818, 0.7921509241981177, 0.409577321819239] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.696058954417818, 0.7921509241981177, 0.409577321819239, 0.3919899984492832] ***
*** starting iteration: 4; err: [Inf, 2.696058954417818, 0.7921509241981177, 0.409577321819239, 0.3919899984492832] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.696058954417818, 0.7921509241981177, 0.409577321819239, 0.3919899984492832, 0.3904620547367803] ***
*** starting iteration: 5; err: [Inf, 2.696058954417818, 0.7921509241981177, 0.409577321819239, 0.3919899984492832, 0.3904620547367803] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.696058954417818, 0.7921509241981177, 0.409577321819239, 0.3919899984492832, 0.3904620547367803, 0.3904620547367803] ***
*** finished computation of 3 references, err: [Inf, 2.696058954417818, 0.7921509241981177, 0.409577321819239, 0.3919899984492832, 0.3904620547367803, 0.3904620547367803] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 25]]
** centroid: 1, normalized-entropy: 0.4912373418243334, [(2, 3), (3, 25)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 29, 9]]
** centroid: 2, normalized-entropy: 0.7897492536625221, [(2, 29), (3, 9)]
*** center 3: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 5.77851573030996] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 5.77851573030996, 0.6917045639067697] ***
*** starting iteration: 2; err: [Inf, 5.77851573030996, 0.6917045639067697] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 5.77851573030996, 0.6917045639067697, 0.33694501038964225] ***
*** starting iteration: 3; err: [Inf, 5.77851573030996, 0.6917045639067697, 0.33694501038964225] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 5.77851573030996, 0.6917045639067697, 0.33694501038964225, 0.33679717120782565] ***
*** finished computation of 3 references, err: [Inf, 5.77851573030996, 0.6917045639067697, 0.33694501038964225, 0.33679717120782565] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 29, 10]]
** centroid: 1, normalized-entropy: 0.8212809417449864, [(2, 29), (3, 10)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 1, 24]]
** centroid: 2, normalized-entropy: 0.24229218908241482, [(2, 1), (3, 24)]
*** center 3: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.068408129528549] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.068408129528549, 0.644502773748937] ***
*** starting iteration: 2; err: [Inf, 1.068408129528549, 0.644502773748937] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.068408129528549, 0.644502773748937, 0.6425313777332086] ***
*** starting iteration: 3; err: [Inf, 1.068408129528549, 0.644502773748937, 0.6425313777332086] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.068408129528549, 0.644502773748937, 0.6425313777332086, 0.6413477401890426] ***
*** starting iteration: 4; err: [Inf, 1.068408129528549, 0.644502773748937, 0.6425313777332086, 0.6413477401890426] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.068408129528549, 0.644502773748937, 0.6425313777332086, 0.6413477401890426, 0.6413477401890426] ***
*** finished computation of 3 references, err: [Inf, 1.068408129528549, 0.644502773748937, 0.6425313777332086, 0.6413477401890426, 0.6413477401890426] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [21, 1, 0]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(1, 21), (2, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 37, 32]]
** centroid: 3, normalized-entropy: 0.9962088839046743, [(2, 37), (3, 32)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.6445000073321374] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6445000073321374, 0.3140176015176891] ***
*** finished computation of 7 references, err: [Inf, 0.6445000073321374, 0.3140176015176891] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 5, 14]]
** centroid: 3, normalized-entropy: 0.8314743880097292, [(2, 5), (3, 14)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 8, 1]]
** centroid: 4, normalized-entropy: 0.5032583347756457, [(2, 8), (3, 1)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 6, 7]]
** centroid: 5, normalized-entropy: 0.9957274520849256, [(2, 6), (3, 7)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 1, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 3.182399986432013] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 3.182399986432013, 0.5292850765216844] ***
*** finished computation of 7 references, err: [Inf, 3.182399986432013, 0.5292850765216844] ***
*** center 1: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 12, 3]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(2, 12), (3, 3)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 6, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4761999988590712] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4761999988590712, 0.3385367227812797] ***
*** finished computation of 7 references, err: [Inf, 0.4761999988590712, 0.3385367227812797] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 3, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 1, 2]]
** centroid: 4, normalized-entropy: 0.9182958340544894, [(2, 1), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 10, 22]]
** centroid: 7, normalized-entropy: 0.8960382325345574, [(2, 10), (3, 22)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.8994556748510953] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8994556748510953, 0.41653571759296526] ***
*** finished computation of 3 references, err: [Inf, 0.8994556748510953, 0.41653571759296526] ***
*** center 1: selecting labels [1] (freq >= 2) [from [34, 1, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 31, 13]]
** centroid: 2, normalized-entropy: 0.8756633923230399, [(2, 31), (3, 13)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 21]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.41408973511806807] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41408973511806807, 0.34145601071737525] ***
*** finished computation of 3 references, err: [Inf, 0.41408973511806807, 0.34145601071737525] ***
*** center 1: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 29, 9]]
** centroid: 2, normalized-entropy: 0.7897492536625221, [(2, 29), (3, 9)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 25]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 3.5493318857766045] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.5493318857766045, 1.4517738551071215] ***
*** finished computation of 3 references, err: [Inf, 3.5493318857766045, 1.4517738551071215] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 17, 26]]
** centroid: 1, normalized-entropy: 0.9681647320759545, [(2, 17), (3, 26)]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [30, 21, 0]]
** centroid: 3, normalized-entropy: 0.9774178175281716, [(1, 30), (2, 21)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.1551710528614345] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.1551710528614345, 0.21201736602616827] ***
*** finished computation of 7 references, err: [Inf, 1.1551710528614345, 0.21201736602616827] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 1, 1]]
** centroid: 3, normalized-entropy: 1.0, [(2, 1), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 4, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 7, 8]]
** centroid: 5, normalized-entropy: 0.9967916319816367, [(2, 7), (3, 8)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 4.1086464537948615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 4.1086464537948615, 0.7363080830206514] ***
*** finished computation of 7 references, err: [Inf, 4.1086464537948615, 0.7363080830206514] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 2, 25]]
** centroid: 2, normalized-entropy: 0.38094658570539014, [(2, 2), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [36, 2, 0]]
** centroid: 3, normalized-entropy: 0.2974722489192896, [(1, 36), (2, 2)]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 26, 2]]
** centroid: 5, normalized-entropy: 0.3712323266408756, [(2, 26), (3, 2)]
finished with 5 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4967157562969464] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4967157562969464, 0.21195610439315687] ***
*** finished computation of 7 references, err: [Inf, 0.4967157562969464, 0.21195610439315687] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 6, 6]]
** centroid: 1, normalized-entropy: 1.0, [(2, 6), (3, 6)]
*** center 2: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 22, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 9, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 1, 11]]
** centroid: 6, normalized-entropy: 0.4138168503036336, [(2, 1), (3, 11)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 2.259194236605699] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 2.259194236605699, 0.5402917984224045] ***
*** starting iteration: 2; err: [Inf, 2.259194236605699, 0.5402917984224045] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 2.259194236605699, 0.5402917984224045, 0.29845141762257227] ***
*** starting iteration: 3; err: [Inf, 2.259194236605699, 0.5402917984224045, 0.29845141762257227] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 2.259194236605699, 0.5402917984224045, 0.29845141762257227, 0.26526977227324194] ***
*** finished computation of 7 references, err: [Inf, 2.259194236605699, 0.5402917984224045, 0.29845141762257227, 0.26526977227324194] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 3, 14]]
** centroid: 1, normalized-entropy: 0.6722948170756378, [(2, 3), (3, 14)]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 4, 9]]
** centroid: 4, normalized-entropy: 0.8904916402194913, [(2, 4), (3, 9)]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 25, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 2.9505171020977783] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 2.9505171020977783, 0.24109888326882828] ***
*** starting iteration: 2; err: [Inf, 2.9505171020977783, 0.24109888326882828] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 2.9505171020977783, 0.24109888326882828, 0.20477078806799653] ***
*** starting iteration: 3; err: [Inf, 2.9505171020977783, 0.24109888326882828, 0.20477078806799653] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 2.9505171020977783, 0.24109888326882828, 0.20477078806799653, 0.20477078806799653] ***
*** finished computation of 7 references, err: [Inf, 2.9505171020977783, 0.24109888326882828, 0.20477078806799653, 0.20477078806799653] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 14, 4]]
** centroid: 1, normalized-entropy: 0.7642045065086204, [(2, 14), (3, 4)]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
*** center 4: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 16, 1]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5590133273370416] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5590133273370416, 0.27858645863332177] ***
*** starting iteration: 2; err: [Inf, 0.5590133273370416, 0.27858645863332177] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5590133273370416, 0.27858645863332177, 0.25195855930405675] ***
*** starting iteration: 3; err: [Inf, 0.5590133273370416, 0.27858645863332177, 0.25195855930405675] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5590133273370416, 0.27858645863332177, 0.25195855930405675, 0.24160789742492242] ***
*** finished computation of 7 references, err: [Inf, 0.5590133273370416, 0.27858645863332177, 0.25195855930405675, 0.24160789742492242] ***
*** center 1: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 2, 9]]
** centroid: 2, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 7, 13]]
** centroid: 3, normalized-entropy: 0.9340680553754911, [(2, 7), (3, 13)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 29, 0]]
*** center 5: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [0, 0, 1]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.41010000852381157] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.41010000852381157, 0.2659190390887498] ***
*** starting iteration: 2; err: [Inf, 0.41010000852381157, 0.2659190390887498] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.41010000852381157, 0.2659190390887498, 0.25346829736376697] ***
*** starting iteration: 3; err: [Inf, 0.41010000852381157, 0.2659190390887498, 0.25346829736376697] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.41010000852381157, 0.2659190390887498, 0.25346829736376697, 0.25244401814838835] ***
*** finished computation of 7 references, err: [Inf, 0.41010000852381157, 0.2659190390887498, 0.25346829736376697, 0.25244401814838835] ***
*** center 1: selecting labels [1] (freq >= 2) [from [22, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 16, 1]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 16, 7]]
** centroid: 5, normalized-entropy: 0.8865408928220899, [(2, 16), (3, 7)]
*** center 6: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6503999976826053] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6503999976826053, 0.32390792857305606] ***
*** starting iteration: 2; err: [Inf, 0.6503999976826053, 0.32390792857305606] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6503999976826053, 0.32390792857305606, 0.28143660679111215] ***
*** starting iteration: 3; err: [Inf, 0.6503999976826053, 0.32390792857305606, 0.28143660679111215] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6503999976826053, 0.32390792857305606, 0.28143660679111215, 0.2728794897598076] ***
*** finished computation of 7 references, err: [Inf, 0.6503999976826053, 0.32390792857305606, 0.28143660679111215, 0.2728794897598076] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 9, 2]]
** centroid: 1, normalized-entropy: 0.6840384356390419, [(2, 9), (3, 2)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 15, 1]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 6, 1]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
*** center 5: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5287000107635828] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5287000107635828, 0.2598739438108552] ***
*** starting iteration: 2; err: [Inf, 0.5287000107635828, 0.2598739438108552] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5287000107635828, 0.2598739438108552, 0.25551832255486184] ***
*** starting iteration: 3; err: [Inf, 0.5287000107635828, 0.2598739438108552, 0.25551832255486184] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5287000107635828, 0.2598739438108552, 0.25551832255486184, 0.2537164295110582] ***
*** finished computation of 7 references, err: [Inf, 0.5287000107635828, 0.2598739438108552, 0.25551832255486184, 0.2537164295110582] ***
*** center 1: selecting labels [1] (freq >= 2) [from [18, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 14, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 16, 2]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(2, 16), (3, 2)]
*** center 4: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 6, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 2, 15]]
** centroid: 7, normalized-entropy: 0.5225593745369407, [(2, 2), (3, 15)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7287752362261796] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7287752362261796, 0.39581156028829256] ***
*** starting iteration: 2; err: [Inf, 0.7287752362261796, 0.39581156028829256] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7287752362261796, 0.39581156028829256, 0.3929107760898259] ***
*** starting iteration: 3; err: [Inf, 0.7287752362261796, 0.39581156028829256, 0.3929107760898259] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7287752362261796, 0.39581156028829256, 0.3929107760898259, 0.39231695396926086] ***
*** finished computation of 3 references, err: [Inf, 0.7287752362261796, 0.39581156028829256, 0.3929107760898259, 0.39231695396926086] ***
*** center 1: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 32, 10]]
** centroid: 2, normalized-entropy: 0.7918583525674836, [(2, 32), (3, 10)]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 24]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9768933015516613] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9768933015516613, 0.5810908677396771] ***
*** starting iteration: 2; err: [Inf, 0.9768933015516613, 0.5810908677396771] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9768933015516613, 0.5810908677396771, 0.579430188993117] ***
*** starting iteration: 3; err: [Inf, 0.9768933015516613, 0.5810908677396771, 0.579430188993117] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9768933015516613, 0.5810908677396771, 0.579430188993117, 0.5784929892766961] ***
*** finished computation of 3 references, err: [Inf, 0.9768933015516613, 0.5810908677396771, 0.579430188993117, 0.5784929892766961] ***
*** center 1: selecting labels [1] (freq >= 1) [from [19, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 30, 34]]
** centroid: 2, normalized-entropy: 0.9971803988942641, [(2, 30), (3, 34)]
*** center 3: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9517291417348336] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9517291417348336, 0.6568006267937045] ***
*** starting iteration: 2; err: [Inf, 0.9517291417348336, 0.6568006267937045] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9517291417348336, 0.6568006267937045, 0.6478723084874666] ***
*** starting iteration: 3; err: [Inf, 0.9517291417348336, 0.6568006267937045, 0.6478723084874666] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9517291417348336, 0.6568006267937045, 0.6478723084874666, 0.6414438535841067] ***
*** finished computation of 3 references, err: [Inf, 0.9517291417348336, 0.6568006267937045, 0.6478723084874666, 0.6414438535841067] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [13, 1, 0]]
** centroid: 1, normalized-entropy: 0.3712323266408756, [(1, 13), (2, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 37, 32]]
** centroid: 3, normalized-entropy: 0.9962088839046743, [(2, 37), (3, 32)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4158000009862408] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4158000009862408, 0.3011097510432427] ***
*** finished computation of 7 references, err: [Inf, 0.4158000009862408, 0.3011097510432427] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 10, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 8, 8]]
** centroid: 2, normalized-entropy: 1.0, [(2, 8), (3, 8)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 20]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 5: selecting labels [1] (freq >= 2) [from [23, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 14, 1]]
*** center 7: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4050000033001377] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4050000033001377, 0.3045261755882449] ***
*** finished computation of 7 references, err: [Inf, 0.4050000033001377, 0.3045261755882449] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 15, 1]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 13]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 13, 0]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 1, 20]]
*** center 5: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.597700007645463] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.597700007645463, 0.35061620212139766] ***
*** finished computation of 7 references, err: [Inf, 0.597700007645463, 0.35061620212139766] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 13, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [8, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [10, 0, 0]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 1, 24]]
*** center 5: selecting labels [1] (freq >= 2) [from [8, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 24, 8]]
** centroid: 6, normalized-entropy: 0.8112781244591328, [(2, 24), (3, 8)]
*** center 7: selecting labels [1] (freq >= 2) [from [4, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 3.1512000068930894] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.1512000068930894, 1.0423355906740688] ***
*** finished computation of 3 references, err: [Inf, 3.1512000068930894, 1.0423355906740688] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [34, 6, 0]]
** centroid: 1, normalized-entropy: 0.6098403047164005, [(1, 34), (2, 6)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 26, 18]]
** centroid: 2, normalized-entropy: 0.976020648236615, [(2, 26), (3, 18)]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 3.1469000137187435] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 3.1469000137187435, 0.6807101891829757] ***
*** finished computation of 3 references, err: [Inf, 3.1469000137187435, 0.6807101891829757] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [36, 1, 0]]
** centroid: 1, normalized-entropy: 0.1792560669283214, [(1, 36), (2, 1)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 29, 22]]
** centroid: 2, normalized-entropy: 0.9863676072907089, [(2, 29), (3, 22)]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.6928000068698594] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.6928000068698594, 0.6256473139948668] ***
*** finished computation of 3 references, err: [Inf, 1.6928000068698594, 0.6256473139948668] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [30, 2, 0]]
** centroid: 1, normalized-entropy: 0.3372900666170139, [(1, 30), (2, 2)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 23]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 36, 9]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(2, 36), (3, 9)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.3231999931609584] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3231999931609584, 0.6303181791109814] ***
*** starting iteration: 2; err: [Inf, 1.3231999931609584, 0.6303181791109814] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3231999931609584, 0.6303181791109814, 0.6107672286981065] ***
*** starting iteration: 3; err: [Inf, 1.3231999931609584, 0.6303181791109814, 0.6107672286981065] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3231999931609584, 0.6303181791109814, 0.6107672286981065, 0.5932906142174456] ***
*** starting iteration: 4; err: [Inf, 1.3231999931609584, 0.6303181791109814, 0.6107672286981065, 0.5932906142174456] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3231999931609584, 0.6303181791109814, 0.6107672286981065, 0.5932906142174456, 0.5828025269049352] ***
*** starting iteration: 5; err: [Inf, 1.3231999931609584, 0.6303181791109814, 0.6107672286981065, 0.5932906142174456, 0.5828025269049352] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3231999931609584, 0.6303181791109814, 0.6107672286981065, 0.5932906142174456, 0.5828025269049352, 0.5719304254362177] ***
*** starting iteration: 6; err: [Inf, 1.3231999931609584, 0.6303181791109814, 0.6107672286981065, 0.5932906142174456, 0.5828025269049352, 0.5719304254362177] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3231999931609584, 0.6303181791109814, 0.6107672286981065, 0.5932906142174456, 0.5828025269049352, 0.5719304254362177, 0.5586509074569007] ***
*** starting iteration: 7; err: [Inf, 1.3231999931609584, 0.6303181791109814, 0.6107672286981065, 0.5932906142174456, 0.5828025269049352, 0.5719304254362177, 0.5586509074569007] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3231999931609584, 0.6303181791109814, 0.6107672286981065, 0.5932906142174456, 0.5828025269049352, 0.5719304254362177, 0.5586509074569007, 0.552650598895768] ***
*** starting iteration: 8; err: [Inf, 1.3231999931609584, 0.6303181791109814, 0.6107672286981065, 0.5932906142174456, 0.5828025269049352, 0.5719304254362177, 0.5586509074569007, 0.552650598895768] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3231999931609584, 0.6303181791109814, 0.6107672286981065, 0.5932906142174456, 0.5828025269049352, 0.5719304254362177, 0.5586509074569007, 0.552650598895768, 0.5473980126644779] ***
*** starting iteration: 9; err: [Inf, 1.3231999931609584, 0.6303181791109814, 0.6107672286981065, 0.5932906142174456, 0.5828025269049352, 0.5719304254362177, 0.5586509074569007, 0.552650598895768, 0.5473980126644779] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3231999931609584, 0.6303181791109814, 0.6107672286981065, 0.5932906142174456, 0.5828025269049352, 0.5719304254362177, 0.5586509074569007, 0.552650598895768, 0.5473980126644779, 0.5473980126644779] ***
*** finished computation of 3 references, err: [Inf, 1.3231999931609584, 0.6303181791109814, 0.6107672286981065, 0.5932906142174456, 0.5828025269049352, 0.5719304254362177, 0.5586509074569007, 0.552650598895768, 0.5473980126644779, 0.5473980126644779] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 3, 25]]
** centroid: 1, normalized-entropy: 0.4912373418243334, [(2, 3), (3, 25)]
*** center 2: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 29, 9]]
** centroid: 3, normalized-entropy: 0.7897492536625221, [(2, 29), (3, 9)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.120900001452285] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.120900001452285, 0.6030997999142362] ***
*** starting iteration: 2; err: [Inf, 1.120900001452285, 0.6030997999142362] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.120900001452285, 0.6030997999142362, 0.5512613688989524] ***
*** starting iteration: 3; err: [Inf, 1.120900001452285, 0.6030997999142362, 0.5512613688989524] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.120900001452285, 0.6030997999142362, 0.5512613688989524, 0.496472818168894] ***
*** starting iteration: 4; err: [Inf, 1.120900001452285, 0.6030997999142362, 0.5512613688989524, 0.496472818168894] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.120900001452285, 0.6030997999142362, 0.5512613688989524, 0.496472818168894, 0.4892699857466108] ***
*** starting iteration: 5; err: [Inf, 1.120900001452285, 0.6030997999142362, 0.5512613688989524, 0.496472818168894, 0.4892699857466108] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.120900001452285, 0.6030997999142362, 0.5512613688989524, 0.496472818168894, 0.4892699857466108, 0.4884374997052657] ***
*** finished computation of 3 references, err: [Inf, 1.120900001452285, 0.6030997999142362, 0.5512613688989524, 0.496472818168894, 0.4892699857466108, 0.4884374997052657] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 29, 11]]
** centroid: 1, normalized-entropy: 0.8485481782946159, [(2, 29), (3, 11)]
*** center 2: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 23]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.007600006325942] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.007600006325942, 0.5982084756120019] ***
*** starting iteration: 2; err: [Inf, 1.007600006325942, 0.5982084756120019] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.007600006325942, 0.5982084756120019, 0.561911179490746] ***
*** starting iteration: 3; err: [Inf, 1.007600006325942, 0.5982084756120019, 0.561911179490746] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.007600006325942, 0.5982084756120019, 0.561911179490746, 0.5525475622197782] ***
*** starting iteration: 4; err: [Inf, 1.007600006325942, 0.5982084756120019, 0.561911179490746, 0.5525475622197782] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.007600006325942, 0.5982084756120019, 0.561911179490746, 0.5525475622197782, 0.5505172629609725] ***
*** starting iteration: 5; err: [Inf, 1.007600006325942, 0.5982084756120019, 0.561911179490746, 0.5525475622197782, 0.5505172629609725] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.007600006325942, 0.5982084756120019, 0.561911179490746, 0.5525475622197782, 0.5505172629609725, 0.5468242723327974] ***
*** starting iteration: 6; err: [Inf, 1.007600006325942, 0.5982084756120019, 0.561911179490746, 0.5525475622197782, 0.5505172629609725, 0.5468242723327974] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.007600006325942, 0.5982084756120019, 0.561911179490746, 0.5525475622197782, 0.5505172629609725, 0.5468242723327974, 0.5462368480010318] ***
*** finished computation of 3 references, err: [Inf, 1.007600006325942, 0.5982084756120019, 0.561911179490746, 0.5525475622197782, 0.5505172629609725, 0.5468242723327974, 0.5462368480010318] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 6, 32]]
** centroid: 1, normalized-entropy: 0.6292492238560344, [(2, 6), (3, 32)]
*** center 2: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 32, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.102599999337517] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.102599999337517, 0.6122729915953607] ***
*** starting iteration: 2; err: [Inf, 1.102599999337517, 0.6122729915953607] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.102599999337517, 0.6122729915953607, 0.5692304167972145] ***
*** starting iteration: 3; err: [Inf, 1.102599999337517, 0.6122729915953607, 0.5692304167972145] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.102599999337517, 0.6122729915953607, 0.5692304167972145, 0.5524907621244864] ***
*** finished computation of 3 references, err: [Inf, 1.102599999337517, 0.6122729915953607, 0.5692304167972145, 0.5524907621244864] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 32, 9]]
** centroid: 1, normalized-entropy: 0.7592757847892834, [(2, 32), (3, 9)]
*** center 2: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 25]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.1643999943178942] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1643999943178942, 0.5732023178426959] ***
*** starting iteration: 2; err: [Inf, 1.1643999943178942, 0.5732023178426959] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1643999943178942, 0.5732023178426959, 0.5155065064206861] ***
*** starting iteration: 3; err: [Inf, 1.1643999943178942, 0.5732023178426959, 0.5155065064206861] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1643999943178942, 0.5732023178426959, 0.5155065064206861, 0.4907684624295235] ***
*** finished computation of 3 references, err: [Inf, 1.1643999943178942, 0.5732023178426959, 0.5155065064206861, 0.4907684624295235] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 29, 11]]
** centroid: 1, normalized-entropy: 0.8485481782946159, [(2, 29), (3, 11)]
*** center 2: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 23]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.195800002931214] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.195800002931214, 0.5313077818677039] ***
*** starting iteration: 2; err: [Inf, 1.195800002931214, 0.5313077818677039] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.195800002931214, 0.5313077818677039, 0.5304475552855185] ***
*** finished computation of 3 references, err: [Inf, 1.195800002931214, 0.5313077818677039, 0.5304475552855185] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 1, 24]]
*** center 2: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 37, 8]]
** centroid: 3, normalized-entropy: 0.6751914401458716, [(2, 37), (3, 8)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5628788840663316] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5628788840663316, 0.1770590676427437] ***
*** starting iteration: 2; err: [Inf, 0.5628788840663316, 0.1770590676427437] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5628788840663316, 0.1770590676427437, 0.17088845818434337] ***
*** starting iteration: 3; err: [Inf, 0.5628788840663316, 0.1770590676427437, 0.17088845818434337] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5628788840663316, 0.1770590676427437, 0.17088845818434337, 0.16948968043531043] ***
*** finished computation of 7 references, err: [Inf, 0.5628788840663316, 0.1770590676427437, 0.17088845818434337, 0.16948968043531043] ***
*** center 1: selecting labels [1] (freq >= 2) [from [19, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 11]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 10, 4]]
** centroid: 3, normalized-entropy: 0.8631205685666311, [(2, 10), (3, 4)]
*** center 4: selecting labels [1] (freq >= 2) [from [15, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 15, 4]]
** centroid: 5, normalized-entropy: 0.7424875695421234, [(2, 15), (3, 4)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.44072931672936805] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.44072931672936805, 0.20686079334709595] ***
*** starting iteration: 2; err: [Inf, 0.44072931672936805, 0.20686079334709595] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.44072931672936805, 0.20686079334709595, 0.17876835530051038] ***
*** starting iteration: 3; err: [Inf, 0.44072931672936805, 0.20686079334709595, 0.17876835530051038] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.44072931672936805, 0.20686079334709595, 0.17876835530051038, 0.16610456083876005] ***
*** finished computation of 7 references, err: [Inf, 0.44072931672936805, 0.20686079334709595, 0.17876835530051038, 0.16610456083876005] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 1, 17]]
*** center 2: selecting labels [1] (freq >= 2) [from [19, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 17, 1]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
*** center 5: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 12, 9]]
** centroid: 6, normalized-entropy: 0.9852281360342514, [(2, 12), (3, 9)]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.338168907148014] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.338168907148014, 0.19828165761646935] ***
*** starting iteration: 2; err: [Inf, 0.338168907148014, 0.19828165761646935] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.338168907148014, 0.19828165761646935, 0.1885048795452523] ***
*** starting iteration: 3; err: [Inf, 0.338168907148014, 0.19828165761646935, 0.1885048795452523] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.338168907148014, 0.19828165761646935, 0.1885048795452523, 0.18252790432828572] ***
*** finished computation of 7 references, err: [Inf, 0.338168907148014, 0.19828165761646935, 0.1885048795452523, 0.18252790432828572] ***
*** center 1: selecting labels [1] (freq >= 2) [from [22, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 22, 6]]
** centroid: 3, normalized-entropy: 0.7495952572594798, [(2, 22), (3, 6)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 4, 20]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(2, 4), (3, 20)]
*** center 5: selecting labels [1] (freq >= 2) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 12, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4780639026292653] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4780639026292653, 0.19698921986721088] ***
*** starting iteration: 2; err: [Inf, 0.4780639026292653, 0.19698921986721088] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4780639026292653, 0.19698921986721088, 0.18245659313519139] ***
*** starting iteration: 3; err: [Inf, 0.4780639026292653, 0.19698921986721088, 0.18245659313519139] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4780639026292653, 0.19698921986721088, 0.18245659313519139, 0.1756789652852249] ***
*** starting iteration: 4; err: [Inf, 0.4780639026292653, 0.19698921986721088, 0.18245659313519139, 0.1756789652852249] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4780639026292653, 0.19698921986721088, 0.18245659313519139, 0.1756789652852249, 0.16914434936243503] ***
*** starting iteration: 5; err: [Inf, 0.4780639026292653, 0.19698921986721088, 0.18245659313519139, 0.1756789652852249, 0.16914434936243503] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4780639026292653, 0.19698921986721088, 0.18245659313519139, 0.1756789652852249, 0.16914434936243503, 0.16845398041591444] ***
*** finished computation of 7 references, err: [Inf, 0.4780639026292653, 0.19698921986721088, 0.18245659313519139, 0.1756789652852249, 0.16914434936243503, 0.16845398041591444] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 16, 7]]
** centroid: 1, normalized-entropy: 0.8865408928220899, [(2, 16), (3, 7)]
*** center 2: selecting labels [1] (freq >= 2) [from [22, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 11]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 6, 0]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 10, 1]]
*** center 7: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.47689489920176514] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.47689489920176514, 0.1870528103046398] ***
*** starting iteration: 2; err: [Inf, 0.47689489920176514, 0.1870528103046398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.47689489920176514, 0.1870528103046398, 0.18186593781193924] ***
*** starting iteration: 3; err: [Inf, 0.47689489920176514, 0.1870528103046398, 0.18186593781193924] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.47689489920176514, 0.1870528103046398, 0.18186593781193924, 0.18186593781193924] ***
*** finished computation of 7 references, err: [Inf, 0.47689489920176514, 0.1870528103046398, 0.18186593781193924, 0.18186593781193924] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 2, 26]]
** centroid: 1, normalized-entropy: 0.3712323266408756, [(2, 2), (3, 26)]
*** center 2: selecting labels [1] (freq >= 2) [from [23, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 6, 1]]
*** center 5: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 22, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.39538177589703966] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.39538177589703966, 0.20753559795372997] ***
*** starting iteration: 2; err: [Inf, 0.39538177589703966, 0.20753559795372997] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.39538177589703966, 0.20753559795372997, 0.19178803126784907] ***
*** starting iteration: 3; err: [Inf, 0.39538177589703966, 0.20753559795372997, 0.19178803126784907] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.39538177589703966, 0.20753559795372997, 0.19178803126784907, 0.17742588044711746] ***
*** starting iteration: 4; err: [Inf, 0.39538177589703966, 0.20753559795372997, 0.19178803126784907, 0.17742588044711746] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.39538177589703966, 0.20753559795372997, 0.19178803126784907, 0.17742588044711746, 0.16277113851458822] ***
*** starting iteration: 5; err: [Inf, 0.39538177589703966, 0.20753559795372997, 0.19178803126784907, 0.17742588044711746, 0.16277113851458822] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.39538177589703966, 0.20753559795372997, 0.19178803126784907, 0.17742588044711746, 0.16277113851458822, 0.15434188829718617] ***
*** starting iteration: 6; err: [Inf, 0.39538177589703966, 0.20753559795372997, 0.19178803126784907, 0.17742588044711746, 0.16277113851458822, 0.15434188829718617] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.39538177589703966, 0.20753559795372997, 0.19178803126784907, 0.17742588044711746, 0.16277113851458822, 0.15434188829718617, 0.15423190870798173] ***
*** finished computation of 7 references, err: [Inf, 0.39538177589703966, 0.20753559795372997, 0.19178803126784907, 0.17742588044711746, 0.16277113851458822, 0.15434188829718617, 0.15423190870798173] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 13, 11]]
** centroid: 1, normalized-entropy: 0.9949848281859699, [(2, 13), (3, 11)]
*** center 2: selecting labels [1] (freq >= 2) [from [22, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 16]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 18, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5615000055520657] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5615000055520657, 0.2641474379397328] ***
*** starting iteration: 2; err: [Inf, 0.5615000055520657, 0.2641474379397328] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5615000055520657, 0.2641474379397328, 0.2542554759733735] ***
*** starting iteration: 3; err: [Inf, 0.5615000055520657, 0.2641474379397328, 0.2542554759733735] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5615000055520657, 0.2641474379397328, 0.2542554759733735, 0.24659413198938507] ***
*** finished computation of 7 references, err: [Inf, 0.5615000055520657, 0.2641474379397328, 0.2542554759733735, 0.24659413198938507] ***
*** center 1: selecting labels [1] (freq >= 2) [from [25, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 11]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 9, 1]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 16, 7]]
** centroid: 4, normalized-entropy: 0.8865408928220899, [(2, 16), (3, 7)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
*** center 7: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6186000061762412] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6186000061762412, 0.2700617210139988] ***
*** starting iteration: 2; err: [Inf, 0.6186000061762412, 0.2700617210139988] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6186000061762412, 0.2700617210139988, 0.24059836199482196] ***
*** starting iteration: 3; err: [Inf, 0.6186000061762412, 0.2700617210139988, 0.24059836199482196] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6186000061762412, 0.2700617210139988, 0.24059836199482196, 0.2319331370681785] ***
*** finished computation of 7 references, err: [Inf, 0.6186000061762412, 0.2700617210139988, 0.24059836199482196, 0.2319331370681785] ***
*** center 1: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 7]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 12, 4]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(2, 12), (3, 4)]
*** center 5: selecting labels [1] (freq >= 2) [from [19, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 16]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 17, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5482000023569459] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5482000023569459, 0.23546524084524179] ***
*** starting iteration: 2; err: [Inf, 0.5482000023569459, 0.23546524084524179] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5482000023569459, 0.23546524084524179, 0.22503536586908687] ***
*** starting iteration: 3; err: [Inf, 0.5482000023569459, 0.23546524084524179, 0.22503536586908687] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5482000023569459, 0.23546524084524179, 0.22503536586908687, 0.22296162229372674] ***
*** finished computation of 7 references, err: [Inf, 0.5482000023569459, 0.23546524084524179, 0.22503536586908687, 0.22296162229372674] ***
*** center 1: selecting labels [1] (freq >= 2) [from [21, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 15, 4]]
** centroid: 3, normalized-entropy: 0.7424875695421234, [(2, 15), (3, 4)]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 17]]
*** center 5: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 12, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 11, 5]]
** centroid: 7, normalized-entropy: 0.8960382325345574, [(2, 11), (3, 5)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4730267599311601] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4730267599311601, 0.19446857501122913] ***
*** starting iteration: 2; err: [Inf, 0.4730267599311601, 0.19446857501122913] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4730267599311601, 0.19446857501122913, 0.18484349688615206] ***
*** starting iteration: 3; err: [Inf, 0.4730267599311601, 0.19446857501122913, 0.18484349688615206] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4730267599311601, 0.19446857501122913, 0.18484349688615206, 0.17855522243175367] ***
*** starting iteration: 4; err: [Inf, 0.4730267599311601, 0.19446857501122913, 0.18484349688615206, 0.17855522243175367] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4730267599311601, 0.19446857501122913, 0.18484349688615206, 0.17855522243175367, 0.1720206065089638] ***
*** starting iteration: 5; err: [Inf, 0.4730267599311601, 0.19446857501122913, 0.18484349688615206, 0.17855522243175367, 0.1720206065089638] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4730267599311601, 0.19446857501122913, 0.18484349688615206, 0.17855522243175367, 0.1720206065089638, 0.17133023756244323] ***
*** finished computation of 7 references, err: [Inf, 0.4730267599311601, 0.19446857501122913, 0.18484349688615206, 0.17855522243175367, 0.1720206065089638, 0.17133023756244323] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 11]]
*** center 2: selecting labels [1] (freq >= 2) [from [22, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 10, 4]]
** centroid: 3, normalized-entropy: 0.8631205685666311, [(2, 10), (3, 4)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 15, 4]]
** centroid: 4, normalized-entropy: 0.7424875695421234, [(2, 15), (3, 4)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4042293330907956] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4042293330907956, 0.1758225018840031] ***
*** starting iteration: 2; err: [Inf, 0.4042293330907956, 0.1758225018840031] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4042293330907956, 0.1758225018840031, 0.16197722289360145] ***
*** starting iteration: 3; err: [Inf, 0.4042293330907956, 0.1758225018840031, 0.16197722289360145] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4042293330907956, 0.1758225018840031, 0.16197722289360145, 0.15744968784199748] ***
*** starting iteration: 4; err: [Inf, 0.4042293330907956, 0.1758225018840031, 0.16197722289360145, 0.15744968784199748] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4042293330907956, 0.1758225018840031, 0.16197722289360145, 0.15744968784199748, 0.1556566445611709] ***
*** starting iteration: 5; err: [Inf, 0.4042293330907956, 0.1758225018840031, 0.16197722289360145, 0.15744968784199748, 0.1556566445611709] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4042293330907956, 0.1758225018840031, 0.16197722289360145, 0.15744968784199748, 0.1556566445611709, 0.15469717802081323] ***
*** finished computation of 7 references, err: [Inf, 0.4042293330907956, 0.1758225018840031, 0.16197722289360145, 0.15744968784199748, 0.1556566445611709, 0.15469717802081323] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 11, 9]]
** centroid: 1, normalized-entropy: 0.9927744539878083, [(2, 11), (3, 9)]
*** center 2: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 6, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [19, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 1, 17]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 12, 1]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.33719289808904146] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33719289808904146, 0.19735466988021727] ***
*** starting iteration: 2; err: [Inf, 0.33719289808904146, 0.19735466988021727] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33719289808904146, 0.19735466988021727, 0.1885048795452523] ***
*** starting iteration: 3; err: [Inf, 0.33719289808904146, 0.19735466988021727, 0.1885048795452523] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33719289808904146, 0.19735466988021727, 0.1885048795452523, 0.18252790432828572] ***
*** starting iteration: 4; err: [Inf, 0.33719289808904146, 0.19735466988021727, 0.1885048795452523, 0.18252790432828572] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33719289808904146, 0.19735466988021727, 0.1885048795452523, 0.18252790432828572, 0.17830435421280322] ***
*** starting iteration: 5; err: [Inf, 0.33719289808904146, 0.19735466988021727, 0.1885048795452523, 0.18252790432828572, 0.17830435421280322] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33719289808904146, 0.19735466988021727, 0.1885048795452523, 0.18252790432828572, 0.17830435421280322, 0.17495368125731406] ***
*** starting iteration: 6; err: [Inf, 0.33719289808904146, 0.19735466988021727, 0.1885048795452523, 0.18252790432828572, 0.17830435421280322, 0.17495368125731406] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33719289808904146, 0.19735466988021727, 0.1885048795452523, 0.18252790432828572, 0.17830435421280322, 0.17495368125731406, 0.17299158771202572] ***
*** starting iteration: 7; err: [Inf, 0.33719289808904146, 0.19735466988021727, 0.1885048795452523, 0.18252790432828572, 0.17830435421280322, 0.17495368125731406, 0.17299158771202572] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33719289808904146, 0.19735466988021727, 0.1885048795452523, 0.18252790432828572, 0.17830435421280322, 0.17495368125731406, 0.17299158771202572, 0.17201394083168392] ***
*** finished computation of 7 references, err: [Inf, 0.33719289808904146, 0.19735466988021727, 0.1885048795452523, 0.18252790432828572, 0.17830435421280322, 0.17495368125731406, 0.17299158771202572, 0.17201394083168392] ***
*** center 1: selecting labels [1] (freq >= 2) [from [22, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 20, 8]]
** centroid: 3, normalized-entropy: 0.8631205685666311, [(2, 20), (3, 8)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 2, 18]]
** centroid: 4, normalized-entropy: 0.46899559358928133, [(2, 2), (3, 18)]
*** center 5: selecting labels [1] (freq >= 2) [from [8, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 16, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
finished with 7 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 16)
[0.9666666666666667, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.94, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9, 0.8999999999999999, 0.8933333333333334, 0.8933333333333332, 0.8733333333333334, 0.7999999999999999]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.9, 2) => 0.9666666666666667
finished with 16
iteration 2 finished
generating 4 configurations using top 4 configurations, starting with 16)
[0.9666666666666667, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.94, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9, 0.8999999999999999, 0.8933333333333334, 0.8933333333333332, 0.8733333333333334, 0.7999999999999999]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.9, 2) => 0.9666666666666667
finished with 18
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.816444587439531] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.816444587439531, 0.4237192555726697] ***
*** finished computation of 3 references, err: [Inf, 0.816444587439531, 0.4237192555726697] ***
*** center 1: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 2, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 12, 33]]
** centroid: 3, normalized-entropy: 0.8366407419411671, [(2, 12), (3, 33)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.613943886253172] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.613943886253172, 0.3508480166068895] ***
*** finished computation of 3 references, err: [Inf, 0.613943886253172, 0.3508480166068895] ***
*** center 1: selecting labels [1] (freq >= 1) [from [36, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 1, 29]]
** centroid: 2, normalized-entropy: 0.2108423003185322, [(2, 1), (3, 29)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 29, 5]]
** centroid: 3, normalized-entropy: 0.6024308020404452, [(2, 29), (3, 5)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8846890628982912] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8846890628982912, 0.3973976701997897] ***
*** finished computation of 3 references, err: [Inf, 0.8846890628982912, 0.3973976701997897] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 38, 11]]
** centroid: 2, normalized-entropy: 0.7682814090975241, [(2, 38), (3, 11)]
*** center 3: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.298299992676605] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.298299992676605, 0.6599385253262633] ***
*** finished computation of 3 references, err: [Inf, 1.298299992676605, 0.6599385253262633] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 8, 33]]
** centroid: 1, normalized-entropy: 0.7120640548905481, [(2, 8), (3, 33)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 24, 1]]
** centroid: 2, normalized-entropy: 0.24229218908241482, [(2, 24), (3, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.7285999820332427] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7285999820332427, 0.9003806083380524] ***
*** finished computation of 3 references, err: [Inf, 1.7285999820332427, 0.9003806083380524] ***
*** center 1: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 30, 34]]
** centroid: 2, normalized-entropy: 0.9971803988942641, [(2, 30), (3, 34)]
*** center 3: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 5.832000002392046] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 5.832000002392046, 2.1090358145442836] ***
*** finished computation of 3 references, err: [Inf, 5.832000002392046, 2.1090358145442836] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 14, 27]]
** centroid: 1, normalized-entropy: 0.9262122127346664, [(2, 14), (3, 27)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [30, 24, 0]]
** centroid: 3, normalized-entropy: 0.9910760598382222, [(1, 30), (2, 24)]
finished with 5 centroids; started with 3
generating 4 configurations using top 4 configurations, starting with 18)
[0.9666666666666667, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.94, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9, 0.9, 0.8999999999999999, 0.8933333333333334, 0.8933333333333334, 0.8933333333333332, 0.8733333333333334, 0.7999999999999999]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.9, 2) => 0.9666666666666667
finished with 19
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.792703203029416] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.792703203029416, 0.39062013409087243] ***
*** starting iteration: 2; err: [Inf, 0.792703203029416, 0.39062013409087243] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.792703203029416, 0.39062013409087243, 0.39062013409087243] ***
*** finished computation of 3 references, err: [Inf, 0.792703203029416, 0.39062013409087243, 0.39062013409087243] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 4, 26]]
** centroid: 1, normalized-entropy: 0.5665095065529052, [(2, 4), (3, 26)]
*** center 2: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 28, 8]]
** centroid: 3, normalized-entropy: 0.7642045065086204, [(2, 28), (3, 8)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0794122481574564] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0794122481574564, 0.3609982328494353] ***
*** starting iteration: 2; err: [Inf, 1.0794122481574564, 0.3609982328494353] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0794122481574564, 0.3609982328494353, 0.3380964312048709] ***
*** starting iteration: 3; err: [Inf, 1.0794122481574564, 0.3609982328494353, 0.3380964312048709] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0794122481574564, 0.3609982328494353, 0.3380964312048709, 0.33728339970731325] ***
*** finished computation of 3 references, err: [Inf, 1.0794122481574564, 0.3609982328494353, 0.3380964312048709, 0.33728339970731325] ***
*** center 1: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 23]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 29, 11]]
** centroid: 3, normalized-entropy: 0.8485481782946159, [(2, 29), (3, 11)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.7796553497109976] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7796553497109976, 0.3944465397826503] ***
*** starting iteration: 2; err: [Inf, 0.7796553497109976, 0.3944465397826503] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7796553497109976, 0.3944465397826503, 0.3728733649609065] ***
*** starting iteration: 3; err: [Inf, 0.7796553497109976, 0.3944465397826503, 0.3728733649609065] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7796553497109976, 0.3944465397826503, 0.3728733649609065, 0.36712256561907425] ***
*** starting iteration: 4; err: [Inf, 0.7796553497109976, 0.3944465397826503, 0.3728733649609065, 0.36712256561907425] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.7796553497109976, 0.3944465397826503, 0.3728733649609065, 0.36712256561907425, 0.36689397326375356] ***
*** finished computation of 3 references, err: [Inf, 0.7796553497109976, 0.3944465397826503, 0.3728733649609065, 0.36712256561907425, 0.36689397326375356] ***
*** center 1: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 24]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 37, 8]]
** centroid: 3, normalized-entropy: 0.6751914401458716, [(2, 37), (3, 8)]
finished with 3 centroids; started with 3
generating 4 configurations using top 4 configurations, starting with 19)
[0.9666666666666667, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.94, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9, 0.9, 0.8999999999999999, 0.8933333333333334, 0.8933333333333334, 0.8933333333333334, 0.8933333333333332, 0.8733333333333334, 0.7999999999999999]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.9, 2) => 0.9666666666666667
finished with 20
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.41482613498638415] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.41482613498638415, 0.2031460711492483] ***
*** starting iteration: 2; err: [Inf, 0.41482613498638415, 0.2031460711492483] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.41482613498638415, 0.2031460711492483, 0.1886199286859671] ***
*** starting iteration: 3; err: [Inf, 0.41482613498638415, 0.2031460711492483, 0.1886199286859671] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.41482613498638415, 0.2031460711492483, 0.1886199286859671, 0.18528636391586123] ***
*** finished computation of 7 references, err: [Inf, 0.41482613498638415, 0.2031460711492483, 0.1886199286859671, 0.18528636391586123] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 3, 14]]
** centroid: 1, normalized-entropy: 0.6722948170756378, [(2, 3), (3, 14)]
*** center 2: selecting labels [1] (freq >= 2) [from [24, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 15, 1]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 11]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 14, 8]]
** centroid: 5, normalized-entropy: 0.9456603046006401, [(2, 14), (3, 8)]
*** center 6: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [1, 0, 0]
*** center 7: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4321851929046842] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4321851929046842, 0.21152461509492754] ***
*** starting iteration: 2; err: [Inf, 0.4321851929046842, 0.21152461509492754] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4321851929046842, 0.21152461509492754, 0.19902052015084212] ***
*** starting iteration: 3; err: [Inf, 0.4321851929046842, 0.21152461509492754, 0.19902052015084212] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4321851929046842, 0.21152461509492754, 0.19902052015084212, 0.1964485570107338] ***
*** finished computation of 7 references, err: [Inf, 0.4321851929046842, 0.21152461509492754, 0.19902052015084212, 0.1964485570107338] ***
*** center 1: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 10, 1]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 11, 9]]
** centroid: 4, normalized-entropy: 0.9927744539878083, [(2, 11), (3, 9)]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 1, 17]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 8, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.36453575577793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.36453575577793, 0.1607627090291886] ***
*** starting iteration: 2; err: [Inf, 0.36453575577793, 0.1607627090291886] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.36453575577793, 0.1607627090291886, 0.15416813792269676] ***
*** starting iteration: 3; err: [Inf, 0.36453575577793, 0.1607627090291886, 0.15416813792269676] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.36453575577793, 0.1607627090291886, 0.15416813792269676, 0.15320735309019756] ***
*** finished computation of 7 references, err: [Inf, 0.36453575577793, 0.1607627090291886, 0.15416813792269676, 0.15320735309019756] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 0, 18]]
*** center 2: selecting labels [1] (freq >= 2) [from [22, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 12, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 13, 5]]
** centroid: 4, normalized-entropy: 0.8524051786494784, [(2, 13), (3, 5)]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 6: selecting labels [1] (freq >= 2) [from [8, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 13, 3]]
** centroid: 7, normalized-entropy: 0.6962122601251459, [(2, 13), (3, 3)]
finished with 9 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 20)
[0.9666666666666667, 0.9666666666666667, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.94, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9, 0.9, 0.8999999999999999, 0.8933333333333334, 0.8933333333333334, 0.8933333333333334, 0.8933333333333332, 0.8733333333333334, 0.7999999999999999]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.9, 2) => 0.9666666666666667
finished with 21
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.657707632164274] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.657707632164274, 0.27837213839573455] ***
*** finished computation of 7 references, err: [Inf, 0.657707632164274, 0.27837213839573455] ***
*** center 1: selecting labels [1] (freq >= 2) [from [8, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 17, 1]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 15, 8]]
** centroid: 3, normalized-entropy: 0.9321115676166747, [(2, 15), (3, 8)]
*** center 4: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 25]]
*** center 7: selecting labels [1] (freq >= 2) [from [5, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2835424910410146] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2835424910410146, 0.18277594166648148] ***
*** finished computation of 7 references, err: [Inf, 0.2835424910410146, 0.18277594166648148] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 19, 4]]
** centroid: 1, normalized-entropy: 0.6665783579949205, [(2, 19), (3, 4)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 6, 1]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 1, 19]]
*** center 4: selecting labels [1] (freq >= 2) [from [14, 0, 0]]
*** center 5: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 6: selecting labels [1] (freq >= 2) [from [22, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 4, 4]]
** centroid: 7, normalized-entropy: 1.0, [(2, 4), (3, 4)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4438472096040744] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4438472096040744, 0.26618368709206885] ***
*** finished computation of 7 references, err: [Inf, 0.4438472096040744, 0.26618368709206885] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 16, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 3, 26]]
** centroid: 2, normalized-entropy: 0.47983202361612853, [(2, 3), (3, 26)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 19, 6]]
** centroid: 3, normalized-entropy: 0.7950402793845225, [(2, 19), (3, 6)]
*** center 4: selecting labels [1] (freq >= 2) [from [5, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [3, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [13, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [9, 0, 0]]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 21)
[0.9666666666666667, 0.9666666666666667, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.94, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9, 0.9, 0.8999999999999999, 0.8933333333333334, 0.8933333333333334, 0.8933333333333334, 0.8933333333333332, 0.8733333333333334, 0.7999999999999999]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.9, 2) => 0.9666666666666667
finished with 21
iteration 7 finished
generating 4 configurations using top 4 configurations, starting with 21)
[0.9666666666666667, 0.9666666666666667, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.94, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9, 0.9, 0.8999999999999999, 0.8933333333333334, 0.8933333333333334, 0.8933333333333334, 0.8933333333333332, 0.8733333333333334, 0.7999999999999999]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.9, 2) => 0.9666666666666667
finished with 22
iteration 8 finished
*** starting iteration: 1; err: [Inf, 5.156500023860182] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 5.156500023860182, 0.7336286773000631] ***
*** starting iteration: 2; err: [Inf, 5.156500023860182, 0.7336286773000631] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 5.156500023860182, 0.7336286773000631, 0.2796718748074737] ***
*** starting iteration: 3; err: [Inf, 5.156500023860182, 0.7336286773000631, 0.2796718748074737] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 5.156500023860182, 0.7336286773000631, 0.2796718748074737, 0.27793635611925405] ***
*** finished computation of 7 references, err: [Inf, 5.156500023860182, 0.7336286773000631, 0.2796718748074737, 0.27793635611925405] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 16, 1]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 16, 4]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(2, 16), (3, 4)]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 14]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 4]]
*** center 6: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 11]]
finished with 6 centroids; started with 7
*** starting iteration: 1; err: [Inf, 2.739800004087324] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 2.739800004087324, 0.3440576908139208] ***
*** starting iteration: 2; err: [Inf, 2.739800004087324, 0.3440576908139208] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 2.739800004087324, 0.3440576908139208, 0.27619221035375613] ***
*** starting iteration: 3; err: [Inf, 2.739800004087324, 0.3440576908139208, 0.27619221035375613] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 2.739800004087324, 0.3440576908139208, 0.27619221035375613, 0.2727098276637484] ***
*** finished computation of 7 references, err: [Inf, 2.739800004087324, 0.3440576908139208, 0.27619221035375613, 0.2727098276637484] ***
*** center 1: selecting labels [3] (freq >= 2) [from [0, 1, 9]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 16, 1]]
*** center 3: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 16]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 7, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 6, 1]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 2.1766000150030402] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 2.1766000150030402, 0.3696794719828145] ***
*** starting iteration: 2; err: [Inf, 2.1766000150030402, 0.3696794719828145] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 2.1766000150030402, 0.3696794719828145, 0.26665211423200114] ***
*** starting iteration: 3; err: [Inf, 2.1766000150030402, 0.3696794719828145, 0.26665211423200114] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 2.1766000150030402, 0.3696794719828145, 0.26665211423200114, 0.2574537237828975] ***
*** finished computation of 7 references, err: [Inf, 2.1766000150030402, 0.3696794719828145, 0.26665211423200114, 0.2574537237828975] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 3, 11]]
** centroid: 1, normalized-entropy: 0.7495952572594798, [(2, 3), (3, 11)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 8, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 17, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 10, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 5]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 16]]
finished with 7 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 22)
[0.9666666666666667, 0.9666666666666667, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.94, 0.9333333333333332, 0.9266666666666666, 0.9199999999999999, 0.9199999999999999, 0.9, 0.9, 0.8999999999999999, 0.8933333333333334, 0.8933333333333334, 0.8933333333333334, 0.8933333333333332, 0.8733333333333334, 0.7999999999999999]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.9, 2) => 0.9666666666666667
finished with 22
iteration 9 finished
[ Info: ========== BEST MODEL ==========
[ Info: (AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.9, 2), 0.9666666666666667)
[ Info: AKNC{Array{Float64,1}}[AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[6.571428571428572, 3.085714285714286, 5.521428571428572, 2.2071428571428573], [7.225, 3.0, 5.949999999999999, 1.85], [5.048571428571427, 3.3999999999999995, 1.5142857142857142, 0.2828571428571429], [5.838461538461538, 2.623076923076923, 4.846153846153846, 1.7307692307692308], [7.6000000000000005, 3.733333333333333, 6.400000000000001, 2.2333333333333334], [6.033333333333332, 2.837037037037037, 4.266666666666667, 1.3148148148148147], [7.574999999999999, 2.925, 6.425000000000001, 2.05]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [3, 3, 1, 3, 3, 2, 3], 3), KCenters.var"#fun#70"{SimilaritySearch.var"#_lp#1"{Float64}}(SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25)), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.9, 2)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[6.249999999999998, 2.9222222222222216, 4.594444444444445, 1.5166666666666668], [6.9375, 2.975, 5.6875, 2.0375], [7.6, 3.25, 6.5, 2.225], [5.022222222222221, 3.4444444444444446, 1.486111111111111, 0.25000000000000006], [5.4941176470588236, 2.5941176470588236, 4.041176470588234, 1.241176470588235], [6.262499999999999, 2.8125, 5.3500000000000005, 1.7500000000000002], [6.077777777777777, 2.9444444444444446, 5.344444444444445, 2.177777777777778]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2, 3, 3, 1, 2, 3, 3], 3), KCenters.var"#fun#70"{SimilaritySearch.var"#_lp#1"{Float64}}(SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25)), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.9, 2)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}([[4.9399999999999995, 3.3766666666666674, 1.43, 0.22000000000000008], [6.116666666666667, 3.0416666666666665, 5.275, 2.05], [6.671428571428572, 2.9285714285714284, 4.728571428571429, 1.4857142857142858], [6.523076923076923, 2.869230769230769, 5.3076923076923075, 1.9000000000000001], [5.822580645161289, 2.7161290322580647, 4.12258064516129, 1.2838709677419353], [7.7, 2.7999999999999994, 6.566666666666666, 2.1999999999999997], [7.1000000000000005, 3.1, 6.066666666666666, 1.9666666666666666]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1, 3, 2, 3, 2, 3, 3], 3), KCenters.var"#fun#70"{SimilaritySearch.var"#_lp#1"{Float64}}(SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25)), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 3, 1.0, :dnet, 0.9, 2))]
Test Summary: | Pass  Total
AKNC          |    1      1
[72, 25, 1, 2, 1, 1, 17, 17, 7, 22, 33, 1, 26, 2, 36, 25, 23, 25, 47, 56, 40, 29, 39, 30, 21, 2, 34, 25, 35, 50, 42, 37, 7, 25, 19, 47, 34, 28, 33, 46, 64, 27, 37, 17, 17, 45, 5, 53, 40, 37, 34, 28, 7, 43, 36, 31, 34, 37, 26, 15, 34, 38, 15, 29, 32, 39, 31, 19, 1, 1, 28, 41, 27, 28, 24, 6, 25, 2, 39, 21, 34, 35, 15, 18, 1, 36, 26, 42, 23, 25, 21, 26, 46, 32, 30, 28, 34, 38, 46, 23, 34, 51, 1, 32, 1, 39, 39, 54, 35, 33, 12, 44, 41, 26, 3, 31, 19, 25, 43, 29, 57, 27, 36, 20, 28, 55, 39, 35, 57, 11, 43, 33, 25, 31, 41, 40, 37, 69, 38, 31, 36, 35, 39, 45, 27, 35, 38, 1, 36, 41, 41, 31, 28, 56, 44, 31, 43, 40, 37, 15, 19, 33, 48, 48, 49, 15, 63, 21, 57, 35, 50, 24, 23, 46, 48, 41, 52, 2, 29, 26, 22, 47, 34, 27, 25, 35, 53, 42, 38, 82, 37, 43, 34, 1, 54, 1, 41, 39, 39, 28, 30, 54, 34, 54, 29, 32, 73, 32, 39, 52, 32, 45, 33, 27, 30, 24, 17, 36, 32, 49, 37, 24, 26, 37, 30, 53, 19, 39, 81, 1, 41, 28, 50, 34, 39, 32, 39, 43, 2, 17, 38, 59, 34, 37, 43, 46, 24, 34, 51, 45, 30, 26, 44, 50, 33, 41, 45, 38, 38, 10, 43, 48, 53, 68, 39, 15, 26, 30, 46, 49, 36, 41, 46, 57, 12, 45, 35, 42, 36, 42, 33, 63, 39, 21, 59, 28, 37, 42, 43, 25, 40, 52, 34, 23, 43, 34, 34, 36, 22, 42]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6210000000000001, speedup = 0.44102100413598866, eval_ratio = 0.042258)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.37673611111111127,"recall":0.37673611111111127,"f1":null,"seconds":7.003173232078552e-5,"exhaustive_search_seconds":0.00040392205119132996,"evaluations":340.40625,"distances_sum":1739.4794155044442}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5581597222222223,"recall":0.5581597222222223,"f1":null,"seconds":0.0001025814563035965,"exhaustive_search_seconds":0.00040392205119132996,"evaluations":379.6796875,"distances_sum":1613.9647331928138}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6562499999999997,"recall":0.6562499999999997,"f1":null,"seconds":0.0001348312944173813,"exhaustive_search_seconds":0.00040392205119132996,"evaluations":421.03125,"distances_sum":1569.5040090459786}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7265624999999996,"recall":0.7265624999999996,"f1":0.7265624999999996,"seconds":0.00016736052930355072,"exhaustive_search_seconds":0.00040392205119132996,"evaluations":459.921875,"distances_sum":1547.527558964552}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7803819444444439,"recall":0.7803819444444439,"f1":0.7803819444444439,"seconds":0.00026079826056957245,"exhaustive_search_seconds":0.00040392205119132996,"evaluations":500.6953125,"distances_sum":1531.0499815035337}
KCenters.DeloneInvIndex> reached performance {"precision":0.8281249999999992,"recall":0.8281249999999992,"f1":0.8281249999999992,"seconds":0.00022525712847709656,"exhaustive_search_seconds":0.00040392205119132996,"evaluations":540.515625,"distances_sum":1520.464803436827}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.786, speedup = 1.826743319939992, eval_ratio = 0.054479)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
   Testing KCenters tests passed 
