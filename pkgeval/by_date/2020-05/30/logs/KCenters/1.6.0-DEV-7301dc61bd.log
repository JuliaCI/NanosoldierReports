Julia Version 1.6.0-DEV.137
Commit 7301dc61bd (2020-05-30 15:02 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed MappedArrays ──────────────── v0.2.2
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed Parsers ───────────────────── v1.0.4
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed MLDataPattern ─────────────── v0.5.3
  Installed StatsBase ─────────────────── v0.32.2
  Installed Missings ──────────────────── v0.4.3
  Installed LearnBase ─────────────────── v0.2.2
  Installed PooledArrays ──────────────── v0.5.3
  Installed DataAPI ───────────────────── v1.3.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed OrderedCollections ────────── v1.2.0
  Installed DataStructures ────────────── v0.17.17
  Installed JSON ──────────────────────── v0.21.0
  Installed MLDataUtils ───────────────── v0.5.1
  Installed DataValueInterfaces ───────── v1.0.0
  Installed TableTraits ───────────────── v1.0.0
  Installed Compat ────────────────────── v3.10.0
  Installed Reexport ──────────────────── v0.2.0
  Installed Tables ────────────────────── v1.0.4
  Installed CategoricalArrays ─────────── v0.7.7
  Installed SimilaritySearch ──────────── v0.3.19
  Installed DataFrames ────────────────── v0.20.2
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.10.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.17
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.4
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_VQciOP/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_VQciOP/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.10.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.17
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.4
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9367083616058032
[ Info: 0.8302954188982645
[ Info: 0.5553847705821197
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.32982491600016756
mean(cdnet.distances) = 0.3861423413703839
mean(crand.distances) = 0.34743563525378707
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.62890625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.62890625,"f1":0.7576340326340333,"seconds":5.045905709266663e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.6796875,"distances_sum":1778.607907189314}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.62890625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.62890625,"f1":0.7576340326340333,"seconds":5.045905709266663e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.6796875,"distances_sum":1778.607907189314}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7421875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7421875,"f1":0.8428498584748593,"seconds":5.2265822887420654e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.1328125,"distances_sum":2103.1943172277934}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7421875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7421875,"f1":0.8428498584748593,"seconds":5.2265822887420654e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.1328125,"distances_sum":2103.1943172277934}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9394662629037634,"seconds":6.05359673500061e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.7421875,"distances_sum":2700.261672151346}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9329155219780226,"seconds":6.0051679611206055e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.65625,"distances_sum":2624.9994190452217}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.896484375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.896484375,"f1":0.9394662629037634,"seconds":6.05359673500061e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.7421875,"distances_sum":2700.261672151346}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.896484375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.896484375,"f1":0.9394662629037634,"seconds":6.05359673500061e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.7421875,"distances_sum":2700.261672151346}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.86426073926074,"seconds":5.0514936447143555e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.3203125,"distances_sum":1879.4686383490803}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.595703125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.595703125,"f1":null,"seconds":4.384666681289673e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":6.890625,"distances_sum":1363.348224845147}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4091796875, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.4091796875,"f1":null,"seconds":3.550201654434204e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":6.0078125,"distances_sum":878.6036987909482}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.771484375,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.771484375,"f1":0.86426073926074,"seconds":5.0514936447143555e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.3203125,"distances_sum":1879.4686383490803}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8670053904428913,"seconds":4.811212420463562e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.28125,"distances_sum":1911.7523662552987}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9578754578754584,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.8203125,"distances_sum":2517.1343616801896}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7919921875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7919921875,"f1":0.8776962620712628,"seconds":5.075708031654358e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.34375,"distances_sum":1929.3315034500679}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9578754578754584,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.8203125,"distances_sum":2517.1343616801896}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9720238095238098,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.9375,"distances_sum":2576.9464385460587}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9619677197802203,"seconds":5.5655837059021e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.90625,"distances_sum":2508.8531066056516}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9611664377289381,"seconds":5.403533577919006e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.8671875,"distances_sum":2512.708580590562}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9720238095238098,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.9375,"distances_sum":2576.9464385460587}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9720238095238098,"seconds":5.822628736495972e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.9375,"distances_sum":2576.9464385460587}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2314453125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2314453125,"f1":null,"seconds":3.468245267868042e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.5546875,"distances_sum":556.5614153393475}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4306640625, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.4306640625,"f1":null,"seconds":3.919005393981934e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.8828125,"distances_sum":1016.7362039492052}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7109375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.7109375,"f1":0.8202906468531477,"seconds":4.868954420089722e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.109375,"distances_sum":1801.9344819765145}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7109375,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.7109375,"f1":0.8202906468531477,"seconds":4.868954420089722e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.109375,"distances_sum":1801.9344819765145}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8688878829503838,"seconds":5.345791578292847e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.4921875,"distances_sum":2014.8876912095336}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9057208416583425,"seconds":5.6121498346328735e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.859375,"distances_sum":2208.1516008126177}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8510192932067939,"seconds":5.21540641784668e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.5,"distances_sum":1891.0071014518012}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8369140625,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.8369140625,"f1":0.9057208416583425,"seconds":5.6121498346328735e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.859375,"distances_sum":2208.1516008126177}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.943624084249085,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9609375,"distances_sum":2434.748136290672}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9342808233433239,"seconds":5.9194862842559814e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9765625,"distances_sum":2396.969926396501}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9581215659340662,"seconds":6.102025508880615e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9453125,"distances_sum":2569.3962527827525}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9657738095238098,"seconds":6.0908496379852295e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9765625,"distances_sum":2608.752997787958}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9569826007326013,"seconds":6.064772605895996e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9609375,"distances_sum":2543.4433484325223}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.968086080586081,"seconds":5.841255187988281e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.984375,"distances_sum":2643.701156817045}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.968086080586081,"seconds":5.841255187988281e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.984375,"distances_sum":2643.701156817045}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.968086080586081,"seconds":5.841255187988281e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.984375,"distances_sum":2643.701156817045}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8550709706959715,"seconds":5.505979061126709e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.421875,"distances_sum":1821.9428106411865}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7587890625,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7587890625,"f1":0.8550709706959715,"seconds":5.505979061126709e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.421875,"distances_sum":1821.9428106411865}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.9081845238095246,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.828125,"distances_sum":2094.6275295930486}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.83984375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.83984375,"f1":0.9081845238095246,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.828125,"distances_sum":2094.6275295930486}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9654590201465207,"seconds":5.943700671195984e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9609375,"distances_sum":2506.8600899155017}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9314102564102574,"seconds":5.943700671195984e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9296875,"distances_sum":2266.717658679515}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9654590201465207,"seconds":5.943700671195984e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9609375,"distances_sum":2506.8600899155017}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9654590201465207,"seconds":5.943700671195984e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.9609375,"distances_sum":2506.8600899155017}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.361328125, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.361328125,"f1":null,"seconds":3.5762786865234375e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":5.3203125,"distances_sum":857.4846111359454}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6396484375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6396484375,"f1":0.7669176309801317,"seconds":4.82611358165741e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.53125,"distances_sum":1633.3401748747992}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1591796875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1591796875,"f1":null,"seconds":3.112480044364929e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":4.71875,"distances_sum":431.98485315156546}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.732421875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.732421875,"f1":0.8370114260739269,"seconds":5.392357707023621e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.921875,"distances_sum":1933.7188197194348}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.732421875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.732421875,"f1":0.8370114260739269,"seconds":5.392357707023621e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.921875,"distances_sum":1933.7188197194348}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9358547702297708,"seconds":6.066635251045227e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.7109375,"distances_sum":2479.8588240528047}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9507357226107233,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8046875,"distances_sum":2563.392890334077}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9483859890109896,"seconds":5.679205060005188e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.734375,"distances_sum":2544.122068237069}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9322802197802205,"seconds":5.932524800300598e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.671875,"distances_sum":2445.476806958222}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8973391192141202,"seconds":5.3979456424713135e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.5625,"distances_sum":2191.7248415918298}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7333984375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7333984375,"f1":0.8366539710289719,"seconds":5.0477683544158936e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.9609375,"distances_sum":1900.5316452315024}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.748046875, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.748046875,"f1":0.8465269105894114,"seconds":5.427747964859009e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.078125,"distances_sum":1964.2986268421273}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9150390625,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.9507357226107233,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8046875,"distances_sum":2563.392890334077}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9788347069597074,"seconds":5.891546607017517e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9375,"distances_sum":2737.212638806621}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":2,"bsize":13}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.978794642857143,"seconds":6.232410669326782e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.921875,"distances_sum":2736.760474836627}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.952555777555778,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.78125,"distances_sum":2551.9329498579373}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9618532509157515,"seconds":5.843117833137512e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.859375,"distances_sum":2604.8946415692303}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9520718864468872,"seconds":5.820766091346741e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.859375,"distances_sum":2534.734884231306}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9724187271062272,"seconds":6.126239895820618e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.921875,"distances_sum":2693.0538234749524}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9788347069597074,"seconds":5.891546607017517e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9375,"distances_sum":2737.212638806621}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9788347069597074,"seconds":5.891546607017517e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9375,"distances_sum":2737.212638806621}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3564453125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3564453125,"f1":null,"seconds":3.816559910774231e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":5.5859375,"distances_sum":693.0017173030915}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.22265625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.22265625,"f1":null,"seconds":3.2801181077957153e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":4.65625,"distances_sum":555.3673516142466}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3564453125,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3564453125,"f1":null,"seconds":3.816559910774231e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":5.5859375,"distances_sum":693.0017173030915}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.373046875, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.373046875,"f1":null,"seconds":3.505498170852661e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":5.828125,"distances_sum":731.491405665791}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8472371378621388,"seconds":5.232170224189758e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.9453125,"distances_sum":1548.4870301166286}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.75,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.75,"f1":0.8472371378621388,"seconds":5.232170224189758e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.9453125,"distances_sum":1548.4870301166286}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9234890109890118,"seconds":5.941838026046753e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.6015625,"distances_sum":1996.94295297724}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7939453125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.7939453125,"f1":0.8755015817515825,"seconds":5.556270480155945e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.9140625,"distances_sum":1745.1351907767396}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9516426282051285,"seconds":0.00010481476783752441,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.703125,"distances_sum":2152.832620924493}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9332563270063277,"seconds":5.362555384635925e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.578125,"distances_sum":2050.307224278357}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9002924159174168,"seconds":5.070120096206665e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.1015625,"distances_sum":1854.8545291735938}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9140625,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9516426282051285,"seconds":0.00010481476783752441,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.703125,"distances_sum":2152.832620924493}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9140625,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9140625,"f1":0.9516426282051285,"seconds":0.00010481476783752441,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.703125,"distances_sum":2152.832620924493}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6513671875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6513671875,"f1":0.7775693056943065,"seconds":4.598870873451233e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.7421875,"distances_sum":1346.554673785759}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.68359375, conf: {"ssize":3,"bsize":4}, perf: {"precision":null,"recall":0.68359375,"f1":null,"seconds":4.589557647705078e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.9296875,"distances_sum":1437.7283266794768}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.68359375,"state":{"ssize":3,"bsize":4},"perf":{"precision":null,"recall":0.68359375,"f1":null,"seconds":4.589557647705078e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.9296875,"distances_sum":1437.7283266794768}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9360061813186819,"seconds":5.498528480529785e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.6953125,"distances_sum":2116.194372768616}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9572229853479858,"seconds":5.453824996948242e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7578125,"distances_sum":2288.2268093894013}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9572229853479858,"seconds":5.453824996948242e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7578125,"distances_sum":2288.2268093894013}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":8,"bsize":12}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9757097069597074,"seconds":5.859881639480591e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9375,"distances_sum":2367.794256914053}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96484375, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.96484375,"f1":0.9806375915750917,"seconds":5.889683961868286e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9609375,"distances_sum":2398.0718661138812}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":7,"bsize":12}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.9779017857142862,"seconds":5.6121498346328735e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.953125,"distances_sum":2375.1594309340257}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.96856684981685,"seconds":5.848705768585205e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.875,"distances_sum":2327.495009108555}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9774381868131872,"seconds":5.660578608512878e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9375,"distances_sum":2374.2300487920875}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.96484375,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9806375915750917,"seconds":5.889683961868286e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9609375,"distances_sum":2398.0718661138812}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.96484375,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9806375915750917,"seconds":5.889683961868286e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9609375,"distances_sum":2398.0718661138812}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2958984375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2958984375,"f1":null,"seconds":3.0919909477233887e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":5.40625,"distances_sum":690.5309315830962}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.375, conf: {"ssize":1,"bsize":2}, perf: {"precision":1.0,"recall":0.375,"f1":0.523232323232323,"seconds":3.341585397720337e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":5.484375,"distances_sum":769.726369836906}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.375,"state":{"ssize":1,"bsize":2},"perf":{"precision":1.0,"recall":0.375,"f1":0.523232323232323,"seconds":3.341585397720337e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":5.484375,"distances_sum":769.726369836906}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6513671875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6513671875,"f1":0.7751975455100463,"seconds":4.505738615989685e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.5546875,"distances_sum":1453.6887613064791}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.8989276348651356,"seconds":5.185604095458984e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.375,"distances_sum":1994.3306742814261}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7470703125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7470703125,"f1":0.8436912046287054,"seconds":4.718080163002014e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.9765625,"distances_sum":1702.1872125740274}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.828125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.828125,"f1":0.8989276348651356,"seconds":5.185604095458984e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.375,"distances_sum":1994.3306742814261}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9348333957708961,"seconds":5.258247256278992e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.640625,"distances_sum":2264.9930632117357}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9477564102564108,"seconds":5.3979456424713135e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.7578125,"distances_sum":2334.774831517967}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9366872710622715,"seconds":5.1818788051605225e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.6328125,"distances_sum":2245.972002248006}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9543612637362645,"seconds":5.336478352546692e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8125,"distances_sum":2352.071292610161}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9543612637362645,"seconds":5.336478352546692e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8125,"distances_sum":2352.071292610161}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.919921875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9543612637362645,"seconds":5.336478352546692e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.8125,"distances_sum":2352.071292610161}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.556640625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.556640625,"f1":0.7023400210900216,"seconds":4.041939973831177e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.2109375,"distances_sum":1165.3817046557635}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.556640625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.556640625,"f1":0.7023400210900216,"seconds":4.041939973831177e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.2109375,"distances_sum":1165.3817046557635}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8542892871017878,"seconds":4.863366484642029e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.921875,"distances_sum":1735.8729761669172}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7626953125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7626953125,"f1":0.8542892871017878,"seconds":4.863366484642029e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":7.921875,"distances_sum":1735.8729761669172}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9648294413919417,"seconds":5.543231964111328e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.765625,"distances_sum":2422.9029693721927}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9426053113553119,"seconds":5.282461643218994e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.7265625,"distances_sum":2219.928681792985}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9648294413919417,"seconds":5.543231964111328e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.765625,"distances_sum":2422.9029693721927}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9648294413919417,"seconds":5.543231964111328e-6,"exhaustive_search_seconds":1.2647360563278198e-6,"evaluations":8.765625,"distances_sum":2422.9029693721927}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.26171875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.26171875,"f1":null,"seconds":3.039836883544922e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":5.6796875,"distances_sum":631.9776291622603}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.26171875,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.26171875,"f1":null,"seconds":3.039836883544922e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":5.6796875,"distances_sum":631.9776291622603}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.376953125, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.376953125,"f1":null,"seconds":3.244727849960327e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":5.671875,"distances_sum":842.7108790739942}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.376953125,"state":{"ssize":2,"bsize":2},"perf":{"precision":null,"recall":0.376953125,"f1":null,"seconds":3.244727849960327e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":5.671875,"distances_sum":842.7108790739942}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5751953125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5751953125,"f1":0.7159545315795321,"seconds":4.189088940620422e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":7.234375,"distances_sum":1267.279440795858}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8619229728604738,"seconds":4.950910806655884e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.0390625,"distances_sum":1783.8741012991484}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5498046875, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5498046875,"f1":0.6969799297924303,"seconds":3.87243926525116e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":7.0859375,"distances_sum":1160.4770698332254}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.8604934995560003,"seconds":4.971399903297424e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.1015625,"distances_sum":1786.5244018191017}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.693359375, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.693359375,"f1":0.8119255744255751,"seconds":4.5746564865112305e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":7.9453125,"distances_sum":1554.7185905271049}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.771484375,"state":{"ssize":7,"bsize":5},"perf":{"precision":1.0,"recall":0.771484375,"f1":0.8604934995560003,"seconds":4.971399903297424e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.1015625,"distances_sum":1786.5244018191017}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.771484375,"state":{"ssize":7,"bsize":5},"perf":{"precision":1.0,"recall":0.771484375,"f1":0.8604934995560003,"seconds":4.971399903297424e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.1015625,"distances_sum":1786.5244018191017}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6767578125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6767578125,"f1":0.7922697094572102,"seconds":4.503875970840454e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":7.7734375,"distances_sum":1473.3292398520089}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3525390625, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.3525390625,"f1":null,"seconds":3.293156623840332e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":5.421875,"distances_sum":782.8653553996219}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.501953125, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.501953125,"f1":null,"seconds":3.7867575883865356e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":6.3515625,"distances_sum":1106.1094175994212}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6767578125,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6767578125,"f1":0.7922697094572102,"seconds":4.503875970840454e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":7.7734375,"distances_sum":1473.3292398520089}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.8478573509823518,"seconds":4.937872290611267e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.1875,"distances_sum":1696.1160714924451}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8203125, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8203125,"f1":0.8936615467865475,"seconds":4.986301064491272e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.4453125,"distances_sum":1973.433765427282}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8961944305694312,"seconds":4.997476935386658e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.4609375,"distances_sum":1990.928634982489}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.8651447510822521,"seconds":4.716217517852783e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.3203125,"distances_sum":1783.6851655707453}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.791015625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.791015625,"f1":0.8732923326673334,"seconds":4.969537258148193e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.375,"distances_sum":1845.6119223794353}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.802734375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.802734375,"f1":0.8828556859806869,"seconds":5.193054676055908e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.375,"distances_sum":1895.9248027030121}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.8692401348651355,"seconds":4.908069968223572e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.328125,"distances_sum":1829.8551210702708}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.822265625,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.822265625,"f1":0.8961944305694312,"seconds":4.997476935386658e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.4609375,"distances_sum":1990.928634982489}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.8993366008991017,"seconds":5.232170224189758e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.4375,"distances_sum":1999.665016518658}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9671531593406598,"seconds":5.455687642097473e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.859375,"distances_sum":2452.506324715164}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9393200549450558,"seconds":5.403533577919006e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.765625,"distances_sum":2301.172699709698}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9604567307692312,"seconds":5.543231964111328e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.9453125,"distances_sum":2366.880120995928}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9671531593406598,"seconds":5.455687642097473e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.859375,"distances_sum":2452.506324715164}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9671531593406598,"seconds":5.455687642097473e-6,"exhaustive_search_seconds":1.259148120880127e-6,"evaluations":8.859375,"distances_sum":2452.506324715164}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2568359375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2568359375,"f1":null,"seconds":2.898275852203369e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":5.8046875,"distances_sum":644.4249651757375}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5830078125, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5830078125,"f1":0.7225215756465763,"seconds":4.172325134277344e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":6.921875,"distances_sum":1304.1539201353175}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5830078125,"state":{"ssize":2,"bsize":3},"perf":{"precision":1.0,"recall":0.5830078125,"f1":0.7225215756465763,"seconds":4.172325134277344e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":6.921875,"distances_sum":1304.1539201353175}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9037233599733607,"seconds":4.995614290237427e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.2734375,"distances_sum":2159.251252215831}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9007992007992016,"seconds":5.124136805534363e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.2578125,"distances_sum":2116.832532541411}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.671875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.671875,"f1":0.7894222097347106,"seconds":4.2729079723358154e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":7.515625,"distances_sum":1562.6073413702832}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.689453125, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.689453125,"f1":0.8041243478743487,"seconds":4.801899194717407e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":7.6953125,"distances_sum":1620.3121211361567}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8369140625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8369140625,"f1":0.9037233599733607,"seconds":4.995614290237427e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.2734375,"distances_sum":2159.251252215831}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9424965659340666,"seconds":5.492940545082092e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.625,"distances_sum":2425.241014367198}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9610748626373629,"seconds":5.491077899932861e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.7890625,"distances_sum":2522.84428117418}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9489297161172165,"seconds":5.971640348434448e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.65625,"distances_sum":2474.9602774269247}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9409855769230776,"seconds":5.273148417472839e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.6640625,"distances_sum":2377.9333720499185}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9469780219780226,"seconds":5.517154932022095e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.6796875,"distances_sum":2442.922070694894}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9610748626373629,"seconds":5.491077899932861e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.7890625,"distances_sum":2522.84428117418}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9306640625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9610748626373629,"seconds":5.491077899932861e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.7890625,"distances_sum":2522.84428117418}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.40234375, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.40234375,"f1":null,"seconds":3.466382622718811e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":5.625,"distances_sum":909.4885338708543}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.26953125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.26953125,"f1":null,"seconds":3.2745301723480225e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":5.7578125,"distances_sum":646.2269855651232}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.40234375,"state":{"ssize":2,"bsize":2},"perf":{"precision":null,"recall":0.40234375,"f1":null,"seconds":3.466382622718811e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":5.625,"distances_sum":909.4885338708543}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5595703125, conf: {"ssize":6,"bsize":3}, perf: {"precision":1.0,"recall":0.5595703125,"f1":0.7004620379620387,"seconds":3.818422555923462e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":6.515625,"distances_sum":1304.6686059969811}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.572265625, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.572265625,"f1":0.7115738428238436,"seconds":3.959983587265015e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":6.609375,"distances_sum":1278.3213725377886}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5751953125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5751953125,"f1":null,"seconds":4.45730984210968e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":6.625,"distances_sum":1302.5445507064487}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5751953125,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5751953125,"f1":null,"seconds":4.45730984210968e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":6.625,"distances_sum":1302.5445507064487}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6708984375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6708984375,"f1":0.7916129009879018,"seconds":4.36045229434967e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.4140625,"distances_sum":1583.4495993568262}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.662109375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.662109375,"f1":0.7863194097569105,"seconds":4.451721906661987e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.296875,"distances_sum":1574.5264588482041}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9324550449550456,"seconds":5.241483449935913e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.4140625,"distances_sum":2379.511444419202}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8203125, conf: {"ssize":9,"bsize":6}, perf: {"precision":1.0,"recall":0.8203125,"f1":0.8939768564768574,"seconds":5.1390379667282104e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.25,"distances_sum":2169.8050213448228}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8818359375,"state":{"ssize":8,"bsize":7},"perf":{"precision":1.0,"recall":0.8818359375,"f1":0.9324550449550456,"seconds":5.241483449935913e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.4140625,"distances_sum":2379.511444419202}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8818359375,"state":{"ssize":8,"bsize":7},"perf":{"precision":1.0,"recall":0.8818359375,"f1":0.9324550449550456,"seconds":5.241483449935913e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.4140625,"distances_sum":2379.511444419202}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.361328125, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.361328125,"f1":null,"seconds":3.1758099794387817e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":5.4921875,"distances_sum":907.3119501899297}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3544921875, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.3544921875,"f1":null,"seconds":3.298744559288025e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":5.328125,"distances_sum":895.2222698226659}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.361328125,"state":{"ssize":4,"bsize":2},"perf":{"precision":null,"recall":0.361328125,"f1":null,"seconds":3.1758099794387817e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":5.4921875,"distances_sum":907.3119501899297}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.81640625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.81640625,"f1":0.8926282051282058,"seconds":4.995614290237427e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.453125,"distances_sum":2152.0624410686783}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9073260073260082,"seconds":5.463138222694397e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.5390625,"distances_sum":2260.6395132802727}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8408203125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8408203125,"f1":0.9073260073260082,"seconds":5.463138222694397e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.5390625,"distances_sum":2260.6395132802727}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9607371794871801,"seconds":5.211681127548218e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.78125,"distances_sum":2664.151840689374}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9289351273726277,"seconds":5.11854887008667e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.5546875,"distances_sum":2474.1108907784183}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9581959706959711,"seconds":5.4407864809036255e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.796875,"distances_sum":2630.1045947470866}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9688644688644691,"seconds":5.802139639854431e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8828125,"distances_sum":2710.3960113695953}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9570341117216125,"seconds":5.204230546951294e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.7734375,"distances_sum":2637.391505546851}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9324519230769236,"seconds":5.189329385757446e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.6796875,"distances_sum":2470.992520659782}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9237179487179494,"seconds":5.064532160758972e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.5390625,"distances_sum":2397.5337218681884}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9688644688644691,"seconds":5.802139639854431e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8828125,"distances_sum":2710.3960113695953}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9688644688644691,"seconds":5.802139639854431e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8828125,"distances_sum":2710.3960113695953}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6953125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6953125,"f1":0.8099369380619389,"seconds":4.377216100692749e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.6796875,"distances_sum":1812.426775998688}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.494140625, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.494140625,"f1":null,"seconds":3.6656856536865234e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":6.1796875,"distances_sum":1203.6135710810074}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8640068265068271,"seconds":4.837289452552795e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.84375,"distances_sum":2115.908917111093}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7763671875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7763671875,"f1":0.8640068265068271,"seconds":4.837289452552795e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.84375,"distances_sum":2115.908917111093}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.946305777555778,"seconds":5.3998082876205444e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.6796875,"distances_sum":2654.8150626046768}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7880859375,"f1":0.8691738816738824,"seconds":4.997476935386658e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.03125,"distances_sum":2138.6234198977527}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9018606393606401,"seconds":5.070120096206665e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.3203125,"distances_sum":2318.972905775916}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9307291666666673,"seconds":5.9138983488082886e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.46875,"distances_sum":2507.008350397838}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7939453125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7939453125,"f1":0.8753865925740932,"seconds":4.8354268074035645e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.96875,"distances_sum":2176.194355701719}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.90625,"f1":0.946305777555778,"seconds":5.3998082876205444e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.6796875,"distances_sum":2654.8150626046768}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.953817536630037,"seconds":5.342066287994385e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.7421875,"distances_sum":2692.411540786292}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9753720238095243,"seconds":5.4854899644851685e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.875,"distances_sum":2830.7926455395514}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9569081959706963,"seconds":5.31412661075592e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.75,"distances_sum":2712.9445179255586}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9672447344322351,"seconds":5.2247196435928345e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8359375,"distances_sum":2783.1961718374014}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9526614010989018,"seconds":5.153939127922058e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.734375,"distances_sum":2684.2815027321108}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9753720238095243,"seconds":5.4854899644851685e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.875,"distances_sum":2830.7926455395514}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9753720238095243,"seconds":5.4854899644851685e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.875,"distances_sum":2830.7926455395514}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.525390625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.525390625,"f1":0.6680796633921638,"seconds":3.7420541048049927e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":6.5078125,"distances_sum":1361.460259287574}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.642578125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.642578125,"f1":0.7647168803418811,"seconds":4.259869456291199e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.296875,"distances_sum":1708.0759723763779}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.642578125,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.642578125,"f1":0.7647168803418811,"seconds":4.259869456291199e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.296875,"distances_sum":1708.0759723763779}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.70703125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.70703125,"f1":0.8167431526806536,"seconds":4.563480615615845e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.765625,"distances_sum":1851.3600647092942}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9356570512820519,"seconds":5.386769771575928e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.6640625,"distances_sum":2622.3903451544115}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8648814726939735,"seconds":4.9602240324020386e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.1953125,"distances_sum":2112.0513744103273}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.798828125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.798828125,"f1":0.881001290376291,"seconds":5.0961971282958984e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.296875,"distances_sum":2237.5847987747634}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8896484375,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.8896484375,"f1":0.9356570512820519,"seconds":5.386769771575928e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.6640625,"distances_sum":2622.3903451544115}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9749656593406597,"seconds":5.5246055126190186e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.875,"distances_sum":2879.363210110007}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9658203125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9658203125,"f1":0.98139880952381,"seconds":5.60469925403595e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.953125,"distances_sum":2904.534797084062}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9458250083250088,"seconds":5.111098289489746e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.7265625,"distances_sum":2676.557756725175}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9638278388278394,"seconds":5.97536563873291e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8828125,"distances_sum":2762.040004755991}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9658203125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.98139880952381,"seconds":5.60469925403595e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.953125,"distances_sum":2904.534797084062}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9658203125,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9658203125,"f1":0.98139880952381,"seconds":5.60469925403595e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.953125,"distances_sum":2904.534797084062}}, n: 9
mean(cfft.distances) = 0.3310325513433431
mean(cdnet.distances) = 0.3808708835659242
mean(crand.distances) = 0.34071024834657515
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.88
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.88
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8888888888888888
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.86
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8911111111111111
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9377777777777778
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.9199999999999999
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9288888888888889
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8933333333333332
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8333333333333334
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9088888888888889
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9155555555555556
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9199999999999999
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9311111111111111
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9288888888888889
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8977777777777778
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8711111111111111
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9177777777777777
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9133333333333334
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9377777777777778
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8999999999999999
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9066666666666666
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8955555555555555
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9066666666666666
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.92
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9111111111111111
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9111111111111111
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9044444444444445
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.5769514739513397] ***
*** center 1: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 2]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(2, 3), (3, 2)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 4, 17]]
** centroid: 8, normalized-entropy: 0.7024665512903904, [(2, 4), (3, 17)]
*** center 9: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
finished with 15 centroids; started with 12
acc = 0.9466666666666667
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.18470192703556665] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18470192703556665, 0.15372189274825704] ***
*** finished computation of 7 references, err: [Inf, 0.18470192703556665, 0.15372189274825704] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [8, 114, 12]]
** centroid: 1, normalized-entropy: 0.47501919498779815, [(1, 8), (2, 114), (3, 12)]
*** center 2: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [61, 8, 0]]
** centroid: 3, normalized-entropy: 0.5175827525559071, [(1, 61), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [52, 19, 0]]
** centroid: 4, normalized-entropy: 0.8380078505079931, [(1, 52), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [102, 8, 0]]
** centroid: 5, normalized-entropy: 0.37601985096927276, [(1, 102), (2, 8)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 95, 8]]
** centroid: 6, normalized-entropy: 0.3939152573634121, [(2, 95), (3, 8)]
*** center 7: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2050937384093317] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2050937384093317, 0.1508247517286681] ***
*** finished computation of 7 references, err: [Inf, 0.2050937384093317, 0.1508247517286681] ***
*** center 1: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 66, 26]]
** centroid: 2, normalized-entropy: 0.8589810370425965, [(2, 66), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [60, 4, 0]]
** centroid: 3, normalized-entropy: 0.3372900666170139, [(1, 60), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [85, 38, 0]]
** centroid: 4, normalized-entropy: 0.8919496672696391, [(1, 85), (2, 38)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [68, 61, 0]]
** centroid: 5, normalized-entropy: 0.9978749236685321, [(1, 68), (2, 61)]
*** center 6: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 72, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.34031657907306345] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34031657907306345, 0.21981778436682295] ***
*** starting iteration: 2; err: [Inf, 0.34031657907306345, 0.21981778436682295] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34031657907306345, 0.21981778436682295, 0.2063513841034632] ***
*** starting iteration: 3; err: [Inf, 0.34031657907306345, 0.21981778436682295, 0.2063513841034632] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34031657907306345, 0.21981778436682295, 0.2063513841034632, 0.199837277827969] ***
*** starting iteration: 4; err: [Inf, 0.34031657907306345, 0.21981778436682295, 0.2063513841034632, 0.199837277827969] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34031657907306345, 0.21981778436682295, 0.2063513841034632, 0.199837277827969, 0.19499628516557338] ***
*** starting iteration: 5; err: [Inf, 0.34031657907306345, 0.21981778436682295, 0.2063513841034632, 0.199837277827969, 0.19499628516557338] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34031657907306345, 0.21981778436682295, 0.2063513841034632, 0.199837277827969, 0.19499628516557338, 0.1927663498857358] ***
*** starting iteration: 6; err: [Inf, 0.34031657907306345, 0.21981778436682295, 0.2063513841034632, 0.199837277827969, 0.19499628516557338, 0.1927663498857358] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34031657907306345, 0.21981778436682295, 0.2063513841034632, 0.199837277827969, 0.19499628516557338, 0.1927663498857358, 0.19214274003743767] ***
*** finished computation of 7 references, err: [Inf, 0.34031657907306345, 0.21981778436682295, 0.2063513841034632, 0.199837277827969, 0.19499628516557338, 0.1927663498857358, 0.19214274003743767] ***
*** center 1: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [82, 1, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [84, 46, 0]]
** centroid: 4, normalized-entropy: 0.937456170782005, [(1, 84), (2, 46)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [49, 38, 0]]
** centroid: 5, normalized-entropy: 0.9884374283487116, [(1, 49), (2, 38)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 90, 26]]
** centroid: 6, normalized-entropy: 0.7676515870125797, [(2, 90), (3, 26)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [40, 58, 0]]
** centroid: 7, normalized-entropy: 0.9755259511264975, [(1, 40), (2, 58)]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24640341815671352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24640341815671352, 0.1963550502761104] ***
*** starting iteration: 2; err: [Inf, 0.24640341815671352, 0.1963550502761104] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24640341815671352, 0.1963550502761104, 0.19140616925279685] ***
*** starting iteration: 3; err: [Inf, 0.24640341815671352, 0.1963550502761104, 0.19140616925279685] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24640341815671352, 0.1963550502761104, 0.19140616925279685, 0.1909371231346792] ***
*** finished computation of 7 references, err: [Inf, 0.24640341815671352, 0.1963550502761104, 0.19140616925279685, 0.1909371231346792] ***
*** center 1: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [90, 28, 0]]
** centroid: 2, normalized-entropy: 0.7905013842153699, [(1, 90), (2, 28)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [15, 64, 0]]
** centroid: 3, normalized-entropy: 0.7012065844539666, [(1, 15), (2, 64)]
*** center 4: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [36, 59, 0]]
** centroid: 6, normalized-entropy: 0.9572951876544017, [(1, 36), (2, 59)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 93, 20]]
** centroid: 7, normalized-entropy: 0.6734503665674518, [(2, 93), (3, 20)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28624856061786635] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28624856061786635, 0.22530022114962117] ***
*** starting iteration: 2; err: [Inf, 0.28624856061786635, 0.22530022114962117] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28624856061786635, 0.22530022114962117, 0.20655633645436575] ***
*** starting iteration: 3; err: [Inf, 0.28624856061786635, 0.22530022114962117, 0.20655633645436575] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28624856061786635, 0.22530022114962117, 0.20655633645436575, 0.19679127246660852] ***
*** starting iteration: 4; err: [Inf, 0.28624856061786635, 0.22530022114962117, 0.20655633645436575, 0.19679127246660852] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28624856061786635, 0.22530022114962117, 0.20655633645436575, 0.19679127246660852, 0.19150203480657518] ***
*** starting iteration: 5; err: [Inf, 0.28624856061786635, 0.22530022114962117, 0.20655633645436575, 0.19679127246660852, 0.19150203480657518] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28624856061786635, 0.22530022114962117, 0.20655633645436575, 0.19679127246660852, 0.19150203480657518, 0.1888469033546444] ***
*** starting iteration: 6; err: [Inf, 0.28624856061786635, 0.22530022114962117, 0.20655633645436575, 0.19679127246660852, 0.19150203480657518, 0.1888469033546444] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28624856061786635, 0.22530022114962117, 0.20655633645436575, 0.19679127246660852, 0.19150203480657518, 0.1888469033546444, 0.18757786955461017] ***
*** starting iteration: 7; err: [Inf, 0.28624856061786635, 0.22530022114962117, 0.20655633645436575, 0.19679127246660852, 0.19150203480657518, 0.1888469033546444, 0.18757786955461017] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28624856061786635, 0.22530022114962117, 0.20655633645436575, 0.19679127246660852, 0.19150203480657518, 0.1888469033546444, 0.18757786955461017, 0.18696507941819784] ***
*** finished computation of 7 references, err: [Inf, 0.28624856061786635, 0.22530022114962117, 0.20655633645436575, 0.19679127246660852, 0.19150203480657518, 0.1888469033546444, 0.18757786955461017, 0.18696507941819784] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 89, 26]]
** centroid: 1, normalized-entropy: 0.7711273724428293, [(2, 89), (3, 26)]
*** center 2: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [88, 30, 0]]
** centroid: 3, normalized-entropy: 0.8179252501386403, [(1, 88), (2, 30)]
*** center 4: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [50, 54, 0]]
** centroid: 5, normalized-entropy: 0.9989326546260583, [(1, 50), (2, 54)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 61, 0]]
** centroid: 6, normalized-entropy: 0.38705142139219795, [(1, 5), (2, 61)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [60, 7, 0]]
** centroid: 7, normalized-entropy: 0.4830306801456181, [(1, 60), (2, 7)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4970300889744594] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4970300889744594, 0.3269528003728336] ***
*** starting iteration: 2; err: [Inf, 0.4970300889744594, 0.3269528003728336] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4970300889744594, 0.3269528003728336, 0.3028511799261528] ***
*** starting iteration: 3; err: [Inf, 0.4970300889744594, 0.3269528003728336, 0.3028511799261528] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4970300889744594, 0.3269528003728336, 0.3028511799261528, 0.29988426106419785] ***
*** starting iteration: 4; err: [Inf, 0.4970300889744594, 0.3269528003728336, 0.3028511799261528, 0.29988426106419785] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4970300889744594, 0.3269528003728336, 0.3028511799261528, 0.29988426106419785, 0.29840832360245445] ***
*** starting iteration: 5; err: [Inf, 0.4970300889744594, 0.3269528003728336, 0.3028511799261528, 0.29988426106419785, 0.29840832360245445] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4970300889744594, 0.3269528003728336, 0.3028511799261528, 0.29988426106419785, 0.29840832360245445, 0.29798702171838676] ***
*** finished computation of 3 references, err: [Inf, 0.4970300889744594, 0.3269528003728336, 0.3028511799261528, 0.29988426106419785, 0.29840832360245445, 0.29798702171838676] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [180, 65, 0]]
** centroid: 1, normalized-entropy: 0.834648285181383, [(1, 180), (2, 65)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [227, 10, 0]]
** centroid: 2, normalized-entropy: 0.2522631325948356, [(1, 227), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 158, 26]]
** centroid: 3, normalized-entropy: 0.5876446142980418, [(2, 158), (3, 26)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.45487744345174713] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45487744345174713, 0.34906076768907474] ***
*** starting iteration: 2; err: [Inf, 0.45487744345174713, 0.34906076768907474] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45487744345174713, 0.34906076768907474, 0.3396300363872407] ***
*** starting iteration: 3; err: [Inf, 0.45487744345174713, 0.34906076768907474, 0.3396300363872407] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45487744345174713, 0.34906076768907474, 0.3396300363872407, 0.3346327095539651] ***
*** starting iteration: 4; err: [Inf, 0.45487744345174713, 0.34906076768907474, 0.3396300363872407, 0.3346327095539651] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45487744345174713, 0.34906076768907474, 0.3396300363872407, 0.3346327095539651, 0.3317573779978897] ***
*** starting iteration: 5; err: [Inf, 0.45487744345174713, 0.34906076768907474, 0.3396300363872407, 0.3346327095539651, 0.3317573779978897] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45487744345174713, 0.34906076768907474, 0.3396300363872407, 0.3346327095539651, 0.3317573779978897, 0.3302360719441251] ***
*** starting iteration: 6; err: [Inf, 0.45487744345174713, 0.34906076768907474, 0.3396300363872407, 0.3346327095539651, 0.3317573779978897, 0.3302360719441251] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45487744345174713, 0.34906076768907474, 0.3396300363872407, 0.3346327095539651, 0.3317573779978897, 0.3302360719441251, 0.3289699745846206] ***
*** starting iteration: 7; err: [Inf, 0.45487744345174713, 0.34906076768907474, 0.3396300363872407, 0.3346327095539651, 0.3317573779978897, 0.3302360719441251, 0.3289699745846206] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45487744345174713, 0.34906076768907474, 0.3396300363872407, 0.3346327095539651, 0.3317573779978897, 0.3302360719441251, 0.3289699745846206, 0.3270231324598484] ***
*** starting iteration: 8; err: [Inf, 0.45487744345174713, 0.34906076768907474, 0.3396300363872407, 0.3346327095539651, 0.3317573779978897, 0.3302360719441251, 0.3289699745846206, 0.3270231324598484] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45487744345174713, 0.34906076768907474, 0.3396300363872407, 0.3346327095539651, 0.3317573779978897, 0.3302360719441251, 0.3289699745846206, 0.3270231324598484, 0.3259597403155095] ***
*** starting iteration: 9; err: [Inf, 0.45487744345174713, 0.34906076768907474, 0.3396300363872407, 0.3346327095539651, 0.3317573779978897, 0.3302360719441251, 0.3289699745846206, 0.3270231324598484, 0.3259597403155095] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45487744345174713, 0.34906076768907474, 0.3396300363872407, 0.3346327095539651, 0.3317573779978897, 0.3302360719441251, 0.3289699745846206, 0.3270231324598484, 0.3259597403155095, 0.3242483801128848] ***
*** starting iteration: 10; err: [Inf, 0.45487744345174713, 0.34906076768907474, 0.3396300363872407, 0.3346327095539651, 0.3317573779978897, 0.3302360719441251, 0.3289699745846206, 0.3270231324598484, 0.3259597403155095, 0.3242483801128848] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45487744345174713, 0.34906076768907474, 0.3396300363872407, 0.3346327095539651, 0.3317573779978897, 0.3302360719441251, 0.3289699745846206, 0.3270231324598484, 0.3259597403155095, 0.3242483801128848, 0.3225666394169586] ***
*** finished computation of 3 references, err: [Inf, 0.45487744345174713, 0.34906076768907474, 0.3396300363872407, 0.3346327095539651, 0.3317573779978897, 0.3302360719441251, 0.3289699745846206, 0.3270231324598484, 0.3259597403155095, 0.3242483801128848, 0.3225666394169586] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [218, 46, 0]]
** centroid: 1, normalized-entropy: 0.6673182376160576, [(1, 218), (2, 46)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [149, 52, 0]]
** centroid: 2, normalized-entropy: 0.8247881345013223, [(1, 149), (2, 52)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [36, 146, 20]]
** centroid: 3, normalized-entropy: 0.7017952586643373, [(1, 36), (2, 146), (3, 20)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.5826483231283601] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5826483231283601, 0.3891942640501207] ***
*** starting iteration: 2; err: [Inf, 0.5826483231283601, 0.3891942640501207] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5826483231283601, 0.3891942640501207, 0.32661807169297197] ***
*** starting iteration: 3; err: [Inf, 0.5826483231283601, 0.3891942640501207, 0.32661807169297197] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5826483231283601, 0.3891942640501207, 0.32661807169297197, 0.303913792388617] ***
*** starting iteration: 4; err: [Inf, 0.5826483231283601, 0.3891942640501207, 0.32661807169297197, 0.303913792388617] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5826483231283601, 0.3891942640501207, 0.32661807169297197, 0.303913792388617, 0.29917924076659436] ***
*** starting iteration: 5; err: [Inf, 0.5826483231283601, 0.3891942640501207, 0.32661807169297197, 0.303913792388617, 0.29917924076659436] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5826483231283601, 0.3891942640501207, 0.32661807169297197, 0.303913792388617, 0.29917924076659436, 0.2986167352842069] ***
*** finished computation of 3 references, err: [Inf, 0.5826483231283601, 0.3891942640501207, 0.32661807169297197, 0.303913792388617, 0.29917924076659436, 0.2986167352842069] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 170, 26]]
** centroid: 1, normalized-entropy: 0.5646695797525669, [(2, 170), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [183, 54, 0]]
** centroid: 2, normalized-entropy: 0.7742411580847273, [(1, 183), (2, 54)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [217, 17, 0]]
** centroid: 3, normalized-entropy: 0.3757344386359354, [(1, 217), (2, 17)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31742673358591916] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31742673358591916, 0.24756046675436488] ***
*** starting iteration: 2; err: [Inf, 0.31742673358591916, 0.24756046675436488] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31742673358591916, 0.24756046675436488, 0.23804151148230465] ***
*** starting iteration: 3; err: [Inf, 0.31742673358591916, 0.24756046675436488, 0.23804151148230465] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31742673358591916, 0.24756046675436488, 0.23804151148230465, 0.23628470044535538] ***
*** starting iteration: 4; err: [Inf, 0.31742673358591916, 0.24756046675436488, 0.23804151148230465, 0.23628470044535538] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31742673358591916, 0.24756046675436488, 0.23804151148230465, 0.23628470044535538, 0.23577320021675066] ***
*** finished computation of 3 references, err: [Inf, 0.31742673358591916, 0.24756046675436488, 0.23804151148230465, 0.23628470044535538, 0.23577320021675066] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [243, 17, 0]]
** centroid: 1, normalized-entropy: 0.34845894119206794, [(1, 243), (2, 17)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [1, 153, 26]]
** centroid: 2, normalized-entropy: 0.4063951203996027, [(1, 1), (2, 153), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [163, 63, 0]]
** centroid: 3, normalized-entropy: 0.8537571733879294, [(1, 163), (2, 63)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.31663376780721114] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31663376780721114, 0.2458872860451152] ***
*** starting iteration: 2; err: [Inf, 0.31663376780721114, 0.2458872860451152] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31663376780721114, 0.2458872860451152, 0.23831489185399113] ***
*** starting iteration: 3; err: [Inf, 0.31663376780721114, 0.2458872860451152, 0.23831489185399113] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31663376780721114, 0.2458872860451152, 0.23831489185399113, 0.23691115721451422] ***
*** starting iteration: 4; err: [Inf, 0.31663376780721114, 0.2458872860451152, 0.23831489185399113, 0.23691115721451422] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31663376780721114, 0.2458872860451152, 0.23831489185399113, 0.23691115721451422, 0.2363198451206334] ***
*** finished computation of 3 references, err: [Inf, 0.31663376780721114, 0.2458872860451152, 0.23831489185399113, 0.23691115721451422, 0.2363198451206334] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [256, 15, 0]]
** centroid: 1, normalized-entropy: 0.308704912445651, [(1, 256), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [147, 60, 0]]
** centroid: 2, normalized-entropy: 0.868533960265235, [(1, 147), (2, 60)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 169, 20]]
** centroid: 3, normalized-entropy: 0.48717794470024506, [(2, 169), (3, 20)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3167867210653165] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3167867210653165, 0.24366715428326208] ***
*** starting iteration: 2; err: [Inf, 0.3167867210653165, 0.24366715428326208] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3167867210653165, 0.24366715428326208, 0.23876177726210146] ***
*** starting iteration: 3; err: [Inf, 0.3167867210653165, 0.24366715428326208, 0.23876177726210146] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3167867210653165, 0.24366715428326208, 0.23876177726210146, 0.23733409337358718] ***
*** starting iteration: 4; err: [Inf, 0.3167867210653165, 0.24366715428326208, 0.23876177726210146, 0.23733409337358718] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3167867210653165, 0.24366715428326208, 0.23876177726210146, 0.23733409337358718, 0.23657485076911872] ***
*** finished computation of 3 references, err: [Inf, 0.3167867210653165, 0.24366715428326208, 0.23876177726210146, 0.23733409337358718, 0.23657485076911872] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [77, 161, 26]]
** centroid: 1, normalized-entropy: 0.8094265533834676, [(1, 77), (2, 161), (3, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [208, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [115, 80, 0]]
** centroid: 3, normalized-entropy: 0.9766349114440099, [(1, 115), (2, 80)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.269220671932529] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.269220671932529, 0.2388021821693123] ***
*** finished computation of 3 references, err: [Inf, 0.269220671932529, 0.2388021821693123] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [134, 114, 0]]
** centroid: 1, normalized-entropy: 0.9953035154831571, [(1, 134), (2, 114)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [57, 118, 26]]
** centroid: 2, normalized-entropy: 0.8507298173984714, [(1, 57), (2, 118), (3, 26)]
*** center 3: selecting labels [1] (freq >= 2) [from [216, 1, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.29861411374241026] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29861411374241026, 0.24164143240992456] ***
*** finished computation of 3 references, err: [Inf, 0.29861411374241026, 0.24164143240992456] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [221, 61, 0]]
** centroid: 1, normalized-entropy: 0.7533760218426147, [(1, 221), (2, 61)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [182, 25, 0]]
** centroid: 2, normalized-entropy: 0.5315786035837172, [(1, 182), (2, 25)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 158, 20]]
** centroid: 3, normalized-entropy: 0.5069923067544342, [(2, 158), (3, 20)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.27056747444903945] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27056747444903945, 0.24216929354915756] ***
*** finished computation of 3 references, err: [Inf, 0.27056747444903945, 0.24216929354915756] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 140, 26]]
** centroid: 1, normalized-entropy: 0.6261776539736496, [(2, 140), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [270, 53, 0]]
** centroid: 2, normalized-entropy: 0.6439971804042224, [(1, 270), (2, 53)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [130, 48, 0]]
** centroid: 3, normalized-entropy: 0.8409805336163159, [(1, 130), (2, 48)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.44561586516221297] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44561586516221297, 0.3738846222844881] ***
*** starting iteration: 2; err: [Inf, 0.44561586516221297, 0.3738846222844881] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44561586516221297, 0.3738846222844881, 0.3528414886212676] ***
*** starting iteration: 3; err: [Inf, 0.44561586516221297, 0.3738846222844881, 0.3528414886212676] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44561586516221297, 0.3738846222844881, 0.3528414886212676, 0.3405195357552072] ***
*** starting iteration: 4; err: [Inf, 0.44561586516221297, 0.3738846222844881, 0.3528414886212676, 0.3405195357552072] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44561586516221297, 0.3738846222844881, 0.3528414886212676, 0.3405195357552072, 0.33500640383186014] ***
*** starting iteration: 5; err: [Inf, 0.44561586516221297, 0.3738846222844881, 0.3528414886212676, 0.3405195357552072, 0.33500640383186014] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44561586516221297, 0.3738846222844881, 0.3528414886212676, 0.3405195357552072, 0.33500640383186014, 0.33052074320211605] ***
*** starting iteration: 6; err: [Inf, 0.44561586516221297, 0.3738846222844881, 0.3528414886212676, 0.3405195357552072, 0.33500640383186014, 0.33052074320211605] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44561586516221297, 0.3738846222844881, 0.3528414886212676, 0.3405195357552072, 0.33500640383186014, 0.33052074320211605, 0.327201298706502] ***
*** starting iteration: 7; err: [Inf, 0.44561586516221297, 0.3738846222844881, 0.3528414886212676, 0.3405195357552072, 0.33500640383186014, 0.33052074320211605, 0.327201298706502] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44561586516221297, 0.3738846222844881, 0.3528414886212676, 0.3405195357552072, 0.33500640383186014, 0.33052074320211605, 0.327201298706502, 0.32399918715394027] ***
*** starting iteration: 8; err: [Inf, 0.44561586516221297, 0.3738846222844881, 0.3528414886212676, 0.3405195357552072, 0.33500640383186014, 0.33052074320211605, 0.327201298706502, 0.32399918715394027] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44561586516221297, 0.3738846222844881, 0.3528414886212676, 0.3405195357552072, 0.33500640383186014, 0.33052074320211605, 0.327201298706502, 0.32399918715394027, 0.3216853304080911] ***
*** starting iteration: 9; err: [Inf, 0.44561586516221297, 0.3738846222844881, 0.3528414886212676, 0.3405195357552072, 0.33500640383186014, 0.33052074320211605, 0.327201298706502, 0.32399918715394027, 0.3216853304080911] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44561586516221297, 0.3738846222844881, 0.3528414886212676, 0.3405195357552072, 0.33500640383186014, 0.33052074320211605, 0.327201298706502, 0.32399918715394027, 0.3216853304080911, 0.3196347601650221] ***
*** starting iteration: 10; err: [Inf, 0.44561586516221297, 0.3738846222844881, 0.3528414886212676, 0.3405195357552072, 0.33500640383186014, 0.33052074320211605, 0.327201298706502, 0.32399918715394027, 0.3216853304080911, 0.3196347601650221] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44561586516221297, 0.3738846222844881, 0.3528414886212676, 0.3405195357552072, 0.33500640383186014, 0.33052074320211605, 0.327201298706502, 0.32399918715394027, 0.3216853304080911, 0.3196347601650221, 0.31246681151283745] ***
*** finished computation of 3 references, err: [Inf, 0.44561586516221297, 0.3738846222844881, 0.3528414886212676, 0.3405195357552072, 0.33500640383186014, 0.33052074320211605, 0.327201298706502, 0.32399918715394027, 0.3216853304080911, 0.3196347601650221, 0.31246681151283745] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [184, 73, 0]]
** centroid: 1, normalized-entropy: 0.8609062896112649, [(1, 184), (2, 73)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [222, 15, 0]]
** centroid: 2, normalized-entropy: 0.340373285759646, [(1, 222), (2, 15)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [1, 145, 26]]
** centroid: 3, normalized-entropy: 0.4182451203656175, [(1, 1), (2, 145), (3, 26)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3601679601936952] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3601679601936952, 0.3007896680509144] ***
*** starting iteration: 2; err: [Inf, 0.3601679601936952, 0.3007896680509144] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3601679601936952, 0.3007896680509144, 0.298679006552656] ***
*** starting iteration: 3; err: [Inf, 0.3601679601936952, 0.3007896680509144, 0.298679006552656] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3601679601936952, 0.3007896680509144, 0.298679006552656, 0.29874829454221824] ***
*** finished computation of 3 references, err: [Inf, 0.3601679601936952, 0.3007896680509144, 0.298679006552656, 0.29874829454221824] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [240, 1, 0]]
** centroid: 1, normalized-entropy: 0.03880741529201783, [(1, 240), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [156, 56, 0]]
** centroid: 2, normalized-entropy: 0.8329458235361399, [(1, 156), (2, 56)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [7, 187, 20]]
** centroid: 3, normalized-entropy: 0.4107371114733289, [(1, 7), (2, 187), (3, 20)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.5468116171750194] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5468116171750194, 0.3365300097062938] ***
*** starting iteration: 2; err: [Inf, 0.5468116171750194, 0.3365300097062938] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5468116171750194, 0.3365300097062938, 0.3349608957985307] ***
*** starting iteration: 3; err: [Inf, 0.5468116171750194, 0.3365300097062938, 0.3349608957985307] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5468116171750194, 0.3365300097062938, 0.3349608957985307, 0.33363201939452] ***
*** starting iteration: 4; err: [Inf, 0.5468116171750194, 0.3365300097062938, 0.3349608957985307, 0.33363201939452] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5468116171750194, 0.3365300097062938, 0.3349608957985307, 0.33363201939452, 0.3322983565122431] ***
*** starting iteration: 5; err: [Inf, 0.5468116171750194, 0.3365300097062938, 0.3349608957985307, 0.33363201939452, 0.3322983565122431] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5468116171750194, 0.3365300097062938, 0.3349608957985307, 0.33363201939452, 0.3322983565122431, 0.33050136997663265] ***
*** starting iteration: 6; err: [Inf, 0.5468116171750194, 0.3365300097062938, 0.3349608957985307, 0.33363201939452, 0.3322983565122431, 0.33050136997663265] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5468116171750194, 0.3365300097062938, 0.3349608957985307, 0.33363201939452, 0.3322983565122431, 0.33050136997663265, 0.3288369307691033] ***
*** starting iteration: 7; err: [Inf, 0.5468116171750194, 0.3365300097062938, 0.3349608957985307, 0.33363201939452, 0.3322983565122431, 0.33050136997663265, 0.3288369307691033] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5468116171750194, 0.3365300097062938, 0.3349608957985307, 0.33363201939452, 0.3322983565122431, 0.33050136997663265, 0.3288369307691033, 0.32685445882854747] ***
*** starting iteration: 8; err: [Inf, 0.5468116171750194, 0.3365300097062938, 0.3349608957985307, 0.33363201939452, 0.3322983565122431, 0.33050136997663265, 0.3288369307691033, 0.32685445882854747] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5468116171750194, 0.3365300097062938, 0.3349608957985307, 0.33363201939452, 0.3322983565122431, 0.33050136997663265, 0.3288369307691033, 0.32685445882854747, 0.3241525901679782] ***
*** starting iteration: 9; err: [Inf, 0.5468116171750194, 0.3365300097062938, 0.3349608957985307, 0.33363201939452, 0.3322983565122431, 0.33050136997663265, 0.3288369307691033, 0.32685445882854747, 0.3241525901679782] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5468116171750194, 0.3365300097062938, 0.3349608957985307, 0.33363201939452, 0.3322983565122431, 0.33050136997663265, 0.3288369307691033, 0.32685445882854747, 0.3241525901679782, 0.3207922284470416] ***
*** starting iteration: 10; err: [Inf, 0.5468116171750194, 0.3365300097062938, 0.3349608957985307, 0.33363201939452, 0.3322983565122431, 0.33050136997663265, 0.3288369307691033, 0.32685445882854747, 0.3241525901679782, 0.3207922284470416] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5468116171750194, 0.3365300097062938, 0.3349608957985307, 0.33363201939452, 0.3322983565122431, 0.33050136997663265, 0.3288369307691033, 0.32685445882854747, 0.3241525901679782, 0.3207922284470416, 0.3123062944466966] ***
*** finished computation of 3 references, err: [Inf, 0.5468116171750194, 0.3365300097062938, 0.3349608957985307, 0.33363201939452, 0.3322983565122431, 0.33050136997663265, 0.3288369307691033, 0.32685445882854747, 0.3241525901679782, 0.3207922284470416, 0.3123062944466966] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 164, 26]]
** centroid: 1, normalized-entropy: 0.5759084429149787, [(2, 164), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [165, 60, 0]]
** centroid: 2, normalized-entropy: 0.8366407419411671, [(1, 165), (2, 60)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [235, 17, 0]]
** centroid: 3, normalized-entropy: 0.35637376975376284, [(1, 235), (2, 17)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23839159727980336] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23839159727980336, 0.19633424294921611] ***
*** starting iteration: 2; err: [Inf, 0.23839159727980336, 0.19633424294921611] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23839159727980336, 0.19633424294921611, 0.18940316687978515] ***
*** starting iteration: 3; err: [Inf, 0.23839159727980336, 0.19633424294921611, 0.18940316687978515] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23839159727980336, 0.19633424294921611, 0.18940316687978515, 0.1872102552801147] ***
*** starting iteration: 4; err: [Inf, 0.23839159727980336, 0.19633424294921611, 0.18940316687978515, 0.1872102552801147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23839159727980336, 0.19633424294921611, 0.18940316687978515, 0.1872102552801147, 0.18660036758477758] ***
*** finished computation of 7 references, err: [Inf, 0.23839159727980336, 0.19633424294921611, 0.18940316687978515, 0.1872102552801147, 0.18660036758477758] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [42, 67, 0]]
** centroid: 1, normalized-entropy: 0.9617136136083148, [(1, 42), (2, 67)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [73, 18, 0]]
** centroid: 2, normalized-entropy: 0.7175106531195438, [(1, 73), (2, 18)]
*** center 3: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 44, 26]]
** centroid: 4, normalized-entropy: 0.9517626756348312, [(2, 44), (3, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [104, 5, 0]]
** centroid: 5, normalized-entropy: 0.2685937636658219, [(1, 104), (2, 5)]
*** center 6: selecting labels [1] (freq >= 2) [from [94, 1, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 98, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23976281164926122] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23976281164926122, 0.19399699870485818] ***
*** starting iteration: 2; err: [Inf, 0.23976281164926122, 0.19399699870485818] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23976281164926122, 0.19399699870485818, 0.18892332556276306] ***
*** starting iteration: 3; err: [Inf, 0.23976281164926122, 0.19399699870485818, 0.18892332556276306] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23976281164926122, 0.19399699870485818, 0.18892332556276306, 0.1881537047302772] ***
*** finished computation of 7 references, err: [Inf, 0.23976281164926122, 0.19399699870485818, 0.18892332556276306, 0.1881537047302772] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [40, 57, 0]]
** centroid: 1, normalized-entropy: 0.9777287741161507, [(1, 40), (2, 57)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [54, 18, 0]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(1, 54), (2, 18)]
*** center 3: selecting labels [1] (freq >= 2) [from [117, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 75, 20]]
** centroid: 4, normalized-entropy: 0.7424875695421234, [(2, 75), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [105, 5, 0]]
** centroid: 5, normalized-entropy: 0.2667649878030262, [(1, 105), (2, 5)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [86, 2, 0]]
** centroid: 6, normalized-entropy: 0.1564910629057016, [(1, 86), (2, 2)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 87, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24385767790378593] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24385767790378593, 0.19388357075866774] ***
*** starting iteration: 2; err: [Inf, 0.24385767790378593, 0.19388357075866774] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24385767790378593, 0.19388357075866774, 0.19082560276995222] ***
*** starting iteration: 3; err: [Inf, 0.24385767790378593, 0.19388357075866774, 0.19082560276995222] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24385767790378593, 0.19388357075866774, 0.19082560276995222, 0.19023636375055433] ***
*** finished computation of 7 references, err: [Inf, 0.24385767790378593, 0.19388357075866774, 0.19082560276995222, 0.19023636375055433] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [21, 86, 0]]
** centroid: 1, normalized-entropy: 0.7143881566559658, [(1, 21), (2, 86)]
*** center 2: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [48, 41, 0]]
** centroid: 3, normalized-entropy: 0.995533068899466, [(1, 48), (2, 41)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 77, 26]]
** centroid: 4, normalized-entropy: 0.8151025048028707, [(2, 77), (3, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [79, 37, 0]]
** centroid: 5, normalized-entropy: 0.9032529465563456, [(1, 79), (2, 37)]
*** center 6: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2392265740740071] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2392265740740071, 0.1902042413787642] ***
*** starting iteration: 2; err: [Inf, 0.2392265740740071, 0.1902042413787642] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2392265740740071, 0.1902042413787642, 0.18804425163077074] ***
*** starting iteration: 3; err: [Inf, 0.2392265740740071, 0.1902042413787642, 0.18804425163077074] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2392265740740071, 0.1902042413787642, 0.18804425163077074, 0.18728787737392313] ***
*** finished computation of 7 references, err: [Inf, 0.2392265740740071, 0.1902042413787642, 0.18804425163077074, 0.18728787737392313] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [39, 74, 0]]
** centroid: 1, normalized-entropy: 0.9296459040774003, [(1, 39), (2, 74)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 61, 26]]
** centroid: 2, normalized-entropy: 0.8798813089176428, [(2, 61), (3, 26)]
*** center 3: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [92, 11, 0]]
** centroid: 4, normalized-entropy: 0.4901757916273403, [(1, 92), (2, 11)]
*** center 5: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [8, 87, 0]]
** centroid: 7, normalized-entropy: 0.4168441963431652, [(1, 8), (2, 87)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.26208827126285306] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26208827126285306, 0.19681526263240262] ***
*** starting iteration: 2; err: [Inf, 0.26208827126285306, 0.19681526263240262] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26208827126285306, 0.19681526263240262, 0.1889086378517671] ***
*** starting iteration: 3; err: [Inf, 0.26208827126285306, 0.19681526263240262, 0.1889086378517671] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26208827126285306, 0.19681526263240262, 0.1889086378517671, 0.1881017806692638] ***
*** finished computation of 7 references, err: [Inf, 0.26208827126285306, 0.19681526263240262, 0.1889086378517671, 0.1881017806692638] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [74, 6, 0]]
** centroid: 1, normalized-entropy: 0.3843115441264972, [(1, 74), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [86, 6, 0]]
** centroid: 2, normalized-entropy: 0.3478169135710632, [(1, 86), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 92, 20]]
** centroid: 3, normalized-entropy: 0.6769418697808861, [(2, 92), (3, 20)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [43, 41, 0]]
** centroid: 4, normalized-entropy: 0.9995910341890979, [(1, 43), (2, 41)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 94, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [117, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [83, 5, 0]]
** centroid: 7, normalized-entropy: 0.314682604134666, [(1, 83), (2, 5)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22446263536833216] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22446263536833216, 0.19564829947569337] ***
*** starting iteration: 2; err: [Inf, 0.22446263536833216, 0.19564829947569337] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22446263536833216, 0.19564829947569337, 0.19020091672742118] ***
*** starting iteration: 3; err: [Inf, 0.22446263536833216, 0.19564829947569337, 0.19020091672742118] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22446263536833216, 0.19564829947569337, 0.19020091672742118, 0.18683663056814287] ***
*** starting iteration: 4; err: [Inf, 0.22446263536833216, 0.19564829947569337, 0.19020091672742118, 0.18683663056814287] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22446263536833216, 0.19564829947569337, 0.19020091672742118, 0.18683663056814287, 0.18592710812147456] ***
*** finished computation of 7 references, err: [Inf, 0.22446263536833216, 0.19564829947569337, 0.19020091672742118, 0.18683663056814287, 0.18592710812147456] ***
*** center 1: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [50, 60, 0]]
** centroid: 2, normalized-entropy: 0.9940302114769566, [(1, 50), (2, 60)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 94, 26]]
** centroid: 3, normalized-entropy: 0.7540340561971327, [(2, 94), (3, 26)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [54, 54, 0]]
** centroid: 4, normalized-entropy: 1.0, [(1, 54), (2, 54)]
*** center 5: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [65, 1, 0]]
** centroid: 6, normalized-entropy: 0.11327430349709665, [(1, 65), (2, 1)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [71, 32, 0]]
** centroid: 7, normalized-entropy: 0.8939563962625153, [(1, 71), (2, 32)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.35775965436252655] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35775965436252655, 0.30862551892886647] ***
*** starting iteration: 2; err: [Inf, 0.35775965436252655, 0.30862551892886647] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35775965436252655, 0.30862551892886647, 0.297040790188694] ***
*** starting iteration: 3; err: [Inf, 0.35775965436252655, 0.30862551892886647, 0.297040790188694] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35775965436252655, 0.30862551892886647, 0.297040790188694, 0.2953794723007459] ***
*** starting iteration: 4; err: [Inf, 0.35775965436252655, 0.30862551892886647, 0.297040790188694, 0.2953794723007459] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35775965436252655, 0.30862551892886647, 0.297040790188694, 0.2953794723007459, 0.29542225175159603] ***
*** finished computation of 3 references, err: [Inf, 0.35775965436252655, 0.30862551892886647, 0.297040790188694, 0.2953794723007459, 0.29542225175159603] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [248, 12, 0]]
** centroid: 1, normalized-entropy: 0.269828447703074, [(1, 248), (2, 12)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [159, 58, 0]]
** centroid: 2, normalized-entropy: 0.8375360821789878, [(1, 159), (2, 58)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 163, 26]]
** centroid: 3, normalized-entropy: 0.5778290813039613, [(2, 163), (3, 26)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.34266634689674697] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34266634689674697, 0.30720091121329896] ***
*** starting iteration: 2; err: [Inf, 0.34266634689674697, 0.30720091121329896] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34266634689674697, 0.30720091121329896, 0.30178997766455523] ***
*** starting iteration: 3; err: [Inf, 0.34266634689674697, 0.30720091121329896, 0.30178997766455523] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34266634689674697, 0.30720091121329896, 0.30178997766455523, 0.30012885266091155] ***
*** starting iteration: 4; err: [Inf, 0.34266634689674697, 0.30720091121329896, 0.30178997766455523, 0.30012885266091155] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34266634689674697, 0.30720091121329896, 0.30178997766455523, 0.30012885266091155, 0.29901751323227493] ***
*** starting iteration: 5; err: [Inf, 0.34266634689674697, 0.30720091121329896, 0.30178997766455523, 0.30012885266091155, 0.29901751323227493] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34266634689674697, 0.30720091121329896, 0.30178997766455523, 0.30012885266091155, 0.29901751323227493, 0.2987801024726574] ***
*** finished computation of 3 references, err: [Inf, 0.34266634689674697, 0.30720091121329896, 0.30178997766455523, 0.30012885266091155, 0.29901751323227493, 0.2987801024726574] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [240, 24, 0]]
** centroid: 1, normalized-entropy: 0.43949698692151346, [(1, 240), (2, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [163, 39, 0]]
** centroid: 2, normalized-entropy: 0.707848236834501, [(1, 163), (2, 39)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 181, 20]]
** centroid: 3, normalized-entropy: 0.4674165296873494, [(2, 181), (3, 20)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3631083598217998] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3631083598217998, 0.3425219849707081] ***
*** starting iteration: 2; err: [Inf, 0.3631083598217998, 0.3425219849707081] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3631083598217998, 0.3425219849707081, 0.3388671650337628] ***
*** starting iteration: 3; err: [Inf, 0.3631083598217998, 0.3425219849707081, 0.3388671650337628] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3631083598217998, 0.3425219849707081, 0.3388671650337628, 0.3372407239879938] ***
*** starting iteration: 4; err: [Inf, 0.3631083598217998, 0.3425219849707081, 0.3388671650337628, 0.3372407239879938] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3631083598217998, 0.3425219849707081, 0.3388671650337628, 0.3372407239879938, 0.33650477483276575] ***
*** finished computation of 3 references, err: [Inf, 0.3631083598217998, 0.3425219849707081, 0.3388671650337628, 0.3372407239879938, 0.33650477483276575] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [251, 19, 0]]
** centroid: 1, normalized-entropy: 0.36730428298760165, [(1, 251), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [89, 123, 0]]
** centroid: 2, normalized-entropy: 0.981365928559728, [(1, 89), (2, 123)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [60, 99, 26]]
** centroid: 3, normalized-entropy: 0.887988939225007, [(1, 60), (2, 99), (3, 26)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.42653762068957446] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42653762068957446, 0.320362601791405] ***
*** starting iteration: 2; err: [Inf, 0.42653762068957446, 0.320362601791405] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42653762068957446, 0.320362601791405, 0.30382842759744405] ***
*** starting iteration: 3; err: [Inf, 0.42653762068957446, 0.320362601791405, 0.30382842759744405] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42653762068957446, 0.320362601791405, 0.30382842759744405, 0.299604028322127] ***
*** finished computation of 3 references, err: [Inf, 0.42653762068957446, 0.320362601791405, 0.30382842759744405, 0.299604028322127] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 172, 26]]
** centroid: 1, normalized-entropy: 0.5610284863400681, [(2, 172), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [229, 27, 0]]
** centroid: 2, normalized-entropy: 0.48609519518510225, [(1, 229), (2, 27)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [178, 34, 0]]
** centroid: 3, normalized-entropy: 0.6352115521361693, [(1, 178), (2, 34)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.39360995744417854] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39360995744417854, 0.3136808327978653] ***
*** starting iteration: 2; err: [Inf, 0.39360995744417854, 0.3136808327978653] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39360995744417854, 0.3136808327978653, 0.2987583363673062] ***
*** starting iteration: 3; err: [Inf, 0.39360995744417854, 0.3136808327978653, 0.2987583363673062] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39360995744417854, 0.3136808327978653, 0.2987583363673062, 0.29379795403729403] ***
*** finished computation of 3 references, err: [Inf, 0.39360995744417854, 0.3136808327978653, 0.2987583363673062, 0.29379795403729403] ***
*** center 1: selecting labels [1] (freq >= 2) [from [206, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [79, 154, 20]]
** centroid: 2, normalized-entropy: 0.7884751727316349, [(1, 79), (2, 154), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [118, 90, 0]]
** centroid: 3, normalized-entropy: 0.9868884753797076, [(1, 118), (2, 90)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.35185792263055493] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35185792263055493, 0.3095357307579195] ***
*** starting iteration: 2; err: [Inf, 0.35185792263055493, 0.3095357307579195] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35185792263055493, 0.3095357307579195, 0.30126714054634723] ***
*** starting iteration: 3; err: [Inf, 0.35185792263055493, 0.3095357307579195, 0.30126714054634723] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35185792263055493, 0.3095357307579195, 0.30126714054634723, 0.29895609344678303] ***
*** finished computation of 3 references, err: [Inf, 0.35185792263055493, 0.3095357307579195, 0.30126714054634723, 0.29895609344678303] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 178, 26]]
** centroid: 1, normalized-entropy: 0.550405815580872, [(2, 178), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [222, 14, 0]]
** centroid: 2, normalized-entropy: 0.3247477475036634, [(1, 222), (2, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [178, 49, 0]]
** centroid: 3, normalized-entropy: 0.7525338041470206, [(1, 178), (2, 49)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.25256529276527734] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25256529276527734, 0.17893425227658874] ***
*** starting iteration: 2; err: [Inf, 0.25256529276527734, 0.17893425227658874] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25256529276527734, 0.17893425227658874, 0.16911057473856722] ***
*** starting iteration: 3; err: [Inf, 0.25256529276527734, 0.17893425227658874, 0.16911057473856722] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25256529276527734, 0.17893425227658874, 0.16911057473856722, 0.16382952659829958] ***
*** finished computation of 7 references, err: [Inf, 0.25256529276527734, 0.17893425227658874, 0.16911057473856722, 0.16382952659829958] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 113, 26]]
** centroid: 1, normalized-entropy: 0.6952600984459203, [(2, 113), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [50, 26, 0]]
** centroid: 2, normalized-entropy: 0.9268190639645774, [(1, 50), (2, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [125, 53, 0]]
** centroid: 3, normalized-entropy: 0.8785265788618447, [(1, 125), (2, 53)]
*** center 4: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [35, 41, 0]]
** centroid: 5, normalized-entropy: 0.9954993847275952, [(1, 35), (2, 41)]
*** center 6: selecting labels [1] (freq >= 1) [from [42, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2068806214982747] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2068806214982747, 0.16571912372266984] ***
*** starting iteration: 2; err: [Inf, 0.2068806214982747, 0.16571912372266984] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2068806214982747, 0.16571912372266984, 0.15844735474712487] ***
*** starting iteration: 3; err: [Inf, 0.2068806214982747, 0.16571912372266984, 0.15844735474712487] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2068806214982747, 0.16571912372266984, 0.15844735474712487, 0.1547291883975379] ***
*** finished computation of 7 references, err: [Inf, 0.2068806214982747, 0.16571912372266984, 0.15844735474712487, 0.1547291883975379] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [21, 90, 0]]
** centroid: 1, normalized-entropy: 0.699772221773307, [(1, 21), (2, 90)]
*** center 2: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [110, 8, 0]]
** centroid: 3, normalized-entropy: 0.3576467062456333, [(1, 110), (2, 8)]
*** center 4: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 117, 20]]
** centroid: 5, normalized-entropy: 0.5997019071283692, [(2, 117), (3, 20)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [80, 9, 0]]
** centroid: 6, normalized-entropy: 0.4725472219330293, [(1, 80), (2, 9)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [62, 20, 0]]
** centroid: 7, normalized-entropy: 0.8014698931335286, [(1, 62), (2, 20)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2241769828742881] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2241769828742881, 0.17779689764106896] ***
*** starting iteration: 2; err: [Inf, 0.2241769828742881, 0.17779689764106896] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2241769828742881, 0.17779689764106896, 0.16814623568681764] ***
*** starting iteration: 3; err: [Inf, 0.2241769828742881, 0.17779689764106896, 0.16814623568681764] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2241769828742881, 0.17779689764106896, 0.16814623568681764, 0.16470908559719172] ***
*** finished computation of 7 references, err: [Inf, 0.2241769828742881, 0.17779689764106896, 0.16814623568681764, 0.16470908559719172] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 87, 10]]
** centroid: 1, normalized-entropy: 0.478723511385963, [(2, 87), (3, 10)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [127, 26, 0]]
** centroid: 2, normalized-entropy: 0.6575552420930868, [(1, 127), (2, 26)]
*** center 3: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [20, 26, 0]]
** centroid: 5, normalized-entropy: 0.9876925088958032, [(1, 20), (2, 26)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 99, 16]]
** centroid: 6, normalized-entropy: 0.5819569606149722, [(2, 99), (3, 16)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [59, 3, 0]]
** centroid: 7, normalized-entropy: 0.2795055456366802, [(1, 59), (2, 3)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3168930468700446] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3168930468700446, 0.24168878160389112] ***
*** starting iteration: 2; err: [Inf, 0.3168930468700446, 0.24168878160389112] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3168930468700446, 0.24168878160389112, 0.23722258473637406] ***
*** starting iteration: 3; err: [Inf, 0.3168930468700446, 0.24168878160389112, 0.23722258473637406] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3168930468700446, 0.24168878160389112, 0.23722258473637406, 0.23623163385985158] ***
*** finished computation of 3 references, err: [Inf, 0.3168930468700446, 0.24168878160389112, 0.23722258473637406, 0.23623163385985158] ***
*** center 1: selecting labels [1] (freq >= 2) [from [227, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [176, 72, 0]]
** centroid: 2, normalized-entropy: 0.8691375806126381, [(1, 176), (2, 72)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [4, 161, 26]]
** centroid: 3, normalized-entropy: 0.4518905733089791, [(1, 4), (2, 161), (3, 26)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2991320597148546] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2991320597148546, 0.24547147738846434] ***
*** starting iteration: 2; err: [Inf, 0.2991320597148546, 0.24547147738846434] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2991320597148546, 0.24547147738846434, 0.23713615934770818] ***
*** starting iteration: 3; err: [Inf, 0.2991320597148546, 0.24547147738846434, 0.23713615934770818] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2991320597148546, 0.24547147738846434, 0.23713615934770818, 0.2350881847244376] ***
*** starting iteration: 4; err: [Inf, 0.2991320597148546, 0.24547147738846434, 0.23713615934770818, 0.2350881847244376] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2991320597148546, 0.24547147738846434, 0.23713615934770818, 0.2350881847244376, 0.23455776802419143] ***
*** finished computation of 3 references, err: [Inf, 0.2991320597148546, 0.24547147738846434, 0.23713615934770818, 0.2350881847244376, 0.23455776802419143] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [257, 3, 0]]
** centroid: 1, normalized-entropy: 0.09082782593233854, [(1, 257), (2, 3)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [18, 169, 20]]
** centroid: 2, normalized-entropy: 0.5495671359813965, [(1, 18), (2, 169), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [128, 72, 0]]
** centroid: 3, normalized-entropy: 0.9426831892554921, [(1, 128), (2, 72)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3328739403673019] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3328739403673019, 0.254317929201677] ***
*** starting iteration: 2; err: [Inf, 0.3328739403673019, 0.254317929201677] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3328739403673019, 0.254317929201677, 0.2418489362597689] ***
*** starting iteration: 3; err: [Inf, 0.3328739403673019, 0.254317929201677, 0.2418489362597689] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3328739403673019, 0.254317929201677, 0.2418489362597689, 0.23865699554713948] ***
*** starting iteration: 4; err: [Inf, 0.3328739403673019, 0.254317929201677, 0.2418489362597689, 0.23865699554713948] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3328739403673019, 0.254317929201677, 0.2418489362597689, 0.23865699554713948, 0.23756179631920882] ***
*** starting iteration: 5; err: [Inf, 0.3328739403673019, 0.254317929201677, 0.2418489362597689, 0.23865699554713948, 0.23756179631920882] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3328739403673019, 0.254317929201677, 0.2418489362597689, 0.23865699554713948, 0.23756179631920882, 0.237225163059876] ***
*** finished computation of 3 references, err: [Inf, 0.3328739403673019, 0.254317929201677, 0.2418489362597689, 0.23865699554713948, 0.23756179631920882, 0.237225163059876] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [123, 66, 0]]
** centroid: 1, normalized-entropy: 0.9333572600179806, [(1, 123), (2, 66)]
*** center 2: selecting labels [1] (freq >= 2) [from [210, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [67, 175, 26]]
** centroid: 3, normalized-entropy: 0.7747971575906943, [(1, 67), (2, 175), (3, 26)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.19546967716370192] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19546967716370192, 0.1546874516000328] ***
*** finished computation of 7 references, err: [Inf, 0.19546967716370192, 0.1546874516000328] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [114, 7, 0]]
** centroid: 1, normalized-entropy: 0.3188554185210095, [(1, 114), (2, 7)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 35, 26]]
** centroid: 2, normalized-entropy: 0.9842399889605549, [(2, 35), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [105, 4, 0]]
** centroid: 3, normalized-entropy: 0.22693864262148727, [(1, 105), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [93, 4, 0]]
** centroid: 4, normalized-entropy: 0.24793583772272637, [(1, 93), (2, 4)]
*** center 5: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [16, 90, 0]]
** centroid: 6, normalized-entropy: 0.612196127490834, [(1, 16), (2, 90)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [6, 93, 0]]
** centroid: 7, normalized-entropy: 0.32984607020714635, [(1, 6), (2, 93)]
finished with 9 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 14)
[0.9300168431904959, 0.9159968351585118, 0.9110277942613272, 0.9100028171884459, 0.9019558480636324, 0.9000017982053911, 0.89899480318642, 0.8710117302931675, 0.8700167233101365, 0.8560117003230775, 0.8379457301612989, 0.8349637062211913, 0.8199696702690714, 0.7649955344566122]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9300168431904959
finished with 15
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.36505133077759555] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36505133077759555, 0.3316755739121779] ***
*** finished computation of 3 references, err: [Inf, 0.36505133077759555, 0.3316755739121779] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [147, 75, 0]]
** centroid: 1, normalized-entropy: 0.9227346209530939, [(1, 147), (2, 75)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [173, 6, 0]]
** centroid: 2, normalized-entropy: 0.2117461773453722, [(1, 173), (2, 6)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [87, 152, 26]]
** centroid: 3, normalized-entropy: 0.8303925209629183, [(1, 87), (2, 152), (3, 26)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3593951056849608] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3593951056849608, 0.3063924617707908] ***
*** finished computation of 3 references, err: [Inf, 0.3593951056849608, 0.3063924617707908] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [127, 177, 20]]
** centroid: 1, normalized-entropy: 0.7912788006867194, [(1, 127), (2, 177), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [120, 67, 0]]
** centroid: 2, normalized-entropy: 0.9412535655898132, [(1, 120), (2, 67)]
*** center 3: selecting labels [1] (freq >= 2) [from [156, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3380006269832467] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3380006269832467, 0.30137345579353675] ***
*** finished computation of 3 references, err: [Inf, 0.3380006269832467, 0.30137345579353675] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [209, 16, 0]]
** centroid: 1, normalized-entropy: 0.3700564863063504, [(1, 209), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [191, 56, 0]]
** centroid: 2, normalized-entropy: 0.7722507061188728, [(1, 191), (2, 56)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 169, 26]]
** centroid: 3, normalized-entropy: 0.5665095065529052, [(2, 169), (3, 26)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 15)
[0.9300168431904959, 0.9159968351585118, 0.9110277942613272, 0.9100028171884459, 0.9019558480636324, 0.9000017982053911, 0.89899480318642, 0.8710117302931675, 0.8700167233101365, 0.8560117003230775, 0.8379457301612989, 0.8349637062211913, 0.8199696702690714, 0.8149526772281264, 0.7649955344566122]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9300168431904959
finished with 16
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.3102827682173825] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3102827682173825, 0.23338552562564657] ***
*** starting iteration: 2; err: [Inf, 0.3102827682173825, 0.23338552562564657] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3102827682173825, 0.23338552562564657, 0.21207309851713768] ***
*** starting iteration: 3; err: [Inf, 0.3102827682173825, 0.23338552562564657, 0.21207309851713768] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3102827682173825, 0.23338552562564657, 0.21207309851713768, 0.20085850559026786] ***
*** finished computation of 7 references, err: [Inf, 0.3102827682173825, 0.23338552562564657, 0.21207309851713768, 0.20085850559026786] ***
*** center 1: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [125, 37, 0]]
** centroid: 2, normalized-entropy: 0.7752030268905998, [(1, 125), (2, 37)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [17, 69, 0]]
** centroid: 3, normalized-entropy: 0.7172524777375696, [(1, 17), (2, 69)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [45, 4, 0]]
** centroid: 4, normalized-entropy: 0.4079059801389762, [(1, 45), (2, 4)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 105, 26]]
** centroid: 5, normalized-entropy: 0.7188641311053031, [(2, 105), (3, 26)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [59, 18, 0]]
** centroid: 6, normalized-entropy: 0.7845191388986644, [(1, 59), (2, 18)]
*** center 7: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3308016021164885] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3308016021164885, 0.23134976126898688] ***
*** starting iteration: 2; err: [Inf, 0.3308016021164885, 0.23134976126898688] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3308016021164885, 0.23134976126898688, 0.2090791314630874] ***
*** starting iteration: 3; err: [Inf, 0.3308016021164885, 0.23134976126898688, 0.2090791314630874] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3308016021164885, 0.23134976126898688, 0.2090791314630874, 0.1980188671035924] ***
*** finished computation of 7 references, err: [Inf, 0.3308016021164885, 0.23134976126898688, 0.2090791314630874, 0.1980188671035924] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [1, 106, 16]]
** centroid: 1, normalized-entropy: 0.3937910404927883, [(1, 1), (2, 106), (3, 16)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 84, 4]]
** centroid: 2, normalized-entropy: 0.2667649878030262, [(2, 84), (3, 4)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [128, 2, 0]]
** centroid: 3, normalized-entropy: 0.11467550533614682, [(1, 128), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [64, 6, 0]]
** centroid: 4, normalized-entropy: 0.4220005168831531, [(1, 64), (2, 6)]
*** center 5: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [47, 34, 0]]
** centroid: 6, normalized-entropy: 0.9813387358307915, [(1, 47), (2, 34)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [55, 12, 0]]
** centroid: 7, normalized-entropy: 0.678114052360606, [(1, 55), (2, 12)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23510014533583282] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23510014533583282, 0.19601601629547294] ***
*** starting iteration: 2; err: [Inf, 0.23510014533583282, 0.19601601629547294] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23510014533583282, 0.19601601629547294, 0.19246002618220637] ***
*** starting iteration: 3; err: [Inf, 0.23510014533583282, 0.19601601629547294, 0.19246002618220637] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23510014533583282, 0.19601601629547294, 0.19246002618220637, 0.19051843437239124] ***
*** finished computation of 7 references, err: [Inf, 0.23510014533583282, 0.19601601629547294, 0.19246002618220637, 0.19051843437239124] ***
*** center 1: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 93, 26]]
** centroid: 2, normalized-entropy: 0.7573958968817643, [(2, 93), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [64, 59, 0]]
** centroid: 3, normalized-entropy: 0.9988076767835602, [(1, 64), (2, 59)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [34, 70, 0]]
** centroid: 4, normalized-entropy: 0.9117517586347538, [(1, 34), (2, 70)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [109, 3, 0]]
** centroid: 5, normalized-entropy: 0.17800689613931453, [(1, 109), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [39, 16, 0]]
** centroid: 6, normalized-entropy: 0.8698926856041562, [(1, 39), (2, 16)]
*** center 7: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 16)
[0.9300168431904959, 0.9159968351585118, 0.9110277942613272, 0.9100028171884459, 0.9019558480636324, 0.9000017982053911, 0.89899480318642, 0.8900217582852313, 0.8710117302931675, 0.8700167233101365, 0.8560117003230775, 0.8379457301612989, 0.8349637062211913, 0.8199696702690714, 0.8149526772281264, 0.7649955344566122]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9300168431904959
finished with 16
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9300168431904959, 0.9159968351585118, 0.9110277942613272, 0.9100028171884459, 0.9019558480636324, 0.9000017982053911, 0.89899480318642, 0.8900217582852313, 0.8710117302931675, 0.8700167233101365, 0.8560117003230775, 0.8379457301612989, 0.8349637062211913, 0.8199696702690714, 0.8149526772281264, 0.7649955344566122]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9300168431904959
finished with 17
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.2893895322076596] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2893895322076596, 0.2551856752031961] ***
*** starting iteration: 2; err: [Inf, 0.2893895322076596, 0.2551856752031961] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2893895322076596, 0.2551856752031961, 0.23654025511021862] ***
*** starting iteration: 3; err: [Inf, 0.2893895322076596, 0.2551856752031961, 0.23654025511021862] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2893895322076596, 0.2551856752031961, 0.23654025511021862, 0.23460860568442726] ***
*** starting iteration: 4; err: [Inf, 0.2893895322076596, 0.2551856752031961, 0.23654025511021862, 0.23460860568442726] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2893895322076596, 0.2551856752031961, 0.23654025511021862, 0.23460860568442726, 0.23448867213495592] ***
*** finished computation of 3 references, err: [Inf, 0.2893895322076596, 0.2551856752031961, 0.23654025511021862, 0.23460860568442726, 0.23448867213495592] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [185, 60, 0]]
** centroid: 1, normalized-entropy: 0.8030909760146977, [(1, 185), (2, 60)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 146, 26]]
** centroid: 2, normalized-entropy: 0.6127425554686624, [(2, 146), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [222, 27, 0]]
** centroid: 3, normalized-entropy: 0.4951734787020683, [(1, 222), (2, 27)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2589237917175536] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2589237917175536, 0.23753118195823733] ***
*** starting iteration: 2; err: [Inf, 0.2589237917175536, 0.23753118195823733] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2589237917175536, 0.23753118195823733, 0.2361354025344698] ***
*** starting iteration: 3; err: [Inf, 0.2589237917175536, 0.23753118195823733, 0.2361354025344698] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2589237917175536, 0.23753118195823733, 0.2361354025344698, 0.23589792172668844] ***
*** finished computation of 3 references, err: [Inf, 0.2589237917175536, 0.23753118195823733, 0.2361354025344698, 0.23589792172668844] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [155, 65, 0]]
** centroid: 1, normalized-entropy: 0.8756633923230399, [(1, 155), (2, 65)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [245, 4, 0]]
** centroid: 2, normalized-entropy: 0.11873167080049137, [(1, 245), (2, 4)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [3, 175, 20]]
** centroid: 3, normalized-entropy: 0.36790602700478614, [(1, 3), (2, 175), (3, 20)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3332986181303077] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3332986181303077, 0.25888308428641205] ***
*** starting iteration: 2; err: [Inf, 0.3332986181303077, 0.25888308428641205] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3332986181303077, 0.25888308428641205, 0.24082757232814045] ***
*** starting iteration: 3; err: [Inf, 0.3332986181303077, 0.25888308428641205, 0.24082757232814045] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3332986181303077, 0.25888308428641205, 0.24082757232814045, 0.23741246395740195] ***
*** starting iteration: 4; err: [Inf, 0.3332986181303077, 0.25888308428641205, 0.24082757232814045, 0.23741246395740195] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3332986181303077, 0.25888308428641205, 0.24082757232814045, 0.23741246395740195, 0.23670672305274582] ***
*** finished computation of 3 references, err: [Inf, 0.3332986181303077, 0.25888308428641205, 0.24082757232814045, 0.23741246395740195, 0.23670672305274582] ***
*** center 1: selecting labels [1] (freq >= 1) [from [212, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [69, 153, 26]]
** centroid: 2, normalized-entropy: 0.810441288830896, [(1, 69), (2, 153), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [119, 88, 0]]
** centroid: 3, normalized-entropy: 0.9837608885441202, [(1, 119), (2, 88)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 17)
[0.9300168431904959, 0.9159968351585118, 0.9110277942613272, 0.9100028171884459, 0.9019558480636324, 0.9000017982053911, 0.8990367613122103, 0.89899480318642, 0.8900217582852313, 0.8710117302931675, 0.8700167233101365, 0.8560117003230775, 0.8379457301612989, 0.8349637062211913, 0.8199696702690714, 0.8149526772281264, 0.7649955344566122]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9300168431904959
finished with 17
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.9300168431904959, 0.9159968351585118, 0.9110277942613272, 0.9100028171884459, 0.9019558480636324, 0.9000017982053911, 0.8990367613122103, 0.89899480318642, 0.8900217582852313, 0.8710117302931675, 0.8700167233101365, 0.8560117003230775, 0.8379457301612989, 0.8349637062211913, 0.8199696702690714, 0.8149526772281264, 0.7649955344566122]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9300168431904959
finished with 18
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.207705128203809] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.207705128203809, 0.16306514068934563] ***
*** starting iteration: 2; err: [Inf, 0.207705128203809, 0.16306514068934563] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.207705128203809, 0.16306514068934563, 0.15655284725526744] ***
*** starting iteration: 3; err: [Inf, 0.207705128203809, 0.16306514068934563, 0.15655284725526744] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.207705128203809, 0.16306514068934563, 0.15655284725526744, 0.1558865286453904] ***
*** finished computation of 7 references, err: [Inf, 0.207705128203809, 0.16306514068934563, 0.15655284725526744, 0.1558865286453904] ***
*** center 1: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [107, 19, 0]]
** centroid: 4, normalized-entropy: 0.6118228576241159, [(1, 107), (2, 19)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 104, 26]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(2, 104), (3, 26)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [35, 44, 0]]
** centroid: 6, normalized-entropy: 0.9906174973781801, [(1, 35), (2, 44)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [68, 66, 0]]
** centroid: 7, normalized-entropy: 0.9998393017810486, [(1, 68), (2, 66)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1925353723881149] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1925353723881149, 0.16169627097252381] ***
*** starting iteration: 2; err: [Inf, 0.1925353723881149, 0.16169627097252381] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1925353723881149, 0.16169627097252381, 0.15756700364621481] ***
*** starting iteration: 3; err: [Inf, 0.1925353723881149, 0.16169627097252381, 0.15756700364621481] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1925353723881149, 0.16169627097252381, 0.15756700364621481, 0.1553805718097886] ***
*** starting iteration: 4; err: [Inf, 0.1925353723881149, 0.16169627097252381, 0.15756700364621481, 0.1553805718097886] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1925353723881149, 0.16169627097252381, 0.15756700364621481, 0.1553805718097886, 0.15305820138806636] ***
*** starting iteration: 5; err: [Inf, 0.1925353723881149, 0.16169627097252381, 0.15756700364621481, 0.1553805718097886, 0.15305820138806636] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1925353723881149, 0.16169627097252381, 0.15756700364621481, 0.1553805718097886, 0.15305820138806636, 0.14989047846861597] ***
*** starting iteration: 6; err: [Inf, 0.1925353723881149, 0.16169627097252381, 0.15756700364621481, 0.1553805718097886, 0.15305820138806636, 0.14989047846861597] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1925353723881149, 0.16169627097252381, 0.15756700364621481, 0.1553805718097886, 0.15305820138806636, 0.14989047846861597, 0.1478441427817856] ***
*** starting iteration: 7; err: [Inf, 0.1925353723881149, 0.16169627097252381, 0.15756700364621481, 0.1553805718097886, 0.15305820138806636, 0.14989047846861597, 0.1478441427817856] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1925353723881149, 0.16169627097252381, 0.15756700364621481, 0.1553805718097886, 0.15305820138806636, 0.14989047846861597, 0.1478441427817856, 0.1472244913629752] ***
*** finished computation of 7 references, err: [Inf, 0.1925353723881149, 0.16169627097252381, 0.15756700364621481, 0.1553805718097886, 0.15305820138806636, 0.14989047846861597, 0.1478441427817856, 0.1472244913629752] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 67, 18]]
** centroid: 1, normalized-entropy: 0.7448423974714387, [(2, 67), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [67, 14, 0]]
** centroid: 2, normalized-entropy: 0.6641593279528072, [(1, 67), (2, 14)]
*** center 3: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [83, 40, 0]]
** centroid: 4, normalized-entropy: 0.9099503053612785, [(1, 83), (2, 40)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 26, 0]]
** centroid: 5, normalized-entropy: 0.8714630056611941, [(1, 63), (2, 26)]
*** center 6: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 97, 2]]
** centroid: 7, normalized-entropy: 0.14257333025989857, [(2, 97), (3, 2)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21761489741439963] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21761489741439963, 0.17543877945721395] ***
*** starting iteration: 2; err: [Inf, 0.21761489741439963, 0.17543877945721395] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21761489741439963, 0.17543877945721395, 0.16403675428836018] ***
*** starting iteration: 3; err: [Inf, 0.21761489741439963, 0.17543877945721395, 0.16403675428836018] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21761489741439963, 0.17543877945721395, 0.16403675428836018, 0.15512230265131596] ***
*** starting iteration: 4; err: [Inf, 0.21761489741439963, 0.17543877945721395, 0.16403675428836018, 0.15512230265131596] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21761489741439963, 0.17543877945721395, 0.16403675428836018, 0.15512230265131596, 0.14979542087696526] ***
*** starting iteration: 5; err: [Inf, 0.21761489741439963, 0.17543877945721395, 0.16403675428836018, 0.15512230265131596, 0.14979542087696526] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21761489741439963, 0.17543877945721395, 0.16403675428836018, 0.15512230265131596, 0.14979542087696526, 0.14655560199478487] ***
*** starting iteration: 6; err: [Inf, 0.21761489741439963, 0.17543877945721395, 0.16403675428836018, 0.15512230265131596, 0.14979542087696526, 0.14655560199478487] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21761489741439963, 0.17543877945721395, 0.16403675428836018, 0.15512230265131596, 0.14979542087696526, 0.14655560199478487, 0.1455370324581437] ***
*** starting iteration: 7; err: [Inf, 0.21761489741439963, 0.17543877945721395, 0.16403675428836018, 0.15512230265131596, 0.14979542087696526, 0.14655560199478487, 0.1455370324581437] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21761489741439963, 0.17543877945721395, 0.16403675428836018, 0.15512230265131596, 0.14979542087696526, 0.14655560199478487, 0.1455370324581437, 0.1452469494475842] ***
*** finished computation of 7 references, err: [Inf, 0.21761489741439963, 0.17543877945721395, 0.16403675428836018, 0.15512230265131596, 0.14979542087696526, 0.14655560199478487, 0.1455370324581437, 0.1452469494475842] ***
*** center 1: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [64, 49, 0]]
** centroid: 4, normalized-entropy: 0.9872516848785046, [(1, 64), (2, 49)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 93, 26]]
** centroid: 5, normalized-entropy: 0.7573958968817643, [(2, 93), (3, 26)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [38, 34, 0]]
** centroid: 6, normalized-entropy: 0.9977724720899819, [(1, 38), (2, 34)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [42, 65, 0]]
** centroid: 7, normalized-entropy: 0.9664086723492078, [(1, 42), (2, 65)]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 18)
[0.9300168431904959, 0.9159968351585118, 0.9110277942613272, 0.9100028171884459, 0.9019558480636324, 0.9000017982053911, 0.9000017982053911, 0.8990367613122103, 0.89899480318642, 0.8900217582852313, 0.8710117302931675, 0.8700167233101365, 0.8560117003230775, 0.8379457301612989, 0.8349637062211913, 0.8199696702690714, 0.8149526772281264, 0.7649955344566122]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9300168431904959
finished with 18
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 18)
[0.9300168431904959, 0.9159968351585118, 0.9110277942613272, 0.9100028171884459, 0.9019558480636324, 0.9000017982053911, 0.9000017982053911, 0.8990367613122103, 0.89899480318642, 0.8900217582852313, 0.8710117302931675, 0.8700167233101365, 0.8560117003230775, 0.8379457301612989, 0.8349637062211913, 0.8199696702690714, 0.8149526772281264, 0.7649955344566122]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9300168431904959
finished with 19
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.20227951311046952] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20227951311046952, 0.15172166603225015] ***
*** starting iteration: 2; err: [Inf, 0.20227951311046952, 0.15172166603225015] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20227951311046952, 0.15172166603225015, 0.1486390922990009] ***
*** starting iteration: 3; err: [Inf, 0.20227951311046952, 0.15172166603225015, 0.1486390922990009] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20227951311046952, 0.15172166603225015, 0.1486390922990009, 0.14838469225488815] ***
*** finished computation of 7 references, err: [Inf, 0.20227951311046952, 0.15172166603225015, 0.1486390922990009, 0.14838469225488815] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [116, 3, 0]]
** centroid: 1, normalized-entropy: 0.16977000753515514, [(1, 116), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [59, 32, 0]]
** centroid: 2, normalized-entropy: 0.9355315642388212, [(1, 59), (2, 32)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 57, 20]]
** centroid: 3, normalized-entropy: 0.8263541679009075, [(2, 57), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [39, 60, 0]]
** centroid: 5, normalized-entropy: 0.9672947789468944, [(1, 39), (2, 60)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 92, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2026532195140908] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2026532195140908, 0.1478544216595361] ***
*** starting iteration: 2; err: [Inf, 0.2026532195140908, 0.1478544216595361] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2026532195140908, 0.1478544216595361, 0.14370797302663282] ***
*** starting iteration: 3; err: [Inf, 0.2026532195140908, 0.1478544216595361, 0.14370797302663282] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2026532195140908, 0.1478544216595361, 0.14370797302663282, 0.14339347535498564] ***
*** finished computation of 7 references, err: [Inf, 0.2026532195140908, 0.1478544216595361, 0.14370797302663282, 0.14339347535498564] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [89, 4, 0]]
** centroid: 1, normalized-entropy: 0.2559300438391133, [(1, 89), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [66, 48, 0]]
** centroid: 2, normalized-entropy: 0.9819407868640977, [(1, 66), (2, 48)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 65, 26]]
** centroid: 3, normalized-entropy: 0.8631205685666311, [(2, 65), (3, 26)]
*** center 4: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [55, 49, 0]]
** centroid: 5, normalized-entropy: 0.9975977315497319, [(1, 55), (2, 49)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 75, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1812045055381428] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1812045055381428, 0.15513511075618658] ***
*** starting iteration: 2; err: [Inf, 0.1812045055381428, 0.15513511075618658] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1812045055381428, 0.15513511075618658, 0.15256972424825793] ***
*** starting iteration: 3; err: [Inf, 0.1812045055381428, 0.15513511075618658, 0.15256972424825793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1812045055381428, 0.15513511075618658, 0.15256972424825793, 0.15168842560592088] ***
*** finished computation of 7 references, err: [Inf, 0.1812045055381428, 0.15513511075618658, 0.15256972424825793, 0.15168842560592088] ***
*** center 1: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 68, 26]]
** centroid: 2, normalized-entropy: 0.8507707040532602, [(2, 68), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [65, 14, 0]]
** centroid: 3, normalized-entropy: 0.6739468651941155, [(1, 65), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [54, 61, 0]]
** centroid: 4, normalized-entropy: 0.9973256795690417, [(1, 54), (2, 61)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [27, 84, 0]]
** centroid: 5, normalized-entropy: 0.8003922080453356, [(1, 27), (2, 84)]
*** center 6: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [96, 6, 0]]
** centroid: 7, normalized-entropy: 0.32275695889739825, [(1, 96), (2, 6)]
finished with 11 centroids; started with 7
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.19331374195311218] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19331374195311218, 0.15284334485512227] ***
*** starting iteration: 2; err: [Inf, 0.19331374195311218, 0.15284334485512227] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19331374195311218, 0.15284334485512227, 0.14975040602032094] ***
*** starting iteration: 3; err: [Inf, 0.19331374195311218, 0.15284334485512227, 0.14975040602032094] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19331374195311218, 0.15284334485512227, 0.14975040602032094, 0.14908635658724234] ***
*** finished computation of 7 references, err: [Inf, 0.19331374195311218, 0.15284334485512227, 0.14975040602032094, 0.14908635658724234] ***
*** center 1: selecting labels [1] (freq >= 2) [from [184, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 99, 36]]
** centroid: 2, normalized-entropy: 0.8366407419411671, [(2, 99), (3, 36)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [95, 31, 0]]
** centroid: 3, normalized-entropy: 0.8049277932345736, [(1, 95), (2, 31)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [151, 2, 0]]
** centroid: 4, normalized-entropy: 0.10053087773783542, [(1, 151), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [61, 101, 0]]
** centroid: 5, normalized-entropy: 0.955563969864456, [(1, 61), (2, 101)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [9, 126, 0]]
** centroid: 6, normalized-entropy: 0.3533593350214213, [(1, 9), (2, 126)]
*** center 7: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20361955929920078] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20361955929920078, 0.150149909356609] ***
*** starting iteration: 2; err: [Inf, 0.20361955929920078, 0.150149909356609] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20361955929920078, 0.150149909356609, 0.14663400992564857] ***
*** starting iteration: 3; err: [Inf, 0.20361955929920078, 0.150149909356609, 0.14663400992564857] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20361955929920078, 0.150149909356609, 0.14663400992564857, 0.14610919124074281] ***
*** finished computation of 7 references, err: [Inf, 0.20361955929920078, 0.150149909356609, 0.14663400992564857, 0.14610919124074281] ***
*** center 1: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 53, 24]]
** centroid: 2, normalized-entropy: 0.8951127210954559, [(2, 53), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 2, 0]]
** centroid: 3, normalized-entropy: 0.2222848306856879, [(1, 54), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [76, 22, 0]]
** centroid: 4, normalized-entropy: 0.7682814090975241, [(1, 76), (2, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [38, 26, 0]]
** centroid: 5, normalized-entropy: 0.9744894033980525, [(1, 38), (2, 26)]
*** center 6: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 70, 0]]
** centroid: 7, normalized-entropy: 0.24729443986205674, [(1, 3), (2, 70)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18521244884561747] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18521244884561747, 0.1537479453990236] ***
*** starting iteration: 2; err: [Inf, 0.18521244884561747, 0.1537479453990236] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18521244884561747, 0.1537479453990236, 0.14901258578523993] ***
*** starting iteration: 3; err: [Inf, 0.18521244884561747, 0.1537479453990236, 0.14901258578523993] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18521244884561747, 0.1537479453990236, 0.14901258578523993, 0.14806967209093272] ***
*** finished computation of 7 references, err: [Inf, 0.18521244884561747, 0.1537479453990236, 0.14901258578523993, 0.14806967209093272] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [46, 47, 0]]
** centroid: 1, normalized-entropy: 0.9999165959739288, [(1, 46), (2, 47)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [57, 2, 0]]
** centroid: 2, normalized-entropy: 0.21357981533827744, [(1, 57), (2, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 47, 17]]
** centroid: 4, normalized-entropy: 0.8351164948421137, [(2, 47), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [80, 5, 0]]
** centroid: 5, normalized-entropy: 0.32275695889739825, [(1, 80), (2, 5)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 78, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19309459064900875] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19309459064900875, 0.1523648311458528] ***
*** starting iteration: 2; err: [Inf, 0.19309459064900875, 0.1523648311458528] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19309459064900875, 0.1523648311458528, 0.14893712880834936] ***
*** starting iteration: 3; err: [Inf, 0.19309459064900875, 0.1523648311458528, 0.14893712880834936] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19309459064900875, 0.1523648311458528, 0.14893712880834936, 0.1478819447532296] ***
*** starting iteration: 4; err: [Inf, 0.19309459064900875, 0.1523648311458528, 0.14893712880834936, 0.1478819447532296] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19309459064900875, 0.1523648311458528, 0.14893712880834936, 0.1478819447532296, 0.14758444048836827] ***
*** finished computation of 7 references, err: [Inf, 0.19309459064900875, 0.1523648311458528, 0.14893712880834936, 0.1478819447532296, 0.14758444048836827] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 66, 9]]
** centroid: 1, normalized-entropy: 0.5293608652873645, [(2, 66), (3, 9)]
*** center 2: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 23, 0]]
** centroid: 3, normalized-entropy: 0.9231199835423002, [(1, 45), (2, 23)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [58, 3, 0]]
** centroid: 4, normalized-entropy: 0.28290479297989196, [(1, 58), (2, 3)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 76, 4]]
** centroid: 5, normalized-entropy: 0.2863969571159561, [(2, 76), (3, 4)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [90, 6, 0]]
** centroid: 6, normalized-entropy: 0.3372900666170139, [(1, 90), (2, 6)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [40, 15, 0]]
** centroid: 7, normalized-entropy: 0.8453509366224364, [(1, 40), (2, 15)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1849839028418064] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1849839028418064, 0.14832800504937768] ***
*** starting iteration: 2; err: [Inf, 0.1849839028418064, 0.14832800504937768] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1849839028418064, 0.14832800504937768, 0.14496837112354113] ***
*** starting iteration: 3; err: [Inf, 0.1849839028418064, 0.14832800504937768, 0.14496837112354113] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1849839028418064, 0.14832800504937768, 0.14496837112354113, 0.1438707073861733] ***
*** starting iteration: 4; err: [Inf, 0.1849839028418064, 0.14832800504937768, 0.14496837112354113, 0.1438707073861733] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1849839028418064, 0.14832800504937768, 0.14496837112354113, 0.1438707073861733, 0.14367275475431235] ***
*** finished computation of 7 references, err: [Inf, 0.1849839028418064, 0.14832800504937768, 0.14496837112354113, 0.1438707073861733, 0.14367275475431235] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [96, 3, 0]]
** centroid: 1, normalized-entropy: 0.19590927087360496, [(1, 96), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [50, 21, 0]]
** centroid: 2, normalized-entropy: 0.8760643678555242, [(1, 50), (2, 21)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 31, 17]]
** centroid: 3, normalized-entropy: 0.9377342939868042, [(2, 31), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [20, 49, 0]]
** centroid: 5, normalized-entropy: 0.868533960265235, [(1, 20), (2, 49)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 72, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1924155975319445] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1924155975319445, 0.15443410507589578] ***
*** starting iteration: 2; err: [Inf, 0.1924155975319445, 0.15443410507589578] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1924155975319445, 0.15443410507589578, 0.14952684603910893] ***
*** starting iteration: 3; err: [Inf, 0.1924155975319445, 0.15443410507589578, 0.14952684603910893] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1924155975319445, 0.15443410507589578, 0.14952684603910893, 0.14795073177851736] ***
*** starting iteration: 4; err: [Inf, 0.1924155975319445, 0.15443410507589578, 0.14952684603910893, 0.14795073177851736] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1924155975319445, 0.15443410507589578, 0.14952684603910893, 0.14795073177851736, 0.14735529471747577] ***
*** finished computation of 7 references, err: [Inf, 0.1924155975319445, 0.15443410507589578, 0.14952684603910893, 0.14795073177851736, 0.14735529471747577] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [78, 7, 0]]
** centroid: 1, normalized-entropy: 0.4104161417181887, [(1, 78), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [56, 10, 0]]
** centroid: 2, normalized-entropy: 0.6136190195993708, [(1, 56), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 33, 18]]
** centroid: 3, normalized-entropy: 0.9366673818775627, [(2, 33), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 59, 0]]
** centroid: 6, normalized-entropy: 0.48791799258948565, [(1, 7), (2, 59)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 67, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18208139584586025] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18208139584586025, 0.15106522565335034] ***
*** starting iteration: 2; err: [Inf, 0.18208139584586025, 0.15106522565335034] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18208139584586025, 0.15106522565335034, 0.14841560347750782] ***
*** starting iteration: 3; err: [Inf, 0.18208139584586025, 0.15106522565335034, 0.14841560347750782] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18208139584586025, 0.15106522565335034, 0.14841560347750782, 0.14724202294275165] ***
*** starting iteration: 4; err: [Inf, 0.18208139584586025, 0.15106522565335034, 0.14841560347750782, 0.14724202294275165] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18208139584586025, 0.15106522565335034, 0.14841560347750782, 0.14724202294275165, 0.14673002056311815] ***
*** finished computation of 7 references, err: [Inf, 0.18208139584586025, 0.15106522565335034, 0.14841560347750782, 0.14724202294275165, 0.14673002056311815] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [82, 3, 0]]
** centroid: 1, normalized-entropy: 0.22028326695127437, [(1, 82), (2, 3)]
*** center 2: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 25, 17]]
** centroid: 3, normalized-entropy: 0.9736680645496202, [(2, 25), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [62, 10, 0]]
** centroid: 5, normalized-entropy: 0.581321498763703, [(1, 62), (2, 10)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 58, 0]]
** centroid: 6, normalized-entropy: 0.3451173149449528, [(1, 4), (2, 58)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 77, 0]]
** centroid: 7, normalized-entropy: 0.2307099556914763, [(1, 3), (2, 77)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1953501687962562] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1953501687962562, 0.1527693942524493] ***
*** starting iteration: 2; err: [Inf, 0.1953501687962562, 0.1527693942524493] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1953501687962562, 0.1527693942524493, 0.14883155078161509] ***
*** starting iteration: 3; err: [Inf, 0.1953501687962562, 0.1527693942524493, 0.14883155078161509] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1953501687962562, 0.1527693942524493, 0.14883155078161509, 0.1478416478317231] ***
*** finished computation of 7 references, err: [Inf, 0.1953501687962562, 0.1527693942524493, 0.14883155078161509, 0.1478416478317231] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [56, 35, 0]]
** centroid: 1, normalized-entropy: 0.961236604722876, [(1, 56), (2, 35)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [73, 2, 0]]
** centroid: 2, normalized-entropy: 0.1773894531859976, [(1, 73), (2, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 57, 17]]
** centroid: 4, normalized-entropy: 0.77753986416076, [(2, 57), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [51, 16, 0]]
** centroid: 5, normalized-entropy: 0.7930490047779772, [(1, 51), (2, 16)]
*** center 6: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 71, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1925757620651275] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1925757620651275, 0.15340967096481473] ***
*** starting iteration: 2; err: [Inf, 0.1925757620651275, 0.15340967096481473] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1925757620651275, 0.15340967096481473, 0.14724847068451344] ***
*** starting iteration: 3; err: [Inf, 0.1925757620651275, 0.15340967096481473, 0.14724847068451344] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1925757620651275, 0.15340967096481473, 0.14724847068451344, 0.14648826062493026] ***
*** finished computation of 7 references, err: [Inf, 0.1925757620651275, 0.15340967096481473, 0.14724847068451344, 0.14648826062493026] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [11, 67, 0]]
** centroid: 1, normalized-entropy: 0.5869185834047994, [(1, 11), (2, 67)]
*** center 2: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [42, 32, 0]]
** centroid: 3, normalized-entropy: 0.9867867202680318, [(1, 42), (2, 32)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [51, 34, 0]]
** centroid: 4, normalized-entropy: 0.9709505944546688, [(1, 51), (2, 34)]
*** center 5: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 50, 17]]
** centroid: 6, normalized-entropy: 0.8171387756817725, [(2, 50), (3, 17)]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 1, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19500690670497717] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19500690670497717, 0.15020433982647954] ***
*** starting iteration: 2; err: [Inf, 0.19500690670497717, 0.15020433982647954] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19500690670497717, 0.15020433982647954, 0.14616838829405607] ***
*** starting iteration: 3; err: [Inf, 0.19500690670497717, 0.15020433982647954, 0.14616838829405607] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19500690670497717, 0.15020433982647954, 0.14616838829405607, 0.14511293386481702] ***
*** starting iteration: 4; err: [Inf, 0.19500690670497717, 0.15020433982647954, 0.14616838829405607, 0.14511293386481702] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19500690670497717, 0.15020433982647954, 0.14616838829405607, 0.14511293386481702, 0.14462698279879987] ***
*** finished computation of 7 references, err: [Inf, 0.19500690670497717, 0.15020433982647954, 0.14616838829405607, 0.14511293386481702, 0.14462698279879987] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [3, 66, 0]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(1, 3), (2, 66)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 10, 0]]
** centroid: 2, normalized-entropy: 0.5864477034453907, [(1, 61), (2, 10)]
*** center 3: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 62, 19]]
** centroid: 4, normalized-entropy: 0.785889583138768, [(2, 62), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [52, 30, 0]]
** centroid: 5, normalized-entropy: 0.9474351361840305, [(1, 52), (2, 30)]
*** center 6: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [53, 8, 0]]
** centroid: 7, normalized-entropy: 0.5605769426145328, [(1, 53), (2, 8)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20359640537388624] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20359640537388624, 0.15120607854425908] ***
*** starting iteration: 2; err: [Inf, 0.20359640537388624, 0.15120607854425908] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20359640537388624, 0.15120607854425908, 0.14787741438671947] ***
*** starting iteration: 3; err: [Inf, 0.20359640537388624, 0.15120607854425908, 0.14787741438671947] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20359640537388624, 0.15120607854425908, 0.14787741438671947, 0.1476785705834627] ***
*** finished computation of 7 references, err: [Inf, 0.20359640537388624, 0.15120607854425908, 0.14787741438671947, 0.1476785705834627] ***
*** center 1: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 72, 17]]
** centroid: 2, normalized-entropy: 0.7035821005719904, [(2, 72), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [47, 33, 0]]
** centroid: 3, normalized-entropy: 0.9777945702913884, [(1, 47), (2, 33)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [51, 22, 0]]
** centroid: 4, normalized-entropy: 0.8829589691462253, [(1, 51), (2, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [24, 42, 0]]
** centroid: 5, normalized-entropy: 0.9456603046006401, [(1, 24), (2, 42)]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20676464798022062] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20676464798022062, 0.15048233548831194] ***
*** starting iteration: 2; err: [Inf, 0.20676464798022062, 0.15048233548831194] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20676464798022062, 0.15048233548831194, 0.14654724966129287] ***
*** starting iteration: 3; err: [Inf, 0.20676464798022062, 0.15048233548831194, 0.14654724966129287] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20676464798022062, 0.15048233548831194, 0.14654724966129287, 0.14613633707235568] ***
*** finished computation of 7 references, err: [Inf, 0.20676464798022062, 0.15048233548831194, 0.14654724966129287, 0.14613633707235568] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [30, 38, 0]]
** centroid: 1, normalized-entropy: 0.9899927915575186, [(1, 30), (2, 38)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 39, 0]]
** centroid: 2, normalized-entropy: 0.9832307535844343, [(1, 53), (2, 39)]
*** center 3: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 74, 17]]
** centroid: 4, normalized-entropy: 0.6947570868163001, [(2, 74), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [33, 30, 0]]
** centroid: 5, normalized-entropy: 0.998363672593813, [(1, 33), (2, 30)]
*** center 6: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18995720232650637] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18995720232650637, 0.15809075819328428] ***
*** starting iteration: 2; err: [Inf, 0.18995720232650637, 0.15809075819328428] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18995720232650637, 0.15809075819328428, 0.15160201220028102] ***
*** starting iteration: 3; err: [Inf, 0.18995720232650637, 0.15809075819328428, 0.15160201220028102] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18995720232650637, 0.15809075819328428, 0.15160201220028102, 0.1487378867417574] ***
*** starting iteration: 4; err: [Inf, 0.18995720232650637, 0.15809075819328428, 0.15160201220028102, 0.1487378867417574] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18995720232650637, 0.15809075819328428, 0.15160201220028102, 0.1487378867417574, 0.14730613472964615] ***
*** starting iteration: 5; err: [Inf, 0.18995720232650637, 0.15809075819328428, 0.15160201220028102, 0.1487378867417574, 0.14730613472964615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18995720232650637, 0.15809075819328428, 0.15160201220028102, 0.1487378867417574, 0.14730613472964615, 0.14678735262714326] ***
*** finished computation of 7 references, err: [Inf, 0.18995720232650637, 0.15809075819328428, 0.15160201220028102, 0.1487378867417574, 0.14730613472964615, 0.14678735262714326] ***
*** center 1: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 50, 19]]
** centroid: 2, normalized-entropy: 0.849054424254048, [(2, 50), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [51, 12, 0]]
** centroid: 3, normalized-entropy: 0.7024665512903904, [(1, 51), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [74, 34, 0]]
** centroid: 4, normalized-entropy: 0.8986533756907481, [(1, 74), (2, 34)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [38, 29, 0]]
** centroid: 5, normalized-entropy: 0.9869444983748495, [(1, 38), (2, 29)]
*** center 6: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 52, 3]]
** centroid: 7, normalized-entropy: 0.30540057087920036, [(2, 52), (3, 3)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20731898339185864] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20731898339185864, 0.1507211074382067] ***
*** starting iteration: 2; err: [Inf, 0.20731898339185864, 0.1507211074382067] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20731898339185864, 0.1507211074382067, 0.1466415769504383] ***
*** starting iteration: 3; err: [Inf, 0.20731898339185864, 0.1507211074382067, 0.1466415769504383] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20731898339185864, 0.1507211074382067, 0.1466415769504383, 0.14615424877405167] ***
*** finished computation of 7 references, err: [Inf, 0.20731898339185864, 0.1507211074382067, 0.1466415769504383, 0.14615424877405167] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [50, 41, 0]]
** centroid: 1, normalized-entropy: 0.9929326437363045, [(1, 50), (2, 41)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [75, 2, 0]]
** centroid: 2, normalized-entropy: 0.17378132267943294, [(1, 75), (2, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 54, 16]]
** centroid: 4, normalized-entropy: 0.775512658133148, [(2, 54), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [39, 31, 0]]
** centroid: 5, normalized-entropy: 0.9905577004075262, [(1, 39), (2, 31)]
*** center 6: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 60, 0]]
** centroid: 7, normalized-entropy: 0.2055925081850832, [(1, 2), (2, 60)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19557752440683543] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19557752440683543, 0.1509268646016717] ***
*** starting iteration: 2; err: [Inf, 0.19557752440683543, 0.1509268646016717] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19557752440683543, 0.1509268646016717, 0.147724504487589] ***
*** starting iteration: 3; err: [Inf, 0.19557752440683543, 0.1509268646016717, 0.147724504487589] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19557752440683543, 0.1509268646016717, 0.147724504487589, 0.146370266597718] ***
*** starting iteration: 4; err: [Inf, 0.19557752440683543, 0.1509268646016717, 0.147724504487589, 0.146370266597718] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19557752440683543, 0.1509268646016717, 0.147724504487589, 0.146370266597718, 0.14560665433481335] ***
*** finished computation of 7 references, err: [Inf, 0.19557752440683543, 0.1509268646016717, 0.147724504487589, 0.146370266597718, 0.14560665433481335] ***
*** center 1: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [55, 39, 0]]
** centroid: 2, normalized-entropy: 0.978998737002276, [(1, 55), (2, 39)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 42, 20]]
** centroid: 3, normalized-entropy: 0.9071657675730821, [(2, 42), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [28, 33, 0]]
** centroid: 5, normalized-entropy: 0.995148095654003, [(1, 28), (2, 33)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 66, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19379839203320443] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19379839203320443, 0.1531542240390554] ***
*** starting iteration: 2; err: [Inf, 0.19379839203320443, 0.1531542240390554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19379839203320443, 0.1531542240390554, 0.1489312198329717] ***
*** starting iteration: 3; err: [Inf, 0.19379839203320443, 0.1531542240390554, 0.1489312198329717] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19379839203320443, 0.1531542240390554, 0.1489312198329717, 0.14748230878449978] ***
*** starting iteration: 4; err: [Inf, 0.19379839203320443, 0.1531542240390554, 0.1489312198329717, 0.14748230878449978] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19379839203320443, 0.1531542240390554, 0.1489312198329717, 0.14748230878449978, 0.14692883784137667] ***
*** finished computation of 7 references, err: [Inf, 0.19379839203320443, 0.1531542240390554, 0.1489312198329717, 0.14748230878449978, 0.14692883784137667] ***
*** center 1: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [73, 21, 0]]
** centroid: 2, normalized-entropy: 0.7663350359691776, [(1, 73), (2, 21)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 47, 20]]
** centroid: 3, normalized-entropy: 0.8794587736429037, [(2, 47), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [26, 54, 0]]
** centroid: 5, normalized-entropy: 0.9097361225311661, [(1, 26), (2, 54)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 57, 0]]
** centroid: 6, normalized-entropy: 0.34918437350730797, [(1, 4), (2, 57)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [52, 6, 0]]
** centroid: 7, normalized-entropy: 0.47983202361612853, [(1, 52), (2, 6)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2091392649319023] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2091392649319023, 0.15125461347401142] ***
*** starting iteration: 2; err: [Inf, 0.2091392649319023, 0.15125461347401142] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2091392649319023, 0.15125461347401142, 0.14685065785236656] ***
*** starting iteration: 3; err: [Inf, 0.2091392649319023, 0.15125461347401142, 0.14685065785236656] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2091392649319023, 0.15125461347401142, 0.14685065785236656, 0.14647436272352934] ***
*** finished computation of 7 references, err: [Inf, 0.2091392649319023, 0.15125461347401142, 0.14685065785236656, 0.14647436272352934] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 60, 21]]
** centroid: 1, normalized-entropy: 0.8256265261578954, [(2, 60), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [49, 5, 0]]
** centroid: 3, normalized-entropy: 0.44506485705083854, [(1, 49), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [68, 21, 0]]
** centroid: 4, normalized-entropy: 0.7882487221644084, [(1, 68), (2, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [27, 32, 0]]
** centroid: 5, normalized-entropy: 0.9948131754904235, [(1, 27), (2, 32)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 64, 0]]
** centroid: 6, normalized-entropy: 0.32275695889739825, [(1, 4), (2, 64)]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19042872935067862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19042872935067862, 0.1522587769543752] ***
*** starting iteration: 2; err: [Inf, 0.19042872935067862, 0.1522587769543752] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19042872935067862, 0.1522587769543752, 0.1470636843685061] ***
*** starting iteration: 3; err: [Inf, 0.19042872935067862, 0.1522587769543752, 0.1470636843685061] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19042872935067862, 0.1522587769543752, 0.1470636843685061, 0.1457002400830388] ***
*** starting iteration: 4; err: [Inf, 0.19042872935067862, 0.1522587769543752, 0.1470636843685061, 0.1457002400830388] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19042872935067862, 0.1522587769543752, 0.1470636843685061, 0.1457002400830388, 0.14540127808973194] ***
*** finished computation of 7 references, err: [Inf, 0.19042872935067862, 0.1522587769543752, 0.1470636843685061, 0.1457002400830388, 0.14540127808973194] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 55, 21]]
** centroid: 1, normalized-entropy: 0.8503821170987139, [(2, 55), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [46, 9, 0]]
** centroid: 3, normalized-entropy: 0.6429383500409613, [(1, 46), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [72, 19, 0]]
** centroid: 4, normalized-entropy: 0.7391658175693049, [(1, 72), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [51, 18, 0]]
** centroid: 5, normalized-entropy: 0.828055725379504, [(1, 51), (2, 18)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 72, 0]]
** centroid: 6, normalized-entropy: 0.1792560669283214, [(1, 2), (2, 72)]
*** center 7: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18588478722702712] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18588478722702712, 0.15377062390791252] ***
*** starting iteration: 2; err: [Inf, 0.18588478722702712, 0.15377062390791252] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18588478722702712, 0.15377062390791252, 0.1502078261906281] ***
*** starting iteration: 3; err: [Inf, 0.18588478722702712, 0.15377062390791252, 0.1502078261906281] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18588478722702712, 0.15377062390791252, 0.1502078261906281, 0.1496158963572234] ***
*** finished computation of 7 references, err: [Inf, 0.18588478722702712, 0.15377062390791252, 0.1502078261906281, 0.1496158963572234] ***
*** center 1: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 46, 19]]
** centroid: 2, normalized-entropy: 0.871683617119982, [(2, 46), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [40, 28, 0]]
** centroid: 3, normalized-entropy: 0.9774178175281716, [(1, 40), (2, 28)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [34, 31, 0]]
** centroid: 4, normalized-entropy: 0.9984628557283827, [(1, 34), (2, 31)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [11, 77, 0]]
** centroid: 5, normalized-entropy: 0.5435644431995963, [(1, 11), (2, 77)]
*** center 6: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [72, 4, 0]]
** centroid: 7, normalized-entropy: 0.2974722489192896, [(1, 72), (2, 4)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19742830443009735] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19742830443009735, 0.15435430146520956] ***
*** starting iteration: 2; err: [Inf, 0.19742830443009735, 0.15435430146520956] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19742830443009735, 0.15435430146520956, 0.1487376346848905] ***
*** starting iteration: 3; err: [Inf, 0.19742830443009735, 0.15435430146520956, 0.1487376346848905] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19742830443009735, 0.15435430146520956, 0.1487376346848905, 0.1477548050135374] ***
*** finished computation of 7 references, err: [Inf, 0.19742830443009735, 0.15435430146520956, 0.1487376346848905, 0.1477548050135374] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [19, 60, 0]]
** centroid: 1, normalized-entropy: 0.7958812735955936, [(1, 19), (2, 60)]
*** center 2: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [51, 20, 0]]
** centroid: 3, normalized-entropy: 0.8577435372751958, [(1, 51), (2, 20)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [41, 40, 0]]
** centroid: 4, normalized-entropy: 0.9998900524545515, [(1, 41), (2, 40)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 65, 20]]
** centroid: 5, normalized-entropy: 0.787126586201269, [(2, 65), (3, 20)]
*** center 6: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19547839891165494] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19547839891165494, 0.15371703366562725] ***
*** starting iteration: 2; err: [Inf, 0.19547839891165494, 0.15371703366562725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19547839891165494, 0.15371703366562725, 0.14983547047898174] ***
*** starting iteration: 3; err: [Inf, 0.19547839891165494, 0.15371703366562725, 0.14983547047898174] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19547839891165494, 0.15371703366562725, 0.14983547047898174, 0.1491641096100211] ***
*** finished computation of 7 references, err: [Inf, 0.19547839891165494, 0.15371703366562725, 0.14983547047898174, 0.1491641096100211] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [75, 8, 0]]
** centroid: 1, normalized-entropy: 0.4574321808988397, [(1, 75), (2, 8)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 62, 19]]
** centroid: 2, normalized-entropy: 0.785889583138768, [(2, 62), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [51, 11, 0]]
** centroid: 3, normalized-entropy: 0.674398887071447, [(1, 51), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [34, 37, 0]]
** centroid: 4, normalized-entropy: 0.9987117514654895, [(1, 34), (2, 37)]
*** center 5: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 69, 0]]
** centroid: 7, normalized-entropy: 0.306424729870515, [(1, 4), (2, 69)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19024468980450182] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19024468980450182, 0.15228008631896228] ***
*** starting iteration: 2; err: [Inf, 0.19024468980450182, 0.15228008631896228] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19024468980450182, 0.15228008631896228, 0.14815429972391575] ***
*** starting iteration: 3; err: [Inf, 0.19024468980450182, 0.15228008631896228, 0.14815429972391575] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19024468980450182, 0.15228008631896228, 0.14815429972391575, 0.14774529587849974] ***
*** finished computation of 7 references, err: [Inf, 0.19024468980450182, 0.15228008631896228, 0.14815429972391575, 0.14774529587849974] ***
*** center 1: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [70, 17, 0]]
** centroid: 2, normalized-entropy: 0.7126368350739763, [(1, 70), (2, 17)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 34, 18]]
** centroid: 3, normalized-entropy: 0.9305861291319927, [(2, 34), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [21, 56, 0]]
** centroid: 5, normalized-entropy: 0.8453509366224364, [(1, 21), (2, 56)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 62, 0]]
** centroid: 6, normalized-entropy: 0.269828447703074, [(1, 3), (2, 62)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [47, 5, 0]]
** centroid: 7, normalized-entropy: 0.45668363153944286, [(1, 47), (2, 5)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1828021037951112] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1828021037951112, 0.1474021252442617] ***
*** starting iteration: 2; err: [Inf, 0.1828021037951112, 0.1474021252442617] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1828021037951112, 0.1474021252442617, 0.14327947332430632] ***
*** starting iteration: 3; err: [Inf, 0.1828021037951112, 0.1474021252442617, 0.14327947332430632] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1828021037951112, 0.1474021252442617, 0.14327947332430632, 0.1422518937252462] ***
*** starting iteration: 4; err: [Inf, 0.1828021037951112, 0.1474021252442617, 0.14327947332430632, 0.1422518937252462] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1828021037951112, 0.1474021252442617, 0.14327947332430632, 0.1422518937252462, 0.1419602162949741] ***
*** finished computation of 7 references, err: [Inf, 0.1828021037951112, 0.1474021252442617, 0.14327947332430632, 0.1422518937252462, 0.1419602162949741] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [81, 3, 0]]
** centroid: 1, normalized-entropy: 0.2222848306856879, [(1, 81), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 28, 0]]
** centroid: 2, normalized-entropy: 0.9568886656798214, [(1, 46), (2, 28)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 45, 19]]
** centroid: 3, normalized-entropy: 0.877437311089633, [(2, 45), (3, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [24, 43, 0]]
** centroid: 5, normalized-entropy: 0.9411864371816836, [(1, 24), (2, 43)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 64, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2013899957370013] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2013899957370013, 0.15274308679020032] ***
*** starting iteration: 2; err: [Inf, 0.2013899957370013, 0.15274308679020032] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2013899957370013, 0.15274308679020032, 0.14764932610467077] ***
*** starting iteration: 3; err: [Inf, 0.2013899957370013, 0.15274308679020032, 0.14764932610467077] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2013899957370013, 0.15274308679020032, 0.14764932610467077, 0.14730484975874425] ***
*** finished computation of 7 references, err: [Inf, 0.2013899957370013, 0.15274308679020032, 0.14764932610467077, 0.14730484975874425] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [62, 30, 0]]
** centroid: 1, normalized-entropy: 0.9108783787500366, [(1, 62), (2, 30)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [55, 9, 0]]
** centroid: 2, normalized-entropy: 0.5858732928619204, [(1, 55), (2, 9)]
*** center 3: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 47, 21]]
** centroid: 4, normalized-entropy: 0.8918107543797084, [(2, 47), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [49, 24, 0]]
** centroid: 5, normalized-entropy: 0.9136617865655933, [(1, 49), (2, 24)]
*** center 6: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 68, 0]]
** centroid: 7, normalized-entropy: 0.18717625687320805, [(1, 2), (2, 68)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20160710652545094] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20160710652545094, 0.1529537708433345] ***
*** starting iteration: 2; err: [Inf, 0.20160710652545094, 0.1529537708433345] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20160710652545094, 0.1529537708433345, 0.14862327488698066] ***
*** starting iteration: 3; err: [Inf, 0.20160710652545094, 0.1529537708433345, 0.14862327488698066] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20160710652545094, 0.1529537708433345, 0.14862327488698066, 0.14753013386856764] ***
*** starting iteration: 4; err: [Inf, 0.20160710652545094, 0.1529537708433345, 0.14862327488698066, 0.14753013386856764] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20160710652545094, 0.1529537708433345, 0.14862327488698066, 0.14753013386856764, 0.14720822188071905] ***
*** finished computation of 7 references, err: [Inf, 0.20160710652545094, 0.1529537708433345, 0.14862327488698066, 0.14753013386856764, 0.14720822188071905] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [51, 29, 0]]
** centroid: 1, normalized-entropy: 0.9447388286467892, [(1, 51), (2, 29)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 39, 0]]
** centroid: 2, normalized-entropy: 0.9871377743721862, [(1, 51), (2, 39)]
*** center 3: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 68, 15]]
** centroid: 4, normalized-entropy: 0.6816559115981193, [(2, 68), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [17, 48, 0]]
** centroid: 5, normalized-entropy: 0.829059069399666, [(1, 17), (2, 48)]
*** center 6: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19194606867060066] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19194606867060066, 0.15841454418748618] ***
*** starting iteration: 2; err: [Inf, 0.19194606867060066, 0.15841454418748618] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19194606867060066, 0.15841454418748618, 0.1531315592918545] ***
*** starting iteration: 3; err: [Inf, 0.19194606867060066, 0.15841454418748618, 0.1531315592918545] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19194606867060066, 0.15841454418748618, 0.1531315592918545, 0.15270295989979057] ***
*** finished computation of 7 references, err: [Inf, 0.19194606867060066, 0.15841454418748618, 0.1531315592918545, 0.15270295989979057] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [68, 25, 0]]
** centroid: 1, normalized-entropy: 0.8397622740178036, [(1, 68), (2, 25)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [50, 8, 0]]
** centroid: 2, normalized-entropy: 0.5787946246321198, [(1, 50), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 57, 16]]
** centroid: 3, normalized-entropy: 0.7586638628883696, [(2, 57), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [40, 25, 0]]
** centroid: 5, normalized-entropy: 0.961236604722876, [(1, 40), (2, 25)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 61, 0]]
** centroid: 6, normalized-entropy: 0.20307392998664567, [(1, 2), (2, 61)]
*** center 7: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20073825738206505] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20073825738206505, 0.15243461243994533] ***
*** starting iteration: 2; err: [Inf, 0.20073825738206505, 0.15243461243994533] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20073825738206505, 0.15243461243994533, 0.14842858415097] ***
*** starting iteration: 3; err: [Inf, 0.20073825738206505, 0.15243461243994533, 0.14842858415097] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20073825738206505, 0.15243461243994533, 0.14842858415097, 0.14801702227815985] ***
*** finished computation of 7 references, err: [Inf, 0.20073825738206505, 0.15243461243994533, 0.14842858415097, 0.14801702227815985] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [13, 61, 0]]
** centroid: 1, normalized-entropy: 0.6705250693158382, [(1, 13), (2, 61)]
*** center 2: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [48, 8, 0]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(1, 48), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [71, 14, 0]]
** centroid: 4, normalized-entropy: 0.6454495903301855, [(1, 71), (2, 14)]
*** center 5: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 38, 20]]
** centroid: 6, normalized-entropy: 0.9293636260137188, [(2, 38), (3, 20)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [7, 61, 0]]
** centroid: 7, normalized-entropy: 0.4782501641071144, [(1, 7), (2, 61)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1860305154249072] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1860305154249072, 0.15254180630855263] ***
*** starting iteration: 2; err: [Inf, 0.1860305154249072, 0.15254180630855263] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1860305154249072, 0.15254180630855263, 0.1486313393842429] ***
*** starting iteration: 3; err: [Inf, 0.1860305154249072, 0.15254180630855263, 0.1486313393842429] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1860305154249072, 0.15254180630855263, 0.1486313393842429, 0.14735041433945298] ***
*** starting iteration: 4; err: [Inf, 0.1860305154249072, 0.15254180630855263, 0.1486313393842429, 0.14735041433945298] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1860305154249072, 0.15254180630855263, 0.1486313393842429, 0.14735041433945298, 0.14663441016711296] ***
*** finished computation of 7 references, err: [Inf, 0.1860305154249072, 0.15254180630855263, 0.1486313393842429, 0.14735041433945298, 0.14663441016711296] ***
*** center 1: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 46, 19]]
** centroid: 2, normalized-entropy: 0.871683617119982, [(2, 46), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [57, 8, 0]]
** centroid: 3, normalized-entropy: 0.5381411852224502, [(1, 57), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [12, 69, 0]]
** centroid: 4, normalized-entropy: 0.6051865766334207, [(1, 12), (2, 69)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [23, 53, 0]]
** centroid: 5, normalized-entropy: 0.8844839729019952, [(1, 23), (2, 53)]
*** center 6: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [64, 3, 0]]
** centroid: 7, normalized-entropy: 0.26377743669413856, [(1, 64), (2, 3)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19194186963699758] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19194186963699758, 0.15142771767638624] ***
*** starting iteration: 2; err: [Inf, 0.19194186963699758, 0.15142771767638624] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19194186963699758, 0.15142771767638624, 0.14726294502429665] ***
*** starting iteration: 3; err: [Inf, 0.19194186963699758, 0.15142771767638624, 0.14726294502429665] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19194186963699758, 0.15142771767638624, 0.14726294502429665, 0.1464386008772999] ***
*** finished computation of 7 references, err: [Inf, 0.19194186963699758, 0.15142771767638624, 0.14726294502429665, 0.1464386008772999] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [91, 9, 0]]
** centroid: 1, normalized-entropy: 0.4364698170641031, [(1, 91), (2, 9)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [45, 34, 0]]
** centroid: 2, normalized-entropy: 0.985969027451193, [(1, 45), (2, 34)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 34, 15]]
** centroid: 3, normalized-entropy: 0.8886466698980794, [(2, 34), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [36, 35, 0]]
** centroid: 5, normalized-entropy: 0.9998568991526107, [(1, 36), (2, 35)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 62, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1917484352858737] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1917484352858737, 0.1538345979526639] ***
*** starting iteration: 2; err: [Inf, 0.1917484352858737, 0.1538345979526639] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1917484352858737, 0.1538345979526639, 0.15171725234016775] ***
*** starting iteration: 3; err: [Inf, 0.1917484352858737, 0.1538345979526639, 0.15171725234016775] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1917484352858737, 0.1538345979526639, 0.15171725234016775, 0.15147726956009866] ***
*** finished computation of 7 references, err: [Inf, 0.1917484352858737, 0.1538345979526639, 0.15171725234016775, 0.15147726956009866] ***
*** center 1: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [62, 8, 0]]
** centroid: 2, normalized-entropy: 0.5127091420308771, [(1, 62), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 38, 19]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(2, 38), (3, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [27, 62, 0]]
** centroid: 5, normalized-entropy: 0.8853723770068483, [(1, 27), (2, 62)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 62, 0]]
** centroid: 6, normalized-entropy: 0.2006223243127146, [(1, 2), (2, 62)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [39, 4, 0]]
** centroid: 7, normalized-entropy: 0.446481346896803, [(1, 39), (2, 4)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17903793357219547] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17903793357219547, 0.1547364990208298] ***
*** starting iteration: 2; err: [Inf, 0.17903793357219547, 0.1547364990208298] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17903793357219547, 0.1547364990208298, 0.15063529242761434] ***
*** starting iteration: 3; err: [Inf, 0.17903793357219547, 0.1547364990208298, 0.15063529242761434] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17903793357219547, 0.1547364990208298, 0.15063529242761434, 0.14955844995845108] ***
*** starting iteration: 4; err: [Inf, 0.17903793357219547, 0.1547364990208298, 0.15063529242761434, 0.14955844995845108] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17903793357219547, 0.1547364990208298, 0.15063529242761434, 0.14955844995845108, 0.1491540066022426] ***
*** finished computation of 7 references, err: [Inf, 0.17903793357219547, 0.1547364990208298, 0.15063529242761434, 0.14955844995845108, 0.1491540066022426] ***
*** center 1: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 49, 16]]
** centroid: 2, normalized-entropy: 0.8051250074646822, [(2, 49), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [42, 10, 0]]
** centroid: 3, normalized-entropy: 0.7062740891876008, [(1, 42), (2, 10)]
*** center 4: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [31, 63, 0]]
** centroid: 5, normalized-entropy: 0.9147088431405322, [(1, 31), (2, 63)]
*** center 6: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [10, 57, 0]]
** centroid: 7, normalized-entropy: 0.6079696120060726, [(1, 10), (2, 57)]
finished with 11 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 359,3 => 36,1 => 605), Dict(2 => 371,3 => 24,1 => 605))
[ Info: ===== scores for single classifier: {"micro_f1":0.961,"precision":0.961,"recall":0.961,"macro_recall":0.9694771780535074,"macro_f1":0.9212985413004039,"accuracy":0.961,"class_f1":{"2":0.9465020576131687,"3":0.8421052631578948,"1":0.9752883031301484},"class_precision":{"2":0.9636871508379888,"3":0.7272727272727273,"1":0.9720853858784894},"class_recall":{"2":0.9299191374663073,"3":1.0,"1":0.9785123966942149}}
[ Info: ===== scores for 1: {"micro_f1":0.974,"precision":0.974,"recall":0.974,"macro_recall":0.9685144139260778,"macro_f1":0.9616119421192436,"accuracy":0.974,"class_f1":{"2":0.9651474530831099,"3":0.9387755102040817,"1":0.9809128630705394},"class_precision":{"2":0.96,"3":0.92,"1":0.985},"class_recall":{"2":0.9703504043126685,"3":0.9583333333333334,"1":0.9768595041322314}}
[ Info: ===== scores for 5: {"micro_f1":0.97,"precision":0.97,"recall":0.97,"macro_recall":0.9656155403582506,"macro_f1":0.9469883090727684,"accuracy":0.97,"class_f1":{"2":0.9597855227882037,"3":0.9019607843137256,"1":0.9792186201163757},"class_precision":{"2":0.9546666666666667,"3":0.8518518518518519,"1":0.9849498327759197},"class_recall":{"2":0.9649595687331537,"3":0.9583333333333334,"1":0.9735537190082645}}
[ Info: ===== scores for 7: {"micro_f1":0.973,"precision":0.973,"recall":0.973,"macro_recall":0.967268432920234,"macro_f1":0.9383246890252455,"accuracy":0.973,"class_f1":{"2":0.9636608344549125,"3":0.8679245283018867,"1":0.9833887043189369},"class_precision":{"2":0.9623655913978495,"3":0.7931034482758621,"1":0.988313856427379},"class_recall":{"2":0.9649595687331537,"3":0.9583333333333334,"1":0.9785123966942149}}
[ Info: ===== scores for 9: {"micro_f1":0.974,"precision":0.974,"recall":0.974,"macro_recall":0.9681669055168198,"macro_f1":0.944352617458394,"accuracy":0.974,"class_f1":{"2":0.9650537634408602,"3":0.8846153846153847,"1":0.9833887043189369},"class_precision":{"2":0.9624664879356568,"3":0.8214285714285714,"1":0.988313856427379},"class_recall":{"2":0.967654986522911,"3":0.9583333333333334,"1":0.9785123966942149}}
[ Info: ===== scores for 11: {"micro_f1":0.978,"precision":0.978,"recall":0.978,"macro_recall":0.971065779084647,"macro_f1":0.9472521518658054,"accuracy":0.978,"class_f1":{"2":0.9704301075268817,"3":0.8846153846153847,"1":0.9867109634551494},"class_precision":{"2":0.967828418230563,"3":0.8214285714285714,"1":0.991652754590985},"class_recall":{"2":0.9730458221024259,"3":0.9583333333333334,"1":0.9818181818181818}}
(score = 0.97, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.974, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.974, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.969, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.969, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.968, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.968, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.971, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.971, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.973, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.974,"k":1,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.974,"precision":0.974,"recall":0.974,"macro_recall":0.9685144139260778,"macro_f1":0.9616119421192436,"accuracy":0.974,"class_f1":{"2":0.9651474530831099,"3":0.9387755102040817,"1":0.9809128630705394},"class_precision":{"2":0.96,"3":0.92,"1":0.985},"class_recall":{"2":0.9703504043126685,"3":0.9583333333333334,"1":0.9768595041322314}}
Test Summary: | Pass  Total
AKNC          |    8      8
[1328, 1, 2, 3, 3, 6, 2, 4, 3, 3, 7, 3, 8, 2, 5, 1, 5, 6, 2, 2, 5, 9, 3, 3, 2, 12, 4, 6, 3, 13, 17, 5, 3, 1, 12, 3, 18, 5, 6, 29, 1, 28, 8, 2, 51, 7, 5, 39, 2, 26, 7, 7, 3, 39, 31, 7, 19, 13, 56, 18, 5, 44, 6, 13, 60, 5, 10, 6, 29, 11, 16, 7, 2, 62, 17, 31, 7, 45, 39, 36, 7, 38, 4, 7, 33, 16, 26, 3, 5, 6, 42, 48, 36, 3, 13, 8, 8, 49, 139, 4, 3, 27, 10, 19, 32, 1, 7, 43, 47, 62, 14, 8, 23, 1, 26, 6, 3, 42, 1, 24, 6, 92, 17, 13, 44, 17, 1, 7, 85, 22, 4, 20, 30, 10, 6, 39, 16, 11, 38, 572, 42, 30, 3, 32, 17, 65, 20, 10, 19, 22, 12, 13, 16, 8, 76, 10, 27, 63, 40, 36, 50, 9, 5, 104, 16, 25, 28, 8, 42, 17, 8, 32, 21, 12, 31, 15, 15, 48, 13, 36, 196, 54, 32, 251, 26, 15, 3, 14, 30, 25, 6, 5, 36, 4, 21, 18, 63, 11, 47, 10, 53, 35, 28, 38, 209, 5, 15, 34, 106, 16, 40, 14, 35, 15, 8, 7, 5, 27, 28, 13, 8, 6, 65, 27, 3, 14, 6, 9, 6, 6, 15, 12, 5, 53, 15, 46, 39, 25, 193, 7, 24, 1, 39, 23, 6, 29, 10, 425, 30, 11, 16, 35, 21, 4, 15, 48, 14, 3, 138, 32, 10, 26, 22, 86, 154, 18, 45, 60, 16, 49, 8, 20, 12, 85, 23, 213, 30, 5, 12, 4, 21, 66, 10, 3, 12, 5, 12, 9, 160, 16, 19, 10, 12, 44, 28, 22, 38, 92, 22, 4]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6799999999999998, speedup = 0.14516481605287132, eval_ratio = 0.096819)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.4129340277777776,"recall":0.39583333333333315,"f1":null,"seconds":0.00023409351706504822,"exhaustive_search_seconds":0.000350436195731163,"evaluations":585.03125,"distances_sum":1729.4423310126094}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5746527777777777,"recall":0.5746527777777777,"f1":null,"seconds":0.0005540400743484497,"exhaustive_search_seconds":0.000350436195731163,"evaluations":800.140625,"distances_sum":1681.8501491313555}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6710069444444441,"recall":0.6710069444444441,"f1":0.6710069444444441,"seconds":0.00048425234854221344,"exhaustive_search_seconds":0.000350436195731163,"evaluations":945.03125,"distances_sum":1626.478125750029}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7456597222222217,"recall":0.7456597222222217,"f1":0.7456597222222217,"seconds":0.0006184093654155731,"exhaustive_search_seconds":0.000350436195731163,"evaluations":1113.21875,"distances_sum":1598.5450968202872}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7925347222222215,"recall":0.7925347222222215,"f1":0.7925347222222215,"seconds":0.0008088108152151108,"exhaustive_search_seconds":0.000350436195731163,"evaluations":1229.1796875,"distances_sum":1581.0732584554676}
KCenters.DeloneInvIndex> reached performance {"precision":0.8411458333333325,"recall":0.8411458333333325,"f1":0.8411458333333325,"seconds":0.0009301453828811646,"exhaustive_search_seconds":0.000350436195731163,"evaluations":1346.1953125,"distances_sum":1567.07609703086}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8430000000000003, speedup = 0.2977071260049935, eval_ratio = 0.128755)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
