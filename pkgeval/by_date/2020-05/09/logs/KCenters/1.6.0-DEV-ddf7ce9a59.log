Julia Version 1.6.0-DEV.0
Commit ddf7ce9a59 (2020-05-07 23:59 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed DataValueInterfaces ───────── v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed DataAPI ───────────────────── v1.3.0
  Installed TableTraits ───────────────── v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed MLDataUtils ───────────────── v0.5.1
  Installed StatsBase ─────────────────── v0.32.2
  Installed MLDataPattern ─────────────── v0.5.3
  Installed MappedArrays ──────────────── v0.2.2
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Missings ──────────────────── v0.4.3
  Installed Reexport ──────────────────── v0.2.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed Tables ────────────────────── v1.0.4
  Installed OrderedCollections ────────── v1.2.0
  Installed DataFrames ────────────────── v0.20.2
  Installed SimilaritySearch ──────────── v0.3.19
  Installed JSON ──────────────────────── v0.21.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed Parsers ───────────────────── v1.0.3
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed InvertedIndices ───────────── v1.0.0
  Installed DataStructures ────────────── v0.17.15
  Installed Compat ────────────────────── v3.9.1
  Installed MLLabelUtils ──────────────── v0.5.2
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.9.1
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.15
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.3
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_UXyf1i/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_UXyf1i/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.9.1
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.15
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.3
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9360659371813138
[ Info: 0.8321307849884033
[ Info: 0.5553847705821197
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3346230382720629
mean(cdnet.distances) = 0.387353664090236
mean(crand.distances) = 0.34642157768209775
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.544921875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.544921875,"f1":0.6930513930513936,"seconds":3.991648554801941e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":7.2421875,"distances_sum":1602.514881884796}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6728515625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6728515625,"f1":0.7935765623265632,"seconds":5.185604095458984e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.171875,"distances_sum":2042.2379245243771}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.171875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.171875,"f1":null,"seconds":3.6228448152542114e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":6.1484375,"distances_sum":517.6696794891536}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6728515625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6728515625,"f1":0.7935765623265632,"seconds":5.185604095458984e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.171875,"distances_sum":2042.2379245243771}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9029054279054287,"seconds":5.474314093589783e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.59375,"distances_sum":2788.0894234286006}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9574233058608062,"seconds":5.60469925403595e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.84375,"distances_sum":3293.392363457705}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9269090284715291,"seconds":5.636364221572876e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.5703125,"distances_sum":3038.733368915448}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8557328088578096,"seconds":5.21540641784668e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.4765625,"distances_sum":2477.2428832936807}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9574233058608062,"seconds":5.60469925403595e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.84375,"distances_sum":3293.392363457705}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9712625915750919,"seconds":5.908310413360596e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.921875,"distances_sum":3424.482534359769}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9762305402930407,"seconds":5.988404154777527e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.953125,"distances_sum":3456.0995399927997}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.97029532967033,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.9375,"distances_sum":3390.3684955748054}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9675423534798537,"seconds":5.757436156272888e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.921875,"distances_sum":3367.668510269328}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.961653450715951,"seconds":5.81890344619751e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.8515625,"distances_sum":3363.195504456322}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9762305402930407,"seconds":5.988404154777527e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.953125,"distances_sum":3456.0995399927997}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":5,"bsize":12},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9762305402930407,"seconds":5.988404154777527e-6,"exhaustive_search_seconds":1.7583370208740234e-6,"evaluations":8.953125,"distances_sum":3456.0995399927997}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3955078125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3955078125,"f1":null,"seconds":3.7420541048049927e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":5.671875,"distances_sum":1059.293504801923}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.40625, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.40625,"f1":null,"seconds":3.958120942115784e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":5.9296875,"distances_sum":1124.168547424261}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.40625,"state":{"ssize":2,"bsize":2},"perf":{"precision":null,"recall":0.40625,"f1":null,"seconds":3.958120942115784e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":5.9296875,"distances_sum":1124.168547424261}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.9066766566766574,"seconds":5.461275577545166e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.078125,"distances_sum":2680.815783702934}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5146484375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5146484375,"f1":0.6637008824508828,"seconds":3.87243926525116e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":5.9765625,"distances_sum":1406.8427587354083}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7255859375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7255859375,"f1":0.8314144189144196,"seconds":5.071982741355896e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.6328125,"distances_sum":2140.6376607692105}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.9003319597069606,"seconds":5.345791578292847e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.9765625,"distances_sum":2645.5731301021533}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.83984375,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.83984375,"f1":0.9066766566766574,"seconds":5.461275577545166e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.078125,"distances_sum":2680.815783702934}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9534455128205133,"seconds":5.582347512245178e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.6953125,"distances_sum":3049.767016033922}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.936778846153847,"seconds":5.552545189857483e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.5234375,"distances_sum":2995.3012139609655}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9436469780219787,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.609375,"distances_sum":2991.5995553511816}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9603651556776563,"seconds":5.776062607765198e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.78125,"distances_sum":3109.4648600376413}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9446142399267405,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.578125,"distances_sum":3034.7191947430083}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9603651556776563,"seconds":5.776062607765198e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.78125,"distances_sum":3109.4648600376413}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9287109375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9603651556776563,"seconds":5.776062607765198e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.78125,"distances_sum":3109.4648600376413}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6767578125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6767578125,"f1":0.7922119547119555,"seconds":5.012378096580505e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.2578125,"distances_sum":1948.0706314295799}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5,"f1":0.6541604229104235,"seconds":4.265457391738892e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":6.765625,"distances_sum":1495.5650562848798}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6767578125,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6767578125,"f1":0.7922119547119555,"seconds":5.012378096580505e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.2578125,"distances_sum":1948.0706314295799}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6767578125,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6767578125,"f1":0.7922119547119555,"seconds":5.012378096580505e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.2578125,"distances_sum":1948.0706314295799}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.6767578125,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6767578125,"f1":0.7922119547119555,"seconds":5.012378096580505e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.2578125,"distances_sum":1948.0706314295799}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1845703125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1845703125,"f1":null,"seconds":3.0957162380218506e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":4.4375,"distances_sum":560.0957668272237}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.1845703125,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.1845703125,"f1":null,"seconds":3.0957162380218506e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":4.4375,"distances_sum":560.0957668272237}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.1845703125,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.1845703125,"f1":null,"seconds":3.0957162380218506e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":4.4375,"distances_sum":560.0957668272237}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7333984375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7333984375,"f1":0.8409403096903105,"seconds":5.589798092842102e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.484375,"distances_sum":1535.4010734232625}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7333984375,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7333984375,"f1":0.8409403096903105,"seconds":5.589798092842102e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.484375,"distances_sum":1535.4010734232625}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.859375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.859375,"f1":0.9195169413919421,"seconds":6.087124347686768e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.7265625,"distances_sum":1957.413266342611}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9269605394605401,"seconds":6.234273314476013e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.8828125,"distances_sum":2013.785676783025}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8740234375,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.8740234375,"f1":0.9269605394605401,"seconds":6.234273314476013e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.8828125,"distances_sum":2013.785676783025}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9701121794871796,"seconds":6.5658241510391235e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.9921875,"distances_sum":2266.6039646461145}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9320741758241764,"seconds":6.042420864105225e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.9453125,"distances_sum":2031.4224859473106}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9543243215118221,"seconds":6.327405571937561e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.921875,"distances_sum":2198.522298653009}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9653102106227109,"seconds":6.6366046667099e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.9921875,"distances_sum":2237.1345205982807}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9701121794871796,"seconds":6.5658241510391235e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.9921875,"distances_sum":2266.6039646461145}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9462890625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9701121794871796,"seconds":6.5658241510391235e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.9921875,"distances_sum":2266.6039646461145}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2919921875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2919921875,"f1":null,"seconds":3.6600977182388306e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":6.609375,"distances_sum":572.1512898363479}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5634765625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5634765625,"f1":null,"seconds":4.395842552185059e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":6.78125,"distances_sum":1106.9917922580598}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5634765625,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5634765625,"f1":null,"seconds":4.395842552185059e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":6.78125,"distances_sum":1106.9917922580598}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7216796875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7216796875,"f1":0.8323494214119223,"seconds":5.54695725440979e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.1640625,"distances_sum":1554.6216011931283}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7275390625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7275390625,"f1":0.8361612345987355,"seconds":5.068257451057434e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.09375,"distances_sum":1581.9720449410358}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.58984375, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.58984375,"f1":0.7291599025974032,"seconds":4.3567270040512085e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":6.984375,"distances_sum":1188.3823460782055}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6640625, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6640625,"f1":0.7879968989343996,"seconds":5.068257451057434e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":7.2421875,"distances_sum":1391.4809231652464}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7275390625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7275390625,"f1":0.8361612345987355,"seconds":5.068257451057434e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.09375,"distances_sum":1581.9720449410358}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.8993933150183159,"seconds":5.6121498346328735e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.625,"distances_sum":1902.6913505661605}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8310546875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8310546875,"f1":0.9002383033633039,"seconds":5.42961061000824e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.6796875,"distances_sum":1926.417059065149}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9621680402930408,"seconds":5.850568413734436e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":9.0,"distances_sum":2287.0875402765446}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":10,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9456959706959714,"seconds":5.945563316345215e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.953125,"distances_sum":2176.6829175454213}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":10,"bsize":7}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9503605769230775,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":9.0,"distances_sum":2208.195259947773}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9654418498168504,"seconds":5.95487654209137e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.9921875,"distances_sum":2310.7314022933224}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7294921875, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7294921875,"f1":0.8377861721611729,"seconds":4.71062958240509e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.1953125,"distances_sum":1551.760640930033}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.928254037629038,"seconds":5.884096026420593e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.921875,"distances_sum":2073.2884121422844}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9654418498168504,"seconds":5.95487654209137e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.9921875,"distances_sum":2310.7314022933224}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9654418498168504,"seconds":5.95487654209137e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.9921875,"distances_sum":2310.7314022933224}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6845703125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6845703125,"f1":0.800573905261406,"seconds":4.490837454795837e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.484375,"distances_sum":1492.130684476358}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6064453125, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.6064453125,"f1":0.7421510780885787,"seconds":4.608184099197388e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.3359375,"distances_sum":1259.8954170780712}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6845703125,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6845703125,"f1":0.800573905261406,"seconds":4.490837454795837e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.484375,"distances_sum":1492.130684476358}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7158203125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7158203125,"f1":0.82745847902098,"seconds":5.206093192100525e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.1796875,"distances_sum":1578.2278170346613}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.954641712454213,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.90625,"distances_sum":2348.1656463829345}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.814453125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.814453125,"f1":0.8913321053946061,"seconds":5.37186861038208e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.765625,"distances_sum":1962.0457526857851}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7265625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7265625,"f1":0.834386967199468,"seconds":5.239620804786682e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.1796875,"distances_sum":1644.9659505965772}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.921875,"f1":0.954641712454213,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.90625,"distances_sum":2348.1656463829345}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.97265625, conf: {"ssize":10,"bsize":12}, perf: {"precision":1.0,"recall":0.97265625,"f1":0.9851934523809527,"seconds":5.820766091346741e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9921875,"distances_sum":2530.596890934082}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.960273580586081,"seconds":6.066635251045227e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9453125,"distances_sum":2361.6125684722783}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9638671875, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9638671875,"f1":0.9798763736263739,"seconds":6.066635251045227e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.984375,"distances_sum":2494.554075543098}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9640510531135533,"seconds":5.889683961868286e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.953125,"distances_sum":2380.412303950441}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.97265625,"state":{"ssize":10,"bsize":12},"perf":{"precision":1.0,"recall":0.97265625,"f1":0.9851934523809527,"seconds":5.820766091346741e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9921875,"distances_sum":2530.596890934082}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.97265625,"state":{"ssize":10,"bsize":12},"perf":{"precision":1.0,"recall":0.97265625,"f1":0.9851934523809527,"seconds":5.820766091346741e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9921875,"distances_sum":2530.596890934082}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7216796875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7216796875,"f1":0.8325325715950725,"seconds":5.085021257400513e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.34375,"distances_sum":1714.2323618138873}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7080078125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7080078125,"f1":0.8214696761571769,"seconds":4.909932613372803e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.3203125,"distances_sum":1637.5200774278317}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.271484375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.271484375,"f1":null,"seconds":3.5259872674942017e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":6.7265625,"distances_sum":648.5155632574962}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4375,"f1":null,"seconds":3.7178397178649902e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":6.21875,"distances_sum":891.5836070132756}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7216796875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7216796875,"f1":0.8325325715950725,"seconds":5.085021257400513e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.34375,"distances_sum":1714.2323618138873}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9648866758241763,"seconds":5.768612027168274e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.9453125,"distances_sum":2487.4779759815037}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9666151556776561,"seconds":5.928799510002136e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.9765625,"distances_sum":2501.1281431260454}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9649210164835168,"seconds":5.882233381271362e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":9.0,"distances_sum":2484.5118579382697}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.798828125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.798828125,"f1":0.8790558399933408,"seconds":5.280598998069763e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.4609375,"distances_sum":1951.5068710506036}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9609806859806864,"seconds":6.116926670074463e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.8984375,"distances_sum":2459.5377592357154}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7314453125, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7314453125,"f1":0.8390057858807867,"seconds":5.207955837249756e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.4140625,"distances_sum":1729.4446649696122}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9666151556776561,"seconds":5.928799510002136e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.9765625,"distances_sum":2501.1281431260454}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9775390625, conf: {"ssize":3,"bsize":13}, perf: {"precision":1.0,"recall":0.9775390625,"f1":0.987706043956044,"seconds":6.292015314102173e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":9.0,"distances_sum":2657.2976312973315}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9739983974358977,"seconds":6.010755896568298e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.921875,"distances_sum":2574.175997546701}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9750228937728942,"seconds":6.629154086112976e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.9609375,"distances_sum":2556.184207018897}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.9777758699633702,"seconds":6.2640756368637085e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":9.0,"distances_sum":2583.2801022668614}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9695741758241763,"seconds":5.48921525478363e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.953125,"distances_sum":2517.4766552972637}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9763965201465206,"seconds":6.128102540969849e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.9765625,"distances_sum":2563.143570751849}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9790750915750919,"seconds":5.673617124557495e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.984375,"distances_sum":2588.1791997051523}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":9,"bsize":12}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9752232142857145,"seconds":6.303191184997559e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.9921875,"distances_sum":2567.8032778847914}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":9,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9717662545787547,"seconds":6.027519702911377e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":8.984375,"distances_sum":2541.836408854051}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9775390625,"state":{"ssize":3,"bsize":13},"perf":{"precision":1.0,"recall":0.9775390625,"f1":0.987706043956044,"seconds":6.292015314102173e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":9.0,"distances_sum":2657.2976312973315}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9775390625,"state":{"ssize":3,"bsize":13},"perf":{"precision":1.0,"recall":0.9775390625,"f1":0.987706043956044,"seconds":6.292015314102173e-6,"exhaustive_search_seconds":1.2740492820739746e-6,"evaluations":9.0,"distances_sum":2657.2976312973315}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.41796875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.41796875,"f1":null,"seconds":3.637745976448059e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":5.7734375,"distances_sum":906.5739254869075}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5234375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5234375,"f1":0.6715232683982689,"seconds":4.289671778678894e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":6.8359375,"distances_sum":1163.4123369855772}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5234375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5234375,"f1":0.6715232683982689,"seconds":4.289671778678894e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":6.8359375,"distances_sum":1163.4123369855772}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.802734375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.802734375,"f1":0.8838572885447893,"seconds":6.143003702163696e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.40625,"distances_sum":2033.3431847719637}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.529296875, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.529296875,"f1":0.6729754620379625,"seconds":4.194676876068115e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":6.828125,"distances_sum":1202.8578821416215}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.642578125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.642578125,"f1":0.7718269577644585,"seconds":4.6584755182266235e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.6484375,"distances_sum":1495.6605631353675}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.724609375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.724609375,"f1":0.8335893273393282,"seconds":5.37186861038208e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.25,"distances_sum":1738.3082345208084}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.625,"f1":0.7547109140859147,"seconds":4.841014742851257e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":7.5078125,"distances_sum":1432.3518797663257}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8503069846819854,"seconds":5.278736352920532e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.359375,"distances_sum":1807.642073424518}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.802734375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.802734375,"f1":0.8838572885447893,"seconds":6.143003702163696e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.40625,"distances_sum":2033.3431847719637}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9479452838827845,"seconds":5.926936864852905e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.7890625,"distances_sum":2378.240806432228}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8037109375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8037109375,"f1":0.8835118006993015,"seconds":5.617737770080566e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.359375,"distances_sum":2044.9570117371613}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.953170787545788,"seconds":6.115064024925232e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.8125,"distances_sum":2380.9632221415113}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.953170787545788,"seconds":6.115064024925232e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.8125,"distances_sum":2380.9632221415113}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.916015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.953170787545788,"seconds":6.115064024925232e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.8125,"distances_sum":2380.9632221415113}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6826171875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6826171875,"f1":0.8023450507825515,"seconds":4.9211084842681885e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":7.1171875,"distances_sum":1481.3765033344978}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6826171875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6826171875,"f1":0.8023450507825515,"seconds":4.9211084842681885e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":7.1171875,"distances_sum":1481.3765033344978}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9542868589743594,"seconds":6.372109055519104e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.921875,"distances_sum":2353.6232780057526}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6884765625, conf: {"ssize":9,"bsize":4}, perf: {"precision":1.0,"recall":0.6884765625,"f1":0.8054599913974922,"seconds":6.686337292194366e-5,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":7.140625,"distances_sum":1517.4641057901795}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7138671875, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7138671875,"f1":0.8262315809190818,"seconds":8.547678589820862e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.2265625,"distances_sum":1584.3021380768832}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7080078125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7080078125,"f1":0.8205367549117557,"seconds":5.317851901054382e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.203125,"distances_sum":1611.7279263467822}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9542868589743594,"seconds":6.372109055519104e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.921875,"distances_sum":2353.6232780057526}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.978571428571429,"seconds":6.284564733505249e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":9.0,"distances_sum":2517.904389882499}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9683264652014654,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.984375,"distances_sum":2438.0590151886886}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":11,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9545818764568766,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":8.875,"distances_sum":2360.336572947914}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9609375,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.978571428571429,"seconds":6.284564733505249e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":9.0,"distances_sum":2517.904389882499}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9609375,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.978571428571429,"seconds":6.284564733505249e-6,"exhaustive_search_seconds":1.4677643775939941e-6,"evaluations":9.0,"distances_sum":2517.904389882499}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.646484375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.646484375,"f1":0.774597104284605,"seconds":4.1425228118896484e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.4609375,"distances_sum":1384.4545965488367}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.587890625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.587890625,"f1":0.7266440157065165,"seconds":3.898516297340393e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":6.8828125,"distances_sum":1185.1856247488918}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.646484375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.646484375,"f1":0.774597104284605,"seconds":4.1425228118896484e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.4609375,"distances_sum":1384.4545965488367}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.71875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.71875,"f1":0.8289559398934406,"seconds":4.429370164871216e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.984375,"distances_sum":1524.401875416488}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9472527472527479,"seconds":5.368143320083618e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8984375,"distances_sum":2189.085788211011}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.941134386446887,"seconds":5.213543772697449e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8984375,"distances_sum":2174.6264587855753}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.80859375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.80859375,"f1":0.8884672619047627,"seconds":5.081295967102051e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.671875,"distances_sum":1838.6166839245495}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90625,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.90625,"f1":0.9472527472527479,"seconds":5.368143320083618e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8984375,"distances_sum":2189.085788211011}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9633012820512825,"seconds":6.61797821521759e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.9765625,"distances_sum":2288.3493563115967}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9630780677655683,"seconds":5.610287189483643e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.921875,"distances_sum":2317.1904617525415}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9524496336996341,"seconds":5.6978315114974976e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8515625,"distances_sum":2245.293825287509}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9791494963369967,"seconds":5.964189767837524e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.9765625,"distances_sum":2429.5238418531367}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9649839743589748,"seconds":5.4426491260528564e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.96875,"distances_sum":2329.2912966374515}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9562385531135535,"seconds":5.509704351425171e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.8515625,"distances_sum":2306.694342333819}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.962890625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9791494963369967,"seconds":5.964189767837524e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.9765625,"distances_sum":2429.5238418531367}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.962890625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9791494963369967,"seconds":5.964189767837524e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.9765625,"distances_sum":2429.5238418531367}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73828125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.73828125,"f1":0.842683358308359,"seconds":5.012378096580505e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.140625,"distances_sum":1655.1784317050183}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.271484375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.271484375,"f1":null,"seconds":3.334134817123413e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":6.390625,"distances_sum":608.2502511919279}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.560546875, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.560546875,"f1":0.7029808732933739,"seconds":4.036352038383484e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":7.0,"distances_sum":1135.7655334882872}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.73828125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.73828125,"f1":0.842683358308359,"seconds":5.012378096580505e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.140625,"distances_sum":1655.1784317050183}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9265911172161182,"seconds":5.7034194469451904e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.7265625,"distances_sum":2152.0564695348207}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.8571230852480862,"seconds":5.25452196598053e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.2265625,"distances_sum":1717.7705513173826}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.864311729936731,"seconds":5.541369318962097e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.3359375,"distances_sum":1771.9302653378786}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.928153617216118,"seconds":5.504116415977478e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.75,"distances_sum":2139.5617360763677}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7412109375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7412109375,"f1":0.8441251456876465,"seconds":5.217269062995911e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.1953125,"distances_sum":1646.497423970058}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8740234375,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.8740234375,"f1":0.928153617216118,"seconds":5.504116415977478e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.75,"distances_sum":2139.5617360763677}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.966796875, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.966796875,"f1":0.9820684523809526,"seconds":6.297603249549866e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.9375,"distances_sum":2541.127719686695}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9653159340659345,"seconds":6.271526217460632e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.9140625,"distances_sum":2410.583776675095}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9519033050283056,"seconds":5.949288606643677e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.8359375,"distances_sum":2312.9462210876463}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":10,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9665579212454217,"seconds":6.144866347312927e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.921875,"distances_sum":2384.9845861505314}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9621108058608064,"seconds":6.185844540596008e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.8671875,"distances_sum":2382.7979742052744}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.948240301365302,"seconds":6.07222318649292e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.8125,"distances_sum":2307.2001690579036}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9683436355311359,"seconds":6.2230974435806274e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.8984375,"distances_sum":2426.900072694276}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8779296875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8779296875,"f1":0.9310382326007334,"seconds":5.68293035030365e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.6953125,"distances_sum":2175.6037942887015}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.932801053113554,"seconds":5.45009970664978e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.7578125,"distances_sum":2153.192055077949}, best_list's length: 15, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.966796875,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9820684523809526,"seconds":6.297603249549866e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.9375,"distances_sum":2541.127719686695}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.966796875,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9820684523809526,"seconds":6.297603249549866e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.9375,"distances_sum":2541.127719686695}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5703125, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5703125,"f1":0.7098073801198809,"seconds":4.014000296592712e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":7.1953125,"distances_sum":1193.1896766051043}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5595703125, conf: {"ssize":2,"bsize":3}, perf: {"precision":null,"recall":0.5595703125,"f1":null,"seconds":4.7497451305389404e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":7.0234375,"distances_sum":1212.461169388756}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5888671875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5888671875,"f1":null,"seconds":4.289671778678894e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":7.265625,"distances_sum":1289.5853281946609}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5888671875,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5888671875,"f1":null,"seconds":4.289671778678894e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":7.265625,"distances_sum":1289.5853281946609}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9146894771894779,"seconds":5.610287189483643e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.6875,"distances_sum":2085.472460115063}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.847535624098125,"seconds":5.427747964859009e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.28125,"distances_sum":1720.1511477465338}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69921875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.69921875,"f1":0.8135536338661348,"seconds":5.301088094711304e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":7.9140625,"distances_sum":1584.8364985479457}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8979712995338003,"seconds":5.692243576049805e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.6796875,"distances_sum":1978.8036490052286}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9028362262737271,"seconds":5.668029189109802e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.703125,"distances_sum":2005.6608193092372}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9379979395604402,"seconds":5.757436156272888e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.8046875,"distances_sum":2218.26382184497}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.892578125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.892578125,"f1":0.9379979395604402,"seconds":5.757436156272888e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.8046875,"distances_sum":2218.26382184497}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9649038461538468,"seconds":6.273388862609863e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.90625,"distances_sum":2400.4616983080246}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.970369734432235,"seconds":6.711110472679138e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.9296875,"distances_sum":2449.70801719129}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9405963827838834,"seconds":6.023794412612915e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.75,"distances_sum":2286.2323048104763}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9570741758241763,"seconds":5.8729201555252075e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.859375,"distances_sum":2370.23572442008}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.970369734432235,"seconds":6.711110472679138e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.9296875,"distances_sum":2449.70801719129}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9462890625,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.970369734432235,"seconds":6.711110472679138e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.9296875,"distances_sum":2449.70801719129}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2568359375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2568359375,"f1":null,"seconds":2.989545464515686e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":5.7890625,"distances_sum":552.8598067755246}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6611328125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6611328125,"f1":0.7854327963702971,"seconds":4.498288035392761e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":7.4921875,"distances_sum":1417.757037886787}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6611328125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6611328125,"f1":0.7854327963702971,"seconds":4.498288035392761e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":7.4921875,"distances_sum":1417.757037886787}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.8929487179487188,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.6796875,"distances_sum":1871.5961374959231}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8593807234432242,"seconds":5.8710575103759766e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.21875,"distances_sum":1728.109864586218}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.673828125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.673828125,"f1":0.7962063977688986,"seconds":4.626810550689697e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":7.453125,"distances_sum":1460.3568667201457}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8154296875,"state":{"ssize":2,"bsize":6},"perf":{"precision":1.0,"recall":0.8154296875,"f1":0.8929487179487188,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.6796875,"distances_sum":1871.5961374959231}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9609432234432237,"seconds":5.863606929779053e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.890625,"distances_sum":2345.205851413316}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9365447052947059,"seconds":5.7425349950790405e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.703125,"distances_sum":2207.4366517722947}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9411947427572431,"seconds":5.8300793170928955e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.8125,"distances_sum":2205.1580213860943}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.9010994214119223,"seconds":5.4407864809036255e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.7109375,"distances_sum":1954.3154691840214}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9609432234432237,"seconds":5.863606929779053e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.890625,"distances_sum":2345.205851413316}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9306640625,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9609432234432237,"seconds":5.863606929779053e-6,"exhaustive_search_seconds":1.430511474609375e-6,"evaluations":8.890625,"distances_sum":2345.205851413316}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8622346403596411,"seconds":4.9602240324020386e-6,"exhaustive_search_seconds":2.3599714040756226e-6,"evaluations":8.2734375,"distances_sum":1702.2434898512115}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6630859375, conf: {"ssize":1,"bsize":4}, perf: {"precision":null,"recall":0.6630859375,"f1":null,"seconds":4.693865776062012e-6,"exhaustive_search_seconds":2.3599714040756226e-6,"evaluations":7.5,"distances_sum":1449.8594294636566}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7666015625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7666015625,"f1":0.8622346403596411,"seconds":4.9602240324020386e-6,"exhaustive_search_seconds":2.3599714040756226e-6,"evaluations":8.2734375,"distances_sum":1702.2434898512115}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9423623251748257,"seconds":6.068497896194458e-6,"exhaustive_search_seconds":2.3599714040756226e-6,"evaluations":8.75,"distances_sum":2198.799912107933}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.9127320596070605,"seconds":5.342066287994385e-6,"exhaustive_search_seconds":2.3599714040756226e-6,"evaluations":8.8203125,"distances_sum":1989.6835449024497}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8994140625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.8994140625,"f1":0.9423623251748257,"seconds":6.068497896194458e-6,"exhaustive_search_seconds":2.3599714040756226e-6,"evaluations":8.75,"distances_sum":2198.799912107933}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9453582875457882,"seconds":5.539506673812866e-6,"exhaustive_search_seconds":2.3599714040756226e-6,"evaluations":8.7578125,"distances_sum":2227.794491231102}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9561240842490846,"seconds":5.386769771575928e-6,"exhaustive_search_seconds":2.3599714040756226e-6,"evaluations":8.875,"distances_sum":2269.3277132607955}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9724931318681322,"seconds":5.574896931648254e-6,"exhaustive_search_seconds":2.3599714040756226e-6,"evaluations":8.9140625,"distances_sum":2401.29427269992}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9574061355311362,"seconds":5.288049578666687e-6,"exhaustive_search_seconds":2.3599714040756226e-6,"evaluations":8.875,"distances_sum":2276.88420716855}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9724931318681322,"seconds":5.574896931648254e-6,"exhaustive_search_seconds":2.3599714040756226e-6,"evaluations":8.9140625,"distances_sum":2401.29427269992}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9724931318681322,"seconds":5.574896931648254e-6,"exhaustive_search_seconds":2.3599714040756226e-6,"evaluations":8.9140625,"distances_sum":2401.29427269992}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5634765625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5634765625,"f1":0.7053399725274733,"seconds":4.682689905166626e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":7.125,"distances_sum":1183.779217644091}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.8486211704961714,"seconds":4.798173904418945e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.09375,"distances_sum":1673.3727750221851}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.751953125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.751953125,"f1":0.8486211704961714,"seconds":4.798173904418945e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.09375,"distances_sum":1673.3727750221851}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9430345695970703,"seconds":6.282702088356018e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.6953125,"distances_sum":2234.0526805410827}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.900390625,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.900390625,"f1":0.9430345695970703,"seconds":6.282702088356018e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.6953125,"distances_sum":2234.0526805410827}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9463312728937734,"seconds":6.4782798290252686e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.7578125,"distances_sum":2236.0471512837184}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9459764194139197,"seconds":6.22868537902832e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.71875,"distances_sum":2256.695600025057}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9675251831501833,"seconds":6.718561053276062e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.8359375,"distances_sum":2383.440457626181}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9506982600732607,"seconds":5.295500159263611e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.75,"distances_sum":2286.8963880445144}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9675251831501833,"seconds":6.718561053276062e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.8359375,"distances_sum":2383.440457626181}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9675251831501833,"seconds":6.718561053276062e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.8359375,"distances_sum":2383.440457626181}}, n: 9
mean(cfft.distances) = 1.21854098677917
mean(cdnet.distances) = 0.41850097593704993
mean(crand.distances) = 0.34181447661360165
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8933333333333334
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9022222222222221
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.86
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8955555555555555
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8866666666666667
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.9177777777777778
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8844444444444445
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9422222222222222
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9444444444444445
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8644444444444445
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9288888888888889
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.888888888888889
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9199999999999999
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9355555555555556
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8955555555555555
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9333333333333332
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9199999999999999
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.88
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9177777777777778
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.88
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9311111111111111
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8822222222222221
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9199999999999999
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8955555555555555
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8444444444444444
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9022222222222224
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8399999999999999
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8488888888888889
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9133333333333332
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8911111111111111
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 2, 3, 3, 1]
acc = 0.96
*** finished computation of 12 references, err: [Inf, 0.5599194872876009] ***
*** center 1: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 3, 7]]
** centroid: 8, normalized-entropy: 0.8812908992306927, [(2, 3), (3, 7)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
finished with 15 centroids; started with 12
acc = 0.9333333333333333
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.21052788643798492] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21052788643798492, 0.16061894055707632] ***
*** starting iteration: 2; err: [Inf, 0.21052788643798492, 0.16061894055707632] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21052788643798492, 0.16061894055707632, 0.1547916193881461] ***
*** starting iteration: 3; err: [Inf, 0.21052788643798492, 0.16061894055707632, 0.1547916193881461] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21052788643798492, 0.16061894055707632, 0.1547916193881461, 0.15178092779814023] ***
*** starting iteration: 4; err: [Inf, 0.21052788643798492, 0.16061894055707632, 0.1547916193881461, 0.15178092779814023] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21052788643798492, 0.16061894055707632, 0.1547916193881461, 0.15178092779814023, 0.149984449612441] ***
*** starting iteration: 5; err: [Inf, 0.21052788643798492, 0.16061894055707632, 0.1547916193881461, 0.15178092779814023, 0.149984449612441] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21052788643798492, 0.16061894055707632, 0.1547916193881461, 0.15178092779814023, 0.149984449612441, 0.1484164437509838] ***
*** starting iteration: 6; err: [Inf, 0.21052788643798492, 0.16061894055707632, 0.1547916193881461, 0.15178092779814023, 0.149984449612441, 0.1484164437509838] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21052788643798492, 0.16061894055707632, 0.1547916193881461, 0.15178092779814023, 0.149984449612441, 0.1484164437509838, 0.1475500229902722] ***
*** finished computation of 7 references, err: [Inf, 0.21052788643798492, 0.16061894055707632, 0.1547916193881461, 0.15178092779814023, 0.149984449612441, 0.1484164437509838, 0.1475500229902722] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [7, 68, 0]]
** centroid: 1, normalized-entropy: 0.44749925503686355, [(1, 7), (2, 68)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 82, 16]]
** centroid: 2, normalized-entropy: 0.6420642892306891, [(2, 82), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [96, 8, 0]]
** centroid: 3, normalized-entropy: 0.3912435636292556, [(1, 96), (2, 8)]
*** center 4: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [19, 105, 0]]
** centroid: 7, normalized-entropy: 0.6178543578838833, [(1, 19), (2, 105)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21623840957958212] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21623840957958212, 0.16539952837383148] ***
*** starting iteration: 2; err: [Inf, 0.21623840957958212, 0.16539952837383148] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21623840957958212, 0.16539952837383148, 0.15551659049999633] ***
*** starting iteration: 3; err: [Inf, 0.21623840957958212, 0.16539952837383148, 0.15551659049999633] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21623840957958212, 0.16539952837383148, 0.15551659049999633, 0.1523969276470301] ***
*** starting iteration: 4; err: [Inf, 0.21623840957958212, 0.16539952837383148, 0.15551659049999633, 0.1523969276470301] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21623840957958212, 0.16539952837383148, 0.15551659049999633, 0.1523969276470301, 0.15077278798800717] ***
*** starting iteration: 5; err: [Inf, 0.21623840957958212, 0.16539952837383148, 0.15551659049999633, 0.1523969276470301, 0.15077278798800717] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21623840957958212, 0.16539952837383148, 0.15551659049999633, 0.1523969276470301, 0.15077278798800717, 0.14985193859442308] ***
*** finished computation of 7 references, err: [Inf, 0.21623840957958212, 0.16539952837383148, 0.15551659049999633, 0.1523969276470301, 0.15077278798800717, 0.14985193859442308] ***
*** center 1: selecting labels [1] (freq >= 2) [from [116, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [79, 16, 0]]
** centroid: 2, normalized-entropy: 0.6540800387941991, [(1, 79), (2, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [29, 69, 0]]
** centroid: 3, normalized-entropy: 0.8762441668050731, [(1, 29), (2, 69)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 58, 3]]
** centroid: 4, normalized-entropy: 0.28290479297989196, [(2, 58), (3, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [42, 53, 0]]
** centroid: 5, normalized-entropy: 0.9903070204513952, [(1, 42), (2, 53)]
*** center 6: selecting labels [1] (freq >= 2) [from [136, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 57, 9]]
** centroid: 7, normalized-entropy: 0.5746356978376794, [(2, 57), (3, 9)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.264103922681573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.264103922681573, 0.16784342364973573] ***
*** starting iteration: 2; err: [Inf, 0.264103922681573, 0.16784342364973573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.264103922681573, 0.16784342364973573, 0.1566833950581959] ***
*** starting iteration: 3; err: [Inf, 0.264103922681573, 0.16784342364973573, 0.1566833950581959] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.264103922681573, 0.16784342364973573, 0.1566833950581959, 0.152848776114331] ***
*** starting iteration: 4; err: [Inf, 0.264103922681573, 0.16784342364973573, 0.1566833950581959, 0.152848776114331] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.264103922681573, 0.16784342364973573, 0.1566833950581959, 0.152848776114331, 0.15042456249654784] ***
*** starting iteration: 5; err: [Inf, 0.264103922681573, 0.16784342364973573, 0.1566833950581959, 0.152848776114331, 0.15042456249654784] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.264103922681573, 0.16784342364973573, 0.1566833950581959, 0.152848776114331, 0.15042456249654784, 0.1490569094983467] ***
*** starting iteration: 6; err: [Inf, 0.264103922681573, 0.16784342364973573, 0.1566833950581959, 0.152848776114331, 0.15042456249654784, 0.1490569094983467] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.264103922681573, 0.16784342364973573, 0.1566833950581959, 0.152848776114331, 0.15042456249654784, 0.1490569094983467, 0.14856965868905567] ***
*** finished computation of 7 references, err: [Inf, 0.264103922681573, 0.16784342364973573, 0.1566833950581959, 0.152848776114331, 0.15042456249654784, 0.1490569094983467, 0.14856965868905567] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 63, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 56, 14]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(2, 56), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [108, 15, 0]]
** centroid: 3, normalized-entropy: 0.5349436990971067, [(1, 108), (2, 15)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 82, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [74, 24, 0]]
** centroid: 5, normalized-entropy: 0.8030909760146977, [(1, 74), (2, 24)]
*** center 6: selecting labels [1] (freq >= 2) [from [126, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3361226211976003] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3361226211976003, 0.26011654215112506] ***
*** finished computation of 3 references, err: [Inf, 0.3361226211976003, 0.26011654215112506] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [166, 25, 0]]
** centroid: 1, normalized-entropy: 0.5598741141720963, [(1, 166), (2, 25)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [210, 48, 0]]
** centroid: 2, normalized-entropy: 0.6931274153282881, [(1, 210), (2, 48)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [11, 190, 16]]
** centroid: 3, normalized-entropy: 0.4184788537665791, [(1, 11), (2, 190), (3, 16)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.27955328306424776] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27955328306424776, 0.2452701921337403] ***
*** finished computation of 3 references, err: [Inf, 0.27955328306424776, 0.2452701921337403] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [216, 7, 0]]
** centroid: 1, normalized-entropy: 0.20131611103370195, [(1, 216), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [172, 50, 0]]
** centroid: 2, normalized-entropy: 0.7695944821271463, [(1, 172), (2, 50)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [14, 196, 12]]
** centroid: 3, normalized-entropy: 0.40230205208133324, [(1, 14), (2, 196), (3, 12)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.30966739986661534] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30966739986661534, 0.27258087998895586] ***
*** finished computation of 3 references, err: [Inf, 0.30966739986661534, 0.27258087998895586] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [89, 32, 0]]
** centroid: 1, normalized-entropy: 0.8334064161505499, [(1, 89), (2, 32)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [29, 152, 14]]
** centroid: 2, normalized-entropy: 0.6068573936086523, [(1, 29), (2, 152), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [295, 56, 0]]
** centroid: 3, normalized-entropy: 0.633217923470541, [(1, 295), (2, 56)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.30491563968773727] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30491563968773727, 0.2388890598156396] ***
*** finished computation of 3 references, err: [Inf, 0.30491563968773727, 0.2388890598156396] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [119, 199, 12]]
** centroid: 1, normalized-entropy: 0.7221185420432861, [(1, 119), (2, 199), (3, 12)]
*** center 2: selecting labels [1] (freq >= 1) [from [177, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [106, 54, 0]]
** centroid: 3, normalized-entropy: 0.9224062617590724, [(1, 106), (2, 54)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.37459144794355625] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37459144794355625, 0.235346050173424] ***
*** finished computation of 3 references, err: [Inf, 0.37459144794355625, 0.235346050173424] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [266, 5, 0]]
** centroid: 1, normalized-entropy: 0.1326480512514611, [(1, 266), (2, 5)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [10, 177, 14]]
** centroid: 2, normalized-entropy: 0.4067235536024099, [(1, 10), (2, 177), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [137, 58, 0]]
** centroid: 3, normalized-entropy: 0.8781339389650397, [(1, 137), (2, 58)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.199357656736833] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.199357656736833, 0.16086769509674595] ***
*** starting iteration: 2; err: [Inf, 0.199357656736833, 0.16086769509674595] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.199357656736833, 0.16086769509674595, 0.1554591975967727] ***
*** starting iteration: 3; err: [Inf, 0.199357656736833, 0.16086769509674595, 0.1554591975967727] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.199357656736833, 0.16086769509674595, 0.1554591975967727, 0.15212392839169628] ***
*** finished computation of 7 references, err: [Inf, 0.199357656736833, 0.16086769509674595, 0.1554591975967727, 0.15212392839169628] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [69, 60, 0]]
** centroid: 1, normalized-entropy: 0.996485989886783, [(1, 69), (2, 60)]
*** center 2: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [1, 88, 0]]
** centroid: 3, normalized-entropy: 0.08887969568457589, [(1, 1), (2, 88)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [88, 3, 0]]
** centroid: 4, normalized-entropy: 0.20905980566852464, [(1, 88), (2, 3)]
*** center 5: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 100, 16]]
** centroid: 6, normalized-entropy: 0.5787946246321198, [(2, 100), (3, 16)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [56, 12, 0]]
** centroid: 7, normalized-entropy: 0.6722948170756378, [(1, 56), (2, 12)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22884484936414787] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22884484936414787, 0.17081198725581304] ***
*** starting iteration: 2; err: [Inf, 0.22884484936414787, 0.17081198725581304] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22884484936414787, 0.17081198725581304, 0.16336308667894223] ***
*** starting iteration: 3; err: [Inf, 0.22884484936414787, 0.17081198725581304, 0.16336308667894223] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22884484936414787, 0.17081198725581304, 0.16336308667894223, 0.15918825923938534] ***
*** finished computation of 7 references, err: [Inf, 0.22884484936414787, 0.17081198725581304, 0.16336308667894223, 0.15918825923938534] ***
*** center 1: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [88, 7, 0]]
** centroid: 2, normalized-entropy: 0.3795243778626806, [(1, 88), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 141, 12]]
** centroid: 3, normalized-entropy: 0.3966277727783787, [(2, 141), (3, 12)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [38, 70, 0]]
** centroid: 4, normalized-entropy: 0.9357110512652843, [(1, 38), (2, 70)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [86, 35, 0]]
** centroid: 5, normalized-entropy: 0.8677584893617495, [(1, 86), (2, 35)]
*** center 6: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21580314043926066] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21580314043926066, 0.156591205192364] ***
*** starting iteration: 2; err: [Inf, 0.21580314043926066, 0.156591205192364] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21580314043926066, 0.156591205192364, 0.14842119480928648] ***
*** starting iteration: 3; err: [Inf, 0.21580314043926066, 0.156591205192364, 0.14842119480928648] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21580314043926066, 0.156591205192364, 0.14842119480928648, 0.14592827552010765] ***
*** finished computation of 7 references, err: [Inf, 0.21580314043926066, 0.156591205192364, 0.14842119480928648, 0.14592827552010765] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [79, 20, 0]]
** centroid: 1, normalized-entropy: 0.7259501452943735, [(1, 79), (2, 20)]
*** center 2: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [94, 30, 0]]
** centroid: 3, normalized-entropy: 0.7982441335646697, [(1, 94), (2, 30)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [79, 11, 0]]
** centroid: 4, normalized-entropy: 0.5357150195407704, [(1, 79), (2, 11)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 86, 11]]
** centroid: 5, normalized-entropy: 0.5100930822965021, [(2, 86), (3, 11)]
*** center 6: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 93, 3]]
** centroid: 7, normalized-entropy: 0.2006223243127146, [(2, 93), (3, 3)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19921106302568145] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19921106302568145, 0.16468149899870757] ***
*** starting iteration: 2; err: [Inf, 0.19921106302568145, 0.16468149899870757] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19921106302568145, 0.16468149899870757, 0.15866962533623158] ***
*** starting iteration: 3; err: [Inf, 0.19921106302568145, 0.16468149899870757, 0.15866962533623158] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19921106302568145, 0.16468149899870757, 0.15866962533623158, 0.15629960192009448] ***
*** finished computation of 7 references, err: [Inf, 0.19921106302568145, 0.16468149899870757, 0.15866962533623158, 0.15629960192009448] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [113, 24, 0]]
** centroid: 1, normalized-entropy: 0.6694238875574322, [(1, 113), (2, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [48, 46, 0]]
** centroid: 2, normalized-entropy: 0.9996734260048917, [(1, 48), (2, 46)]
*** center 3: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [144, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 71, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 26, 16]]
** centroid: 6, normalized-entropy: 0.9587118829771317, [(2, 26), (3, 16)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 96, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17712322264529953] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17712322264529953, 0.1578369913692551] ***
*** starting iteration: 2; err: [Inf, 0.17712322264529953, 0.1578369913692551] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17712322264529953, 0.1578369913692551, 0.15195512326191302] ***
*** starting iteration: 3; err: [Inf, 0.17712322264529953, 0.1578369913692551, 0.15195512326191302] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17712322264529953, 0.1578369913692551, 0.15195512326191302, 0.14981735951645575] ***
*** finished computation of 7 references, err: [Inf, 0.17712322264529953, 0.1578369913692551, 0.15195512326191302, 0.14981735951645575] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [50, 64, 0]]
** centroid: 1, normalized-entropy: 0.9890934397021431, [(1, 50), (2, 64)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [79, 2, 0]]
** centroid: 2, normalized-entropy: 0.16702680404522793, [(1, 79), (2, 2)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 125, 12]]
** centroid: 3, normalized-entropy: 0.4283781735341417, [(2, 125), (3, 12)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [73, 42, 0]]
** centroid: 4, normalized-entropy: 0.9469289678578606, [(1, 73), (2, 42)]
*** center 5: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [69, 20, 0]]
** centroid: 6, normalized-entropy: 0.7686913027030167, [(1, 69), (2, 20)]
*** center 7: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22214652724826578] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22214652724826578, 0.16271403634493453] ***
*** starting iteration: 2; err: [Inf, 0.22214652724826578, 0.16271403634493453] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22214652724826578, 0.16271403634493453, 0.15566766575939472] ***
*** starting iteration: 3; err: [Inf, 0.22214652724826578, 0.16271403634493453, 0.15566766575939472] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22214652724826578, 0.16271403634493453, 0.15566766575939472, 0.15046565967711104] ***
*** finished computation of 7 references, err: [Inf, 0.22214652724826578, 0.16271403634493453, 0.15566766575939472, 0.15046565967711104] ***
*** center 1: selecting labels [1] (freq >= 1) [from [120, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 99, 14]]
** centroid: 3, normalized-entropy: 0.5404508712940567, [(2, 99), (3, 14)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [98, 42, 0]]
** centroid: 4, normalized-entropy: 0.8812908992306927, [(1, 98), (2, 42)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [44, 50, 0]]
** centroid: 5, normalized-entropy: 0.9970590569034106, [(1, 44), (2, 50)]
*** center 6: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [16, 49, 0]]
** centroid: 7, normalized-entropy: 0.8051250074646822, [(1, 16), (2, 49)]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.36420727711640766] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36420727711640766, 0.2537572403597805] ***
*** starting iteration: 2; err: [Inf, 0.36420727711640766, 0.2537572403597805] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36420727711640766, 0.2537572403597805, 0.23396900182522767] ***
*** starting iteration: 3; err: [Inf, 0.36420727711640766, 0.2537572403597805, 0.23396900182522767] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36420727711640766, 0.2537572403597805, 0.23396900182522767, 0.22872009443667335] ***
*** starting iteration: 4; err: [Inf, 0.36420727711640766, 0.2537572403597805, 0.23396900182522767, 0.22872009443667335] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36420727711640766, 0.2537572403597805, 0.23396900182522767, 0.22872009443667335, 0.22773253770234683] ***
*** finished computation of 3 references, err: [Inf, 0.36420727711640766, 0.2537572403597805, 0.23396900182522767, 0.22872009443667335, 0.22773253770234683] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [134, 71, 0]]
** centroid: 1, normalized-entropy: 0.9307581628899635, [(1, 134), (2, 71)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [30, 192, 16]]
** centroid: 2, normalized-entropy: 0.560538961309001, [(1, 30), (2, 192), (3, 16)]
*** center 3: selecting labels [1] (freq >= 1) [from [223, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.32279846745136864] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32279846745136864, 0.2709809764284177] ***
*** starting iteration: 2; err: [Inf, 0.32279846745136864, 0.2709809764284177] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32279846745136864, 0.2709809764284177, 0.25163385138680777] ***
*** starting iteration: 3; err: [Inf, 0.32279846745136864, 0.2709809764284177, 0.25163385138680777] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32279846745136864, 0.2709809764284177, 0.25163385138680777, 0.2314607996948767] ***
*** starting iteration: 4; err: [Inf, 0.32279846745136864, 0.2709809764284177, 0.25163385138680777, 0.2314607996948767] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32279846745136864, 0.2709809764284177, 0.25163385138680777, 0.2314607996948767, 0.2269978722280961] ***
*** starting iteration: 5; err: [Inf, 0.32279846745136864, 0.2709809764284177, 0.25163385138680777, 0.2314607996948767, 0.2269978722280961] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32279846745136864, 0.2709809764284177, 0.25163385138680777, 0.2314607996948767, 0.2269978722280961, 0.22629854483376333] ***
*** finished computation of 3 references, err: [Inf, 0.32279846745136864, 0.2709809764284177, 0.25163385138680777, 0.2314607996948767, 0.2269978722280961, 0.22629854483376333] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [105, 105, 1]]
** centroid: 1, normalized-entropy: 0.6553307976514091, [(1, 105), (2, 105), (3, 1)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [87, 148, 11]]
** centroid: 2, normalized-entropy: 0.7393410236882869, [(1, 87), (2, 148), (3, 11)]
*** center 3: selecting labels [1] (freq >= 1) [from [210, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.33700913080535105] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33700913080535105, 0.2533005802533303] ***
*** starting iteration: 2; err: [Inf, 0.33700913080535105, 0.2533005802533303] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33700913080535105, 0.2533005802533303, 0.23730580131153295] ***
*** starting iteration: 3; err: [Inf, 0.33700913080535105, 0.2533005802533303, 0.23730580131153295] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33700913080535105, 0.2533005802533303, 0.23730580131153295, 0.23443124842141633] ***
*** starting iteration: 4; err: [Inf, 0.33700913080535105, 0.2533005802533303, 0.23730580131153295, 0.23443124842141633] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33700913080535105, 0.2533005802533303, 0.23730580131153295, 0.23443124842141633, 0.23403260933592737] ***
*** finished computation of 3 references, err: [Inf, 0.33700913080535105, 0.2533005802533303, 0.23730580131153295, 0.23443124842141633, 0.23403260933592737] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [89, 130, 11]]
** centroid: 1, normalized-entropy: 0.7603001791946926, [(1, 89), (2, 130), (3, 11)]
*** center 2: selecting labels [1] (freq >= 1) [from [210, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [114, 110, 3]]
** centroid: 3, normalized-entropy: 0.6864420912917382, [(1, 114), (2, 110), (3, 3)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.25702988256087844] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25702988256087844, 0.1726805725646717] ***
*** finished computation of 7 references, err: [Inf, 0.25702988256087844, 0.1726805725646717] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [126, 39, 0]]
** centroid: 1, normalized-entropy: 0.7889406572966208, [(1, 126), (2, 39)]
*** center 2: selecting labels [1] (freq >= 1) [from [174, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [25, 75, 0]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(1, 25), (2, 75)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 40, 5]]
** centroid: 4, normalized-entropy: 0.5032583347756457, [(2, 40), (3, 5)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [62, 22, 0]]
** centroid: 5, normalized-entropy: 0.8296071030882032, [(1, 62), (2, 22)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 2, 10]]
** centroid: 6, normalized-entropy: 0.6500224216483541, [(2, 2), (3, 10)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 85, 1]]
** centroid: 7, normalized-entropy: 0.09140162014739266, [(2, 85), (3, 1)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21666658682276732] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21666658682276732, 0.16886779820166717] ***
*** finished computation of 7 references, err: [Inf, 0.21666658682276732, 0.16886779820166717] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 79, 12]]
** centroid: 1, normalized-entropy: 0.5625393752025972, [(2, 79), (3, 12)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [128, 80, 0]]
** centroid: 2, normalized-entropy: 0.961236604722876, [(1, 128), (2, 80)]
*** center 3: selecting labels [1] (freq >= 1) [from [28, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [4, 92, 0]]
** centroid: 5, normalized-entropy: 0.24988229283318547, [(1, 4), (2, 92)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [14, 2, 0]]
** centroid: 6, normalized-entropy: 0.5435644431995963, [(1, 14), (2, 2)]
*** center 7: selecting labels [1] (freq >= 1) [from [142, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20140946751692215] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20140946751692215, 0.1604210668239279] ***
*** finished computation of 7 references, err: [Inf, 0.20140946751692215, 0.1604210668239279] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [73, 21, 0]]
** centroid: 1, normalized-entropy: 0.7663350359691776, [(1, 73), (2, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [94, 49, 0]]
** centroid: 3, normalized-entropy: 0.9273389282515144, [(1, 94), (2, 49)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [83, 21, 0]]
** centroid: 4, normalized-entropy: 0.7257576154473545, [(1, 83), (2, 21)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 149, 14]]
** centroid: 5, normalized-entropy: 0.4225988385398597, [(2, 149), (3, 14)]
*** center 6: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2874497687877589] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2874497687877589, 0.24605929023689693] ***
*** finished computation of 7 references, err: [Inf, 0.2874497687877589, 0.24605929023689693] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [101, 45, 0]]
** centroid: 1, normalized-entropy: 0.8911070993405197, [(1, 101), (2, 45)]
*** center 2: selecting labels [1] (freq >= 2) [from [127, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [58, 5, 0]]
** centroid: 3, normalized-entropy: 0.39993804743902767, [(1, 58), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [63, 36, 0]]
** centroid: 4, normalized-entropy: 0.9456603046006401, [(1, 63), (2, 36)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 131, 16]]
** centroid: 5, normalized-entropy: 0.496417833262174, [(2, 131), (3, 16)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [14, 12, 0]]
** centroid: 6, normalized-entropy: 0.9957274520849256, [(1, 14), (2, 12)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [24, 34, 0]]
** centroid: 7, normalized-entropy: 0.9784493292686188, [(1, 24), (2, 34)]
finished with 11 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2614591769913192] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2614591769913192, 0.2048925690344539] ***
*** finished computation of 7 references, err: [Inf, 0.2614591769913192, 0.2048925690344539] ***
*** center 1: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [113, 69, 0]]
** centroid: 2, normalized-entropy: 0.9574187595909498, [(1, 113), (2, 69)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [47, 3, 0]]
** centroid: 3, normalized-entropy: 0.3274449191544762, [(1, 47), (2, 3)]
*** center 4: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 118, 12]]
** centroid: 5, normalized-entropy: 0.4441260450795996, [(2, 118), (3, 12)]
*** center 6: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [42, 63, 0]]
** centroid: 7, normalized-entropy: 0.9709505944546688, [(1, 42), (2, 63)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2823571538171456] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2823571538171456, 0.2025689497838604] ***
*** finished computation of 7 references, err: [Inf, 0.2823571538171456, 0.2025689497838604] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [88, 36, 0]]
** centroid: 1, normalized-entropy: 0.8691375806126381, [(1, 88), (2, 36)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 69, 11]]
** centroid: 2, normalized-entropy: 0.5776539033535634, [(2, 69), (3, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 53, 3]]
** centroid: 3, normalized-entropy: 0.3013786435930858, [(2, 53), (3, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [2, 50, 0]]
** centroid: 4, normalized-entropy: 0.23519338181924157, [(1, 2), (2, 50)]
*** center 5: selecting labels [1] (freq >= 2) [from [150, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [115, 4, 0]]
** centroid: 6, normalized-entropy: 0.21220132752136248, [(1, 115), (2, 4)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [58, 28, 0]]
** centroid: 7, normalized-entropy: 0.9103480624345157, [(1, 58), (2, 28)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18514797845072262] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18514797845072262, 0.153652836237237] ***
*** starting iteration: 2; err: [Inf, 0.18514797845072262, 0.153652836237237] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18514797845072262, 0.153652836237237, 0.14840273408103152] ***
*** starting iteration: 3; err: [Inf, 0.18514797845072262, 0.153652836237237, 0.14840273408103152] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18514797845072262, 0.153652836237237, 0.14840273408103152, 0.14751151380235436] ***
*** finished computation of 7 references, err: [Inf, 0.18514797845072262, 0.153652836237237, 0.14840273408103152, 0.14751151380235436] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 94, 1]]
*** center 2: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [58, 41, 0]]
** centroid: 3, normalized-entropy: 0.9786239947589973, [(1, 58), (2, 41)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [53, 17, 0]]
** centroid: 4, normalized-entropy: 0.7997594113291759, [(1, 53), (2, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [109, 6, 0]]
** centroid: 5, normalized-entropy: 0.295560777857315, [(1, 109), (2, 6)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 105, 15]]
** centroid: 6, normalized-entropy: 0.5435644431995963, [(2, 105), (3, 15)]
*** center 7: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19908326160374923] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19908326160374923, 0.15252098427021477] ***
*** starting iteration: 2; err: [Inf, 0.19908326160374923, 0.15252098427021477] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19908326160374923, 0.15252098427021477, 0.14905662166242345] ***
*** starting iteration: 3; err: [Inf, 0.19908326160374923, 0.15252098427021477, 0.14905662166242345] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19908326160374923, 0.15252098427021477, 0.14905662166242345, 0.14869143980914082] ***
*** finished computation of 7 references, err: [Inf, 0.19908326160374923, 0.15252098427021477, 0.14905662166242345, 0.14869143980914082] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [26, 84, 0]]
** centroid: 1, normalized-entropy: 0.7889406572966208, [(1, 26), (2, 84)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [68, 54, 0]]
** centroid: 2, normalized-entropy: 0.9904799742690307, [(1, 68), (2, 54)]
*** center 3: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [65, 24, 0]]
** centroid: 4, normalized-entropy: 0.8409805336163159, [(1, 65), (2, 24)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 90, 12]]
** centroid: 5, normalized-entropy: 0.5225593745369407, [(2, 90), (3, 12)]
*** center 6: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [92, 1, 0]]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19802056933767853] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19802056933767853, 0.1501866474215673] ***
*** starting iteration: 2; err: [Inf, 0.19802056933767853, 0.1501866474215673] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19802056933767853, 0.1501866474215673, 0.14612807985395193] ***
*** starting iteration: 3; err: [Inf, 0.19802056933767853, 0.1501866474215673, 0.14612807985395193] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19802056933767853, 0.1501866474215673, 0.14612807985395193, 0.14493065751178646] ***
*** starting iteration: 4; err: [Inf, 0.19802056933767853, 0.1501866474215673, 0.14612807985395193, 0.14493065751178646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19802056933767853, 0.1501866474215673, 0.14612807985395193, 0.14493065751178646, 0.14433879514868514] ***
*** finished computation of 7 references, err: [Inf, 0.19802056933767853, 0.1501866474215673, 0.14612807985395193, 0.14493065751178646, 0.14433879514868514] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [73, 9, 0]]
** centroid: 1, normalized-entropy: 0.49917983618854633, [(1, 73), (2, 9)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [74, 28, 0]]
** centroid: 2, normalized-entropy: 0.8478617451660525, [(1, 74), (2, 28)]
*** center 3: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 85, 14]]
** centroid: 4, normalized-entropy: 0.5879303728017198, [(2, 85), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [97, 20, 0]]
** centroid: 5, normalized-entropy: 0.6598509794988008, [(1, 97), (2, 20)]
*** center 6: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 98, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.26714063879359773] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.26714063879359773, 0.23799458162036832] ***
*** finished computation of 3 references, err: [Inf, 0.26714063879359773, 0.23799458162036832] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [143, 106, 0]]
** centroid: 1, normalized-entropy: 0.9840133001684472, [(1, 143), (2, 106)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [215, 4, 0]]
** centroid: 2, normalized-entropy: 0.13158403374850683, [(1, 215), (2, 4)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [29, 153, 16]]
** centroid: 3, normalized-entropy: 0.6224881109850143, [(1, 29), (2, 153), (3, 16)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3648196161714853] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3648196161714853, 0.25834890980988384] ***
*** finished computation of 3 references, err: [Inf, 0.3648196161714853, 0.25834890980988384] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [270, 85, 0]]
** centroid: 1, normalized-entropy: 0.7941021417852022, [(1, 270), (2, 85)]
*** center 2: selecting labels [1] (freq >= 1) [from [132, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 168, 12]]
** centroid: 3, normalized-entropy: 0.3533593350214213, [(2, 168), (3, 12)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.38594564806385107] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38594564806385107, 0.2512900081562294] ***
*** finished computation of 3 references, err: [Inf, 0.38594564806385107, 0.2512900081562294] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [23, 127, 12]]
** centroid: 1, normalized-entropy: 0.6014523659389179, [(1, 23), (2, 127), (3, 12)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [177, 113, 2]]
** centroid: 2, normalized-entropy: 0.641695243297925, [(1, 177), (2, 113), (3, 2)]
*** center 3: selecting labels [1] (freq >= 1) [from [213, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.22232138218467232] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22232138218467232, 0.1809640662120963] ***
*** starting iteration: 2; err: [Inf, 0.22232138218467232, 0.1809640662120963] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22232138218467232, 0.1809640662120963, 0.16953018741464024] ***
*** starting iteration: 3; err: [Inf, 0.22232138218467232, 0.1809640662120963, 0.16953018741464024] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22232138218467232, 0.1809640662120963, 0.16953018741464024, 0.1636899674497265] ***
*** finished computation of 7 references, err: [Inf, 0.22232138218467232, 0.1809640662120963, 0.16953018741464024, 0.1636899674497265] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [95, 20, 0]]
** centroid: 1, normalized-entropy: 0.6665783579949205, [(1, 95), (2, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [29, 70, 0]]
** centroid: 2, normalized-entropy: 0.8724752054851931, [(1, 29), (2, 70)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [94, 32, 0]]
** centroid: 3, normalized-entropy: 0.8175072881213616, [(1, 94), (2, 32)]
*** center 4: selecting labels [1] (freq >= 1) [from [169, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 64, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 59, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 18, 16]]
** centroid: 7, normalized-entropy: 0.9975025463691153, [(2, 18), (3, 16)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.286611910908018] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.286611910908018, 0.16527991959157734] ***
*** starting iteration: 2; err: [Inf, 0.286611910908018, 0.16527991959157734] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.286611910908018, 0.16527991959157734, 0.15232456886981693] ***
*** starting iteration: 3; err: [Inf, 0.286611910908018, 0.16527991959157734, 0.15232456886981693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.286611910908018, 0.16527991959157734, 0.15232456886981693, 0.14892781310682668] ***
*** finished computation of 7 references, err: [Inf, 0.286611910908018, 0.16527991959157734, 0.15232456886981693, 0.14892781310682668] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 99, 3]]
** centroid: 1, normalized-entropy: 0.1914332548141934, [(2, 99), (3, 3)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [111, 9, 0]]
** centroid: 2, normalized-entropy: 0.3843115441264972, [(1, 111), (2, 9)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [76, 15, 0]]
** centroid: 3, normalized-entropy: 0.6457523329916605, [(1, 76), (2, 15)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 119, 9]]
** centroid: 4, normalized-entropy: 0.3670887590107337, [(2, 119), (3, 9)]
*** center 5: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [45, 11, 0]]
** centroid: 6, normalized-entropy: 0.7147274731317893, [(1, 45), (2, 11)]
*** center 7: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2098918471127927] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2098918471127927, 0.15767434308643283] ***
*** starting iteration: 2; err: [Inf, 0.2098918471127927, 0.15767434308643283] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2098918471127927, 0.15767434308643283, 0.15087274511413148] ***
*** starting iteration: 3; err: [Inf, 0.2098918471127927, 0.15767434308643283, 0.15087274511413148] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2098918471127927, 0.15767434308643283, 0.15087274511413148, 0.14942683091783698] ***
*** finished computation of 7 references, err: [Inf, 0.2098918471127927, 0.15767434308643283, 0.15087274511413148, 0.14942683091783698] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 71, 14]]
** centroid: 1, normalized-entropy: 0.6454495903301855, [(2, 71), (3, 14)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 88, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [66, 25, 0]]
** centroid: 4, normalized-entropy: 0.8481636883083004, [(1, 66), (2, 25)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [61, 55, 0]]
** centroid: 5, normalized-entropy: 0.9980692551690173, [(1, 61), (2, 55)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [102, 1, 0]]
** centroid: 6, normalized-entropy: 0.0788560137745528, [(1, 102), (2, 1)]
*** center 7: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23250326524592108] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23250326524592108, 0.1909279114155619] ***
*** starting iteration: 2; err: [Inf, 0.23250326524592108, 0.1909279114155619] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23250326524592108, 0.1909279114155619, 0.18620692072687922] ***
*** starting iteration: 3; err: [Inf, 0.23250326524592108, 0.1909279114155619, 0.18620692072687922] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23250326524592108, 0.1909279114155619, 0.18620692072687922, 0.18514950215458512] ***
*** starting iteration: 4; err: [Inf, 0.23250326524592108, 0.1909279114155619, 0.18620692072687922, 0.18514950215458512] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23250326524592108, 0.1909279114155619, 0.18620692072687922, 0.18514950215458512, 0.18477790842990618] ***
*** finished computation of 7 references, err: [Inf, 0.23250326524592108, 0.1909279114155619, 0.18620692072687922, 0.18514950215458512, 0.18477790842990618] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 89, 16]]
** centroid: 1, normalized-entropy: 0.6157667047517474, [(2, 89), (3, 16)]
*** center 2: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [48, 32, 0]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(1, 48), (2, 32)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [86, 24, 0]]
** centroid: 4, normalized-entropy: 0.7568336324184036, [(1, 86), (2, 24)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [65, 27, 0]]
** centroid: 5, normalized-entropy: 0.8731720603476306, [(1, 65), (2, 27)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 91, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2264431089531446] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2264431089531446, 0.19092750551271206] ***
*** starting iteration: 2; err: [Inf, 0.2264431089531446, 0.19092750551271206] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2264431089531446, 0.19092750551271206, 0.1874592239735299] ***
*** starting iteration: 3; err: [Inf, 0.2264431089531446, 0.19092750551271206, 0.1874592239735299] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2264431089531446, 0.19092750551271206, 0.1874592239735299, 0.186922298749906] ***
*** finished computation of 7 references, err: [Inf, 0.2264431089531446, 0.19092750551271206, 0.1874592239735299, 0.186922298749906] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [46, 75, 0]]
** centroid: 1, normalized-entropy: 0.9581586772265479, [(1, 46), (2, 75)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [67, 13, 0]]
** centroid: 2, normalized-entropy: 0.6402569436810504, [(1, 67), (2, 13)]
*** center 3: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 81, 12]]
** centroid: 4, normalized-entropy: 0.5547781633412736, [(2, 81), (3, 12)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [19, 82, 0]]
** centroid: 5, normalized-entropy: 0.6975195309289136, [(1, 19), (2, 82)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [78, 2, 0]]
** centroid: 6, normalized-entropy: 0.1686609314966701, [(1, 78), (2, 2)]
*** center 7: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22676783401066664] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22676783401066664, 0.18627471172682258] ***
*** starting iteration: 2; err: [Inf, 0.22676783401066664, 0.18627471172682258] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22676783401066664, 0.18627471172682258, 0.18491691018620887] ***
*** starting iteration: 3; err: [Inf, 0.22676783401066664, 0.18627471172682258, 0.18491691018620887] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22676783401066664, 0.18627471172682258, 0.18491691018620887, 0.1844680920198582] ***
*** finished computation of 7 references, err: [Inf, 0.22676783401066664, 0.18627471172682258, 0.18491691018620887, 0.1844680920198582] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 84, 14]]
** centroid: 1, normalized-entropy: 0.5916727785823274, [(2, 84), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [66, 11, 0]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(1, 66), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [86, 24, 0]]
** centroid: 4, normalized-entropy: 0.7568336324184036, [(1, 86), (2, 24)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [93, 24, 0]]
** centroid: 5, normalized-entropy: 0.7320666900931937, [(1, 93), (2, 24)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 97, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3398751366615027] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3398751366615027, 0.225727068991666] ***
*** finished computation of 7 references, err: [Inf, 0.3398751366615027, 0.225727068991666] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [76, 82, 0]]
** centroid: 1, normalized-entropy: 0.9989595114657399, [(1, 76), (2, 82)]
*** center 2: selecting labels [1] (freq >= 1) [from [150, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [141, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 55, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [20, 76, 0]]
** centroid: 5, normalized-entropy: 0.7382848661434506, [(1, 20), (2, 76)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 48, 4]]
** centroid: 6, normalized-entropy: 0.3912435636292556, [(2, 48), (3, 4)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 2, 12]]
** centroid: 7, normalized-entropy: 0.5916727785823274, [(2, 2), (3, 12)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2694891606802414] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2694891606802414, 0.2227200878982333] ***
*** finished computation of 7 references, err: [Inf, 0.2694891606802414, 0.2227200878982333] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [50, 21, 0]]
** centroid: 1, normalized-entropy: 0.8760643678555242, [(1, 50), (2, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [74, 5, 0]]
** centroid: 2, normalized-entropy: 0.340373285759646, [(1, 74), (2, 5)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [6, 69, 0]]
** centroid: 3, normalized-entropy: 0.4021791902022729, [(1, 6), (2, 69)]
*** center 4: selecting labels [1] (freq >= 1) [from [202, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 48, 5]]
** centroid: 5, normalized-entropy: 0.4507913883546652, [(2, 48), (3, 5)]
*** center 6: selecting labels [1, 2, 3] (freq >= 1) [from [8, 110, 7]]
** centroid: 6, normalized-entropy: 0.4094581801335222, [(1, 8), (2, 110), (3, 7)]
*** center 7: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.32029879239221654] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32029879239221654, 0.22515652935415775] ***
*** finished computation of 7 references, err: [Inf, 0.32029879239221654, 0.22515652935415775] ***
*** center 1: selecting labels [1] (freq >= 1) [from [115, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [124, 5, 0]]
** centroid: 2, normalized-entropy: 0.23657622470690265, [(1, 124), (2, 5)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [51, 98, 6]]
** centroid: 3, normalized-entropy: 0.7113397180500309, [(1, 51), (2, 98), (3, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [10, 86, 0]]
** centroid: 4, normalized-entropy: 0.4820661480830933, [(1, 10), (2, 86)]
*** center 5: selecting labels [1, 2, 3] (freq >= 1) [from [33, 51, 8]]
** centroid: 5, normalized-entropy: 0.825756757535986, [(1, 33), (2, 51), (3, 8)]
*** center 6: selecting labels [1] (freq >= 1) [from [26, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3532781510728526] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3532781510728526, 0.23270857927610386] ***
*** finished computation of 3 references, err: [Inf, 0.3532781510728526, 0.23270857927610386] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [267, 27, 0]]
** centroid: 1, normalized-entropy: 0.442571064839798, [(1, 267), (2, 27)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 199, 16]]
** centroid: 2, normalized-entropy: 0.382200758946734, [(2, 199), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [120, 37, 0]]
** centroid: 3, normalized-entropy: 0.7877631310489941, [(1, 120), (2, 37)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 14)
[0.9290128451805097, 0.9269838700976426, 0.9239988491485498, 0.9200098301894709, 0.9170427912942882, 0.9169708630786474, 0.9079708450965936, 0.9060197922473372, 0.8899857941774109, 0.8840247433061804, 0.8829907752063441, 0.8699987412562263, 0.8509737282192372, 0.8479617341892792]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9290128451805097
finished with 14
iteration 2 finished
generating 4 configurations using top 12 configurations, starting with 14)
[0.9290128451805097, 0.9269838700976426, 0.9239988491485498, 0.9200098301894709, 0.9170427912942882, 0.9169708630786474, 0.9079708450965936, 0.9060197922473372, 0.8899857941774109, 0.8840247433061804, 0.8829907752063441, 0.8699987412562263, 0.8509737282192372, 0.8479617341892792]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9290128451805097
finished with 15
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.2237134062576162] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2237134062576162, 0.1882562501812591] ***
*** starting iteration: 2; err: [Inf, 0.2237134062576162, 0.1882562501812591] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2237134062576162, 0.1882562501812591, 0.18619152108860806] ***
*** starting iteration: 3; err: [Inf, 0.2237134062576162, 0.1882562501812591, 0.18619152108860806] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2237134062576162, 0.1882562501812591, 0.18619152108860806, 0.1860072704791643] ***
*** finished computation of 7 references, err: [Inf, 0.2237134062576162, 0.1882562501812591, 0.18619152108860806, 0.1860072704791643] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [5, 96, 0]]
** centroid: 1, normalized-entropy: 0.2842902892501332, [(1, 5), (2, 96)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [68, 21, 0]]
** centroid: 2, normalized-entropy: 0.7882487221644084, [(1, 68), (2, 21)]
*** center 3: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 83, 12]]
** centroid: 4, normalized-entropy: 0.5472469471683307, [(2, 83), (3, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [50, 53, 0]]
** centroid: 5, normalized-entropy: 0.9993879681484049, [(1, 50), (2, 53)]
*** center 6: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2418950640315796] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2418950640315796, 0.19265353913325398] ***
*** starting iteration: 2; err: [Inf, 0.2418950640315796, 0.19265353913325398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2418950640315796, 0.19265353913325398, 0.19033158273677686] ***
*** starting iteration: 3; err: [Inf, 0.2418950640315796, 0.19265353913325398, 0.19033158273677686] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2418950640315796, 0.19265353913325398, 0.19033158273677686, 0.18954201025896703] ***
*** finished computation of 7 references, err: [Inf, 0.2418950640315796, 0.19265353913325398, 0.19033158273677686, 0.18954201025896703] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [104, 23, 0]]
** centroid: 1, normalized-entropy: 0.6824826735754346, [(1, 104), (2, 23)]
*** center 2: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 42, 14]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(2, 42), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [93, 10, 0]]
** centroid: 5, normalized-entropy: 0.4596942127956402, [(1, 93), (2, 10)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 87, 0]]
** centroid: 6, normalized-entropy: 0.30458668852140236, [(1, 5), (2, 87)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 78, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25440957886796145] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25440957886796145, 0.1988161972810601] ***
*** starting iteration: 2; err: [Inf, 0.25440957886796145, 0.1988161972810601] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25440957886796145, 0.1988161972810601, 0.19189441616034453] ***
*** starting iteration: 3; err: [Inf, 0.25440957886796145, 0.1988161972810601, 0.19189441616034453] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25440957886796145, 0.1988161972810601, 0.19189441616034453, 0.19096576611444288] ***
*** finished computation of 7 references, err: [Inf, 0.25440957886796145, 0.1988161972810601, 0.19189441616034453, 0.19096576611444288] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [12, 94, 0]]
** centroid: 1, normalized-entropy: 0.5095157180881823, [(1, 12), (2, 94)]
*** center 2: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [58, 65, 0]]
** centroid: 3, normalized-entropy: 0.9976624275811201, [(1, 58), (2, 65)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [51, 26, 0]]
** centroid: 4, normalized-entropy: 0.9225641366401655, [(1, 51), (2, 26)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 78, 16]]
** centroid: 5, normalized-entropy: 0.6581912658132184, [(2, 78), (3, 16)]
*** center 6: selecting labels [1] (freq >= 2) [from [120, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 15)
[0.9419958881036726, 0.9290128451805097, 0.9269838700976426, 0.9239988491485498, 0.9200098301894709, 0.9170427912942882, 0.9169708630786474, 0.9079708450965936, 0.9060197922473372, 0.8899857941774109, 0.8840247433061804, 0.8829907752063441, 0.8699987412562263, 0.8509737282192372, 0.8479617341892792]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9419958881036726
finished with 15
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9419958881036726, 0.9290128451805097, 0.9269838700976426, 0.9239988491485498, 0.9200098301894709, 0.9170427912942882, 0.9169708630786474, 0.9079708450965936, 0.9060197922473372, 0.8899857941774109, 0.8840247433061804, 0.8829907752063441, 0.8699987412562263, 0.8509737282192372, 0.8479617341892792]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9419958881036726
finished with 15
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9419958881036726, 0.9290128451805097, 0.9269838700976426, 0.9239988491485498, 0.9200098301894709, 0.9170427912942882, 0.9169708630786474, 0.9079708450965936, 0.9060197922473372, 0.8899857941774109, 0.8840247433061804, 0.8829907752063441, 0.8699987412562263, 0.8509737282192372, 0.8479617341892792]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9419958881036726
finished with 16
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.4099514692372925] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4099514692372925, 0.29529715959519687] ***
*** starting iteration: 2; err: [Inf, 0.4099514692372925, 0.29529715959519687] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4099514692372925, 0.29529715959519687, 0.28905282600561866] ***
*** starting iteration: 3; err: [Inf, 0.4099514692372925, 0.29529715959519687, 0.28905282600561866] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4099514692372925, 0.29529715959519687, 0.28905282600561866, 0.28880156454554684] ***
*** finished computation of 3 references, err: [Inf, 0.4099514692372925, 0.29529715959519687, 0.28905282600561866, 0.28880156454554684] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [116, 90, 0]]
** centroid: 1, normalized-entropy: 0.9884783227925916, [(1, 116), (2, 90)]
*** center 2: selecting labels [1] (freq >= 1) [from [224, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [47, 173, 16]]
** centroid: 3, normalized-entropy: 0.6658110799180162, [(1, 47), (2, 173), (3, 16)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5306898428768064] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5306898428768064, 0.32517304475596553] ***
*** starting iteration: 2; err: [Inf, 0.5306898428768064, 0.32517304475596553] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5306898428768064, 0.32517304475596553, 0.32242919260292485] ***
*** starting iteration: 3; err: [Inf, 0.5306898428768064, 0.32517304475596553, 0.32242919260292485] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5306898428768064, 0.32517304475596553, 0.32242919260292485, 0.3182943524385075] ***
*** starting iteration: 4; err: [Inf, 0.5306898428768064, 0.32517304475596553, 0.32242919260292485, 0.3182943524385075] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5306898428768064, 0.32517304475596553, 0.32242919260292485, 0.3182943524385075, 0.3160653719106044] ***
*** starting iteration: 5; err: [Inf, 0.5306898428768064, 0.32517304475596553, 0.32242919260292485, 0.3182943524385075, 0.3160653719106044] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5306898428768064, 0.32517304475596553, 0.32242919260292485, 0.3182943524385075, 0.3160653719106044, 0.3148665681950513] ***
*** starting iteration: 6; err: [Inf, 0.5306898428768064, 0.32517304475596553, 0.32242919260292485, 0.3182943524385075, 0.3160653719106044, 0.3148665681950513] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5306898428768064, 0.32517304475596553, 0.32242919260292485, 0.3182943524385075, 0.3160653719106044, 0.3148665681950513, 0.3131961641411508] ***
*** starting iteration: 7; err: [Inf, 0.5306898428768064, 0.32517304475596553, 0.32242919260292485, 0.3182943524385075, 0.3160653719106044, 0.3148665681950513, 0.3131961641411508] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5306898428768064, 0.32517304475596553, 0.32242919260292485, 0.3182943524385075, 0.3160653719106044, 0.3148665681950513, 0.3131961641411508, 0.3103620658308893] ***
*** starting iteration: 8; err: [Inf, 0.5306898428768064, 0.32517304475596553, 0.32242919260292485, 0.3182943524385075, 0.3160653719106044, 0.3148665681950513, 0.3131961641411508, 0.3103620658308893] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5306898428768064, 0.32517304475596553, 0.32242919260292485, 0.3182943524385075, 0.3160653719106044, 0.3148665681950513, 0.3131961641411508, 0.3103620658308893, 0.3072019668443986] ***
*** starting iteration: 9; err: [Inf, 0.5306898428768064, 0.32517304475596553, 0.32242919260292485, 0.3182943524385075, 0.3160653719106044, 0.3148665681950513, 0.3131961641411508, 0.3103620658308893, 0.3072019668443986] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5306898428768064, 0.32517304475596553, 0.32242919260292485, 0.3182943524385075, 0.3160653719106044, 0.3148665681950513, 0.3131961641411508, 0.3103620658308893, 0.3072019668443986, 0.29745240673573614] ***
*** starting iteration: 10; err: [Inf, 0.5306898428768064, 0.32517304475596553, 0.32242919260292485, 0.3182943524385075, 0.3160653719106044, 0.3148665681950513, 0.3131961641411508, 0.3103620658308893, 0.3072019668443986, 0.29745240673573614] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5306898428768064, 0.32517304475596553, 0.32242919260292485, 0.3182943524385075, 0.3160653719106044, 0.3148665681950513, 0.3131961641411508, 0.3103620658308893, 0.3072019668443986, 0.29745240673573614, 0.29400677579794376] ***
*** finished computation of 3 references, err: [Inf, 0.5306898428768064, 0.32517304475596553, 0.32242919260292485, 0.3182943524385075, 0.3160653719106044, 0.3148665681950513, 0.3131961641411508, 0.3103620658308893, 0.3072019668443986, 0.29745240673573614, 0.29400677579794376] ***
*** center 1: selecting labels [1] (freq >= 1) [from [212, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [78, 155, 12]]
** centroid: 2, normalized-entropy: 0.7298082640641083, [(1, 78), (2, 155), (3, 12)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [112, 98, 0]]
** centroid: 3, normalized-entropy: 0.9967916319816367, [(1, 112), (2, 98)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.44324005364036856] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44324005364036856, 0.30382513235612163] ***
*** starting iteration: 2; err: [Inf, 0.44324005364036856, 0.30382513235612163] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44324005364036856, 0.30382513235612163, 0.2982651094656097] ***
*** starting iteration: 3; err: [Inf, 0.44324005364036856, 0.30382513235612163, 0.2982651094656097] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44324005364036856, 0.30382513235612163, 0.2982651094656097, 0.29820585309498493] ***
*** finished computation of 3 references, err: [Inf, 0.44324005364036856, 0.30382513235612163, 0.2982651094656097, 0.29820585309498493] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [113, 107, 0]]
** centroid: 1, normalized-entropy: 0.9994633939890282, [(1, 113), (2, 107)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [84, 133, 14]]
** centroid: 2, normalized-entropy: 0.7788126744459858, [(1, 84), (2, 133), (3, 14)]
*** center 3: selecting labels [1] (freq >= 1) [from [216, 0, 0]]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 16)
[0.9419958881036726, 0.9290128451805097, 0.9269838700976426, 0.9239988491485498, 0.9200098301894709, 0.9170427912942882, 0.9169708630786474, 0.9079708450965936, 0.9060197922473372, 0.9049678420935905, 0.8899857941774109, 0.8840247433061804, 0.8829907752063441, 0.8699987412562263, 0.8509737282192372, 0.8479617341892792]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9419958881036726
finished with 16
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9419958881036726, 0.9290128451805097, 0.9269838700976426, 0.9239988491485498, 0.9200098301894709, 0.9170427912942882, 0.9169708630786474, 0.9079708450965936, 0.9060197922473372, 0.9049678420935905, 0.8899857941774109, 0.8840247433061804, 0.8829907752063441, 0.8699987412562263, 0.8509737282192372, 0.8479617341892792]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9419958881036726
finished with 16
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9419958881036726, 0.9290128451805097, 0.9269838700976426, 0.9239988491485498, 0.9200098301894709, 0.9170427912942882, 0.9169708630786474, 0.9079708450965936, 0.9060197922473372, 0.9049678420935905, 0.8899857941774109, 0.8840247433061804, 0.8829907752063441, 0.8699987412562263, 0.8509737282192372, 0.8479617341892792]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 2) => 0.9419958881036726
finished with 18
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.22657697680273625] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22657697680273625, 0.18303767347783745] ***
*** finished computation of 7 references, err: [Inf, 0.22657697680273625, 0.18303767347783745] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 99, 1]]
*** center 2: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [64, 31, 0]]
** centroid: 3, normalized-entropy: 0.9111178649415465, [(1, 64), (2, 31)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [89, 8, 0]]
** centroid: 4, normalized-entropy: 0.4108378385169277, [(1, 89), (2, 8)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [85, 23, 0]]
** centroid: 5, normalized-entropy: 0.7471082932651727, [(1, 85), (2, 23)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 92, 11]]
** centroid: 6, normalized-entropy: 0.4901757916273403, [(2, 92), (3, 11)]
*** center 7: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2366262220468992] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2366262220468992, 0.19436598857417925] ***
*** finished computation of 7 references, err: [Inf, 0.2366262220468992, 0.19436598857417925] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [115, 2, 0]]
** centroid: 1, normalized-entropy: 0.1247975754927792, [(1, 115), (2, 2)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 56, 14]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(2, 56), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [70, 41, 0]]
** centroid: 3, normalized-entropy: 0.9501866467511052, [(1, 70), (2, 41)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [54, 27, 0]]
** centroid: 4, normalized-entropy: 0.9182958340544894, [(1, 54), (2, 27)]
*** center 5: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 113, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [98, 1, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1978973632079882] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1978973632079882, 0.15068951799246194] ***
*** finished computation of 7 references, err: [Inf, 0.1978973632079882, 0.15068951799246194] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 96, 11]]
** centroid: 1, normalized-entropy: 0.4778207445858079, [(2, 96), (3, 11)]
*** center 2: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [60, 29, 0]]
** centroid: 3, normalized-entropy: 0.9106223680988619, [(1, 60), (2, 29)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [98, 19, 0]]
** centroid: 4, normalized-entropy: 0.6400041428422206, [(1, 98), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [86, 27, 0]]
** centroid: 5, normalized-entropy: 0.7932698344258595, [(1, 86), (2, 27)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 92, 5]]
** centroid: 6, normalized-entropy: 0.29292995113885967, [(2, 92), (3, 5)]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18699162111078657] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18699162111078657, 0.15242299182700744] ***
*** finished computation of 7 references, err: [Inf, 0.18699162111078657, 0.15242299182700744] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [144, 2, 0]]
** centroid: 1, normalized-entropy: 0.1044190780054077, [(1, 144), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [69, 3, 0]]
** centroid: 2, normalized-entropy: 0.24988229283318547, [(1, 69), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 41, 12]]
** centroid: 3, normalized-entropy: 0.7717094696953635, [(2, 41), (3, 12)]
*** center 4: selecting labels [1] (freq >= 2) [from [125, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [62, 36, 0]]
** centroid: 5, normalized-entropy: 0.9486131982385807, [(1, 62), (2, 36)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 96, 0]]
** centroid: 6, normalized-entropy: 0.14372616993938164, [(1, 2), (2, 96)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 75, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20505876832039863] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20505876832039863, 0.1494397710334381] ***
*** finished computation of 7 references, err: [Inf, 0.20505876832039863, 0.1494397710334381] ***
*** center 1: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 71, 14]]
** centroid: 2, normalized-entropy: 0.6454495903301855, [(2, 71), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [78, 22, 0]]
** centroid: 3, normalized-entropy: 0.7601675029619658, [(1, 78), (2, 22)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [71, 8, 0]]
** centroid: 4, normalized-entropy: 0.47299536229314826, [(1, 71), (2, 8)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [73, 52, 0]]
** centroid: 5, normalized-entropy: 0.9795438195294628, [(1, 73), (2, 52)]
*** center 6: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 87, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2202625547482579] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2202625547482579, 0.1917229282135541] ***
*** finished computation of 7 references, err: [Inf, 0.2202625547482579, 0.1917229282135541] ***
*** center 1: selecting labels [1] (freq >= 2) [from [123, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [49, 18, 0]]
** centroid: 2, normalized-entropy: 0.8395304981054318, [(1, 49), (2, 18)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 44, 16]]
** centroid: 3, normalized-entropy: 0.8366407419411671, [(2, 44), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [95, 17, 0]]
** centroid: 5, normalized-entropy: 0.6142910730156771, [(1, 95), (2, 17)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [15, 91, 0]]
** centroid: 6, normalized-entropy: 0.5881782735046225, [(1, 15), (2, 91)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 93, 0]]
finished with 11 centroids; started with 7
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.19930635793716647] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19930635793716647, 0.15206288596475498] ***
*** finished computation of 7 references, err: [Inf, 0.19930635793716647, 0.15206288596475498] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [3, 153, 0]]
** centroid: 1, normalized-entropy: 0.13709947889981755, [(1, 3), (2, 153)]
*** center 2: selecting labels [1] (freq >= 2) [from [133, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [111, 15, 0]]
** centroid: 3, normalized-entropy: 0.5266170655714281, [(1, 111), (2, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [167, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [187, 19, 0]]
** centroid: 5, normalized-entropy: 0.4438797176957611, [(1, 187), (2, 19)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 143, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 48, 21]]
** centroid: 7, normalized-entropy: 0.8865408928220899, [(2, 48), (3, 21)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1873184373434633] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1873184373434633, 0.15240699653699993] ***
*** finished computation of 7 references, err: [Inf, 0.1873184373434633, 0.15240699653699993] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 86, 2]]
** centroid: 1, normalized-entropy: 0.1564910629057016, [(2, 86), (3, 2)]
*** center 2: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [46, 12, 0]]
** centroid: 3, normalized-entropy: 0.7355085815538399, [(1, 46), (2, 12)]
*** center 4: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 76, 8]]
** centroid: 5, normalized-entropy: 0.45371633918694493, [(2, 76), (3, 8)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [93, 14, 0]]
** centroid: 6, normalized-entropy: 0.5597404598417697, [(1, 93), (2, 14)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [31, 8, 0]]
** centroid: 7, normalized-entropy: 0.7320666900931937, [(1, 31), (2, 8)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18670770115032792] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18670770115032792, 0.14246352573484183] ***
*** finished computation of 7 references, err: [Inf, 0.18670770115032792, 0.14246352573484183] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 81, 13]]
** centroid: 1, normalized-entropy: 0.57976367540648, [(2, 81), (3, 13)]
*** center 2: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [48, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [59, 15, 0]]
** centroid: 4, normalized-entropy: 0.7273006785144036, [(1, 59), (2, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 20, 0]]
** centroid: 5, normalized-entropy: 0.7553754125614286, [(1, 72), (2, 20)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 62, 0]]
** centroid: 6, normalized-entropy: 0.3829576722723533, [(1, 5), (2, 62)]
*** center 7: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20846377773582936] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20846377773582936, 0.15141077367961406] ***
*** finished computation of 7 references, err: [Inf, 0.20846377773582936, 0.15141077367961406] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 75, 10]]
** centroid: 1, normalized-entropy: 0.5225593745369407, [(2, 75), (3, 10)]
*** center 2: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [37, 5, 0]]
** centroid: 3, normalized-entropy: 0.5266170655714281, [(1, 37), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [67, 17, 0]]
** centroid: 4, normalized-entropy: 0.7266645172796352, [(1, 67), (2, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [67, 31, 0]]
** centroid: 5, normalized-entropy: 0.9003418708227195, [(1, 67), (2, 31)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 74, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18756832783669233] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18756832783669233, 0.15250184558331967] ***
*** finished computation of 7 references, err: [Inf, 0.18756832783669233, 0.15250184558331967] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 76, 14]]
** centroid: 1, normalized-entropy: 0.6235702082127973, [(2, 76), (3, 14)]
*** center 2: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [46, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [34, 18, 0]]
** centroid: 4, normalized-entropy: 0.9305861291319927, [(1, 34), (2, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [88, 17, 0]]
** centroid: 5, normalized-entropy: 0.6388469391771899, [(1, 88), (2, 17)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [54, 3, 0]]
** centroid: 6, normalized-entropy: 0.2974722489192896, [(1, 54), (2, 3)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 75, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19285352880507708] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19285352880507708, 0.15052988884039223] ***
*** finished computation of 7 references, err: [Inf, 0.19285352880507708, 0.15052988884039223] ***
*** center 1: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 58, 10]]
** centroid: 2, normalized-entropy: 0.6024308020404452, [(2, 58), (3, 10)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [39, 11, 0]]
** centroid: 3, normalized-entropy: 0.7601675029619658, [(1, 39), (2, 11)]
*** center 4: selecting labels [1] (freq >= 2) [from [63, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [43, 58, 0]]
** centroid: 5, normalized-entropy: 0.9840304711717017, [(1, 43), (2, 58)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 68, 0]]
** centroid: 6, normalized-entropy: 0.3095434291503252, [(1, 4), (2, 68)]
*** center 7: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18043418009392917] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18043418009392917, 0.1503475482929498] ***
*** finished computation of 7 references, err: [Inf, 0.18043418009392917, 0.1503475482929498] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [67, 7, 0]]
** centroid: 1, normalized-entropy: 0.45162282218200417, [(1, 67), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [54, 11, 0]]
** centroid: 2, normalized-entropy: 0.6559420757694151, [(1, 54), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 45, 8]]
** centroid: 3, normalized-entropy: 0.612196127490834, [(2, 45), (3, 8)]
*** center 4: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [31, 51, 0]]
** centroid: 5, normalized-entropy: 0.956652272148091, [(1, 31), (2, 51)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 66, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20785439481399953] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20785439481399953, 0.1564684391692281] ***
*** finished computation of 7 references, err: [Inf, 0.20785439481399953, 0.1564684391692281] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [64, 41, 0]]
** centroid: 1, normalized-entropy: 0.9651061634819187, [(1, 64), (2, 41)]
*** center 2: selecting labels [1] (freq >= 2) [from [37, 1, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 56, 13]]
** centroid: 3, normalized-entropy: 0.698124573139618, [(2, 56), (3, 13)]
*** center 4: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [65, 26, 0]]
** centroid: 5, normalized-entropy: 0.8631205685666311, [(1, 65), (2, 26)]
*** center 6: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 62, 0]]
** centroid: 7, normalized-entropy: 0.269828447703074, [(1, 3), (2, 62)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17974571094475686] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17974571094475686, 0.14880189682729542] ***
*** finished computation of 7 references, err: [Inf, 0.17974571094475686, 0.14880189682729542] ***
*** center 1: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 8, 0]]
** centroid: 2, normalized-entropy: 0.572580465623769, [(1, 51), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 55, 9]]
** centroid: 3, normalized-entropy: 0.5858732928619204, [(2, 55), (3, 9)]
*** center 4: selecting labels [1] (freq >= 2) [from [42, 1, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [26, 68, 0]]
** centroid: 6, normalized-entropy: 0.8507707040532602, [(1, 26), (2, 68)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 66, 0]]
** centroid: 7, normalized-entropy: 0.2580186686648155, [(1, 3), (2, 66)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1902380506694317] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1902380506694317, 0.15208021836495028] ***
*** finished computation of 7 references, err: [Inf, 0.1902380506694317, 0.15208021836495028] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [3, 93, 9]]
** centroid: 1, normalized-entropy: 0.3819816820231363, [(1, 3), (2, 93), (3, 9)]
*** center 2: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 4, 0]]
** centroid: 3, normalized-entropy: 0.4079059801389762, [(1, 45), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [46, 19, 0]]
** centroid: 4, normalized-entropy: 0.871683617119982, [(1, 46), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [87, 3, 0]]
** centroid: 5, normalized-entropy: 0.2108423003185322, [(1, 87), (2, 3)]
*** center 6: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 7: selecting labels [1, 2, 3] (freq >= 2) [from [2, 64, 2]]
** centroid: 7, normalized-entropy: 0.24075048345657657, [(1, 2), (2, 64), (3, 2)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18415345756243914] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18415345756243914, 0.15468682309053838] ***
*** finished computation of 7 references, err: [Inf, 0.18415345756243914, 0.15468682309053838] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [104, 4, 0]]
** centroid: 1, normalized-entropy: 0.22853814395352806, [(1, 104), (2, 4)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 33, 7]]
** centroid: 2, normalized-entropy: 0.6690158350565576, [(2, 33), (3, 7)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [56, 10, 0]]
** centroid: 3, normalized-entropy: 0.6136190195993708, [(1, 56), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [35, 3, 0]]
** centroid: 4, normalized-entropy: 0.39845927409523557, [(1, 35), (2, 3)]
*** center 5: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [17, 79, 0]]
** centroid: 6, normalized-entropy: 0.673654715229001, [(1, 17), (2, 79)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [5, 60, 0]]
** centroid: 7, normalized-entropy: 0.3912435636292556, [(1, 5), (2, 60)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18677093959785998] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18677093959785998, 0.15261018375074492] ***
*** finished computation of 7 references, err: [Inf, 0.18677093959785998, 0.15261018375074492] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 89, 7]]
** centroid: 1, normalized-entropy: 0.3767150026960246, [(2, 89), (3, 7)]
*** center 2: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [56, 7, 0]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(1, 56), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [36, 8, 0]]
** centroid: 4, normalized-entropy: 0.6840384356390419, [(1, 36), (2, 8)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [91, 3, 0]]
** centroid: 5, normalized-entropy: 0.2039058755048202, [(1, 91), (2, 3)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 72, 5]]
** centroid: 6, normalized-entropy: 0.34673146824966367, [(2, 72), (3, 5)]
*** center 7: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19391921312361957] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19391921312361957, 0.15496297352667898] ***
*** finished computation of 7 references, err: [Inf, 0.19391921312361957, 0.15496297352667898] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [75, 25, 0]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(1, 75), (2, 25)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [33, 3, 0]]
** centroid: 2, normalized-entropy: 0.4138168503036336, [(1, 33), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 68, 6]]
** centroid: 3, normalized-entropy: 0.40597703847557104, [(2, 68), (3, 6)]
*** center 4: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [56, 25, 0]]
** centroid: 5, normalized-entropy: 0.8915996278279094, [(1, 56), (2, 25)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [15, 63, 0]]
** centroid: 6, normalized-entropy: 0.7062740891876008, [(1, 15), (2, 63)]
*** center 7: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20673433129116892] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20673433129116892, 0.15000863269716502] ***
*** finished computation of 7 references, err: [Inf, 0.20673433129116892, 0.15000863269716502] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [41, 48, 0]]
** centroid: 1, normalized-entropy: 0.995533068899466, [(1, 41), (2, 48)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [36, 16, 0]]
** centroid: 2, normalized-entropy: 0.8904916402194913, [(1, 36), (2, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 72, 10]]
** centroid: 4, normalized-entropy: 0.5349436990971067, [(2, 72), (3, 10)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [25, 67, 0]]
** centroid: 5, normalized-entropy: 0.8439491244805034, [(1, 25), (2, 67)]
*** center 6: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18241098820604384] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18241098820604384, 0.1494555164501071] ***
*** finished computation of 7 references, err: [Inf, 0.18241098820604384, 0.1494555164501071] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [6, 85, 1]]
** centroid: 1, normalized-entropy: 0.35056382068186565, [(1, 6), (2, 85)]
*** center 2: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 14, 0]]
** centroid: 3, normalized-entropy: 0.7905013842153699, [(1, 45), (2, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 77, 8]]
** centroid: 5, normalized-entropy: 0.4500666580964382, [(2, 77), (3, 8)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [88, 10, 0]]
** centroid: 6, normalized-entropy: 0.47543164626872053, [(1, 88), (2, 10)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [39, 12, 0]]
** centroid: 7, normalized-entropy: 0.787126586201269, [(1, 39), (2, 12)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19031032241508364] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19031032241508364, 0.1518740324145183] ***
*** finished computation of 7 references, err: [Inf, 0.19031032241508364, 0.1518740324145183] ***
*** center 1: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 49, 15]]
** centroid: 2, normalized-entropy: 0.7855602922535471, [(2, 49), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [40, 6, 0]]
** centroid: 3, normalized-entropy: 0.5586293734521991, [(1, 40), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [49, 54, 0]]
** centroid: 4, normalized-entropy: 0.9982994837029028, [(1, 49), (2, 54)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [17, 65, 0]]
** centroid: 5, normalized-entropy: 0.7363230272021651, [(1, 17), (2, 65)]
*** center 6: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1867859157025814] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1867859157025814, 0.14656758713256568] ***
*** finished computation of 7 references, err: [Inf, 0.1867859157025814, 0.14656758713256568] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [53, 42, 0]]
** centroid: 1, normalized-entropy: 0.9903070204513952, [(1, 53), (2, 42)]
*** center 2: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 60, 15]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(2, 60), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [84, 10, 0]]
** centroid: 5, normalized-entropy: 0.48890859144051524, [(1, 84), (2, 10)]
*** center 6: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 70, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1838932355027646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1838932355027646, 0.1525162180028856] ***
*** finished computation of 7 references, err: [Inf, 0.1838932355027646, 0.1525162180028856] ***
*** center 1: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 42, 10]]
** centroid: 2, normalized-entropy: 0.7062740891876008, [(2, 42), (3, 10)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [36, 12, 0]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(1, 36), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [59, 15, 0]]
** centroid: 4, normalized-entropy: 0.7273006785144036, [(1, 59), (2, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [32, 53, 0]]
** centroid: 5, normalized-entropy: 0.9555111232924128, [(1, 32), (2, 53)]
*** center 6: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 77, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18716611300874503] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18716611300874503, 0.15411279361136257] ***
*** finished computation of 7 references, err: [Inf, 0.18716611300874503, 0.15411279361136257] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [97, 19, 0]]
** centroid: 1, normalized-entropy: 0.6433071292001625, [(1, 97), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [47, 9, 0]]
** centroid: 2, normalized-entropy: 0.6360156177392153, [(1, 47), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 27, 14]]
** centroid: 3, normalized-entropy: 0.9262122127346664, [(2, 27), (3, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [11, 78, 0]]
** centroid: 5, normalized-entropy: 0.5396084773004918, [(1, 11), (2, 78)]
*** center 6: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 69, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18743363425694406] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18743363425694406, 0.15219820890389382] ***
*** finished computation of 7 references, err: [Inf, 0.18743363425694406, 0.15219820890389382] ***
*** center 1: selecting labels [1] (freq >= 2) [from [133, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 30, 14]]
** centroid: 2, normalized-entropy: 0.9023932827949788, [(2, 30), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [35, 8, 0]]
** centroid: 3, normalized-entropy: 0.6931274153282881, [(1, 35), (2, 8)]
*** center 4: selecting labels [1] (freq >= 2) [from [68, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [20, 61, 0]]
** centroid: 5, normalized-entropy: 0.8063495153650776, [(1, 20), (2, 61)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 73, 0]]
** centroid: 6, normalized-entropy: 0.4280696292293062, [(1, 7), (2, 73)]
*** center 7: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19113232040032743] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19113232040032743, 0.1510276301121339] ***
*** finished computation of 7 references, err: [Inf, 0.19113232040032743, 0.1510276301121339] ***
*** center 1: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 50, 9]]
** centroid: 2, normalized-entropy: 0.6161661934005354, [(2, 50), (3, 9)]
*** center 3: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [65, 27, 0]]
** centroid: 4, normalized-entropy: 0.8731720603476306, [(1, 65), (2, 27)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [28, 58, 0]]
** centroid: 5, normalized-entropy: 0.9103480624345157, [(1, 28), (2, 58)]
*** center 6: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 62, 0]]
** centroid: 7, normalized-entropy: 0.32984607020714635, [(1, 4), (2, 62)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18728132776357234] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18728132776357234, 0.15164435520675032] ***
*** finished computation of 7 references, err: [Inf, 0.18728132776357234, 0.15164435520675032] ***
*** center 1: selecting labels [1] (freq >= 2) [from [126, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 45, 10]]
** centroid: 2, normalized-entropy: 0.6840384356390419, [(2, 45), (3, 10)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [33, 14, 0]]
** centroid: 3, normalized-entropy: 0.8786744932173094, [(1, 33), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [70, 8, 0]]
** centroid: 4, normalized-entropy: 0.4770713062193298, [(1, 70), (2, 8)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [24, 49, 0]]
** centroid: 5, normalized-entropy: 0.9136617865655933, [(1, 24), (2, 49)]
*** center 6: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 75, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1943960933946073] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1943960933946073, 0.1515551902540028] ***
*** finished computation of 7 references, err: [Inf, 0.1943960933946073, 0.1515551902540028] ***
*** center 1: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [55, 3, 0]]
** centroid: 2, normalized-entropy: 0.29367630985136944, [(1, 55), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 44, 9]]
** centroid: 3, normalized-entropy: 0.6572729784684466, [(2, 44), (3, 9)]
*** center 4: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [45, 32, 0]]
** centroid: 5, normalized-entropy: 0.9793399259567798, [(1, 45), (2, 32)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [32, 56, 0]]
** centroid: 6, normalized-entropy: 0.9456603046006401, [(1, 32), (2, 56)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 50, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19175860738009215] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19175860738009215, 0.14437987486831844] ***
*** finished computation of 7 references, err: [Inf, 0.19175860738009215, 0.14437987486831844] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [45, 6, 0]]
** centroid: 1, normalized-entropy: 0.5225593745369407, [(1, 45), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 12, 0]]
** centroid: 2, normalized-entropy: 0.7024665512903904, [(1, 51), (2, 12)]
*** center 3: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 66, 6]]
** centroid: 4, normalized-entropy: 0.4138168503036336, [(2, 66), (3, 6)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [65, 26, 0]]
** centroid: 5, normalized-entropy: 0.8631205685666311, [(1, 65), (2, 26)]
*** center 6: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 83, 0]]
** centroid: 7, normalized-entropy: 0.2690553027246505, [(1, 4), (2, 83)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20434080102853477] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20434080102853477, 0.15044540480338037] ***
*** finished computation of 7 references, err: [Inf, 0.20434080102853477, 0.15044540480338037] ***
*** center 1: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [42, 15, 0]]
** centroid: 2, normalized-entropy: 0.8314743880097292, [(1, 42), (2, 15)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 59, 12]]
** centroid: 3, normalized-entropy: 0.6554444445609846, [(2, 59), (3, 12)]
*** center 4: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [48, 38, 0]]
** centroid: 5, normalized-entropy: 0.9902246902198684, [(1, 48), (2, 38)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 76, 0]]
** centroid: 6, normalized-entropy: 0.17203694935311387, [(1, 2), (2, 76)]
*** center 7: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18637220214121045] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18637220214121045, 0.1493206697255373] ***
*** finished computation of 7 references, err: [Inf, 0.18637220214121045, 0.1493206697255373] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [46, 48, 0]]
** centroid: 1, normalized-entropy: 0.9996734260048917, [(1, 46), (2, 48)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [59, 15, 0]]
** centroid: 2, normalized-entropy: 0.7273006785144036, [(1, 59), (2, 15)]
*** center 3: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 57, 1]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 14, 0]]
** centroid: 5, normalized-entropy: 0.6409441847875289, [(1, 72), (2, 14)]
*** center 6: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 59, 8]]
** centroid: 7, normalized-entropy: 0.52764232609436, [(2, 59), (3, 8)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1795728109832853] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1795728109832853, 0.14926313628349452] ***
*** finished computation of 7 references, err: [Inf, 0.1795728109832853, 0.14926313628349452] ***
*** center 1: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [44, 7, 0]]
** centroid: 2, normalized-entropy: 0.577004250315725, [(1, 44), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 44, 12]]
** centroid: 3, normalized-entropy: 0.7495952572594798, [(2, 44), (3, 12)]
*** center 4: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [6, 80, 0]]
** centroid: 5, normalized-entropy: 0.3650551896402848, [(1, 6), (2, 80)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [31, 57, 0]]
** centroid: 6, normalized-entropy: 0.9360814319397586, [(1, 31), (2, 57)]
*** center 7: selecting labels [1] (freq >= 2) [from [44, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18149050294607877] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18149050294607877, 0.15340888746641576] ***
*** finished computation of 7 references, err: [Inf, 0.18149050294607877, 0.15340888746641576] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [76, 54, 0]]
** centroid: 1, normalized-entropy: 0.9792415350396869, [(1, 76), (2, 54)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [39, 2, 0]]
** centroid: 2, normalized-entropy: 0.2811937964320427, [(1, 39), (2, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [41, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 41, 12]]
** centroid: 4, normalized-entropy: 0.7717094696953635, [(2, 41), (3, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [92, 5, 0]]
** centroid: 5, normalized-entropy: 0.29292995113885967, [(1, 92), (2, 5)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 76, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21403853593952954] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21403853593952954, 0.15296749573666601] ***
*** finished computation of 7 references, err: [Inf, 0.21403853593952954, 0.15296749573666601] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [78, 9, 0]]
** centroid: 1, normalized-entropy: 0.47983202361612853, [(1, 78), (2, 9)]
*** center 2: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 40, 11]]
** centroid: 3, normalized-entropy: 0.7522121733341471, [(2, 40), (3, 11)]
*** center 4: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 82, 0]]
** centroid: 6, normalized-entropy: 0.3173238998358585, [(1, 5), (2, 82)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 60, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18596704194322228] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18596704194322228, 0.15160072336345912] ***
*** finished computation of 7 references, err: [Inf, 0.18596704194322228, 0.15160072336345912] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [71, 30, 0]]
** centroid: 1, normalized-entropy: 0.8776296673746861, [(1, 71), (2, 30)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [45, 14, 0]]
** centroid: 2, normalized-entropy: 0.7905013842153699, [(1, 45), (2, 14)]
*** center 3: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 66, 10]]
** centroid: 4, normalized-entropy: 0.5617526078313283, [(2, 66), (3, 10)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [62, 23, 0]]
** centroid: 5, normalized-entropy: 0.8423074510400833, [(1, 62), (2, 23)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 58, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18645984195172788] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18645984195172788, 0.15054893332906066] ***
*** finished computation of 7 references, err: [Inf, 0.18645984195172788, 0.15054893332906066] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [76, 19, 0]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(1, 76), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [55, 3, 0]]
** centroid: 2, normalized-entropy: 0.29367630985136944, [(1, 55), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 43, 11]]
** centroid: 3, normalized-entropy: 0.7292739418449411, [(2, 43), (3, 11)]
*** center 4: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [104, 5, 0]]
** centroid: 5, normalized-entropy: 0.2685937636658219, [(1, 104), (2, 5)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 65, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 49, 0]]
** centroid: 7, normalized-entropy: 0.3860189005698936, [(1, 4), (2, 49)]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 378,3 => 21,1 => 601), Dict(2 => 357,3 => 30,1 => 613))
[ Info: ===== scores for single classifier: {"micro_f1":0.93,"precision":0.93,"recall":0.93,"macro_recall":0.960376102588942,"macro_f1":0.9301324209029506,"accuracy":0.93,"class_f1":{"2":0.9097938144329896,"3":0.9375,"1":0.943103448275862},"class_precision":{"2":0.8424821002386634,"3":0.8823529411764706,"1":1.0},"class_recall":{"2":0.988795518207283,"3":1.0,"1":0.8923327895595432}}
[ Info: ===== scores for 1: {"micro_f1":0.962,"precision":0.962,"recall":0.962,"macro_recall":0.9723178015088579,"macro_f1":0.9348697542821892,"accuracy":0.962,"class_f1":{"2":0.946927374301676,"3":0.8823529411764706,"1":0.975328947368421},"class_precision":{"2":0.9442896935933147,"3":0.7894736842105263,"1":0.9834162520729685},"class_recall":{"2":0.9495798319327731,"3":1.0,"1":0.967373572593801}}
[ Info: ===== scores for 5: {"micro_f1":0.957,"precision":0.957,"recall":0.957,"macro_recall":0.9699888655842979,"macro_f1":0.9486246326012536,"accuracy":0.957,"class_f1":{"2":0.9405255878284925,"3":0.9375,"1":0.967848309975268},"class_precision":{"2":0.9289617486338798,"3":0.8823529411764706,"1":0.9783333333333334},"class_recall":{"2":0.9523809523809523,"3":1.0,"1":0.9575856443719413}}
[ Info: ===== scores for 7: {"micro_f1":0.951,"precision":0.951,"recall":0.951,"macro_recall":0.9643866246879393,"macro_f1":0.9308808691804867,"accuracy":0.951,"class_f1":{"2":0.9316596931659694,"3":0.8955223880597014,"1":0.9654605263157895},"class_precision":{"2":0.9277777777777778,"3":0.8108108108108109,"1":0.9734660033167496},"class_recall":{"2":0.9355742296918768,"3":1.0,"1":0.9575856443719413}}
[ Info: ===== scores for 9: {"micro_f1":0.952,"precision":0.952,"recall":0.952,"macro_recall":0.9653203315039991,"macro_f1":0.9316417214682003,"accuracy":0.952,"class_f1":{"2":0.9331476323119777,"3":0.8955223880597014,"1":0.9662551440329217},"class_precision":{"2":0.9279778393351801,"3":0.8108108108108109,"1":0.9750830564784053},"class_recall":{"2":0.938375350140056,"3":1.0,"1":0.9575856443719413}}
[ Info: ===== scores for 11: {"micro_f1":0.9500000000000001,"precision":0.95,"recall":0.95,"macro_recall":0.963842850897836,"macro_f1":0.9220422799138542,"accuracy":0.95,"class_f1":{"2":0.9303621169916434,"3":0.8695652173913044,"1":0.966199505358615},"class_precision":{"2":0.925207756232687,"3":0.7692307692307693,"1":0.9766666666666667},"class_recall":{"2":0.9355742296918768,"3":1.0,"1":0.9559543230016313}}
(score = 0.961, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.962, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.962, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.956, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.956, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.957, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.957, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.959, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.959, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.957, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.957, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.954, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.954, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.951, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.951, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.962,"k":1,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.962,"precision":0.962,"recall":0.962,"macro_recall":0.9723178015088579,"macro_f1":0.9348697542821892,"accuracy":0.962,"class_f1":{"2":0.946927374301676,"3":0.8823529411764706,"1":0.975328947368421},"class_precision":{"2":0.9442896935933147,"3":0.7894736842105263,"1":0.9834162520729685},"class_recall":{"2":0.9495798319327731,"3":1.0,"1":0.967373572593801}}
Test Summary: | Pass  Total
AKNC          |    8      8
[40, 7, 2, 1, 1, 3, 1, 8, 7, 3, 5, 26, 1, 2, 5, 2, 5, 21, 33, 12, 5, 8, 30, 7, 45, 4, 2, 4, 34, 12, 3, 3, 5, 11, 40, 30, 14, 21, 6, 1, 34, 1, 3, 11, 17, 50, 48, 8, 12, 17, 9, 2, 25, 19, 30, 2, 7, 8, 1, 35, 13, 35, 3, 16, 22, 5, 5, 14, 1, 11, 5, 22, 19, 8, 14, 24, 33, 4, 45, 6, 1616, 19, 15, 45, 9, 13, 4, 22, 3, 50, 13, 16, 9, 39, 19, 48, 3, 22, 1, 5, 13, 5, 15, 11, 27, 1, 7, 44, 1, 34, 7, 16, 4, 44, 3, 5, 3, 7, 18, 28, 7, 9, 100, 18, 3, 4, 5, 174, 35, 22, 20, 2, 95, 18, 9, 62, 5, 24, 8, 6, 29, 8, 9, 5, 16, 67, 33, 10, 12, 3, 22, 34, 18, 4, 36, 5, 40, 35, 6, 36, 17, 1, 39, 14, 51, 25, 5, 6, 39, 5, 33, 106, 21, 29, 35, 40, 45, 39, 22, 15, 48, 50, 26, 21, 37, 14, 153, 16, 17, 19, 8, 35, 6, 4, 38, 25, 6, 8, 10, 10, 11, 4, 30, 8, 119, 64, 18, 14, 35, 18, 2, 35, 13, 18, 55, 12, 162, 290, 15, 25, 3, 20, 2, 76, 33, 112, 8, 22, 27, 32, 11, 151, 10, 18, 11, 3, 5, 74, 36, 7, 98, 12, 46, 18, 39, 2, 12, 24, 80, 63, 13, 38, 3, 18, 6, 61, 3, 202, 38, 184, 21, 11, 17, 93, 30, 61, 9, 5, 42, 9, 5, 9, 29, 287, 53, 19, 23, 25, 85, 22, 70, 21, 20, 14, 58, 20, 13, 21, 1, 2, 16, 9, 90, 13, 11, 14, 10, 16, 243, 344]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.684, speedup = 0.2951500794762846, eval_ratio = 0.12573499999999999)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.4440414186507938,"recall":0.43402777777777796,"f1":null,"seconds":0.00034866854548454285,"exhaustive_search_seconds":0.00041800737380981445,"evaluations":676.828125,"distances_sum":1698.7715798069662}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5902777777777775,"recall":0.5902777777777775,"f1":null,"seconds":0.0005502421408891678,"exhaustive_search_seconds":0.00041800737380981445,"evaluations":947.3984375,"distances_sum":1634.8892393504584}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.7005208333333328,"recall":0.7005208333333328,"f1":null,"seconds":0.0007651671767234802,"exhaustive_search_seconds":0.00041800737380981445,"evaluations":1156.109375,"distances_sum":1576.9112689842789}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7821180555555549,"recall":0.7821180555555549,"f1":null,"seconds":0.0011982005089521408,"exhaustive_search_seconds":0.00041800737380981445,"evaluations":1266.265625,"distances_sum":1547.0809485484915}
KCenters.DeloneInvIndex> reached performance {"precision":0.8324652777777772,"recall":0.8324652777777772,"f1":0.8324652777777772,"seconds":0.0013110004365444183,"exhaustive_search_seconds":0.00041800737380981445,"evaluations":1385.9375,"distances_sum":1529.958571121203}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.799, speedup = 0.34422979329359277, eval_ratio = 0.152166)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
