Julia Version 1.6.0-DEV.8
Commit b828bbc426 (2020-05-08 23:24 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed InvertedIndices ───────────── v1.0.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed KCenters ──────────────────── v0.2.2
  Installed Parsers ───────────────────── v1.0.3
  Installed Tables ────────────────────── v1.0.4
  Installed DataStructures ────────────── v0.17.15
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed MLDataPattern ─────────────── v0.5.3
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Missings ──────────────────── v0.4.3
  Installed Reexport ──────────────────── v0.2.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed Compat ────────────────────── v3.9.1
  Installed TableTraits ───────────────── v1.0.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed DataFrames ────────────────── v0.20.2
  Installed SimilaritySearch ──────────── v0.3.19
  Installed DataAPI ───────────────────── v1.3.0
  Installed OrderedCollections ────────── v1.2.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed JSON ──────────────────────── v0.21.0
  Installed StatsBase ─────────────────── v0.32.2
  Installed MLDataUtils ───────────────── v0.5.1
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.9.1
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.15
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.3
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_INbvrI/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_INbvrI/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.9.1
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.15
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.3
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9316620069742203
[ Info: 0.8326150393486023
[ Info: 0.555438105414311
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.34152678986390433
mean(cdnet.distances) = 0.36307851751645404
mean(crand.distances) = 0.32854701307912665
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3955078125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3955078125,"f1":null,"seconds":4.837289452552795e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":6.90625,"distances_sum":1163.566246497236}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.658203125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.658203125,"f1":0.7850030178155186,"seconds":5.859881639480591e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":7.640625,"distances_sum":1972.420931004976}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.658203125,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.658203125,"f1":0.7850030178155186,"seconds":5.859881639480591e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":7.640625,"distances_sum":1972.420931004976}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.9106518481518491,"seconds":8.27014446258545e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.8984375,"distances_sum":2823.914998296888}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.666015625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.666015625,"f1":0.7894837801087811,"seconds":6.057322025299072e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":7.7734375,"distances_sum":2066.247673571194}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.905013736263737,"seconds":6.891787052154541e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.96875,"distances_sum":2765.0853962745387}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6923828125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6923828125,"f1":0.8104692182817191,"seconds":5.990266799926758e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":7.7890625,"distances_sum":2123.7196126045583}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7470703125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7470703125,"f1":0.8477912712287721,"seconds":6.649643182754517e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.671875,"distances_sum":2406.997665375597}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8447265625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8447265625,"f1":0.9106518481518491,"seconds":8.27014446258545e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.8984375,"distances_sum":2823.914998296888}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9740155677655681,"seconds":7.64802098274231e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.9765625,"distances_sum":3411.20095240817}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.86328125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.86328125,"f1":0.920269834332335,"seconds":7.228925824165344e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.8984375,"distances_sum":2928.6784414860613}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9275386072261081,"seconds":7.355585694313049e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.8671875,"distances_sum":2989.017354485641}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9349587912087919,"seconds":7.202848792076111e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.984375,"distances_sum":3037.2817428911726}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9687557234432238,"seconds":7.510185241699219e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.9453125,"distances_sum":3382.383566513255}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9587625915750919,"seconds":7.646158337593079e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.953125,"distances_sum":3283.893052750053}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9740155677655681,"seconds":7.64802098274231e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.9765625,"distances_sum":3411.20095240817}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9740155677655681,"seconds":7.64802098274231e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.9765625,"distances_sum":3411.20095240817}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8667618839493847,"seconds":6.670132279396057e-6,"exhaustive_search_seconds":1.819804310798645e-6,"evaluations":8.328125,"distances_sum":2371.4794084760038}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.201171875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.201171875,"f1":null,"seconds":4.291534423828125e-6,"exhaustive_search_seconds":1.819804310798645e-6,"evaluations":5.9453125,"distances_sum":581.4671350148875}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7802734375,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7802734375,"f1":0.8667618839493847,"seconds":6.670132279396057e-6,"exhaustive_search_seconds":1.819804310798645e-6,"evaluations":8.328125,"distances_sum":2371.4794084760038}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.951342407592408,"seconds":7.212162017822266e-6,"exhaustive_search_seconds":1.819804310798645e-6,"evaluations":8.7109375,"distances_sum":3090.4957548841126}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9555116758241763,"seconds":7.292255759239197e-6,"exhaustive_search_seconds":1.819804310798645e-6,"evaluations":8.7265625,"distances_sum":3111.0217504640864}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9555116758241763,"seconds":7.292255759239197e-6,"exhaustive_search_seconds":1.819804310798645e-6,"evaluations":8.7265625,"distances_sum":3111.0217504640864}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":7,"bsize":12}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9755208333333337,"seconds":7.74674117565155e-6,"exhaustive_search_seconds":1.819804310798645e-6,"evaluations":8.90625,"distances_sum":3234.6446562973156}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9599416208791215,"seconds":6.9160014390945435e-6,"exhaustive_search_seconds":1.819804310798645e-6,"evaluations":8.8125,"distances_sum":3159.677244022325}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9629178113553118,"seconds":7.288530468940735e-6,"exhaustive_search_seconds":1.819804310798645e-6,"evaluations":8.8515625,"distances_sum":3173.8716280052845}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9714114010989016,"seconds":7.212162017822266e-6,"exhaustive_search_seconds":1.819804310798645e-6,"evaluations":8.875,"distances_sum":3213.513130003611}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9755208333333337,"seconds":7.74674117565155e-6,"exhaustive_search_seconds":1.819804310798645e-6,"evaluations":8.90625,"distances_sum":3234.6446562973156}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9755208333333337,"seconds":7.74674117565155e-6,"exhaustive_search_seconds":1.819804310798645e-6,"evaluations":8.90625,"distances_sum":3234.6446562973156}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8496950965700973,"seconds":6.154179573059082e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.484375,"distances_sum":2133.91736169149}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.673828125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.673828125,"f1":0.7946194430569438,"seconds":5.7853758335113525e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":7.515625,"distances_sum":1802.0614523127767}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4072265625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4072265625,"f1":null,"seconds":4.557892680168152e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":6.6015625,"distances_sum":990.490550426911}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.75,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.75,"f1":0.8496950965700973,"seconds":6.154179573059082e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.484375,"distances_sum":2133.91736169149}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.9261707042957051,"seconds":6.94766640663147e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.6328125,"distances_sum":2624.8969562638013}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9329701548451553,"seconds":6.757676601409912e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.71875,"distances_sum":2678.8815437155663}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9361352189477193,"seconds":6.815418601036072e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.65625,"distances_sum":2736.586582269794}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8896484375,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.8896484375,"f1":0.9361352189477193,"seconds":6.815418601036072e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.65625,"distances_sum":2736.586582269794}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9750000000000002,"seconds":7.413327693939209e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.953125,"distances_sum":3034.1508436518543}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9439445970695974,"seconds":6.882473826408386e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.875,"distances_sum":2804.607448144659}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9679544413919419,"seconds":7.0463865995407104e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.921875,"distances_sum":2981.146359290085}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9618532509157511,"seconds":6.923452019691467e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.9140625,"distances_sum":2927.8973415110268}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9750000000000002,"seconds":7.413327693939209e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.953125,"distances_sum":3034.1508436518543}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9750000000000002,"seconds":7.413327693939209e-6,"exhaustive_search_seconds":1.7900019884109497e-6,"evaluations":8.953125,"distances_sum":3034.1508436518543}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4267578125, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.4267578125,"f1":null,"seconds":4.649162292480469e-6,"exhaustive_search_seconds":1.6577541828155518e-6,"evaluations":6.5546875,"distances_sum":1099.368476384359}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4296875, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.4296875,"f1":null,"seconds":4.6156346797943115e-6,"exhaustive_search_seconds":1.6577541828155518e-6,"evaluations":6.4765625,"distances_sum":1120.69882386483}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.8541843573093582,"seconds":6.271526217460632e-6,"exhaustive_search_seconds":1.6577541828155518e-6,"evaluations":8.125,"distances_sum":2242.7689646110002}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7568359375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7568359375,"f1":0.8541843573093582,"seconds":6.271526217460632e-6,"exhaustive_search_seconds":1.6577541828155518e-6,"evaluations":8.125,"distances_sum":2242.7689646110002}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9608115842490846,"seconds":6.9141387939453125e-6,"exhaustive_search_seconds":1.6577541828155518e-6,"evaluations":8.8125,"distances_sum":3026.604792911421}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9638450091575095,"seconds":6.861984729766846e-6,"exhaustive_search_seconds":1.6577541828155518e-6,"evaluations":8.796875,"distances_sum":3067.8686008431873}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9638450091575095,"seconds":6.861984729766846e-6,"exhaustive_search_seconds":1.6577541828155518e-6,"evaluations":8.796875,"distances_sum":3067.8686008431873}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.974261675824176,"seconds":7.309019565582275e-6,"exhaustive_search_seconds":1.6577541828155518e-6,"evaluations":8.8828125,"distances_sum":3149.0653168267536}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9660370879120884,"seconds":6.880611181259155e-6,"exhaustive_search_seconds":1.6577541828155518e-6,"evaluations":8.8515625,"distances_sum":3066.1935419233782}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9786286630036631,"seconds":7.038936018943787e-6,"exhaustive_search_seconds":1.6577541828155518e-6,"evaluations":8.9453125,"distances_sum":3166.7355153400003}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9609375,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9786286630036631,"seconds":7.038936018943787e-6,"exhaustive_search_seconds":1.6577541828155518e-6,"evaluations":8.9453125,"distances_sum":3166.7355153400003}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9609375,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9786286630036631,"seconds":7.038936018943787e-6,"exhaustive_search_seconds":1.6577541828155518e-6,"evaluations":8.9453125,"distances_sum":3166.7355153400003}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.169921875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.169921875,"f1":null,"seconds":3.725290298461914e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":4.9375,"distances_sum":479.0090723662812}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.15625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.15625,"f1":null,"seconds":3.6172568798065186e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":4.6875,"distances_sum":415.453820248375}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7255859375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7255859375,"f1":0.8310876623376632,"seconds":5.6140124797821045e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.640625,"distances_sum":2168.609176639193}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7255859375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7255859375,"f1":0.8310876623376632,"seconds":5.6140124797821045e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.640625,"distances_sum":2168.609176639193}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.8553092740592749,"seconds":5.895271897315979e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.9375,"distances_sum":2316.3737471883774}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.810546875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.810546875,"f1":0.8888798701298709,"seconds":5.8766454458236694e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.8984375,"distances_sum":2555.7409758879544}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.802734375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.802734375,"f1":0.8844410797535806,"seconds":6.083399057388306e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.9609375,"distances_sum":2520.5002828851857}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.810546875,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.810546875,"f1":0.8888798701298709,"seconds":5.8766454458236694e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.8984375,"distances_sum":2555.7409758879544}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9320486804861811,"seconds":6.152316927909851e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.4609375,"distances_sum":2970.7719871157096}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9587454212454216,"seconds":6.2622129917144775e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.765625,"distances_sum":3122.5451236375925}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.928379953379954,"seconds":6.321817636489868e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.3984375,"distances_sum":2860.670605947033}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9214743589743596,"seconds":6.226822733879089e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.34375,"distances_sum":2832.377458529719}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9364468864468869,"seconds":6.3516199588775635e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.546875,"distances_sum":2967.7079074274548}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.857421875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.857421875,"f1":0.9170761530136536,"seconds":6.193295121192932e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.28125,"distances_sum":2808.6240528011444}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9587454212454216,"seconds":6.2622129917144775e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.765625,"distances_sum":3122.5451236375925}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.92578125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9587454212454216,"seconds":6.2622129917144775e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.765625,"distances_sum":3122.5451236375925}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4013671875, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.4013671875,"f1":null,"seconds":4.2263418436050415e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":5.6875,"distances_sum":788.21142880295}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4248046875, conf: {"ssize":1,"bsize":2}, perf: {"precision":1.0,"recall":0.4248046875,"f1":0.5681450493950494,"seconds":4.192814230918884e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":5.9921875,"distances_sum":852.5723211847687}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2578125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2578125,"f1":null,"seconds":4.015862941741943e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":6.1171875,"distances_sum":534.9823448895814}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4248046875,"state":{"ssize":1,"bsize":2},"perf":{"precision":1.0,"recall":0.4248046875,"f1":0.5681450493950494,"seconds":4.192814230918884e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":5.9921875,"distances_sum":852.5723211847687}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6416015625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6416015625,"f1":0.7701397560772569,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":7.203125,"distances_sum":1333.0057168143742}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8576730561105569,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":7.9609375,"distances_sum":1703.0851159918295}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.8642414876789886,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":8.0,"distances_sum":1731.0050206115563}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7734375,"f1":0.8642414876789886,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":8.0,"distances_sum":1731.0050206115563}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8684128371628382,"seconds":5.651265382766724e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":8.046875,"distances_sum":1762.319147066093}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8674710705960713,"seconds":5.718320608139038e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":7.96875,"distances_sum":1730.9839612091341}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9542639652014655,"seconds":6.57886266708374e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":8.75,"distances_sum":2320.9282435001364}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.8917041292041301,"seconds":6.016343832015991e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":8.2890625,"distances_sum":1908.5416644415018}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8212890625,"f1":0.8951381951381958,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":8.3359375,"distances_sum":1960.0190916975941}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9542639652014655,"seconds":6.57886266708374e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":8.75,"distances_sum":2320.9282435001364}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9189453125,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9542639652014655,"seconds":6.57886266708374e-6,"exhaustive_search_seconds":1.6633421182632446e-6,"evaluations":8.75,"distances_sum":2320.9282435001364}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.646484375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.646484375,"f1":0.7751025016650024,"seconds":5.187466740608215e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":7.1171875,"distances_sum":1413.845371330067}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.646484375,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.646484375,"f1":0.7751025016650024,"seconds":5.187466740608215e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":7.1171875,"distances_sum":1413.845371330067}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8115234375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8115234375,"f1":0.8890833125208134,"seconds":6.113201379776001e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.3359375,"distances_sum":1996.1594020695602}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8046875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8046875,"f1":0.8853136446886455,"seconds":5.912035703659058e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.375,"distances_sum":1927.706505564639}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8115234375,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.8115234375,"f1":0.8890833125208134,"seconds":6.113201379776001e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.3359375,"distances_sum":1996.1594020695602}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9397035256410261,"seconds":6.459653377532959e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.5859375,"distances_sum":2343.559271087941}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9637133699633703,"seconds":6.368383765220642e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.875,"distances_sum":2451.1114582416976}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9700148809523814,"seconds":6.387010216712952e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.9453125,"distances_sum":2470.3856883506837}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9413034881784887,"seconds":6.3050538301467896e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.671875,"distances_sum":2332.0650385643244}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9254807692307699,"seconds":6.427988409996033e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.6328125,"distances_sum":2236.2887949397896}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.857421875, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.857421875,"f1":0.9169960248085255,"seconds":6.573274731636047e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.5703125,"distances_sum":2161.788212291218}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9453125,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9700148809523814,"seconds":6.387010216712952e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.9453125,"distances_sum":2470.3856883506837}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9453125,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9700148809523814,"seconds":6.387010216712952e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.9453125,"distances_sum":2470.3856883506837}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4130859375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4130859375,"f1":null,"seconds":4.624947905540466e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":5.921875,"distances_sum":892.8679957480308}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4130859375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.4130859375,"f1":null,"seconds":4.624947905540466e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":5.921875,"distances_sum":892.8679957480308}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5732421875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5732421875,"f1":null,"seconds":4.868954420089722e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":6.71875,"distances_sum":1281.5473131897588}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.67578125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.67578125,"f1":0.7938120906870915,"seconds":5.347654223442078e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":7.3671875,"distances_sum":1542.142300324142}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.67578125,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.67578125,"f1":0.7938120906870915,"seconds":5.347654223442078e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":7.3671875,"distances_sum":1542.142300324142}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9398580586080594,"seconds":6.496906280517578e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.7734375,"distances_sum":2393.450359836416}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.798828125, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.798828125,"f1":0.8814565642690649,"seconds":6.336718797683716e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.3515625,"distances_sum":2007.9974919901063}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8596908300033309,"seconds":5.885958671569824e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":7.796875,"distances_sum":1869.3094188869948}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.89453125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.89453125,"f1":0.9398580586080594,"seconds":6.496906280517578e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.7734375,"distances_sum":2393.450359836416}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.89453125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.89453125,"f1":0.9398580586080594,"seconds":6.496906280517578e-6,"exhaustive_search_seconds":1.383945345878601e-6,"evaluations":8.7734375,"distances_sum":2393.450359836416}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.58984375, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.58984375,"f1":0.728979874292375,"seconds":4.947185516357422e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":6.8203125,"distances_sum":1226.6946735981837}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.58984375,"state":{"ssize":3,"bsize":3},"perf":{"precision":1.0,"recall":0.58984375,"f1":0.728979874292375,"seconds":4.947185516357422e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":6.8203125,"distances_sum":1226.6946735981837}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6513671875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6513671875,"f1":0.776385073260074,"seconds":5.474314093589783e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.359375,"distances_sum":1397.9334562385088}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6513671875,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6513671875,"f1":0.776385073260074,"seconds":5.474314093589783e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.359375,"distances_sum":1397.9334562385088}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9476278929403934,"seconds":6.690621376037598e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.828125,"distances_sum":2329.7144330061133}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8076171875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8076171875,"f1":0.8883902555777563,"seconds":6.550922989845276e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.4140625,"distances_sum":1947.4380963447122}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8677291458541468,"seconds":5.925074219703674e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.75,"distances_sum":1829.891778899483}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8706819222444232,"seconds":5.932524800300598e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.7734375,"distances_sum":1817.1337885408568}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7900390625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7900390625,"f1":0.8768002830502839,"seconds":5.908310413360596e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.875,"distances_sum":1840.3010754494405}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.671875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.671875,"f1":0.7951850233100242,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":7.3984375,"distances_sum":1464.2676937018073}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.908203125,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9476278929403934,"seconds":6.690621376037598e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.828125,"distances_sum":2329.7144330061133}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.908203125,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9476278929403934,"seconds":6.690621376037598e-6,"exhaustive_search_seconds":1.6558915376663208e-6,"evaluations":8.828125,"distances_sum":2329.7144330061133}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.572265625, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.572265625,"f1":0.7123942030192035,"seconds":5.217269062995911e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":6.90625,"distances_sum":1249.0429290109614}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4296875, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.4296875,"f1":null,"seconds":4.248693585395813e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":6.15625,"distances_sum":933.6291407678801}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8665412712287722,"seconds":5.755573511123657e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":7.734375,"distances_sum":1889.81875051494}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7763671875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7763671875,"f1":0.8665412712287722,"seconds":5.755573511123657e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":7.734375,"distances_sum":1889.81875051494}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8984921328671336,"seconds":6.284564733505249e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.53125,"distances_sum":2066.47830024828}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9539491758241763,"seconds":6.6105276346206665e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.71875,"distances_sum":2493.316639069959}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9539491758241763,"seconds":6.6105276346206665e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.71875,"distances_sum":2493.316639069959}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.967839972527473,"seconds":6.685033440589905e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.8515625,"distances_sum":2530.7126130937727}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.967839972527473,"seconds":6.685033440589905e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.8515625,"distances_sum":2530.7126130937727}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.967839972527473,"seconds":6.685033440589905e-6,"exhaustive_search_seconds":1.5795230865478516e-6,"evaluations":8.8515625,"distances_sum":2530.7126130937727}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8458775599400609,"seconds":5.898997187614441e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":7.8203125,"distances_sum":1837.8660137191187}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3564453125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3564453125,"f1":null,"seconds":3.883615136146545e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":5.1640625,"distances_sum":802.4805056138548}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.75,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.75,"f1":0.8458775599400609,"seconds":5.898997187614441e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":7.8203125,"distances_sum":1837.8660137191187}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8388671875,"f1":0.9048935439560447,"seconds":6.252899765968323e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.390625,"distances_sum":2159.3302330650513}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8388671875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8388671875,"f1":0.9048935439560447,"seconds":6.252899765968323e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.390625,"distances_sum":2159.3302330650513}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9399095695970701,"seconds":6.841495633125305e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.625,"distances_sum":2412.409473863277}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9459420787545793,"seconds":6.165355443954468e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.671875,"distances_sum":2423.570432858633}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9522524350649356,"seconds":6.336718797683716e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.7578125,"distances_sum":2443.517385971776}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9150390625,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.9522524350649356,"seconds":6.336718797683716e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.7578125,"distances_sum":2443.517385971776}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9150390625,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.9522524350649356,"seconds":6.336718797683716e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.7578125,"distances_sum":2443.517385971776}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3564453125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3564453125,"f1":null,"seconds":4.198402166366577e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":5.5859375,"distances_sum":763.4863604805106}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.662109375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.662109375,"f1":0.7831460206460212,"seconds":5.448237061500549e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":7.5703125,"distances_sum":1528.461095812264}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.240234375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.240234375,"f1":null,"seconds":4.025176167488098e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":5.40625,"distances_sum":546.600977099219}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.662109375,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.662109375,"f1":0.7831460206460212,"seconds":5.448237061500549e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":7.5703125,"distances_sum":1528.461095812264}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8613634629259638,"seconds":5.804002285003662e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.28125,"distances_sum":1817.429650213406}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7998046875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.7998046875,"f1":0.8798971861471869,"seconds":6.197020411491394e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.8125,"distances_sum":1912.2371106323806}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8976424617049625,"seconds":6.692484021186829e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.859375,"distances_sum":2004.6391945817443}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8251953125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8251953125,"f1":0.8976424617049625,"seconds":6.692484021186829e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.859375,"distances_sum":2004.6391945817443}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9425855394605399,"seconds":6.545335054397583e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.7421875,"distances_sum":2362.1697103372353}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9647722069597073,"seconds":6.763264536857605e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.875,"distances_sum":2477.3183021370787}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9383642399267403,"seconds":6.256625056266785e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.8203125,"distances_sum":2297.524322643247}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9647722069597073,"seconds":6.763264536857605e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.875,"distances_sum":2477.3183021370787}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9647722069597073,"seconds":6.763264536857605e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.875,"distances_sum":2477.3183021370787}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5498046875, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5498046875,"f1":0.6951407967032974,"seconds":4.755333065986633e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":6.5078125,"distances_sum":1158.7912821693762}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3984375, conf: {"ssize":1,"bsize":2}, perf: {"precision":1.0,"recall":0.3984375,"f1":0.5474169927294926,"seconds":4.038214683532715e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":5.625,"distances_sum":863.6696596805112}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5498046875,"state":{"ssize":2,"bsize":3},"perf":{"precision":1.0,"recall":0.5498046875,"f1":0.6951407967032974,"seconds":4.755333065986633e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":6.5078125,"distances_sum":1158.7912821693762}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9332703754578762,"seconds":6.562098860740662e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.8515625,"distances_sum":2255.241263049358}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8490369005994014,"seconds":5.966052412986755e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":7.796875,"distances_sum":1739.5880573472652}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.552734375, conf: {"ssize":4,"bsize":3}, perf: {"precision":null,"recall":0.552734375,"f1":null,"seconds":4.854053258895874e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":6.4609375,"distances_sum":1174.0312006188951}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6318359375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6318359375,"f1":0.7657358266733274,"seconds":5.427747964859009e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":7.1953125,"distances_sum":1388.1905309176104}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.8496888528138538,"seconds":5.666166543960571e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":7.8515625,"distances_sum":1739.1903345022122}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.884765625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.884765625,"f1":0.9332703754578762,"seconds":6.562098860740662e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.8515625,"distances_sum":2255.241263049358}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9786114926739927,"seconds":6.876885890960693e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.953125,"distances_sum":2571.7272682816606}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9571657509157513,"seconds":6.658956408500671e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.875,"distances_sum":2432.7732842099254}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9449919871794878,"seconds":6.528571248054504e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.796875,"distances_sum":2376.449326949174}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9609375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9786114926739927,"seconds":6.876885890960693e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.953125,"distances_sum":2571.7272682816606}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9609375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9786114926739927,"seconds":6.876885890960693e-6,"exhaustive_search_seconds":1.5553086996078491e-6,"evaluations":8.953125,"distances_sum":2571.7272682816606}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2060546875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2060546875,"f1":null,"seconds":3.883615136146545e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":5.140625,"distances_sum":504.93263164711254}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2041015625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2041015625,"f1":null,"seconds":3.900378942489624e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":5.0703125,"distances_sum":457.32494557514553}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2060546875,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.2060546875,"f1":null,"seconds":3.883615136146545e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":5.140625,"distances_sum":504.93263164711254}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5078125, conf: {"ssize":6,"bsize":3}, perf: {"precision":null,"recall":0.5078125,"f1":null,"seconds":4.928559064865112e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":6.65625,"distances_sum":1131.710383703783}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.677734375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.677734375,"f1":0.7912615162615171,"seconds":5.412846803665161e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.8125,"distances_sum":1624.8643961901535}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.677734375,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.677734375,"f1":0.7912615162615171,"seconds":5.412846803665161e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.8125,"distances_sum":1624.8643961901535}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9390167124542129,"seconds":6.573274731636047e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.84375,"distances_sum":2349.077644656739}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9258330211455215,"seconds":6.42240047454834e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.7734375,"distances_sum":2245.573498101661}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9363610347985355,"seconds":6.511807441711426e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.7734375,"distances_sum":2347.4604395187453}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":10,"bsize":6}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.900984432234433,"seconds":6.2622129917144775e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.8359375,"distances_sum":2083.5952636467678}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8212890625,"f1":0.8951158216783226,"seconds":6.51925802230835e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.8203125,"distances_sum":2040.8270773205634}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.8992850899100907,"seconds":6.284564733505249e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.8671875,"distances_sum":2064.2771020138866}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8935546875,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8935546875,"f1":0.9390167124542129,"seconds":6.573274731636047e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.84375,"distances_sum":2349.077644656739}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8935546875,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8935546875,"f1":0.9390167124542129,"seconds":6.573274731636047e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.84375,"distances_sum":2349.077644656739}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.630859375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.630859375,"f1":0.7592209873459882,"seconds":5.347654223442078e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.1171875,"distances_sum":1310.1698776383598}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5673828125, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5673828125,"f1":0.7055650946275953,"seconds":4.714354872703552e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":6.515625,"distances_sum":1173.9645194740274}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5498046875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5498046875,"f1":null,"seconds":4.9620866775512695e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":6.5546875,"distances_sum":1118.5278144213512}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.630859375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.630859375,"f1":0.7592209873459882,"seconds":5.347654223442078e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.1171875,"distances_sum":1310.1698776383598}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7451171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7451171875,"f1":0.8453962703962714,"seconds":5.885958671569824e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.09375,"distances_sum":1569.7205457771952}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7431640625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7431640625,"f1":0.8430496586746595,"seconds":6.05359673500061e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.1953125,"distances_sum":1615.385332280521}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9322859432234437,"seconds":6.642192602157593e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.6171875,"distances_sum":2067.9207199809402}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7333984375, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7333984375,"f1":0.8401301823176832,"seconds":5.908310413360596e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.0703125,"distances_sum":1564.5954325129426}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8966663544788551,"seconds":6.644055247306824e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.28125,"distances_sum":1895.7554361635769}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9544871794871802,"seconds":6.865710020065308e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.703125,"distances_sum":2198.469396281747}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9544871794871802,"seconds":6.865710020065308e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.703125,"distances_sum":2198.469396281747}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.962688873626374,"seconds":6.927177309989929e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.875,"distances_sum":2223.7279143585815}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9720638736263738,"seconds":7.072463631629944e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.9375,"distances_sum":2294.6192497007214}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9720638736263738,"seconds":7.072463631629944e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.9375,"distances_sum":2294.6192497007214}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9720638736263738,"seconds":7.072463631629944e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.9375,"distances_sum":2294.6192497007214}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7890625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7890625,"f1":0.872615752303253,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.09375,"distances_sum":1696.751086750377}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7890625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7890625,"f1":0.872615752303253,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.09375,"distances_sum":1696.751086750377}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9424393315018319,"seconds":6.580725312232971e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.6875,"distances_sum":2103.504050106496}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8251953125, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8251953125,"f1":0.8967261904761911,"seconds":6.381422281265259e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.390625,"distances_sum":1818.577847340596}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8994140625,"state":{"ssize":8,"bsize":8},"perf":{"precision":1.0,"recall":0.8994140625,"f1":0.9424393315018319,"seconds":6.580725312232971e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.6875,"distances_sum":2103.504050106496}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9694425366300369,"seconds":6.6366046667099e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.8203125,"distances_sum":2283.843481658884}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9453125,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9694425366300369,"seconds":6.6366046667099e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.8203125,"distances_sum":2283.843481658884}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9453125,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9694425366300369,"seconds":6.6366046667099e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":8.8203125,"distances_sum":2283.843481658884}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7197265625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.7197265625,"f1":0.8282533438783446,"seconds":5.638226866722107e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.765625,"distances_sum":1486.8921275335576}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7197265625,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.7197265625,"f1":0.8282533438783446,"seconds":5.638226866722107e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.765625,"distances_sum":1486.8921275335576}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.954510073260074,"seconds":6.532296538352966e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.8203125,"distances_sum":2221.491643643999}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.954510073260074,"seconds":6.532296538352966e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.8203125,"distances_sum":2221.491643643999}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.967078754578755,"seconds":6.848946213722229e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.875,"distances_sum":2305.1736686774925}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9754464285714289,"seconds":6.979331374168396e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.9375,"distances_sum":2316.2557351135765}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9754464285714289,"seconds":6.979331374168396e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.9375,"distances_sum":2316.2557351135765}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9754464285714289,"seconds":6.979331374168396e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.9375,"distances_sum":2316.2557351135765}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8696223914973922,"seconds":5.971640348434448e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.984375,"distances_sum":1791.3064233775613}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5771484375, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5771484375,"f1":0.7148698523698529,"seconds":4.92483377456665e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.265625,"distances_sum":1173.4004994471218}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4296875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4296875,"f1":null,"seconds":4.544854164123535e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":6.75,"distances_sum":906.4898652183311}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78515625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.78515625,"f1":0.8696223914973922,"seconds":5.971640348434448e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.984375,"distances_sum":1791.3064233775613}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8388671875,"f1":0.9031223984348992,"seconds":6.32554292678833e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.4609375,"distances_sum":1995.9476902537651}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.8916958041958047,"seconds":6.239861249923706e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.3515625,"distances_sum":1905.6961106409146}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9446116383616386,"seconds":6.3050538301467896e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.703125,"distances_sum":2282.108557282488}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9317651098901107,"seconds":6.46151602268219e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.6640625,"distances_sum":2142.5296856051987}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9052734375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9052734375,"f1":0.9446116383616386,"seconds":6.3050538301467896e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.703125,"distances_sum":2282.108557282488}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9740899725274729,"seconds":6.984919309616089e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.921875,"distances_sum":2402.4736149347646}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9734775641025644,"seconds":6.7837536334991455e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.9140625,"distances_sum":2404.0753810331016}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9736435439560442,"seconds":6.815418601036072e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.921875,"distances_sum":2403.779650175583}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9475560897435904,"seconds":6.509944796562195e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.71875,"distances_sum":2265.108114415032}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9485061813186817,"seconds":6.621703505516052e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.7890625,"distances_sum":2274.737315249071}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9716346153846158,"seconds":7.117167115211487e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.9375,"distances_sum":2391.400968103097}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9516826923076928,"seconds":6.441026926040649e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.84375,"distances_sum":2287.245639720772}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9684180402930406,"seconds":6.891787052154541e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8984375,"distances_sum":2371.7711360925637}, best_list's length: 16, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9740899725274729,"seconds":6.984919309616089e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.921875,"distances_sum":2402.4736149347646}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9740899725274729,"seconds":6.984919309616089e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.921875,"distances_sum":2402.4736149347646}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.677734375, conf: {"ssize":1,"bsize":4}, perf: {"precision":null,"recall":0.677734375,"f1":null,"seconds":5.276873707771301e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":7.4765625,"distances_sum":1414.3504745244427}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.8697151806526814,"seconds":5.971640348434448e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.03125,"distances_sum":1726.2867694258778}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3984375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3984375,"f1":null,"seconds":4.43682074546814e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":6.6171875,"distances_sum":803.5205321216123}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.78125,"f1":0.8697151806526814,"seconds":5.971640348434448e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.03125,"distances_sum":1726.2867694258778}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9069914460539467,"seconds":6.336718797683716e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.3671875,"distances_sum":1915.2382407105974}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9301084332334338,"seconds":6.677582859992981e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.6484375,"distances_sum":2072.1326332366857}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9446517024642027,"seconds":6.504356861114502e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.7421875,"distances_sum":2197.1718431273425}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9072265625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.9446517024642027,"seconds":6.504356861114502e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.7421875,"distances_sum":2197.1718431273425}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.963919413919414,"seconds":7.035210728645325e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.8828125,"distances_sum":2281.4968113569776}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9649241383616389,"seconds":6.817281246185303e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.84375,"distances_sum":2313.2808527269312}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9577953296703302,"seconds":6.640329957008362e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.8359375,"distances_sum":2251.501039383759}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9690705128205132,"seconds":7.204711437225342e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.8671875,"distances_sum":2312.2414848583794}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9690705128205132,"seconds":7.204711437225342e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.8671875,"distances_sum":2312.2414848583794}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9690705128205132,"seconds":7.204711437225342e-6,"exhaustive_search_seconds":1.5087425708770752e-6,"evaluations":8.8671875,"distances_sum":2312.2414848583794}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5634765625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5634765625,"f1":null,"seconds":5.209818482398987e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.0390625,"distances_sum":1123.3150517957345}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.67578125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.67578125,"f1":0.7946652306027315,"seconds":5.289912223815918e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.390625,"distances_sum":1365.9600095581197}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.67578125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.67578125,"f1":0.7946652306027315,"seconds":5.289912223815918e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.390625,"distances_sum":1365.9600095581197}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8310546875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8310546875,"f1":0.8996451465201472,"seconds":6.373971700668335e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.3984375,"distances_sum":1880.8055510685963}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9380723443223449,"seconds":6.893649697303772e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.6484375,"distances_sum":2110.74180506758}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.86328125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.86328125,"f1":0.9209592490842496,"seconds":6.360933184623718e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.53125,"distances_sum":2033.7067684879878}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7001953125, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.7001953125,"f1":0.8136295995671003,"seconds":5.574896931648254e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.5234375,"distances_sum":1421.0378360822513}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8604681776556783,"seconds":5.798414349555969e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.9453125,"distances_sum":1661.8807611439631}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8916015625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8916015625,"f1":0.9380723443223449,"seconds":6.893649697303772e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.6484375,"distances_sum":2110.74180506758}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.9779761904761908,"seconds":6.9122761487960815e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.96875,"distances_sum":2356.1006215494763}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.955271291208792,"seconds":6.627291440963745e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.8125,"distances_sum":2231.985429737077}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9571142399267404,"seconds":6.755813956260681e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.828125,"distances_sum":2221.7069568284323}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9599609375,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9779761904761908,"seconds":6.9122761487960815e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.96875,"distances_sum":2356.1006215494763}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9599609375,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9779761904761908,"seconds":6.9122761487960815e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.96875,"distances_sum":2356.1006215494763}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5478515625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5478515625,"f1":0.6819073287823292,"seconds":5.146488547325134e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":6.8203125,"distances_sum":1160.2079421705268}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75390625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.75390625,"f1":0.8498038419913428,"seconds":6.012618541717529e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.09375,"distances_sum":1686.7459907724246}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.75390625,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.75390625,"f1":0.8498038419913428,"seconds":6.012618541717529e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.09375,"distances_sum":1686.7459907724246}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9495821886446891,"seconds":6.446614861488342e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.7734375,"distances_sum":2235.0257926582203}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8125,"f1":0.8850711788211794,"seconds":6.051734089851379e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.34375,"distances_sum":1886.2354956000595}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.9276327838827847,"seconds":6.36465847492218e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.6484375,"distances_sum":2131.8169928661514}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8125,"f1":0.8864052614052623,"seconds":6.202608346939087e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.4375,"distances_sum":1858.5253349391917}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9111328125,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9111328125,"f1":0.9495821886446891,"seconds":6.446614861488342e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.7734375,"distances_sum":2235.0257926582203}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9558321886446893,"seconds":6.254762411117554e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.8671875,"distances_sum":2242.2852467552593}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9733459249084253,"seconds":6.813555955886841e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.8984375,"distances_sum":2371.268196966769}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9638671875, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.9638671875,"f1":0.9803399725274727,"seconds":6.755813956260681e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.9296875,"distances_sum":2404.591881682909}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":5,"bsize":12}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9729910714285718,"seconds":6.705522537231445e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.90625,"distances_sum":2359.9155437582695}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9542639652014658,"seconds":6.5248459577560425e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.765625,"distances_sum":2264.2839549854575}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9506581959706962,"seconds":6.571412086486816e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.8125,"distances_sum":2233.7335806184356}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.967210393772894,"seconds":6.603077054023743e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.859375,"distances_sum":2350.2740944094476}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9638671875,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.9803399725274727,"seconds":6.755813956260681e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.9296875,"distances_sum":2404.591881682909}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9638671875,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.9803399725274727,"seconds":6.755813956260681e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.9296875,"distances_sum":2404.591881682909}}, n: 9
mean(cfft.distances) = 0.3383810223787535
mean(cdnet.distances) = 0.40417814961411885
mean(crand.distances) = 0.3501173673073904
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8933333333333334
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9022222222222221
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.851111111111111
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8222222222222223
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.9422222222222222
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9088888888888889
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9400000000000001
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8644444444444445
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8866666666666667
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9044444444444445
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9111111111111111
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.931111111111111
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9266666666666667
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8933333333333334
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.931111111111111
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9133333333333334
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8488888888888888
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8755555555555555
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8755555555555555
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9133333333333334
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9355555555555556
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8711111111111111
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8866666666666667
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9066666666666666
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9088888888888889
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.88
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8911111111111111
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8777777777777778
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8844444444444445
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8955555555555557
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 1, 2, 2, 3, 1, 2, 3, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 1, 2, 2, 3, 1, 2, 3, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 1, 2, 2, 3, 1, 2, 3, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 1, 2, 2, 3, 1, 2, 3, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 1, 2, 2, 3, 1, 2, 3, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 1, 2, 2, 3, 1, 2, 3, 3, 1]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 1, normalized-entropy: 0.2580186686648155, [(2, 22), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 3, 1, 2, 2, 3, 1, 2, 3, 3, 1]
acc = 0.96
*** finished computation of 12 references, err: [Inf, 0.5732726110021273] ***
*** center 1: selecting labels [1] (freq >= 1) [from [41, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 6: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 7]]
** centroid: 9, normalized-entropy: 0.8812908992306927, [(2, 3), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
finished with 15 centroids; started with 12
acc = 0.9333333333333333
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.4197293659126772] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4197293659126772, 0.24352841630057842] ***
*** starting iteration: 2; err: [Inf, 0.4197293659126772, 0.24352841630057842] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4197293659126772, 0.24352841630057842, 0.23288228416776247] ***
*** starting iteration: 3; err: [Inf, 0.4197293659126772, 0.24352841630057842, 0.23288228416776247] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4197293659126772, 0.24352841630057842, 0.23288228416776247, 0.23241532424971037] ***
*** finished computation of 3 references, err: [Inf, 0.4197293659126772, 0.24352841630057842, 0.23288228416776247, 0.23241532424971037] ***
*** center 1: selecting labels [1] (freq >= 2) [from [221, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [126, 67, 0]]
** centroid: 2, normalized-entropy: 0.9314972128035197, [(1, 126), (2, 67)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [71, 165, 16]]
** centroid: 3, normalized-entropy: 0.7365837726437786, [(1, 71), (2, 165), (3, 16)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.337262613898509] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.337262613898509, 0.2501985307565068] ***
*** starting iteration: 2; err: [Inf, 0.337262613898509, 0.2501985307565068] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.337262613898509, 0.2501985307565068, 0.2394829255269039] ***
*** starting iteration: 3; err: [Inf, 0.337262613898509, 0.2501985307565068, 0.2394829255269039] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.337262613898509, 0.2501985307565068, 0.2394829255269039, 0.23746893094849775] ***
*** finished computation of 3 references, err: [Inf, 0.337262613898509, 0.2501985307565068, 0.2394829255269039, 0.23746893094849775] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [107, 166, 16]]
** centroid: 1, normalized-entropy: 0.7705639154268957, [(1, 107), (2, 166), (3, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [203, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [95, 80, 0]]
** centroid: 3, normalized-entropy: 0.9946937953613056, [(1, 95), (2, 80)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4365353603725848] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4365353603725848, 0.28477505145167215] ***
*** starting iteration: 2; err: [Inf, 0.4365353603725848, 0.28477505145167215] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4365353603725848, 0.28477505145167215, 0.26113697992584695] ***
*** starting iteration: 3; err: [Inf, 0.4365353603725848, 0.28477505145167215, 0.26113697992584695] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4365353603725848, 0.28477505145167215, 0.26113697992584695, 0.23934115340578546] ***
*** finished computation of 3 references, err: [Inf, 0.4365353603725848, 0.28477505145167215, 0.26113697992584695, 0.23934115340578546] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [180, 57, 0]]
** centroid: 1, normalized-entropy: 0.7958812735955936, [(1, 180), (2, 57)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [215, 28, 0]]
** centroid: 2, normalized-entropy: 0.5154816374356292, [(1, 215), (2, 28)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 171, 16]]
** centroid: 3, normalized-entropy: 0.42147852381550543, [(2, 171), (3, 16)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2740217199242833] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2740217199242833, 0.204197425167314] ***
*** finished computation of 7 references, err: [Inf, 0.2740217199242833, 0.204197425167314] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [96, 64, 0]]
** centroid: 1, normalized-entropy: 0.9709505944546688, [(1, 96), (2, 64)]
*** center 2: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 40, 16]]
** centroid: 3, normalized-entropy: 0.8631205685666311, [(2, 40), (3, 16)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [59, 32, 0]]
** centroid: 4, normalized-entropy: 0.9355315642388212, [(1, 59), (2, 32)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 63, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [129, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [49, 33, 0]]
** centroid: 7, normalized-entropy: 0.9723594643683989, [(1, 49), (2, 33)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2299313631873561] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2299313631873561, 0.19869211218909763] ***
*** finished computation of 7 references, err: [Inf, 0.2299313631873561, 0.19869211218909763] ***
*** center 1: selecting labels [1] (freq >= 2) [from [94, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [80, 10, 0]]
** centroid: 2, normalized-entropy: 0.5032583347756457, [(1, 80), (2, 10)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [47, 71, 0]]
** centroid: 3, normalized-entropy: 0.9699504941611515, [(1, 47), (2, 71)]
*** center 4: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [29, 67, 0]]
** centroid: 5, normalized-entropy: 0.8838226609360483, [(1, 29), (2, 67)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 97, 16]]
** centroid: 6, normalized-entropy: 0.5883953722191577, [(2, 97), (3, 16)]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2950234244880581] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2950234244880581, 0.2141573360187003] ***
*** finished computation of 7 references, err: [Inf, 0.2950234244880581, 0.2141573360187003] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 96, 16]]
** centroid: 1, normalized-entropy: 0.5916727785823274, [(2, 96), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [123, 76, 0]]
** centroid: 2, normalized-entropy: 0.9593795191444577, [(1, 123), (2, 76)]
*** center 3: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [55, 24, 0]]
** centroid: 4, normalized-entropy: 0.8858834790484443, [(1, 55), (2, 24)]
*** center 5: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [9, 60, 0]]
** centroid: 7, normalized-entropy: 0.5586293734521991, [(1, 9), (2, 60)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24810664983768319] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24810664983768319, 0.23056630533210956] ***
*** starting iteration: 2; err: [Inf, 0.24810664983768319, 0.23056630533210956] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24810664983768319, 0.23056630533210956, 0.2234339087309355] ***
*** starting iteration: 3; err: [Inf, 0.24810664983768319, 0.23056630533210956, 0.2234339087309355] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24810664983768319, 0.23056630533210956, 0.2234339087309355, 0.2184726875855702] ***
*** finished computation of 7 references, err: [Inf, 0.24810664983768319, 0.23056630533210956, 0.2234339087309355, 0.2184726875855702] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [25, 84, 13]]
** centroid: 1, normalized-entropy: 0.7467372748946985, [(1, 25), (2, 84), (3, 13)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [28, 109, 3]]
** centroid: 2, normalized-entropy: 0.5453337926957534, [(1, 28), (2, 109), (3, 3)]
*** center 3: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [39, 37, 0]]
** centroid: 5, normalized-entropy: 0.9995003941817588, [(1, 39), (2, 37)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [86, 2, 0]]
** centroid: 6, normalized-entropy: 0.1564910629057016, [(1, 86), (2, 2)]
*** center 7: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.33698156090227066] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33698156090227066, 0.214015764941083] ***
*** starting iteration: 2; err: [Inf, 0.33698156090227066, 0.214015764941083] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33698156090227066, 0.214015764941083, 0.19256288460853777] ***
*** starting iteration: 3; err: [Inf, 0.33698156090227066, 0.214015764941083, 0.19256288460853777] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33698156090227066, 0.214015764941083, 0.19256288460853777, 0.18687250179753848] ***
*** finished computation of 7 references, err: [Inf, 0.33698156090227066, 0.214015764941083, 0.19256288460853777, 0.18687250179753848] ***
*** center 1: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [8, 88, 0]]
** centroid: 2, normalized-entropy: 0.4138168503036336, [(1, 8), (2, 88)]
*** center 3: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [52, 38, 0]]
** centroid: 4, normalized-entropy: 0.9824740868386409, [(1, 52), (2, 38)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 75, 16]]
** centroid: 5, normalized-entropy: 0.6708561590207726, [(2, 75), (3, 16)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [52, 45, 0]]
** centroid: 6, normalized-entropy: 0.9962401135461777, [(1, 52), (2, 45)]
*** center 7: selecting labels [1] (freq >= 1) [from [110, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2543016368435274] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2543016368435274, 0.1997839589020296] ***
*** starting iteration: 2; err: [Inf, 0.2543016368435274, 0.1997839589020296] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2543016368435274, 0.1997839589020296, 0.19551949905328636] ***
*** starting iteration: 3; err: [Inf, 0.2543016368435274, 0.1997839589020296, 0.19551949905328636] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2543016368435274, 0.1997839589020296, 0.19551949905328636, 0.19434407252728983] ***
*** finished computation of 7 references, err: [Inf, 0.2543016368435274, 0.1997839589020296, 0.19551949905328636, 0.19434407252728983] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 119, 16]]
** centroid: 1, normalized-entropy: 0.5250873464312362, [(2, 119), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [63, 18, 0]]
** centroid: 2, normalized-entropy: 0.7642045065086204, [(1, 63), (2, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [61, 54, 0]]
** centroid: 3, normalized-entropy: 0.9973256795690417, [(1, 61), (2, 54)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [82, 25, 0]]
** centroid: 4, normalized-entropy: 0.7843112002044088, [(1, 82), (2, 25)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [50, 40, 0]]
** centroid: 5, normalized-entropy: 0.9910760598382222, [(1, 50), (2, 40)]
*** center 6: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
finished with 11 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1834776482975541] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1834776482975541, 0.15179799669163507] ***
*** starting iteration: 2; err: [Inf, 0.1834776482975541, 0.15179799669163507] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1834776482975541, 0.15179799669163507, 0.14918269169049803] ***
*** starting iteration: 3; err: [Inf, 0.1834776482975541, 0.15179799669163507, 0.14918269169049803] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1834776482975541, 0.15179799669163507, 0.14918269169049803, 0.14819307187320413] ***
*** finished computation of 7 references, err: [Inf, 0.1834776482975541, 0.15179799669163507, 0.14918269169049803, 0.14819307187320413] ***
*** center 1: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [58, 33, 0]]
** centroid: 2, normalized-entropy: 0.9448506439764089, [(1, 58), (2, 33)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [22, 56, 0]]
** centroid: 3, normalized-entropy: 0.8582307926411409, [(1, 22), (2, 56)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [28, 72, 0]]
** centroid: 4, normalized-entropy: 0.8554508105601307, [(1, 28), (2, 72)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 71, 16]]
** centroid: 5, normalized-entropy: 0.6885521684368613, [(2, 71), (3, 16)]
*** center 6: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.202698817861656] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.202698817861656, 0.16126547202138394] ***
*** starting iteration: 2; err: [Inf, 0.202698817861656, 0.16126547202138394] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.202698817861656, 0.16126547202138394, 0.15478195851728757] ***
*** starting iteration: 3; err: [Inf, 0.202698817861656, 0.16126547202138394, 0.15478195851728757] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.202698817861656, 0.16126547202138394, 0.15478195851728757, 0.15050491703621138] ***
*** starting iteration: 4; err: [Inf, 0.202698817861656, 0.16126547202138394, 0.15478195851728757, 0.15050491703621138] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.202698817861656, 0.16126547202138394, 0.15478195851728757, 0.15050491703621138, 0.14839228937357687] ***
*** starting iteration: 5; err: [Inf, 0.202698817861656, 0.16126547202138394, 0.15478195851728757, 0.15050491703621138, 0.14839228937357687] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.202698817861656, 0.16126547202138394, 0.15478195851728757, 0.15050491703621138, 0.14839228937357687, 0.14736459663171306] ***
*** starting iteration: 6; err: [Inf, 0.202698817861656, 0.16126547202138394, 0.15478195851728757, 0.15050491703621138, 0.14839228937357687, 0.14736459663171306] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.202698817861656, 0.16126547202138394, 0.15478195851728757, 0.15050491703621138, 0.14839228937357687, 0.14736459663171306, 0.14666475954352468] ***
*** finished computation of 7 references, err: [Inf, 0.202698817861656, 0.16126547202138394, 0.15478195851728757, 0.15050491703621138, 0.14839228937357687, 0.14736459663171306, 0.14666475954352468] ***
*** center 1: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 60, 16]]
** centroid: 2, normalized-entropy: 0.7424875695421234, [(2, 60), (3, 16)]
*** center 3: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [44, 45, 0]]
** centroid: 4, normalized-entropy: 0.9999089303498087, [(1, 44), (2, 45)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [18, 76, 0]]
** centroid: 5, normalized-entropy: 0.7045767128725937, [(1, 18), (2, 76)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [5, 65, 0]]
** centroid: 6, normalized-entropy: 0.3712323266408756, [(1, 5), (2, 65)]
*** center 7: selecting labels [1] (freq >= 1) [from [136, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19195492876724324] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19195492876724324, 0.15659932850900551] ***
*** starting iteration: 2; err: [Inf, 0.19195492876724324, 0.15659932850900551] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19195492876724324, 0.15659932850900551, 0.15099959408604668] ***
*** starting iteration: 3; err: [Inf, 0.19195492876724324, 0.15659932850900551, 0.15099959408604668] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19195492876724324, 0.15659932850900551, 0.15099959408604668, 0.14926507632419847] ***
*** starting iteration: 4; err: [Inf, 0.19195492876724324, 0.15659932850900551, 0.15099959408604668, 0.14926507632419847] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19195492876724324, 0.15659932850900551, 0.15099959408604668, 0.14926507632419847, 0.14877200893208808] ***
*** finished computation of 7 references, err: [Inf, 0.19195492876724324, 0.15659932850900551, 0.15099959408604668, 0.14926507632419847, 0.14877200893208808] ***
*** center 1: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [83, 4, 0]]
** centroid: 2, normalized-entropy: 0.2690553027246505, [(1, 83), (2, 4)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [65, 26, 0]]
** centroid: 3, normalized-entropy: 0.8631205685666311, [(1, 65), (2, 26)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 88, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 100, 16]]
** centroid: 5, normalized-entropy: 0.5787946246321198, [(2, 100), (3, 16)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [83, 28, 0]]
** centroid: 6, normalized-entropy: 0.8148283832923793, [(1, 83), (2, 28)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [63, 10, 0]]
** centroid: 7, normalized-entropy: 0.576291461217437, [(1, 63), (2, 10)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2747249746090011] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2747249746090011, 0.2466816911487854] ***
*** starting iteration: 2; err: [Inf, 0.2747249746090011, 0.2466816911487854] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2747249746090011, 0.2466816911487854, 0.23802367068338418] ***
*** starting iteration: 3; err: [Inf, 0.2747249746090011, 0.2466816911487854, 0.23802367068338418] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2747249746090011, 0.2466816911487854, 0.23802367068338418, 0.23556537190228477] ***
*** starting iteration: 4; err: [Inf, 0.2747249746090011, 0.2466816911487854, 0.23802367068338418, 0.23556537190228477] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2747249746090011, 0.2466816911487854, 0.23802367068338418, 0.23556537190228477, 0.2346551230585611] ***
*** finished computation of 3 references, err: [Inf, 0.2747249746090011, 0.2466816911487854, 0.23802367068338418, 0.23556537190228477, 0.2346551230585611] ***
*** center 1: selecting labels [1] (freq >= 2) [from [261, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [15, 176, 16]]
** centroid: 2, normalized-entropy: 0.4788009357315921, [(1, 15), (2, 176), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [142, 56, 0]]
** centroid: 3, normalized-entropy: 0.8592759806609698, [(1, 142), (2, 56)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.27974606099199206] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27974606099199206, 0.2710932089376083] ***
*** starting iteration: 2; err: [Inf, 0.27974606099199206, 0.2710932089376083] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27974606099199206, 0.2710932089376083, 0.265338922969821] ***
*** starting iteration: 3; err: [Inf, 0.27974606099199206, 0.2710932089376083, 0.265338922969821] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27974606099199206, 0.2710932089376083, 0.265338922969821, 0.25086675265125336] ***
*** starting iteration: 4; err: [Inf, 0.27974606099199206, 0.2710932089376083, 0.265338922969821, 0.25086675265125336] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27974606099199206, 0.2710932089376083, 0.265338922969821, 0.25086675265125336, 0.2334151429576573] ***
*** starting iteration: 5; err: [Inf, 0.27974606099199206, 0.2710932089376083, 0.265338922969821, 0.25086675265125336, 0.2334151429576573] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27974606099199206, 0.2710932089376083, 0.265338922969821, 0.25086675265125336, 0.2334151429576573, 0.23128599103057068] ***
*** starting iteration: 6; err: [Inf, 0.27974606099199206, 0.2710932089376083, 0.265338922969821, 0.25086675265125336, 0.2334151429576573, 0.23128599103057068] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27974606099199206, 0.2710932089376083, 0.265338922969821, 0.25086675265125336, 0.2334151429576573, 0.23128599103057068, 0.23108245288419804] ***
*** finished computation of 3 references, err: [Inf, 0.27974606099199206, 0.2710932089376083, 0.265338922969821, 0.25086675265125336, 0.2334151429576573, 0.23128599103057068, 0.23108245288419804] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [130, 91, 0]]
** centroid: 1, normalized-entropy: 0.9774178175281716, [(1, 130), (2, 91)]
*** center 2: selecting labels [1] (freq >= 2) [from [216, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [59, 155, 16]]
** centroid: 3, normalized-entropy: 0.7285523868628322, [(1, 59), (2, 155), (3, 16)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30840503748623593] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30840503748623593, 0.2929864742728914] ***
*** starting iteration: 2; err: [Inf, 0.30840503748623593, 0.2929864742728914] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30840503748623593, 0.2929864742728914, 0.2844801571895962] ***
*** starting iteration: 3; err: [Inf, 0.30840503748623593, 0.2929864742728914, 0.2844801571895962] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30840503748623593, 0.2929864742728914, 0.2844801571895962, 0.26476713130878904] ***
*** starting iteration: 4; err: [Inf, 0.30840503748623593, 0.2929864742728914, 0.2844801571895962, 0.26476713130878904] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30840503748623593, 0.2929864742728914, 0.2844801571895962, 0.26476713130878904, 0.24545740953826722] ***
*** starting iteration: 5; err: [Inf, 0.30840503748623593, 0.2929864742728914, 0.2844801571895962, 0.26476713130878904, 0.24545740953826722] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30840503748623593, 0.2929864742728914, 0.2844801571895962, 0.26476713130878904, 0.24545740953826722, 0.24246601357628805] ***
*** starting iteration: 6; err: [Inf, 0.30840503748623593, 0.2929864742728914, 0.2844801571895962, 0.26476713130878904, 0.24545740953826722, 0.24246601357628805] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30840503748623593, 0.2929864742728914, 0.2844801571895962, 0.26476713130878904, 0.24545740953826722, 0.24246601357628805, 0.24183935090910638] ***
*** finished computation of 3 references, err: [Inf, 0.30840503748623593, 0.2929864742728914, 0.2844801571895962, 0.26476713130878904, 0.24545740953826722, 0.24246601357628805, 0.24183935090910638] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [236, 16, 0]]
** centroid: 1, normalized-entropy: 0.3411538931451763, [(1, 236), (2, 16)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 198, 16]]
** centroid: 2, normalized-entropy: 0.3834641323087979, [(2, 198), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [159, 42, 0]]
** centroid: 3, normalized-entropy: 0.7394809367166378, [(1, 159), (2, 42)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.41691931601692067] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41691931601692067, 0.3446424731078583] ***
*** finished computation of 3 references, err: [Inf, 0.41691931601692067, 0.3446424731078583] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [98, 145, 16]]
** centroid: 1, normalized-entropy: 0.7868959875172997, [(1, 98), (2, 145), (3, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [214, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [106, 87, 0]]
** centroid: 3, normalized-entropy: 0.9929976988093318, [(1, 106), (2, 87)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.45696687937548003] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45696687937548003, 0.3272714677826687] ***
*** finished computation of 3 references, err: [Inf, 0.45696687937548003, 0.3272714677826687] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [145, 200, 16]]
** centroid: 1, normalized-entropy: 0.757020643094512, [(1, 145), (2, 200), (3, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [153, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [107, 46, 0]]
** centroid: 3, normalized-entropy: 0.882088381754447, [(1, 107), (2, 46)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.37030244315101735] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37030244315101735, 0.30552288346869433] ***
*** finished computation of 3 references, err: [Inf, 0.37030244315101735, 0.30552288346869433] ***
*** center 1: selecting labels [1] (freq >= 2) [from [190, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [59, 136, 16]]
** centroid: 2, normalized-entropy: 0.7600492061791172, [(1, 59), (2, 136), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [146, 120, 0]]
** centroid: 3, normalized-entropy: 0.9930972585481643, [(1, 146), (2, 120)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3046719678991783] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3046719678991783, 0.24086748809460132] ***
*** starting iteration: 2; err: [Inf, 0.3046719678991783, 0.24086748809460132] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3046719678991783, 0.24086748809460132, 0.23370461025927355] ***
*** starting iteration: 3; err: [Inf, 0.3046719678991783, 0.24086748809460132, 0.23370461025927355] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3046719678991783, 0.24086748809460132, 0.23370461025927355, 0.2319083637285648] ***
*** starting iteration: 4; err: [Inf, 0.3046719678991783, 0.24086748809460132, 0.23370461025927355, 0.2319083637285648] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3046719678991783, 0.24086748809460132, 0.23370461025927355, 0.2319083637285648, 0.23140520302263246] ***
*** finished computation of 3 references, err: [Inf, 0.3046719678991783, 0.24086748809460132, 0.23370461025927355, 0.2319083637285648, 0.23140520302263246] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [251, 5, 0]]
** centroid: 1, normalized-entropy: 0.13880049798406022, [(1, 251), (2, 5)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [3, 186, 16]]
** centroid: 2, normalized-entropy: 0.3177885265297403, [(1, 3), (2, 186), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [151, 55, 0]]
** centroid: 3, normalized-entropy: 0.8371126636786399, [(1, 151), (2, 55)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3269424639737186] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3269424639737186, 0.27655013814998575] ***
*** starting iteration: 2; err: [Inf, 0.3269424639737186, 0.27655013814998575] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3269424639737186, 0.27655013814998575, 0.2705777086390146] ***
*** starting iteration: 3; err: [Inf, 0.3269424639737186, 0.27655013814998575, 0.2705777086390146] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3269424639737186, 0.27655013814998575, 0.2705777086390146, 0.26950539469040335] ***
*** starting iteration: 4; err: [Inf, 0.3269424639737186, 0.27655013814998575, 0.2705777086390146, 0.26950539469040335] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3269424639737186, 0.27655013814998575, 0.2705777086390146, 0.26950539469040335, 0.2646499957325219] ***
*** starting iteration: 5; err: [Inf, 0.3269424639737186, 0.27655013814998575, 0.2705777086390146, 0.26950539469040335, 0.2646499957325219] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3269424639737186, 0.27655013814998575, 0.2705777086390146, 0.26950539469040335, 0.2646499957325219, 0.2413727500192497] ***
*** starting iteration: 6; err: [Inf, 0.3269424639737186, 0.27655013814998575, 0.2705777086390146, 0.26950539469040335, 0.2646499957325219, 0.2413727500192497] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3269424639737186, 0.27655013814998575, 0.2705777086390146, 0.26950539469040335, 0.2646499957325219, 0.2413727500192497, 0.23335728044461074] ***
*** starting iteration: 7; err: [Inf, 0.3269424639737186, 0.27655013814998575, 0.2705777086390146, 0.26950539469040335, 0.2646499957325219, 0.2413727500192497, 0.23335728044461074] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3269424639737186, 0.27655013814998575, 0.2705777086390146, 0.26950539469040335, 0.2646499957325219, 0.2413727500192497, 0.23335728044461074, 0.23238941569948035] ***
*** finished computation of 3 references, err: [Inf, 0.3269424639737186, 0.27655013814998575, 0.2705777086390146, 0.26950539469040335, 0.2646499957325219, 0.2413727500192497, 0.23335728044461074, 0.23238941569948035] ***
*** center 1: selecting labels [1] (freq >= 1) [from [209, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [71, 155, 16]]
** centroid: 2, normalized-entropy: 0.7506853702240476, [(1, 71), (2, 155), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [115, 101, 0]]
** centroid: 3, normalized-entropy: 0.9969675224572907, [(1, 115), (2, 101)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3932128211779816] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3932128211779816, 0.30072620518186743] ***
*** starting iteration: 2; err: [Inf, 0.3932128211779816, 0.30072620518186743] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3932128211779816, 0.30072620518186743, 0.2958555798558099] ***
*** starting iteration: 3; err: [Inf, 0.3932128211779816, 0.30072620518186743, 0.2958555798558099] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3932128211779816, 0.30072620518186743, 0.2958555798558099, 0.294772190487924] ***
*** starting iteration: 4; err: [Inf, 0.3932128211779816, 0.30072620518186743, 0.2958555798558099, 0.294772190487924] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3932128211779816, 0.30072620518186743, 0.2958555798558099, 0.294772190487924, 0.2944805679350599] ***
*** finished computation of 3 references, err: [Inf, 0.3932128211779816, 0.30072620518186743, 0.2958555798558099, 0.294772190487924, 0.2944805679350599] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [78, 157, 16]]
** centroid: 1, normalized-entropy: 0.7574691289993841, [(1, 78), (2, 157), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [123, 75, 0]]
** centroid: 2, normalized-entropy: 0.9571814385446724, [(1, 123), (2, 75)]
*** center 3: selecting labels [1] (freq >= 1) [from [217, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3846265066197251] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3846265066197251, 0.3022062593276544] ***
*** starting iteration: 2; err: [Inf, 0.3846265066197251, 0.3022062593276544] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3846265066197251, 0.3022062593276544, 0.2991329357055933] ***
*** starting iteration: 3; err: [Inf, 0.3846265066197251, 0.3022062593276544, 0.2991329357055933] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3846265066197251, 0.3022062593276544, 0.2991329357055933, 0.29868273624404706] ***
*** finished computation of 3 references, err: [Inf, 0.3846265066197251, 0.3022062593276544, 0.2991329357055933, 0.29868273624404706] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [106, 156, 16]]
** centroid: 1, normalized-entropy: 0.7793192205196199, [(1, 106), (2, 156), (3, 16)]
*** center 2: selecting labels [1] (freq >= 1) [from [204, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [95, 90, 0]]
** centroid: 3, normalized-entropy: 0.9994730201859837, [(1, 95), (2, 90)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.42169758709597177] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42169758709597177, 0.29318126206002804] ***
*** starting iteration: 2; err: [Inf, 0.42169758709597177, 0.29318126206002804] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42169758709597177, 0.29318126206002804, 0.2916410018283611] ***
*** starting iteration: 3; err: [Inf, 0.42169758709597177, 0.29318126206002804, 0.2916410018283611] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42169758709597177, 0.29318126206002804, 0.2916410018283611, 0.2911293259395965] ***
*** finished computation of 3 references, err: [Inf, 0.42169758709597177, 0.29318126206002804, 0.2916410018283611, 0.2911293259395965] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [68, 170, 16]]
** centroid: 1, normalized-entropy: 0.7242824629262714, [(1, 68), (2, 170), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [129, 86, 0]]
** centroid: 2, normalized-entropy: 0.9709505944546688, [(1, 129), (2, 86)]
*** center 3: selecting labels [1] (freq >= 1) [from [198, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.23275435155721846] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23275435155721846, 0.2057474038490953] ***
*** starting iteration: 2; err: [Inf, 0.23275435155721846, 0.2057474038490953] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23275435155721846, 0.2057474038490953, 0.2015452581491355] ***
*** starting iteration: 3; err: [Inf, 0.23275435155721846, 0.2057474038490953, 0.2015452581491355] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23275435155721846, 0.2057474038490953, 0.2015452581491355, 0.20073348322013454] ***
*** finished computation of 7 references, err: [Inf, 0.23275435155721846, 0.2057474038490953, 0.2015452581491355, 0.20073348322013454] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [51, 51, 0]]
** centroid: 1, normalized-entropy: 1.0, [(1, 51), (2, 51)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [73, 11, 0]]
** centroid: 2, normalized-entropy: 0.5600443203590992, [(1, 73), (2, 11)]
*** center 3: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [8, 95, 0]]
** centroid: 4, normalized-entropy: 0.3939152573634121, [(1, 8), (2, 95)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 75, 16]]
** centroid: 5, normalized-entropy: 0.6708561590207726, [(2, 75), (3, 16)]
*** center 6: selecting labels [1] (freq >= 1) [from [121, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24298702679697362] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24298702679697362, 0.2070260185921478] ***
*** starting iteration: 2; err: [Inf, 0.24298702679697362, 0.2070260185921478] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24298702679697362, 0.2070260185921478, 0.19825578507069483] ***
*** starting iteration: 3; err: [Inf, 0.24298702679697362, 0.2070260185921478, 0.19825578507069483] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24298702679697362, 0.2070260185921478, 0.19825578507069483, 0.19481010743412658] ***
*** finished computation of 7 references, err: [Inf, 0.24298702679697362, 0.2070260185921478, 0.19825578507069483, 0.19481010743412658] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [106, 16, 0]]
** centroid: 1, normalized-entropy: 0.5605769426145328, [(1, 106), (2, 16)]
*** center 2: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [14, 70, 0]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(1, 14), (2, 70)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 90, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 38, 16]]
** centroid: 5, normalized-entropy: 0.876716288999464, [(2, 38), (3, 16)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [68, 32, 0]]
** centroid: 6, normalized-entropy: 0.9043814577244941, [(1, 68), (2, 32)]
*** center 7: selecting labels [1] (freq >= 1) [from [115, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3605159931066355] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3605159931066355, 0.25170544801193334] ***
*** starting iteration: 2; err: [Inf, 0.3605159931066355, 0.25170544801193334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3605159931066355, 0.25170544801193334, 0.21815158575326427] ***
*** starting iteration: 3; err: [Inf, 0.3605159931066355, 0.25170544801193334, 0.21815158575326427] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3605159931066355, 0.25170544801193334, 0.21815158575326427, 0.20399640336063043] ***
*** finished computation of 7 references, err: [Inf, 0.3605159931066355, 0.25170544801193334, 0.21815158575326427, 0.20399640336063043] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [88, 65, 0]]
** centroid: 1, normalized-entropy: 0.9836369257846014, [(1, 88), (2, 65)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 127, 16]]
** centroid: 2, normalized-entropy: 0.5055849366380744, [(2, 127), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [78, 35, 0]]
** centroid: 3, normalized-entropy: 0.8928667618459025, [(1, 78), (2, 35)]
*** center 4: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [49, 29, 0]]
** centroid: 6, normalized-entropy: 0.9520402801398793, [(1, 49), (2, 29)]
*** center 7: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19993491665328722] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19993491665328722, 0.17646556966532548] ***
*** finished computation of 7 references, err: [Inf, 0.19993491665328722, 0.17646556966532548] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [12, 59, 6]]
** centroid: 1, normalized-entropy: 0.630415985901355, [(1, 12), (2, 59), (3, 6)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [22, 133, 10]]
** centroid: 2, normalized-entropy: 0.5573741460901013, [(1, 22), (2, 133), (3, 10)]
*** center 3: selecting labels [1] (freq >= 2) [from [131, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [22, 40, 0]]
** centroid: 4, normalized-entropy: 0.9383153522334071, [(1, 22), (2, 40)]
*** center 5: selecting labels [1] (freq >= 2) [from [114, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19002140840764034] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19002140840764034, 0.15961242237406179] ***
*** finished computation of 7 references, err: [Inf, 0.19002140840764034, 0.15961242237406179] ***
*** center 1: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [56, 1, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 101, 16]]
** centroid: 4, normalized-entropy: 0.5756693370369834, [(2, 101), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [31, 63, 0]]
** centroid: 5, normalized-entropy: 0.9147088431405322, [(1, 31), (2, 63)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [52, 36, 0]]
** centroid: 6, normalized-entropy: 0.976020648236615, [(1, 52), (2, 36)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [99, 45, 0]]
** centroid: 7, normalized-entropy: 0.8960382325345574, [(1, 99), (2, 45)]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.25170554244134025] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25170554244134025, 0.17960771475534612] ***
*** finished computation of 7 references, err: [Inf, 0.25170554244134025, 0.17960771475534612] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [35, 38, 0]]
** centroid: 1, normalized-entropy: 0.998781393072756, [(1, 35), (2, 38)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 88, 16]]
** centroid: 2, normalized-entropy: 0.6193821946787638, [(2, 88), (3, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [112, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [8, 21, 0]]
** centroid: 4, normalized-entropy: 0.8497511372532974, [(1, 8), (2, 21)]
*** center 5: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [44, 109, 0]]
** centroid: 6, normalized-entropy: 0.8655768451715665, [(1, 44), (2, 109)]
*** center 7: selecting labels [1] (freq >= 2) [from [134, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.34921740935751805] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34921740935751805, 0.237301435515595] ***
*** starting iteration: 2; err: [Inf, 0.34921740935751805, 0.237301435515595] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34921740935751805, 0.237301435515595, 0.23527399446485234] ***
*** starting iteration: 3; err: [Inf, 0.34921740935751805, 0.237301435515595, 0.23527399446485234] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34921740935751805, 0.237301435515595, 0.23527399446485234, 0.23452151716510589] ***
*** finished computation of 3 references, err: [Inf, 0.34921740935751805, 0.237301435515595, 0.23527399446485234, 0.23452151716510589] ***
*** center 1: selecting labels [1] (freq >= 1) [from [265, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [13, 178, 16]]
** centroid: 2, normalized-entropy: 0.4564808257327113, [(1, 13), (2, 178), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [140, 54, 0]]
** centroid: 3, normalized-entropy: 0.8531935252328874, [(1, 140), (2, 54)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 12)
[0.9499799200398003, 0.9360018701336067, 0.9269988551425676, 0.9190507873142604, 0.9190028351704999, 0.9140577703451956, 0.9119958281634929, 0.8920267572962185, 0.8790287293281306, 0.8779947612282942, 0.8750217283151415, 0.8040375705046364]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.3, 2) => 0.9499799200398003
finished with 12
iteration 2 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9499799200398003, 0.9360018701336067, 0.9269988551425676, 0.9190507873142604, 0.9190028351704999, 0.9140577703451956, 0.9119958281634929, 0.8920267572962185, 0.8790287293281306, 0.8779947612282942, 0.8750217283151415, 0.8040375705046364]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.3, 2) => 0.9499799200398003
finished with 13
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.3315098153737684] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3315098153737684, 0.2965765716025589] ***
*** starting iteration: 2; err: [Inf, 0.3315098153737684, 0.2965765716025589] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3315098153737684, 0.2965765716025589, 0.29515929377914685] ***
*** starting iteration: 3; err: [Inf, 0.3315098153737684, 0.2965765716025589, 0.29515929377914685] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3315098153737684, 0.2965765716025589, 0.29515929377914685, 0.2947440236532787] ***
*** finished computation of 3 references, err: [Inf, 0.3315098153737684, 0.2965765716025589, 0.29515929377914685, 0.2947440236532787] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [79, 152, 16]]
** centroid: 1, normalized-entropy: 0.765195296331066, [(1, 79), (2, 152), (3, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [221, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [118, 80, 0]]
** centroid: 3, normalized-entropy: 0.9732650674751335, [(1, 118), (2, 80)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39933876007253577] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39933876007253577, 0.2969385357322297] ***
*** starting iteration: 2; err: [Inf, 0.39933876007253577, 0.2969385357322297] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39933876007253577, 0.2969385357322297, 0.29250979710599295] ***
*** starting iteration: 3; err: [Inf, 0.39933876007253577, 0.2969385357322297, 0.29250979710599295] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39933876007253577, 0.2969385357322297, 0.29250979710599295, 0.29130702279089227] ***
*** starting iteration: 4; err: [Inf, 0.39933876007253577, 0.2969385357322297, 0.29250979710599295, 0.29130702279089227] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39933876007253577, 0.2969385357322297, 0.29250979710599295, 0.29130702279089227, 0.29103138475229257] ***
*** finished computation of 3 references, err: [Inf, 0.39933876007253577, 0.2969385357322297, 0.29250979710599295, 0.29130702279089227, 0.29103138475229257] ***
*** center 1: selecting labels [1] (freq >= 2) [from [217, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [68, 152, 16]]
** centroid: 2, normalized-entropy: 0.7503554106791044, [(1, 68), (2, 152), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [120, 94, 0]]
** centroid: 3, normalized-entropy: 0.9893257549491837, [(1, 120), (2, 94)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3885467348974952] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3885467348974952, 0.2997646852476017] ***
*** starting iteration: 2; err: [Inf, 0.3885467348974952, 0.2997646852476017] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3885467348974952, 0.2997646852476017, 0.29195403898165545] ***
*** starting iteration: 3; err: [Inf, 0.3885467348974952, 0.2997646852476017, 0.29195403898165545] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3885467348974952, 0.2997646852476017, 0.29195403898165545, 0.29014431117200246] ***
*** starting iteration: 4; err: [Inf, 0.3885467348974952, 0.2997646852476017, 0.29195403898165545, 0.29014431117200246] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3885467348974952, 0.2997646852476017, 0.29195403898165545, 0.29014431117200246, 0.29036508725098764] ***
*** finished computation of 3 references, err: [Inf, 0.3885467348974952, 0.2997646852476017, 0.29195403898165545, 0.29014431117200246, 0.29036508725098764] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [134, 82, 0]]
** centroid: 1, normalized-entropy: 0.9577800211448372, [(1, 134), (2, 82)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [62, 174, 16]]
** centroid: 2, normalized-entropy: 0.7061460972224821, [(1, 62), (2, 174), (3, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [199, 0, 0]]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 13)
[0.9499799200398003, 0.9360018701336067, 0.9269988551425676, 0.9190507873142604, 0.9190028351704999, 0.9140577703451956, 0.9119958281634929, 0.9119958281634929, 0.8920267572962185, 0.8790287293281306, 0.8779947612282942, 0.8750217283151415, 0.8040375705046364]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.3, 2) => 0.9499799200398003
finished with 14
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.2040070207851069] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2040070207851069, 0.15818981489435108] ***
*** finished computation of 7 references, err: [Inf, 0.2040070207851069, 0.15818981489435108] ***
*** center 1: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [134, 15, 0]]
** centroid: 2, normalized-entropy: 0.47111945700263613, [(1, 134), (2, 15)]
*** center 3: selecting labels [1] (freq >= 2) [from [122, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 67, 5]]
** centroid: 4, normalized-entropy: 0.3638469981769295, [(2, 67), (3, 5)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [34, 57, 0]]
** centroid: 5, normalized-entropy: 0.9534158774525225, [(1, 34), (2, 57)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [21, 47, 0]]
** centroid: 6, normalized-entropy: 0.8918107543797084, [(1, 21), (2, 47)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 46, 11]]
** centroid: 7, normalized-entropy: 0.7076690004167966, [(2, 46), (3, 11)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22369719712158617] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22369719712158617, 0.15942294592794584] ***
*** finished computation of 7 references, err: [Inf, 0.22369719712158617, 0.15942294592794584] ***
*** center 1: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [65, 37, 0]]
** centroid: 3, normalized-entropy: 0.9449382598624693, [(1, 65), (2, 37)]
*** center 4: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [102, 66, 0]]
** centroid: 5, normalized-entropy: 0.9666186325481027, [(1, 102), (2, 66)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [35, 38, 0]]
** centroid: 6, normalized-entropy: 0.998781393072756, [(1, 35), (2, 38)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 105, 16]]
** centroid: 7, normalized-entropy: 0.5635262178122566, [(2, 105), (3, 16)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2365421128949371] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2365421128949371, 0.16448815755763913] ***
*** finished computation of 7 references, err: [Inf, 0.2365421128949371, 0.16448815755763913] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [61, 44, 0]]
** centroid: 1, normalized-entropy: 0.9810077194625308, [(1, 61), (2, 44)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [18, 25, 0]]
** centroid: 2, normalized-entropy: 0.9807983646944296, [(1, 18), (2, 25)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 170, 16]]
** centroid: 3, normalized-entropy: 0.42304881571335795, [(2, 170), (3, 16)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [98, 5, 0]]
** centroid: 4, normalized-entropy: 0.28017814662275986, [(1, 98), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [87, 12, 0]]
** centroid: 5, normalized-entropy: 0.5328350630342235, [(1, 87), (2, 12)]
*** center 6: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [22, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 14)
[0.9499799200398003, 0.9360228491965019, 0.9360018701336067, 0.9269988551425676, 0.9190507873142604, 0.9190028351704999, 0.9140577703451956, 0.9119958281634929, 0.9119958281634929, 0.8920267572962185, 0.8790287293281306, 0.8779947612282942, 0.8750217283151415, 0.8040375705046364]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.3, 2) => 0.9499799200398003
finished with 14
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 14)
[0.9499799200398003, 0.9360228491965019, 0.9360018701336067, 0.9269988551425676, 0.9190507873142604, 0.9190028351704999, 0.9140577703451956, 0.9119958281634929, 0.9119958281634929, 0.8920267572962185, 0.8790287293281306, 0.8779947612282942, 0.8750217283151415, 0.8040375705046364]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.3, 2) => 0.9499799200398003
finished with 15
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.3925541756512435] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3925541756512435, 0.32475298268066066] ***
*** starting iteration: 2; err: [Inf, 0.3925541756512435, 0.32475298268066066] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3925541756512435, 0.32475298268066066, 0.3149603439170543] ***
*** starting iteration: 3; err: [Inf, 0.3925541756512435, 0.32475298268066066, 0.3149603439170543] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3925541756512435, 0.32475298268066066, 0.3149603439170543, 0.31161406089051125] ***
*** finished computation of 3 references, err: [Inf, 0.3925541756512435, 0.32475298268066066, 0.3149603439170543, 0.31161406089051125] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [4, 170, 16]]
** centroid: 1, normalized-entropy: 0.3542375239358835, [(1, 4), (2, 170), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [275, 3, 0]]
** centroid: 2, normalized-entropy: 0.0859949043225381, [(1, 275), (2, 3)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [139, 59, 0]]
** centroid: 3, normalized-entropy: 0.8788073826002349, [(1, 139), (2, 59)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.5311505152764304] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5311505152764304, 0.31494811284628094] ***
*** starting iteration: 2; err: [Inf, 0.5311505152764304, 0.31494811284628094] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5311505152764304, 0.31494811284628094, 0.29663774561600526] ***
*** starting iteration: 3; err: [Inf, 0.5311505152764304, 0.31494811284628094, 0.29663774561600526] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5311505152764304, 0.31494811284628094, 0.29663774561600526, 0.2918870456550254] ***
*** finished computation of 3 references, err: [Inf, 0.5311505152764304, 0.31494811284628094, 0.29663774561600526, 0.2918870456550254] ***
*** center 1: selecting labels [1] (freq >= 2) [from [210, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [57, 157, 16]]
** centroid: 2, normalized-entropy: 0.7207207226183516, [(1, 57), (2, 157), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [138, 89, 0]]
** centroid: 3, normalized-entropy: 0.96612271464159, [(1, 138), (2, 89)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4372026898564472] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4372026898564472, 0.3369599814227233] ***
*** starting iteration: 2; err: [Inf, 0.4372026898564472, 0.3369599814227233] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4372026898564472, 0.3369599814227233, 0.32912226556067253] ***
*** starting iteration: 3; err: [Inf, 0.4372026898564472, 0.3369599814227233, 0.32912226556067253] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4372026898564472, 0.3369599814227233, 0.32912226556067253, 0.3265892588987254] ***
*** finished computation of 3 references, err: [Inf, 0.4372026898564472, 0.3369599814227233, 0.32912226556067253, 0.3265892588987254] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [58, 147, 0]]
** centroid: 1, normalized-entropy: 0.8594082340988861, [(1, 58), (2, 147)]
*** center 2: selecting labels [1] (freq >= 2) [from [238, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [99, 109, 16]]
** centroid: 3, normalized-entropy: 0.8191076670922226, [(1, 99), (2, 109), (3, 16)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 15)
[0.9499799200398003, 0.9360228491965019, 0.9360018701336067, 0.9269988551425676, 0.9190507873142604, 0.9190028351704999, 0.9140577703451956, 0.9119958281634929, 0.9119958281634929, 0.9039758321195447, 0.8920267572962185, 0.8790287293281306, 0.8779947612282942, 0.8750217283151415, 0.8040375705046364]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.3, 2) => 0.9499799200398003
finished with 15
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9499799200398003, 0.9360228491965019, 0.9360018701336067, 0.9269988551425676, 0.9190507873142604, 0.9190028351704999, 0.9140577703451956, 0.9119958281634929, 0.9119958281634929, 0.9039758321195447, 0.8920267572962185, 0.8790287293281306, 0.8779947612282942, 0.8750217283151415, 0.8040375705046364]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.3, 2) => 0.9499799200398003
finished with 17
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.21482509168217312] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21482509168217312, 0.17012056648065602] ***
*** starting iteration: 2; err: [Inf, 0.21482509168217312, 0.17012056648065602] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21482509168217312, 0.17012056648065602, 0.15610492746233828] ***
*** starting iteration: 3; err: [Inf, 0.21482509168217312, 0.17012056648065602, 0.15610492746233828] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21482509168217312, 0.17012056648065602, 0.15610492746233828, 0.15013498089810437] ***
*** starting iteration: 4; err: [Inf, 0.21482509168217312, 0.17012056648065602, 0.15610492746233828, 0.15013498089810437] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21482509168217312, 0.17012056648065602, 0.15610492746233828, 0.15013498089810437, 0.14664798058211445] ***
*** starting iteration: 5; err: [Inf, 0.21482509168217312, 0.17012056648065602, 0.15610492746233828, 0.15013498089810437, 0.14664798058211445] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21482509168217312, 0.17012056648065602, 0.15610492746233828, 0.15013498089810437, 0.14664798058211445, 0.14541376097751474] ***
*** starting iteration: 6; err: [Inf, 0.21482509168217312, 0.17012056648065602, 0.15610492746233828, 0.15013498089810437, 0.14664798058211445, 0.14541376097751474] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21482509168217312, 0.17012056648065602, 0.15610492746233828, 0.15013498089810437, 0.14664798058211445, 0.14541376097751474, 0.14500491591813686] ***
*** finished computation of 7 references, err: [Inf, 0.21482509168217312, 0.17012056648065602, 0.15610492746233828, 0.15013498089810437, 0.14664798058211445, 0.14541376097751474, 0.14500491591813686] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 86, 16]]
** centroid: 1, normalized-entropy: 0.6267511370265896, [(2, 86), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [60, 34, 0]]
** centroid: 2, normalized-entropy: 0.9440870182837795, [(1, 60), (2, 34)]
*** center 3: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 73, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [106, 1, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [65, 38, 0]]
** centroid: 7, normalized-entropy: 0.9498485528365604, [(1, 65), (2, 38)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18129965259499478] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18129965259499478, 0.16114583454406198] ***
*** starting iteration: 2; err: [Inf, 0.18129965259499478, 0.16114583454406198] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18129965259499478, 0.16114583454406198, 0.15456089868267503] ***
*** starting iteration: 3; err: [Inf, 0.18129965259499478, 0.16114583454406198, 0.15456089868267503] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18129965259499478, 0.16114583454406198, 0.15456089868267503, 0.15137525967872426] ***
*** starting iteration: 4; err: [Inf, 0.18129965259499478, 0.16114583454406198, 0.15456089868267503, 0.15137525967872426] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18129965259499478, 0.16114583454406198, 0.15456089868267503, 0.15137525967872426, 0.1501211724355761] ***
*** starting iteration: 5; err: [Inf, 0.18129965259499478, 0.16114583454406198, 0.15456089868267503, 0.15137525967872426, 0.1501211724355761] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18129965259499478, 0.16114583454406198, 0.15456089868267503, 0.15137525967872426, 0.1501211724355761, 0.14975942252203822] ***
*** finished computation of 7 references, err: [Inf, 0.18129965259499478, 0.16114583454406198, 0.15456089868267503, 0.15137525967872426, 0.1501211724355761, 0.14975942252203822] ***
*** center 1: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 94, 16]]
** centroid: 2, normalized-entropy: 0.5983474220910422, [(2, 94), (3, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [48, 47, 0]]
** centroid: 4, normalized-entropy: 0.9999200708207958, [(1, 48), (2, 47)]
*** center 5: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [26, 70, 0]]
** centroid: 6, normalized-entropy: 0.842657877202239, [(1, 26), (2, 70)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [93, 35, 0]]
** centroid: 7, normalized-entropy: 0.8463541013584317, [(1, 93), (2, 35)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1708211273937926] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1708211273937926, 0.15324665806807766] ***
*** starting iteration: 2; err: [Inf, 0.1708211273937926, 0.15324665806807766] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1708211273937926, 0.15324665806807766, 0.14998079633348618] ***
*** starting iteration: 3; err: [Inf, 0.1708211273937926, 0.15324665806807766, 0.14998079633348618] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1708211273937926, 0.15324665806807766, 0.14998079633348618, 0.14820900010126553] ***
*** starting iteration: 4; err: [Inf, 0.1708211273937926, 0.15324665806807766, 0.14998079633348618, 0.14820900010126553] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1708211273937926, 0.15324665806807766, 0.14998079633348618, 0.14820900010126553, 0.14675466956101593] ***
*** starting iteration: 5; err: [Inf, 0.1708211273937926, 0.15324665806807766, 0.14998079633348618, 0.14820900010126553, 0.14675466956101593] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1708211273937926, 0.15324665806807766, 0.14998079633348618, 0.14820900010126553, 0.14675466956101593, 0.14587148968542255] ***
*** finished computation of 7 references, err: [Inf, 0.1708211273937926, 0.15324665806807766, 0.14998079633348618, 0.14820900010126553, 0.14675466956101593, 0.14587148968542255] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [103, 8, 0]]
** centroid: 1, normalized-entropy: 0.3736090708557681, [(1, 103), (2, 8)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 86, 16]]
** centroid: 2, normalized-entropy: 0.6267511370265896, [(2, 86), (3, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [85, 31, 0]]
** centroid: 4, normalized-entropy: 0.8374782779405223, [(1, 85), (2, 31)]
*** center 5: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [32, 58, 0]]
** centroid: 6, normalized-entropy: 0.9389320105807949, [(1, 32), (2, 58)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 73, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24931411455349028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24931411455349028, 0.2190593771647673] ***
*** starting iteration: 2; err: [Inf, 0.24931411455349028, 0.2190593771647673] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24931411455349028, 0.2190593771647673, 0.21319799935277384] ***
*** starting iteration: 3; err: [Inf, 0.24931411455349028, 0.2190593771647673, 0.21319799935277384] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24931411455349028, 0.2190593771647673, 0.21319799935277384, 0.20890939295817693] ***
*** starting iteration: 4; err: [Inf, 0.24931411455349028, 0.2190593771647673, 0.21319799935277384, 0.20890939295817693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24931411455349028, 0.2190593771647673, 0.21319799935277384, 0.20890939295817693, 0.20251488838870604] ***
*** starting iteration: 5; err: [Inf, 0.24931411455349028, 0.2190593771647673, 0.21319799935277384, 0.20890939295817693, 0.20251488838870604] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24931411455349028, 0.2190593771647673, 0.21319799935277384, 0.20890939295817693, 0.20251488838870604, 0.1945662169350876] ***
*** starting iteration: 6; err: [Inf, 0.24931411455349028, 0.2190593771647673, 0.21319799935277384, 0.20890939295817693, 0.20251488838870604, 0.1945662169350876] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24931411455349028, 0.2190593771647673, 0.21319799935277384, 0.20890939295817693, 0.20251488838870604, 0.1945662169350876, 0.19140006786956265] ***
*** starting iteration: 7; err: [Inf, 0.24931411455349028, 0.2190593771647673, 0.21319799935277384, 0.20890939295817693, 0.20251488838870604, 0.1945662169350876, 0.19140006786956265] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24931411455349028, 0.2190593771647673, 0.21319799935277384, 0.20890939295817693, 0.20251488838870604, 0.1945662169350876, 0.19140006786956265, 0.19020097429497732] ***
*** starting iteration: 8; err: [Inf, 0.24931411455349028, 0.2190593771647673, 0.21319799935277384, 0.20890939295817693, 0.20251488838870604, 0.1945662169350876, 0.19140006786956265, 0.19020097429497732] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24931411455349028, 0.2190593771647673, 0.21319799935277384, 0.20890939295817693, 0.20251488838870604, 0.1945662169350876, 0.19140006786956265, 0.19020097429497732, 0.1893818641190526] ***
*** finished computation of 7 references, err: [Inf, 0.24931411455349028, 0.2190593771647673, 0.21319799935277384, 0.20890939295817693, 0.20251488838870604, 0.1945662169350876, 0.19140006786956265, 0.19020097429497732, 0.1893818641190526] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 98, 16]]
** centroid: 1, normalized-entropy: 0.5851569902762294, [(2, 98), (3, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [79, 46, 0]]
** centroid: 3, normalized-entropy: 0.9491240519851772, [(1, 79), (2, 46)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [47, 45, 0]]
** centroid: 4, normalized-entropy: 0.9996590716691399, [(1, 47), (2, 45)]
*** center 5: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [59, 43, 0]]
** centroid: 7, normalized-entropy: 0.9821770638877816, [(1, 59), (2, 43)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24957840266460177] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24957840266460177, 0.2172609045431353] ***
*** starting iteration: 2; err: [Inf, 0.24957840266460177, 0.2172609045431353] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24957840266460177, 0.2172609045431353, 0.20612795245268198] ***
*** starting iteration: 3; err: [Inf, 0.24957840266460177, 0.2172609045431353, 0.20612795245268198] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24957840266460177, 0.2172609045431353, 0.20612795245268198, 0.19903903888926647] ***
*** starting iteration: 4; err: [Inf, 0.24957840266460177, 0.2172609045431353, 0.20612795245268198, 0.19903903888926647] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24957840266460177, 0.2172609045431353, 0.20612795245268198, 0.19903903888926647, 0.19593234317003005] ***
*** starting iteration: 5; err: [Inf, 0.24957840266460177, 0.2172609045431353, 0.20612795245268198, 0.19903903888926647, 0.19593234317003005] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24957840266460177, 0.2172609045431353, 0.20612795245268198, 0.19903903888926647, 0.19593234317003005, 0.19340817520124043] ***
*** starting iteration: 6; err: [Inf, 0.24957840266460177, 0.2172609045431353, 0.20612795245268198, 0.19903903888926647, 0.19593234317003005, 0.19340817520124043] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24957840266460177, 0.2172609045431353, 0.20612795245268198, 0.19903903888926647, 0.19593234317003005, 0.19340817520124043, 0.1917062611437809] ***
*** starting iteration: 7; err: [Inf, 0.24957840266460177, 0.2172609045431353, 0.20612795245268198, 0.19903903888926647, 0.19593234317003005, 0.19340817520124043, 0.1917062611437809] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24957840266460177, 0.2172609045431353, 0.20612795245268198, 0.19903903888926647, 0.19593234317003005, 0.19340817520124043, 0.1917062611437809, 0.19039969460276338] ***
*** starting iteration: 8; err: [Inf, 0.24957840266460177, 0.2172609045431353, 0.20612795245268198, 0.19903903888926647, 0.19593234317003005, 0.19340817520124043, 0.1917062611437809, 0.19039969460276338] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24957840266460177, 0.2172609045431353, 0.20612795245268198, 0.19903903888926647, 0.19593234317003005, 0.19340817520124043, 0.1917062611437809, 0.19039969460276338, 0.18939190591173036] ***
*** starting iteration: 9; err: [Inf, 0.24957840266460177, 0.2172609045431353, 0.20612795245268198, 0.19903903888926647, 0.19593234317003005, 0.19340817520124043, 0.1917062611437809, 0.19039969460276338, 0.18939190591173036] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24957840266460177, 0.2172609045431353, 0.20612795245268198, 0.19903903888926647, 0.19593234317003005, 0.19340817520124043, 0.1917062611437809, 0.19039969460276338, 0.18939190591173036, 0.1882448564318457] ***
*** starting iteration: 10; err: [Inf, 0.24957840266460177, 0.2172609045431353, 0.20612795245268198, 0.19903903888926647, 0.19593234317003005, 0.19340817520124043, 0.1917062611437809, 0.19039969460276338, 0.18939190591173036, 0.1882448564318457] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24957840266460177, 0.2172609045431353, 0.20612795245268198, 0.19903903888926647, 0.19593234317003005, 0.19340817520124043, 0.1917062611437809, 0.19039969460276338, 0.18939190591173036, 0.1882448564318457, 0.18772362877151927] ***
*** finished computation of 7 references, err: [Inf, 0.24957840266460177, 0.2172609045431353, 0.20612795245268198, 0.19903903888926647, 0.19593234317003005, 0.19340817520124043, 0.1917062611437809, 0.19039969460276338, 0.18939190591173036, 0.1882448564318457, 0.18772362877151927] ***
*** center 1: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [86, 4, 0]]
** centroid: 2, normalized-entropy: 0.2623112196143368, [(1, 86), (2, 4)]
*** center 3: selecting labels [1] (freq >= 2) [from [127, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 67, 16]]
** centroid: 4, normalized-entropy: 0.7072324944713736, [(2, 67), (3, 16)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 77, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [59, 40, 0]]
** centroid: 6, normalized-entropy: 0.9732650674751335, [(1, 59), (2, 40)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [30, 58, 0]]
** centroid: 7, normalized-entropy: 0.9256859869821296, [(1, 30), (2, 58)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28875023294714974] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28875023294714974, 0.2264001191561592] ***
*** starting iteration: 2; err: [Inf, 0.28875023294714974, 0.2264001191561592] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28875023294714974, 0.2264001191561592, 0.20747294926644488] ***
*** starting iteration: 3; err: [Inf, 0.28875023294714974, 0.2264001191561592, 0.20747294926644488] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28875023294714974, 0.2264001191561592, 0.20747294926644488, 0.19735872810580832] ***
*** starting iteration: 4; err: [Inf, 0.28875023294714974, 0.2264001191561592, 0.20747294926644488, 0.19735872810580832] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28875023294714974, 0.2264001191561592, 0.20747294926644488, 0.19735872810580832, 0.19646730203449592] ***
*** finished computation of 7 references, err: [Inf, 0.28875023294714974, 0.2264001191561592, 0.20747294926644488, 0.19735872810580832, 0.19646730203449592] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [11, 80, 0]]
** centroid: 1, normalized-entropy: 0.5318826028800231, [(1, 11), (2, 80)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 72, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 59, 16]]
** centroid: 3, normalized-entropy: 0.7478061583312324, [(2, 59), (3, 16)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [78, 28, 0]]
** centroid: 4, normalized-entropy: 0.8329458235361399, [(1, 78), (2, 28)]
*** center 5: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [121, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [91, 17, 0]]
** centroid: 7, normalized-entropy: 0.6280710155029396, [(1, 91), (2, 17)]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 17)
[0.9499799200398003, 0.9460058861256466, 0.9360228491965019, 0.9360018701336067, 0.9269988551425676, 0.9269748790706874, 0.9190507873142604, 0.9190028351704999, 0.9140577703451956, 0.9119958281634929, 0.9119958281634929, 0.9039758321195447, 0.8920267572962185, 0.8790287293281306, 0.8779947612282942, 0.8750217283151415, 0.8040375705046364]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.3, 2) => 0.9499799200398003
finished with 17
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.36946322330180553] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.36946322330180553, 0.25286404887074604] ***
*** finished computation of 7 references, err: [Inf, 0.36946322330180553, 0.25286404887074604] ***
*** center 1: selecting labels [1] (freq >= 2) [from [41, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [148, 145, 1]]
** centroid: 2, normalized-entropy: 0.9999243760425548, [(1, 148), (2, 145)]
*** center 3: selecting labels [1] (freq >= 2) [from [114, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [154, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [80, 82, 0]]
** centroid: 5, normalized-entropy: 0.9998900524545515, [(1, 80), (2, 82)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [71, 3, 0]]
** centroid: 6, normalized-entropy: 0.2447650820208971, [(1, 71), (2, 3)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [1, 136, 23]]
** centroid: 7, normalized-entropy: 0.5962988584330506, [(2, 136), (3, 23)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26518476532772184] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26518476532772184, 0.20996926228702067] ***
*** finished computation of 7 references, err: [Inf, 0.26518476532772184, 0.20996926228702067] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 64, 11]]
** centroid: 1, normalized-entropy: 0.6014353864290773, [(2, 64), (3, 11)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [55, 18, 0]]
** centroid: 2, normalized-entropy: 0.8058049113482652, [(1, 55), (2, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [39, 72, 0]]
** centroid: 3, normalized-entropy: 0.9352691398683568, [(1, 39), (2, 72)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [13, 37, 0]]
** centroid: 4, normalized-entropy: 0.8267463724926181, [(1, 13), (2, 37)]
*** center 5: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23385128160193563] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23385128160193563, 0.20301032185181975] ***
*** finished computation of 7 references, err: [Inf, 0.23385128160193563, 0.20301032185181975] ***
*** center 1: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [12, 89, 11]]
** centroid: 3, normalized-entropy: 0.5915539802823105, [(1, 12), (2, 89), (3, 11)]
*** center 4: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [24, 44, 0]]
** centroid: 6, normalized-entropy: 0.9366673818775627, [(1, 24), (2, 44)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [9, 48, 0]]
** centroid: 7, normalized-entropy: 0.6292492238560344, [(1, 9), (2, 48)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.31596980497986077] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31596980497986077, 0.22309745058044791] ***
*** finished computation of 7 references, err: [Inf, 0.31596980497986077, 0.22309745058044791] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [42, 25, 0]]
** centroid: 1, normalized-entropy: 0.9530483471581301, [(1, 42), (2, 25)]
*** center 2: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 59, 13]]
** centroid: 3, normalized-entropy: 0.6812908868842175, [(2, 59), (3, 13)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [33, 25, 0]]
** centroid: 4, normalized-entropy: 0.9862325350724501, [(1, 33), (2, 25)]
*** center 5: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [45, 73, 0]]
** centroid: 7, normalized-entropy: 0.9589940482340734, [(1, 45), (2, 73)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2504185892213136] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2504185892213136, 0.20854667044244707] ***
*** finished computation of 7 references, err: [Inf, 0.2504185892213136, 0.20854667044244707] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 54, 5]]
** centroid: 1, normalized-entropy: 0.4186843105268563, [(2, 54), (3, 5)]
*** center 2: selecting labels [1] (freq >= 2) [from [72, 1, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [91, 6, 0]]
** centroid: 3, normalized-entropy: 0.3347676126777638, [(1, 91), (2, 6)]
*** center 4: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 26, 4]]
** centroid: 5, normalized-entropy: 0.5665095065529052, [(2, 26), (3, 4)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [51, 3, 0]]
** centroid: 6, normalized-entropy: 0.3095434291503252, [(1, 51), (2, 3)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 96, 1]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.36853077057376504] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.36853077057376504, 0.24427895570546387] ***
*** finished computation of 7 references, err: [Inf, 0.36853077057376504, 0.24427895570546387] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [18, 6, 0]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(1, 18), (2, 6)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [59, 97, 5]]
** centroid: 2, normalized-entropy: 0.7108755731185303, [(1, 59), (2, 97), (3, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 60, 10]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(2, 60), (3, 10)]
*** center 4: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [29, 33, 0]]
** centroid: 5, normalized-entropy: 0.9969954265557693, [(1, 29), (2, 33)]
*** center 6: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24175302568078041] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24175302568078041, 0.21182601661980152] ***
*** finished computation of 7 references, err: [Inf, 0.24175302568078041, 0.21182601661980152] ***
*** center 1: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [55, 9, 0]]
** centroid: 2, normalized-entropy: 0.5858732928619204, [(1, 55), (2, 9)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [85, 12, 0]]
** centroid: 3, normalized-entropy: 0.5399357331112666, [(1, 85), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [30, 45, 0]]
** centroid: 4, normalized-entropy: 0.9709505944546688, [(1, 30), (2, 45)]
*** center 5: selecting labels [2] (freq >= 2) [from [1, 70, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [29, 7, 0]]
** centroid: 6, normalized-entropy: 0.710676853856123, [(1, 29), (2, 7)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 41, 13]]
** centroid: 7, normalized-entropy: 0.7962699368824384, [(2, 41), (3, 13)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23741000108979643] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23741000108979643, 0.19312856467161327] ***
*** finished computation of 7 references, err: [Inf, 0.23741000108979643, 0.19312856467161327] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [49, 15, 0]]
** centroid: 1, normalized-entropy: 0.7855602922535471, [(1, 49), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [66, 17, 0]]
** centroid: 2, normalized-entropy: 0.7314625617214586, [(1, 66), (2, 17)]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 55, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [21, 50, 0]]
** centroid: 5, normalized-entropy: 0.8760643678555242, [(1, 21), (2, 50)]
*** center 6: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 46, 15]]
** centroid: 7, normalized-entropy: 0.8047175193210769, [(2, 46), (3, 15)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24382466854620724] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24382466854620724, 0.21586028154566883] ***
*** finished computation of 7 references, err: [Inf, 0.24382466854620724, 0.21586028154566883] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [66, 19, 0]]
** centroid: 1, normalized-entropy: 0.7665599404543365, [(1, 66), (2, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [38, 31, 0]]
** centroid: 3, normalized-entropy: 0.992563136012236, [(1, 38), (2, 31)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [102, 14, 0]]
** centroid: 4, normalized-entropy: 0.5313400141801669, [(1, 102), (2, 14)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 50, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 51, 5]]
** centroid: 6, normalized-entropy: 0.4340811200043348, [(2, 51), (3, 5)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 9, 9]]
** centroid: 7, normalized-entropy: 1.0, [(2, 9), (3, 9)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29682713764905927] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29682713764905927, 0.21728888650611042] ***
*** finished computation of 7 references, err: [Inf, 0.29682713764905927, 0.21728888650611042] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [29, 65, 0]]
** centroid: 1, normalized-entropy: 0.8914467590654126, [(1, 29), (2, 65)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [83, 27, 0]]
** centroid: 2, normalized-entropy: 0.803993937522765, [(1, 83), (2, 27)]
*** center 3: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 63, 1]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 15, 11]]
** centroid: 5, normalized-entropy: 0.9828586897127057, [(2, 15), (3, 11)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [83, 14, 0]]
** centroid: 6, normalized-entropy: 0.5954670513561874, [(1, 83), (2, 14)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2477142153289169] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2477142153289169, 0.21590086942352354] ***
*** finished computation of 7 references, err: [Inf, 0.2477142153289169, 0.21590086942352354] ***
*** center 1: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [29, 73, 10]]
** centroid: 2, normalized-entropy: 0.7687531397348596, [(1, 29), (2, 73), (3, 10)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [31, 6, 0]]
** centroid: 3, normalized-entropy: 0.6394571324851642, [(1, 31), (2, 6)]
*** center 4: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [2, 67, 0]]
** centroid: 5, normalized-entropy: 0.18927843126120178, [(1, 2), (2, 67)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [45, 32, 0]]
** centroid: 6, normalized-entropy: 0.9793399259567798, [(1, 45), (2, 32)]
*** center 7: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.34270335941948] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34270335941948, 0.2285697849895805] ***
*** finished computation of 7 references, err: [Inf, 0.34270335941948, 0.2285697849895805] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [14, 21, 0]]
** centroid: 1, normalized-entropy: 0.9709505944546688, [(1, 14), (2, 21)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 78, 8]]
** centroid: 2, normalized-entropy: 0.446481346896803, [(2, 78), (3, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [111, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [66, 67, 0]]
** centroid: 4, normalized-entropy: 0.9999592201754102, [(1, 66), (2, 67)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [10, 30, 0]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(1, 10), (2, 30)]
*** center 6: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [44, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22919903901405633] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22919903901405633, 0.20330792389251293] ***
*** finished computation of 7 references, err: [Inf, 0.22919903901405633, 0.20330792389251293] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 61, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 47, 10]]
** centroid: 2, normalized-entropy: 0.6699960320994334, [(2, 47), (3, 10)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [11, 47, 0]]
** centroid: 3, normalized-entropy: 0.7007495497162061, [(1, 11), (2, 47)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [53, 2, 0]]
** centroid: 4, normalized-entropy: 0.22536363912739493, [(1, 53), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [101, 6, 0]]
** centroid: 5, normalized-entropy: 0.31166198862303296, [(1, 101), (2, 6)]
*** center 6: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3096491174120456] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3096491174120456, 0.2124185070283711] ***
*** finished computation of 7 references, err: [Inf, 0.3096491174120456, 0.2124185070283711] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 55, 11]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(2, 55), (3, 11)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [30, 47, 0]]
** centroid: 2, normalized-entropy: 0.9645476589143235, [(1, 30), (2, 47)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [9, 54, 0]]
** centroid: 3, normalized-entropy: 0.5916727785823274, [(1, 9), (2, 54)]
*** center 4: selecting labels [1] (freq >= 2) [from [145, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [30, 5, 0]]
** centroid: 5, normalized-entropy: 0.5916727785823274, [(1, 30), (2, 5)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 32, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.274076118376106] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.274076118376106, 0.20584385659173132] ***
*** finished computation of 7 references, err: [Inf, 0.274076118376106, 0.20584385659173132] ***
*** center 1: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [47, 56, 0]]
** centroid: 3, normalized-entropy: 0.994485462483463, [(1, 47), (2, 56)]
*** center 4: selecting labels [1] (freq >= 2) [from [40, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [2, 41, 0]]
** centroid: 5, normalized-entropy: 0.2713895875081112, [(1, 2), (2, 41)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 56, 11]]
** centroid: 6, normalized-entropy: 0.6442142137378306, [(2, 56), (3, 11)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [36, 33, 0]]
** centroid: 7, normalized-entropy: 0.9986359641585719, [(1, 36), (2, 33)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27781835922785103] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27781835922785103, 0.21296526401489974] ***
*** finished computation of 7 references, err: [Inf, 0.27781835922785103, 0.21296526401489974] ***
*** center 1: selecting labels [1] (freq >= 2) [from [49, 1, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [4, 113, 10]]
** centroid: 2, normalized-entropy: 0.3758923056755221, [(1, 4), (2, 113), (3, 10)]
*** center 3: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [5, 69, 0]]
** centroid: 4, normalized-entropy: 0.35678001438394347, [(1, 5), (2, 69)]
*** center 5: selecting labels [1] (freq >= 2) [from [41, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [46, 6, 0]]
** centroid: 7, normalized-entropy: 0.5159469300074472, [(1, 46), (2, 6)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3202257245630026] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3202257245630026, 0.244134464148432] ***
*** finished computation of 7 references, err: [Inf, 0.3202257245630026, 0.244134464148432] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [111, 3, 0]]
** centroid: 1, normalized-entropy: 0.17556502585750275, [(1, 111), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 27, 0]]
** centroid: 2, normalized-entropy: 0.9505668528932193, [(1, 46), (2, 27)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [54, 12, 0]]
** centroid: 3, normalized-entropy: 0.6840384356390419, [(1, 54), (2, 12)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 70, 13]]
** centroid: 4, normalized-entropy: 0.6261776539736496, [(2, 70), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [57, 5, 0]]
** centroid: 5, normalized-entropy: 0.4044483864864384, [(1, 57), (2, 5)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [19, 58, 0]]
** centroid: 6, normalized-entropy: 0.8060914696192223, [(1, 19), (2, 58)]
*** center 7: selecting labels [1] (freq >= 2) [from [25, 0, 0]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24941172741539777] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24941172741539777, 0.1966188417803496] ***
*** finished computation of 7 references, err: [Inf, 0.24941172741539777, 0.1966188417803496] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [64, 18, 0]]
** centroid: 1, normalized-entropy: 0.7592757847892834, [(1, 64), (2, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [13, 65, 0]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(1, 13), (2, 65)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [44, 8, 0]]
** centroid: 3, normalized-entropy: 0.6193821946787638, [(1, 44), (2, 8)]
*** center 4: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 71, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 24, 15]]
** centroid: 7, normalized-entropy: 0.961236604722876, [(2, 24), (3, 15)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23214337344281374] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23214337344281374, 0.206052944438532] ***
*** finished computation of 7 references, err: [Inf, 0.23214337344281374, 0.206052944438532] ***
*** center 1: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [52, 23, 0]]
** centroid: 2, normalized-entropy: 0.8892881527272397, [(1, 52), (2, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [44, 46, 0]]
** centroid: 3, normalized-entropy: 0.9996437496778561, [(1, 44), (2, 46)]
*** center 4: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 70, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [73, 1, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 44, 9]]
** centroid: 7, normalized-entropy: 0.6572729784684466, [(2, 44), (3, 9)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3013590148761868] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3013590148761868, 0.2396926572173834] ***
*** finished computation of 7 references, err: [Inf, 0.3013590148761868, 0.2396926572173834] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [33, 92, 17]]
** centroid: 1, normalized-entropy: 0.795969055076388, [(1, 33), (2, 92), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [46, 15, 0]]
** centroid: 4, normalized-entropy: 0.8047175193210769, [(1, 46), (2, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [29, 64, 0]]
** centroid: 5, normalized-entropy: 0.8952722642402938, [(1, 29), (2, 64)]
*** center 6: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [26, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.30413106264173984] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30413106264173984, 0.24255419797450303] ***
*** finished computation of 7 references, err: [Inf, 0.30413106264173984, 0.24255419797450303] ***
*** center 1: selecting labels [1] (freq >= 2) [from [147, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [83, 10, 0]]
** centroid: 2, normalized-entropy: 0.49241092131589825, [(1, 83), (2, 10)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [16, 65, 0]]
** centroid: 3, normalized-entropy: 0.7169622516889513, [(1, 16), (2, 65)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [24, 29, 0]]
** centroid: 4, normalized-entropy: 0.9935704757706079, [(1, 24), (2, 29)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 25, 7]]
** centroid: 5, normalized-entropy: 0.7578784625383954, [(2, 25), (3, 7)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [32, 32, 0]]
** centroid: 6, normalized-entropy: 1.0, [(1, 32), (2, 32)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 29, 1]]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29542075452953576] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29542075452953576, 0.22239094515144825] ***
*** finished computation of 7 references, err: [Inf, 0.29542075452953576, 0.22239094515144825] ***
*** center 1: selecting labels [1] (freq >= 2) [from [139, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [43, 48, 0]]
** centroid: 2, normalized-entropy: 0.9978211842997324, [(1, 43), (2, 48)]
*** center 3: selecting labels [1] (freq >= 2) [from [38, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [29, 32, 0]]
** centroid: 4, normalized-entropy: 0.9982545693874832, [(1, 29), (2, 32)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [7, 8, 0]]
** centroid: 5, normalized-entropy: 0.9967916319816367, [(1, 7), (2, 8)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 66, 11]]
** centroid: 6, normalized-entropy: 0.5916727785823274, [(2, 66), (3, 11)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [51, 28, 0]]
** centroid: 7, normalized-entropy: 0.9379626436434424, [(1, 51), (2, 28)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.32344056996330617] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32344056996330617, 0.22025980528257788] ***
*** finished computation of 7 references, err: [Inf, 0.32344056996330617, 0.22025980528257788] ***
*** center 1: selecting labels [1] (freq >= 2) [from [141, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 44, 10]]
** centroid: 2, normalized-entropy: 0.6912898694057888, [(2, 44), (3, 10)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [71, 16, 0]]
** centroid: 3, normalized-entropy: 0.6885521684368613, [(1, 71), (2, 16)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 49, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [18, 63, 0]]
** centroid: 5, normalized-entropy: 0.7642045065086204, [(1, 18), (2, 63)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [59, 2, 0]]
** centroid: 6, normalized-entropy: 0.20818094555717087, [(1, 59), (2, 2)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [22, 5, 0]]
** centroid: 7, normalized-entropy: 0.6912898694057888, [(1, 22), (2, 5)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.32761847325135024] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32761847325135024, 0.2153458040729165] ***
*** finished computation of 7 references, err: [Inf, 0.32761847325135024, 0.2153458040729165] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 56, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [77, 35, 0]]
** centroid: 3, normalized-entropy: 0.8960382325345574, [(1, 77), (2, 35)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 28, 2]]
** centroid: 4, normalized-entropy: 0.3533593350214213, [(2, 28), (3, 2)]
*** center 5: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [38, 16, 0]]
** centroid: 6, normalized-entropy: 0.876716288999464, [(1, 38), (2, 16)]
*** center 7: selecting labels [1, 2, 3] (freq >= 2) [from [19, 55, 10]]
** centroid: 7, normalized-entropy: 0.7890375618580447, [(1, 19), (2, 55), (3, 10)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28003147716261445] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28003147716261445, 0.21531451758742332] ***
*** finished computation of 7 references, err: [Inf, 0.28003147716261445, 0.21531451758742332] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [62, 26, 0]]
** centroid: 1, normalized-entropy: 0.8756633923230399, [(1, 62), (2, 26)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 44, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 18, 13]]
** centroid: 3, normalized-entropy: 0.9811522341999134, [(2, 18), (3, 13)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [64, 31, 0]]
** centroid: 4, normalized-entropy: 0.9111178649415465, [(1, 64), (2, 31)]
*** center 5: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 41, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [79, 15, 0]]
** centroid: 7, normalized-entropy: 0.6332905746550958, [(1, 79), (2, 15)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2960600768979639] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2960600768979639, 0.2273358279261738] ***
*** finished computation of 7 references, err: [Inf, 0.2960600768979639, 0.2273358279261738] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [25, 4, 0]]
** centroid: 1, normalized-entropy: 0.5787946246321198, [(1, 25), (2, 4)]
*** center 2: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [104, 16, 0]]
** centroid: 3, normalized-entropy: 0.5665095065529052, [(1, 104), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [23, 68, 0]]
** centroid: 4, normalized-entropy: 0.8156034512499668, [(1, 23), (2, 68)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 123, 13]]
** centroid: 5, normalized-entropy: 0.4548525435109225, [(2, 123), (3, 13)]
*** center 6: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [18, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2981003696098924] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2981003696098924, 0.23015157651156187] ***
*** finished computation of 7 references, err: [Inf, 0.2981003696098924, 0.23015157651156187] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [36, 55, 0]]
** centroid: 1, normalized-entropy: 0.9683211863989214, [(1, 36), (2, 55)]
*** center 2: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [48, 12, 0]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(1, 48), (2, 12)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 29, 5]]
** centroid: 4, normalized-entropy: 0.6024308020404452, [(2, 29), (3, 5)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 84, 8]]
** centroid: 5, normalized-entropy: 0.42622865699814483, [(2, 84), (3, 8)]
*** center 6: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [40, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24018471996672452] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24018471996672452, 0.20209227676317096] ***
*** finished computation of 7 references, err: [Inf, 0.24018471996672452, 0.20209227676317096] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 15, 10]]
** centroid: 1, normalized-entropy: 0.9709505944546688, [(2, 15), (3, 10)]
*** center 2: selecting labels [2] (freq >= 2) [from [1, 45, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [73, 19, 0]]
** centroid: 3, normalized-entropy: 0.7347813522127804, [(1, 73), (2, 19)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [80, 39, 0]]
** centroid: 4, normalized-entropy: 0.9125914261094841, [(1, 80), (2, 39)]
*** center 5: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 60, 3]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(2, 60), (3, 3)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.30292097029229625] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30292097029229625, 0.2257087145661935] ***
*** finished computation of 7 references, err: [Inf, 0.30292097029229625, 0.2257087145661935] ***
*** center 1: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [8, 84, 0]]
** centroid: 2, normalized-entropy: 0.42622865699814483, [(1, 8), (2, 84)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 48, 15]]
** centroid: 3, normalized-entropy: 0.7918583525674836, [(2, 48), (3, 15)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [41, 28, 0]]
** centroid: 4, normalized-entropy: 0.9742408334889756, [(1, 41), (2, 28)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [113, 3, 0]]
** centroid: 5, normalized-entropy: 0.17319556189412666, [(1, 113), (2, 3)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [36, 20, 0]]
** centroid: 6, normalized-entropy: 0.940285958670631, [(1, 36), (2, 20)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [7, 10, 0]]
** centroid: 7, normalized-entropy: 0.9774178175281716, [(1, 7), (2, 10)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25088804903440176] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25088804903440176, 0.2112445872798562] ***
*** finished computation of 7 references, err: [Inf, 0.25088804903440176, 0.2112445872798562] ***
*** center 1: selecting labels [1] (freq >= 2) [from [130, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [21, 53, 0]]
** centroid: 2, normalized-entropy: 0.8605553930586318, [(1, 21), (2, 53)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 58, 6]]
** centroid: 3, normalized-entropy: 0.44886448872302936, [(2, 58), (3, 6)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [109, 10, 0]]
** centroid: 4, normalized-entropy: 0.41623480238728294, [(1, 109), (2, 10)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [58, 2, 0]]
** centroid: 5, normalized-entropy: 0.2108423003185322, [(1, 58), (2, 2)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 39, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 12, 0]]
** centroid: 7, normalized-entropy: 0.5916727785823274, [(1, 2), (2, 12)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.34255262417532506] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34255262417532506, 0.25458174403710293] ***
*** finished computation of 7 references, err: [Inf, 0.34255262417532506, 0.25458174403710293] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [61, 12, 0]]
** centroid: 1, normalized-entropy: 0.644694043811662, [(1, 61), (2, 12)]
*** center 2: selecting labels [1] (freq >= 2) [from [187, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [5, 21, 0]]
** centroid: 3, normalized-entropy: 0.7062740891876008, [(1, 5), (2, 21)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [40, 27, 0]]
** centroid: 4, normalized-entropy: 0.9726699911457106, [(1, 40), (2, 27)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 49, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [17, 50, 0]]
** centroid: 6, normalized-entropy: 0.8171387756817725, [(1, 17), (2, 50)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 21, 10]]
** centroid: 7, normalized-entropy: 0.9071657675730821, [(2, 21), (3, 10)]
finished with 12 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 367,3 => 24,1 => 609), Dict(2 => 349,3 => 46,1 => 605))
[ Info: ===== scores for single classifier: {"micro_f1":0.94,"precision":0.94,"recall":0.94,"macro_recall":0.9483514488463695,"macro_f1":0.8797519317727076,"accuracy":0.94,"class_f1":{"2":0.9099099099099099,"3":0.7540983606557378,"1":0.9752475247524752},"class_precision":{"2":0.9558359621451105,"3":0.6052631578947368,"1":0.9736408566721582},"class_recall":{"2":0.8681948424068768,"3":1.0,"1":0.9768595041322314}}
[ Info: ===== scores for 1: {"micro_f1":0.984,"precision":0.984,"recall":0.984,"macro_recall":0.9879514078003268,"macro_f1":0.9846392426113288,"accuracy":0.984,"class_f1":{"2":0.9770773638968482,"3":0.989247311827957,"1":0.9875930521091812},"class_precision":{"2":0.9770773638968482,"3":0.9787234042553191,"1":0.9884105960264901},"class_recall":{"2":0.9770773638968482,"3":1.0,"1":0.9867768595041322}}
[ Info: ===== scores for 5: {"micro_f1":0.979,"precision":0.979,"recall":0.979,"macro_recall":0.9835800042624737,"macro_f1":0.9776060213726168,"accuracy":0.979,"class_f1":{"2":0.9697841726618706,"3":0.9787234042553191,"1":0.9843104872006606},"class_precision":{"2":0.9739884393063584,"3":0.9583333333333334,"1":0.9834983498349835},"class_recall":{"2":0.9656160458452722,"3":1.0,"1":0.9851239669421488}}
[ Info: ===== scores for 7: {"micro_f1":0.974,"precision":0.974,"recall":0.974,"macro_recall":0.9800168920252276,"macro_f1":0.9645662592363626,"accuracy":0.974,"class_f1":{"2":0.9626436781609194,"3":0.9484536082474228,"1":0.9826014913007456},"class_precision":{"2":0.9654178674351584,"3":0.9019607843137255,"1":0.9850498338870431},"class_recall":{"2":0.9598853868194842,"3":1.0,"1":0.9801652892561984}}
[ Info: ===== scores for 9: {"micro_f1":0.979,"precision":0.979,"recall":0.979,"macro_recall":0.9835800042624737,"macro_f1":0.9683309159322367,"accuracy":0.979,"class_f1":{"2":0.9697841726618706,"3":0.9484536082474228,"1":0.9867549668874173},"class_precision":{"2":0.9739884393063584,"3":0.9019607843137255,"1":0.988391376451078},"class_recall":{"2":0.9656160458452722,"3":1.0,"1":0.9851239669421488}}
[ Info: ===== scores for 11: {"micro_f1":0.979,"precision":0.979,"recall":0.979,"macro_recall":0.9835800042624737,"macro_f1":0.9653773922173997,"accuracy":0.979,"class_f1":{"2":0.9697841726618706,"3":0.9387755102040816,"1":0.9875724937862469},"class_precision":{"2":0.9739884393063584,"3":0.8846153846153846,"1":0.9900332225913622},"class_recall":{"2":0.9656160458452722,"3":1.0,"1":0.9851239669421488}}
(score = 0.984, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.984, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.984, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.984, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.982, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.982, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.982, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.982, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.979, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.979, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.982, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.982, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.974, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.974, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.982, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.982, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.984,"k":1,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.984,"precision":0.984,"recall":0.984,"macro_recall":0.9879514078003268,"macro_f1":0.9846392426113288,"accuracy":0.984,"class_f1":{"2":0.9770773638968482,"3":0.989247311827957,"1":0.9875930521091812},"class_precision":{"2":0.9770773638968482,"3":0.9787234042553191,"1":0.9884105960264901},"class_recall":{"2":0.9770773638968482,"3":1.0,"1":0.9867768595041322}}
Test Summary: | Pass  Total
AKNC          |    8      8
[20, 1, 1, 1, 2, 6, 5, 2, 13, 2, 34, 7, 3, 5, 3, 1, 4, 1, 8, 1, 6, 5, 4, 1, 1, 2, 2, 3, 9, 2, 6, 7, 177, 10, 68, 6, 7, 11, 28, 14, 2, 10, 5, 4, 10, 19, 11, 12, 6, 3, 17, 6, 20, 236, 4, 8, 54, 9, 2, 44, 6, 9, 5, 1, 1, 14, 21, 20, 12, 5, 21, 30, 5, 139, 4, 28, 49, 10, 45, 2, 8, 2, 57, 10, 4, 5, 18, 27, 4, 20, 16, 30, 31, 28, 21, 8, 13, 32, 48, 15, 5, 36, 14, 20, 4, 480, 60, 5, 6, 13, 37, 5, 23, 3, 14, 3, 45, 109, 5, 104, 31, 13, 9, 30, 9, 11, 7, 36, 26, 35, 30, 27, 14, 5, 2, 13, 48, 11, 11, 14, 7, 18, 66, 66, 5, 8, 4, 26, 41, 17, 1, 8, 11, 48, 3, 33, 154, 21, 1, 20, 28, 38, 30, 36, 7, 11, 586, 24, 27, 2, 9, 14, 22, 81, 42, 4, 473, 30, 72, 10, 45, 7, 50, 36, 1, 38, 28, 61, 4, 18, 76, 50, 15, 77, 365, 5, 4, 2, 35, 4, 22, 41, 23, 6, 20, 9, 18, 11, 12, 12, 8, 22, 64, 4, 32, 568, 11, 11, 139, 54, 51, 14, 13, 29, 39, 52, 16, 110, 37, 10, 25, 42, 8, 4, 50, 31, 55, 7, 4, 4, 56, 77, 27, 38, 53, 13, 6, 28, 13, 143, 32, 7, 9, 31, 6, 20, 27, 30, 11, 31, 5, 12, 12, 168, 39, 12, 22, 5, 35, 18, 34, 7, 9, 62, 49, 113, 4, 20, 115, 10, 56, 24, 11, 8, 11, 14, 10, 34, 14, 12, 7, 83, 43, 3, 99, 64, 166, 15, 20, 16]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6219999999999999, speedup = 0.3116211443348247, eval_ratio = 0.072068)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.3472532242063489,"recall":0.33593749999999983,"f1":null,"seconds":0.00025863759219646454,"exhaustive_search_seconds":0.0006313268095254898,"evaluations":470.6328125,"distances_sum":1748.4381681506297}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5251736111111109,"recall":0.5251736111111109,"f1":null,"seconds":0.0002744123339653015,"exhaustive_search_seconds":0.0006313268095254898,"evaluations":622.9453125,"distances_sum":1690.8816556300776}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6449652777777776,"recall":0.6449652777777776,"f1":0.6449652777777776,"seconds":0.0006053037941455841,"exhaustive_search_seconds":0.0006313268095254898,"evaluations":761.7421875,"distances_sum":1621.846615658408}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7161458333333329,"recall":0.7161458333333329,"f1":0.7161458333333329,"seconds":0.0004905089735984802,"exhaustive_search_seconds":0.0006313268095254898,"evaluations":892.5625,"distances_sum":1596.1733530312292}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7751736111111102,"recall":0.7751736111111102,"f1":0.7751736111111102,"seconds":0.0004467107355594635,"exhaustive_search_seconds":0.0006313268095254898,"evaluations":1002.8125,"distances_sum":1577.7832755915406}
KCenters.DeloneInvIndex> reached performance {"precision":0.8246527777777769,"recall":0.8246527777777769,"f1":0.8246527777777769,"seconds":0.0005814414471387863,"exhaustive_search_seconds":0.0006313268095254898,"evaluations":1118.1953125,"distances_sum":1564.0199195605323}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.811, speedup = 0.40613156646353227, eval_ratio = 0.10656700000000001)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
