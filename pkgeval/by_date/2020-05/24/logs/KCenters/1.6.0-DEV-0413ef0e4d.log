Julia Version 1.6.0-DEV.85
Commit 0413ef0e4d (2020-05-24 02:53 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Missings ──────────────────── v0.4.3
  Installed TableTraits ───────────────── v1.0.0
  Installed Compat ────────────────────── v3.10.0
  Installed KCenters ──────────────────── v0.2.2
  Installed JSON ──────────────────────── v0.21.0
  Installed StatsBase ─────────────────── v0.32.2
  Installed MLDataPattern ─────────────── v0.5.3
  Installed SimilaritySearch ──────────── v0.3.19
  Installed Reexport ──────────────────── v0.2.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed MappedArrays ──────────────── v0.2.2
  Installed InvertedIndices ───────────── v1.0.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed DataAPI ───────────────────── v1.3.0
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed DataFrames ────────────────── v0.20.2
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed DataValueInterfaces ───────── v1.0.0
  Installed Parsers ───────────────────── v1.0.4
  Installed OrderedCollections ────────── v1.2.0
  Installed DataStructures ────────────── v0.17.17
  Installed CategoricalArrays ─────────── v0.7.7
  Installed Tables ────────────────────── v1.0.4
  Installed MLDataUtils ───────────────── v0.5.1
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.10.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.17
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.4
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_1JTthI/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_1JTthI/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.10.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.17
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.4
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.932025450070699
[ Info: 0.8302954188982645
[ Info: 0.5531853482623895
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3300125753134489
mean(cdnet.distances) = 0.45805171656111876
mean(crand.distances) = 0.33023106488088766
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3623046875, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.3623046875,"f1":null,"seconds":5.088746547698975e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":6.2578125,"distances_sum":987.4260160118489}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1552734375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1552734375,"f1":null,"seconds":3.898516297340393e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":5.203125,"distances_sum":480.06280506640377}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8483474858474866,"seconds":5.988404154777527e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.1875,"distances_sum":2288.516168836525}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7529296875,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7529296875,"f1":0.8483474858474866,"seconds":5.988404154777527e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.1875,"distances_sum":2288.516168836525}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9536515567765571,"seconds":7.113441824913025e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.765625,"distances_sum":2981.101321622681}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":7,"bsize":8},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9536515567765571,"seconds":7.113441824913025e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.765625,"distances_sum":2981.101321622681}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9627289377289381,"seconds":9.63360071182251e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8828125,"distances_sum":3030.5409583160204}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9627289377289381,"seconds":9.63360071182251e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8828125,"distances_sum":3030.5409583160204}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.93359375,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9627289377289381,"seconds":9.63360071182251e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8828125,"distances_sum":3030.5409583160204}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4072265625, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.4072265625,"f1":null,"seconds":5.478039383888245e-6,"exhaustive_search_seconds":1.912936568260193e-6,"evaluations":6.59375,"distances_sum":914.5376207793904}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.455078125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.455078125,"f1":null,"seconds":5.198642611503601e-6,"exhaustive_search_seconds":1.912936568260193e-6,"evaluations":6.8125,"distances_sum":1079.3917921744119}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7998046875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7998046875,"f1":0.8816079753579762,"seconds":7.277354598045349e-6,"exhaustive_search_seconds":1.912936568260193e-6,"evaluations":8.28125,"distances_sum":2164.551050653821}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7998046875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7998046875,"f1":0.8816079753579762,"seconds":7.277354598045349e-6,"exhaustive_search_seconds":1.912936568260193e-6,"evaluations":8.28125,"distances_sum":2164.551050653821}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9516056859806865,"seconds":7.187947630882263e-6,"exhaustive_search_seconds":1.912936568260193e-6,"evaluations":8.7578125,"distances_sum":2712.8831726527715}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9477564102564106,"seconds":0.00038696639239788055,"exhaustive_search_seconds":1.912936568260193e-6,"evaluations":8.796875,"distances_sum":2641.51468948238}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9222787629037635,"seconds":6.496906280517578e-6,"exhaustive_search_seconds":1.912936568260193e-6,"evaluations":8.515625,"distances_sum":2470.6757313846556}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8095703125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.8095703125,"f1":0.8881472693972703,"seconds":5.6587159633636475e-6,"exhaustive_search_seconds":1.912936568260193e-6,"evaluations":8.3046875,"distances_sum":2223.0424500818044}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9299049908424918,"seconds":6.726011633872986e-6,"exhaustive_search_seconds":1.912936568260193e-6,"evaluations":8.578125,"distances_sum":2482.534919618923}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9169921875,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9169921875,"f1":0.9516056859806865,"seconds":7.187947630882263e-6,"exhaustive_search_seconds":1.912936568260193e-6,"evaluations":8.7578125,"distances_sum":2712.8831726527715}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9565533424908429,"seconds":6.6552311182022095e-6,"exhaustive_search_seconds":1.912936568260193e-6,"evaluations":8.84375,"distances_sum":2724.754256253141}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9735691391941395,"seconds":6.770715117454529e-6,"exhaustive_search_seconds":1.912936568260193e-6,"evaluations":8.921875,"distances_sum":2827.3247765343776}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9608516483516488,"seconds":7.33695924282074e-6,"exhaustive_search_seconds":1.912936568260193e-6,"evaluations":8.84375,"distances_sum":2760.8171735247743}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9755780677655681,"seconds":6.426125764846802e-6,"exhaustive_search_seconds":1.912936568260193e-6,"evaluations":8.9296875,"distances_sum":2856.3884723740566}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.956141254578755,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.912936568260193e-6,"evaluations":8.78125,"distances_sum":2719.632382641045}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9729941933066935,"seconds":8.802860975265503e-6,"exhaustive_search_seconds":1.912936568260193e-6,"evaluations":8.9140625,"distances_sum":2853.092469047193}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9674539002664004,"seconds":1.163966953754425e-5,"exhaustive_search_seconds":1.912936568260193e-6,"evaluations":8.8671875,"distances_sum":2817.5269032692045}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9755780677655681,"seconds":6.426125764846802e-6,"exhaustive_search_seconds":1.912936568260193e-6,"evaluations":8.9296875,"distances_sum":2856.3884723740566}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9755780677655681,"seconds":6.426125764846802e-6,"exhaustive_search_seconds":1.912936568260193e-6,"evaluations":8.9296875,"distances_sum":2856.3884723740566}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1474609375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1474609375,"f1":null,"seconds":5.204230546951294e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":5.140625,"distances_sum":401.70938694755733}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.8709628912753922,"seconds":8.38935375213623e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":7.9453125,"distances_sum":2261.2660325496345}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.564453125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.564453125,"f1":null,"seconds":7.312744855880737e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":7.1484375,"distances_sum":1510.388818508418}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7841796875,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7841796875,"f1":0.8709628912753922,"seconds":8.38935375213623e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":7.9453125,"distances_sum":2261.2660325496345}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8722418206793218,"seconds":7.6089054346084595e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":7.96875,"distances_sum":2259.6755259939655}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78515625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.78515625,"f1":0.8722418206793218,"seconds":7.6089054346084595e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":7.96875,"distances_sum":2259.6755259939655}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.78515625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.78515625,"f1":0.8722418206793218,"seconds":7.6089054346084595e-6,"exhaustive_search_seconds":2.1867454051971436e-6,"evaluations":7.96875,"distances_sum":2259.6755259939655}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4267578125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4267578125,"f1":null,"seconds":7.411465048789978e-6,"exhaustive_search_seconds":2.468004822731018e-6,"evaluations":7.25,"distances_sum":1095.5189736135735}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.400390625, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.400390625,"f1":null,"seconds":7.255002856254578e-6,"exhaustive_search_seconds":2.468004822731018e-6,"evaluations":7.3125,"distances_sum":987.7531742367919}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4267578125,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.4267578125,"f1":null,"seconds":7.411465048789978e-6,"exhaustive_search_seconds":2.468004822731018e-6,"evaluations":7.25,"distances_sum":1095.5189736135735}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6806640625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6806640625,"f1":0.7918534590409598,"seconds":8.409842848777771e-6,"exhaustive_search_seconds":2.468004822731018e-6,"evaluations":7.8203125,"distances_sum":1933.6947233453718}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.802734375, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.802734375,"f1":0.8810168997669006,"seconds":9.169802069664001e-6,"exhaustive_search_seconds":2.468004822731018e-6,"evaluations":8.2265625,"distances_sum":2358.8865716215014}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.56640625, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.56640625,"f1":null,"seconds":9.765848517417908e-6,"exhaustive_search_seconds":2.468004822731018e-6,"evaluations":7.625,"distances_sum":1487.1436934937835}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.8989734224109232,"seconds":9.577721357345581e-6,"exhaustive_search_seconds":2.468004822731018e-6,"evaluations":8.3046875,"distances_sum":2473.341320117673}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.830078125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.830078125,"f1":0.8989734224109232,"seconds":9.577721357345581e-6,"exhaustive_search_seconds":2.468004822731018e-6,"evaluations":8.3046875,"distances_sum":2473.341320117673}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9434638278388284,"seconds":9.311363101005554e-6,"exhaustive_search_seconds":2.468004822731018e-6,"evaluations":8.703125,"distances_sum":2845.0612208896473}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9491128663003666,"seconds":1.6860663890838623e-5,"exhaustive_search_seconds":2.468004822731018e-6,"evaluations":8.7734375,"distances_sum":2819.2816583450053}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9561240842490845,"seconds":1.167692244052887e-5,"exhaustive_search_seconds":2.468004822731018e-6,"evaluations":8.875,"distances_sum":2882.801009402542}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9530391483516489,"seconds":1.3628974556922913e-5,"exhaustive_search_seconds":2.468004822731018e-6,"evaluations":8.84375,"distances_sum":2883.417215911905}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9344442016317022,"seconds":1.535564661026001e-5,"exhaustive_search_seconds":2.468004822731018e-6,"evaluations":8.71875,"distances_sum":2759.8922103606374}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9331933691308698,"seconds":1.539662480354309e-5,"exhaustive_search_seconds":2.468004822731018e-6,"evaluations":8.671875,"distances_sum":2702.302372212327}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.944577297702298,"seconds":1.1974945664405823e-5,"exhaustive_search_seconds":2.468004822731018e-6,"evaluations":8.765625,"distances_sum":2806.8139325346506}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":8,"bsize":8},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9561240842490845,"seconds":1.167692244052887e-5,"exhaustive_search_seconds":2.468004822731018e-6,"evaluations":8.875,"distances_sum":2882.801009402542}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9208984375,"state":{"ssize":8,"bsize":8},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9561240842490845,"seconds":1.167692244052887e-5,"exhaustive_search_seconds":2.468004822731018e-6,"evaluations":8.875,"distances_sum":2882.801009402542}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8572888916638925,"seconds":8.247792720794678e-6,"exhaustive_search_seconds":2.125278115272522e-6,"evaluations":8.1171875,"distances_sum":2228.2525110195375}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8582459207459217,"seconds":7.791444659233093e-6,"exhaustive_search_seconds":2.125278115272522e-6,"evaluations":8.0078125,"distances_sum":2234.479509827536}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5341796875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5341796875,"f1":0.6802973068598073,"seconds":6.588175892829895e-6,"exhaustive_search_seconds":2.125278115272522e-6,"evaluations":7.1328125,"distances_sum":1431.9888931562496}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76953125,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.76953125,"f1":0.8572888916638925,"seconds":8.247792720794678e-6,"exhaustive_search_seconds":2.125278115272522e-6,"evaluations":8.1171875,"distances_sum":2228.2525110195375}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.794921875, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.794921875,"f1":0.8742798867798875,"seconds":8.11554491519928e-6,"exhaustive_search_seconds":2.125278115272522e-6,"evaluations":8.1015625,"distances_sum":2361.9541774888526}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8125, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8125,"f1":0.8877669205794214,"seconds":9.521842002868652e-6,"exhaustive_search_seconds":2.125278115272522e-6,"evaluations":8.234375,"distances_sum":2416.5495822479697}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8576740967365974,"seconds":1.0425224900245667e-5,"exhaustive_search_seconds":2.125278115272522e-6,"evaluations":8.0078125,"distances_sum":2283.760318396479}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.9048768939393949,"seconds":1.0386109352111816e-5,"exhaustive_search_seconds":2.125278115272522e-6,"evaluations":8.359375,"distances_sum":2554.1433523503165}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8681610056610065,"seconds":9.69134271144867e-6,"exhaustive_search_seconds":2.125278115272522e-6,"evaluations":8.078125,"distances_sum":2248.6815430117804}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.899899406149407,"seconds":1.0320916771888733e-5,"exhaustive_search_seconds":2.125278115272522e-6,"evaluations":8.375,"distances_sum":2508.615116595426}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.83984375,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.83984375,"f1":0.9048768939393949,"seconds":1.0386109352111816e-5,"exhaustive_search_seconds":2.125278115272522e-6,"evaluations":8.359375,"distances_sum":2554.1433523503165}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9655334249084253,"seconds":1.0872259736061096e-5,"exhaustive_search_seconds":2.125278115272522e-6,"evaluations":8.828125,"distances_sum":3028.1247276823497}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9664320054945058,"seconds":1.1067837476730347e-5,"exhaustive_search_seconds":2.125278115272522e-6,"evaluations":8.8671875,"distances_sum":2982.5441545536455}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":11,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9367273351648359,"seconds":1.3070181012153625e-5,"exhaustive_search_seconds":2.125278115272522e-6,"evaluations":8.7734375,"distances_sum":2743.0008412662164}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9446943681318685,"seconds":1.084059476852417e-5,"exhaustive_search_seconds":2.125278115272522e-6,"evaluations":8.65625,"distances_sum":2868.452167855735}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.857421875, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.857421875,"f1":0.916063103563104,"seconds":1.0708346962928772e-5,"exhaustive_search_seconds":2.125278115272522e-6,"evaluations":8.5078125,"distances_sum":2629.2596286440316}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9664320054945058,"seconds":1.1067837476730347e-5,"exhaustive_search_seconds":2.125278115272522e-6,"evaluations":8.8671875,"distances_sum":2982.5441545536455}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9664320054945058,"seconds":1.1067837476730347e-5,"exhaustive_search_seconds":2.125278115272522e-6,"evaluations":8.8671875,"distances_sum":2982.5441545536455}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3896484375, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.3896484375,"f1":null,"seconds":4.163011908531189e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":6.34375,"distances_sum":1022.9728211475217}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7919921875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7919921875,"f1":0.873150287212788,"seconds":8.476898074150085e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.2265625,"distances_sum":2298.5162922923555}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3701171875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3701171875,"f1":null,"seconds":9.605661034584045e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":6.3046875,"distances_sum":938.7252743589826}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.689453125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.689453125,"f1":0.8002060439560446,"seconds":1.0963529348373413e-5,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.578125,"distances_sum":1940.1985508098965}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7919921875,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7919921875,"f1":0.873150287212788,"seconds":8.476898074150085e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.2265625,"distances_sum":2298.5162922923555}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9418784340659346,"seconds":1.0732561349868774e-5,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.671875,"distances_sum":2804.3141939150205}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9572058150183153,"seconds":1.126900315284729e-5,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.828125,"distances_sum":2850.4384681695838}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9433150183150188,"seconds":1.085922122001648e-5,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.7421875,"distances_sum":2770.686408665969}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9572058150183153,"seconds":1.126900315284729e-5,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.828125,"distances_sum":2850.4384681695838}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9605685980685987,"seconds":1.0833144187927246e-5,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.796875,"distances_sum":2923.778254994562}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9726018772893775,"seconds":1.1056661605834961e-5,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.8828125,"distances_sum":3001.1170367679306}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9605311355311363,"seconds":1.2060627341270447e-5,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.84375,"distances_sum":2892.4899521479474}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9738667582417586,"seconds":1.337006688117981e-5,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.890625,"distances_sum":3001.971343602561}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9592662545787551,"seconds":1.0969117283821106e-5,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.859375,"distances_sum":2893.5898821537367}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9738667582417586,"seconds":1.337006688117981e-5,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.890625,"distances_sum":3001.971343602561}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9738667582417586,"seconds":1.337006688117981e-5,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.890625,"distances_sum":3001.971343602561}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.369140625, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.369140625,"f1":null,"seconds":7.08363950252533e-6,"exhaustive_search_seconds":2.4531036615371704e-6,"evaluations":6.34375,"distances_sum":978.5709498791398}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.673828125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.673828125,"f1":0.7894064269064276,"seconds":9.514391422271729e-6,"exhaustive_search_seconds":2.4531036615371704e-6,"evaluations":7.46875,"distances_sum":1865.4964115076864}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.843059024309025,"seconds":6.9588422775268555e-6,"exhaustive_search_seconds":2.4531036615371704e-6,"evaluations":7.875,"distances_sum":2167.8227993919186}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7490234375,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7490234375,"f1":0.843059024309025,"seconds":6.9588422775268555e-6,"exhaustive_search_seconds":2.4531036615371704e-6,"evaluations":7.875,"distances_sum":2167.8227993919186}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7861328125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7861328125,"f1":0.8690783175158182,"seconds":5.763024091720581e-6,"exhaustive_search_seconds":2.4531036615371704e-6,"evaluations":8.078125,"distances_sum":2288.8315377640242}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.9103053196803204,"seconds":6.167218089103699e-6,"exhaustive_search_seconds":2.4531036615371704e-6,"evaluations":8.3984375,"distances_sum":2567.859744837064}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9224645146520152,"seconds":6.020069122314453e-6,"exhaustive_search_seconds":2.4531036615371704e-6,"evaluations":8.5234375,"distances_sum":2656.904580944319}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8494552322677331,"seconds":5.684792995452881e-6,"exhaustive_search_seconds":2.4531036615371704e-6,"evaluations":7.9296875,"distances_sum":2127.980200885155}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8681640625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8681640625,"f1":0.9224645146520152,"seconds":6.020069122314453e-6,"exhaustive_search_seconds":2.4531036615371704e-6,"evaluations":8.5234375,"distances_sum":2656.904580944319}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9694768772893776,"seconds":6.457790732383728e-6,"exhaustive_search_seconds":2.4531036615371704e-6,"evaluations":8.859375,"distances_sum":2953.571602786687}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9567765567765569,"seconds":6.232410669326782e-6,"exhaustive_search_seconds":2.4531036615371704e-6,"evaluations":8.75,"distances_sum":2894.408581134496}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9480540293040297,"seconds":6.16908073425293e-6,"exhaustive_search_seconds":2.4531036615371704e-6,"evaluations":8.703125,"distances_sum":2809.292774594412}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9552770146520151,"seconds":6.336718797683716e-6,"exhaustive_search_seconds":2.4531036615371704e-6,"evaluations":8.78125,"distances_sum":2866.904154072191}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9438530219780223,"seconds":6.2193721532821655e-6,"exhaustive_search_seconds":2.4531036615371704e-6,"evaluations":8.6875,"distances_sum":2814.414797760523}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9326381951381959,"seconds":6.925314664840698e-6,"exhaustive_search_seconds":2.4531036615371704e-6,"evaluations":8.6640625,"distances_sum":2701.4393716320096}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9453125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9694768772893776,"seconds":6.457790732383728e-6,"exhaustive_search_seconds":2.4531036615371704e-6,"evaluations":8.859375,"distances_sum":2953.571602786687}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9453125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9694768772893776,"seconds":6.457790732383728e-6,"exhaustive_search_seconds":2.4531036615371704e-6,"evaluations":8.859375,"distances_sum":2953.571602786687}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5068359375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5068359375,"f1":0.6556726259851264,"seconds":3.4775584936141968e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":6.515625,"distances_sum":1384.9184718051742}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5068359375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5068359375,"f1":0.6556726259851264,"seconds":3.4775584936141968e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":6.515625,"distances_sum":1384.9184718051742}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6923828125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6923828125,"f1":0.807053363303364,"seconds":5.3085386753082275e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":7.8984375,"distances_sum":1815.5678269696855}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5224609375, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5224609375,"f1":0.6714833777333784,"seconds":4.114583134651184e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":6.6796875,"distances_sum":1424.1745600127786}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6923828125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6923828125,"f1":0.807053363303364,"seconds":5.3085386753082275e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":7.8984375,"distances_sum":1815.5678269696855}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.8909548784548792,"seconds":5.576759576797485e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.140625,"distances_sum":2350.357671051099}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9282509157509166,"seconds":3.868713974952698e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.65625,"distances_sum":2572.3279418409948}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8740234375,"state":{"ssize":7,"bsize":7},"perf":{"precision":1.0,"recall":0.8740234375,"f1":0.9282509157509166,"seconds":3.868713974952698e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.65625,"distances_sum":2572.3279418409948}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8740234375,"state":{"ssize":7,"bsize":7},"perf":{"precision":1.0,"recall":0.8740234375,"f1":0.9282509157509166,"seconds":3.868713974952698e-6,"exhaustive_search_seconds":1.6726553440093994e-6,"evaluations":8.65625,"distances_sum":2572.3279418409948}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.359375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.359375,"f1":null,"seconds":2.3171305656433105e-6,"exhaustive_search_seconds":9.611248970031738e-7,"evaluations":5.046875,"distances_sum":926.3263536321741}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4873046875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.4873046875,"f1":0.6356246184371187,"seconds":2.7641654014587402e-6,"exhaustive_search_seconds":9.611248970031738e-7,"evaluations":6.25,"distances_sum":1168.4368302712605}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.68359375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.68359375,"f1":0.8002050033300041,"seconds":3.632158041000366e-6,"exhaustive_search_seconds":9.611248970031738e-7,"evaluations":7.640625,"distances_sum":1611.7846159676558}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.68359375,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.68359375,"f1":0.8002050033300041,"seconds":3.632158041000366e-6,"exhaustive_search_seconds":9.611248970031738e-7,"evaluations":7.640625,"distances_sum":1611.7846159676558}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8518606393606402,"seconds":3.423541784286499e-6,"exhaustive_search_seconds":9.611248970031738e-7,"evaluations":7.96875,"distances_sum":1828.4147469373495}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.9195658508158514,"seconds":4.120171070098877e-6,"exhaustive_search_seconds":9.611248970031738e-7,"evaluations":8.484375,"distances_sum":2318.302500220066}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.8934555028305035,"seconds":3.7383288145065308e-6,"exhaustive_search_seconds":9.611248970031738e-7,"evaluations":8.421875,"distances_sum":2103.249157712957}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.861328125,"state":{"ssize":7,"bsize":7},"perf":{"precision":1.0,"recall":0.861328125,"f1":0.9195658508158514,"seconds":4.120171070098877e-6,"exhaustive_search_seconds":9.611248970031738e-7,"evaluations":8.484375,"distances_sum":2318.302500220066}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9617216117216121,"seconds":1.2742355465888977e-5,"exhaustive_search_seconds":9.611248970031738e-7,"evaluations":8.828125,"distances_sum":2604.466655044852}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9302197802197809,"seconds":1.0505318641662598e-5,"exhaustive_search_seconds":9.611248970031738e-7,"evaluations":8.5546875,"distances_sum":2405.494843349697}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8623046875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8623046875,"f1":0.921760531135532,"seconds":6.50063157081604e-6,"exhaustive_search_seconds":9.611248970031738e-7,"evaluations":8.484375,"distances_sum":2321.6811793486336}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9617216117216121,"seconds":1.2742355465888977e-5,"exhaustive_search_seconds":9.611248970031738e-7,"evaluations":8.828125,"distances_sum":2604.466655044852}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.931640625,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9617216117216121,"seconds":1.2742355465888977e-5,"exhaustive_search_seconds":9.611248970031738e-7,"evaluations":8.828125,"distances_sum":2604.466655044852}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3583984375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3583984375,"f1":null,"seconds":4.0549784898757935e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":5.34375,"distances_sum":851.0769766878725}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3583984375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3583984375,"f1":null,"seconds":4.0549784898757935e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":5.34375,"distances_sum":851.0769766878725}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.68359375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.68359375,"f1":0.801137404262405,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":7.78125,"distances_sum":1563.5208476446257}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8597386988011997,"seconds":6.07222318649292e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.1171875,"distances_sum":1855.766420678198}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.765625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.765625,"f1":0.8597386988011997,"seconds":6.07222318649292e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.1171875,"distances_sum":1855.766420678198}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9580185439560442,"seconds":8.549541234970093e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.6953125,"distances_sum":2558.873569488684}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9564961080586086,"seconds":6.88992440700531e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.765625,"distances_sum":2526.9842962106045}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8544921875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8544921875,"f1":0.9154132326007333,"seconds":6.7837536334991455e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.6328125,"distances_sum":2236.1450170448143}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8271484375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8271484375,"f1":0.8983058608058615,"seconds":6.476417183876038e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.5546875,"distances_sum":2103.9312567210927}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9580185439560442,"seconds":8.549541234970093e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.6953125,"distances_sum":2558.873569488684}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9248046875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.9580185439560442,"seconds":8.549541234970093e-6,"exhaustive_search_seconds":1.7974525690078735e-6,"evaluations":8.6953125,"distances_sum":2558.873569488684}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6650390625,"f1":0.7870971042846051,"seconds":5.8747828006744385e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":7.8671875,"distances_sum":1768.3232249065868}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.390625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.390625,"f1":null,"seconds":4.43682074546814e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":6.2734375,"distances_sum":974.1858148373595}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6650390625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6650390625,"f1":0.7870971042846051,"seconds":5.8747828006744385e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":7.8671875,"distances_sum":1768.3232249065868}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8594504453879462,"seconds":7.148832082748413e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.6796875,"distances_sum":2149.3856768687806}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.765625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.765625,"f1":0.8594504453879462,"seconds":7.148832082748413e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.6796875,"distances_sum":2149.3856768687806}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9300995879120886,"seconds":4.472211003303528e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.859375,"distances_sum":2604.659172966025}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9596382783882789,"seconds":4.341825842857361e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.8984375,"distances_sum":2869.4208507375247}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9496196511821517,"seconds":4.384666681289673e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.9453125,"distances_sum":2748.380924698041}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9596382783882789,"seconds":4.341825842857361e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.8984375,"distances_sum":2869.4208507375247}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.927734375,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9596382783882789,"seconds":4.341825842857361e-6,"exhaustive_search_seconds":1.6801059246063232e-6,"evaluations":8.8984375,"distances_sum":2869.4208507375247}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7392578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7392578125,"f1":0.8425751332001342,"seconds":3.6992132663726807e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.34375,"distances_sum":1868.180717623423}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5556640625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5556640625,"f1":null,"seconds":3.0063092708587646e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":7.2109375,"distances_sum":1277.8829110576191}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7392578125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7392578125,"f1":0.8425751332001342,"seconds":3.6992132663726807e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.34375,"distances_sum":1868.180717623423}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.954229624542125,"seconds":4.04752790927887e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.8046875,"distances_sum":2722.3456183603143}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9368761446886452,"seconds":3.9655715227127075e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.7265625,"distances_sum":2547.7560839181647}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.8509480103230112,"seconds":5.764886736869812e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.375,"distances_sum":1910.6948184059188}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.954229624542125,"seconds":4.04752790927887e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.8046875,"distances_sum":2722.3456183603143}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9737751831501837,"seconds":4.490837454795837e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.953125,"distances_sum":2844.5650750395034}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9614239926739929,"seconds":4.326924681663513e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.8359375,"distances_sum":2765.974866455642}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9600503663003666,"seconds":4.250556230545044e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.8515625,"distances_sum":2768.4620895785765}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9737751831501837,"seconds":4.490837454795837e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.953125,"distances_sum":2844.5650750395034}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9737751831501837,"seconds":4.490837454795837e-6,"exhaustive_search_seconds":9.369105100631714e-7,"evaluations":8.953125,"distances_sum":2844.5650750395034}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2490234375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2490234375,"f1":null,"seconds":3.952533006668091e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":6.859375,"distances_sum":581.1016357188482}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5751953125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5751953125,"f1":0.7177314005439013,"seconds":4.675239324569702e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":7.2734375,"distances_sum":1329.4822756736057}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5751953125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5751953125,"f1":0.7177314005439013,"seconds":4.675239324569702e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":7.2734375,"distances_sum":1329.4822756736057}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5888671875, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5888671875,"f1":0.7284165487290494,"seconds":3.60049307346344e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":7.296875,"distances_sum":1409.884627117022}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6904296875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6904296875,"f1":0.8074076964701974,"seconds":3.6638230085372925e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.1015625,"distances_sum":1673.4511824157464}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6904296875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6904296875,"f1":0.8074076964701974,"seconds":3.6638230085372925e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.1015625,"distances_sum":1673.4511824157464}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9466918498168503,"seconds":7.281079888343811e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9765625,"distances_sum":2617.023159561898}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9225732600732609,"seconds":6.727874279022217e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.75,"distances_sum":2426.5092253881403}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7470703125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7470703125,"f1":0.84585986929737,"seconds":6.327405571937561e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.578125,"distances_sum":1928.1045735853322}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9376774267399272,"seconds":8.482486009597778e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.921875,"distances_sum":2536.530581684489}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9052734375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.9052734375,"f1":0.9466918498168503,"seconds":7.281079888343811e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9765625,"distances_sum":2617.023159561898}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9052734375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.9052734375,"f1":0.9466918498168503,"seconds":7.281079888343811e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.9765625,"distances_sum":2617.023159561898}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.556640625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.556640625,"f1":0.6939149392274396,"seconds":4.90434467792511e-6,"exhaustive_search_seconds":1.6652047634124756e-6,"evaluations":6.4375,"distances_sum":1381.3593770869443}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.35546875, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.35546875,"f1":null,"seconds":3.956258296966553e-6,"exhaustive_search_seconds":1.6652047634124756e-6,"evaluations":5.1875,"distances_sum":855.9064958447443}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.556640625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.556640625,"f1":0.6939149392274396,"seconds":4.90434467792511e-6,"exhaustive_search_seconds":1.6652047634124756e-6,"evaluations":6.4375,"distances_sum":1381.3593770869443}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6494140625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6494140625,"f1":0.7748933358308365,"seconds":5.433335900306702e-6,"exhaustive_search_seconds":1.6652047634124756e-6,"evaluations":6.859375,"distances_sum":1576.8649411345061}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.802734375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.802734375,"f1":0.8822209040959049,"seconds":7.009133696556091e-6,"exhaustive_search_seconds":1.6652047634124756e-6,"evaluations":8.15625,"distances_sum":2197.5955778685234}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7216796875, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7216796875,"f1":0.8287441724941734,"seconds":5.921348929405212e-6,"exhaustive_search_seconds":1.6652047634124756e-6,"evaluations":7.5859375,"distances_sum":1845.260075990712}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.802734375,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.802734375,"f1":0.8822209040959049,"seconds":7.009133696556091e-6,"exhaustive_search_seconds":1.6652047634124756e-6,"evaluations":8.15625,"distances_sum":2197.5955778685234}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":11,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9535714285714291,"seconds":6.774440407752991e-6,"exhaustive_search_seconds":1.6652047634124756e-6,"evaluations":8.7734375,"distances_sum":2688.0132162351874}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9558264652014657,"seconds":6.804242730140686e-6,"exhaustive_search_seconds":1.6652047634124756e-6,"evaluations":8.7421875,"distances_sum":2703.122456174877}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":10,"bsize":8}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9274355852480859,"seconds":6.886199116706848e-6,"exhaustive_search_seconds":1.6652047634124756e-6,"evaluations":8.578125,"distances_sum":2546.3414546403296}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.9173139360639366,"seconds":6.67572021484375e-6,"exhaustive_search_seconds":1.6652047634124756e-6,"evaluations":8.4140625,"distances_sum":2445.40049021643}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9238381410256415,"seconds":2.191774547100067e-5,"exhaustive_search_seconds":1.6652047634124756e-6,"evaluations":8.5234375,"distances_sum":2485.9630849025757}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9558264652014657,"seconds":6.804242730140686e-6,"exhaustive_search_seconds":1.6652047634124756e-6,"evaluations":8.7421875,"distances_sum":2703.122456174877}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.921875,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9558264652014657,"seconds":6.804242730140686e-6,"exhaustive_search_seconds":1.6652047634124756e-6,"evaluations":8.7421875,"distances_sum":2703.122456174877}}, n: 9
mean(cfft.distances) = 0.3263888072658162
mean(cdnet.distances) = 0.47995456674173964
mean(crand.distances) = 0.35567858052960216
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8733333333333334
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9133333333333332
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8866666666666667
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8844444444444445
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8733333333333334
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9377777777777778
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9444444444444445
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8866666666666667
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8888888888888888
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8666666666666667
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9377777777777778
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9400000000000001
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9244444444444445
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9288888888888889
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9377777777777778
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8733333333333334
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9155555555555556
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8755555555555555
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8777777777777778
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9088888888888889
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8733333333333334
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9088888888888889
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9133333333333334
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8911111111111111
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9022222222222221
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8177777777777777
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9066666666666666
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 3, 2, 1, 3, 3, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 3, 2, 1, 3, 3, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 3, 2, 1, 3, 3, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 3, 2, 1, 3, 3, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 3, 2, 1, 3, 3, 2]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 3, 2, 1, 3, 3, 2]
acc = 0.9266666666666666
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 2, 3, 1, 3, 2, 1, 3, 3, 2]
acc = 0.9666666666666667
*** finished computation of 12 references, err: [Inf, 0.5418707140286764] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 38, 4]]
** centroid: 1, normalized-entropy: 0.45371633918694493, [(2, 38), (3, 4)]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 8, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 1]]
** centroid: 9, normalized-entropy: 0.9182958340544894, [(2, 2), (3, 1)]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 1, 7]]
** centroid: 10, normalized-entropy: 0.5435644431995963, [(2, 1), (3, 7)]
*** center 11: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
finished with 14 centroids; started with 12
acc = 0.9266666666666666
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.34327588906908807] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.34327588906908807, 0.18639018319759731] ***
*** finished computation of 7 references, err: [Inf, 0.34327588906908807, 0.18639018319759731] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 44, 16]]
** centroid: 1, normalized-entropy: 0.8366407419411671, [(2, 44), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [141, 81, 0]]
** centroid: 2, normalized-entropy: 0.9466474387740499, [(1, 141), (2, 81)]
*** center 3: selecting labels [1] (freq >= 2) [from [44, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 70, 4]]
** centroid: 4, normalized-entropy: 0.30337483608641397, [(2, 70), (3, 4)]
*** center 5: selecting labels [1] (freq >= 2) [from [169, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [11, 67, 0]]
** centroid: 6, normalized-entropy: 0.5869185834047994, [(1, 11), (2, 67)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [10, 9, 0]]
** centroid: 7, normalized-entropy: 0.9980008838722993, [(1, 10), (2, 9)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3322639556562489] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3322639556562489, 0.2346266341303383] ***
*** starting iteration: 2; err: [Inf, 0.3322639556562489, 0.2346266341303383] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3322639556562489, 0.2346266341303383, 0.23274721144055305] ***
*** starting iteration: 3; err: [Inf, 0.3322639556562489, 0.2346266341303383, 0.23274721144055305] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3322639556562489, 0.2346266341303383, 0.23274721144055305, 0.23231949947925434] ***
*** finished computation of 3 references, err: [Inf, 0.3322639556562489, 0.2346266341303383, 0.23274721144055305, 0.23231949947925434] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [83, 169, 20]]
** centroid: 1, normalized-entropy: 0.773525522354469, [(1, 83), (2, 169), (3, 20)]
*** center 2: selecting labels [1] (freq >= 1) [from [196, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [96, 102, 0]]
** centroid: 3, normalized-entropy: 0.9993375041688846, [(1, 96), (2, 102)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.19000569697625858] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19000569697625858, 0.16052679566253183] ***
*** finished computation of 7 references, err: [Inf, 0.19000569697625858, 0.16052679566253183] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [47, 27, 0]]
** centroid: 1, normalized-entropy: 0.9466474387740499, [(1, 47), (2, 27)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 119, 17]]
** centroid: 2, normalized-entropy: 0.5435644431995963, [(2, 119), (3, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [128, 26, 0]]
** centroid: 4, normalized-entropy: 0.6550239908788728, [(1, 128), (2, 26)]
*** center 5: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [82, 3, 0]]
** centroid: 6, normalized-entropy: 0.22028326695127437, [(1, 82), (2, 3)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 71, 0]]
** centroid: 7, normalized-entropy: 0.3003914173647818, [(1, 4), (2, 71)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20315708685247438] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20315708685247438, 0.16957404939499662] ***
*** finished computation of 7 references, err: [Inf, 0.20315708685247438, 0.16957404939499662] ***
*** center 1: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [121, 64, 0]]
** centroid: 2, normalized-entropy: 0.9303952350556314, [(1, 121), (2, 64)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 52, 18]]
** centroid: 3, normalized-entropy: 0.8224042259549892, [(2, 52), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 54, 1]]
*** center 6: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [88, 61, 0]]
** centroid: 7, normalized-entropy: 0.976182211526469, [(1, 88), (2, 61)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26912322523654086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26912322523654086, 0.19884232505589622] ***
*** starting iteration: 2; err: [Inf, 0.26912322523654086, 0.19884232505589622] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26912322523654086, 0.19884232505589622, 0.1837500532076613] ***
*** starting iteration: 3; err: [Inf, 0.26912322523654086, 0.19884232505589622, 0.1837500532076613] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26912322523654086, 0.19884232505589622, 0.1837500532076613, 0.17488207591504598] ***
*** finished computation of 7 references, err: [Inf, 0.26912322523654086, 0.19884232505589622, 0.1837500532076613, 0.17488207591504598] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [15, 85, 8]]
** centroid: 1, normalized-entropy: 0.5966157143065649, [(1, 15), (2, 85), (3, 8)]
*** center 2: selecting labels [1] (freq >= 1) [from [148, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [3, 58, 1]]
** centroid: 3, normalized-entropy: 0.25076797648068244, [(1, 3), (2, 58), (3, 1)]
*** center 4: selecting labels [1, 2, 3] (freq >= 1) [from [21, 112, 11]]
** centroid: 4, normalized-entropy: 0.6123218617610546, [(1, 21), (2, 112), (3, 11)]
*** center 5: selecting labels [1] (freq >= 1) [from [122, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [10, 16, 0]]
** centroid: 7, normalized-entropy: 0.961236604722876, [(1, 10), (2, 16)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1788632024957127] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1788632024957127, 0.15415160834644062] ***
*** starting iteration: 2; err: [Inf, 0.1788632024957127, 0.15415160834644062] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1788632024957127, 0.15415160834644062, 0.1522442833778785] ***
*** starting iteration: 3; err: [Inf, 0.1788632024957127, 0.15415160834644062, 0.1522442833778785] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1788632024957127, 0.15415160834644062, 0.1522442833778785, 0.15167505301624493] ***
*** finished computation of 7 references, err: [Inf, 0.1788632024957127, 0.15415160834644062, 0.1522442833778785, 0.15167505301624493] ***
*** center 1: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [103, 15, 0]]
** centroid: 2, normalized-entropy: 0.5494827677177795, [(1, 103), (2, 15)]
*** center 3: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [16, 86, 0]]
** centroid: 4, normalized-entropy: 0.6267511370265896, [(1, 16), (2, 86)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 99, 17]]
** centroid: 5, normalized-entropy: 0.6011432909108727, [(2, 99), (3, 17)]
*** center 6: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [63, 46, 0]]
** centroid: 7, normalized-entropy: 0.9823817086382354, [(1, 63), (2, 46)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21939060936585583] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21939060936585583, 0.16426620560780592] ***
*** starting iteration: 2; err: [Inf, 0.21939060936585583, 0.16426620560780592] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21939060936585583, 0.16426620560780592, 0.1598869124169125] ***
*** starting iteration: 3; err: [Inf, 0.21939060936585583, 0.16426620560780592, 0.1598869124169125] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21939060936585583, 0.16426620560780592, 0.1598869124169125, 0.1565716893857588] ***
*** finished computation of 7 references, err: [Inf, 0.21939060936585583, 0.16426620560780592, 0.1598869124169125, 0.1565716893857588] ***
*** center 1: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [91, 46, 0]]
** centroid: 2, normalized-entropy: 0.920709730867797, [(1, 91), (2, 46)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 126, 19]]
** centroid: 3, normalized-entropy: 0.5602684478327441, [(2, 126), (3, 19)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [78, 20, 0]]
** centroid: 4, normalized-entropy: 0.7300166301457938, [(1, 78), (2, 20)]
*** center 5: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [62, 39, 0]]
** centroid: 7, normalized-entropy: 0.9622623958249239, [(1, 62), (2, 39)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.30812225243945174] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30812225243945174, 0.25098740962240423] ***
*** starting iteration: 2; err: [Inf, 0.30812225243945174, 0.25098740962240423] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30812225243945174, 0.25098740962240423, 0.23800857421262064] ***
*** starting iteration: 3; err: [Inf, 0.30812225243945174, 0.25098740962240423, 0.23800857421262064] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30812225243945174, 0.25098740962240423, 0.23800857421262064, 0.23431809094693998] ***
*** finished computation of 3 references, err: [Inf, 0.30812225243945174, 0.25098740962240423, 0.23800857421262064, 0.23431809094693998] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [247, 6, 0]]
** centroid: 1, normalized-entropy: 0.16182171222102035, [(1, 247), (2, 6)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 194, 17]]
** centroid: 2, normalized-entropy: 0.40417994849126776, [(2, 194), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [157, 46, 0]]
** centroid: 3, normalized-entropy: 0.772038835635383, [(1, 157), (2, 46)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.34815244047485033] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34815244047485033, 0.24388526515501818] ***
*** starting iteration: 2; err: [Inf, 0.34815244047485033, 0.24388526515501818] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34815244047485033, 0.24388526515501818, 0.24141952903268263] ***
*** starting iteration: 3; err: [Inf, 0.34815244047485033, 0.24388526515501818, 0.24141952903268263] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34815244047485033, 0.24388526515501818, 0.24141952903268263, 0.24040723268523523] ***
*** finished computation of 3 references, err: [Inf, 0.34815244047485033, 0.24388526515501818, 0.24141952903268263, 0.24040723268523523] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [251, 10, 0]]
** centroid: 1, normalized-entropy: 0.23450862879012432, [(1, 251), (2, 10)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [2, 183, 19]]
** centroid: 2, normalized-entropy: 0.33121052239916865, [(1, 2), (2, 183), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [164, 38, 0]]
** centroid: 3, normalized-entropy: 0.6975195309289136, [(1, 164), (2, 38)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19630700824138997] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19630700824138997, 0.15148981596908165] ***
*** finished computation of 7 references, err: [Inf, 0.19630700824138997, 0.15148981596908165] ***
*** center 1: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [70, 4, 0]]
** centroid: 2, normalized-entropy: 0.30337483608641397, [(1, 70), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 53, 20]]
** centroid: 3, normalized-entropy: 0.847107490529376, [(2, 53), (3, 20)]
*** center 4: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [92, 32, 0]]
** centroid: 5, normalized-entropy: 0.8238116333123173, [(1, 92), (2, 32)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [10, 91, 0]]
** centroid: 6, normalized-entropy: 0.46584917377204255, [(1, 10), (2, 91)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 91, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19074090241246494] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19074090241246494, 0.1499299084547086] ***
*** finished computation of 7 references, err: [Inf, 0.19074090241246494, 0.1499299084547086] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [5, 113, 0]]
** centroid: 1, normalized-entropy: 0.2530679372656293, [(1, 5), (2, 113)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [75, 19, 0]]
** centroid: 2, normalized-entropy: 0.7261630586710504, [(1, 75), (2, 19)]
*** center 3: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 72, 17]]
** centroid: 4, normalized-entropy: 0.7035821005719904, [(2, 72), (3, 17)]
*** center 5: selecting labels [1] (freq >= 1) [from [121, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [62, 42, 0]]
** centroid: 6, normalized-entropy: 0.9731560354421095, [(1, 62), (2, 42)]
*** center 7: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18915717080486813] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18915717080486813, 0.15401516959554273] ***
*** finished computation of 7 references, err: [Inf, 0.18915717080486813, 0.15401516959554273] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [12, 111, 0]]
** centroid: 1, normalized-entropy: 0.4612160405139095, [(1, 12), (2, 111)]
*** center 2: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [83, 18, 0]]
** centroid: 3, normalized-entropy: 0.6761627418829197, [(1, 83), (2, 18)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 81, 19]]
** centroid: 4, normalized-entropy: 0.7014714598838974, [(2, 81), (3, 19)]
*** center 5: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [102, 16, 0]]
** centroid: 6, normalized-entropy: 0.572580465623769, [(1, 102), (2, 16)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [57, 5, 0]]
** centroid: 7, normalized-entropy: 0.4044483864864384, [(1, 57), (2, 5)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25052492650555774] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25052492650555774, 0.20059105538687594] ***
*** starting iteration: 2; err: [Inf, 0.25052492650555774, 0.20059105538687594] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25052492650555774, 0.20059105538687594, 0.19493500783888473] ***
*** starting iteration: 3; err: [Inf, 0.25052492650555774, 0.20059105538687594, 0.19493500783888473] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25052492650555774, 0.20059105538687594, 0.19493500783888473, 0.19338222576288489] ***
*** starting iteration: 4; err: [Inf, 0.25052492650555774, 0.20059105538687594, 0.19493500783888473, 0.19338222576288489] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25052492650555774, 0.20059105538687594, 0.19493500783888473, 0.19338222576288489, 0.1926313295048681] ***
*** finished computation of 7 references, err: [Inf, 0.25052492650555774, 0.20059105538687594, 0.19493500783888473, 0.19338222576288489, 0.1926313295048681] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [54, 35, 0]]
** centroid: 1, normalized-entropy: 0.9668701645630143, [(1, 54), (2, 35)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [65, 57, 0]]
** centroid: 2, normalized-entropy: 0.9968960371182977, [(1, 65), (2, 57)]
*** center 3: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [18, 93, 0]]
** centroid: 4, normalized-entropy: 0.6394571324851642, [(1, 18), (2, 93)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 86, 20]]
** centroid: 5, normalized-entropy: 0.6987003526563345, [(2, 86), (3, 20)]
*** center 6: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23195183795710644] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23195183795710644, 0.18900094946184526] ***
*** starting iteration: 2; err: [Inf, 0.23195183795710644, 0.18900094946184526] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23195183795710644, 0.18900094946184526, 0.18627589420070578] ***
*** starting iteration: 3; err: [Inf, 0.23195183795710644, 0.18900094946184526, 0.18627589420070578] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23195183795710644, 0.18900094946184526, 0.18627589420070578, 0.18495725011215663] ***
*** starting iteration: 4; err: [Inf, 0.23195183795710644, 0.18900094946184526, 0.18627589420070578, 0.18495725011215663] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23195183795710644, 0.18900094946184526, 0.18627589420070578, 0.18495725011215663, 0.18397142032281436] ***
*** finished computation of 7 references, err: [Inf, 0.23195183795710644, 0.18900094946184526, 0.18627589420070578, 0.18495725011215663, 0.18397142032281436] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 67, 17]]
** centroid: 1, normalized-entropy: 0.7266645172796352, [(2, 67), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [84, 4, 0]]
** centroid: 3, normalized-entropy: 0.2667649878030262, [(1, 84), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [95, 25, 0]]
** centroid: 4, normalized-entropy: 0.7382848661434506, [(1, 95), (2, 25)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [51, 44, 0]]
** centroid: 5, normalized-entropy: 0.996079990851081, [(1, 51), (2, 44)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 106, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22959440796617894] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22959440796617894, 0.19444254738442052] ***
*** starting iteration: 2; err: [Inf, 0.22959440796617894, 0.19444254738442052] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22959440796617894, 0.19444254738442052, 0.19225275343929094] ***
*** starting iteration: 3; err: [Inf, 0.22959440796617894, 0.19444254738442052, 0.19225275343929094] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22959440796617894, 0.19444254738442052, 0.19225275343929094, 0.1921390468370577] ***
*** finished computation of 7 references, err: [Inf, 0.22959440796617894, 0.19444254738442052, 0.19225275343929094, 0.1921390468370577] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [103, 11, 0]]
** centroid: 1, normalized-entropy: 0.4577733290341998, [(1, 103), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [78, 7, 0]]
** centroid: 2, normalized-entropy: 0.4104161417181887, [(1, 78), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 64, 19]]
** centroid: 3, normalized-entropy: 0.776116265618875, [(2, 64), (3, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 91, 0]]
** centroid: 6, normalized-entropy: 0.3347676126777638, [(1, 6), (2, 91)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [41, 58, 0]]
** centroid: 7, normalized-entropy: 0.9786239947589973, [(1, 41), (2, 58)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3292439017730119] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3292439017730119, 0.2758567122513199] ***
*** starting iteration: 2; err: [Inf, 0.3292439017730119, 0.2758567122513199] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3292439017730119, 0.2758567122513199, 0.2532615688316211] ***
*** starting iteration: 3; err: [Inf, 0.3292439017730119, 0.2758567122513199, 0.2532615688316211] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3292439017730119, 0.2758567122513199, 0.2532615688316211, 0.24657865450088237] ***
*** finished computation of 3 references, err: [Inf, 0.3292439017730119, 0.2758567122513199, 0.2532615688316211, 0.24657865450088237] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [207, 4, 0]]
** centroid: 1, normalized-entropy: 0.1355456332457619, [(1, 207), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [167, 29, 0]]
** centroid: 2, normalized-entropy: 0.6047095089016045, [(1, 167), (2, 29)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [1, 238, 20]]
** centroid: 3, normalized-entropy: 0.39337768346574314, [(2, 238), (3, 20)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2833485528051775] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2833485528051775, 0.24377206925894768] ***
*** starting iteration: 2; err: [Inf, 0.2833485528051775, 0.24377206925894768] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2833485528051775, 0.24377206925894768, 0.23585562707613345] ***
*** starting iteration: 3; err: [Inf, 0.2833485528051775, 0.24377206925894768, 0.23585562707613345] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2833485528051775, 0.24377206925894768, 0.23585562707613345, 0.234893751786561] ***
*** finished computation of 3 references, err: [Inf, 0.2833485528051775, 0.24377206925894768, 0.23585562707613345, 0.234893751786561] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 193, 17]]
** centroid: 1, normalized-entropy: 0.40552610578995474, [(2, 193), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [206, 44, 0]]
** centroid: 2, normalized-entropy: 0.6712478853829507, [(1, 206), (2, 44)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [198, 9, 0]]
** centroid: 3, normalized-entropy: 0.2580186686648155, [(1, 198), (2, 9)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3082533167923676] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3082533167923676, 0.24807633915315683] ***
*** starting iteration: 2; err: [Inf, 0.3082533167923676, 0.24807633915315683] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3082533167923676, 0.24807633915315683, 0.2411001123490742] ***
*** starting iteration: 3; err: [Inf, 0.3082533167923676, 0.24807633915315683, 0.2411001123490742] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3082533167923676, 0.24807633915315683, 0.2411001123490742, 0.2399144315396783] ***
*** finished computation of 3 references, err: [Inf, 0.3082533167923676, 0.24807633915315683, 0.2411001123490742, 0.2399144315396783] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [191, 23, 0]]
** centroid: 1, normalized-entropy: 0.4922574950733932, [(1, 191), (2, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [226, 21, 0]]
** centroid: 2, normalized-entropy: 0.4196258899482956, [(1, 226), (2, 21)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 187, 19]]
** centroid: 3, normalized-entropy: 0.4438797176957611, [(2, 187), (3, 19)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3283899247900837] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3283899247900837, 0.30887395159730147] ***
*** starting iteration: 2; err: [Inf, 0.3283899247900837, 0.30887395159730147] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3283899247900837, 0.30887395159730147, 0.3085367520292242] ***
*** finished computation of 3 references, err: [Inf, 0.3283899247900837, 0.30887395159730147, 0.3085367520292242] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [1, 214, 20]]
** centroid: 1, normalized-entropy: 0.28960745706911173, [(1, 1), (2, 214), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [212, 13, 0]]
** centroid: 2, normalized-entropy: 0.3185596236471152, [(1, 212), (2, 13)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [162, 44, 0]]
** centroid: 3, normalized-entropy: 0.7482932859824888, [(1, 162), (2, 44)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.407991642975758] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.407991642975758, 0.3308694222509146] ***
*** starting iteration: 2; err: [Inf, 0.407991642975758, 0.3308694222509146] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.407991642975758, 0.3308694222509146, 0.33043190808561834] ***
*** finished computation of 3 references, err: [Inf, 0.407991642975758, 0.3308694222509146, 0.33043190808561834] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [67, 117, 17]]
** centroid: 1, normalized-entropy: 0.8102075756734933, [(1, 67), (2, 117), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [228, 25, 0]]
** centroid: 2, normalized-entropy: 0.46522547993569663, [(1, 228), (2, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [109, 104, 0]]
** centroid: 3, normalized-entropy: 0.9996024742757982, [(1, 109), (2, 104)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3285397715081853] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3285397715081853, 0.30025721023297647] ***
*** starting iteration: 2; err: [Inf, 0.3285397715081853, 0.30025721023297647] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3285397715081853, 0.30025721023297647, 0.2979599877611093] ***
*** starting iteration: 3; err: [Inf, 0.3285397715081853, 0.30025721023297647, 0.2979599877611093] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3285397715081853, 0.30025721023297647, 0.2979599877611093, 0.2974900339270706] ***
*** finished computation of 3 references, err: [Inf, 0.3285397715081853, 0.30025721023297647, 0.2979599877611093, 0.2974900339270706] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [167, 54, 0]]
** centroid: 1, normalized-entropy: 0.8021896998439474, [(1, 167), (2, 54)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [6, 175, 19]]
** centroid: 2, normalized-entropy: 0.40565280114206015, [(1, 6), (2, 175), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [244, 2, 0]]
** centroid: 3, normalized-entropy: 0.06812462580532001, [(1, 244), (2, 2)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.287508577971185] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.287508577971185, 0.18302445883188653] ***
*** starting iteration: 2; err: [Inf, 0.287508577971185, 0.18302445883188653] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.287508577971185, 0.18302445883188653, 0.16588913059985516] ***
*** starting iteration: 3; err: [Inf, 0.287508577971185, 0.18302445883188653, 0.16588913059985516] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.287508577971185, 0.18302445883188653, 0.16588913059985516, 0.16056407315030066] ***
*** finished computation of 7 references, err: [Inf, 0.287508577971185, 0.18302445883188653, 0.16588913059985516, 0.16056407315030066] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 92, 20]]
** centroid: 1, normalized-entropy: 0.6769418697808861, [(2, 92), (3, 20)]
*** center 2: selecting labels [1] (freq >= 1) [from [135, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [105, 69, 0]]
** centroid: 3, normalized-entropy: 0.9688977092243805, [(1, 105), (2, 69)]
*** center 4: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [10, 31, 0]]
** centroid: 5, normalized-entropy: 0.8014698931335286, [(1, 10), (2, 31)]
*** center 6: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [15, 79, 0]]
** centroid: 7, normalized-entropy: 0.6332905746550958, [(1, 15), (2, 79)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18759155415579387] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18759155415579387, 0.157019956632918] ***
*** starting iteration: 2; err: [Inf, 0.18759155415579387, 0.157019956632918] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18759155415579387, 0.157019956632918, 0.14734603860799497] ***
*** starting iteration: 3; err: [Inf, 0.18759155415579387, 0.157019956632918, 0.14734603860799497] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18759155415579387, 0.157019956632918, 0.14734603860799497, 0.14485426404062418] ***
*** finished computation of 7 references, err: [Inf, 0.18759155415579387, 0.157019956632918, 0.14734603860799497, 0.14485426404062418] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [36, 49, 0]]
** centroid: 1, normalized-entropy: 0.9830605548016024, [(1, 36), (2, 49)]
*** center 2: selecting labels [1] (freq >= 1) [from [116, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 107, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 61, 17]]
** centroid: 4, normalized-entropy: 0.7564041945982506, [(2, 61), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [90, 23, 0]]
** centroid: 5, normalized-entropy: 0.7289514964064973, [(1, 90), (2, 23)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [83, 3, 0]]
** centroid: 6, normalized-entropy: 0.21832103023746746, [(1, 83), (2, 3)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [79, 3, 0]]
** centroid: 7, normalized-entropy: 0.22641094842107634, [(1, 79), (2, 3)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.27679447223665543] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27679447223665543, 0.2058330242434095] ***
*** starting iteration: 2; err: [Inf, 0.27679447223665543, 0.2058330242434095] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27679447223665543, 0.2058330242434095, 0.1836691579817776] ***
*** starting iteration: 3; err: [Inf, 0.27679447223665543, 0.2058330242434095, 0.1836691579817776] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27679447223665543, 0.2058330242434095, 0.1836691579817776, 0.17163885036250226] ***
*** finished computation of 7 references, err: [Inf, 0.27679447223665543, 0.2058330242434095, 0.1836691579817776, 0.17163885036250226] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [84, 30, 0]]
** centroid: 1, normalized-entropy: 0.8314743880097292, [(1, 84), (2, 30)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [44, 35, 0]]
** centroid: 2, normalized-entropy: 0.9906174973781801, [(1, 44), (2, 35)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [3, 151, 19]]
** centroid: 3, normalized-entropy: 0.3928761555059844, [(1, 3), (2, 151), (3, 19)]
*** center 4: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [141, 15, 0]]
** centroid: 7, normalized-entropy: 0.45668363153944286, [(1, 141), (2, 15)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 10)
[0.9279908651166137, 0.9270078461695229, 0.9249848651046255, 0.922020823218428, 0.9169948391505277, 0.9119868371365376, 0.9089778401155647, 0.8679967392542243, 0.8479857102611593, 0.7760095424766084]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :fft, 0.6, 1) => 0.9279908651166137
finished with 11
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.3594706604808189] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3594706604808189, 0.2587628813740845] ***
*** starting iteration: 2; err: [Inf, 0.3594706604808189, 0.2587628813740845] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3594706604808189, 0.2587628813740845, 0.2407781590816674] ***
*** starting iteration: 3; err: [Inf, 0.3594706604808189, 0.2587628813740845, 0.2407781590816674] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3594706604808189, 0.2587628813740845, 0.2407781590816674, 0.23650328960974473] ***
*** finished computation of 3 references, err: [Inf, 0.3594706604808189, 0.2587628813740845, 0.2407781590816674, 0.23650328960974473] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [112, 113, 0]]
** centroid: 1, normalized-entropy: 0.9999857511131799, [(1, 112), (2, 113)]
*** center 2: selecting labels [1] (freq >= 1) [from [189, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [74, 158, 20]]
** centroid: 3, normalized-entropy: 0.7769926743660205, [(1, 74), (2, 158), (3, 20)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3666154599777874] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3666154599777874, 0.2749674963049948] ***
*** starting iteration: 2; err: [Inf, 0.3666154599777874, 0.2749674963049948] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3666154599777874, 0.2749674963049948, 0.25076989408211037] ***
*** starting iteration: 3; err: [Inf, 0.3666154599777874, 0.2749674963049948, 0.25076989408211037] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3666154599777874, 0.2749674963049948, 0.25076989408211037, 0.23915831132818466] ***
*** finished computation of 3 references, err: [Inf, 0.3666154599777874, 0.2749674963049948, 0.25076989408211037, 0.23915831132818466] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [108, 154, 15]]
** centroid: 1, normalized-entropy: 0.7750875072657198, [(1, 108), (2, 154), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [204, 2, 0]]
** centroid: 2, normalized-entropy: 0.0788560137745528, [(1, 204), (2, 2)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [92, 90, 2]]
** centroid: 3, normalized-entropy: 0.6785955407583355, [(1, 92), (2, 90), (3, 2)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.28335690816076864] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28335690816076864, 0.2636775882883944] ***
*** starting iteration: 2; err: [Inf, 0.28335690816076864, 0.2636775882883944] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28335690816076864, 0.2636775882883944, 0.2456849272358699] ***
*** starting iteration: 3; err: [Inf, 0.28335690816076864, 0.2636775882883944, 0.2456849272358699] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28335690816076864, 0.2636775882883944, 0.2456849272358699, 0.24028771141798108] ***
*** finished computation of 3 references, err: [Inf, 0.28335690816076864, 0.2636775882883944, 0.2456849272358699, 0.24028771141798108] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [180, 46, 0]]
** centroid: 1, normalized-entropy: 0.7289514964064973, [(1, 180), (2, 46)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 164, 19]]
** centroid: 2, normalized-entropy: 0.4810050212742402, [(2, 164), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [237, 21, 0]]
** centroid: 3, normalized-entropy: 0.40707680632541937, [(1, 237), (2, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 11)
[0.9279908651166137, 0.9270078461695229, 0.9249848651046255, 0.922020823218428, 0.9169948391505277, 0.9119868371365376, 0.9089778401155647, 0.9079858301415188, 0.8679967392542243, 0.8479857102611593, 0.7760095424766084]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :fft, 0.6, 1) => 0.9279908651166137
finished with 11
iteration 3 finished
generating 4 configurations using top 12 configurations, starting with 11)
[0.9279908651166137, 0.9270078461695229, 0.9249848651046255, 0.922020823218428, 0.9169948391505277, 0.9119868371365376, 0.9089778401155647, 0.9079858301415188, 0.8679967392542243, 0.8479857102611593, 0.7760095424766084]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :fft, 0.6, 1) => 0.9279908651166137
finished with 11
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 11)
[0.9279908651166137, 0.9270078461695229, 0.9249848651046255, 0.922020823218428, 0.9169948391505277, 0.9119868371365376, 0.9089778401155647, 0.9079858301415188, 0.8679967392542243, 0.8479857102611593, 0.7760095424766084]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :fft, 0.6, 1) => 0.9279908651166137
finished with 12
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.39373941815037955] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39373941815037955, 0.30050119739884545] ***
*** starting iteration: 2; err: [Inf, 0.39373941815037955, 0.30050119739884545] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39373941815037955, 0.30050119739884545, 0.29606315197501293] ***
*** starting iteration: 3; err: [Inf, 0.39373941815037955, 0.30050119739884545, 0.29606315197501293] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39373941815037955, 0.30050119739884545, 0.29606315197501293, 0.29569219473701924] ***
*** finished computation of 3 references, err: [Inf, 0.39373941815037955, 0.30050119739884545, 0.29606315197501293, 0.29569219473701924] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [100, 168, 17]]
** centroid: 1, normalized-entropy: 0.7711541055405339, [(1, 100), (2, 168), (3, 17)]
*** center 2: selecting labels [1] (freq >= 1) [from [189, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [115, 78, 0]]
** centroid: 3, normalized-entropy: 0.9733237267506789, [(1, 115), (2, 78)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.36041161712460423] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36041161712460423, 0.3022637226389492] ***
*** starting iteration: 2; err: [Inf, 0.36041161712460423, 0.3022637226389492] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36041161712460423, 0.3022637226389492, 0.2957835841585544] ***
*** starting iteration: 3; err: [Inf, 0.36041161712460423, 0.3022637226389492, 0.2957835841585544] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36041161712460423, 0.3022637226389492, 0.2957835841585544, 0.2942098361326734] ***
*** finished computation of 3 references, err: [Inf, 0.36041161712460423, 0.3022637226389492, 0.2957835841585544, 0.2942098361326734] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [92, 175, 20]]
** centroid: 1, normalized-entropy: 0.7754941857482298, [(1, 92), (2, 175), (3, 20)]
*** center 2: selecting labels [1] (freq >= 1) [from [192, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [91, 96, 0]]
** centroid: 3, normalized-entropy: 0.9994842335383729, [(1, 91), (2, 96)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4886383526194757] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4886383526194757, 0.30062261007648] ***
*** starting iteration: 2; err: [Inf, 0.4886383526194757, 0.30062261007648] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4886383526194757, 0.30062261007648, 0.2988149296796728] ***
*** starting iteration: 3; err: [Inf, 0.4886383526194757, 0.30062261007648, 0.2988149296796728] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4886383526194757, 0.30062261007648, 0.2988149296796728, 0.29822626153134213] ***
*** finished computation of 3 references, err: [Inf, 0.4886383526194757, 0.30062261007648, 0.2988149296796728, 0.29822626153134213] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [87, 150, 19]]
** centroid: 1, normalized-entropy: 0.7946523019685128, [(1, 87), (2, 150), (3, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [204, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [126, 81, 0]]
** centroid: 3, normalized-entropy: 0.9656361333706099, [(1, 126), (2, 81)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 12)
[0.9279908651166137, 0.9270078461695229, 0.9249848651046255, 0.922020823218428, 0.9169948391505277, 0.9119868371365376, 0.9089778401155647, 0.9079858301415188, 0.8989858121594648, 0.8679967392542243, 0.8479857102611593, 0.7760095424766084]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :fft, 0.6, 1) => 0.9279908651166137
finished with 12
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9279908651166137, 0.9270078461695229, 0.9249848651046255, 0.922020823218428, 0.9169948391505277, 0.9119868371365376, 0.9089778401155647, 0.9079858301415188, 0.8989858121594648, 0.8679967392542243, 0.8479857102611593, 0.7760095424766084]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :fft, 0.6, 1) => 0.9279908651166137
finished with 13
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.2132721062263717] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2132721062263717, 0.15194234986771374] ***
*** starting iteration: 2; err: [Inf, 0.2132721062263717, 0.15194234986771374] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2132721062263717, 0.15194234986771374, 0.1476637895429867] ***
*** starting iteration: 3; err: [Inf, 0.2132721062263717, 0.15194234986771374, 0.1476637895429867] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2132721062263717, 0.15194234986771374, 0.1476637895429867, 0.14681050401443485] ***
*** finished computation of 7 references, err: [Inf, 0.2132721062263717, 0.15194234986771374, 0.1476637895429867, 0.14681050401443485] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 96, 16]]
** centroid: 1, normalized-entropy: 0.5916727785823274, [(2, 96), (3, 16)]
*** center 2: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [101, 10, 0]]
** centroid: 3, normalized-entropy: 0.436770454577089, [(1, 101), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [82, 20, 0]]
** centroid: 4, normalized-entropy: 0.7140152804378671, [(1, 82), (2, 20)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [42, 53, 0]]
** centroid: 5, normalized-entropy: 0.9903070204513952, [(1, 42), (2, 53)]
*** center 6: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 67, 1]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19543595989604762] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19543595989604762, 0.15351606597893522] ***
*** starting iteration: 2; err: [Inf, 0.19543595989604762, 0.15351606597893522] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19543595989604762, 0.15351606597893522, 0.15043275267153844] ***
*** starting iteration: 3; err: [Inf, 0.19543595989604762, 0.15351606597893522, 0.15043275267153844] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19543595989604762, 0.15351606597893522, 0.15043275267153844, 0.14989052283978355] ***
*** finished computation of 7 references, err: [Inf, 0.19543595989604762, 0.15351606597893522, 0.15043275267153844, 0.14989052283978355] ***
*** center 1: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 74, 19]]
** centroid: 2, normalized-entropy: 0.7304472862481346, [(2, 74), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [77, 10, 0]]
** centroid: 3, normalized-entropy: 0.5146464316834292, [(1, 77), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [75, 57, 0]]
** centroid: 4, normalized-entropy: 0.9865446300055647, [(1, 75), (2, 57)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [26, 90, 0]]
** centroid: 5, normalized-entropy: 0.7676515870125797, [(1, 26), (2, 90)]
*** center 6: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19590788660151465] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19590788660151465, 0.15123062934474768] ***
*** starting iteration: 2; err: [Inf, 0.19590788660151465, 0.15123062934474768] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19590788660151465, 0.15123062934474768, 0.1485421717329113] ***
*** starting iteration: 3; err: [Inf, 0.19590788660151465, 0.15123062934474768, 0.1485421717329113] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19590788660151465, 0.15123062934474768, 0.1485421717329113, 0.14804671696239002] ***
*** finished computation of 7 references, err: [Inf, 0.19590788660151465, 0.15123062934474768, 0.1485421717329113, 0.14804671696239002] ***
*** center 1: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [77, 6, 0]]
** centroid: 2, normalized-entropy: 0.3744088453489206, [(1, 77), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 58, 20]]
** centroid: 3, normalized-entropy: 0.8212809417449864, [(2, 58), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [85, 15, 0]]
** centroid: 5, normalized-entropy: 0.6098403047164005, [(1, 85), (2, 15)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 107, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 85, 0]]
** centroid: 7, normalized-entropy: 0.15790637433488164, [(1, 2), (2, 85)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 13)
[0.9279908651166137, 0.9270078461695229, 0.9259888631146116, 0.9249848651046255, 0.922020823218428, 0.9169948391505277, 0.9119868371365376, 0.9089778401155647, 0.9079858301415188, 0.8989858121594648, 0.8679967392542243, 0.8479857102611593, 0.7760095424766084]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :fft, 0.6, 1) => 0.9279908651166137
finished with 13
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.9279908651166137, 0.9270078461695229, 0.9259888631146116, 0.9249848651046255, 0.922020823218428, 0.9169948391505277, 0.9119868371365376, 0.9089778401155647, 0.9079858301415188, 0.8989858121594648, 0.8679967392542243, 0.8479857102611593, 0.7760095424766084]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :fft, 0.6, 1) => 0.9279908651166137
finished with 14
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.3782607191892525] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3782607191892525, 0.2612834065151331] ***
*** finished computation of 7 references, err: [Inf, 0.3782607191892525, 0.2612834065151331] ***
*** center 1: selecting labels [1] (freq >= 2) [from [28, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [8, 63, 0]]
** centroid: 2, normalized-entropy: 0.5079353563991225, [(1, 8), (2, 63)]
*** center 3: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 4: selecting labels [1, 2, 3] (freq >= 2) [from [39, 155, 19]]
** centroid: 4, normalized-entropy: 0.6897352413436811, [(1, 39), (2, 155), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [236, 8, 0]]
** centroid: 5, normalized-entropy: 0.20818094555717087, [(1, 236), (2, 8)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 36, 1]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [9, 9, 0]]
** centroid: 7, normalized-entropy: 1.0, [(1, 9), (2, 9)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2743062968442644] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2743062968442644, 0.22571388144476123] ***
*** finished computation of 7 references, err: [Inf, 0.2743062968442644, 0.22571388144476123] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [63, 75, 0]]
** centroid: 1, normalized-entropy: 0.9945386816500111, [(1, 63), (2, 75)]
*** center 2: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [1, 85, 5]]
** centroid: 3, normalized-entropy: 0.3095434291503252, [(2, 85), (3, 5)]
*** center 4: selecting labels [1, 2, 3] (freq >= 2) [from [27, 72, 12]]
** centroid: 4, normalized-entropy: 0.7874915529286352, [(1, 27), (2, 72), (3, 12)]
*** center 5: selecting labels [1] (freq >= 2) [from [80, 1, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [108, 4, 0]]
** centroid: 6, normalized-entropy: 0.2222848306856879, [(1, 108), (2, 4)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [15, 9, 0]]
** centroid: 7, normalized-entropy: 0.954434002924965, [(1, 15), (2, 9)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3287594017497302] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3287594017497302, 0.22914527719379632] ***
*** finished computation of 7 references, err: [Inf, 0.3287594017497302, 0.22914527719379632] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [118, 26, 0]]
** centroid: 1, normalized-entropy: 0.6812908868842175, [(1, 118), (2, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [122, 3, 0]]
** centroid: 2, normalized-entropy: 0.1633455431834022, [(1, 122), (2, 3)]
*** center 3: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [46, 79, 0]]
** centroid: 4, normalized-entropy: 0.9491240519851772, [(1, 46), (2, 79)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [1, 123, 19]]
** centroid: 5, normalized-entropy: 0.5677759440669734, [(2, 123), (3, 19)]
*** center 6: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.40098871048912405] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40098871048912405, 0.23748923280625603] ***
*** starting iteration: 2; err: [Inf, 0.40098871048912405, 0.23748923280625603] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40098871048912405, 0.23748923280625603, 0.23657193626649678] ***
*** finished computation of 3 references, err: [Inf, 0.40098871048912405, 0.23748923280625603, 0.23657193626649678] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [158, 196, 20]]
** centroid: 1, normalized-entropy: 0.7821158376580958, [(1, 158), (2, 196), (3, 20)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [165, 178, 8]]
** centroid: 2, normalized-entropy: 0.7148670270980888, [(1, 165), (2, 178), (3, 8)]
*** center 3: selecting labels [1] (freq >= 1) [from [275, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30590470001101494] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30590470001101494, 0.2537112069632858] ***
*** starting iteration: 2; err: [Inf, 0.30590470001101494, 0.2537112069632858] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30590470001101494, 0.2537112069632858, 0.24382454279996454] ***
*** starting iteration: 3; err: [Inf, 0.30590470001101494, 0.2537112069632858, 0.24382454279996454] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30590470001101494, 0.2537112069632858, 0.24382454279996454, 0.23865880561247468] ***
*** finished computation of 3 references, err: [Inf, 0.30590470001101494, 0.2537112069632858, 0.24382454279996454, 0.23865880561247468] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [78, 99, 11]]
** centroid: 1, normalized-entropy: 0.7908143264146369, [(1, 78), (2, 99), (3, 11)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [82, 88, 0]]
** centroid: 2, normalized-entropy: 0.999101248968496, [(1, 82), (2, 88)]
*** center 3: selecting labels [1] (freq >= 1) [from [142, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3573426762688905] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3573426762688905, 0.24920802590437233] ***
*** starting iteration: 2; err: [Inf, 0.3573426762688905, 0.24920802590437233] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3573426762688905, 0.24920802590437233, 0.24589799614436925] ***
*** starting iteration: 3; err: [Inf, 0.3573426762688905, 0.24920802590437233, 0.24589799614436925] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3573426762688905, 0.24920802590437233, 0.24589799614436925, 0.24462642554007472] ***
*** finished computation of 3 references, err: [Inf, 0.3573426762688905, 0.24920802590437233, 0.24589799614436925, 0.24462642554007472] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [67, 134, 15]]
** centroid: 1, normalized-entropy: 0.7687073275522286, [(1, 67), (2, 134), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [134, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [96, 54, 0]]
** centroid: 3, normalized-entropy: 0.9426831892554921, [(1, 96), (2, 54)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.36148120115417987] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36148120115417987, 0.24100706979632378] ***
*** starting iteration: 2; err: [Inf, 0.36148120115417987, 0.24100706979632378] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36148120115417987, 0.24100706979632378, 0.23882370989210905] ***
*** starting iteration: 3; err: [Inf, 0.36148120115417987, 0.24100706979632378, 0.23882370989210905] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36148120115417987, 0.24100706979632378, 0.23882370989210905, 0.2384068192979321] ***
*** finished computation of 3 references, err: [Inf, 0.36148120115417987, 0.24100706979632378, 0.23882370989210905, 0.2384068192979321] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [184, 2, 0]]
** centroid: 1, normalized-entropy: 0.0857426825355026, [(1, 184), (2, 2)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [11, 140, 14]]
** centroid: 2, normalized-entropy: 0.48175052877744196, [(1, 11), (2, 140), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [103, 46, 0]]
** centroid: 3, normalized-entropy: 0.8916960085259596, [(1, 103), (2, 46)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39456269666180016] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39456269666180016, 0.24199969378020614] ***
*** starting iteration: 2; err: [Inf, 0.39456269666180016, 0.24199969378020614] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39456269666180016, 0.24199969378020614, 0.23996710669435561] ***
*** starting iteration: 3; err: [Inf, 0.39456269666180016, 0.24199969378020614, 0.23996710669435561] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39456269666180016, 0.24199969378020614, 0.23996710669435561, 0.23888842067308724] ***
*** finished computation of 3 references, err: [Inf, 0.39456269666180016, 0.24199969378020614, 0.23996710669435561, 0.23888842067308724] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [52, 118, 15]]
** centroid: 1, normalized-entropy: 0.7711921430163197, [(1, 52), (2, 118), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [154, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [91, 70, 0]]
** centroid: 3, normalized-entropy: 0.9876925088958032, [(1, 91), (2, 70)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.33914327827468516] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33914327827468516, 0.24406408294755966] ***
*** starting iteration: 2; err: [Inf, 0.33914327827468516, 0.24406408294755966] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33914327827468516, 0.24406408294755966, 0.2416102190054953] ***
*** starting iteration: 3; err: [Inf, 0.33914327827468516, 0.24406408294755966, 0.2416102190054953] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33914327827468516, 0.24406408294755966, 0.2416102190054953, 0.240364703387022] ***
*** finished computation of 3 references, err: [Inf, 0.33914327827468516, 0.24406408294755966, 0.2416102190054953, 0.240364703387022] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [182, 2, 0]]
** centroid: 1, normalized-entropy: 0.08650421412134586, [(1, 182), (2, 2)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [10, 167, 7]]
** centroid: 2, normalized-entropy: 0.33736231457705335, [(1, 10), (2, 167), (3, 7)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [109, 23, 0]]
** centroid: 3, normalized-entropy: 0.6673182376160576, [(1, 109), (2, 23)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3842521175723523] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3842521175723523, 0.2416771818008274] ***
*** starting iteration: 2; err: [Inf, 0.3842521175723523, 0.2416771818008274] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3842521175723523, 0.2416771818008274, 0.23774086109921336] ***
*** starting iteration: 3; err: [Inf, 0.3842521175723523, 0.2416771818008274, 0.23774086109921336] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3842521175723523, 0.2416771818008274, 0.23774086109921336, 0.23725674748048187] ***
*** finished computation of 3 references, err: [Inf, 0.3842521175723523, 0.2416771818008274, 0.23774086109921336, 0.23725674748048187] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [72, 96, 13]]
** centroid: 1, normalized-entropy: 0.8121055514006484, [(1, 72), (2, 96), (3, 13)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [71, 98, 4]]
** centroid: 2, normalized-entropy: 0.7050259730532692, [(1, 71), (2, 98), (3, 4)]
*** center 3: selecting labels [1] (freq >= 1) [from [146, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.32844775201380255] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32844775201380255, 0.24328094390965999] ***
*** starting iteration: 2; err: [Inf, 0.32844775201380255, 0.24328094390965999] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32844775201380255, 0.24328094390965999, 0.2387762430384755] ***
*** starting iteration: 3; err: [Inf, 0.32844775201380255, 0.24328094390965999, 0.2387762430384755] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32844775201380255, 0.24328094390965999, 0.2387762430384755, 0.23613275899318978] ***
*** finished computation of 3 references, err: [Inf, 0.32844775201380255, 0.24328094390965999, 0.2387762430384755, 0.23613275899318978] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [136, 38, 0]]
** centroid: 1, normalized-entropy: 0.7572182549240017, [(1, 136), (2, 38)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [150, 10, 0]]
** centroid: 2, normalized-entropy: 0.3372900666170139, [(1, 150), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 147, 19]]
** centroid: 3, normalized-entropy: 0.5132173985374446, [(2, 147), (3, 19)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3598975220285356] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3598975220285356, 0.23577817410370336] ***
*** starting iteration: 2; err: [Inf, 0.3598975220285356, 0.23577817410370336] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3598975220285356, 0.23577817410370336, 0.2339496487295255] ***
*** starting iteration: 3; err: [Inf, 0.3598975220285356, 0.23577817410370336, 0.2339496487295255] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3598975220285356, 0.23577817410370336, 0.2339496487295255, 0.2335057884398848] ***
*** finished computation of 3 references, err: [Inf, 0.3598975220285356, 0.23577817410370336, 0.2339496487295255, 0.2335057884398848] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [199, 1, 0]]
** centroid: 1, normalized-entropy: 0.04541469233379398, [(1, 199), (2, 1)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [4, 124, 15]]
** centroid: 2, normalized-entropy: 0.41887514465586895, [(1, 4), (2, 124), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [106, 51, 0]]
** centroid: 3, normalized-entropy: 0.9095681334505735, [(1, 106), (2, 51)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3099960826188326] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3099960826188326, 0.2513883915506303] ***
*** starting iteration: 2; err: [Inf, 0.3099960826188326, 0.2513883915506303] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3099960826188326, 0.2513883915506303, 0.2420489665316418] ***
*** starting iteration: 3; err: [Inf, 0.3099960826188326, 0.2513883915506303, 0.2420489665316418] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3099960826188326, 0.2513883915506303, 0.2420489665316418, 0.23997144344449042] ***
*** finished computation of 3 references, err: [Inf, 0.3099960826188326, 0.2513883915506303, 0.2420489665316418, 0.23997144344449042] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [186, 15, 0]]
** centroid: 1, normalized-entropy: 0.3829576722723533, [(1, 186), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [119, 26, 0]]
** centroid: 2, normalized-entropy: 0.6785660106679434, [(1, 119), (2, 26)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 144, 10]]
** centroid: 3, normalized-entropy: 0.34673146824966367, [(2, 144), (3, 10)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.32570173540338876] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32570173540338876, 0.24400898668356238] ***
*** starting iteration: 2; err: [Inf, 0.32570173540338876, 0.24400898668356238] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32570173540338876, 0.24400898668356238, 0.23826593654602765] ***
*** starting iteration: 3; err: [Inf, 0.32570173540338876, 0.24400898668356238, 0.23826593654602765] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32570173540338876, 0.24400898668356238, 0.23826593654602765, 0.2372543234359473] ***
*** finished computation of 3 references, err: [Inf, 0.32570173540338876, 0.24400898668356238, 0.23826593654602765, 0.2372543234359473] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [68, 138, 13]]
** centroid: 1, normalized-entropy: 0.7480372343864709, [(1, 68), (2, 138), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [142, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [75, 64, 0]]
** centroid: 3, normalized-entropy: 0.9954777505134997, [(1, 75), (2, 64)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3582935591712594] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3582935591712594, 0.24210636855103077] ***
*** starting iteration: 2; err: [Inf, 0.3582935591712594, 0.24210636855103077] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3582935591712594, 0.24210636855103077, 0.24169906082004308] ***
*** finished computation of 3 references, err: [Inf, 0.3582935591712594, 0.24210636855103077, 0.24169906082004308] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [197, 3, 0]]
** centroid: 1, normalized-entropy: 0.11236071009937666, [(1, 197), (2, 3)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [2, 144, 12]]
** centroid: 2, normalized-entropy: 0.3055161847391234, [(1, 2), (2, 144), (3, 12)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [99, 43, 0]]
** centroid: 3, normalized-entropy: 0.8847070502084032, [(1, 99), (2, 43)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3172697988953441] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3172697988953441, 0.23983701346535236] ***
*** starting iteration: 2; err: [Inf, 0.3172697988953441, 0.23983701346535236] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3172697988953441, 0.23983701346535236, 0.23484086780808866] ***
*** starting iteration: 3; err: [Inf, 0.3172697988953441, 0.23983701346535236, 0.23484086780808866] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3172697988953441, 0.23983701346535236, 0.23484086780808866, 0.23371766592748464] ***
*** finished computation of 3 references, err: [Inf, 0.3172697988953441, 0.23983701346535236, 0.23484086780808866, 0.23371766592748464] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [86, 112, 12]]
** centroid: 1, normalized-entropy: 0.7868279545662686, [(1, 86), (2, 112), (3, 12)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [79, 78, 1]]
** centroid: 2, normalized-entropy: 0.6618265674309687, [(1, 79), (2, 78), (3, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [132, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.37704568372294306] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37704568372294306, 0.2374719488993287] ***
*** starting iteration: 2; err: [Inf, 0.37704568372294306, 0.2374719488993287] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37704568372294306, 0.2374719488993287, 0.23562712834402919] ***
*** starting iteration: 3; err: [Inf, 0.37704568372294306, 0.2374719488993287, 0.23562712834402919] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37704568372294306, 0.2374719488993287, 0.23562712834402919, 0.23471639659255744] ***
*** finished computation of 3 references, err: [Inf, 0.37704568372294306, 0.2374719488993287, 0.23562712834402919, 0.23471639659255744] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [58, 117, 14]]
** centroid: 1, normalized-entropy: 0.7756940129384591, [(1, 58), (2, 117), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [167, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [70, 74, 0]]
** centroid: 3, normalized-entropy: 0.9994433330902989, [(1, 70), (2, 74)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3158215975146741] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3158215975146741, 0.24537785972841084] ***
*** starting iteration: 2; err: [Inf, 0.3158215975146741, 0.24537785972841084] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3158215975146741, 0.24537785972841084, 0.24000245588459074] ***
*** starting iteration: 3; err: [Inf, 0.3158215975146741, 0.24537785972841084, 0.24000245588459074] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3158215975146741, 0.24537785972841084, 0.24000245588459074, 0.2392910382701084] ***
*** finished computation of 3 references, err: [Inf, 0.3158215975146741, 0.24537785972841084, 0.24000245588459074, 0.2392910382701084] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [189, 7, 0]]
** centroid: 1, normalized-entropy: 0.2222848306856879, [(1, 189), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [108, 41, 0]]
** centroid: 2, normalized-entropy: 0.8487827323883625, [(1, 108), (2, 41)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 141, 14]]
** centroid: 3, normalized-entropy: 0.4375456336804545, [(2, 141), (3, 14)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30180338487774133] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30180338487774133, 0.258752503355965] ***
*** starting iteration: 2; err: [Inf, 0.30180338487774133, 0.258752503355965] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30180338487774133, 0.258752503355965, 0.24517957560904324] ***
*** starting iteration: 3; err: [Inf, 0.30180338487774133, 0.258752503355965, 0.24517957560904324] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30180338487774133, 0.258752503355965, 0.24517957560904324, 0.24027368016727269] ***
*** finished computation of 3 references, err: [Inf, 0.30180338487774133, 0.258752503355965, 0.24517957560904324, 0.24027368016727269] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [197, 7, 0]]
** centroid: 1, normalized-entropy: 0.2155837101709596, [(1, 197), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [95, 54, 0]]
** centroid: 2, normalized-entropy: 0.9446704808093606, [(1, 95), (2, 54)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [4, 134, 9]]
** centroid: 3, normalized-entropy: 0.3217594017949567, [(1, 4), (2, 134), (3, 9)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30765579526871445] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30765579526871445, 0.239027724258136] ***
*** starting iteration: 2; err: [Inf, 0.30765579526871445, 0.239027724258136] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30765579526871445, 0.239027724258136, 0.2364705151040107] ***
*** starting iteration: 3; err: [Inf, 0.30765579526871445, 0.239027724258136, 0.2364705151040107] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30765579526871445, 0.239027724258136, 0.2364705151040107, 0.23597938501741736] ***
*** finished computation of 3 references, err: [Inf, 0.30765579526871445, 0.239027724258136, 0.2364705151040107, 0.23597938501741736] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [207, 16, 0]]
** centroid: 1, normalized-entropy: 0.37241649094111035, [(1, 207), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [108, 42, 0]]
** centroid: 2, normalized-entropy: 0.8554508105601307, [(1, 108), (2, 42)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 115, 12]]
** centroid: 3, normalized-entropy: 0.45127597915596884, [(2, 115), (3, 12)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3260811050869524] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3260811050869524, 0.24204509988985956] ***
*** starting iteration: 2; err: [Inf, 0.3260811050869524, 0.24204509988985956] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3260811050869524, 0.24204509988985956, 0.23571154497377575] ***
*** starting iteration: 3; err: [Inf, 0.3260811050869524, 0.24204509988985956, 0.23571154497377575] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3260811050869524, 0.24204509988985956, 0.23571154497377575, 0.23441649627126754] ***
*** finished computation of 3 references, err: [Inf, 0.3260811050869524, 0.24204509988985956, 0.23571154497377575, 0.23441649627126754] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [186, 1, 0]]
** centroid: 1, normalized-entropy: 0.048052006058257844, [(1, 186), (2, 1)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [6, 144, 13]]
** centroid: 2, normalized-entropy: 0.39387821070261714, [(1, 6), (2, 144), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [102, 48, 0]]
** centroid: 3, normalized-entropy: 0.9043814577244941, [(1, 102), (2, 48)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.31355157382041215] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31355157382041215, 0.24468887599930167] ***
*** starting iteration: 2; err: [Inf, 0.31355157382041215, 0.24468887599930167] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31355157382041215, 0.24468887599930167, 0.2383995392229408] ***
*** starting iteration: 3; err: [Inf, 0.31355157382041215, 0.24468887599930167, 0.2383995392229408] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31355157382041215, 0.24468887599930167, 0.2383995392229408, 0.23710284864343703] ***
*** finished computation of 3 references, err: [Inf, 0.31355157382041215, 0.24468887599930167, 0.2383995392229408, 0.23710284864343703] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [180, 6, 0]]
** centroid: 1, normalized-entropy: 0.2055925081850832, [(1, 180), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [107, 43, 0]]
** centroid: 2, normalized-entropy: 0.8643763438484613, [(1, 107), (2, 43)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 152, 12]]
** centroid: 3, normalized-entropy: 0.3776463213737003, [(2, 152), (3, 12)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.32151915004104376] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32151915004104376, 0.24414094272907824] ***
*** starting iteration: 2; err: [Inf, 0.32151915004104376, 0.24414094272907824] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32151915004104376, 0.24414094272907824, 0.23873677797615528] ***
*** starting iteration: 3; err: [Inf, 0.32151915004104376, 0.24414094272907824, 0.23873677797615528] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32151915004104376, 0.24414094272907824, 0.23873677797615528, 0.23716570281237365] ***
*** finished computation of 3 references, err: [Inf, 0.32151915004104376, 0.24414094272907824, 0.23873677797615528, 0.23716570281237365] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [161, 36, 0]]
** centroid: 1, normalized-entropy: 0.686037010175277, [(1, 161), (2, 36)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [138, 18, 0]]
** centroid: 2, normalized-entropy: 0.5159469300074472, [(1, 138), (2, 18)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 134, 13]]
** centroid: 3, normalized-entropy: 0.43122562471952286, [(2, 134), (3, 13)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.354816826172173] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.354816826172173, 0.23731063122302293] ***
*** starting iteration: 2; err: [Inf, 0.354816826172173, 0.23731063122302293] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.354816826172173, 0.23731063122302293, 0.23534707704000174] ***
*** starting iteration: 3; err: [Inf, 0.354816826172173, 0.23731063122302293, 0.23534707704000174] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.354816826172173, 0.23731063122302293, 0.23534707704000174, 0.2352284028781578] ***
*** finished computation of 3 references, err: [Inf, 0.354816826172173, 0.23731063122302293, 0.23534707704000174, 0.2352284028781578] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [158, 27, 0]]
** centroid: 1, normalized-entropy: 0.5996013482439019, [(1, 158), (2, 27)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [144, 16, 0]]
** centroid: 2, normalized-entropy: 0.46899559358928133, [(1, 144), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 140, 15]]
** centroid: 3, normalized-entropy: 0.45868581620054033, [(2, 140), (3, 15)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3076505601853132] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3076505601853132, 0.24163859408721328] ***
*** starting iteration: 2; err: [Inf, 0.3076505601853132, 0.24163859408721328] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3076505601853132, 0.24163859408721328, 0.2342913509150967] ***
*** starting iteration: 3; err: [Inf, 0.3076505601853132, 0.24163859408721328, 0.2342913509150967] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3076505601853132, 0.24163859408721328, 0.2342913509150967, 0.23211412882432342] ***
*** finished computation of 3 references, err: [Inf, 0.3076505601853132, 0.24163859408721328, 0.2342913509150967, 0.23211412882432342] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [60, 119, 18]]
** centroid: 1, normalized-entropy: 0.8057607368565037, [(1, 60), (2, 119), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [144, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [90, 69, 0]]
** centroid: 3, normalized-entropy: 0.987380023288353, [(1, 90), (2, 69)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.32893849470093844] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32893849470093844, 0.23893118729814888] ***
*** starting iteration: 2; err: [Inf, 0.32893849470093844, 0.23893118729814888] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32893849470093844, 0.23893118729814888, 0.236440453434363] ***
*** starting iteration: 3; err: [Inf, 0.32893849470093844, 0.23893118729814888, 0.236440453434363] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32893849470093844, 0.23893118729814888, 0.236440453434363, 0.23595025968179106] ***
*** finished computation of 3 references, err: [Inf, 0.32893849470093844, 0.23893118729814888, 0.236440453434363, 0.23595025968179106] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [197, 4, 0]]
** centroid: 1, normalized-entropy: 0.1408814999704405, [(1, 197), (2, 4)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 133, 15]]
** centroid: 2, normalized-entropy: 0.4732646976844498, [(2, 133), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [110, 41, 0]]
** centroid: 3, normalized-entropy: 0.843641820933993, [(1, 110), (2, 41)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3155003457441926] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3155003457441926, 0.2353450173102319] ***
*** starting iteration: 2; err: [Inf, 0.3155003457441926, 0.2353450173102319] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3155003457441926, 0.2353450173102319, 0.23138648726046085] ***
*** starting iteration: 3; err: [Inf, 0.3155003457441926, 0.2353450173102319, 0.23138648726046085] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3155003457441926, 0.2353450173102319, 0.23138648726046085, 0.23036844933312386] ***
*** finished computation of 3 references, err: [Inf, 0.3155003457441926, 0.2353450173102319, 0.23138648726046085, 0.23036844933312386] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [66, 121, 15]]
** centroid: 1, normalized-entropy: 0.7878591526756478, [(1, 66), (2, 121), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [84, 70, 0]]
** centroid: 2, normalized-entropy: 0.9940302114769566, [(1, 84), (2, 70)]
*** center 3: selecting labels [1] (freq >= 1) [from [144, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3989102398119867] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3989102398119867, 0.23855503217875956] ***
*** starting iteration: 2; err: [Inf, 0.3989102398119867, 0.23855503217875956] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3989102398119867, 0.23855503217875956, 0.238443437166512] ***
*** finished computation of 3 references, err: [Inf, 0.3989102398119867, 0.23855503217875956, 0.238443437166512] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [172, 32, 0]]
** centroid: 1, normalized-entropy: 0.6267511370265896, [(1, 172), (2, 32)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [122, 21, 0]]
** centroid: 2, normalized-entropy: 0.6019089517362489, [(1, 122), (2, 21)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 136, 17]]
** centroid: 3, normalized-entropy: 0.5032583347756457, [(2, 136), (3, 17)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.301727545408532] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.301727545408532, 0.24218387350998818] ***
*** starting iteration: 2; err: [Inf, 0.301727545408532, 0.24218387350998818] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.301727545408532, 0.24218387350998818, 0.2363207709826529] ***
*** starting iteration: 3; err: [Inf, 0.301727545408532, 0.24218387350998818, 0.2363207709826529] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.301727545408532, 0.24218387350998818, 0.2363207709826529, 0.23513357865437864] ***
*** finished computation of 3 references, err: [Inf, 0.301727545408532, 0.24218387350998818, 0.2363207709826529, 0.23513357865437864] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [190, 5, 0]]
** centroid: 1, normalized-entropy: 0.17203694935311387, [(1, 190), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [116, 43, 0]]
** centroid: 2, normalized-entropy: 0.8420956603976347, [(1, 116), (2, 43)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 134, 12]]
** centroid: 3, normalized-entropy: 0.4098553703184051, [(2, 134), (3, 12)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.300708831500262] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.300708831500262, 0.23856762316823005] ***
*** starting iteration: 2; err: [Inf, 0.300708831500262, 0.23856762316823005] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.300708831500262, 0.23856762316823005, 0.23251423913054167] ***
*** starting iteration: 3; err: [Inf, 0.300708831500262, 0.23856762316823005, 0.23251423913054167] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.300708831500262, 0.23856762316823005, 0.23251423913054167, 0.23136664997413756] ***
*** finished computation of 3 references, err: [Inf, 0.300708831500262, 0.23856762316823005, 0.23251423913054167, 0.23136664997413756] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [78, 114, 12]]
** centroid: 1, normalized-entropy: 0.7823046006760718, [(1, 78), (2, 114), (3, 12)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [83, 74, 1]]
** centroid: 2, normalized-entropy: 0.6603579798723516, [(1, 83), (2, 74), (3, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [138, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3337084457986057] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3337084457986057, 0.2398893255838193] ***
*** starting iteration: 2; err: [Inf, 0.3337084457986057, 0.2398893255838193] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3337084457986057, 0.2398893255838193, 0.23635765263345093] ***
*** starting iteration: 3; err: [Inf, 0.3337084457986057, 0.2398893255838193, 0.23635765263345093] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3337084457986057, 0.2398893255838193, 0.23635765263345093, 0.23508904571644962] ***
*** finished computation of 3 references, err: [Inf, 0.3337084457986057, 0.2398893255838193, 0.23635765263345093, 0.23508904571644962] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [65, 109, 15]]
** centroid: 1, normalized-entropy: 0.806102759466418, [(1, 65), (2, 109), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [153, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [82, 76, 0]]
** centroid: 3, normalized-entropy: 0.9989595114657399, [(1, 82), (2, 76)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.31036176105961205] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31036176105961205, 0.24793637795746326] ***
*** starting iteration: 2; err: [Inf, 0.31036176105961205, 0.24793637795746326] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31036176105961205, 0.24793637795746326, 0.23802511283010244] ***
*** starting iteration: 3; err: [Inf, 0.31036176105961205, 0.24793637795746326, 0.23802511283010244] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31036176105961205, 0.24793637795746326, 0.23802511283010244, 0.23596211632434277] ***
*** finished computation of 3 references, err: [Inf, 0.31036176105961205, 0.24793637795746326, 0.23802511283010244, 0.23596211632434277] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [81, 117, 17]]
** centroid: 1, normalized-entropy: 0.8187826960431398, [(1, 81), (2, 117), (3, 17)]
*** center 2: selecting labels [1] (freq >= 1) [from [152, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [89, 44, 0]]
** centroid: 3, normalized-entropy: 0.9157691529744942, [(1, 89), (2, 44)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.34763737240433695] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34763737240433695, 0.2430182509664446] ***
*** starting iteration: 2; err: [Inf, 0.34763737240433695, 0.2430182509664446] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34763737240433695, 0.2430182509664446, 0.2414895667694509] ***
*** starting iteration: 3; err: [Inf, 0.34763737240433695, 0.2430182509664446, 0.2414895667694509] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34763737240433695, 0.2430182509664446, 0.2414895667694509, 0.2408081000195816] ***
*** finished computation of 3 references, err: [Inf, 0.34763737240433695, 0.2430182509664446, 0.2414895667694509, 0.2408081000195816] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [163, 24, 0]]
** centroid: 1, normalized-entropy: 0.5528741970161213, [(1, 163), (2, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [113, 35, 0]]
** centroid: 2, normalized-entropy: 0.7891484443722605, [(1, 113), (2, 35)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 142, 23]]
** centroid: 3, normalized-entropy: 0.582649390252021, [(2, 142), (3, 23)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3328580703455955] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3328580703455955, 0.23643710474390536] ***
*** starting iteration: 2; err: [Inf, 0.3328580703455955, 0.23643710474390536] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3328580703455955, 0.23643710474390536, 0.23315608111582697] ***
*** starting iteration: 3; err: [Inf, 0.3328580703455955, 0.23643710474390536, 0.23315608111582697] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3328580703455955, 0.23643710474390536, 0.23315608111582697, 0.23247990524582565] ***
*** finished computation of 3 references, err: [Inf, 0.3328580703455955, 0.23643710474390536, 0.23315608111582697, 0.23247990524582565] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [189, 4, 0]]
** centroid: 1, normalized-entropy: 0.14549424878215955, [(1, 189), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [118, 51, 0]]
** centroid: 2, normalized-entropy: 0.8834500145943527, [(1, 118), (2, 51)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [1, 125, 12]]
** centroid: 3, normalized-entropy: 0.3073898420692817, [(1, 1), (2, 125), (3, 12)]
finished with 4 centroids; started with 3
[ Info: ("class distribution: ", Dict(2 => 374,3 => 28,1 => 598), Dict(2 => 366,3 => 31,1 => 603))
[ Info: ===== scores for single classifier: {"micro_f1":0.893,"precision":0.893,"recall":0.893,"macro_recall":0.907203508867321,"macro_f1":0.7696487423769703,"accuracy":0.893,"class_f1":{"2":0.8356374807987712,"3":0.512396694214876,"1":0.9609120521172638},"class_precision":{"2":0.9543859649122807,"3":0.34444444444444444,"1":0.944},"class_recall":{"2":0.7431693989071039,"3":1.0,"1":0.978441127694859}}
[ Info: ===== scores for 1: {"micro_f1":0.936,"precision":0.936,"recall":0.936,"macro_recall":0.9481553978740179,"macro_f1":0.8257299489263973,"accuracy":0.936,"class_f1":{"2":0.909090909090909,"3":0.5849056603773585,"1":0.9831932773109243},"class_precision":{"2":0.9467455621301775,"3":0.41333333333333333,"1":0.9965928449744463},"class_recall":{"2":0.8743169398907104,"3":1.0,"1":0.9701492537313433}}
[ Info: ===== scores for 5: {"micro_f1":0.941,"precision":0.941,"recall":0.941,"macro_recall":0.9534250423655856,"macro_f1":0.8416650532125054,"accuracy":0.941,"class_f1":{"2":0.9172510518934083,"3":0.6262626262626263,"1":0.9814814814814814},"class_precision":{"2":0.9423631123919308,"3":0.45588235294117646,"1":0.9965811965811966},"class_recall":{"2":0.8934426229508197,"3":1.0,"1":0.966832504145937}}
[ Info: ===== scores for 7: {"micro_f1":0.944,"precision":0.944,"recall":0.944,"macro_recall":0.9557993275879255,"macro_f1":0.8496381886087768,"accuracy":0.944,"class_f1":{"2":0.9215686274509803,"3":0.6458333333333334,"1":0.9815126050420169},"class_precision":{"2":0.9454022988505747,"3":0.47692307692307695,"1":0.9948892674616695},"class_recall":{"2":0.8989071038251366,"3":1.0,"1":0.9684908789386402}}
[ Info: ===== scores for 9: {"micro_f1":0.941,"precision":0.941,"recall":0.941,"macro_recall":0.9523511767211303,"macro_f1":0.8471655279563044,"accuracy":0.941,"class_f1":{"2":0.9165487977369166,"3":0.6458333333333334,"1":0.9791144527986634},"class_precision":{"2":0.9501466275659824,"3":0.47692307692307695,"1":0.9865319865319865},"class_recall":{"2":0.8852459016393442,"3":1.0,"1":0.9718076285240465}}
[ Info: ===== scores for 11: {"micro_f1":0.941,"precision":0.941,"recall":0.941,"macro_recall":0.9519932215063118,"macro_f1":0.8470982270489396,"accuracy":0.941,"class_f1":{"2":0.9163120567375886,"3":0.6458333333333334,"1":0.9791492910758965},"class_precision":{"2":0.9528023598820059,"3":0.47692307692307695,"1":0.9848993288590604},"class_recall":{"2":0.8825136612021858,"3":1.0,"1":0.9734660033167496}}
(score = 0.938, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.938, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.936, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.936, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.946, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.946, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.938, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.938, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.948, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.948, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.941, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.941, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.948, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.948, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.944, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.944, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.948,"k":5,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.948,"precision":0.948,"recall":0.948,"macro_recall":0.9580104939781965,"macro_f1":0.8525061732763977,"accuracy":0.948,"class_f1":{"2":0.9267605633802817,"3":0.6458333333333334,"1":0.9849246231155779},"class_precision":{"2":0.9563953488372093,"3":0.47692307692307695,"1":0.9949238578680203},"class_recall":{"2":0.8989071038251366,"3":1.0,"1":0.9751243781094527}}
Test Summary: | Pass  Total
AKNC          |    8      8
[103, 1, 1, 1, 1, 3, 5, 3, 3, 1, 3, 4, 12, 3, 7, 15, 15, 4, 2, 5, 7, 3, 20, 4, 1, 8, 5, 13, 19, 1, 5, 7, 8, 25, 2, 14, 12, 2, 3, 21, 13, 8, 11, 77, 17, 37, 54, 116, 14, 4, 50, 12, 9, 6, 9, 35, 9, 3, 49, 12, 21, 1, 2, 12, 3, 24, 4, 26, 30, 48, 9, 11, 1, 32, 17, 47, 15, 10, 8, 8, 5, 3, 1, 4, 6, 5, 6, 3, 57, 30, 58, 13, 43, 32, 49, 4, 79, 5, 2, 4, 13, 35, 8, 3, 7, 30, 111, 15, 15, 1, 10, 61, 6, 15, 1, 27, 12, 14, 62, 20, 25, 96, 6, 7, 73, 21, 3, 19, 17, 50, 9, 9, 17, 14, 32, 7, 43, 6, 1175, 3, 21, 9, 13, 5, 9, 86, 6, 17, 11, 66, 10, 27, 38, 19, 5, 26, 16, 4, 3, 6, 37, 1, 13, 11, 22, 52, 59, 50, 53, 10, 34, 7, 33, 11, 39, 14, 27, 12, 20, 13, 31, 4, 175, 6, 13, 15, 19, 2, 32, 14, 164, 18, 93, 17, 29, 48, 22, 61, 26, 46, 1, 12, 19, 18, 56, 57, 14, 23, 18, 15, 21, 25, 21, 26, 41, 38, 2, 91, 18, 4, 35, 2, 25, 8, 61, 29, 72, 2, 629, 14, 14, 58, 37, 110, 5, 38, 29, 78, 38, 22, 27, 4, 40, 14, 5, 29, 6, 22, 16, 65, 67, 49, 20, 84, 214, 11, 42, 22, 24, 1, 8, 23, 31, 47, 285, 53, 6, 13, 22, 13, 18, 219, 58, 41, 37, 4, 22, 28, 65, 10, 41, 17, 25, 299, 24, 11, 31, 221, 26, 3, 10, 29, 27, 4, 19, 54, 21, 4, 18, 22]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6679999999999998, speedup = 0.2389818174535088, eval_ratio = 0.09677899999999999)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":null,"recall":0.3836805555555555,"f1":null,"seconds":0.0001750420778989792,"exhaustive_search_seconds":0.0003524608910083771,"evaluations":488.078125,"distances_sum":1761.7073906348282}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5286458333333335,"recall":0.5269097222222224,"f1":null,"seconds":0.0002758502960205078,"exhaustive_search_seconds":0.0003524608910083771,"evaluations":630.875,"distances_sum":1698.0062824768534}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6206597222222223,"recall":0.6206597222222223,"f1":null,"seconds":0.0003505777567625046,"exhaustive_search_seconds":0.0003524608910083771,"evaluations":741.296875,"distances_sum":1661.8666610173784}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7084418402777776,"recall":0.7083333333333331,"f1":null,"seconds":0.00042944401502609253,"exhaustive_search_seconds":0.0003524608910083771,"evaluations":859.09375,"distances_sum":1644.868794951525}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7560763888888885,"recall":0.7560763888888885,"f1":0.7560763888888885,"seconds":0.0005594398826360703,"exhaustive_search_seconds":0.0003524608910083771,"evaluations":957.7578125,"distances_sum":1628.3017253126307}
KCenters.DeloneInvIndex> reached performance {"precision":0.8003472222222215,"recall":0.8003472222222215,"f1":0.8003472222222215,"seconds":0.0005988776683807373,"exhaustive_search_seconds":0.0003524608910083771,"evaluations":1073.84375,"distances_sum":1616.7389080064165}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8429999999999996, speedup = 0.38944631360784193, eval_ratio = 0.127934)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
