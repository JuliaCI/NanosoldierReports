Julia Version 1.6.0-DEV.82
Commit 852ff2bdab (2020-05-23 14:33 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed PooledArrays ──────────────── v0.5.3
  Installed KCenters ──────────────────── v0.2.2
  Installed Parsers ───────────────────── v1.0.4
  Installed OrderedCollections ────────── v1.2.0
  Installed JSON ──────────────────────── v0.21.0
  Installed CategoricalArrays ─────────── v0.7.7
  Installed MLDataUtils ───────────────── v0.5.1
  Installed SimilaritySearch ──────────── v0.3.19
  Installed MappedArrays ──────────────── v0.2.2
  Installed LearnBase ─────────────────── v0.2.2
  Installed DataAPI ───────────────────── v1.3.0
  Installed TableTraits ───────────────── v1.0.0
  Installed Missings ──────────────────── v0.4.3
  Installed Compat ────────────────────── v3.10.0
  Installed DataStructures ────────────── v0.17.17
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed DataValueInterfaces ───────── v1.0.0
  Installed MLDataPattern ─────────────── v0.5.3
  Installed Reexport ──────────────────── v0.2.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Tables ────────────────────── v1.0.4
  Installed StatsBase ─────────────────── v0.32.2
  Installed DataFrames ────────────────── v0.20.2
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.10.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.17
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.4
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_gEtjfi/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_gEtjfi/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.10.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.17
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.4
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9370718047022819
[ Info: 0.8302954188982645
[ Info: 0.5544419614970684
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3291004391262929
mean(cdnet.distances) = 0.4585611779242754
mean(crand.distances) = 0.32300594327350457
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6953125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6953125,"f1":0.8119994588744597,"seconds":6.066635251045227e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.1171875,"distances_sum":2043.131671605205}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.41796875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.41796875,"f1":null,"seconds":4.367902874946594e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":6.296875,"distances_sum":1158.5015732033412}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6953125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6953125,"f1":0.8119994588744597,"seconds":6.066635251045227e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.1171875,"distances_sum":2043.131671605205}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.8955242673992679,"seconds":6.321817636489868e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.625,"distances_sum":2654.7467073296657}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.82421875,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.82421875,"f1":0.8955242673992679,"seconds":6.321817636489868e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.625,"distances_sum":2654.7467073296657}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83203125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.83203125,"f1":0.903342490842492,"seconds":6.51925802230835e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.734375,"distances_sum":2662.376666200866}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.83203125,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.83203125,"f1":0.903342490842492,"seconds":6.51925802230835e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.734375,"distances_sum":2662.376666200866}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.83203125,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.83203125,"f1":0.903342490842492,"seconds":6.51925802230835e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":8.734375,"distances_sum":2662.376666200866}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.177734375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.177734375,"f1":null,"seconds":3.302469849586487e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":5.1328125,"distances_sum":544.9676354132363}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.51953125, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.51953125,"f1":0.662055652680653,"seconds":4.813075065612793e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.1953125,"distances_sum":1429.5296258763053}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.51953125,"state":{"ssize":4,"bsize":3},"perf":{"precision":1.0,"recall":0.51953125,"f1":0.662055652680653,"seconds":4.813075065612793e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":7.1953125,"distances_sum":1429.5296258763053}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8587230477855485,"seconds":5.921348929405212e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.2578125,"distances_sum":2297.138270725596}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.814453125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.814453125,"f1":0.8894147519147527,"seconds":5.945563316345215e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.5390625,"distances_sum":2492.113481834518}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.814453125,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.814453125,"f1":0.8894147519147527,"seconds":5.945563316345215e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.5390625,"distances_sum":2492.113481834518}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9303144771894776,"seconds":6.541609764099121e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.6875,"distances_sum":2728.900865288047}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9644803113553118,"seconds":6.448477506637573e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.8515625,"distances_sum":2981.395725011963}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9536687271062279,"seconds":7.050111889839172e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.828125,"distances_sum":2880.194735010764}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9352449633699639,"seconds":6.502494215965271e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.7265625,"distances_sum":2781.557580553205}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9644803113553118,"seconds":6.448477506637573e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.8515625,"distances_sum":2981.395725011963}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9644803113553118,"seconds":6.448477506637573e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.8515625,"distances_sum":2981.395725011963}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8602683774558784,"seconds":5.213543772697449e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.2421875,"distances_sum":2150.7166200467645}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.55078125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.55078125,"f1":0.6967794358419364,"seconds":4.326924681663513e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":7.28125,"distances_sum":1411.3782169865988}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.767578125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.767578125,"f1":0.8602683774558784,"seconds":5.213543772697449e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.2421875,"distances_sum":2150.7166200467645}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9235067016317022,"seconds":5.824491381645203e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.6484375,"distances_sum":2601.6011574240624}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9359635156510163,"seconds":5.662441253662109e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.65625,"distances_sum":2714.4365678721706}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9334020146520152,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.6796875,"distances_sum":2713.321032335254}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.890625,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.890625,"f1":0.9359635156510163,"seconds":5.662441253662109e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.65625,"distances_sum":2714.4365678721706}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9713598901098903,"seconds":6.3050538301467896e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.90625,"distances_sum":2980.841382465359}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9712454212454216,"seconds":5.964189767837524e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.9140625,"distances_sum":2998.4991104502024}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9638049450549457,"seconds":5.880370736122131e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.90625,"distances_sum":2925.6426372960414}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96484375, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.96484375,"f1":0.9808779761904762,"seconds":6.377696990966797e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.9609375,"distances_sum":3075.012647052462}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9728250915750919,"seconds":6.115064024925232e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.953125,"distances_sum":2983.309206063498}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9718578296703304,"seconds":6.083399057388306e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.9296875,"distances_sum":2984.544258082177}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9617616758241764,"seconds":5.85801899433136e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.859375,"distances_sum":2906.9569487959916}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.96484375,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9808779761904762,"seconds":6.377696990966797e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.9609375,"distances_sum":3075.012647052462}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.96484375,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9808779761904762,"seconds":6.377696990966797e-6,"exhaustive_search_seconds":8.586794137954712e-7,"evaluations":8.9609375,"distances_sum":3075.012647052462}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1982421875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1982421875,"f1":null,"seconds":3.5278499126434326e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":5.34375,"distances_sum":540.7644738437891}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.1982421875,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.1982421875,"f1":null,"seconds":3.5278499126434326e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":5.34375,"distances_sum":540.7644738437891}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.41796875, conf: {"ssize":6,"bsize":2}, perf: {"precision":null,"recall":0.41796875,"f1":null,"seconds":4.353001713752747e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":5.9296875,"distances_sum":1108.8812974827172}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.41796875,"state":{"ssize":6,"bsize":2},"perf":{"precision":null,"recall":0.41796875,"f1":null,"seconds":4.353001713752747e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":5.9296875,"distances_sum":1108.8812974827172}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.8981742216117224,"seconds":5.999580025672913e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.25,"distances_sum":2471.3462543492174}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.82421875,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.82421875,"f1":0.8981742216117224,"seconds":5.999580025672913e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.25,"distances_sum":2471.3462543492174}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.82421875,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.82421875,"f1":0.8981742216117224,"seconds":5.999580025672913e-6,"exhaustive_search_seconds":1.5236437320709229e-6,"evaluations":8.25,"distances_sum":2471.3462543492174}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5458984375, conf: {"ssize":2,"bsize":3}, perf: {"precision":null,"recall":0.5458984375,"f1":null,"seconds":4.857778549194336e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":6.8359375,"distances_sum":1388.4498182233056}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.736328125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.736328125,"f1":0.8422223609723619,"seconds":6.3944607973098755e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.1484375,"distances_sum":2068.3246793945696}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.56640625, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.56640625,"f1":0.7066402347652354,"seconds":4.766508936882019e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":7.0703125,"distances_sum":1494.2032376329148}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.736328125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.736328125,"f1":0.8422223609723619,"seconds":6.3944607973098755e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.1484375,"distances_sum":2068.3246793945696}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9563530219780225,"seconds":6.750226020812988e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.8515625,"distances_sum":2915.2097409857583}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8971929112554122,"seconds":6.2622129917144775e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.4921875,"distances_sum":2425.75629488285}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":9,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.908940018315019,"seconds":6.465241312980652e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.4609375,"distances_sum":2501.451717127863}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9063389735264741,"seconds":6.346032023429871e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.5390625,"distances_sum":2482.3339761623774}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8583984375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8583984375,"f1":0.9172962454212462,"seconds":5.8002769947052e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.71875,"distances_sum":2578.0608545021123}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9563530219780225,"seconds":6.750226020812988e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.8515625,"distances_sum":2915.2097409857583}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9727163461538464,"seconds":7.281079888343811e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.9296875,"distances_sum":3072.492563846136}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9795215201465204,"seconds":6.893649697303772e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.953125,"distances_sum":3113.0282702578606}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9714858058608061,"seconds":5.826354026794434e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.9375,"distances_sum":3048.1876760260593}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9731971153846157,"seconds":7.35744833946228e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.9375,"distances_sum":3044.3367175809394}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9617788461538468,"seconds":6.4354389905929565e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.8125,"distances_sum":2998.621616393947}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":11,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9706673534798542,"seconds":6.683170795440674e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.921875,"distances_sum":3042.777902342504}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9702380952380958,"seconds":6.631016731262207e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.890625,"distances_sum":3056.9694239708165}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9684726731601736,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.8828125,"distances_sum":3056.2534563102204}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.962890625,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9795215201465204,"seconds":6.893649697303772e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.953125,"distances_sum":3113.0282702578606}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.962890625,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.962890625,"f1":0.9795215201465204,"seconds":6.893649697303772e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.953125,"distances_sum":3113.0282702578606}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.443359375, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.443359375,"f1":null,"seconds":2.86102294921875e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":6.15625,"distances_sum":1132.2640426941605}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.443359375,"state":{"ssize":3,"bsize":2},"perf":{"precision":null,"recall":0.443359375,"f1":null,"seconds":2.86102294921875e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":6.15625,"distances_sum":1132.2640426941605}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8550194597069606,"seconds":3.984197974205017e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.0859375,"distances_sum":2132.7053534293}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7548828125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7548828125,"f1":0.8550194597069606,"seconds":3.984197974205017e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.0859375,"distances_sum":2132.7053534293}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9550080128205132,"seconds":4.597008228302002e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.78125,"distances_sum":2929.2575805172187}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9651442307692311,"seconds":4.911795258522034e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.875,"distances_sum":3003.789967998648}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9651442307692311,"seconds":4.911795258522034e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.875,"distances_sum":3003.789967998648}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9651442307692311,"seconds":4.911795258522034e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.875,"distances_sum":3003.789967998648}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7890625,"f1":0.8736352189477198,"seconds":6.606802344322205e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":8.109375,"distances_sum":1258.8480397693613}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.201171875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.201171875,"f1":null,"seconds":4.092231392860413e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":4.609375,"distances_sum":357.9981423070968}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5185546875, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5185546875,"f1":0.6696510087135091,"seconds":5.653128027915955e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":6.828125,"distances_sum":817.6838347959422}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7890625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7890625,"f1":0.8736352189477198,"seconds":6.606802344322205e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":8.109375,"distances_sum":1258.8480397693613}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9324207042957048,"seconds":7.541850209236145e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":8.578125,"distances_sum":1530.0707599448788}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9552483974358981,"seconds":7.485970854759216e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":8.7578125,"distances_sum":1604.081565441642}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9552483974358981,"seconds":7.485970854759216e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":8.7578125,"distances_sum":1604.081565441642}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9788690476190481,"seconds":8.312985301017761e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":8.9375,"distances_sum":1710.722804529083}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.959678342490843,"seconds":7.642433047294617e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":8.8125,"distances_sum":1623.6263993329783}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.96875,"f1":0.9827953296703298,"seconds":8.07829201221466e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":8.90625,"distances_sum":1737.267752391978}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9564076548451553,"seconds":7.579103112220764e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":8.6640625,"distances_sum":1635.0527679124252}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9638671875, conf: {"ssize":7,"bsize":12}, perf: {"precision":1.0,"recall":0.9638671875,"f1":0.9800423534798538,"seconds":8.994713425636292e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":8.9140625,"distances_sum":1718.3506341971179}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9554372710622715,"seconds":5.142763257026672e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":8.7578125,"distances_sum":1606.8147168813546}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.96875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.96875,"f1":0.9827953296703298,"seconds":8.07829201221466e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":8.90625,"distances_sum":1737.267752391978}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.96875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.96875,"f1":0.9827953296703298,"seconds":8.07829201221466e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":8.90625,"distances_sum":1737.267752391978}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3798828125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3798828125,"f1":null,"seconds":4.345551133155823e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":5.6875,"distances_sum":621.9578620245122}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3935546875, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.3935546875,"f1":null,"seconds":2.209097146987915e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":5.859375,"distances_sum":675.9846658146295}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.744140625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.744140625,"f1":0.8429542679542688,"seconds":6.401911377906799e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.15625,"distances_sum":1334.3374970807126}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.744140625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.744140625,"f1":0.8429542679542688,"seconds":6.401911377906799e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.15625,"distances_sum":1334.3374970807126}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8498178904428912,"seconds":7.327646017074585e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.109375,"distances_sum":1359.583111877521}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9314305486180493,"seconds":8.339062333106995e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.6640625,"distances_sum":1707.2140731365666}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8828125,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8828125,"f1":0.9314305486180493,"seconds":8.339062333106995e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.6640625,"distances_sum":1707.2140731365666}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9550824175824181,"seconds":5.2209943532943726e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.8125,"distances_sum":1809.1261263355652}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":9,"bsize":9},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9550824175824181,"seconds":5.2209943532943726e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.8125,"distances_sum":1809.1261263355652}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.919921875,"state":{"ssize":9,"bsize":9},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9550824175824181,"seconds":5.2209943532943726e-6,"exhaustive_search_seconds":1.773238182067871e-6,"evaluations":8.8125,"distances_sum":1809.1261263355652}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3720703125, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.3720703125,"f1":null,"seconds":5.237758159637451e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":5.8046875,"distances_sum":670.6834173044441}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6318359375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6318359375,"f1":0.7611097236097244,"seconds":6.2193721532821655e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":7.53125,"distances_sum":1160.412042338371}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6318359375,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6318359375,"f1":0.7611097236097244,"seconds":6.2193721532821655e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":7.53125,"distances_sum":1160.412042338371}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.650390625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.650390625,"f1":0.7748994061494069,"seconds":6.18956983089447e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":7.53125,"distances_sum":1220.7773920612926}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.810546875, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.810546875,"f1":0.8898471320346328,"seconds":9.348616003990173e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.328125,"distances_sum":1576.5176011776239}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.734375,"f1":0.8362044205794213,"seconds":7.851049304008484e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.015625,"distances_sum":1386.5140749480531}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.9165927822177827,"seconds":7.975846529006958e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.546875,"distances_sum":1744.4375172178932}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.734375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.734375,"f1":0.8395900974025983,"seconds":4.135072231292725e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.0703125,"distances_sum":1402.0896906019623}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.671875, conf: {"ssize":8,"bsize":4}, perf: {"precision":1.0,"recall":0.671875,"f1":0.7931703712953722,"seconds":3.9637088775634766e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":7.671875,"distances_sum":1217.006120925064}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.861328125,"state":{"ssize":7,"bsize":7},"perf":{"precision":1.0,"recall":0.861328125,"f1":0.9165927822177827,"seconds":7.975846529006958e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.546875,"distances_sum":1744.4375172178932}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":11,"bsize":11}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.9763221153846157,"seconds":8.288770914077759e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.8828125,"distances_sum":2011.8084645109786}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":8,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9675995879120881,"seconds":7.776543498039246e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.875,"distances_sum":1950.1024691205644}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":10,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9476820054945059,"seconds":5.228444933891296e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.7734375,"distances_sum":1870.456657742678}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9472527472527479,"seconds":8.547678589820862e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.734375,"distances_sum":1857.071541639424}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9509901556776563,"seconds":7.76723027229309e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.7578125,"distances_sum":1872.0517033724989}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.95703125,"state":{"ssize":11,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9763221153846157,"seconds":8.288770914077759e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.8828125,"distances_sum":2011.8084645109786}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.95703125,"state":{"ssize":11,"bsize":11},"perf":{"precision":1.0,"recall":0.95703125,"f1":0.9763221153846157,"seconds":8.288770914077759e-6,"exhaustive_search_seconds":1.7266720533370972e-6,"evaluations":8.8828125,"distances_sum":2011.8084645109786}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3779296875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3779296875,"f1":null,"seconds":4.86522912979126e-6,"exhaustive_search_seconds":2.000480890274048e-6,"evaluations":5.625,"distances_sum":625.0452087413452}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.55859375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.55859375,"f1":0.7010038572538578,"seconds":7.409602403640747e-6,"exhaustive_search_seconds":2.000480890274048e-6,"evaluations":6.9140625,"distances_sum":966.5267831661189}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.55859375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.55859375,"f1":0.7010038572538578,"seconds":7.409602403640747e-6,"exhaustive_search_seconds":2.000480890274048e-6,"evaluations":6.9140625,"distances_sum":966.5267831661189}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.8980977355977362,"seconds":9.028241038322449e-6,"exhaustive_search_seconds":2.000480890274048e-6,"evaluations":8.390625,"distances_sum":1552.8696048504216}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.826171875,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.826171875,"f1":0.8980977355977362,"seconds":9.028241038322449e-6,"exhaustive_search_seconds":2.000480890274048e-6,"evaluations":8.390625,"distances_sum":1552.8696048504216}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9053373709623719,"seconds":7.886439561843872e-6,"exhaustive_search_seconds":2.000480890274048e-6,"evaluations":8.3828125,"distances_sum":1625.5640308184225}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.8997424450549457,"seconds":1.0592862963676453e-5,"exhaustive_search_seconds":2.000480890274048e-6,"evaluations":8.4140625,"distances_sum":1560.6506431182838}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8408203125,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8408203125,"f1":0.9053373709623719,"seconds":7.886439561843872e-6,"exhaustive_search_seconds":2.000480890274048e-6,"evaluations":8.3828125,"distances_sum":1625.5640308184225}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8408203125,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8408203125,"f1":0.9053373709623719,"seconds":7.886439561843872e-6,"exhaustive_search_seconds":2.000480890274048e-6,"evaluations":8.3828125,"distances_sum":1625.5640308184225}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.658203125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.658203125,"f1":0.7828473609723617,"seconds":9.680166840553284e-6,"exhaustive_search_seconds":2.030283212661743e-6,"evaluations":7.5546875,"distances_sum":1167.5231114262385}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7412109375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7412109375,"f1":0.8445575258075267,"seconds":7.08363950252533e-6,"exhaustive_search_seconds":2.030283212661743e-6,"evaluations":8.015625,"distances_sum":1329.5209221314678}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.326171875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.326171875,"f1":null,"seconds":5.116686224937439e-6,"exhaustive_search_seconds":2.030283212661743e-6,"evaluations":5.640625,"distances_sum":602.6915128537447}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7412109375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7412109375,"f1":0.8445575258075267,"seconds":7.08363950252533e-6,"exhaustive_search_seconds":2.030283212661743e-6,"evaluations":8.015625,"distances_sum":1329.5209221314678}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9389995421245425,"seconds":8.050352334976196e-6,"exhaustive_search_seconds":2.030283212661743e-6,"evaluations":8.703125,"distances_sum":1758.5876004524375}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9308722527472536,"seconds":1.1041760444641113e-5,"exhaustive_search_seconds":2.030283212661743e-6,"evaluations":8.6875,"distances_sum":1719.2625940483929}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.892578125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.892578125,"f1":0.9389995421245425,"seconds":8.050352334976196e-6,"exhaustive_search_seconds":2.030283212661743e-6,"evaluations":8.703125,"distances_sum":1758.5876004524375}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9659111721611726,"seconds":1.0048970580101013e-5,"exhaustive_search_seconds":2.030283212661743e-6,"evaluations":8.859375,"distances_sum":1905.0620688774502}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9535428113553119,"seconds":8.160248398780823e-6,"exhaustive_search_seconds":2.030283212661743e-6,"evaluations":8.8046875,"distances_sum":1825.0712204954298}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9404296875,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9659111721611726,"seconds":1.0048970580101013e-5,"exhaustive_search_seconds":2.030283212661743e-6,"evaluations":8.859375,"distances_sum":1905.0620688774502}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9404296875,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9659111721611726,"seconds":1.0048970580101013e-5,"exhaustive_search_seconds":2.030283212661743e-6,"evaluations":8.859375,"distances_sum":1905.0620688774502}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.564453125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.564453125,"f1":0.7075535575535581,"seconds":7.968395948410034e-6,"exhaustive_search_seconds":2.039596438407898e-6,"evaluations":7.0390625,"distances_sum":1079.83805049927}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8532259407259417,"seconds":7.841736078262329e-6,"exhaustive_search_seconds":2.039596438407898e-6,"evaluations":8.4296875,"distances_sum":1653.7615633512276}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.755859375,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.755859375,"f1":0.8532259407259417,"seconds":7.841736078262329e-6,"exhaustive_search_seconds":2.039596438407898e-6,"evaluations":8.4296875,"distances_sum":1653.7615633512276}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8134765625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8134765625,"f1":0.8901416292041302,"seconds":8.255243301391602e-6,"exhaustive_search_seconds":2.039596438407898e-6,"evaluations":8.5703125,"distances_sum":1917.2823318518208}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8134765625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8134765625,"f1":0.8901416292041302,"seconds":8.255243301391602e-6,"exhaustive_search_seconds":2.039596438407898e-6,"evaluations":8.5703125,"distances_sum":1917.2823318518208}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9518257783882789,"seconds":1.010112464427948e-5,"exhaustive_search_seconds":2.039596438407898e-6,"evaluations":8.8671875,"distances_sum":2296.042607886036}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9637305402930407,"seconds":6.407499313354492e-6,"exhaustive_search_seconds":2.039596438407898e-6,"evaluations":8.9375,"distances_sum":2373.909622905747}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9637305402930407,"seconds":6.407499313354492e-6,"exhaustive_search_seconds":2.039596438407898e-6,"evaluations":8.9375,"distances_sum":2373.909622905747}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.935546875,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9637305402930407,"seconds":6.407499313354492e-6,"exhaustive_search_seconds":2.039596438407898e-6,"evaluations":8.9375,"distances_sum":2373.909622905747}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.13671875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.13671875,"f1":null,"seconds":4.0959566831588745e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":4.3828125,"distances_sum":260.26804640223645}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.689453125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.689453125,"f1":0.8051915098790107,"seconds":7.094815373420715e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.609375,"distances_sum":1394.683401707463}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6484375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6484375,"f1":0.7777682387057394,"seconds":7.232651114463806e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":6.984375,"distances_sum":1251.4819098310427}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.689453125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.689453125,"f1":0.8051915098790107,"seconds":7.094815373420715e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.609375,"distances_sum":1394.683401707463}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7919921875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.7919921875,"f1":0.8741133866133874,"seconds":7.193535566329956e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.4140625,"distances_sum":1779.9551262744822}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9264480311355319,"seconds":3.8370490074157715e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.765625,"distances_sum":2037.1825788880326}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.802734375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.802734375,"f1":0.883966033966035,"seconds":4.949048161506653e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.453125,"distances_sum":1787.0825105960569}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.87109375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.87109375,"f1":0.9264480311355319,"seconds":3.8370490074157715e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.765625,"distances_sum":2037.1825788880326}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9422905219780224,"seconds":4.082918167114258e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.78125,"distances_sum":2162.3257251317646}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.954990842490843,"seconds":3.959983587265015e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.859375,"distances_sum":2238.31573060631}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9728823260073264,"seconds":4.088506102561951e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.859375,"distances_sum":2381.156168649405}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9358917124542129,"seconds":6.182119250297546e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.6953125,"distances_sum":2140.3290474308656}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9728823260073264,"seconds":4.088506102561951e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.859375,"distances_sum":2381.156168649405}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9728823260073264,"seconds":4.088506102561951e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.859375,"distances_sum":2381.156168649405}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2041015625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2041015625,"f1":null,"seconds":3.028661012649536e-6,"exhaustive_search_seconds":1.7248094081878662e-6,"evaluations":4.8046875,"distances_sum":462.5989107357458}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3740234375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3740234375,"f1":null,"seconds":3.6694109439849854e-6,"exhaustive_search_seconds":1.7248094081878662e-6,"evaluations":5.375,"distances_sum":755.5305723933378}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5537109375, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.5537109375,"f1":0.6979215229215234,"seconds":4.317611455917358e-6,"exhaustive_search_seconds":1.7248094081878662e-6,"evaluations":6.4609375,"distances_sum":1066.168142949917}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5537109375,"state":{"ssize":3,"bsize":3},"perf":{"precision":1.0,"recall":0.5537109375,"f1":0.6979215229215234,"seconds":4.317611455917358e-6,"exhaustive_search_seconds":1.7248094081878662e-6,"evaluations":6.4609375,"distances_sum":1066.168142949917}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7275390625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7275390625,"f1":0.8335794413919422,"seconds":5.194917321205139e-6,"exhaustive_search_seconds":1.7248094081878662e-6,"evaluations":7.5,"distances_sum":1535.5136423682115}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.859375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.859375,"f1":0.9191220238095243,"seconds":6.061047315597534e-6,"exhaustive_search_seconds":1.7248094081878662e-6,"evaluations":8.5234375,"distances_sum":1992.4068006359187}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7216796875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7216796875,"f1":0.8247542388167396,"seconds":5.101785063743591e-6,"exhaustive_search_seconds":1.7248094081878662e-6,"evaluations":7.578125,"distances_sum":1543.6051755363642}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.859375,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.859375,"f1":0.9191220238095243,"seconds":6.061047315597534e-6,"exhaustive_search_seconds":1.7248094081878662e-6,"evaluations":8.5234375,"distances_sum":1992.4068006359187}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9621336996337002,"seconds":6.008893251419067e-6,"exhaustive_search_seconds":1.7248094081878662e-6,"evaluations":8.734375,"distances_sum":2284.9773857896944}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9616701007326012,"seconds":5.93625009059906e-6,"exhaustive_search_seconds":1.7248094081878662e-6,"evaluations":8.765625,"distances_sum":2281.5005711949366}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.921875,"f1":0.955958104395605,"seconds":5.951151251792908e-6,"exhaustive_search_seconds":1.7248094081878662e-6,"evaluations":8.7265625,"distances_sum":2248.3735681687717}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9621336996337002,"seconds":6.008893251419067e-6,"exhaustive_search_seconds":1.7248094081878662e-6,"evaluations":8.734375,"distances_sum":2284.9773857896944}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9326171875,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9621336996337002,"seconds":6.008893251419067e-6,"exhaustive_search_seconds":1.7248094081878662e-6,"evaluations":8.734375,"distances_sum":2284.9773857896944}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.431640625, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.431640625,"f1":null,"seconds":4.0065497159957886e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":6.390625,"distances_sum":780.841174234675}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8535631035631045,"seconds":5.517154932022095e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.9453125,"distances_sum":1576.3655904624757}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7548828125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7548828125,"f1":0.8535631035631045,"seconds":5.517154932022095e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.9453125,"distances_sum":1576.3655904624757}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.8556407134532144,"seconds":5.77978789806366e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.0390625,"distances_sum":1562.4603473353645}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7568359375,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7568359375,"f1":0.8556407134532144,"seconds":5.77978789806366e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.0390625,"distances_sum":1562.4603473353645}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.7568359375,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7568359375,"f1":0.8556407134532144,"seconds":5.77978789806366e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.0390625,"distances_sum":1562.4603473353645}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3427734375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3427734375,"f1":null,"seconds":4.015862941741943e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":5.78125,"distances_sum":694.8734589879028}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3583984375, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.3583984375,"f1":null,"seconds":3.591179847717285e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":5.7109375,"distances_sum":724.927209723014}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3583984375,"state":{"ssize":3,"bsize":2},"perf":{"precision":null,"recall":0.3583984375,"f1":null,"seconds":3.591179847717285e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":5.7109375,"distances_sum":724.927209723014}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.662109375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.662109375,"f1":0.7831761988011995,"seconds":4.3138861656188965e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.5234375,"distances_sum":1357.5330395401231}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.82421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.82421875,"f1":0.896617965367966,"seconds":5.545094609260559e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.3984375,"distances_sum":1870.079366588233}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8444753163503173,"seconds":5.533918738365173e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.15625,"distances_sum":1558.3230837961414}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6435546875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6435546875,"f1":0.7692977161727168,"seconds":4.742294549942017e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":7.4140625,"distances_sum":1306.9892642648372}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.82421875,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.82421875,"f1":0.896617965367966,"seconds":5.545094609260559e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.3984375,"distances_sum":1870.079366588233}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9617616758241762,"seconds":6.750226020812988e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.8203125,"distances_sum":2267.541998119111}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9516769688644696,"seconds":4.7888606786727905e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.7421875,"distances_sum":2216.7116442816505}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.9260416666666675,"seconds":4.777684807777405e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.6171875,"distances_sum":2042.2208174882217}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.8981201090576099,"seconds":5.00120222568512e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.4296875,"distances_sum":1866.1567971162006}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.859375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.859375,"f1":0.9178399725274733,"seconds":6.346032023429871e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.6171875,"distances_sum":2001.1343587473643}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9617616758241762,"seconds":6.750226020812988e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.8203125,"distances_sum":2267.541998119111}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9326171875,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9617616758241762,"seconds":6.750226020812988e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":8.8203125,"distances_sum":2267.541998119111}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.419921875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.419921875,"f1":null,"seconds":4.306435585021973e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.703125,"distances_sum":761.0558107916675}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2470703125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2470703125,"f1":null,"seconds":3.818422555923462e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":6.578125,"distances_sum":490.6577453109863}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.54296875, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.54296875,"f1":0.692332667332668,"seconds":4.76837158203125e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":7.34375,"distances_sum":1028.1223050681313}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.8658398892773901,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.2578125,"distances_sum":1636.8967090003284}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7734375,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7734375,"f1":0.8658398892773901,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.2578125,"distances_sum":1636.8967090003284}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.80859375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.80859375,"f1":0.888150391275392,"seconds":6.191432476043701e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.65625,"distances_sum":1772.6673299123875}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9457474816849825,"seconds":6.575137376785278e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.765625,"distances_sum":2130.8194241403367}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":9,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9035490551115558,"seconds":5.880370736122131e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.6875,"distances_sum":1869.46944338374}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9484806859806865,"seconds":6.042420864105225e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8203125,"distances_sum":2151.5046572019064}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9484806859806865,"seconds":6.042420864105225e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8203125,"distances_sum":2151.5046572019064}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9746680402930408,"seconds":6.377696990966797e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.9375,"distances_sum":2328.922698310935}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9726762820512826,"seconds":5.833804607391357e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.9453125,"distances_sum":2310.230291094089}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9523179945054951,"seconds":5.595386028289795e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.8828125,"distances_sum":2179.8345531017394}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":11,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9627117673992676,"seconds":7.554888725280762e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.875,"distances_sum":2263.9716142540274}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9502690018315023,"seconds":1.265108585357666e-5,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.765625,"distances_sum":2167.654937778642}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9676911630036635,"seconds":1.3180077075958252e-5,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.9375,"distances_sum":2272.9054232783824}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9746680402930408,"seconds":6.377696990966797e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.9375,"distances_sum":2328.922698310935}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9746680402930408,"seconds":6.377696990966797e-6,"exhaustive_search_seconds":1.4919787645339966e-6,"evaluations":8.9375,"distances_sum":2328.922698310935}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2158203125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2158203125,"f1":null,"seconds":3.4794211387634277e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":6.390625,"distances_sum":468.3302841362975}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6650390625,"f1":0.788453040015541,"seconds":1.0680407285690308e-5,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.75,"distances_sum":1269.4224513000318}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6650390625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6650390625,"f1":0.788453040015541,"seconds":1.0680407285690308e-5,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.75,"distances_sum":1269.4224513000318}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.9003491300366308,"seconds":1.0488554835319519e-5,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.6640625,"distances_sum":1843.3633694212585}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.826171875,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.826171875,"f1":0.9003491300366308,"seconds":1.0488554835319519e-5,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.6640625,"distances_sum":1843.3633694212585}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9641197344322348,"seconds":6.359070539474487e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8984375,"distances_sum":2252.39294340427}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9581902472527477,"seconds":6.241723895072937e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.9375,"distances_sum":2199.68895435717}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.913650412087913,"seconds":5.9157609939575195e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.7421875,"distances_sum":1925.6493979567724}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9641197344322348,"seconds":6.359070539474487e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8984375,"distances_sum":2252.39294340427}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9641197344322348,"seconds":6.359070539474487e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8984375,"distances_sum":2252.39294340427}}, n: 9
mean(cfft.distances) = 0.3291004394045602
mean(cdnet.distances) = 0.3389830640658769
mean(crand.distances) = 0.3503832209570893
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8644444444444445
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8622222222222221
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8844444444444445
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.9355555555555556
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9466666666666667
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9266666666666666
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.8844444444444445
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9377777777777778
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8577777777777778
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9377777777777778
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9199999999999999
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9444444444444443
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.888888888888889
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9044444444444445
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.931111111111111
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9311111111111111
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8777777777777778
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9222222222222222
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8844444444444445
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9111111111111111
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9244444444444445
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9111111111111111
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9044444444444445
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8355555555555556
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8999999999999999
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8466666666666667
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8777777777777778
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9155555555555556
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 2, 3, 3, 3, 2, 3, 1, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 2, 3, 3, 3, 2, 3, 1, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 2, 3, 3, 3, 2, 3, 1, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 2, 3, 3, 3, 2, 3, 1, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 2, 3, 3, 3, 2, 3, 1, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 2, 3, 3, 3, 2, 3, 1, 2]
acc = 0.94
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 2, 3, 3, 3, 2, 3, 1, 2]
acc = 0.9666666666666667
*** finished computation of 12 references, err: [Inf, 0.6084615265329679] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 1, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 8: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 6]]
** centroid: 11, normalized-entropy: 0.5916727785823274, [(2, 1), (3, 6)]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 13, 10]]
** centroid: 12, normalized-entropy: 0.9876925088958032, [(2, 13), (3, 10)]
finished with 16 centroids; started with 12
acc = 0.9533333333333334
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.4169872646994732] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4169872646994732, 0.3014314686921467] ***
*** starting iteration: 2; err: [Inf, 0.4169872646994732, 0.3014314686921467] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4169872646994732, 0.3014314686921467, 0.29722041603563737] ***
*** starting iteration: 3; err: [Inf, 0.4169872646994732, 0.3014314686921467, 0.29722041603563737] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4169872646994732, 0.3014314686921467, 0.29722041603563737, 0.29571677617695147] ***
*** finished computation of 3 references, err: [Inf, 0.4169872646994732, 0.3014314686921467, 0.29722041603563737, 0.29571677617695147] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [132, 54, 0]]
** centroid: 1, normalized-entropy: 0.8691375806126381, [(1, 132), (2, 54)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [1, 189, 22]]
** centroid: 2, normalized-entropy: 0.48237258307778585, [(2, 189), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [255, 13, 0]]
** centroid: 3, normalized-entropy: 0.2800226130889555, [(1, 255), (2, 13)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4063712600185752] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4063712600185752, 0.30489505252157195] ***
*** starting iteration: 2; err: [Inf, 0.4063712600185752, 0.30489505252157195] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4063712600185752, 0.30489505252157195, 0.2920979065527355] ***
*** starting iteration: 3; err: [Inf, 0.4063712600185752, 0.30489505252157195, 0.2920979065527355] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4063712600185752, 0.30489505252157195, 0.2920979065527355, 0.2907559176323296] ***
*** finished computation of 3 references, err: [Inf, 0.4063712600185752, 0.30489505252157195, 0.2920979065527355, 0.2907559176323296] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [47, 157, 24]]
** centroid: 1, normalized-entropy: 0.7458771009297472, [(1, 47), (2, 157), (3, 24)]
*** center 2: selecting labels [1] (freq >= 2) [from [230, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [117, 92, 0]]
** centroid: 3, normalized-entropy: 0.9896540021837369, [(1, 117), (2, 92)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.42782504280758227] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42782504280758227, 0.3158864429293164] ***
*** starting iteration: 2; err: [Inf, 0.42782504280758227, 0.3158864429293164] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42782504280758227, 0.3158864429293164, 0.3068427243723773] ***
*** starting iteration: 3; err: [Inf, 0.42782504280758227, 0.3158864429293164, 0.3068427243723773] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42782504280758227, 0.3158864429293164, 0.3068427243723773, 0.3043570298494874] ***
*** finished computation of 3 references, err: [Inf, 0.42782504280758227, 0.3158864429293164, 0.3068427243723773, 0.3043570298494874] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [236, 15, 0]]
** centroid: 1, normalized-entropy: 0.32649527274151985, [(1, 236), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [144, 63, 0]]
** centroid: 2, normalized-entropy: 0.8865408928220899, [(1, 144), (2, 63)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 181, 28]]
** centroid: 3, normalized-entropy: 0.5682297379197676, [(2, 181), (3, 28)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.227404593122841] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.227404593122841, 0.18764924307561842] ***
*** starting iteration: 2; err: [Inf, 0.227404593122841, 0.18764924307561842] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.227404593122841, 0.18764924307561842, 0.1849722955264207] ***
*** starting iteration: 3; err: [Inf, 0.227404593122841, 0.18764924307561842, 0.1849722955264207] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.227404593122841, 0.18764924307561842, 0.1849722955264207, 0.18458914316665645] ***
*** finished computation of 7 references, err: [Inf, 0.227404593122841, 0.18764924307561842, 0.1849722955264207, 0.18458914316665645] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [50, 58, 0]]
** centroid: 1, normalized-entropy: 0.9960383613659186, [(1, 50), (2, 58)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [74, 10, 0]]
** centroid: 2, normalized-entropy: 0.5266170655714281, [(1, 74), (2, 10)]
*** center 3: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 62, 24]]
** centroid: 4, normalized-entropy: 0.8541802051521676, [(2, 62), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [68, 2, 0]]
** centroid: 5, normalized-entropy: 0.18717625687320805, [(1, 68), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [102, 6, 0]]
** centroid: 6, normalized-entropy: 0.3095434291503252, [(1, 102), (2, 6)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 111, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23275800439985705] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23275800439985705, 0.19052397492139236] ***
*** starting iteration: 2; err: [Inf, 0.23275800439985705, 0.19052397492139236] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23275800439985705, 0.19052397492139236, 0.1880236670676468] ***
*** starting iteration: 3; err: [Inf, 0.23275800439985705, 0.19052397492139236, 0.1880236670676468] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23275800439985705, 0.19052397492139236, 0.1880236670676468, 0.1878818831681602] ***
*** finished computation of 7 references, err: [Inf, 0.23275800439985705, 0.19052397492139236, 0.1880236670676468, 0.1878818831681602] ***
*** center 1: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [67, 1, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 46, 28]]
** centroid: 3, normalized-entropy: 0.9568886656798214, [(2, 46), (3, 28)]
*** center 4: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [97, 12, 0]]
** centroid: 5, normalized-entropy: 0.5001926210998139, [(1, 97), (2, 12)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 87, 0]]
** centroid: 6, normalized-entropy: 0.3823806751537801, [(1, 7), (2, 87)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 113, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23093462514470112] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23093462514470112, 0.1987830538291473] ***
*** starting iteration: 2; err: [Inf, 0.23093462514470112, 0.1987830538291473] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23093462514470112, 0.1987830538291473, 0.1917919929603579] ***
*** starting iteration: 3; err: [Inf, 0.23093462514470112, 0.1987830538291473, 0.1917919929603579] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23093462514470112, 0.1987830538291473, 0.1917919929603579, 0.19049711207308256] ***
*** starting iteration: 4; err: [Inf, 0.23093462514470112, 0.1987830538291473, 0.1917919929603579, 0.19049711207308256] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23093462514470112, 0.1987830538291473, 0.1917919929603579, 0.19049711207308256, 0.1893190120356633] ***
*** starting iteration: 5; err: [Inf, 0.23093462514470112, 0.1987830538291473, 0.1917919929603579, 0.19049711207308256, 0.1893190120356633] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23093462514470112, 0.1987830538291473, 0.1917919929603579, 0.19049711207308256, 0.1893190120356633, 0.18908826751682023] ***
*** finished computation of 7 references, err: [Inf, 0.23093462514470112, 0.1987830538291473, 0.1917919929603579, 0.19049711207308256, 0.1893190120356633, 0.18908826751682023] ***
*** center 1: selecting labels [1] (freq >= 2) [from [84, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [76, 10, 0]]
** centroid: 2, normalized-entropy: 0.5185697317883058, [(1, 76), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 62, 22]]
** centroid: 3, normalized-entropy: 0.8296071030882032, [(2, 62), (3, 22)]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 108, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [25, 74, 0]]
** centroid: 5, normalized-entropy: 0.8152560766360704, [(1, 25), (2, 74)]
*** center 6: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [109, 1, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23809604476746368] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23809604476746368, 0.2057194266275599] ***
*** starting iteration: 2; err: [Inf, 0.23809604476746368, 0.2057194266275599] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23809604476746368, 0.2057194266275599, 0.19548828663050324] ***
*** starting iteration: 3; err: [Inf, 0.23809604476746368, 0.2057194266275599, 0.19548828663050324] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23809604476746368, 0.2057194266275599, 0.19548828663050324, 0.18863270114381228] ***
*** starting iteration: 4; err: [Inf, 0.23809604476746368, 0.2057194266275599, 0.19548828663050324, 0.18863270114381228] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23809604476746368, 0.2057194266275599, 0.19548828663050324, 0.18863270114381228, 0.1850827275349506] ***
*** starting iteration: 5; err: [Inf, 0.23809604476746368, 0.2057194266275599, 0.19548828663050324, 0.18863270114381228, 0.1850827275349506] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23809604476746368, 0.2057194266275599, 0.19548828663050324, 0.18863270114381228, 0.1850827275349506, 0.18369243242896569] ***
*** starting iteration: 6; err: [Inf, 0.23809604476746368, 0.2057194266275599, 0.19548828663050324, 0.18863270114381228, 0.1850827275349506, 0.18369243242896569] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23809604476746368, 0.2057194266275599, 0.19548828663050324, 0.18863270114381228, 0.1850827275349506, 0.18369243242896569, 0.18330319823119148] ***
*** finished computation of 7 references, err: [Inf, 0.23809604476746368, 0.2057194266275599, 0.19548828663050324, 0.18863270114381228, 0.1850827275349506, 0.18369243242896569, 0.18330319823119148] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [15, 66, 0]]
** centroid: 1, normalized-entropy: 0.6912898694057888, [(1, 15), (2, 66)]
*** center 2: selecting labels [1] (freq >= 2) [from [114, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [103, 6, 0]]
** centroid: 3, normalized-entropy: 0.30745653299528936, [(1, 103), (2, 6)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 47, 24]]
** centroid: 4, normalized-entropy: 0.9229192878686723, [(2, 47), (3, 24)]
*** center 5: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 102, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [72, 28, 0]]
** centroid: 7, normalized-entropy: 0.8554508105601307, [(1, 72), (2, 28)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2450558780713462] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2450558780713462, 0.2160423843391139] ***
*** starting iteration: 2; err: [Inf, 0.2450558780713462, 0.2160423843391139] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2450558780713462, 0.2160423843391139, 0.20287928182626147] ***
*** starting iteration: 3; err: [Inf, 0.2450558780713462, 0.2160423843391139, 0.20287928182626147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2450558780713462, 0.2160423843391139, 0.20287928182626147, 0.19785188057500383] ***
*** starting iteration: 4; err: [Inf, 0.2450558780713462, 0.2160423843391139, 0.20287928182626147, 0.19785188057500383] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2450558780713462, 0.2160423843391139, 0.20287928182626147, 0.19785188057500383, 0.19520836759978596] ***
*** starting iteration: 5; err: [Inf, 0.2450558780713462, 0.2160423843391139, 0.20287928182626147, 0.19785188057500383, 0.19520836759978596] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2450558780713462, 0.2160423843391139, 0.20287928182626147, 0.19785188057500383, 0.19520836759978596, 0.19352103641879434] ***
*** starting iteration: 6; err: [Inf, 0.2450558780713462, 0.2160423843391139, 0.20287928182626147, 0.19785188057500383, 0.19520836759978596, 0.19352103641879434] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2450558780713462, 0.2160423843391139, 0.20287928182626147, 0.19785188057500383, 0.19520836759978596, 0.19352103641879434, 0.19297206972975625] ***
*** finished computation of 7 references, err: [Inf, 0.2450558780713462, 0.2160423843391139, 0.20287928182626147, 0.19785188057500383, 0.19520836759978596, 0.19352103641879434, 0.19297206972975625] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 94, 1]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [36, 48, 0]]
** centroid: 2, normalized-entropy: 0.9852281360342514, [(1, 36), (2, 48)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [60, 30, 0]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(1, 60), (2, 30)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [93, 21, 0]]
** centroid: 4, normalized-entropy: 0.6892019851173655, [(1, 93), (2, 21)]
*** center 5: selecting labels [1] (freq >= 2) [from [124, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 66, 27]]
** centroid: 7, normalized-entropy: 0.8691375806126381, [(2, 66), (3, 27)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27290961631313637] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27290961631313637, 0.23232539928121096] ***
*** starting iteration: 2; err: [Inf, 0.27290961631313637, 0.23232539928121096] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27290961631313637, 0.23232539928121096, 0.21544370136444677] ***
*** starting iteration: 3; err: [Inf, 0.27290961631313637, 0.23232539928121096, 0.21544370136444677] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27290961631313637, 0.23232539928121096, 0.21544370136444677, 0.2009983356551242] ***
*** finished computation of 7 references, err: [Inf, 0.27290961631313637, 0.23232539928121096, 0.21544370136444677, 0.2009983356551242] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [64, 71, 0]]
** centroid: 1, normalized-entropy: 0.9980597045705907, [(1, 64), (2, 71)]
*** center 2: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 72, 22]]
** centroid: 3, normalized-entropy: 0.7849920887641585, [(2, 72), (3, 22)]
*** center 4: selecting labels [1] (freq >= 1) [from [138, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 55, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [35, 56, 0]]
** centroid: 6, normalized-entropy: 0.961236604722876, [(1, 35), (2, 56)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [63, 2, 0]]
** centroid: 7, normalized-entropy: 0.19823496409776642, [(1, 63), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25943994152637523] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25943994152637523, 0.222000099680871] ***
*** starting iteration: 2; err: [Inf, 0.25943994152637523, 0.222000099680871] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25943994152637523, 0.222000099680871, 0.2141507475286432] ***
*** starting iteration: 3; err: [Inf, 0.25943994152637523, 0.222000099680871, 0.2141507475286432] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25943994152637523, 0.222000099680871, 0.2141507475286432, 0.20605273051934409] ***
*** finished computation of 7 references, err: [Inf, 0.25943994152637523, 0.222000099680871, 0.2141507475286432, 0.20605273051934409] ***
*** center 1: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 111, 24]]
** centroid: 2, normalized-entropy: 0.6751914401458716, [(2, 111), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [66, 30, 0]]
** centroid: 3, normalized-entropy: 0.8960382325345574, [(1, 66), (2, 30)]
*** center 4: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [11, 60, 0]]
** centroid: 5, normalized-entropy: 0.6220403090607189, [(1, 11), (2, 60)]
*** center 6: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [117, 48, 0]]
** centroid: 7, normalized-entropy: 0.8698926856041562, [(1, 117), (2, 48)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2986121450996269] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2986121450996269, 0.2317247705731675] ***
*** starting iteration: 2; err: [Inf, 0.2986121450996269, 0.2317247705731675] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2986121450996269, 0.2317247705731675, 0.21424260294704378] ***
*** starting iteration: 3; err: [Inf, 0.2986121450996269, 0.2317247705731675, 0.21424260294704378] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2986121450996269, 0.2317247705731675, 0.21424260294704378, 0.20895247500825456] ***
*** finished computation of 7 references, err: [Inf, 0.2986121450996269, 0.2317247705731675, 0.21424260294704378, 0.20895247500825456] ***
*** center 1: selecting labels [1] (freq >= 1) [from [140, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [95, 34, 0]]
** centroid: 2, normalized-entropy: 0.8320798182608387, [(1, 95), (2, 34)]
*** center 3: selecting labels [1] (freq >= 1) [from [114, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [31, 94, 0]]
** centroid: 4, normalized-entropy: 0.8080927832245587, [(1, 31), (2, 94)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 49, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 44, 6]]
** centroid: 6, normalized-entropy: 0.5293608652873645, [(2, 44), (3, 6)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 38, 22]]
** centroid: 7, normalized-entropy: 0.9480782435939054, [(2, 38), (3, 22)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.42890821417720915] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42890821417720915, 0.30298879723884053] ***
*** finished computation of 3 references, err: [Inf, 0.42890821417720915, 0.30298879723884053] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [227, 31, 0]]
** centroid: 1, normalized-entropy: 0.5298063552797238, [(1, 227), (2, 31)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [161, 53, 0]]
** centroid: 2, normalized-entropy: 0.8075538954277691, [(1, 161), (2, 53)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 172, 22]]
** centroid: 3, normalized-entropy: 0.5100930822965021, [(2, 172), (3, 22)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.38257650221206496] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38257650221206496, 0.3218518622813682] ***
*** finished computation of 3 references, err: [Inf, 0.38257650221206496, 0.3218518622813682] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [252, 36, 0]]
** centroid: 1, normalized-entropy: 0.5435644431995963, [(1, 252), (2, 36)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [32, 158, 24]]
** centroid: 2, normalized-entropy: 0.6858780651734385, [(1, 32), (2, 158), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [110, 55, 0]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(1, 110), (2, 55)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4233672268328437] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4233672268328437, 0.3019208029119195] ***
*** finished computation of 3 references, err: [Inf, 0.4233672268328437, 0.3019208029119195] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [254, 45, 0]]
** centroid: 1, normalized-entropy: 0.611094317091197, [(1, 254), (2, 45)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [126, 38, 0]]
** centroid: 2, normalized-entropy: 0.7809756883263416, [(1, 126), (2, 38)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 176, 28]]
** centroid: 3, normalized-entropy: 0.577004250315725, [(2, 176), (3, 28)]
finished with 5 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22598324529477046] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22598324529477046, 0.1752388338829662] ***
*** finished computation of 7 references, err: [Inf, 0.22598324529477046, 0.1752388338829662] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [69, 46, 0]]
** centroid: 1, normalized-entropy: 0.9709505944546688, [(1, 69), (2, 46)]
*** center 2: selecting labels [1] (freq >= 1) [from [124, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [43, 52, 0]]
** centroid: 3, normalized-entropy: 0.9935161367990846, [(1, 43), (2, 52)]
*** center 4: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [7, 67, 0]]
** centroid: 5, normalized-entropy: 0.45162282218200417, [(1, 7), (2, 67)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [68, 7, 0]]
** centroid: 6, normalized-entropy: 0.44749925503686355, [(1, 68), (2, 7)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 84, 22]]
** centroid: 7, normalized-entropy: 0.7367680100024784, [(2, 84), (3, 22)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.26328912460122317] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26328912460122317, 0.1964913899605365] ***
*** finished computation of 7 references, err: [Inf, 0.26328912460122317, 0.1964913899605365] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [82, 98, 13]]
** centroid: 1, normalized-entropy: 0.8096746462545275, [(1, 82), (2, 98), (3, 13)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [92, 27, 0]]
** centroid: 2, normalized-entropy: 0.7725516917477853, [(1, 92), (2, 27)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [36, 124, 11]]
** centroid: 3, normalized-entropy: 0.6713734196684703, [(1, 36), (2, 124), (3, 11)]
*** center 4: selecting labels [1] (freq >= 1) [from [41, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2097752537924623] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2097752537924623, 0.17019257534328833] ***
*** finished computation of 7 references, err: [Inf, 0.2097752537924623, 0.17019257534328833] ***
*** center 1: selecting labels [1] (freq >= 1) [from [164, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [59, 81, 0]]
** centroid: 2, normalized-entropy: 0.9821130873306577, [(1, 59), (2, 81)]
*** center 3: selecting labels [1] (freq >= 1) [from [41, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [92, 30, 0]]
** centroid: 4, normalized-entropy: 0.8047175193210769, [(1, 92), (2, 30)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 75, 28]]
** centroid: 5, normalized-entropy: 0.844099171796772, [(2, 75), (3, 28)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 56, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [24, 17, 0]]
** centroid: 7, normalized-entropy: 0.9788698505067782, [(1, 24), (2, 17)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19621970723928497] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19621970723928497, 0.15658100442988826] ***
*** starting iteration: 2; err: [Inf, 0.19621970723928497, 0.15658100442988826] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19621970723928497, 0.15658100442988826, 0.1529601362503103] ***
*** starting iteration: 3; err: [Inf, 0.19621970723928497, 0.15658100442988826, 0.1529601362503103] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19621970723928497, 0.15658100442988826, 0.1529601362503103, 0.15237398172222502] ***
*** finished computation of 7 references, err: [Inf, 0.19621970723928497, 0.15658100442988826, 0.1529601362503103, 0.15237398172222502] ***
*** center 1: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [86, 6, 0]]
** centroid: 2, normalized-entropy: 0.3478169135710632, [(1, 86), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 71, 22]]
** centroid: 3, normalized-entropy: 0.7892712724536985, [(2, 71), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [121, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [40, 79, 0]]
** centroid: 5, normalized-entropy: 0.9210715204383165, [(1, 40), (2, 79)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 94, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [49, 6, 0]]
** centroid: 7, normalized-entropy: 0.4971677614160751, [(1, 49), (2, 6)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18733718967263488] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18733718967263488, 0.15588777224677078] ***
*** starting iteration: 2; err: [Inf, 0.18733718967263488, 0.15588777224677078] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18733718967263488, 0.15588777224677078, 0.15037581889235277] ***
*** starting iteration: 3; err: [Inf, 0.18733718967263488, 0.15588777224677078, 0.15037581889235277] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18733718967263488, 0.15588777224677078, 0.15037581889235277, 0.1489373985266053] ***
*** starting iteration: 4; err: [Inf, 0.18733718967263488, 0.15588777224677078, 0.15037581889235277, 0.1489373985266053] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18733718967263488, 0.15588777224677078, 0.15037581889235277, 0.1489373985266053, 0.1481318756773219] ***
*** finished computation of 7 references, err: [Inf, 0.18733718967263488, 0.15588777224677078, 0.15037581889235277, 0.1489373985266053, 0.1481318756773219] ***
*** center 1: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [85, 5, 0]]
** centroid: 2, normalized-entropy: 0.3095434291503252, [(1, 85), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 53, 23]]
** centroid: 3, normalized-entropy: 0.8844839729019952, [(2, 53), (3, 23)]
*** center 4: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [59, 40, 0]]
** centroid: 5, normalized-entropy: 0.9732650674751335, [(1, 59), (2, 40)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [34, 82, 0]]
** centroid: 6, normalized-entropy: 0.8726965039103788, [(1, 34), (2, 82)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 69, 1]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19052622821377493] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19052622821377493, 0.15779946674557885] ***
*** starting iteration: 2; err: [Inf, 0.19052622821377493, 0.15779946674557885] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19052622821377493, 0.15779946674557885, 0.15350305982259754] ***
*** starting iteration: 3; err: [Inf, 0.19052622821377493, 0.15779946674557885, 0.15350305982259754] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19052622821377493, 0.15779946674557885, 0.15350305982259754, 0.15244200307250336] ***
*** starting iteration: 4; err: [Inf, 0.19052622821377493, 0.15779946674557885, 0.15350305982259754, 0.15244200307250336] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19052622821377493, 0.15779946674557885, 0.15350305982259754, 0.15244200307250336, 0.1521336964402778] ***
*** finished computation of 7 references, err: [Inf, 0.19052622821377493, 0.15779946674557885, 0.15350305982259754, 0.15244200307250336, 0.1521336964402778] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 118, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 31, 0]]
** centroid: 3, normalized-entropy: 0.9290083681703216, [(1, 59), (2, 31)]
*** center 4: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [92, 7, 0]]
** centroid: 5, normalized-entropy: 0.3685567775377064, [(1, 92), (2, 7)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 85, 28]]
** centroid: 6, normalized-entropy: 0.8077527023327313, [(2, 85), (3, 28)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [47, 18, 0]]
** centroid: 7, normalized-entropy: 0.8512243352621381, [(1, 47), (2, 18)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3793826184036943] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3793826184036943, 0.32842355633892856] ***
*** starting iteration: 2; err: [Inf, 0.3793826184036943, 0.32842355633892856] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3793826184036943, 0.32842355633892856, 0.32770891239525407] ***
*** finished computation of 3 references, err: [Inf, 0.3793826184036943, 0.32842355633892856, 0.32770891239525407] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [217, 26, 0]]
** centroid: 1, normalized-entropy: 0.49078760602503846, [(1, 217), (2, 26)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [43, 136, 22]]
** centroid: 2, normalized-entropy: 0.7612891428073228, [(1, 43), (2, 136), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [128, 94, 0]]
** centroid: 3, normalized-entropy: 0.983013379603719, [(1, 128), (2, 94)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4831133214212295] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4831133214212295, 0.3140801511568086] ***
*** starting iteration: 2; err: [Inf, 0.4831133214212295, 0.3140801511568086] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4831133214212295, 0.3140801511568086, 0.2979543982925399] ***
*** starting iteration: 3; err: [Inf, 0.4831133214212295, 0.3140801511568086, 0.2979543982925399] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4831133214212295, 0.3140801511568086, 0.2979543982925399, 0.29396417611201797] ***
*** finished computation of 3 references, err: [Inf, 0.4831133214212295, 0.3140801511568086, 0.2979543982925399, 0.29396417611201797] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [76, 155, 24]]
** centroid: 1, normalized-entropy: 0.8063016333359949, [(1, 76), (2, 155), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [106, 94, 0]]
** centroid: 2, normalized-entropy: 0.9974015885677396, [(1, 106), (2, 94)]
*** center 3: selecting labels [1] (freq >= 1) [from [212, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.370145615558887] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.370145615558887, 0.308480578154951] ***
*** starting iteration: 2; err: [Inf, 0.370145615558887, 0.308480578154951] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.370145615558887, 0.308480578154951, 0.2971162816741388] ***
*** starting iteration: 3; err: [Inf, 0.370145615558887, 0.308480578154951, 0.2971162816741388] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.370145615558887, 0.308480578154951, 0.2971162816741388, 0.2945729774455058] ***
*** finished computation of 3 references, err: [Inf, 0.370145615558887, 0.308480578154951, 0.2971162816741388, 0.2945729774455058] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [138, 43, 0]]
** centroid: 1, normalized-entropy: 0.7909742877043241, [(1, 138), (2, 43)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [6, 216, 28]]
** centroid: 2, normalized-entropy: 0.4196305156762205, [(1, 6), (2, 216), (3, 28)]
*** center 3: selecting labels [1] (freq >= 1) [from [236, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23259516418967452] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23259516418967452, 0.20706044884213992] ***
*** starting iteration: 2; err: [Inf, 0.23259516418967452, 0.20706044884213992] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23259516418967452, 0.20706044884213992, 0.19756944776182664] ***
*** starting iteration: 3; err: [Inf, 0.23259516418967452, 0.20706044884213992, 0.19756944776182664] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23259516418967452, 0.20706044884213992, 0.19756944776182664, 0.19592068396094772] ***
*** starting iteration: 4; err: [Inf, 0.23259516418967452, 0.20706044884213992, 0.19756944776182664, 0.19592068396094772] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23259516418967452, 0.20706044884213992, 0.19756944776182664, 0.19592068396094772, 0.19543139966185186] ***
*** finished computation of 7 references, err: [Inf, 0.23259516418967452, 0.20706044884213992, 0.19756944776182664, 0.19592068396094772, 0.19543139966185186] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 74, 22]]
** centroid: 1, normalized-entropy: 0.7765557854444601, [(2, 74), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [91, 52, 0]]
** centroid: 2, normalized-entropy: 0.9456603046006401, [(1, 91), (2, 52)]
*** center 3: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 73, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [118, 3, 0]]
** centroid: 6, normalized-entropy: 0.1675676395319437, [(1, 118), (2, 3)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [15, 54, 0]]
** centroid: 7, normalized-entropy: 0.7553754125614286, [(1, 15), (2, 54)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2744081965668582] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2744081965668582, 0.21916885034082043] ***
*** starting iteration: 2; err: [Inf, 0.2744081965668582, 0.21916885034082043] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2744081965668582, 0.21916885034082043, 0.20786050595119707] ***
*** starting iteration: 3; err: [Inf, 0.2744081965668582, 0.21916885034082043, 0.20786050595119707] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2744081965668582, 0.21916885034082043, 0.20786050595119707, 0.20207119914612312] ***
*** starting iteration: 4; err: [Inf, 0.2744081965668582, 0.21916885034082043, 0.20786050595119707, 0.20207119914612312] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2744081965668582, 0.21916885034082043, 0.20786050595119707, 0.20207119914612312, 0.19498403317461172] ***
*** starting iteration: 5; err: [Inf, 0.2744081965668582, 0.21916885034082043, 0.20786050595119707, 0.20207119914612312, 0.19498403317461172] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2744081965668582, 0.21916885034082043, 0.20786050595119707, 0.20207119914612312, 0.19498403317461172, 0.19168556928830124] ***
*** starting iteration: 6; err: [Inf, 0.2744081965668582, 0.21916885034082043, 0.20786050595119707, 0.20207119914612312, 0.19498403317461172, 0.19168556928830124] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2744081965668582, 0.21916885034082043, 0.20786050595119707, 0.20207119914612312, 0.19498403317461172, 0.19168556928830124, 0.19010855473935426] ***
*** starting iteration: 7; err: [Inf, 0.2744081965668582, 0.21916885034082043, 0.20786050595119707, 0.20207119914612312, 0.19498403317461172, 0.19168556928830124, 0.19010855473935426] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2744081965668582, 0.21916885034082043, 0.20786050595119707, 0.20207119914612312, 0.19498403317461172, 0.19168556928830124, 0.19010855473935426, 0.1891547697219255] ***
*** finished computation of 7 references, err: [Inf, 0.2744081965668582, 0.21916885034082043, 0.20786050595119707, 0.20207119914612312, 0.19498403317461172, 0.19168556928830124, 0.19010855473935426, 0.1891547697219255] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 70, 24]]
** centroid: 1, normalized-entropy: 0.8196004346196011, [(2, 70), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [52, 20, 0]]
** centroid: 2, normalized-entropy: 0.8524051786494784, [(1, 52), (2, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [1, 111, 0]]
** centroid: 3, normalized-entropy: 0.07360348308562395, [(1, 1), (2, 111)]
*** center 4: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [89, 34, 0]]
** centroid: 5, normalized-entropy: 0.8505306682780943, [(1, 89), (2, 34)]
*** center 6: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [44, 14, 0]]
** centroid: 7, normalized-entropy: 0.7973265101474423, [(1, 44), (2, 14)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.29056087772137135] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29056087772137135, 0.21390799258457222] ***
*** starting iteration: 2; err: [Inf, 0.29056087772137135, 0.21390799258457222] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29056087772137135, 0.21390799258457222, 0.20329486857960072] ***
*** starting iteration: 3; err: [Inf, 0.29056087772137135, 0.21390799258457222, 0.20329486857960072] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29056087772137135, 0.21390799258457222, 0.20329486857960072, 0.19977152134631126] ***
*** starting iteration: 4; err: [Inf, 0.29056087772137135, 0.21390799258457222, 0.20329486857960072, 0.19977152134631126] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29056087772137135, 0.21390799258457222, 0.20329486857960072, 0.19977152134631126, 0.1950198138786153] ***
*** starting iteration: 5; err: [Inf, 0.29056087772137135, 0.21390799258457222, 0.20329486857960072, 0.19977152134631126, 0.1950198138786153] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29056087772137135, 0.21390799258457222, 0.20329486857960072, 0.19977152134631126, 0.1950198138786153, 0.1885547652041939] ***
*** starting iteration: 6; err: [Inf, 0.29056087772137135, 0.21390799258457222, 0.20329486857960072, 0.19977152134631126, 0.1950198138786153, 0.1885547652041939] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29056087772137135, 0.21390799258457222, 0.20329486857960072, 0.19977152134631126, 0.1950198138786153, 0.1885547652041939, 0.18793506499916046] ***
*** finished computation of 7 references, err: [Inf, 0.29056087772137135, 0.21390799258457222, 0.20329486857960072, 0.19977152134631126, 0.1950198138786153, 0.1885547652041939, 0.18793506499916046] ***
*** center 1: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [54, 46, 0]]
** centroid: 2, normalized-entropy: 0.9953784388202258, [(1, 54), (2, 46)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [14, 61, 0]]
** centroid: 3, normalized-entropy: 0.6944460704939805, [(1, 14), (2, 61)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 58, 28]]
** centroid: 4, normalized-entropy: 0.9103480624345157, [(2, 58), (3, 28)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [9, 94, 0]]
** centroid: 5, normalized-entropy: 0.4276590022251725, [(1, 9), (2, 94)]
*** center 6: selecting labels [1] (freq >= 1) [from [117, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17893316962073805] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17893316962073805, 0.15483645680947816] ***
*** starting iteration: 2; err: [Inf, 0.17893316962073805, 0.15483645680947816] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17893316962073805, 0.15483645680947816, 0.15261539353502426] ***
*** starting iteration: 3; err: [Inf, 0.17893316962073805, 0.15483645680947816, 0.15261539353502426] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17893316962073805, 0.15483645680947816, 0.15261539353502426, 0.15226559646220672] ***
*** finished computation of 7 references, err: [Inf, 0.17893316962073805, 0.15483645680947816, 0.15261539353502426, 0.15226559646220672] ***
*** center 1: selecting labels [1] (freq >= 1) [from [159, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 55, 22]]
** centroid: 2, normalized-entropy: 0.8631205685666311, [(2, 55), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [48, 11, 0]]
** centroid: 3, normalized-entropy: 0.693965967334286, [(1, 48), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [82, 2, 0]]
** centroid: 4, normalized-entropy: 0.1623261801753929, [(1, 82), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [13, 82, 0]]
** centroid: 5, normalized-entropy: 0.5759084429149787, [(1, 13), (2, 82)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [6, 106, 0]]
** centroid: 6, normalized-entropy: 0.3013786435930858, [(1, 6), (2, 106)]
*** center 7: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19319045316076083] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19319045316076083, 0.14969462859744523] ***
*** starting iteration: 2; err: [Inf, 0.19319045316076083, 0.14969462859744523] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19319045316076083, 0.14969462859744523, 0.14446190962249572] ***
*** starting iteration: 3; err: [Inf, 0.19319045316076083, 0.14969462859744523, 0.14446190962249572] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19319045316076083, 0.14969462859744523, 0.14446190962249572, 0.14379635599415297] ***
*** finished computation of 7 references, err: [Inf, 0.19319045316076083, 0.14969462859744523, 0.14446190962249572, 0.14379635599415297] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [93, 4, 0]]
** centroid: 1, normalized-entropy: 0.24793583772272637, [(1, 93), (2, 4)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 44, 24]]
** centroid: 2, normalized-entropy: 0.9366673818775627, [(2, 44), (3, 24)]
*** center 3: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 118, 0]]
** centroid: 6, normalized-entropy: 0.1675676395319437, [(1, 3), (2, 118)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [15, 83, 0]]
** centroid: 7, normalized-entropy: 0.6174482957894681, [(1, 15), (2, 83)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1966370966598235] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1966370966598235, 0.15667094353228986] ***
*** starting iteration: 2; err: [Inf, 0.1966370966598235, 0.15667094353228986] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1966370966598235, 0.15667094353228986, 0.15284935999424315] ***
*** starting iteration: 3; err: [Inf, 0.1966370966598235, 0.15667094353228986, 0.15284935999424315] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1966370966598235, 0.15667094353228986, 0.15284935999424315, 0.15257119760126703] ***
*** finished computation of 7 references, err: [Inf, 0.1966370966598235, 0.15667094353228986, 0.15284935999424315, 0.15257119760126703] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [77, 33, 0]]
** centroid: 1, normalized-entropy: 0.8812908992306927, [(1, 77), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [43, 3, 0]]
** centroid: 2, normalized-entropy: 0.3478169135710632, [(1, 43), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 76, 28]]
** centroid: 3, normalized-entropy: 0.8403586716091169, [(2, 76), (3, 28)]
*** center 4: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [51, 31, 0]]
** centroid: 5, normalized-entropy: 0.956652272148091, [(1, 51), (2, 31)]
*** center 6: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [10, 116, 0]]
** centroid: 7, normalized-entropy: 0.39993804743902767, [(1, 10), (2, 116)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18629782154384228] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18629782154384228, 0.15702493241694462] ***
*** starting iteration: 2; err: [Inf, 0.18629782154384228, 0.15702493241694462] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18629782154384228, 0.15702493241694462, 0.1533261038705234] ***
*** starting iteration: 3; err: [Inf, 0.18629782154384228, 0.15702493241694462, 0.1533261038705234] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18629782154384228, 0.15702493241694462, 0.1533261038705234, 0.15267958669355502] ***
*** finished computation of 7 references, err: [Inf, 0.18629782154384228, 0.15702493241694462, 0.1533261038705234, 0.15267958669355502] ***
*** center 1: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 59, 22]]
** centroid: 2, normalized-entropy: 0.8437582063121657, [(2, 59), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [77, 9, 0]]
** centroid: 3, normalized-entropy: 0.48356837509176975, [(1, 77), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [9, 88, 0]]
** centroid: 4, normalized-entropy: 0.44569317772256106, [(1, 9), (2, 88)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [24, 97, 0]]
** centroid: 5, normalized-entropy: 0.718609966948486, [(1, 24), (2, 97)]
*** center 6: selecting labels [1] (freq >= 1) [from [125, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [60, 3, 0]]
** centroid: 7, normalized-entropy: 0.2761954276479391, [(1, 60), (2, 3)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19494825847184416] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19494825847184416, 0.15445801343666207] ***
*** starting iteration: 2; err: [Inf, 0.19494825847184416, 0.15445801343666207] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19494825847184416, 0.15445801343666207, 0.15082235682079906] ***
*** starting iteration: 3; err: [Inf, 0.19494825847184416, 0.15445801343666207, 0.15082235682079906] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19494825847184416, 0.15445801343666207, 0.15082235682079906, 0.1490990016749059] ***
*** starting iteration: 4; err: [Inf, 0.19494825847184416, 0.15445801343666207, 0.15082235682079906, 0.1490990016749059] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19494825847184416, 0.15445801343666207, 0.15082235682079906, 0.1490990016749059, 0.1483596699755912] ***
*** finished computation of 7 references, err: [Inf, 0.19494825847184416, 0.15445801343666207, 0.15082235682079906, 0.1490990016749059, 0.1483596699755912] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 87, 21]]
** centroid: 1, normalized-entropy: 0.710676853856123, [(2, 87), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [83, 5, 0]]
** centroid: 3, normalized-entropy: 0.314682604134666, [(1, 83), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [61, 46, 0]]
** centroid: 4, normalized-entropy: 0.9857770091118137, [(1, 61), (2, 46)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [63, 35, 0]]
** centroid: 5, normalized-entropy: 0.940285958670631, [(1, 63), (2, 35)]
*** center 6: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 76, 3]]
** centroid: 7, normalized-entropy: 0.23292785546981223, [(2, 76), (3, 3)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18165949164475056] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18165949164475056, 0.15779379643416075] ***
*** starting iteration: 2; err: [Inf, 0.18165949164475056, 0.15779379643416075] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18165949164475056, 0.15779379643416075, 0.15361537760880398] ***
*** starting iteration: 3; err: [Inf, 0.18165949164475056, 0.15779379643416075, 0.15361537760880398] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18165949164475056, 0.15779379643416075, 0.15361537760880398, 0.15222378963020922] ***
*** starting iteration: 4; err: [Inf, 0.18165949164475056, 0.15779379643416075, 0.15361537760880398, 0.15222378963020922] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18165949164475056, 0.15779379643416075, 0.15361537760880398, 0.15222378963020922, 0.15151434855024587] ***
*** finished computation of 7 references, err: [Inf, 0.18165949164475056, 0.15779379643416075, 0.15361537760880398, 0.15222378963020922, 0.15151434855024587] ***
*** center 1: selecting labels [1] (freq >= 1) [from [114, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 61, 28]]
** centroid: 2, normalized-entropy: 0.898419774686072, [(2, 61), (3, 28)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [43, 5, 0]]
** centroid: 3, normalized-entropy: 0.4820661480830933, [(1, 43), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [86, 1, 0]]
** centroid: 4, normalized-entropy: 0.09054385326964301, [(1, 86), (2, 1)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [12, 109, 0]]
** centroid: 5, normalized-entropy: 0.46637033306518266, [(1, 12), (2, 109)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [16, 83, 0]]
** centroid: 6, normalized-entropy: 0.638161945314006, [(1, 16), (2, 83)]
*** center 7: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2499472291206007] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2499472291206007, 0.19311502072037207] ***
*** starting iteration: 2; err: [Inf, 0.2499472291206007, 0.19311502072037207] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2499472291206007, 0.19311502072037207, 0.1897940788566283] ***
*** starting iteration: 3; err: [Inf, 0.2499472291206007, 0.19311502072037207, 0.1897940788566283] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2499472291206007, 0.19311502072037207, 0.1897940788566283, 0.1891902947215246] ***
*** finished computation of 7 references, err: [Inf, 0.2499472291206007, 0.19311502072037207, 0.1897940788566283, 0.1891902947215246] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 90, 22]]
** centroid: 1, normalized-entropy: 0.7147274731317893, [(2, 90), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [41, 7, 0]]
** centroid: 3, normalized-entropy: 0.5993142373098089, [(1, 41), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [78, 29, 0]]
** centroid: 4, normalized-entropy: 0.8429359403268015, [(1, 78), (2, 29)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [76, 37, 0]]
** centroid: 5, normalized-entropy: 0.9122828071055981, [(1, 76), (2, 37)]
*** center 6: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 93, 0]]
** centroid: 7, normalized-entropy: 0.2006223243127146, [(1, 3), (2, 93)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 13)
[0.9380218541895188, 0.9310178441914969, 0.9219998441555327, 0.9129878381375387, 0.9070028111944279, 0.9060287832742923, 0.9049768331205456, 0.888981796167425, 0.8749887612163061, 0.874976773180366, 0.8599557641473808, 0.858951766137395, 0.789993586400772]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9380218541895188
finished with 14
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.30805345131056355] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30805345131056355, 0.24210668853330272] ***
*** finished computation of 3 references, err: [Inf, 0.30805345131056355, 0.24210668853330272] ***
*** center 1: selecting labels [1] (freq >= 2) [from [238, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [119, 64, 0]]
** centroid: 2, normalized-entropy: 0.9338238064061994, [(1, 119), (2, 64)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [31, 192, 22]]
** centroid: 3, normalized-entropy: 0.6089783263141205, [(1, 31), (2, 192), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3830742876037028] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3830742876037028, 0.24562562520111697] ***
*** finished computation of 3 references, err: [Inf, 0.3830742876037028, 0.24562562520111697] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [111, 133, 20]]
** centroid: 1, normalized-entropy: 0.8239100398597142, [(1, 111), (2, 133), (3, 20)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [145, 116, 4]]
** centroid: 2, normalized-entropy: 0.687111672301332, [(1, 145), (2, 116), (3, 4)]
*** center 3: selecting labels [1] (freq >= 2) [from [138, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2977570702365112] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2977570702365112, 0.23906705463011896] ***
*** finished computation of 3 references, err: [Inf, 0.2977570702365112, 0.23906705463011896] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [198, 26, 0]]
** centroid: 1, normalized-entropy: 0.517961870953001, [(1, 198), (2, 26)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 182, 28]]
** centroid: 2, normalized-entropy: 0.5665095065529052, [(2, 182), (3, 28)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [182, 51, 0]]
** centroid: 3, normalized-entropy: 0.7581246984881471, [(1, 182), (2, 51)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 14)
[0.9380218541895188, 0.9310178441914969, 0.9219998441555327, 0.9129878381375387, 0.9070028111944279, 0.9060287832742923, 0.9049768331205456, 0.888981796167425, 0.877985770201339, 0.8749887612163061, 0.874976773180366, 0.8599557641473808, 0.858951766137395, 0.789993586400772]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9380218541895188
finished with 14
iteration 3 finished
generating 4 configurations using top 12 configurations, starting with 14)
[0.9380218541895188, 0.9310178441914969, 0.9219998441555327, 0.9129878381375387, 0.9070028111944279, 0.9060287832742923, 0.9049768331205456, 0.888981796167425, 0.877985770201339, 0.8749887612163061, 0.874976773180366, 0.8599557641473808, 0.858951766137395, 0.789993586400772]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9380218541895188
finished with 14
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 14)
[0.9380218541895188, 0.9310178441914969, 0.9219998441555327, 0.9129878381375387, 0.9070028111944279, 0.9060287832742923, 0.9049768331205456, 0.888981796167425, 0.877985770201339, 0.8749887612163061, 0.874976773180366, 0.8599557641473808, 0.858951766137395, 0.789993586400772]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9380218541895188
finished with 14
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 14)
[0.9380218541895188, 0.9310178441914969, 0.9219998441555327, 0.9129878381375387, 0.9070028111944279, 0.9060287832742923, 0.9049768331205456, 0.888981796167425, 0.877985770201339, 0.8749887612163061, 0.874976773180366, 0.8599557641473808, 0.858951766137395, 0.789993586400772]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9380218541895188
finished with 15
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.3744481987720621] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3744481987720621, 0.23782380451650723] ***
*** finished computation of 3 references, err: [Inf, 0.3744481987720621, 0.23782380451650723] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [277, 12, 0]]
** centroid: 1, normalized-entropy: 0.24922973092877898, [(1, 277), (2, 12)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [3, 189, 24]]
** centroid: 2, normalized-entropy: 0.3826410623409753, [(1, 3), (2, 189), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [114, 48, 0]]
** centroid: 3, normalized-entropy: 0.876716288999464, [(1, 114), (2, 48)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3450634769335769] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3450634769335769, 0.23268537450933652] ***
*** finished computation of 3 references, err: [Inf, 0.3450634769335769, 0.23268537450933652] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [255, 22, 0]]
** centroid: 1, normalized-entropy: 0.4001406425508875, [(1, 255), (2, 22)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 193, 28]]
** centroid: 2, normalized-entropy: 0.5483091385301085, [(2, 193), (3, 28)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [125, 44, 0]]
** centroid: 3, normalized-entropy: 0.8272816445496284, [(1, 125), (2, 44)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.309049469760029] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.309049469760029, 0.24560016940568793] ***
*** finished computation of 3 references, err: [Inf, 0.309049469760029, 0.24560016940568793] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [96, 201, 22]]
** centroid: 1, normalized-entropy: 0.7617227537117864, [(1, 96), (2, 201), (3, 22)]
*** center 2: selecting labels [1] (freq >= 2) [from [182, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [110, 55, 0]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(1, 110), (2, 55)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 15)
[0.9380218541895188, 0.9310178441914969, 0.9219998441555327, 0.9129878381375387, 0.9070177962393532, 0.9070028111944279, 0.9060287832742923, 0.9049768331205456, 0.888981796167425, 0.877985770201339, 0.8749887612163061, 0.874976773180366, 0.8599557641473808, 0.858951766137395, 0.789993586400772]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9380218541895188
finished with 16
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.3286421640563544] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3286421640563544, 0.26215946130865664] ***
*** starting iteration: 2; err: [Inf, 0.3286421640563544, 0.26215946130865664] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3286421640563544, 0.26215946130865664, 0.24025372898852168] ***
*** starting iteration: 3; err: [Inf, 0.3286421640563544, 0.26215946130865664, 0.24025372898852168] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3286421640563544, 0.26215946130865664, 0.24025372898852168, 0.2341393568964155] ***
*** finished computation of 3 references, err: [Inf, 0.3286421640563544, 0.26215946130865664, 0.24025372898852168, 0.2341393568964155] ***
*** center 1: selecting labels [1] (freq >= 2) [from [245, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [117, 66, 0]]
** centroid: 2, normalized-entropy: 0.9432261548473416, [(1, 117), (2, 66)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [26, 190, 22]]
** centroid: 3, normalized-entropy: 0.5842068439639834, [(1, 26), (2, 190), (3, 22)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3522459419229175] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3522459419229175, 0.23731230656620578] ***
*** starting iteration: 2; err: [Inf, 0.3522459419229175, 0.23731230656620578] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3522459419229175, 0.23731230656620578, 0.2323546638081166] ***
*** starting iteration: 3; err: [Inf, 0.3522459419229175, 0.23731230656620578, 0.2323546638081166] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3522459419229175, 0.23731230656620578, 0.2323546638081166, 0.23179499108227028] ***
*** finished computation of 3 references, err: [Inf, 0.3522459419229175, 0.23731230656620578, 0.2323546638081166, 0.23179499108227028] ***
*** center 1: selecting labels [1] (freq >= 2) [from [211, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [75, 134, 13]]
** centroid: 2, normalized-entropy: 0.7623372240335895, [(1, 75), (2, 134), (3, 13)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [108, 115, 11]]
** centroid: 3, normalized-entropy: 0.7734346497446213, [(1, 108), (2, 115), (3, 11)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2953906165969291] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2953906165969291, 0.25908502944042794] ***
*** starting iteration: 2; err: [Inf, 0.2953906165969291, 0.25908502944042794] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2953906165969291, 0.25908502944042794, 0.24212667280095984] ***
*** starting iteration: 3; err: [Inf, 0.2953906165969291, 0.25908502944042794, 0.24212667280095984] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2953906165969291, 0.25908502944042794, 0.24212667280095984, 0.23845840605168506] ***
*** finished computation of 3 references, err: [Inf, 0.2953906165969291, 0.25908502944042794, 0.24212667280095984, 0.23845840605168506] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [204, 24, 0]]
** centroid: 1, normalized-entropy: 0.48546076074591343, [(1, 204), (2, 24)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 207, 28]]
** centroid: 2, normalized-entropy: 0.5269095507353263, [(2, 207), (3, 28)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [176, 28, 0]]
** centroid: 3, normalized-entropy: 0.577004250315725, [(1, 176), (2, 28)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 16)
[0.9380218541895188, 0.9310178441914969, 0.9219998441555327, 0.9129878381375387, 0.9070177962393532, 0.9070028111944279, 0.9060287832742923, 0.9049768331205456, 0.897993802185419, 0.888981796167425, 0.877985770201339, 0.8749887612163061, 0.874976773180366, 0.8599557641473808, 0.858951766137395, 0.789993586400772]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9380218541895188
finished with 16
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9380218541895188, 0.9310178441914969, 0.9219998441555327, 0.9129878381375387, 0.9070177962393532, 0.9070028111944279, 0.9060287832742923, 0.9049768331205456, 0.897993802185419, 0.888981796167425, 0.877985770201339, 0.8749887612163061, 0.874976773180366, 0.8599557641473808, 0.858951766137395, 0.789993586400772]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :fft, 0.6, 1) => 0.9380218541895188
finished with 16
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.19929432780994102] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19929432780994102, 0.15699050662154332] ***
*** starting iteration: 2; err: [Inf, 0.19929432780994102, 0.15699050662154332] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19929432780994102, 0.15699050662154332, 0.15263699710648507] ***
*** starting iteration: 3; err: [Inf, 0.19929432780994102, 0.15699050662154332, 0.15263699710648507] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19929432780994102, 0.15699050662154332, 0.15263699710648507, 0.1519778829710558] ***
*** finished computation of 7 references, err: [Inf, 0.19929432780994102, 0.15699050662154332, 0.15263699710648507, 0.1519778829710558] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [6, 148, 0]]
** centroid: 1, normalized-entropy: 0.23750814382859295, [(1, 6), (2, 148)]
*** center 2: selecting labels [1] (freq >= 1) [from [120, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [90, 76, 0]]
** centroid: 3, normalized-entropy: 0.9948631079048572, [(1, 90), (2, 76)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [73, 32, 0]]
** centroid: 4, normalized-entropy: 0.8870341576828725, [(1, 73), (2, 32)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [165, 8, 0]]
** centroid: 5, normalized-entropy: 0.27021686722886573, [(1, 165), (2, 8)]
*** center 6: selecting labels [1] (freq >= 1) [from [127, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 118, 37]]
** centroid: 7, normalized-entropy: 0.7928879255776673, [(2, 118), (3, 37)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17985224281065165] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17985224281065165, 0.15130468138307332] ***
*** starting iteration: 2; err: [Inf, 0.17985224281065165, 0.15130468138307332] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17985224281065165, 0.15130468138307332, 0.1471326712463051] ***
*** starting iteration: 3; err: [Inf, 0.17985224281065165, 0.15130468138307332, 0.1471326712463051] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17985224281065165, 0.15130468138307332, 0.1471326712463051, 0.1461884593674913] ***
*** finished computation of 7 references, err: [Inf, 0.17985224281065165, 0.15130468138307332, 0.1471326712463051, 0.1461884593674913] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [85, 10, 0]]
** centroid: 1, normalized-entropy: 0.48546076074591343, [(1, 85), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [47, 8, 0]]
** centroid: 2, normalized-entropy: 0.5983474220910422, [(1, 47), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 32, 21]]
** centroid: 3, normalized-entropy: 0.9687003436508602, [(2, 32), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [3, 74, 0]]
** centroid: 5, normalized-entropy: 0.23750814382859295, [(1, 3), (2, 74)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 70, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1930341758169234] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1930341758169234, 0.15569567234255374] ***
*** starting iteration: 2; err: [Inf, 0.1930341758169234, 0.15569567234255374] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1930341758169234, 0.15569567234255374, 0.1514889320600778] ***
*** starting iteration: 3; err: [Inf, 0.1930341758169234, 0.15569567234255374, 0.1514889320600778] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1930341758169234, 0.15569567234255374, 0.1514889320600778, 0.15045649188011884] ***
*** starting iteration: 4; err: [Inf, 0.1930341758169234, 0.15569567234255374, 0.1514889320600778, 0.15045649188011884] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1930341758169234, 0.15569567234255374, 0.1514889320600778, 0.15045649188011884, 0.15000504357554018] ***
*** finished computation of 7 references, err: [Inf, 0.1930341758169234, 0.15569567234255374, 0.1514889320600778, 0.15045649188011884, 0.15000504357554018] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [25, 64, 0]]
** centroid: 1, normalized-entropy: 0.8566727035015875, [(1, 25), (2, 64)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [61, 1, 0]]
** centroid: 2, normalized-entropy: 0.11911602665564841, [(1, 61), (2, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 33, 17]]
** centroid: 4, normalized-entropy: 0.9248187049730301, [(2, 33), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [56, 9, 0]]
** centroid: 5, normalized-entropy: 0.5801954953637372, [(1, 56), (2, 9)]
*** center 6: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 75, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18301123520918192] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18301123520918192, 0.14877623658813535] ***
*** starting iteration: 2; err: [Inf, 0.18301123520918192, 0.14877623658813535] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18301123520918192, 0.14877623658813535, 0.1468164049461484] ***
*** starting iteration: 3; err: [Inf, 0.18301123520918192, 0.14877623658813535, 0.1468164049461484] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18301123520918192, 0.14877623658813535, 0.1468164049461484, 0.14670701844803988] ***
*** finished computation of 7 references, err: [Inf, 0.18301123520918192, 0.14877623658813535, 0.1468164049461484, 0.14670701844803988] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [31, 51, 0]]
** centroid: 1, normalized-entropy: 0.956652272148091, [(1, 31), (2, 51)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [55, 13, 0]]
** centroid: 2, normalized-entropy: 0.7039260680195971, [(1, 55), (2, 13)]
*** center 3: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 65, 7]]
** centroid: 4, normalized-entropy: 0.460127886147135, [(2, 65), (3, 7)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [64, 11, 0]]
** centroid: 5, normalized-entropy: 0.6014353864290773, [(1, 64), (2, 11)]
*** center 6: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 56, 9]]
** centroid: 7, normalized-entropy: 0.5801954953637372, [(2, 56), (3, 9)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1957922980580479] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1957922980580479, 0.15267109543643892] ***
*** starting iteration: 2; err: [Inf, 0.1957922980580479, 0.15267109543643892] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1957922980580479, 0.15267109543643892, 0.14924807296320797] ***
*** starting iteration: 3; err: [Inf, 0.1957922980580479, 0.15267109543643892, 0.14924807296320797] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1957922980580479, 0.15267109543643892, 0.14924807296320797, 0.1488814113792032] ***
*** finished computation of 7 references, err: [Inf, 0.1957922980580479, 0.15267109543643892, 0.14924807296320797, 0.1488814113792032] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [11, 75, 0]]
** centroid: 1, normalized-entropy: 0.5516699920020824, [(1, 11), (2, 75)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [40, 26, 0]]
** centroid: 2, normalized-entropy: 0.9672947789468944, [(1, 40), (2, 26)]
*** center 3: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 53, 20]]
** centroid: 4, normalized-entropy: 0.847107490529376, [(2, 53), (3, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [44, 17, 0]]
** centroid: 5, normalized-entropy: 0.8536576732793314, [(1, 44), (2, 17)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [78, 5, 0]]
** centroid: 6, normalized-entropy: 0.32840071392894665, [(1, 78), (2, 5)]
*** center 7: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18465626953728498] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18465626953728498, 0.15503197504207492] ***
*** starting iteration: 2; err: [Inf, 0.18465626953728498, 0.15503197504207492] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18465626953728498, 0.15503197504207492, 0.15028323428705334] ***
*** starting iteration: 3; err: [Inf, 0.18465626953728498, 0.15503197504207492, 0.15028323428705334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18465626953728498, 0.15503197504207492, 0.15028323428705334, 0.14867936928197742] ***
*** starting iteration: 4; err: [Inf, 0.18465626953728498, 0.15503197504207492, 0.15028323428705334, 0.14867936928197742] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18465626953728498, 0.15503197504207492, 0.15028323428705334, 0.14867936928197742, 0.14777264752797784] ***
*** finished computation of 7 references, err: [Inf, 0.18465626953728498, 0.15503197504207492, 0.15028323428705334, 0.14867936928197742, 0.14777264752797784] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [22, 62, 0]]
** centroid: 1, normalized-entropy: 0.8296071030882032, [(1, 22), (2, 62)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [54, 8, 0]]
** centroid: 2, normalized-entropy: 0.5547781633412736, [(1, 54), (2, 8)]
*** center 3: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 59, 15]]
** centroid: 4, normalized-entropy: 0.7273006785144036, [(2, 59), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [72, 2, 0]]
** centroid: 5, normalized-entropy: 0.1792560669283214, [(1, 72), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 66, 0]]
** centroid: 6, normalized-entropy: 0.1914332548141934, [(1, 2), (2, 66)]
*** center 7: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19388969445414841] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19388969445414841, 0.1512160840984434] ***
*** starting iteration: 2; err: [Inf, 0.19388969445414841, 0.1512160840984434] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19388969445414841, 0.1512160840984434, 0.14704283213801683] ***
*** starting iteration: 3; err: [Inf, 0.19388969445414841, 0.1512160840984434, 0.14704283213801683] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19388969445414841, 0.1512160840984434, 0.14704283213801683, 0.14567150660324843] ***
*** starting iteration: 4; err: [Inf, 0.19388969445414841, 0.1512160840984434, 0.14704283213801683, 0.14567150660324843] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19388969445414841, 0.1512160840984434, 0.14704283213801683, 0.14567150660324843, 0.1451917873173952] ***
*** finished computation of 7 references, err: [Inf, 0.19388969445414841, 0.1512160840984434, 0.14704283213801683, 0.14567150660324843, 0.1451917873173952] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [79, 6, 0]]
** centroid: 1, normalized-entropy: 0.3681150054280774, [(1, 79), (2, 6)]
*** center 2: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 35, 14]]
** centroid: 3, normalized-entropy: 0.8631205685666311, [(2, 35), (3, 14)]
*** center 4: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [4, 84, 0]]
** centroid: 6, normalized-entropy: 0.2667649878030262, [(1, 4), (2, 84)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [11, 67, 0]]
** centroid: 7, normalized-entropy: 0.5869185834047994, [(1, 11), (2, 67)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18800125010311602] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18800125010311602, 0.15189242499880493] ***
*** starting iteration: 2; err: [Inf, 0.18800125010311602, 0.15189242499880493] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18800125010311602, 0.15189242499880493, 0.14723157336562873] ***
*** starting iteration: 3; err: [Inf, 0.18800125010311602, 0.15189242499880493, 0.14723157336562873] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18800125010311602, 0.15189242499880493, 0.14723157336562873, 0.1455534518882632] ***
*** starting iteration: 4; err: [Inf, 0.18800125010311602, 0.15189242499880493, 0.14723157336562873, 0.1455534518882632] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18800125010311602, 0.15189242499880493, 0.14723157336562873, 0.1455534518882632, 0.1453034437224269] ***
*** finished computation of 7 references, err: [Inf, 0.18800125010311602, 0.15189242499880493, 0.14723157336562873, 0.1455534518882632, 0.1453034437224269] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 58, 18]]
** centroid: 1, normalized-entropy: 0.7897492536625221, [(2, 58), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [42, 22, 0]]
** centroid: 3, normalized-entropy: 0.9283620723948678, [(1, 42), (2, 22)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [71, 14, 0]]
** centroid: 4, normalized-entropy: 0.6454495903301855, [(1, 71), (2, 14)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [56, 29, 0]]
** centroid: 5, normalized-entropy: 0.9259400597385792, [(1, 56), (2, 29)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 65, 1]]
** centroid: 6, normalized-entropy: 0.11327430349709665, [(2, 65), (3, 1)]
*** center 7: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1991353248578962] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1991353248578962, 0.15840898720454424] ***
*** starting iteration: 2; err: [Inf, 0.1991353248578962, 0.15840898720454424] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1991353248578962, 0.15840898720454424, 0.15405093218851834] ***
*** starting iteration: 3; err: [Inf, 0.1991353248578962, 0.15840898720454424, 0.15405093218851834] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1991353248578962, 0.15840898720454424, 0.15405093218851834, 0.1519376009963453] ***
*** starting iteration: 4; err: [Inf, 0.1991353248578962, 0.15840898720454424, 0.15405093218851834, 0.1519376009963453] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1991353248578962, 0.15840898720454424, 0.15405093218851834, 0.1519376009963453, 0.1511096196388826] ***
*** finished computation of 7 references, err: [Inf, 0.1991353248578962, 0.15840898720454424, 0.15405093218851834, 0.1519376009963453, 0.1511096196388826] ***
*** center 1: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 69, 13]]
** centroid: 2, normalized-entropy: 0.6307970795750609, [(2, 69), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [39, 13, 0]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(1, 39), (2, 13)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [71, 22, 0]]
** centroid: 4, normalized-entropy: 0.7892712724536985, [(1, 71), (2, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [63, 29, 0]]
** centroid: 5, normalized-entropy: 0.8991045208483789, [(1, 63), (2, 29)]
*** center 6: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 57, 1]]
** centroid: 7, normalized-entropy: 0.12565805017256745, [(2, 57), (3, 1)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18936085428856314] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18936085428856314, 0.15487997312005608] ***
*** starting iteration: 2; err: [Inf, 0.18936085428856314, 0.15487997312005608] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18936085428856314, 0.15487997312005608, 0.151442834649235] ***
*** starting iteration: 3; err: [Inf, 0.18936085428856314, 0.15487997312005608, 0.151442834649235] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18936085428856314, 0.15487997312005608, 0.151442834649235, 0.15066688617318869] ***
*** finished computation of 7 references, err: [Inf, 0.18936085428856314, 0.15487997312005608, 0.151442834649235, 0.15066688617318869] ***
*** center 1: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 53, 14]]
** centroid: 2, normalized-entropy: 0.7394809367166378, [(2, 53), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [68, 19, 0]]
** centroid: 3, normalized-entropy: 0.7572182549240017, [(1, 68), (2, 19)]
*** center 4: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [29, 42, 0]]
** centroid: 5, normalized-entropy: 0.9756797868933086, [(1, 29), (2, 42)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 81, 0]]
** centroid: 6, normalized-entropy: 0.09501724567107643, [(1, 1), (2, 81)]
*** center 7: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1904911885075271] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1904911885075271, 0.15183140121586622] ***
*** starting iteration: 2; err: [Inf, 0.1904911885075271, 0.15183140121586622] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1904911885075271, 0.15183140121586622, 0.14868004311807453] ***
*** starting iteration: 3; err: [Inf, 0.1904911885075271, 0.15183140121586622, 0.14868004311807453] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1904911885075271, 0.15183140121586622, 0.14868004311807453, 0.14848847187589853] ***
*** finished computation of 7 references, err: [Inf, 0.1904911885075271, 0.15183140121586622, 0.14868004311807453, 0.14848847187589853] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 62, 17]]
** centroid: 1, normalized-entropy: 0.751286576718343, [(2, 62), (3, 17)]
*** center 2: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [52, 4, 0]]
** centroid: 3, normalized-entropy: 0.3712323266408756, [(1, 52), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [75, 20, 0]]
** centroid: 4, normalized-entropy: 0.7424875695421234, [(1, 75), (2, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [43, 28, 0]]
** centroid: 5, normalized-entropy: 0.9675594819018211, [(1, 43), (2, 28)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 86, 0]]
** centroid: 6, normalized-entropy: 0.1564910629057016, [(1, 2), (2, 86)]
*** center 7: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.193353175599128] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.193353175599128, 0.1567962332237512] ***
*** starting iteration: 2; err: [Inf, 0.193353175599128, 0.1567962332237512] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.193353175599128, 0.1567962332237512, 0.15287972305342554] ***
*** starting iteration: 3; err: [Inf, 0.193353175599128, 0.1567962332237512, 0.15287972305342554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.193353175599128, 0.1567962332237512, 0.15287972305342554, 0.15108631677366793] ***
*** starting iteration: 4; err: [Inf, 0.193353175599128, 0.1567962332237512, 0.15287972305342554, 0.15108631677366793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.193353175599128, 0.1567962332237512, 0.15287972305342554, 0.15108631677366793, 0.15011496012378484] ***
*** finished computation of 7 references, err: [Inf, 0.193353175599128, 0.1567962332237512, 0.15287972305342554, 0.15108631677366793, 0.15011496012378484] ***
*** center 1: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 55, 19]]
** centroid: 2, normalized-entropy: 0.8218127305034848, [(2, 55), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [42, 32, 0]]
** centroid: 3, normalized-entropy: 0.9867867202680318, [(1, 42), (2, 32)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [75, 4, 0]]
** centroid: 4, normalized-entropy: 0.2890794597316462, [(1, 75), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [28, 39, 0]]
** centroid: 5, normalized-entropy: 0.9804679314541813, [(1, 28), (2, 39)]
*** center 6: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 62, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19543670258298515] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19543670258298515, 0.15301448331493883] ***
*** starting iteration: 2; err: [Inf, 0.19543670258298515, 0.15301448331493883] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19543670258298515, 0.15301448331493883, 0.15069386183470487] ***
*** starting iteration: 3; err: [Inf, 0.19543670258298515, 0.15301448331493883, 0.15069386183470487] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19543670258298515, 0.15301448331493883, 0.15069386183470487, 0.14903494721837343] ***
*** starting iteration: 4; err: [Inf, 0.19543670258298515, 0.15301448331493883, 0.15069386183470487, 0.14903494721837343] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19543670258298515, 0.15301448331493883, 0.15069386183470487, 0.14903494721837343, 0.14847630229312928] ***
*** finished computation of 7 references, err: [Inf, 0.19543670258298515, 0.15301448331493883, 0.15069386183470487, 0.14903494721837343, 0.14847630229312928] ***
*** center 1: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 49, 22]]
** centroid: 2, normalized-entropy: 0.893010810044601, [(2, 49), (3, 22)]
*** center 3: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [62, 27, 0]]
** centroid: 4, normalized-entropy: 0.8853723770068483, [(1, 62), (2, 27)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [45, 28, 0]]
** centroid: 5, normalized-entropy: 0.9605187074766162, [(1, 45), (2, 28)]
*** center 6: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [6, 78, 0]]
** centroid: 7, normalized-entropy: 0.3712323266408756, [(1, 6), (2, 78)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18620637875795365] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18620637875795365, 0.15745218883827328] ***
*** starting iteration: 2; err: [Inf, 0.18620637875795365, 0.15745218883827328] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18620637875795365, 0.15745218883827328, 0.15242637478839607] ***
*** starting iteration: 3; err: [Inf, 0.18620637875795365, 0.15745218883827328, 0.15242637478839607] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18620637875795365, 0.15745218883827328, 0.15242637478839607, 0.1501369934566319] ***
*** starting iteration: 4; err: [Inf, 0.18620637875795365, 0.15745218883827328, 0.15242637478839607, 0.1501369934566319] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18620637875795365, 0.15745218883827328, 0.15242637478839607, 0.1501369934566319, 0.14777373318001627] ***
*** starting iteration: 5; err: [Inf, 0.18620637875795365, 0.15745218883827328, 0.15242637478839607, 0.1501369934566319, 0.14777373318001627] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18620637875795365, 0.15745218883827328, 0.15242637478839607, 0.1501369934566319, 0.14777373318001627, 0.14628894676081836] ***
*** starting iteration: 6; err: [Inf, 0.18620637875795365, 0.15745218883827328, 0.15242637478839607, 0.1501369934566319, 0.14777373318001627, 0.14628894676081836] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18620637875795365, 0.15745218883827328, 0.15242637478839607, 0.1501369934566319, 0.14777373318001627, 0.14628894676081836, 0.14555605939030647] ***
*** finished computation of 7 references, err: [Inf, 0.18620637875795365, 0.15745218883827328, 0.15242637478839607, 0.1501369934566319, 0.14777373318001627, 0.14628894676081836, 0.14555605939030647] ***
*** center 1: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 42, 19]]
** centroid: 2, normalized-entropy: 0.8948692308065576, [(2, 42), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [43, 6, 0]]
** centroid: 3, normalized-entropy: 0.5363596511250623, [(1, 43), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [68, 4, 0]]
** centroid: 4, normalized-entropy: 0.3095434291503252, [(1, 68), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [3, 81, 0]]
** centroid: 5, normalized-entropy: 0.2222848306856879, [(1, 3), (2, 81)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [39, 46, 0]]
** centroid: 6, normalized-entropy: 0.9951022712641691, [(1, 39), (2, 46)]
*** center 7: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1911046897917986] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1911046897917986, 0.1533723859777674] ***
*** starting iteration: 2; err: [Inf, 0.1911046897917986, 0.1533723859777674] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1911046897917986, 0.1533723859777674, 0.150113200715743] ***
*** starting iteration: 3; err: [Inf, 0.1911046897917986, 0.1533723859777674, 0.150113200715743] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1911046897917986, 0.1533723859777674, 0.150113200715743, 0.14906931266747414] ***
*** starting iteration: 4; err: [Inf, 0.1911046897917986, 0.1533723859777674, 0.150113200715743, 0.14906931266747414] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1911046897917986, 0.1533723859777674, 0.150113200715743, 0.14906931266747414, 0.14874600246921182] ***
*** finished computation of 7 references, err: [Inf, 0.1911046897917986, 0.1533723859777674, 0.150113200715743, 0.14906931266747414, 0.14874600246921182] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [24, 45, 0]]
** centroid: 1, normalized-entropy: 0.9321115676166747, [(1, 24), (2, 45)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [58, 11, 0]]
** centroid: 2, normalized-entropy: 0.6329208984823799, [(1, 58), (2, 11)]
*** center 3: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 71, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [57, 23, 0]]
** centroid: 5, normalized-entropy: 0.8654698974285927, [(1, 57), (2, 23)]
*** center 6: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 55, 17]]
** centroid: 7, normalized-entropy: 0.7885131605379784, [(2, 55), (3, 17)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19865500083938242] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19865500083938242, 0.15312231015972794] ***
*** starting iteration: 2; err: [Inf, 0.19865500083938242, 0.15312231015972794] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19865500083938242, 0.15312231015972794, 0.14827937749028205] ***
*** starting iteration: 3; err: [Inf, 0.19865500083938242, 0.15312231015972794, 0.14827937749028205] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19865500083938242, 0.15312231015972794, 0.14827937749028205, 0.14727120334096253] ***
*** starting iteration: 4; err: [Inf, 0.19865500083938242, 0.15312231015972794, 0.14827937749028205, 0.14727120334096253] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19865500083938242, 0.15312231015972794, 0.14827937749028205, 0.14727120334096253, 0.14711145448125898] ***
*** finished computation of 7 references, err: [Inf, 0.19865500083938242, 0.15312231015972794, 0.14827937749028205, 0.14727120334096253, 0.14711145448125898] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 63, 11]]
** centroid: 1, normalized-entropy: 0.6064481901491525, [(2, 63), (3, 11)]
*** center 2: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [32, 18, 0]]
** centroid: 3, normalized-entropy: 0.9426831892554921, [(1, 32), (2, 18)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [75, 11, 0]]
** centroid: 4, normalized-entropy: 0.5516699920020824, [(1, 75), (2, 11)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [45, 38, 0]]
** centroid: 5, normalized-entropy: 0.9948631079048572, [(1, 45), (2, 38)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 61, 6]]
** centroid: 6, normalized-entropy: 0.43497348007474274, [(2, 61), (3, 6)]
*** center 7: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17986399225145577] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17986399225145577, 0.15269658426195384] ***
*** starting iteration: 2; err: [Inf, 0.17986399225145577, 0.15269658426195384] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17986399225145577, 0.15269658426195384, 0.14982348720077426] ***
*** starting iteration: 3; err: [Inf, 0.17986399225145577, 0.15269658426195384, 0.14982348720077426] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17986399225145577, 0.15269658426195384, 0.14982348720077426, 0.14905380274169147] ***
*** finished computation of 7 references, err: [Inf, 0.17986399225145577, 0.15269658426195384, 0.14982348720077426, 0.14905380274169147] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 76, 10]]
** centroid: 1, normalized-entropy: 0.5185697317883058, [(2, 76), (3, 10)]
*** center 2: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [49, 13, 0]]
** centroid: 3, normalized-entropy: 0.7408656862339816, [(1, 49), (2, 13)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [36, 12, 0]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(1, 36), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [74, 19, 0]]
** centroid: 5, normalized-entropy: 0.7304472862481346, [(1, 74), (2, 19)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 81, 8]]
** centroid: 6, normalized-entropy: 0.43609466429612137, [(2, 81), (3, 8)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [54, 6, 0]]
** centroid: 7, normalized-entropy: 0.46899559358928133, [(1, 54), (2, 6)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19118597065471113] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19118597065471113, 0.1491699847234413] ***
*** starting iteration: 2; err: [Inf, 0.19118597065471113, 0.1491699847234413] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19118597065471113, 0.1491699847234413, 0.1457230733684264] ***
*** starting iteration: 3; err: [Inf, 0.19118597065471113, 0.1491699847234413, 0.1457230733684264] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19118597065471113, 0.1491699847234413, 0.1457230733684264, 0.14499879161012358] ***
*** finished computation of 7 references, err: [Inf, 0.19118597065471113, 0.1491699847234413, 0.1457230733684264, 0.14499879161012358] ***
*** center 1: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 38, 19]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(2, 38), (3, 19)]
*** center 4: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [61, 23, 0]]
** centroid: 5, normalized-entropy: 0.8468781063424823, [(1, 61), (2, 23)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [11, 61, 0]]
** centroid: 6, normalized-entropy: 0.6167482598263911, [(1, 11), (2, 61)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [4, 65, 0]]
** centroid: 7, normalized-entropy: 0.3193373865339728, [(1, 4), (2, 65)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1903489424083382] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1903489424083382, 0.1516719275470823] ***
*** starting iteration: 2; err: [Inf, 0.1903489424083382, 0.1516719275470823] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1903489424083382, 0.1516719275470823, 0.1488702386636287] ***
*** starting iteration: 3; err: [Inf, 0.1903489424083382, 0.1516719275470823, 0.1488702386636287] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1903489424083382, 0.1516719275470823, 0.1488702386636287, 0.14830347985960543] ***
*** finished computation of 7 references, err: [Inf, 0.1903489424083382, 0.1516719275470823, 0.1488702386636287, 0.14830347985960543] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [1, 90, 0]]
** centroid: 1, normalized-entropy: 0.08728058888363333, [(1, 1), (2, 90)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [46, 17, 0]]
** centroid: 2, normalized-entropy: 0.8412367762002599, [(1, 46), (2, 17)]
*** center 3: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 59, 19]]
** centroid: 4, normalized-entropy: 0.8009591077369054, [(2, 59), (3, 19)]
*** center 5: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [73, 18, 0]]
** centroid: 6, normalized-entropy: 0.7175106531195438, [(1, 73), (2, 18)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [42, 9, 0]]
** centroid: 7, normalized-entropy: 0.6722948170756378, [(1, 42), (2, 9)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1993580893240869] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1993580893240869, 0.15580875916220246] ***
*** starting iteration: 2; err: [Inf, 0.1993580893240869, 0.15580875916220246] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1993580893240869, 0.15580875916220246, 0.1520168420933187] ***
*** starting iteration: 3; err: [Inf, 0.1993580893240869, 0.15580875916220246, 0.1520168420933187] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1993580893240869, 0.15580875916220246, 0.1520168420933187, 0.15103218961134554] ***
*** finished computation of 7 references, err: [Inf, 0.1993580893240869, 0.15580875916220246, 0.1520168420933187, 0.15103218961134554] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [77, 15, 0]]
** centroid: 1, normalized-entropy: 0.6415410585827175, [(1, 77), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [32, 4, 0]]
** centroid: 2, normalized-entropy: 0.5032583347756457, [(1, 32), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 72, 14]]
** centroid: 3, normalized-entropy: 0.6409441847875289, [(2, 72), (3, 14)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [51, 24, 0]]
** centroid: 4, normalized-entropy: 0.9043814577244941, [(1, 51), (2, 24)]
*** center 5: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [7, 76, 0]]
** centroid: 6, normalized-entropy: 0.4172806906708316, [(1, 7), (2, 76)]
*** center 7: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18205582511425017] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18205582511425017, 0.15331899196840823] ***
*** starting iteration: 2; err: [Inf, 0.18205582511425017, 0.15331899196840823] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18205582511425017, 0.15331899196840823, 0.1490540938358754] ***
*** starting iteration: 3; err: [Inf, 0.18205582511425017, 0.15331899196840823, 0.1490540938358754] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18205582511425017, 0.15331899196840823, 0.1490540938358754, 0.14811054492741824] ***
*** finished computation of 7 references, err: [Inf, 0.18205582511425017, 0.15331899196840823, 0.1490540938358754, 0.14811054492741824] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 64, 16]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(2, 64), (3, 16)]
*** center 2: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [45, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [36, 21, 0]]
** centroid: 4, normalized-entropy: 0.9494520153879484, [(1, 36), (2, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [87, 7, 0]]
** centroid: 5, normalized-entropy: 0.3823806751537801, [(1, 87), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [64, 4, 0]]
** centroid: 6, normalized-entropy: 0.32275695889739825, [(1, 64), (2, 4)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 89, 0]]
** centroid: 7, normalized-entropy: 0.08807225904068142, [(1, 1), (2, 89)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20073182823881508] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20073182823881508, 0.15743995858822019] ***
*** starting iteration: 2; err: [Inf, 0.20073182823881508, 0.15743995858822019] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20073182823881508, 0.15743995858822019, 0.15338222155813128] ***
*** starting iteration: 3; err: [Inf, 0.20073182823881508, 0.15743995858822019, 0.15338222155813128] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20073182823881508, 0.15743995858822019, 0.15338222155813128, 0.1528162623727694] ***
*** finished computation of 7 references, err: [Inf, 0.20073182823881508, 0.15743995858822019, 0.15338222155813128, 0.1528162623727694] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [13, 59, 0]]
** centroid: 1, normalized-entropy: 0.6812908868842175, [(1, 13), (2, 59)]
*** center 2: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [40, 23, 0]]
** centroid: 3, normalized-entropy: 0.9468188316776024, [(1, 40), (2, 23)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [42, 37, 0]]
** centroid: 4, normalized-entropy: 0.9971085167216716, [(1, 42), (2, 37)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 57, 17]]
** centroid: 5, normalized-entropy: 0.77753986416076, [(2, 57), (3, 17)]
*** center 6: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19891394321992995] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19891394321992995, 0.15242154012061657] ***
*** starting iteration: 2; err: [Inf, 0.19891394321992995, 0.15242154012061657] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19891394321992995, 0.15242154012061657, 0.14936045457422734] ***
*** starting iteration: 3; err: [Inf, 0.19891394321992995, 0.15242154012061657, 0.14936045457422734] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19891394321992995, 0.15242154012061657, 0.14936045457422734, 0.14874573199078442] ***
*** finished computation of 7 references, err: [Inf, 0.19891394321992995, 0.15242154012061657, 0.14936045457422734, 0.14874573199078442] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 81, 2]]
** centroid: 1, normalized-entropy: 0.1638605128691586, [(2, 81), (3, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [25, 22, 0]]
** centroid: 3, normalized-entropy: 0.9970590569034106, [(1, 25), (2, 22)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [82, 6, 0]]
** centroid: 4, normalized-entropy: 0.3591016256485496, [(1, 82), (2, 6)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [51, 26, 0]]
** centroid: 5, normalized-entropy: 0.9225641366401655, [(1, 51), (2, 26)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 63, 16]]
** centroid: 6, normalized-entropy: 0.7269625813353975, [(2, 63), (3, 16)]
*** center 7: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19174132027104496] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19174132027104496, 0.15645724772382527] ***
*** starting iteration: 2; err: [Inf, 0.19174132027104496, 0.15645724772382527] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19174132027104496, 0.15645724772382527, 0.15304052386293188] ***
*** starting iteration: 3; err: [Inf, 0.19174132027104496, 0.15645724772382527, 0.15304052386293188] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19174132027104496, 0.15645724772382527, 0.15304052386293188, 0.15168222144152968] ***
*** starting iteration: 4; err: [Inf, 0.19174132027104496, 0.15645724772382527, 0.15304052386293188, 0.15168222144152968] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19174132027104496, 0.15645724772382527, 0.15304052386293188, 0.15168222144152968, 0.1509439425095916] ***
*** finished computation of 7 references, err: [Inf, 0.19174132027104496, 0.15645724772382527, 0.15304052386293188, 0.15168222144152968, 0.1509439425095916] ***
*** center 1: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [73, 7, 0]]
** centroid: 2, normalized-entropy: 0.4280696292293062, [(1, 73), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 51, 16]]
** centroid: 3, normalized-entropy: 0.7930490047779772, [(2, 51), (3, 16)]
*** center 4: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [20, 59, 0]]
** centroid: 5, normalized-entropy: 0.8162554088088008, [(1, 20), (2, 59)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [12, 63, 0]]
** centroid: 6, normalized-entropy: 0.634309554640566, [(1, 12), (2, 63)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [39, 2, 0]]
** centroid: 7, normalized-entropy: 0.2811937964320427, [(1, 39), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20068320902436973] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20068320902436973, 0.15378087361808868] ***
*** starting iteration: 2; err: [Inf, 0.20068320902436973, 0.15378087361808868] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20068320902436973, 0.15378087361808868, 0.1498536013122648] ***
*** starting iteration: 3; err: [Inf, 0.20068320902436973, 0.15378087361808868, 0.1498536013122648] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20068320902436973, 0.15378087361808868, 0.1498536013122648, 0.14880190010508523] ***
*** starting iteration: 4; err: [Inf, 0.20068320902436973, 0.15378087361808868, 0.1498536013122648, 0.14880190010508523] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20068320902436973, 0.15378087361808868, 0.1498536013122648, 0.14880190010508523, 0.14809583216905595] ***
*** finished computation of 7 references, err: [Inf, 0.20068320902436973, 0.15378087361808868, 0.1498536013122648, 0.14880190010508523, 0.14809583216905595] ***
*** center 1: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 40, 16]]
** centroid: 2, normalized-entropy: 0.8631205685666311, [(2, 40), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [51, 2, 0]]
** centroid: 3, normalized-entropy: 0.23181305002459035, [(1, 51), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [66, 24, 0]]
** centroid: 4, normalized-entropy: 0.8366407419411671, [(1, 66), (2, 24)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [43, 37, 0]]
** centroid: 5, normalized-entropy: 0.9959386076315955, [(1, 43), (2, 37)]
*** center 6: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 75, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19689166253991425] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19689166253991425, 0.15064127614721656] ***
*** starting iteration: 2; err: [Inf, 0.19689166253991425, 0.15064127614721656] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19689166253991425, 0.15064127614721656, 0.14799051734060048] ***
*** starting iteration: 3; err: [Inf, 0.19689166253991425, 0.15064127614721656, 0.14799051734060048] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19689166253991425, 0.15064127614721656, 0.14799051734060048, 0.14793667869456112] ***
*** finished computation of 7 references, err: [Inf, 0.19689166253991425, 0.15064127614721656, 0.14799051734060048, 0.14793667869456112] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 59, 20]]
** centroid: 1, normalized-entropy: 0.8162554088088008, [(2, 59), (3, 20)]
*** center 2: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [66, 2, 0]]
** centroid: 3, normalized-entropy: 0.1914332548141934, [(1, 66), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [45, 18, 0]]
** centroid: 4, normalized-entropy: 0.8631205685666311, [(1, 45), (2, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [65, 23, 0]]
** centroid: 5, normalized-entropy: 0.828797154590015, [(1, 65), (2, 23)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 75, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [43, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19656994974426925] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19656994974426925, 0.15275160325225443] ***
*** starting iteration: 2; err: [Inf, 0.19656994974426925, 0.15275160325225443] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19656994974426925, 0.15275160325225443, 0.1492379922904074] ***
*** starting iteration: 3; err: [Inf, 0.19656994974426925, 0.15275160325225443, 0.1492379922904074] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19656994974426925, 0.15275160325225443, 0.1492379922904074, 0.14853526495210825] ***
*** finished computation of 7 references, err: [Inf, 0.19656994974426925, 0.15275160325225443, 0.1492379922904074, 0.14853526495210825] ***
*** center 1: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 31, 18]]
** centroid: 3, normalized-entropy: 0.9486131982385807, [(2, 31), (3, 18)]
*** center 4: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [43, 26, 0]]
** centroid: 5, normalized-entropy: 0.9557589912150007, [(1, 43), (2, 26)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 63, 0]]
** centroid: 6, normalized-entropy: 0.2667649878030262, [(1, 3), (2, 63)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 75, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20223111460357904] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20223111460357904, 0.15360489470884203] ***
*** starting iteration: 2; err: [Inf, 0.20223111460357904, 0.15360489470884203] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20223111460357904, 0.15360489470884203, 0.1502249346282333] ***
*** starting iteration: 3; err: [Inf, 0.20223111460357904, 0.15360489470884203, 0.1502249346282333] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20223111460357904, 0.15360489470884203, 0.1502249346282333, 0.14952122803404927] ***
*** finished computation of 7 references, err: [Inf, 0.20223111460357904, 0.15360489470884203, 0.1502249346282333, 0.14952122803404927] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [80, 5, 0]]
** centroid: 1, normalized-entropy: 0.32275695889739825, [(1, 80), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [34, 7, 0]]
** centroid: 2, normalized-entropy: 0.6593758812786991, [(1, 34), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 62, 16]]
** centroid: 3, normalized-entropy: 0.7320666900931937, [(2, 62), (3, 16)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [41, 46, 0]]
** centroid: 4, normalized-entropy: 0.9976161146077627, [(1, 41), (2, 46)]
*** center 5: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [7, 84, 0]]
** centroid: 6, normalized-entropy: 0.3912435636292556, [(1, 7), (2, 84)]
*** center 7: selecting labels [1] (freq >= 1) [from [48, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19171289361082017] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19171289361082017, 0.1557290831618011] ***
*** starting iteration: 2; err: [Inf, 0.19171289361082017, 0.1557290831618011] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19171289361082017, 0.1557290831618011, 0.15195464036613704] ***
*** starting iteration: 3; err: [Inf, 0.19171289361082017, 0.1557290831618011, 0.15195464036613704] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19171289361082017, 0.1557290831618011, 0.15195464036613704, 0.1504253113400191] ***
*** starting iteration: 4; err: [Inf, 0.19171289361082017, 0.1557290831618011, 0.15195464036613704, 0.1504253113400191] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19171289361082017, 0.1557290831618011, 0.15195464036613704, 0.1504253113400191, 0.1497068483941257] ***
*** finished computation of 7 references, err: [Inf, 0.19171289361082017, 0.1557290831618011, 0.15195464036613704, 0.1504253113400191, 0.1497068483941257] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [26, 50, 0]]
** centroid: 1, normalized-entropy: 0.9268190639645774, [(1, 26), (2, 50)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [60, 6, 0]]
** centroid: 2, normalized-entropy: 0.43949698692151346, [(1, 60), (2, 6)]
*** center 3: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 63, 16]]
** centroid: 4, normalized-entropy: 0.7269625813353975, [(2, 63), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [75, 1, 0]]
** centroid: 5, normalized-entropy: 0.10106696361212422, [(1, 75), (2, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 63, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18390362716279923] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18390362716279923, 0.1554601200981997] ***
*** starting iteration: 2; err: [Inf, 0.18390362716279923, 0.1554601200981997] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18390362716279923, 0.1554601200981997, 0.15149024311173706] ***
*** starting iteration: 3; err: [Inf, 0.18390362716279923, 0.1554601200981997, 0.15149024311173706] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18390362716279923, 0.1554601200981997, 0.15149024311173706, 0.1497648212471977] ***
*** starting iteration: 4; err: [Inf, 0.18390362716279923, 0.1554601200981997, 0.15149024311173706, 0.1497648212471977] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18390362716279923, 0.1554601200981997, 0.15149024311173706, 0.1497648212471977, 0.14829842008650304] ***
*** starting iteration: 5; err: [Inf, 0.18390362716279923, 0.1554601200981997, 0.15149024311173706, 0.1497648212471977, 0.14829842008650304] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18390362716279923, 0.1554601200981997, 0.15149024311173706, 0.1497648212471977, 0.14829842008650304, 0.14752352860895918] ***
*** finished computation of 7 references, err: [Inf, 0.18390362716279923, 0.1554601200981997, 0.15149024311173706, 0.1497648212471977, 0.14829842008650304, 0.14752352860895918] ***
*** center 1: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 48, 13]]
** centroid: 2, normalized-entropy: 0.7473944462440388, [(2, 48), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [37, 25, 0]]
** centroid: 3, normalized-entropy: 0.9728063221185002, [(1, 37), (2, 25)]
*** center 4: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [35, 39, 0]]
** centroid: 5, normalized-entropy: 0.9978913098356861, [(1, 35), (2, 39)]
*** center 6: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 79, 0]]
** centroid: 7, normalized-entropy: 0.09694460606247329, [(1, 1), (2, 79)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20796614077687264] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20796614077687264, 0.1551951259598136] ***
*** starting iteration: 2; err: [Inf, 0.20796614077687264, 0.1551951259598136] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20796614077687264, 0.1551951259598136, 0.15115447602421045] ***
*** starting iteration: 3; err: [Inf, 0.20796614077687264, 0.1551951259598136, 0.15115447602421045] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20796614077687264, 0.1551951259598136, 0.15115447602421045, 0.15045866546966136] ***
*** finished computation of 7 references, err: [Inf, 0.20796614077687264, 0.1551951259598136, 0.15115447602421045, 0.15045866546966136] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [38, 26, 0]]
** centroid: 1, normalized-entropy: 0.9744894033980525, [(1, 38), (2, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [40, 30, 0]]
** centroid: 2, normalized-entropy: 0.9852281360342514, [(1, 40), (2, 30)]
*** center 3: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 81, 21]]
** centroid: 4, normalized-entropy: 0.7335379291086666, [(2, 81), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [38, 42, 0]]
** centroid: 5, normalized-entropy: 0.99819587904281, [(1, 38), (2, 42)]
*** center 6: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
finished with 11 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 382,3 => 37,1 => 581), Dict(2 => 389,3 => 32,1 => 579))
[ Info: ===== scores for single classifier: {"micro_f1":0.934,"precision":0.934,"recall":0.934,"macro_recall":0.9395088172439259,"macro_f1":0.8260247527548832,"accuracy":0.934,"class_f1":{"2":0.9124668435013262,"3":0.5849056603773585,"1":0.980701754385965},"class_precision":{"2":0.9424657534246575,"3":0.4189189189189189,"1":0.9964349376114082},"class_recall":{"2":0.884318766066838,"3":0.96875,"1":0.9654576856649395}}
[ Info: ===== scores for 1: {"micro_f1":0.974,"precision":0.974,"recall":0.974,"macro_recall":0.9813761575153213,"macro_f1":0.9504940142284225,"accuracy":0.974,"class_f1":{"2":0.9665809768637532,"3":0.9014084507042254,"1":0.9834926151172894},"class_precision":{"2":0.9665809768637532,"3":0.8205128205128205,"1":0.9895104895104895},"class_recall":{"2":0.9665809768637532,"3":1.0,"1":0.9775474956822107}}
[ Info: ===== scores for 5: {"micro_f1":0.97,"precision":0.97,"recall":0.97,"macro_recall":0.980479300510735,"macro_f1":0.9438813012756676,"accuracy":0.97,"class_f1":{"2":0.9621212121212122,"3":0.888888888888889,"1":0.9806338028169014},"class_precision":{"2":0.9454094292803971,"3":0.8,"1":1.0},"class_recall":{"2":0.9794344473007712,"3":1.0,"1":0.9620034542314335}}
[ Info: ===== scores for 7: {"micro_f1":0.97,"precision":0.97,"recall":0.97,"macro_recall":0.9799169149303012,"macro_f1":0.9400680123802507,"accuracy":0.97,"class_f1":{"2":0.9619289340101522,"3":0.8767123287671234,"1":0.9815627743634767},"class_precision":{"2":0.949874686716792,"3":0.7804878048780488,"1":0.9982142857142857},"class_recall":{"2":0.974293059125964,"3":1.0,"1":0.9654576856649395}}
[ Info: ===== scores for 9: {"micro_f1":0.971,"precision":0.971,"recall":0.971,"macro_recall":0.9804926201692189,"macro_f1":0.9407732254112098,"accuracy":0.971,"class_f1":{"2":0.963151207115629,"3":0.8767123287671234,"1":0.9824561403508772},"class_precision":{"2":0.9522613065326633,"3":0.7804878048780488,"1":0.9982174688057041},"class_recall":{"2":0.974293059125964,"3":1.0,"1":0.9671848013816926}}
[ Info: ===== scores for 11: {"micro_f1":0.969,"precision":0.969,"recall":0.969,"macro_recall":0.9790600169011666,"macro_f1":0.9356791834276598,"accuracy":0.969,"class_f1":{"2":0.9606099110546379,"3":0.8648648648648648,"1":0.9815627743634767},"class_precision":{"2":0.949748743718593,"3":0.7619047619047619,"1":0.9982142857142857},"class_recall":{"2":0.9717223650385605,"3":1.0,"1":0.9654576856649395}}
(score = 0.974, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.974, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.974, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.974, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.972, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.972, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.967, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.969, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.969, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.968, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.968, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.974,"k":1,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.974,"precision":0.974,"recall":0.974,"macro_recall":0.9813761575153213,"macro_f1":0.9504940142284225,"accuracy":0.974,"class_f1":{"2":0.9665809768637532,"3":0.9014084507042254,"1":0.9834926151172894},"class_precision":{"2":0.9665809768637532,"3":0.8205128205128205,"1":0.9895104895104895},"class_recall":{"2":0.9665809768637532,"3":1.0,"1":0.9775474956822107}}
Test Summary: | Pass  Total
AKNC          |    8      8
[311, 8, 5, 3, 3, 1, 2, 3, 3, 6, 5, 4, 52, 8, 7, 11, 3, 1, 12, 16, 2, 6, 6, 5, 4, 1, 9, 8, 9, 6, 11, 1, 30, 33, 5, 7, 2, 1, 23, 23, 6, 5, 14, 11, 1, 6, 10, 62, 6, 4, 7, 8, 8, 7, 8, 19, 57, 9, 2, 23, 44, 4, 6, 28, 11, 17, 1, 14, 5, 3, 2, 10, 10, 4, 3, 13, 86, 5, 4, 3, 6, 7, 1, 24, 4, 73, 27, 173, 61, 19, 15, 29, 1, 9, 19, 109, 18, 62, 7, 25, 12, 6, 7, 16, 4, 3, 19, 28, 23, 17, 37, 178, 7, 6, 50, 76, 70, 3, 7, 10, 41, 51, 3, 12, 7, 12, 27, 16, 11, 12, 32, 8, 45, 43, 283, 37, 9, 13, 5, 19, 24, 18, 9, 38, 5, 15, 41, 119, 13, 1, 453, 60, 10, 5, 19, 2, 51, 19, 13, 282, 26, 6, 4, 12, 10, 15, 62, 18, 14, 1, 17, 7, 2, 11, 13, 13, 35, 161, 51, 6, 17, 9, 27, 23, 38, 22, 27, 92, 32, 2, 6, 2, 161, 42, 6, 630, 3, 22, 36, 9, 55, 94, 3, 15, 91, 53, 52, 13, 4, 20, 77, 7, 10, 4, 10, 70, 6, 148, 18, 2, 2, 2, 14, 29, 2, 12, 59, 64, 32, 17, 28, 43, 6, 71, 8, 22, 49, 15, 3, 14, 17, 41, 224, 106, 18, 100, 4, 26, 35, 3, 19, 3, 58, 26, 17, 92, 20, 27, 76, 9, 122, 72, 71, 3, 23, 7, 26, 5, 6, 10, 392, 28, 33, 5, 6, 43, 10, 144, 123, 33, 7, 23, 24, 20, 175, 1, 51, 14, 36, 8, 4, 25, 20, 9, 28, 30, 8, 25, 17, 105]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6420000000000001, speedup = 0.29287152978294856, eval_ratio = 0.06994700000000001)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.4072234623015874,"recall":0.38628472222222227,"f1":null,"seconds":0.00015804357826709747,"exhaustive_search_seconds":0.0004686005413532257,"evaluations":457.8203125,"distances_sum":1691.7351104015147}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5538194444444445,"recall":0.5538194444444445,"f1":0.5538194444444445,"seconds":0.00028525106608867645,"exhaustive_search_seconds":0.0004686005413532257,"evaluations":590.15625,"distances_sum":1693.2198206308028}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6770833333333333,"recall":0.6770833333333333,"f1":0.6770833333333333,"seconds":0.0008786153048276901,"exhaustive_search_seconds":0.0004686005413532257,"evaluations":703.4765625,"distances_sum":1628.510482847739}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7586805555555548,"recall":0.7586805555555548,"f1":0.7586805555555548,"seconds":0.0005720574408769608,"exhaustive_search_seconds":0.0004686005413532257,"evaluations":800.1640625,"distances_sum":1598.3026722780219}
KCenters.DeloneInvIndex> reached performance {"precision":0.8151041666666657,"recall":0.8151041666666657,"f1":0.8151041666666657,"seconds":0.0004955604672431946,"exhaustive_search_seconds":0.0004686005413532257,"evaluations":914.1015625,"distances_sum":1581.0706974107545}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7929999999999998, speedup = 0.66296658999294, eval_ratio = 0.094855)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
