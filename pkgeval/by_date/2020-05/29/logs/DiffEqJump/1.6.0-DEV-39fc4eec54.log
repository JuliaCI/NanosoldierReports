Julia Version 1.6.0-DEV.120
Commit 39fc4eec54 (2020-05-28 16:58 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed Requires ──────────────────── v1.0.1
  Installed UnPack ────────────────────── v1.0.1
  Installed Compat ────────────────────── v3.10.0
  Installed ConsoleProgressMonitor ────── v0.1.2
  Installed DiffEqJump ────────────────── v6.7.5
  Installed OffsetArrays ──────────────── v1.0.4
  Installed SLEEFPirates ──────────────── v0.5.0
  Installed Parameters ────────────────── v0.12.1
  Installed TerminalLoggers ───────────── v0.1.1
  Installed AbstractTrees ─────────────── v0.3.3
  Installed ChainRulesCore ────────────── v0.8.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed MacroTools ────────────────── v0.5.5
  Installed RecipesBase ───────────────── v1.0.1
  Installed RecursiveArrayTools ───────── v2.3.5
  Installed Roots ─────────────────────── v1.0.1
  Installed OrderedCollections ────────── v1.2.0
  Installed ZygoteRules ───────────────── v0.2.0
  Installed DocStringExtensions ───────── v0.8.1
  Installed IterativeSolvers ──────────── v0.8.4
  Installed RandomNumbers ─────────────── v1.4.0
  Installed LoggingExtras ─────────────── v0.4.1
  Installed LabelledArrays ────────────── v1.2.1
  Installed LeftChildRightSiblingTrees ── v0.1.2
  Installed CpuId ─────────────────────── v0.2.2
  Installed TableTraits ───────────────── v1.0.0
  Installed TreeViews ─────────────────── v0.3.0
  Installed ArrayInterface ────────────── v2.8.7
  Installed VectorizationBase ─────────── v0.12.4
  Installed MuladdMacro ───────────────── v0.2.2
  Installed ProgressMeter ─────────────── v1.3.0
  Installed DiffEqBase ────────────────── v6.35.2
  Installed FunctionWrappers ──────────── v1.1.1
  Installed PoissonRandom ─────────────── v0.4.0
  Installed SIMDPirates ───────────────── v0.8.4
  Installed RecursiveFactorization ────── v0.1.2
  Installed StaticArrays ──────────────── v0.12.3
  Installed DataStructures ────────────── v0.17.17
  Installed ProgressLogging ───────────── v0.1.2
  Installed LoopVectorization ─────────── v0.8.1
Updating `~/.julia/environments/v1.6/Project.toml`
  [c894b116] + DiffEqJump v6.7.5
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [1520ce14] + AbstractTrees v0.3.3
  [4fba245c] + ArrayInterface v2.8.7
  [d360d2e6] + ChainRulesCore v0.8.0
  [34da2185] + Compat v3.10.0
  [88cd18e8] + ConsoleProgressMonitor v0.1.2
  [adafc99b] + CpuId v0.2.2
  [864edb3b] + DataStructures v0.17.17
  [2b5f629d] + DiffEqBase v6.35.2
  [c894b116] + DiffEqJump v6.7.5
  [ffbed154] + DocStringExtensions v0.8.1
  [069b7b12] + FunctionWrappers v1.1.1
  [42fd0dbc] + IterativeSolvers v0.8.4
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [2ee39098] + LabelledArrays v1.2.1
  [1d6d02ad] + LeftChildRightSiblingTrees v0.1.2
  [e6f89c97] + LoggingExtras v0.4.1
  [bdcacae8] + LoopVectorization v0.8.1
  [1914dd2f] + MacroTools v0.5.5
  [46d2c3a1] + MuladdMacro v0.2.2
  [6fe1bfb0] + OffsetArrays v1.0.4
  [bac558e1] + OrderedCollections v1.2.0
  [d96e819e] + Parameters v0.12.1
  [e409e4f3] + PoissonRandom v0.4.0
  [33c8b6b6] + ProgressLogging v0.1.2
  [92933f4c] + ProgressMeter v1.3.0
  [e6cf234a] + RandomNumbers v1.4.0
  [3cdcf5f2] + RecipesBase v1.0.1
  [731186ca] + RecursiveArrayTools v2.3.5
  [f2c3362d] + RecursiveFactorization v0.1.2
  [ae029012] + Requires v1.0.1
  [f2b01f46] + Roots v1.0.1
  [21efa798] + SIMDPirates v0.8.4
  [476501e8] + SLEEFPirates v0.5.0
  [90137ffa] + StaticArrays v0.12.3
  [3783bdb8] + TableTraits v1.0.0
  [5d786b92] + TerminalLoggers v0.1.1
  [a2a6695c] + TreeViews v0.3.0
  [3a884ed6] + UnPack v1.0.1
  [3d5dd08c] + VectorizationBase v0.12.4
  [700de1a5] + ZygoteRules v0.2.0
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [4607b0f0] + SuiteSparse
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building VectorizationBase → `~/.julia/packages/VectorizationBase/FsdEK/deps/build.log`
   Building SLEEFPirates ─────→ `~/.julia/packages/SLEEFPirates/mkNmA/deps/build.log`
    Testing DiffEqJump
Status `/tmp/jl_4Zv9aQ/Project.toml`
  [34da2185] Compat v3.10.0
  [864edb3b] DataStructures v0.17.17
  [2b5f629d] DiffEqBase v6.35.2
  [c894b116] DiffEqJump v6.7.5
  [a077e3f3] DiffEqProblemLibrary v4.8.0
  [31c24e10] Distributions v0.23.3
  [069b7b12] FunctionWrappers v1.1.1
  [1dea7af3] OrdinaryDiffEq v5.38.3
  [d96e819e] Parameters v0.12.1
  [e409e4f3] PoissonRandom v0.4.0
  [e6cf234a] RandomNumbers v1.4.0
  [731186ca] RecursiveArrayTools v2.3.5
  [90137ffa] StaticArrays v0.12.3
  [789caeaf] StochasticDiffEq v6.23.0
  [a2a6695c] TreeViews v0.3.0
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [10745b16] Statistics
  [8dfed614] Test
Status `/tmp/jl_4Zv9aQ/Manifest.toml`
  [1520ce14] AbstractTrees v0.3.3
  [79e6a3ab] Adapt v1.1.0
  [ec485272] ArnoldiMethod v0.0.4
  [7d9fca2a] Arpack v0.4.0
  [68821587] Arpack_jll v3.5.0+3
  [4fba245c] ArrayInterface v2.8.7
  [4c555306] ArrayLayouts v0.3.3
  [aae01518] BandedMatrices v0.15.10
  [b99e7846] BinaryProvider v0.5.10
  [8e7c35d0] BlockArrays v0.12.7
  [ffab5731] BlockBandedMatrices v0.8.4
  [a603d957] CanonicalTraits v0.2.1
  [d360d2e6] ChainRulesCore v0.8.0
  [861a8166] Combinatorics v1.0.2
  [bbf7d656] CommonSubexpressions v0.2.0
  [34da2185] Compat v3.10.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [88cd18e8] ConsoleProgressMonitor v0.1.2
  [187b0558] ConstructionBase v1.0.0
  [adafc99b] CpuId v0.2.2
  [a8cc5b0e] Crayons v4.0.2
  [9a962f9c] DataAPI v1.3.0
  [864edb3b] DataStructures v0.17.17
  [e2d170a0] DataValueInterfaces v1.0.0
  [2b5f629d] DiffEqBase v6.35.2
  [eb300fae] DiffEqBiological v4.3.0
  [c894b116] DiffEqJump v6.7.5
  [77a26b50] DiffEqNoiseProcess v4.1.4
  [9fdde737] DiffEqOperators v4.10.0
  [a077e3f3] DiffEqProblemLibrary v4.8.0
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.1
  [b4f34e82] Distances v0.8.2
  [31c24e10] Distributions v0.23.3
  [ffbed154] DocStringExtensions v0.8.1
  [497a8b3b] DoubleFloats v1.1.10
  [7c1d4256] DynamicPolynomials v0.3.10
  [fdbdab4c] ElasticArrays v1.2.1
  [d4d017d3] ExponentialUtilities v1.6.0
  [e2ba6199] ExprTools v0.1.1
  [8f5d6c58] EzXML v1.1.0
  [1a297f60] FillArrays v0.8.10
  [6a86dc24] FiniteDiff v2.3.2
  [3dd14ad9] FixedPolynomials v0.4.0
  [59287772] Formatting v0.4.1
  [f6369f11] ForwardDiff v0.10.10
  [069b7b12] FunctionWrappers v1.1.1
  [781609d7] GMP_jll v6.1.2+5
  [6b9d7cbe] GeneralizedGenerated v0.2.3
  [01680d73] GenericSVD v0.3.0
  [c145ed77] GenericSchur v0.4.0
  [f213a82b] HomotopyContinuation v1.4.2
  [d25df0c9] Inflate v0.1.2
  [d8418881] Intervals v1.2.0
  [42fd0dbc] IterativeSolvers v0.8.4
  [82899510] IteratorInterfaceExtensions v1.0.0
  [b14d175d] JuliaVariables v0.2.0
  [b964fa9f] LaTeXStrings v1.1.0
  [2ee39098] LabelledArrays v1.2.1
  [23fbe1c1] Latexify v0.13.2
  [5078a376] LazyArrays v0.16.9
  [1d6d02ad] LeftChildRightSiblingTrees v0.1.2
  [94ce4f54] Libiconv_jll v1.16.0+2
  [093fc24a] LightGraphs v1.3.3
  [d3d80556] LineSearches v7.0.1
  [e6f89c97] LoggingExtras v0.4.1
  [bdcacae8] LoopVectorization v0.8.1
  [d8e11817] MLStyle v0.3.1
  [2ce0c516] MPC_jll v1.1.0+0
  [3a97d323] MPFR_jll v4.0.2+2
  [1914dd2f] MacroTools v0.5.5
  [a3b82374] MatrixFactorizations v0.4.1
  [e1d29d7a] Missings v0.4.3
  [291d046c] MixedSubdivisions v1.0.0
  [78c3b35d] Mocking v0.7.1
  [961ee093] ModelingToolkit v3.6.4
  [46d2c3a1] MuladdMacro v0.2.2
  [102ac46a] MultivariatePolynomials v0.3.9
  [d8a4904e] MutableArithmetics v0.2.9
  [d41bc354] NLSolversBase v7.6.1
  [2774e3e8] NLsolve v4.3.0
  [872c559c] NNlib v0.6.6
  [77ba4419] NaNMath v0.3.3
  [71a1bf82] NameResolution v0.1.3
  [6fe1bfb0] OffsetArrays v1.0.4
  [4536629a] OpenBLAS_jll v0.3.9+4
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.2.0
  [1dea7af3] OrdinaryDiffEq v5.38.3
  [90014a1f] PDMats v0.9.12
  [d96e819e] Parameters v0.12.1
  [e409e4f3] PoissonRandom v0.4.0
  [f27b6e38] Polynomials v1.1.1
  [8162dcfd] PrettyPrint v0.1.0
  [08abe8d2] PrettyTables v0.9.0
  [33c8b6b6] ProgressLogging v0.1.2
  [92933f4c] ProgressMeter v1.3.0
  [01f381cc] ProjectiveVectors v1.1.2
  [1fd47b50] QuadGK v2.3.1
  [be4d8f0f] Quadmath v0.5.4
  [e6cf234a] RandomNumbers v1.4.0
  [3cdcf5f2] RecipesBase v1.0.1
  [731186ca] RecursiveArrayTools v2.3.5
  [f2c3362d] RecursiveFactorization v0.1.2
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.1
  [ae5879a3] ResettableStacks v1.0.0
  [79098fc4] Rmath v0.6.1
  [f50d1b31] Rmath_jll v0.2.2+0
  [f2b01f46] Roots v1.0.1
  [21efa798] SIMDPirates v0.8.4
  [476501e8] SLEEFPirates v0.5.0
  [1bc83da4] SafeTestsets v0.0.1
  [699a6c99] SimpleTraits v0.9.2
  [a2af1166] SortingAlgorithms v0.3.1
  [47a9eef4] SparseDiffTools v1.8.0
  [276daf66] SpecialFunctions v0.10.3
  [90137ffa] StaticArrays v0.12.3
  [62e018b1] StaticPolynomials v1.3.3
  [2913bbd2] StatsBase v0.33.0
  [4c63d2b9] StatsFuns v0.9.5
  [789caeaf] StochasticDiffEq v6.23.0
  [123dc426] SymEngine v0.8.2
  [3428059b] SymEngine_jll v0.6.0+1
  [d1185830] SymbolicUtils v0.3.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [5d786b92] TerminalLoggers v0.1.1
  [f269a46b] TimeZones v1.2.0
  [a759f4b9] TimerOutputs v0.5.5
  [a2a6695c] TreeViews v0.3.0
  [3a884ed6] UnPack v1.0.1
  [1986cc42] Unitful v1.2.1
  [3d5dd08c] VectorizationBase v0.12.4
  [19fa3120] VertexSafeGraphs v0.1.2
  [02c8fc9c] XML2_jll v2.9.9+4
  [83775a58] Zlib_jll v1.2.11+10
  [700de1a5] ZygoteRules v0.2.0
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
┌ Warning: Assignment to `jump_prob` in soft scope is ambiguous because a global variable by the same name exists: `jump_prob` will be treated as a new local. Disambiguate by using `local jump_prob` to suppress this warning or `global jump_prob` to assign to the existing global variable.
└ @ ~/.julia/packages/DiffEqJump/l1ypX/test/constant_rate.jl:33
┌ Warning: Assignment to `sol` in soft scope is ambiguous because a global variable by the same name exists: `sol` will be treated as a new local. Disambiguate by using `local sol` to suppress this warning or `global sol` to assign to the existing global variable.
└ @ ~/.julia/packages/DiffEqJump/l1ypX/test/constant_rate.jl:34
  1.079899 seconds (1.76 M allocations: 166.346 MiB, 3.98% gc time)
┌ Warning: Assignment to `jump_prob` in soft scope is ambiguous because a global variable by the same name exists: `jump_prob` will be treated as a new local. Disambiguate by using `local jump_prob` to suppress this warning or `global jump_prob` to assign to the existing global variable.
└ @ ~/.julia/packages/DiffEqJump/l1ypX/test/constant_rate.jl:48
┌ Warning: Assignment to `sol` in soft scope is ambiguous because a global variable by the same name exists: `sol` will be treated as a new local. Disambiguate by using `local sol` to suppress this warning or `global sol` to assign to the existing global variable.
└ @ ~/.julia/packages/DiffEqJump/l1ypX/test/constant_rate.jl:49
  0.253737 seconds (734.48 k allocations: 50.008 MiB, 10.82% gc time)
Test Summary:       | Pass  Total
Constant Rate Tests |    2      2
270.593400 seconds (25.03 M allocations: 1.369 GiB, 0.49% gc time)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
size(du) = (2, 2)
Test Summary:       | Pass  Total
Variable Rate Tests |    7      7
206.769709 seconds (89.74 M allocations: 10.039 GiB, 2.22% gc time)
┌ Warning: parallel_type has been deprecated. Please refer to the docs for the new dispatch-based system.
└ @ DiffEqBase ~/.julia/packages/DiffEqBase/bWm8j/src/ensemble/basic_ensemble_solve.jl:73
┌ Warning: parallel_type has been deprecated. Please refer to the docs for the new dispatch-based system.
└ @ DiffEqBase ~/.julia/packages/DiffEqBase/bWm8j/src/ensemble/basic_ensemble_solve.jl:73
Monte Carlo Tests: Error During Test at /home/pkgeval/.julia/packages/DiffEqJump/l1ypX/test/runtests.jl:6
  Got exception outside of a @test
  LoadError: 0 cannot be the seed
  Stacktrace:
   [1] error(::String) at ./error.jl:33
   [2] seed!(::RandomNumbers.Xorshifts.Xoroshiro128Star, ::Tuple{UInt64,UInt64}) at /home/pkgeval/.julia/packages/RandomNumbers/m57pA/src/Xorshifts/xoroshiro128.jl:60
   [3] seed! at /home/pkgeval/.julia/packages/RandomNumbers/m57pA/src/Xorshifts/xoroshiro128.jl:58 [inlined]
   [4] resetted_jump_problem at /home/pkgeval/.julia/packages/DiffEqJump/l1ypX/src/solve.jl:42 [inlined]
   [5] __init(::JumpProblem{true,SDEProblem{Array{Float64,1},Tuple{Float64,Float64},true,DiffEqBase.NullParameters,Nothing,SDEFunction{true,var"#25#26",var"#27#28",LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},var"#27#28",Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},Nothing},Direct,CallbackSet{Tuple{},Tuple{DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,MassActionJump{Array{Float64,1},Array{Array{Pair{Int64,Float64},1},1},Array{Array{Pair{Int64,Float64},1},1}},Tuple{var"#29#30"},Tuple{var"#31#32"},RandomNumbers.Xorshifts.Xoroshiro128Star},DiffEqJump.DirectJumpAggregation{Float64,MassActionJump{Array{Float64,1},Array{Array{Pair{Int64,Float64},1},1},Array{Array{Pair{Int64,Float64},1},1}},Tuple{var"#29#30"},Tuple{var"#31#32"},RandomNumbers.Xorshifts.Xoroshiro128Star},DiffEqJump.DirectJumpAggregation{Float64,MassActionJump{Array{Float64,1},Array{Array{Pair{Int64,Float64},1},1},Array{Array{Pair{Int64,Float64},1},1}},Tuple{var"#29#30"},Tuple{var"#31#32"},RandomNumbers.Xorshifts.Xoroshiro128Star}}}},DiffEqJump.DirectJumpAggregation{Float64,MassActionJump{Array{Float64,1},Array{Array{Pair{Int64,Float64},1},1},Array{Array{Pair{Int64,Float64},1},1}},Tuple{var"#29#30"},Tuple{var"#31#32"},RandomNumbers.Xorshifts.Xoroshiro128Star},Tuple{},Nothing,Nothing}, ::SRIW1, ::Array{Any,1}, ::Array{Any,1}, ::Array{Any,1}, ::Type{Val{true}}; saveat::Tuple{}, tstops::Tuple{}, d_discontinuities::Tuple{}, save_idxs::Nothing, save_everystep::Bool, save_noise::Bool, save_on::Bool, save_start::Bool, save_end::Bool, callback::Nothing, dense::Bool, calck::Bool, dt::Float64, adaptive::Bool, gamma::Rational{Int64}, abstol::Nothing, reltol::Nothing, qmax::Rational{Int64}, qmin::Rational{Int64}, qoldinit::Rational{Int64}, fullnormalize::Bool, failfactor::Int64, beta2::Rational{Int64}, beta1::Rational{Int64}, delta::Rational{Int64}, maxiters::Int64, dtmax::Float64, dtmin::Float64, internalnorm::typeof(DiffEqBase.ODE_DEFAULT_NORM), isoutofdomain::typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), unstable_check::typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), verbose::Bool, force_dtmin::Bool, timeseries_errors::Bool, dense_errors::Bool, advance_to_tstop::Bool, stop_at_next_tstop::Bool, initialize_save::Bool, progress::Bool, progress_steps::Int64, progress_name::String, progress_message::typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), userdata::Nothing, initialize_integrator::Bool, seed::UInt64, alias_u0::Bool, alias_jumps::Bool, kwargs::Base.Iterators.Pairs{Symbol,Symbol,Tuple{Symbol},NamedTuple{(:parallel_type,),Tuple{Symbol}}}) at /home/pkgeval/.julia/packages/StochasticDiffEq/qQyTg/src/solve.jl:78
   [6] #init_call#438 at /home/pkgeval/.julia/packages/DiffEqBase/bWm8j/src/solve.jl:16 [inlined]
   [7] #init#439 at /home/pkgeval/.julia/packages/DiffEqBase/bWm8j/src/solve.jl:33 [inlined]
   [8] #__solve#79 at /home/pkgeval/.julia/packages/DiffEqJump/l1ypX/src/solve.jl:6 [inlined]
   [9] solve_call(::JumpProblem{true,SDEProblem{Array{Float64,1},Tuple{Float64,Float64},true,DiffEqBase.NullParameters,Nothing,SDEFunction{true,var"#25#26",var"#27#28",LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},var"#27#28",Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},Nothing},Direct,CallbackSet{Tuple{},Tuple{DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,MassActionJump{Array{Float64,1},Array{Array{Pair{Int64,Float64},1},1},Array{Array{Pair{Int64,Float64},1},1}},Tuple{var"#29#30"},Tuple{var"#31#32"},RandomNumbers.Xorshifts.Xoroshiro128Star},DiffEqJump.DirectJumpAggregation{Float64,MassActionJump{Array{Float64,1},Array{Array{Pair{Int64,Float64},1},1},Array{Array{Pair{Int64,Float64},1},1}},Tuple{var"#29#30"},Tuple{var"#31#32"},RandomNumbers.Xorshifts.Xoroshiro128Star},DiffEqJump.DirectJumpAggregation{Float64,MassActionJump{Array{Float64,1},Array{Array{Pair{Int64,Float64},1},1},Array{Array{Pair{Int64,Float64},1},1}},Tuple{var"#29#30"},Tuple{var"#31#32"},RandomNumbers.Xorshifts.Xoroshiro128Star}}}},DiffEqJump.DirectJumpAggregation{Float64,MassActionJump{Array{Float64,1},Array{Array{Pair{Int64,Float64},1},1},Array{Array{Pair{Int64,Float64},1},1}},Tuple{var"#29#30"},Tuple{var"#31#32"},RandomNumbers.Xorshifts.Xoroshiro128Star},Tuple{},Nothing,Nothing}, ::SRIW1; merge_callbacks::Bool, kwargs::Base.Iterators.Pairs{Symbol,Any,NTuple{4,Symbol},NamedTuple{(:parallel_type, :save_everystep, :dt, :adaptive),Tuple{Symbol,Bool,Float64,Bool}}}) at /home/pkgeval/.julia/packages/DiffEqBase/bWm8j/src/solve.jl:60
   [10] #solve#443 at /home/pkgeval/.julia/packages/DiffEqBase/bWm8j/src/solve.jl:78 [inlined]
   [11] batch_func(::Int64, ::EnsembleProblem{JumpProblem{true,SDEProblem{Array{Float64,1},Tuple{Float64,Float64},true,DiffEqBase.NullParameters,Nothing,SDEFunction{true,var"#25#26",var"#27#28",LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},var"#27#28",Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},Nothing},Direct,CallbackSet{Tuple{},Tuple{DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,MassActionJump{Array{Float64,1},Array{Array{Pair{Int64,Float64},1},1},Array{Array{Pair{Int64,Float64},1},1}},Tuple{var"#29#30"},Tuple{var"#31#32"},RandomNumbers.Xorshifts.Xoroshiro128Star},DiffEqJump.DirectJumpAggregation{Float64,MassActionJump{Array{Float64,1},Array{Array{Pair{Int64,Float64},1},1},Array{Array{Pair{Int64,Float64},1},1}},Tuple{var"#29#30"},Tuple{var"#31#32"},RandomNumbers.Xorshifts.Xoroshiro128Star},DiffEqJump.DirectJumpAggregation{Float64,MassActionJump{Array{Float64,1},Array{Array{Pair{Int64,Float64},1},1},Array{Array{Pair{Int64,Float64},1},1}},Tuple{var"#29#30"},Tuple{var"#31#32"},RandomNumbers.Xorshifts.Xoroshiro128Star}}}},DiffEqJump.DirectJumpAggregation{Float64,MassActionJump{Array{Float64,1},Array{Array{Pair{Int64,Float64},1},1},Array{Array{Pair{Int64,Float64},1},1}},Tuple{var"#29#30"},Tuple{var"#31#32"},RandomNumbers.Xorshifts.Xoroshiro128Star},Tuple{},Nothing,Nothing},typeof(DiffEqBase.DEFAULT_PROB_FUNC),typeof(DiffEqBase.DEFAULT_OUTPUT_FUNC),typeof(DiffEqBase.DEFAULT_REDUCTION),Nothing}, ::SRIW1; kwargs::Base.Iterators.Pairs{Symbol,Any,NTuple{4,Symbol},NamedTuple{(:parallel_type, :save_everystep, :dt, :adaptive),Tuple{Symbol,Bool,Float64,Bool}}}) at /home/pkgeval/.julia/packages/DiffEqBase/bWm8j/src/ensemble/basic_ensemble_solve.jl:130
   [12] #350 at /home/pkgeval/.julia/packages/DiffEqBase/bWm8j/src/ensemble/basic_ensemble_solve.jl:164 [inlined]
   [13] iterate at ./generator.jl:47 [inlined]
   [14] _collect(::UnitRange{Int64}, ::Base.Generator{UnitRange{Int64},DiffEqBase.var"#350#351"{Base.Iterators.Pairs{Symbol,Any,NTuple{4,Symbol},NamedTuple{(:parallel_type, :save_everystep, :dt, :adaptive),Tuple{Symbol,Bool,Float64,Bool}}},EnsembleProblem{JumpProblem{true,SDEProblem{Array{Float64,1},Tuple{Float64,Float64},true,DiffEqBase.NullParameters,Nothing,SDEFunction{true,var"#25#26",var"#27#28",LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},var"#27#28",Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},Nothing},Direct,CallbackSet{Tuple{},Tuple{DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,MassActionJump{Array{Float64,1},Array{Array{Pair{Int64,Float64},1},1},Array{Array{Pair{Int64,Float64},1},1}},Tuple{var"#29#30"},Tuple{var"#31#32"},RandomNumbers.Xorshifts.Xoroshiro128Star},DiffEqJump.DirectJumpAggregation{Float64,MassActionJump{Array{Float64,1},Array{Array{Pair{Int64,Float64},1},1},Array{Array{Pair{Int64,Float64},1},1}},Tuple{var"#29#30"},Tuple{var"#31#32"},RandomNumbers.Xorshifts.Xoroshiro128Star},DiffEqJump.DirectJumpAggregation{Float64,MassActionJump{Array{Float64,1},Array{Array{Pair{Int64,Float64},1},1},Array{Array{Pair{Int64,Float64},1},1}},Tuple{var"#29#30"},Tuple{var"#31#32"},RandomNumbers.Xorshifts.Xoroshiro128Star}}}},DiffEqJump.DirectJumpAggregation{Float64,MassActionJump{Array{Float64,1},Array{Array{Pair{Int64,Float64},1},1},Array{Array{Pair{Int64,Float64},1},1}},Tuple{var"#29#30"},Tuple{var"#31#32"},RandomNumbers.Xorshifts.Xoroshiro128Star},Tuple{},Nothing,Nothing},typeof(DiffEqBase.DEFAULT_PROB_FUNC),typeof(DiffEqBase.DEFAULT_OUTPUT_FUNC),typeof(DiffEqBase.DEFAULT_REDUCTION),Nothing},SRIW1}}, ::Base.EltypeUnknown, ::Base.HasShape{1}) at ./array.jl:701
   [15] collect_similar at ./array.jl:630 [inlined]
   [16] map at ./abstractarray.jl:2151 [inlined]
   [17] solve_batch(::EnsembleProblem{JumpProblem{true,SDEProblem{Array{Float64,1},Tuple{Float64,Float64},true,DiffEqBase.NullParameters,Nothing,SDEFunction{true,var"#25#26",var"#27#28",LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},var"#27#28",Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},Nothing},Direct,CallbackSet{Tuple{},Tuple{DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,MassActionJump{Array{Float64,1},Array{Array{Pair{Int64,Float64},1},1},Array{Array{Pair{Int64,Float64},1},1}},Tuple{var"#29#30"},Tuple{var"#31#32"},RandomNumbers.Xorshifts.Xoroshiro128Star},DiffEqJump.DirectJumpAggregation{Float64,MassActionJump{Array{Float64,1},Array{Array{Pair{Int64,Float64},1},1},Array{Array{Pair{Int64,Float64},1},1}},Tuple{var"#29#30"},Tuple{var"#31#32"},RandomNumbers.Xorshifts.Xoroshiro128Star},DiffEqJump.DirectJumpAggregation{Float64,MassActionJump{Array{Float64,1},Array{Array{Pair{Int64,Float64},1},1},Array{Array{Pair{Int64,Float64},1},1}},Tuple{var"#29#30"},Tuple{var"#31#32"},RandomNumbers.Xorshifts.Xoroshiro128Star}}}},DiffEqJump.DirectJumpAggregation{Float64,MassActionJump{Array{Float64,1},Array{Array{Pair{Int64,Float64},1},1},Array{Array{Pair{Int64,Float64},1},1}},Tuple{var"#29#30"},Tuple{var"#31#32"},RandomNumbers.Xorshifts.Xoroshiro128Star},Tuple{},Nothing,Nothing},typeof(DiffEqBase.DEFAULT_PROB_FUNC),typeof(DiffEqBase.DEFAULT_OUTPUT_FUNC),typeof(DiffEqBase.DEFAULT_REDUCTION),Nothing}, ::SRIW1, ::EnsembleSerial, ::UnitRange{Int64}, ::Int64; kwargs::Base.Iterators.Pairs{Symbol,Any,NTuple{4,Symbol},NamedTuple{(:parallel_type, :save_everystep, :dt, :adaptive),Tuple{Symbol,Bool,Float64,Bool}}}) at /home/pkgeval/.julia/packages/DiffEqBase/bWm8j/src/ensemble/basic_ensemble_solve.jl:163
   [18] batch_function at /home/pkgeval/.julia/packages/DiffEqBase/bWm8j/src/ensemble/basic_ensemble_solve.jl:92 [inlined]
   [19] macro expansion at ./timing.jl:233 [inlined]
   [20] __solve(::EnsembleProblem{JumpProblem{true,SDEProblem{Array{Float64,1},Tuple{Float64,Float64},true,DiffEqBase.NullParameters,Nothing,SDEFunction{true,var"#25#26",var"#27#28",LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},var"#27#28",Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},Nothing},Direct,CallbackSet{Tuple{},Tuple{DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,MassActionJump{Array{Float64,1},Array{Array{Pair{Int64,Float64},1},1},Array{Array{Pair{Int64,Float64},1},1}},Tuple{var"#29#30"},Tuple{var"#31#32"},RandomNumbers.Xorshifts.Xoroshiro128Star},DiffEqJump.DirectJumpAggregation{Float64,MassActionJump{Array{Float64,1},Array{Array{Pair{Int64,Float64},1},1},Array{Array{Pair{Int64,Float64},1},1}},Tuple{var"#29#30"},Tuple{var"#31#32"},RandomNumbers.Xorshifts.Xoroshiro128Star},DiffEqJump.DirectJumpAggregation{Float64,MassActionJump{Array{Float64,1},Array{Array{Pair{Int64,Float64},1},1},Array{Array{Pair{Int64,Float64},1},1}},Tuple{var"#29#30"},Tuple{var"#31#32"},RandomNumbers.Xorshifts.Xoroshiro128Star}}}},DiffEqJump.DirectJumpAggregation{Float64,MassActionJump{Array{Float64,1},Array{Array{Pair{Int64,Float64},1},1},Array{Array{Pair{Int64,Float64},1},1}},Tuple{var"#29#30"},Tuple{var"#31#32"},RandomNumbers.Xorshifts.Xoroshiro128Star},Tuple{},Nothing,Nothing},typeof(DiffEqBase.DEFAULT_PROB_FUNC),typeof(DiffEqBase.DEFAULT_OUTPUT_FUNC),typeof(DiffEqBase.DEFAULT_REDUCTION),Nothing}, ::SRIW1, ::EnsembleSerial; trajectories::Int64, batch_size::Int64, pmap_batch_size::Int64, kwargs::Base.Iterators.Pairs{Symbol,Any,NTuple{4,Symbol},NamedTuple{(:parallel_type, :save_everystep, :dt, :adaptive),Tuple{Symbol,Bool,Float64,Bool}}}) at /home/pkgeval/.julia/packages/DiffEqBase/bWm8j/src/ensemble/basic_ensemble_solve.jl:96
   [21] __solve(::EnsembleProblem{JumpProblem{true,SDEProblem{Array{Float64,1},Tuple{Float64,Float64},true,DiffEqBase.NullParameters,Nothing,SDEFunction{true,var"#25#26",var"#27#28",LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},var"#27#28",Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},Nothing},Direct,CallbackSet{Tuple{},Tuple{DiscreteCallback{DiffEqJump.DirectJumpAggregation{Float64,MassActionJump{Array{Float64,1},Array{Array{Pair{Int64,Float64},1},1},Array{Array{Pair{Int64,Float64},1},1}},Tuple{var"#29#30"},Tuple{var"#31#32"},RandomNumbers.Xorshifts.Xoroshiro128Star},DiffEqJump.DirectJumpAggregation{Float64,MassActionJump{Array{Float64,1},Array{Array{Pair{Int64,Float64},1},1},Array{Array{Pair{Int64,Float64},1},1}},Tuple{var"#29#30"},Tuple{var"#31#32"},RandomNumbers.Xorshifts.Xoroshiro128Star},DiffEqJump.DirectJumpAggregation{Float64,MassActionJump{Array{Float64,1},Array{Array{Pair{Int64,Float64},1},1},Array{Array{Pair{Int64,Float64},1},1}},Tuple{var"#29#30"},Tuple{var"#31#32"},RandomNumbers.Xorshifts.Xoroshiro128Star}}}},DiffEqJump.DirectJumpAggregation{Float64,MassActionJump{Array{Float64,1},Array{Array{Pair{Int64,Float64},1},1},Array{Array{Pair{Int64,Float64},1},1}},Tuple{var"#29#30"},Tuple{var"#31#32"},RandomNumbers.Xorshifts.Xoroshiro128Star},Tuple{},Nothing,Nothing},typeof(DiffEqBase.DEFAULT_PROB_FUNC),typeof(DiffEqBase.DEFAULT_OUTPUT_FUNC),typeof(DiffEqBase.DEFAULT_REDUCTION),Nothing}, ::SRIW1; kwargs::Base.Iterators.Pairs{Symbol,Any,NTuple{5,Symbol},NamedTuple{(:trajectories, :parallel_type, :save_everystep, :dt, :adaptive),Tuple{Int64,Symbol,Bool,Float64,Bool}}}) at /home/pkgeval/.julia/packages/DiffEqBase/bWm8j/src/ensemble/basic_ensemble_solve.jl:75
   [22] #solve#444 at /home/pkgeval/.julia/packages/DiffEqBase/bWm8j/src/solve.jl:92 [inlined]
   [23] top-level scope at /home/pkgeval/.julia/packages/DiffEqJump/l1ypX/test/monte_carlo_test.jl:18
   [24] include(::String) at ./client.jl:446
   [25] macro expansion at /home/pkgeval/.julia/packages/DiffEqJump/l1ypX/test/runtests.jl:6 [inlined]
   [26] macro expansion at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1114 [inlined]
   [27] macro expansion at /home/pkgeval/.julia/packages/DiffEqJump/l1ypX/test/runtests.jl:6 [inlined]
   [28] macro expansion at ./timing.jl:174 [inlined]
   [29] macro expansion at /home/pkgeval/.julia/packages/DiffEqJump/l1ypX/test/runtests.jl:6 [inlined]
   [30] top-level scope at ./timing.jl:174
   [31] include(::String) at ./client.jl:446
   [32] top-level scope at none:6
   [33] eval(::Module, ::Any) at ./boot.jl:331
   [34] exec_options(::Base.JLOptions) at ./client.jl:271
   [35] _start() at ./client.jl:487
  in expression starting at /home/pkgeval/.julia/packages/DiffEqJump/l1ypX/test/monte_carlo_test.jl:18
  
Test Summary:     | Pass  Error  Total
Monte Carlo Tests |    1      1      2
ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/DiffEqJump/l1ypX/test/runtests.jl:3
ERROR: Package DiffEqJump errored during testing
Stacktrace:
 [1] pkgerror(::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:52
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/Operations.jl:1557
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:327
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:314
 [5] #test#61 at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
 [6] test at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:67 [inlined]
 [7] #test#60 at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
 [8] test at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:66 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [10] test(::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.6/Pkg/src/API.jl:65
 [11] top-level scope at none:16
