Julia Version 1.6.0-DEV.129
Commit 38a373af12 (2020-05-29 17:04 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed PooledArrays ──────────────── v0.5.3
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed LearnBase ─────────────────── v0.2.2
  Installed KCenters ──────────────────── v0.2.2
  Installed Parsers ───────────────────── v1.0.4
  Installed JSON ──────────────────────── v0.21.0
  Installed DataStructures ────────────── v0.17.17
  Installed StatsBase ─────────────────── v0.32.2
  Installed Missings ──────────────────── v0.4.3
  Installed TableTraits ───────────────── v1.0.0
  Installed Compat ────────────────────── v3.10.0
  Installed DataAPI ───────────────────── v1.3.0
  Installed Tables ────────────────────── v1.0.4
  Installed MLDataUtils ───────────────── v0.5.1
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed SimilaritySearch ──────────── v0.3.19
  Installed Reexport ──────────────────── v0.2.0
  Installed DataFrames ────────────────── v0.20.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed MappedArrays ──────────────── v0.2.2
  Installed MLDataPattern ─────────────── v0.5.3
  Installed DataValueInterfaces ───────── v1.0.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed OrderedCollections ────────── v1.2.0
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.10.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.17
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.4
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_ZQH5eh/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_ZQH5eh/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.10.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.17
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.4
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9370718047022819
[ Info: 0.8326150393486023
[ Info: 0.5524173142015933
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33010025101403395
mean(cdnet.distances) = 0.3581474275390307
mean(crand.distances) = 0.3345453379303217
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.43359375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.43359375,"f1":null,"seconds":4.621222615242004e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":6.484375,"distances_sum":1084.8304384593948}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.58203125, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.58203125,"f1":0.7191209831834839,"seconds":4.664063453674316e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":7.4921875,"distances_sum":1559.5806845440445}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.58203125,"state":{"ssize":3,"bsize":3},"perf":{"precision":1.0,"recall":0.58203125,"f1":0.7191209831834839,"seconds":4.664063453674316e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":7.4921875,"distances_sum":1559.5806845440445}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6005859375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.6005859375,"f1":0.7334641053391061,"seconds":5.379319190979004e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":7.6015625,"distances_sum":1614.8617159672324}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8575960497835505,"seconds":7.150694727897644e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.4921875,"distances_sum":2143.2016462747947}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7646484375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7646484375,"f1":0.8575960497835505,"seconds":7.150694727897644e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.4921875,"distances_sum":2143.2016462747947}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9370421245421251,"seconds":6.215646862983704e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.71875,"distances_sum":2609.1150115646906}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8486328125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8486328125,"f1":0.9133298992674002,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.6953125,"distances_sum":2461.4566999223607}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.888671875,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.888671875,"f1":0.9370421245421251,"seconds":6.215646862983704e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.71875,"distances_sum":2609.1150115646906}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.888671875,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.888671875,"f1":0.9370421245421251,"seconds":6.215646862983704e-6,"exhaustive_search_seconds":1.514330506324768e-6,"evaluations":8.71875,"distances_sum":2609.1150115646906}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1884765625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1884765625,"f1":null,"seconds":3.2614916563034058e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":4.90625,"distances_sum":471.483006774984}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.65625,"f1":0.7789736305361312,"seconds":4.909932613372803e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.5390625,"distances_sum":1562.8426391173007}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.373046875, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.373046875,"f1":null,"seconds":3.546476364135742e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":5.375,"distances_sum":864.8639442452079}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.65625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.65625,"f1":0.7789736305361312,"seconds":4.909932613372803e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.5390625,"distances_sum":1562.8426391173007}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9422192390942395,"seconds":5.81890344619751e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.7890625,"distances_sum":2341.804376947539}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66015625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.66015625,"f1":0.7799693362193371,"seconds":4.7478824853897095e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":7.53125,"distances_sum":1582.0825676837344}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.748046875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.748046875,"f1":0.8483438436563443,"seconds":5.248934030532837e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.1640625,"distances_sum":1803.9894290319137}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8458362817737826,"seconds":5.623325705528259e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.1640625,"distances_sum":1824.8082458430085}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9013671875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9422192390942395,"seconds":5.81890344619751e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.7890625,"distances_sum":2341.804376947539}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9441881035631039,"seconds":5.651265382766724e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.828125,"distances_sum":2344.55707016716}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9033203125,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9033203125,"f1":0.9441881035631039,"seconds":5.651265382766724e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.828125,"distances_sum":2344.55707016716}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9033203125,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9033203125,"f1":0.9441881035631039,"seconds":5.651265382766724e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.828125,"distances_sum":2344.55707016716}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.369140625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.369140625,"f1":null,"seconds":3.468245267868042e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":5.46875,"distances_sum":872.3315592823012}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7236328125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7236328125,"f1":0.8296770937395945,"seconds":4.90434467792511e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":7.8125,"distances_sum":1802.578899603235}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7236328125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7236328125,"f1":0.8296770937395945,"seconds":4.90434467792511e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":7.8125,"distances_sum":1802.578899603235}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.945524267399268,"seconds":5.595386028289795e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.7265625,"distances_sum":2449.5742080915147}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.904296875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.945524267399268,"seconds":5.595386028289795e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.7265625,"distances_sum":2449.5742080915147}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9733287545787548,"seconds":5.7891011238098145e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.8828125,"distances_sum":2622.9660869737995}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9733287545787548,"seconds":5.7891011238098145e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.8828125,"distances_sum":2622.9660869737995}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9733287545787548,"seconds":5.7891011238098145e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.8828125,"distances_sum":2622.9660869737995}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5830078125, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5830078125,"f1":0.721226516539017,"seconds":4.209578037261963e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":7.828125,"distances_sum":1309.064450124175}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.705078125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.705078125,"f1":0.8159299034299042,"seconds":4.7497451305389404e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.25,"distances_sum":1659.4966898682596}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.705078125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.705078125,"f1":0.8159299034299042,"seconds":4.7497451305389404e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.25,"distances_sum":1659.4966898682596}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9559409340659344,"seconds":5.684792995452881e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.9140625,"distances_sum":2459.8420581479177}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9342006951381958,"seconds":5.519017577171326e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.90625,"distances_sum":2290.372415668368}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9559409340659344,"seconds":5.684792995452881e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.9140625,"distances_sum":2459.8420581479177}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9638671875, conf: {"ssize":7,"bsize":12}, perf: {"precision":1.0,"recall":0.9638671875,"f1":0.979801968864469,"seconds":5.837529897689819e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.96875,"distances_sum":2645.3654234679298}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":6,"bsize":12}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9772722069597072,"seconds":5.8729201555252075e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.96875,"distances_sum":2627.146405684389}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9690304487179492,"seconds":6.183981895446777e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.9765625,"distances_sum":2533.2536018924784}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9638671875,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.979801968864469,"seconds":5.837529897689819e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.96875,"distances_sum":2645.3654234679298}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9638671875,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.979801968864469,"seconds":5.837529897689819e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.96875,"distances_sum":2645.3654234679298}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7578125,"f1":0.85279147935398,"seconds":5.146488547325134e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.3515625,"distances_sum":1837.0903935520778}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.19140625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.19140625,"f1":null,"seconds":3.335997462272644e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":5.6171875,"distances_sum":452.16001832948535}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7578125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7578125,"f1":0.85279147935398,"seconds":5.146488547325134e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.3515625,"distances_sum":1837.0903935520778}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9646436896436902,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.921875,"distances_sum":2535.0018536604757}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9646436896436902,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.921875,"distances_sum":2535.0018536604757}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9792410714285715,"seconds":7.0016831159591675e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.9609375,"distances_sum":2619.711455280379}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9697265625, conf: {"ssize":2,"bsize":13}, perf: {"precision":1.0,"recall":0.9697265625,"f1":0.983556547619048,"seconds":5.969777703285217e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.9765625,"distances_sum":2656.797390167135}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9697265625,"state":{"ssize":2,"bsize":13},"perf":{"precision":1.0,"recall":0.9697265625,"f1":0.983556547619048,"seconds":5.969777703285217e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.9765625,"distances_sum":2656.797390167135}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9697265625,"state":{"ssize":2,"bsize":13},"perf":{"precision":1.0,"recall":0.9697265625,"f1":0.983556547619048,"seconds":5.969777703285217e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":8.9765625,"distances_sum":2656.797390167135}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4326171875, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.4326171875,"f1":null,"seconds":4.0065497159957886e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":6.9453125,"distances_sum":940.0263499299083}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.435546875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.435546875,"f1":null,"seconds":4.244968295097351e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":6.96875,"distances_sum":964.9915464563318}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7978515625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7978515625,"f1":0.8805033508158518,"seconds":5.425885319709778e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.484375,"distances_sum":1961.816612603785}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7978515625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7978515625,"f1":0.8805033508158518,"seconds":5.425885319709778e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.484375,"distances_sum":1961.816612603785}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9254750457875464,"seconds":5.887821316719055e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8515625,"distances_sum":2218.226215225293}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.8945798992674003,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.7265625,"distances_sum":2021.344769511583}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8701171875,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8701171875,"f1":0.9254750457875464,"seconds":5.887821316719055e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8515625,"distances_sum":2218.226215225293}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9461538461538466,"seconds":5.846843123435974e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.875,"distances_sum":2375.22868127305}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9681204212454217,"seconds":6.411224603652954e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.921875,"distances_sum":2526.0345472250333}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9681204212454217,"seconds":6.411224603652954e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.921875,"distances_sum":2526.0345472250333}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9681204212454217,"seconds":6.411224603652954e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.921875,"distances_sum":2526.0345472250333}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6982421875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6982421875,"f1":0.81209987928738,"seconds":4.952773451805115e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":7.7890625,"distances_sum":1586.7549648753957}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4267578125, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.4267578125,"f1":null,"seconds":3.9637088775634766e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":6.8515625,"distances_sum":897.3922264821055}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6982421875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6982421875,"f1":0.81209987928738,"seconds":4.952773451805115e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":7.7890625,"distances_sum":1586.7549648753957}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.9288747710622716,"seconds":6.105750799179077e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.7265625,"distances_sum":2173.085821865744}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.875,"f1":0.9288747710622716,"seconds":6.105750799179077e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.7265625,"distances_sum":2173.085821865744}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9608859890109893,"seconds":6.237998604774475e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.90625,"distances_sum":2403.8361128343827}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9425652472527477,"seconds":6.0033053159713745e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.84375,"distances_sum":2267.1617016895266}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.959752747252748,"seconds":6.407499313354492e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.9140625,"distances_sum":2388.4679123900546}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9608859890109893,"seconds":6.237998604774475e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.90625,"distances_sum":2403.8361128343827}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9306640625,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9608859890109893,"seconds":6.237998604774475e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.90625,"distances_sum":2403.8361128343827}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.80078125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.80078125,"f1":0.881511197136198,"seconds":5.459412932395935e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8046875,"distances_sum":1929.5196650254954}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4208984375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4208984375,"f1":null,"seconds":3.997236490249634e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":7.15625,"distances_sum":881.4785746564341}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.80078125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.80078125,"f1":0.881511197136198,"seconds":5.459412932395935e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.8046875,"distances_sum":1929.5196650254954}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9152358058608067,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.96875,"distances_sum":2082.4002046198516}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8505859375,"state":{"ssize":8,"bsize":6},"perf":{"precision":1.0,"recall":0.8505859375,"f1":0.9152358058608067,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.96875,"distances_sum":2082.4002046198516}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":12,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9637305402930407,"seconds":6.1746686697006226e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.9765625,"distances_sum":2426.087631896283}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9726018772893776,"seconds":6.163492798805237e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":9.0,"distances_sum":2499.1495770350407}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9280250999001007,"seconds":6.193295121192932e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.9453125,"distances_sum":2191.2468033979176}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9495993589743594,"seconds":6.411224603652954e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.953125,"distances_sum":2366.7266899470737}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9399439102564108,"seconds":6.3497573137283325e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.9609375,"distances_sum":2250.894163676417}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.853515625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.853515625,"f1":0.9144636613386621,"seconds":5.763024091720581e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":8.953125,"distances_sum":2116.4181038017955}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9726018772893776,"seconds":6.163492798805237e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":9.0,"distances_sum":2499.1495770350407}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9726018772893776,"seconds":6.163492798805237e-6,"exhaustive_search_seconds":1.389533281326294e-6,"evaluations":9.0,"distances_sum":2499.1495770350407}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2333984375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2333984375,"f1":null,"seconds":3.641471266746521e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":6.3671875,"distances_sum":548.3865003191473}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.466796875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.466796875,"f1":null,"seconds":4.462897777557373e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.3984375,"distances_sum":1016.6852511463293}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.8634532134532142,"seconds":0.00010960176587104797,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.4765625,"distances_sum":1819.2617761957515}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.771484375,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.771484375,"f1":0.8634532134532142,"seconds":0.00010960176587104797,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.4765625,"distances_sum":1819.2617761957515}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.794921875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.794921875,"f1":0.8806724525474534,"seconds":5.375593900680542e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.5625,"distances_sum":1886.0622230144563}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9067593864468874,"seconds":5.653128027915955e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.734375,"distances_sum":2033.768309213373}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.837890625,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.837890625,"f1":0.9067593864468874,"seconds":5.653128027915955e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.734375,"distances_sum":2033.768309213373}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9331933691308699,"seconds":5.600973963737488e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.9140625,"distances_sum":2207.382243633934}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9596039377289385,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.953125,"distances_sum":2403.57687283666}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9583562271062277,"seconds":5.606561899185181e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.9609375,"distances_sum":2374.679543171669}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9570398351648357,"seconds":5.623325705528259e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.9375,"distances_sum":2357.4221647362656}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9596039377289385,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.953125,"distances_sum":2403.57687283666}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9287109375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9596039377289385,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.953125,"distances_sum":2403.57687283666}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7568359375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7568359375,"f1":0.8542983058608067,"seconds":4.978850483894348e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.34375,"distances_sum":1732.9283239740078}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.34375, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.34375,"f1":null,"seconds":3.3508986234664917e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":5.609375,"distances_sum":623.966983033175}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7568359375,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7568359375,"f1":0.8542983058608067,"seconds":4.978850483894348e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.34375,"distances_sum":1732.9283239740078}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7568359375,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7568359375,"f1":0.8542983058608067,"seconds":4.978850483894348e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.34375,"distances_sum":1732.9283239740078}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.7568359375,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7568359375,"f1":0.8542983058608067,"seconds":4.978850483894348e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.34375,"distances_sum":1732.9283239740078}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6884765625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6884765625,"f1":0.8017669830169838,"seconds":4.908069968223572e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.4140625,"distances_sum":1516.041305763126}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.41015625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.41015625,"f1":null,"seconds":3.9245933294296265e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":7.1953125,"distances_sum":809.1616289607709}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6884765625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6884765625,"f1":0.8017669830169838,"seconds":4.908069968223572e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.4140625,"distances_sum":1516.041305763126}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9614983974358979,"seconds":5.856156349182129e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.921875,"distances_sum":2347.6359412718143}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9328296703296707,"seconds":5.543231964111328e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.84375,"distances_sum":2178.45683857777}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7919921875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7919921875,"f1":0.875512508325009,"seconds":5.213543772697449e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.6015625,"distances_sum":1820.1758021918565}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9614983974358979,"seconds":5.856156349182129e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.921875,"distances_sum":2347.6359412718143}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9635645604395608,"seconds":5.893409252166748e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.96875,"distances_sum":2352.259879332173}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9697203837828842,"seconds":5.930662155151367e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.9609375,"distances_sum":2400.5078420762607}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9749828296703301,"seconds":6.796792149543762e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.96875,"distances_sum":2427.4036703283155}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9669700091575094,"seconds":5.554407835006714e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.875,"distances_sum":2401.8193068440455}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9749828296703301,"seconds":6.796792149543762e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.96875,"distances_sum":2427.4036703283155}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9749828296703301,"seconds":6.796792149543762e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.96875,"distances_sum":2427.4036703283155}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.568359375, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.568359375,"f1":null,"seconds":4.278495907783508e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":7.4375,"distances_sum":1220.7226887667741}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.568359375,"state":{"ssize":5,"bsize":3},"perf":{"precision":null,"recall":0.568359375,"f1":null,"seconds":4.278495907783508e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":7.4375,"distances_sum":1220.7226887667741}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8486328125, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8486328125,"f1":0.9111383408258417,"seconds":5.340203642845154e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.5390625,"distances_sum":2125.6491604986563}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8486328125,"state":{"ssize":8,"bsize":6},"perf":{"precision":1.0,"recall":0.8486328125,"f1":0.9111383408258417,"seconds":5.340203642845154e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.5390625,"distances_sum":2125.6491604986563}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9713369963369967,"seconds":5.749985575675964e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.8984375,"distances_sum":2530.0939243615285}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.9228740009990019,"seconds":6.124377250671387e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.7578125,"distances_sum":2216.3032544784683}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9482421875,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9713369963369967,"seconds":5.749985575675964e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.8984375,"distances_sum":2530.0939243615285}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9482421875,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.9482421875,"f1":0.9713369963369967,"seconds":5.749985575675964e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.8984375,"distances_sum":2530.0939243615285}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.654296875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.654296875,"f1":0.7782503954378961,"seconds":4.630535840988159e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":7.875,"distances_sum":1513.1659235536972}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7861328125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7861328125,"f1":0.8715987137862145,"seconds":5.142763257026672e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.421875,"distances_sum":1938.7488549096763}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.544921875, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.544921875,"f1":0.6930631868131873,"seconds":4.133209586143494e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":7.546875,"distances_sum":1228.107500193821}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7861328125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7861328125,"f1":0.8715987137862145,"seconds":5.142763257026672e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.421875,"distances_sum":1938.7488549096763}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9023986430236439,"seconds":5.276873707771301e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.4296875,"distances_sum":2128.6369630115146}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9553602647352654,"seconds":5.405396223068237e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.796875,"distances_sum":2479.3595559141086}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.942050137362638,"seconds":5.606561899185181e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.7734375,"distances_sum":2355.2628976392234}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8603515625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8603515625,"f1":0.9159632034632043,"seconds":5.535781383514404e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.625,"distances_sum":2225.96801763165}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9230399808524813,"seconds":5.373731255531311e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.75,"distances_sum":2257.266804293106}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9228515625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.9553602647352654,"seconds":5.405396223068237e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.796875,"distances_sum":2479.3595559141086}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.969997710622711,"seconds":5.928799510002136e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.90625,"distances_sum":2540.2612275770107}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.968681318681319,"seconds":5.973502993583679e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.8984375,"distances_sum":2538.7473868153197}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9586423992673998,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.8203125,"distances_sum":2491.9544987145364}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9453125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.969997710622711,"seconds":5.928799510002136e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.90625,"distances_sum":2540.2612275770107}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9453125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.969997710622711,"seconds":5.928799510002136e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.90625,"distances_sum":2540.2612275770107}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8698806401931409,"seconds":5.470588803291321e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.09375,"distances_sum":1985.0555851100569}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4111328125, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.4111328125,"f1":null,"seconds":3.991648554801941e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":6.0625,"distances_sum":922.5366757020314}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7802734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7802734375,"f1":0.8698806401931409,"seconds":5.470588803291321e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.09375,"distances_sum":1985.0555851100569}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.957406135531136,"seconds":6.03310763835907e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.8125,"distances_sum":2635.5577811404387}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.957406135531136,"seconds":6.03310763835907e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.8125,"distances_sum":2635.5577811404387}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.973551968864469,"seconds":5.694106221199036e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.8828125,"distances_sum":2753.9401710228135}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.973551968864469,"seconds":5.694106221199036e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.8828125,"distances_sum":2753.9401710228135}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.973551968864469,"seconds":5.694106221199036e-6,"exhaustive_search_seconds":1.3820827007293701e-6,"evaluations":8.8828125,"distances_sum":2753.9401710228135}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6787109375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6787109375,"f1":0.7973125832500841,"seconds":3.641843795776367e-5,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.5078125,"distances_sum":1509.7804869051145}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.412109375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.412109375,"f1":null,"seconds":3.4887343645095825e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":5.875,"distances_sum":786.5368483922825}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6787109375,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6787109375,"f1":0.7973125832500841,"seconds":3.641843795776367e-5,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.5078125,"distances_sum":1509.7804869051145}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9071600274725282,"seconds":4.9620866775512695e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.34375,"distances_sum":1954.7760431043496}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8212890625,"f1":0.8958135614385622,"seconds":5.165114998817444e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.2890625,"distances_sum":1899.6501897917396}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7001953125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.7001953125,"f1":0.8119432650682659,"seconds":4.598870873451233e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":7.5546875,"distances_sum":1579.9562054024418}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7705078125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7705078125,"f1":0.8598155316905325,"seconds":4.913657903671265e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.03125,"distances_sum":1749.7722992924546}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.837890625,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.837890625,"f1":0.9071600274725282,"seconds":4.9620866775512695e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.34375,"distances_sum":1954.7760431043496}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.939571886446887,"seconds":5.2638351917266846e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.53125,"distances_sum":2218.1744128654336}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9247538919413926,"seconds":5.424022674560547e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.4921875,"distances_sum":2059.1285398517803}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9554544413919419,"seconds":5.502253770828247e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.71875,"distances_sum":2316.72018493364}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9504724442224446,"seconds":5.6121498346328735e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.71875,"distances_sum":2282.20385351489}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":9,"bsize":8},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9554544413919419,"seconds":5.502253770828247e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.71875,"distances_sum":2316.72018493364}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9208984375,"state":{"ssize":9,"bsize":8},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9554544413919419,"seconds":5.502253770828247e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":8.71875,"distances_sum":2316.72018493364}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2119140625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2119140625,"f1":null,"seconds":3.3136457204818726e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":5.71875,"distances_sum":421.1337469111403}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.625, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.625,"f1":0.7580388361638368,"seconds":4.472211003303528e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":7.546875,"distances_sum":1334.5610864754078}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.568359375, conf: {"ssize":3,"bsize":3}, perf: {"precision":1.0,"recall":0.568359375,"f1":0.7115056818181825,"seconds":5.0514936447143555e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":6.96875,"distances_sum":1170.8207935878631}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.625,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.625,"f1":0.7580388361638368,"seconds":4.472211003303528e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":7.546875,"distances_sum":1334.5610864754078}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9423279845154849,"seconds":5.5655837059021e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.8203125,"distances_sum":2110.1859091431647}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9403934607059614,"seconds":5.261972546577454e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.71875,"distances_sum":2105.1507031234205}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84375, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.84375,"f1":0.9083707958707966,"seconds":5.140900611877441e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.75,"distances_sum":1902.622382752043}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9037951631701638,"seconds":5.3532421588897705e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.7578125,"distances_sum":1881.8037569224766}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6337890625, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6337890625,"f1":0.7643151986901995,"seconds":4.582107067108154e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":7.4453125,"distances_sum":1337.4995239683951}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66015625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.66015625,"f1":0.7849827256077263,"seconds":4.5318156480789185e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":7.765625,"distances_sum":1430.7360667674513}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.900390625,"state":{"ssize":8,"bsize":7},"perf":{"precision":1.0,"recall":0.900390625,"f1":0.9423279845154849,"seconds":5.5655837059021e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.8203125,"distances_sum":2110.1859091431647}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9639709249084253,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.9140625,"distances_sum":2222.4739614791447}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9480711996337,"seconds":5.6158751249313354e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.71875,"distances_sum":2171.4797959541706}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9534111721611727,"seconds":5.409121513366699e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.875,"distances_sum":2158.181084052265}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":12,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9589514652014652,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.8984375,"distances_sum":2192.8952907434805}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9618532509157515,"seconds":5.649402737617493e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.8671875,"distances_sum":2234.2482730413776}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9474587912087917,"seconds":5.431473255157471e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.734375,"distances_sum":2173.681390844057}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9345703125,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9639709249084253,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.9140625,"distances_sum":2222.4739614791447}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9345703125,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9345703125,"f1":0.9639709249084253,"seconds":5.99399209022522e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.9140625,"distances_sum":2222.4739614791447}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.376953125, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.376953125,"f1":null,"seconds":3.3639371395111084e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":5.921875,"distances_sum":813.3594191781381}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5517578125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5517578125,"f1":0.6946510087135093,"seconds":4.993751645088196e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":7.3671875,"distances_sum":1152.6200951365704}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.654296875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.654296875,"f1":0.7761193667443674,"seconds":5.016103386878967e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":7.9609375,"distances_sum":1413.099873167157}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.654296875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.654296875,"f1":0.7761193667443674,"seconds":5.016103386878967e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":7.9609375,"distances_sum":1413.099873167157}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9045048701298706,"seconds":5.407258868217468e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.7890625,"distances_sum":1938.0949766062038}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9315819597069604,"seconds":5.455687642097473e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.765625,"distances_sum":2076.968329220725}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8095703125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8095703125,"f1":0.8859125249750257,"seconds":5.340203642845154e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.703125,"distances_sum":1824.9435206506896}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.8484697594072603,"seconds":6.0051679611206055e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.4375,"distances_sum":1629.7438575475114}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.849609375,"f1":0.9115644771894781,"seconds":5.610287189483643e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.7890625,"distances_sum":1946.0136286308193}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8818359375,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8818359375,"f1":0.9315819597069604,"seconds":5.455687642097473e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.765625,"distances_sum":2076.968329220725}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":8,"bsize":11}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9664637445887451,"seconds":5.843117833137512e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.90625,"distances_sum":2284.223964708222}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9522779304029311,"seconds":5.805864930152893e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.859375,"distances_sum":2203.5426061535923}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9392087079587085,"seconds":5.366280674934387e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.7890625,"distances_sum":2146.6622018680755}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9575377747252751,"seconds":5.517154932022095e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.765625,"distances_sum":2264.6586210854202}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9611092032967037,"seconds":5.66430389881134e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.8828125,"distances_sum":2259.9579443779653}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9577812812187816,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.828125,"distances_sum":2249.9699945363946}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9404296875,"state":{"ssize":8,"bsize":11},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9664637445887451,"seconds":5.843117833137512e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.90625,"distances_sum":2284.223964708222}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9404296875,"state":{"ssize":8,"bsize":11},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9664637445887451,"seconds":5.843117833137512e-6,"exhaustive_search_seconds":1.3057142496109009e-6,"evaluations":8.90625,"distances_sum":2284.223964708222}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.8681655150405159,"seconds":5.140900611877441e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.2265625,"distances_sum":1781.944193943266}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.697265625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.697265625,"f1":0.8092277514152522,"seconds":5.815178155899048e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":7.8984375,"distances_sum":1486.2283701455922}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.201171875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.201171875,"f1":null,"seconds":3.4067779779434204e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":4.9609375,"distances_sum":465.72355925928565}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78125,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.78125,"f1":0.8681655150405159,"seconds":5.140900611877441e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.2265625,"distances_sum":1781.944193943266}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9473271520146522,"seconds":6.0908496379852295e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.7109375,"distances_sum":2228.150732588217}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9484661172161177,"seconds":5.988404154777527e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.71875,"distances_sum":2243.5943474236105}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9455102189477194,"seconds":6.215646862983704e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.6640625,"distances_sum":2192.2608430153623}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.857421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.857421875,"f1":0.9161406302031309,"seconds":5.7853758335113525e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.4453125,"distances_sum":2039.3858309763943}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.908203125,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9484661172161177,"seconds":5.988404154777527e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.71875,"distances_sum":2243.5943474236105}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9476648351648355,"seconds":5.964189767837524e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.671875,"distances_sum":2219.9598092137026}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9675595238095243,"seconds":6.323680281639099e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.8828125,"distances_sum":2348.4000265760214}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":11,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9672447344322347,"seconds":6.008893251419067e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.859375,"distances_sum":2342.8658319803153}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9509329212454221,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.7890625,"distances_sum":2245.9323676603008}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.964383012820513,"seconds":6.098300218582153e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.8046875,"distances_sum":2353.6449808422694}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9604052197802204,"seconds":5.649402737617493e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.8125,"distances_sum":2308.835535375702}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9675595238095243,"seconds":6.323680281639099e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.8828125,"distances_sum":2348.4000265760214}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9675595238095243,"seconds":6.323680281639099e-6,"exhaustive_search_seconds":1.1865049600601196e-6,"evaluations":8.8828125,"distances_sum":2348.4000265760214}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2353515625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2353515625,"f1":null,"seconds":3.2745301723480225e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":5.96875,"distances_sum":562.7230262870133}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8582022144522156,"seconds":5.1390379667282104e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.90625,"distances_sum":1747.5042265637153}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8557619463869475,"seconds":5.219131708145142e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.859375,"distances_sum":1764.9596956435953}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76171875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.76171875,"f1":0.8582022144522156,"seconds":5.1390379667282104e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.90625,"distances_sum":1747.5042265637153}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.957469093406594,"seconds":5.964189767837524e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.78125,"distances_sum":2375.1329770579637}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8193359375, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8193359375,"f1":0.8927889818514829,"seconds":5.500391125679016e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.3984375,"distances_sum":1957.4643450639599}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9528502747252754,"seconds":6.016343832015991e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.7734375,"distances_sum":2351.6575069867044}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9248046875,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9248046875,"f1":0.957469093406594,"seconds":5.964189767837524e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.78125,"distances_sum":2375.1329770579637}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.970703125, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.970703125,"f1":0.9839114010989014,"seconds":6.465241312980652e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.953125,"distances_sum":2534.4193173351136}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9576012529137534,"seconds":5.619600415229797e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.796875,"distances_sum":2376.8691762183935}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":9,"bsize":12}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9751888736263739,"seconds":5.992129445075989e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9140625,"distances_sum":2475.157097155964}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.970703125,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.970703125,"f1":0.9839114010989014,"seconds":6.465241312980652e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.953125,"distances_sum":2534.4193173351136}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.970703125,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.970703125,"f1":0.9839114010989014,"seconds":6.465241312980652e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.953125,"distances_sum":2534.4193173351136}}, n: 9
mean(cfft.distances) = 0.3334785526902099
mean(cdnet.distances) = 0.38448455218350824
mean(crand.distances) = 0.3439074814447418
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8511111111111113
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8777777777777778
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.9
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8911111111111111
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8711111111111111
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9422222222222222
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.8866666666666667
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.9066666666666666
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8733333333333334
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.888888888888889
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9155555555555556
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9466666666666667
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9333333333333332
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9111111111111111
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9311111111111111
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9333333333333332
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8777777777777778
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9244444444444445
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8888888888888888
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8911111111111111
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9288888888888889
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8844444444444445
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8844444444444445
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8955555555555555
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9022222222222224
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8666666666666667
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9088888888888889
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9222222222222222
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8822222222222221
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9044444444444445
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.6559449668725331] ***
*** center 1: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 2]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(2, 3), (3, 2)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 4, 17]]
** centroid: 9, normalized-entropy: 0.7024665512903904, [(2, 4), (3, 17)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
finished with 15 centroids; started with 12
acc = 0.9466666666666667
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.39206516140907155] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39206516140907155, 0.2957045525923997] ***
*** finished computation of 3 references, err: [Inf, 0.39206516140907155, 0.2957045525923997] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [60, 182, 32]]
** centroid: 1, normalized-entropy: 0.7783663635798511, [(1, 60), (2, 182), (3, 32)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [110, 56, 0]]
** centroid: 2, normalized-entropy: 0.9222596474738021, [(1, 110), (2, 56)]
*** center 3: selecting labels [1] (freq >= 2) [from [227, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3679460104717104] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3679460104717104, 0.3027057455930937] ***
*** finished computation of 3 references, err: [Inf, 0.3679460104717104, 0.3027057455930937] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [106, 179, 29]]
** centroid: 1, normalized-entropy: 0.8255673106701147, [(1, 106), (2, 179), (3, 29)]
*** center 2: selecting labels [1] (freq >= 2) [from [177, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [120, 55, 0]]
** centroid: 3, normalized-entropy: 0.8980587934501658, [(1, 120), (2, 55)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4998918967726438] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4998918967726438, 0.2946991044602104] ***
*** finished computation of 3 references, err: [Inf, 0.4998918967726438, 0.2946991044602104] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [15, 193, 31]]
** centroid: 1, normalized-entropy: 0.5564312428960005, [(1, 15), (2, 193), (3, 31)]
*** center 2: selecting labels [1] (freq >= 2) [from [245, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [124, 59, 0]]
** centroid: 3, normalized-entropy: 0.9069769836374789, [(1, 124), (2, 59)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3183741527301883] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3183741527301883, 0.24987037033304102] ***
*** starting iteration: 2; err: [Inf, 0.3183741527301883, 0.24987037033304102] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3183741527301883, 0.24987037033304102, 0.24327210947509725] ***
*** starting iteration: 3; err: [Inf, 0.3183741527301883, 0.24987037033304102, 0.24327210947509725] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3183741527301883, 0.24987037033304102, 0.24327210947509725, 0.2412057648141597] ***
*** finished computation of 3 references, err: [Inf, 0.3183741527301883, 0.24987037033304102, 0.24327210947509725, 0.2412057648141597] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [73, 169, 29]]
** centroid: 1, normalized-entropy: 0.80734591666189, [(1, 73), (2, 169), (3, 29)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [126, 65, 0]]
** centroid: 2, normalized-entropy: 0.9251189944868535, [(1, 126), (2, 65)]
*** center 3: selecting labels [1] (freq >= 1) [from [204, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.29340244800611953] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29340244800611953, 0.24637330137612087] ***
*** starting iteration: 2; err: [Inf, 0.29340244800611953, 0.24637330137612087] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29340244800611953, 0.24637330137612087, 0.23627218642764944] ***
*** starting iteration: 3; err: [Inf, 0.29340244800611953, 0.24637330137612087, 0.23627218642764944] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29340244800611953, 0.24637330137612087, 0.23627218642764944, 0.234349454221116] ***
*** finished computation of 3 references, err: [Inf, 0.29340244800611953, 0.24637330137612087, 0.23627218642764944, 0.234349454221116] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [126, 64, 0]]
** centroid: 1, normalized-entropy: 0.9217647116941611, [(1, 126), (2, 64)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 153, 32]]
** centroid: 2, normalized-entropy: 0.6644607041272541, [(2, 153), (3, 32)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [271, 21, 0]]
** centroid: 3, normalized-entropy: 0.3730401202318901, [(1, 271), (2, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31125001197002233] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31125001197002233, 0.24962858353340733] ***
*** starting iteration: 2; err: [Inf, 0.31125001197002233, 0.24962858353340733] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31125001197002233, 0.24962858353340733, 0.24443989331419322] ***
*** starting iteration: 3; err: [Inf, 0.31125001197002233, 0.24962858353340733, 0.24443989331419322] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31125001197002233, 0.24962858353340733, 0.24443989331419322, 0.24302621601034943] ***
*** finished computation of 3 references, err: [Inf, 0.31125001197002233, 0.24962858353340733, 0.24443989331419322, 0.24302621601034943] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [6, 181, 31]]
** centroid: 1, normalized-entropy: 0.48304391925763124, [(1, 6), (2, 181), (3, 31)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [253, 5, 0]]
** centroid: 2, normalized-entropy: 0.1379442520430323, [(1, 253), (2, 5)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [125, 66, 0]]
** centroid: 3, normalized-entropy: 0.9300306737927182, [(1, 125), (2, 66)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.29757808096771193] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29757808096771193, 0.21530344926922754] ***
*** starting iteration: 2; err: [Inf, 0.29757808096771193, 0.21530344926922754] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29757808096771193, 0.21530344926922754, 0.19365264342639138] ***
*** starting iteration: 3; err: [Inf, 0.29757808096771193, 0.21530344926922754, 0.19365264342639138] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29757808096771193, 0.21530344926922754, 0.19365264342639138, 0.1910306736645107] ***
*** starting iteration: 4; err: [Inf, 0.29757808096771193, 0.21530344926922754, 0.19365264342639138, 0.1910306736645107] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29757808096771193, 0.21530344926922754, 0.19365264342639138, 0.1910306736645107, 0.1880792212370481] ***
*** starting iteration: 5; err: [Inf, 0.29757808096771193, 0.21530344926922754, 0.19365264342639138, 0.1910306736645107, 0.1880792212370481] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29757808096771193, 0.21530344926922754, 0.19365264342639138, 0.1910306736645107, 0.1880792212370481, 0.1857209212437563] ***
*** starting iteration: 6; err: [Inf, 0.29757808096771193, 0.21530344926922754, 0.19365264342639138, 0.1910306736645107, 0.1880792212370481, 0.1857209212437563] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29757808096771193, 0.21530344926922754, 0.19365264342639138, 0.1910306736645107, 0.1880792212370481, 0.1857209212437563, 0.18356490359353544] ***
*** starting iteration: 7; err: [Inf, 0.29757808096771193, 0.21530344926922754, 0.19365264342639138, 0.1910306736645107, 0.1880792212370481, 0.1857209212437563, 0.18356490359353544] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29757808096771193, 0.21530344926922754, 0.19365264342639138, 0.1910306736645107, 0.1880792212370481, 0.1857209212437563, 0.18356490359353544, 0.18257802273160792] ***
*** finished computation of 7 references, err: [Inf, 0.29757808096771193, 0.21530344926922754, 0.19365264342639138, 0.1910306736645107, 0.1880792212370481, 0.1857209212437563, 0.18356490359353544, 0.18257802273160792] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 66, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [41, 55, 0]]
** centroid: 2, normalized-entropy: 0.98460399620868, [(1, 41), (2, 55)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [78, 37, 0]]
** centroid: 3, normalized-entropy: 0.90626268051371, [(1, 78), (2, 37)]
*** center 4: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 63, 29]]
** centroid: 5, normalized-entropy: 0.8991045208483789, [(2, 63), (3, 29)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [103, 13, 0]]
** centroid: 6, normalized-entropy: 0.5061252137852816, [(1, 103), (2, 13)]
*** center 7: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22686765076260249] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22686765076260249, 0.19726770279323053] ***
*** starting iteration: 2; err: [Inf, 0.22686765076260249, 0.19726770279323053] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22686765076260249, 0.19726770279323053, 0.1915496690540869] ***
*** starting iteration: 3; err: [Inf, 0.22686765076260249, 0.19726770279323053, 0.1915496690540869] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22686765076260249, 0.19726770279323053, 0.1915496690540869, 0.18872374449919413] ***
*** starting iteration: 4; err: [Inf, 0.22686765076260249, 0.19726770279323053, 0.1915496690540869, 0.18872374449919413] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22686765076260249, 0.19726770279323053, 0.1915496690540869, 0.18872374449919413, 0.18808754917123877] ***
*** finished computation of 7 references, err: [Inf, 0.22686765076260249, 0.19726770279323053, 0.1915496690540869, 0.18872374449919413, 0.18808754917123877] ***
*** center 1: selecting labels [1] (freq >= 2) [from [98, 1, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [1, 112, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [53, 20, 0]]
** centroid: 3, normalized-entropy: 0.847107490529376, [(1, 53), (2, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [78, 47, 0]]
** centroid: 5, normalized-entropy: 0.9551678918612524, [(1, 78), (2, 47)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 55, 32]]
** centroid: 6, normalized-entropy: 0.9489804585630239, [(2, 55), (3, 32)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [82, 3, 0]]
** centroid: 7, normalized-entropy: 0.22028326695127437, [(1, 82), (2, 3)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23880886834818518] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23880886834818518, 0.19150561481159922] ***
*** starting iteration: 2; err: [Inf, 0.23880886834818518, 0.19150561481159922] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23880886834818518, 0.19150561481159922, 0.18508143292605944] ***
*** starting iteration: 3; err: [Inf, 0.23880886834818518, 0.19150561481159922, 0.18508143292605944] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23880886834818518, 0.19150561481159922, 0.18508143292605944, 0.18292707386300963] ***
*** starting iteration: 4; err: [Inf, 0.23880886834818518, 0.19150561481159922, 0.18508143292605944, 0.18292707386300963] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23880886834818518, 0.19150561481159922, 0.18508143292605944, 0.18292707386300963, 0.18218460994370483] ***
*** finished computation of 7 references, err: [Inf, 0.23880886834818518, 0.19150561481159922, 0.18508143292605944, 0.18292707386300963, 0.18218460994370483] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [71, 21, 0]]
** centroid: 1, normalized-entropy: 0.7749672673267259, [(1, 71), (2, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [81, 6, 0]]
** centroid: 2, normalized-entropy: 0.36205125173399805, [(1, 81), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 88, 31]]
** centroid: 3, normalized-entropy: 0.8275062669879832, [(2, 88), (3, 31)]
*** center 4: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [25, 83, 0]]
** centroid: 6, normalized-entropy: 0.7805849322915901, [(1, 25), (2, 83)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [42, 54, 0]]
** centroid: 7, normalized-entropy: 0.9886994082884974, [(1, 42), (2, 54)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5090794488116428] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5090794488116428, 0.3331207905898805] ***
*** finished computation of 3 references, err: [Inf, 0.5090794488116428, 0.3331207905898805] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [110, 48, 0]]
** centroid: 1, normalized-entropy: 0.8858834790484443, [(1, 110), (2, 48)]
*** center 2: selecting labels [1] (freq >= 1) [from [145, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [148, 186, 29]]
** centroid: 3, normalized-entropy: 0.8285944088068412, [(1, 148), (2, 186), (3, 29)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.34427030010335985] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34427030010335985, 0.3091624033437676] ***
*** finished computation of 3 references, err: [Inf, 0.34427030010335985, 0.3091624033437676] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 144, 32]]
** centroid: 1, normalized-entropy: 0.6840384356390419, [(2, 144), (3, 32)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [191, 55, 0]]
** centroid: 2, normalized-entropy: 0.7666458451819868, [(1, 191), (2, 55)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [206, 39, 0]]
** centroid: 3, normalized-entropy: 0.6323530608990166, [(1, 206), (2, 39)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4531159163452685] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4531159163452685, 0.3492638533111142] ***
*** finished computation of 3 references, err: [Inf, 0.4531159163452685, 0.3492638533111142] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [266, 51, 0]]
** centroid: 1, normalized-entropy: 0.6364184614205974, [(1, 266), (2, 51)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [98, 128, 0]]
** centroid: 2, normalized-entropy: 0.9872516848785046, [(1, 98), (2, 128)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [20, 73, 31]]
** centroid: 3, normalized-entropy: 0.8672460302558233, [(1, 20), (2, 73), (3, 31)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3621252048341138] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3621252048341138, 0.3008713897935733] ***
*** starting iteration: 2; err: [Inf, 0.3621252048341138, 0.3008713897935733] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3621252048341138, 0.3008713897935733, 0.29669861723815705] ***
*** starting iteration: 3; err: [Inf, 0.3621252048341138, 0.3008713897935733, 0.29669861723815705] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3621252048341138, 0.3008713897935733, 0.29669861723815705, 0.2954218385268461] ***
*** starting iteration: 4; err: [Inf, 0.3621252048341138, 0.3008713897935733, 0.29669861723815705, 0.2954218385268461] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3621252048341138, 0.3008713897935733, 0.29669861723815705, 0.2954218385268461, 0.2952885289170273] ***
*** finished computation of 3 references, err: [Inf, 0.3621252048341138, 0.3008713897935733, 0.29669861723815705, 0.2954218385268461, 0.2952885289170273] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [254, 10, 0]]
** centroid: 1, normalized-entropy: 0.23248051561222705, [(1, 254), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [147, 53, 0]]
** centroid: 2, normalized-entropy: 0.834198095860749, [(1, 147), (2, 53)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [2, 171, 29]]
** centroid: 3, normalized-entropy: 0.4236115170290999, [(1, 2), (2, 171), (3, 29)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3686433730331407] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3686433730331407, 0.30680255922230554] ***
*** starting iteration: 2; err: [Inf, 0.3686433730331407, 0.30680255922230554] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3686433730331407, 0.30680255922230554, 0.29987081262873655] ***
*** starting iteration: 3; err: [Inf, 0.3686433730331407, 0.30680255922230554, 0.29987081262873655] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3686433730331407, 0.30680255922230554, 0.29987081262873655, 0.2976961211333501] ***
*** starting iteration: 4; err: [Inf, 0.3686433730331407, 0.30680255922230554, 0.29987081262873655, 0.2976961211333501] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3686433730331407, 0.30680255922230554, 0.29987081262873655, 0.2976961211333501, 0.29695394249406754] ***
*** finished computation of 3 references, err: [Inf, 0.3686433730331407, 0.30680255922230554, 0.29987081262873655, 0.2976961211333501, 0.29695394249406754] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [267, 11, 0]]
** centroid: 1, normalized-entropy: 0.24030955630053213, [(1, 267), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [130, 55, 0]]
** centroid: 2, normalized-entropy: 0.8779620013943914, [(1, 130), (2, 55)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 172, 32]]
** centroid: 3, normalized-entropy: 0.6267511370265896, [(2, 172), (3, 32)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3818194181176609] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3818194181176609, 0.3124378473907039] ***
*** starting iteration: 2; err: [Inf, 0.3818194181176609, 0.3124378473907039] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3818194181176609, 0.3124378473907039, 0.3041193758429348] ***
*** starting iteration: 3; err: [Inf, 0.3818194181176609, 0.3124378473907039, 0.3041193758429348] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3818194181176609, 0.3124378473907039, 0.3041193758429348, 0.3021716586323916] ***
*** starting iteration: 4; err: [Inf, 0.3818194181176609, 0.3124378473907039, 0.3041193758429348, 0.3021716586323916] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3818194181176609, 0.3124378473907039, 0.3041193758429348, 0.3021716586323916, 0.30158025411137757] ***
*** finished computation of 3 references, err: [Inf, 0.3818194181176609, 0.3124378473907039, 0.3041193758429348, 0.3021716586323916, 0.30158025411137757] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [90, 166, 31]]
** centroid: 1, normalized-entropy: 0.838070098850616, [(1, 90), (2, 166), (3, 31)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [97, 86, 0]]
** centroid: 2, normalized-entropy: 0.9973921082483496, [(1, 97), (2, 86)]
*** center 3: selecting labels [1] (freq >= 2) [from [197, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23398493405140647] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23398493405140647, 0.19364555261283833] ***
*** finished computation of 7 references, err: [Inf, 0.23398493405140647, 0.19364555261283833] ***
*** center 1: selecting labels [1] (freq >= 2) [from [116, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 39, 29]]
** centroid: 2, normalized-entropy: 0.9843432030984676, [(2, 39), (3, 29)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [91, 5, 0]]
** centroid: 3, normalized-entropy: 0.29518174309075856, [(1, 91), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [91, 3, 0]]
** centroid: 4, normalized-entropy: 0.2039058755048202, [(1, 91), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [13, 93, 0]]
** centroid: 5, normalized-entropy: 0.5369064378756415, [(1, 13), (2, 93)]
*** center 6: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [8, 94, 0]]
** centroid: 7, normalized-entropy: 0.3966277727783787, [(1, 8), (2, 94)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23840317327663235] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23840317327663235, 0.19589215320097966] ***
*** finished computation of 7 references, err: [Inf, 0.23840317327663235, 0.19589215320097966] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 110, 32]]
** centroid: 1, normalized-entropy: 0.7698205808588191, [(2, 110), (3, 32)]
*** center 2: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [60, 2, 0]]
** centroid: 3, normalized-entropy: 0.2055925081850832, [(1, 60), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [59, 28, 0]]
** centroid: 4, normalized-entropy: 0.9063701886077911, [(1, 59), (2, 28)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [94, 37, 0]]
** centroid: 5, normalized-entropy: 0.8587579130949384, [(1, 94), (2, 37)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [24, 61, 0]]
** centroid: 6, normalized-entropy: 0.8586370819183629, [(1, 24), (2, 61)]
*** center 7: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2148204674857712] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2148204674857712, 0.18357316088461983] ***
*** finished computation of 7 references, err: [Inf, 0.2148204674857712, 0.18357316088461983] ***
*** center 1: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [69, 5, 0]]
** centroid: 2, normalized-entropy: 0.35678001438394347, [(1, 69), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 69, 31]]
** centroid: 3, normalized-entropy: 0.8931734583778567, [(2, 69), (3, 31)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [55, 11, 0]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(1, 55), (2, 11)]
*** center 5: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [31, 80, 0]]
** centroid: 6, normalized-entropy: 0.8544669184854021, [(1, 31), (2, 80)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [13, 87, 0]]
** centroid: 7, normalized-entropy: 0.557438185027989, [(1, 13), (2, 87)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.345611724264531] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.345611724264531, 0.23687056355267852] ***
*** starting iteration: 2; err: [Inf, 0.345611724264531, 0.23687056355267852] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.345611724264531, 0.23687056355267852, 0.23566654614206436] ***
*** starting iteration: 3; err: [Inf, 0.345611724264531, 0.23687056355267852, 0.23566654614206436] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.345611724264531, 0.23687056355267852, 0.23566654614206436, 0.23526694865997982] ***
*** finished computation of 3 references, err: [Inf, 0.345611724264531, 0.23687056355267852, 0.23566654614206436, 0.23526694865997982] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [73, 149, 29]]
** centroid: 1, normalized-entropy: 0.8356995908026421, [(1, 73), (2, 149), (3, 29)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [131, 85, 0]]
** centroid: 2, normalized-entropy: 0.9670326745101786, [(1, 131), (2, 85)]
*** center 3: selecting labels [1] (freq >= 1) [from [199, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3351415173126862] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3351415173126862, 0.2355175246184376] ***
*** starting iteration: 2; err: [Inf, 0.3351415173126862, 0.2355175246184376] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3351415173126862, 0.2355175246184376, 0.23369516088519765] ***
*** starting iteration: 3; err: [Inf, 0.3351415173126862, 0.2355175246184376, 0.23369516088519765] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3351415173126862, 0.2355175246184376, 0.23369516088519765, 0.23297615171685213] ***
*** finished computation of 3 references, err: [Inf, 0.3351415173126862, 0.2355175246184376, 0.23369516088519765, 0.23297615171685213] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [40, 176, 32]]
** centroid: 1, normalized-entropy: 0.7299032875504213, [(1, 40), (2, 176), (3, 32)]
*** center 2: selecting labels [1] (freq >= 1) [from [243, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [114, 62, 0]]
** centroid: 3, normalized-entropy: 0.9360814319397586, [(1, 114), (2, 62)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.32380255834776156] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32380255834776156, 0.2477555972561687] ***
*** starting iteration: 2; err: [Inf, 0.32380255834776156, 0.2477555972561687] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32380255834776156, 0.2477555972561687, 0.23955562089694135] ***
*** starting iteration: 3; err: [Inf, 0.32380255834776156, 0.2477555972561687, 0.23955562089694135] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32380255834776156, 0.2477555972561687, 0.23955562089694135, 0.2386328651244449] ***
*** finished computation of 3 references, err: [Inf, 0.32380255834776156, 0.2477555972561687, 0.23955562089694135, 0.2386328651244449] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [97, 161, 31]]
** centroid: 1, normalized-entropy: 0.8481623030231261, [(1, 97), (2, 161), (3, 31)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [92, 91, 0]]
** centroid: 2, normalized-entropy: 0.9999784600582143, [(1, 92), (2, 91)]
*** center 3: selecting labels [1] (freq >= 1) [from [195, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.22861395613779803] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22861395613779803, 0.1687929658967353] ***
*** finished computation of 7 references, err: [Inf, 0.22861395613779803, 0.1687929658967353] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [77, 4, 0]]
** centroid: 1, normalized-entropy: 0.2837689703721877, [(1, 77), (2, 4)]
*** center 2: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [55, 17, 0]]
** centroid: 3, normalized-entropy: 0.7885131605379784, [(1, 55), (2, 17)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [108, 84, 0]]
** centroid: 4, normalized-entropy: 0.9886994082884974, [(1, 108), (2, 84)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 101, 29]]
** centroid: 5, normalized-entropy: 0.7657462082851403, [(2, 101), (3, 29)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [38, 28, 0]]
** centroid: 6, normalized-entropy: 0.9833761901392238, [(1, 38), (2, 28)]
*** center 7: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2110020744571018] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2110020744571018, 0.1743937392518025] ***
*** finished computation of 7 references, err: [Inf, 0.2110020744571018, 0.1743937392518025] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 154, 32]]
** centroid: 1, normalized-entropy: 0.6623570516079519, [(2, 154), (3, 32)]
*** center 2: selecting labels [1] (freq >= 2) [from [139, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [91, 6, 0]]
** centroid: 5, normalized-entropy: 0.3347676126777638, [(1, 91), (2, 6)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 51, 0]]
** centroid: 6, normalized-entropy: 0.5313400141801669, [(1, 7), (2, 51)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [76, 27, 0]]
** centroid: 7, normalized-entropy: 0.829952434172285, [(1, 76), (2, 27)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19178782564530644] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19178782564530644, 0.16467510730396773] ***
*** finished computation of 7 references, err: [Inf, 0.19178782564530644, 0.16467510730396773] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [56, 9, 0]]
** centroid: 1, normalized-entropy: 0.5801954953637372, [(1, 56), (2, 9)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [86, 84, 0]]
** centroid: 2, normalized-entropy: 0.9999001572094882, [(1, 86), (2, 84)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 142, 31]]
** centroid: 3, normalized-entropy: 0.6783035074537305, [(2, 142), (3, 31)]
*** center 4: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [45, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [56, 17, 0]]
** centroid: 7, normalized-entropy: 0.7829924501610913, [(1, 56), (2, 17)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31647751516978573] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31647751516978573, 0.2444929780002247] ***
*** starting iteration: 2; err: [Inf, 0.31647751516978573, 0.2444929780002247] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31647751516978573, 0.2444929780002247, 0.23908969311619754] ***
*** starting iteration: 3; err: [Inf, 0.31647751516978573, 0.2444929780002247, 0.23908969311619754] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31647751516978573, 0.2444929780002247, 0.23908969311619754, 0.23777829752060342] ***
*** finished computation of 3 references, err: [Inf, 0.31647751516978573, 0.2444929780002247, 0.23908969311619754, 0.23777829752060342] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 195, 29]]
** centroid: 1, normalized-entropy: 0.5559671540224537, [(2, 195), (3, 29)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [215, 18, 0]]
** centroid: 2, normalized-entropy: 0.39242600436374125, [(1, 215), (2, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [188, 21, 0]]
** centroid: 3, normalized-entropy: 0.4705104718237067, [(1, 188), (2, 21)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3951598299050081] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3951598299050081, 0.2602294544819212] ***
*** starting iteration: 2; err: [Inf, 0.3951598299050081, 0.2602294544819212] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3951598299050081, 0.2602294544819212, 0.24122774547853995] ***
*** starting iteration: 3; err: [Inf, 0.3951598299050081, 0.2602294544819212, 0.24122774547853995] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3951598299050081, 0.2602294544819212, 0.24122774547853995, 0.23687511469716432] ***
*** finished computation of 3 references, err: [Inf, 0.3951598299050081, 0.2602294544819212, 0.24122774547853995, 0.23687511469716432] ***
*** center 1: selecting labels [1] (freq >= 2) [from [220, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [77, 151, 32]]
** centroid: 2, normalized-entropy: 0.8499933011189407, [(1, 77), (2, 151), (3, 32)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [100, 87, 0]]
** centroid: 3, normalized-entropy: 0.9965110207629746, [(1, 100), (2, 87)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.37204472269064215] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37204472269064215, 0.2775214784590156] ***
*** starting iteration: 2; err: [Inf, 0.37204472269064215, 0.2775214784590156] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37204472269064215, 0.2775214784590156, 0.2407359576622105] ***
*** starting iteration: 3; err: [Inf, 0.37204472269064215, 0.2775214784590156, 0.2407359576622105] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37204472269064215, 0.2775214784590156, 0.2407359576622105, 0.23273465248603917] ***
*** finished computation of 3 references, err: [Inf, 0.37204472269064215, 0.2775214784590156, 0.2407359576622105, 0.23273465248603917] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [3, 160, 31]]
** centroid: 1, normalized-entropy: 0.4700739627320617, [(1, 3), (2, 160), (3, 31)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [123, 71, 0]]
** centroid: 2, normalized-entropy: 0.9475348543440404, [(1, 123), (2, 71)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [258, 21, 0]]
** centroid: 3, normalized-entropy: 0.3852851190780996, [(1, 258), (2, 21)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2452172679195947] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2452172679195947, 0.20583622342299995] ***
*** starting iteration: 2; err: [Inf, 0.2452172679195947, 0.20583622342299995] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2452172679195947, 0.20583622342299995, 0.1974628225937989] ***
*** starting iteration: 3; err: [Inf, 0.2452172679195947, 0.20583622342299995, 0.1974628225937989] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2452172679195947, 0.20583622342299995, 0.1974628225937989, 0.19330896601617872] ***
*** finished computation of 7 references, err: [Inf, 0.2452172679195947, 0.20583622342299995, 0.1974628225937989, 0.19330896601617872] ***
*** center 1: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [80, 16, 0]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(1, 80), (2, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 78, 29]]
** centroid: 4, normalized-entropy: 0.8429359403268015, [(2, 78), (3, 29)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [13, 108, 0]]
** centroid: 5, normalized-entropy: 0.4921395466176624, [(1, 13), (2, 108)]
*** center 6: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [92, 32, 0]]
** centroid: 7, normalized-entropy: 0.8238116333123173, [(1, 92), (2, 32)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25253206153289937] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25253206153289937, 0.20161287609426334] ***
*** starting iteration: 2; err: [Inf, 0.25253206153289937, 0.20161287609426334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25253206153289937, 0.20161287609426334, 0.19471874053071977] ***
*** starting iteration: 3; err: [Inf, 0.25253206153289937, 0.20161287609426334, 0.19471874053071977] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25253206153289937, 0.20161287609426334, 0.19471874053071977, 0.190733774431815] ***
*** finished computation of 7 references, err: [Inf, 0.25253206153289937, 0.20161287609426334, 0.19471874053071977, 0.190733774431815] ***
*** center 1: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [17, 85, 0]]
** centroid: 2, normalized-entropy: 0.6500224216483541, [(1, 17), (2, 85)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 76, 32]]
** centroid: 3, normalized-entropy: 0.876716288999464, [(2, 76), (3, 32)]
*** center 4: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [35, 44, 0]]
** centroid: 5, normalized-entropy: 0.9906174973781801, [(1, 35), (2, 44)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [71, 33, 0]]
** centroid: 6, normalized-entropy: 0.9014296082981941, [(1, 71), (2, 33)]
*** center 7: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27962790666122933] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27962790666122933, 0.21611442715152987] ***
*** starting iteration: 2; err: [Inf, 0.27962790666122933, 0.21611442715152987] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27962790666122933, 0.21611442715152987, 0.20288168792675684] ***
*** starting iteration: 3; err: [Inf, 0.27962790666122933, 0.21611442715152987, 0.20288168792675684] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27962790666122933, 0.21611442715152987, 0.20288168792675684, 0.1968835325202328] ***
*** finished computation of 7 references, err: [Inf, 0.27962790666122933, 0.21611442715152987, 0.20288168792675684, 0.1968835325202328] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [19, 105, 0]]
** centroid: 1, normalized-entropy: 0.6178543578838833, [(1, 19), (2, 105)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [32, 64, 0]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(1, 32), (2, 64)]
*** center 3: selecting labels [1] (freq >= 2) [from [123, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 79, 31]]
** centroid: 4, normalized-entropy: 0.8579163978157118, [(2, 79), (3, 31)]
*** center 5: selecting labels [1] (freq >= 2) [from [122, 1, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [36, 3, 0]]
** centroid: 6, normalized-entropy: 0.3912435636292556, [(1, 36), (2, 3)]
*** center 7: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2284369348414108] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2284369348414108, 0.1924668419518852] ***
*** starting iteration: 2; err: [Inf, 0.2284369348414108, 0.1924668419518852] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2284369348414108, 0.1924668419518852, 0.19158201917303955] ***
*** finished computation of 7 references, err: [Inf, 0.2284369348414108, 0.1924668419518852, 0.19158201917303955] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [27, 73, 0]]
** centroid: 1, normalized-entropy: 0.8414646362081756, [(1, 27), (2, 73)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [63, 15, 0]]
** centroid: 2, normalized-entropy: 0.7062740891876008, [(1, 63), (2, 15)]
*** center 3: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 88, 29]]
** centroid: 4, normalized-entropy: 0.8078738537818512, [(2, 88), (3, 29)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [50, 58, 0]]
** centroid: 5, normalized-entropy: 0.9960383613659186, [(1, 50), (2, 58)]
*** center 6: selecting labels [1] (freq >= 1) [from [105, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2407834879311173] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2407834879311173, 0.1908952833287351] ***
*** starting iteration: 2; err: [Inf, 0.2407834879311173, 0.1908952833287351] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2407834879311173, 0.1908952833287351, 0.1868409086172392] ***
*** starting iteration: 3; err: [Inf, 0.2407834879311173, 0.1908952833287351, 0.1868409086172392] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2407834879311173, 0.1908952833287351, 0.1868409086172392, 0.18645980135109025] ***
*** finished computation of 7 references, err: [Inf, 0.2407834879311173, 0.1908952833287351, 0.1868409086172392, 0.18645980135109025] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [10, 76, 0]]
** centroid: 1, normalized-entropy: 0.5185697317883058, [(1, 10), (2, 76)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [43, 30, 0]]
** centroid: 2, normalized-entropy: 0.9770012394218561, [(1, 43), (2, 30)]
*** center 3: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 83, 32]]
** centroid: 4, normalized-entropy: 0.8530702874505077, [(2, 83), (3, 32)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [75, 26, 0]]
** centroid: 5, normalized-entropy: 0.8228368841492258, [(1, 75), (2, 26)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [77, 23, 0]]
** centroid: 6, normalized-entropy: 0.7780113035465377, [(1, 77), (2, 23)]
*** center 7: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2335355733137304] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2335355733137304, 0.1907677729711819] ***
*** starting iteration: 2; err: [Inf, 0.2335355733137304, 0.1907677729711819] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2335355733137304, 0.1907677729711819, 0.18444161112818203] ***
*** starting iteration: 3; err: [Inf, 0.2335355733137304, 0.1907677729711819, 0.18444161112818203] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2335355733137304, 0.1907677729711819, 0.18444161112818203, 0.18299259241904947] ***
*** starting iteration: 4; err: [Inf, 0.2335355733137304, 0.1907677729711819, 0.18444161112818203, 0.18299259241904947] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2335355733137304, 0.1907677729711819, 0.18444161112818203, 0.18299259241904947, 0.1826227652188251] ***
*** finished computation of 7 references, err: [Inf, 0.2335355733137304, 0.1907677729711819, 0.18444161112818203, 0.18299259241904947, 0.1826227652188251] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [70, 17, 0]]
** centroid: 1, normalized-entropy: 0.7126368350739763, [(1, 70), (2, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [56, 25, 0]]
** centroid: 2, normalized-entropy: 0.8915996278279094, [(1, 56), (2, 25)]
*** center 3: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 91, 31]]
** centroid: 4, normalized-entropy: 0.8177094860868659, [(2, 91), (3, 31)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [71, 30, 0]]
** centroid: 5, normalized-entropy: 0.8776296673746861, [(1, 71), (2, 30)]
*** center 6: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [5, 89, 0]]
** centroid: 7, normalized-entropy: 0.2998025130558691, [(1, 5), (2, 89)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 13)
[0.9419958881036726, 0.9310028591465717, 0.9280118441795088, 0.917009824195453, 0.9159938381495268, 0.8980147812483142, 0.8880557203910496, 0.8720097342851835, 0.8610197023370675, 0.8560027092961224, 0.8519657381932831, 0.8409846972721224, 0.800003596410782]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.3, 2) => 0.9419958881036726
finished with 13
iteration 2 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.9419958881036726, 0.9310028591465717, 0.9280118441795088, 0.917009824195453, 0.9159938381495268, 0.8980147812483142, 0.8880557203910496, 0.8720097342851835, 0.8610197023370675, 0.8560027092961224, 0.8519657381932831, 0.8409846972721224, 0.800003596410782]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.3, 2) => 0.9419958881036726
finished with 14
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.3383489546824705] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3383489546824705, 0.24412915790516482] ***
*** finished computation of 3 references, err: [Inf, 0.3383489546824705, 0.24412915790516482] ***
*** center 1: selecting labels [1] (freq >= 1) [from [157, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [99, 157, 29]]
** centroid: 2, normalized-entropy: 0.8449587239581197, [(1, 99), (2, 157), (3, 29)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [147, 77, 0]]
** centroid: 3, normalized-entropy: 0.9283620723948678, [(1, 147), (2, 77)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3059001639743672] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3059001639743672, 0.26015536021301594] ***
*** finished computation of 3 references, err: [Inf, 0.3059001639743672, 0.26015536021301594] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [111, 43, 0]]
** centroid: 1, normalized-entropy: 0.8543868938309275, [(1, 111), (2, 43)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 130, 32]]
** centroid: 2, normalized-entropy: 0.7169622516889513, [(2, 130), (3, 32)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [286, 65, 0]]
** centroid: 3, normalized-entropy: 0.6912898694057888, [(1, 286), (2, 65)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4020513310927948] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4020513310927948, 0.26150436833014956] ***
*** finished computation of 3 references, err: [Inf, 0.4020513310927948, 0.26150436833014956] ***
*** center 1: selecting labels [1] (freq >= 1) [from [144, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [168, 16, 0]]
** centroid: 2, normalized-entropy: 0.42622865699814483, [(1, 168), (2, 16)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [72, 236, 31]]
** centroid: 3, normalized-entropy: 0.7281273866714735, [(1, 72), (2, 236), (3, 31)]
finished with 5 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 14)
[0.9419958881036726, 0.9310028591465717, 0.9280118441795088, 0.917009824195453, 0.9159938381495268, 0.8980147812483142, 0.8880557203910496, 0.8720097342851835, 0.86896477315639, 0.8610197023370675, 0.8560027092961224, 0.8519657381932831, 0.8409846972721224, 0.800003596410782]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.3, 2) => 0.9419958881036726
finished with 14
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 14)
[0.9419958881036726, 0.9310028591465717, 0.9280118441795088, 0.917009824195453, 0.9159938381495268, 0.8980147812483142, 0.8880557203910496, 0.8720097342851835, 0.86896477315639, 0.8610197023370675, 0.8560027092961224, 0.8519657381932831, 0.8409846972721224, 0.800003596410782]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.3, 2) => 0.9419958881036726
finished with 14
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 14)
[0.9419958881036726, 0.9310028591465717, 0.9280118441795088, 0.917009824195453, 0.9159938381495268, 0.8980147812483142, 0.8880557203910496, 0.8720097342851835, 0.86896477315639, 0.8610197023370675, 0.8560027092961224, 0.8519657381932831, 0.8409846972721224, 0.800003596410782]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.3, 2) => 0.9419958881036726
finished with 16
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.30830989262253894] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30830989262253894, 0.24013587731918296] ***
*** starting iteration: 2; err: [Inf, 0.30830989262253894, 0.24013587731918296] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30830989262253894, 0.24013587731918296, 0.23535842271982463] ***
*** starting iteration: 3; err: [Inf, 0.30830989262253894, 0.24013587731918296, 0.23535842271982463] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30830989262253894, 0.24013587731918296, 0.23535842271982463, 0.23387902490641066] ***
*** finished computation of 3 references, err: [Inf, 0.30830989262253894, 0.24013587731918296, 0.23535842271982463, 0.23387902490641066] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [270, 15, 0]]
** centroid: 1, normalized-entropy: 0.2974722489192896, [(1, 270), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [127, 57, 0]]
** centroid: 2, normalized-entropy: 0.892922358081712, [(1, 127), (2, 57)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 166, 32]]
** centroid: 3, normalized-entropy: 0.638161945314006, [(2, 166), (3, 32)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.344802335399698] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.344802335399698, 0.24487324684785605] ***
*** starting iteration: 2; err: [Inf, 0.344802335399698, 0.24487324684785605] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.344802335399698, 0.24487324684785605, 0.24192035160175673] ***
*** starting iteration: 3; err: [Inf, 0.344802335399698, 0.24487324684785605, 0.24192035160175673] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.344802335399698, 0.24487324684785605, 0.24192035160175673, 0.2409818233263486] ***
*** finished computation of 3 references, err: [Inf, 0.344802335399698, 0.24487324684785605, 0.24192035160175673, 0.2409818233263486] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [235, 11, 0]]
** centroid: 1, normalized-entropy: 0.2635095043319829, [(1, 235), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [168, 33, 0]]
** centroid: 2, normalized-entropy: 0.6442142137378306, [(1, 168), (2, 33)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 190, 29]]
** centroid: 3, normalized-entropy: 0.5640381352103986, [(2, 190), (3, 29)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3613286869240174] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3613286869240174, 0.24073701247229412] ***
*** starting iteration: 2; err: [Inf, 0.3613286869240174, 0.24073701247229412] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3613286869240174, 0.24073701247229412, 0.23919772710288126] ***
*** starting iteration: 3; err: [Inf, 0.3613286869240174, 0.24073701247229412, 0.23919772710288126] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3613286869240174, 0.24073701247229412, 0.23919772710288126, 0.2389924707257006] ***
*** finished computation of 3 references, err: [Inf, 0.3613286869240174, 0.24073701247229412, 0.23919772710288126, 0.2389924707257006] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [93, 169, 31]]
** centroid: 1, normalized-entropy: 0.8367749538592079, [(1, 93), (2, 169), (3, 31)]
*** center 2: selecting labels [1] (freq >= 1) [from [197, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [94, 83, 0]]
** centroid: 3, normalized-entropy: 0.9972121892949033, [(1, 94), (2, 83)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4073657879281465] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4073657879281465, 0.2978326593366292] ***
*** starting iteration: 2; err: [Inf, 0.4073657879281465, 0.2978326593366292] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4073657879281465, 0.2978326593366292, 0.29627031042148266] ***
*** starting iteration: 3; err: [Inf, 0.4073657879281465, 0.2978326593366292, 0.29627031042148266] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4073657879281465, 0.2978326593366292, 0.29627031042148266, 0.2964135283973437] ***
*** finished computation of 3 references, err: [Inf, 0.4073657879281465, 0.2978326593366292, 0.29627031042148266, 0.2964135283973437] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [71, 158, 29]]
** centroid: 1, normalized-entropy: 0.8201739035375293, [(1, 71), (2, 158), (3, 29)]
*** center 2: selecting labels [1] (freq >= 1) [from [202, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [130, 76, 0]]
** centroid: 3, normalized-entropy: 0.9498485528365604, [(1, 130), (2, 76)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39683651653812385] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39683651653812385, 0.3178448292749307] ***
*** starting iteration: 2; err: [Inf, 0.39683651653812385, 0.3178448292749307] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39683651653812385, 0.3178448292749307, 0.3080838644818432] ***
*** starting iteration: 3; err: [Inf, 0.39683651653812385, 0.3178448292749307, 0.3080838644818432] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39683651653812385, 0.3178448292749307, 0.3080838644818432, 0.3057559565284933] ***
*** finished computation of 3 references, err: [Inf, 0.39683651653812385, 0.3178448292749307, 0.3080838644818432, 0.3057559565284933] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [92, 145, 32]]
** centroid: 1, normalized-entropy: 0.8677485505693235, [(1, 92), (2, 145), (3, 32)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [102, 93, 0]]
** centroid: 2, normalized-entropy: 0.9984628557283827, [(1, 102), (2, 93)]
*** center 3: selecting labels [1] (freq >= 1) [from [203, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5077359923084771] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5077359923084771, 0.298804800496667] ***
*** starting iteration: 2; err: [Inf, 0.5077359923084771, 0.298804800496667] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5077359923084771, 0.298804800496667, 0.2958890747172811] ***
*** starting iteration: 3; err: [Inf, 0.5077359923084771, 0.298804800496667, 0.2958890747172811] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5077359923084771, 0.298804800496667, 0.2958890747172811, 0.2951437769732766] ***
*** finished computation of 3 references, err: [Inf, 0.5077359923084771, 0.298804800496667, 0.2958890747172811, 0.2951437769732766] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [71, 167, 31]]
** centroid: 1, normalized-entropy: 0.8160633716620554, [(1, 71), (2, 167), (3, 31)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [116, 85, 0]]
** centroid: 2, normalized-entropy: 0.9827729598032917, [(1, 116), (2, 85)]
*** center 3: selecting labels [1] (freq >= 1) [from [197, 0, 0]]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 16)
[0.9419958881036726, 0.9310028591465717, 0.9280118441795088, 0.9260188332044619, 0.917009824195453, 0.9159938381495268, 0.9080158002313691, 0.8980147812483142, 0.8880557203910496, 0.8720097342851835, 0.86896477315639, 0.8610197023370675, 0.8560027092961224, 0.8519657381932831, 0.8409846972721224, 0.800003596410782]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.3, 2) => 0.9419958881036726
finished with 17
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.3222475807047051] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3222475807047051, 0.25676599889435153] ***
*** finished computation of 3 references, err: [Inf, 0.3222475807047051, 0.25676599889435153] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [286, 48, 0]]
** centroid: 1, normalized-entropy: 0.5938797345302353, [(1, 286), (2, 48)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 145, 32]]
** centroid: 2, normalized-entropy: 0.6818043181498591, [(2, 145), (3, 32)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [111, 45, 0]]
** centroid: 3, normalized-entropy: 0.8667256130949592, [(1, 111), (2, 45)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3549620113928971] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3549620113928971, 0.2412109882438156] ***
*** finished computation of 3 references, err: [Inf, 0.3549620113928971, 0.2412109882438156] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [116, 165, 31]]
** centroid: 1, normalized-entropy: 0.8503324326130521, [(1, 116), (2, 165), (3, 31)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [90, 87, 0]]
** centroid: 2, normalized-entropy: 0.9997927658541268, [(1, 90), (2, 87)]
*** center 3: selecting labels [1] (freq >= 2) [from [178, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3618700081795767] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3618700081795767, 0.23843249843341183] ***
*** finished computation of 3 references, err: [Inf, 0.3618700081795767, 0.23843249843341183] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [107, 151, 28]]
** centroid: 1, normalized-entropy: 0.8488457898877553, [(1, 107), (2, 151), (3, 28)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [110, 83, 1]]
** centroid: 2, normalized-entropy: 0.9858360979442085, [(1, 110), (2, 83)]
*** center 3: selecting labels [1] (freq >= 2) [from [186, 0, 0]]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 17)
[0.9419958881036726, 0.9310028591465717, 0.9280118441795088, 0.9260188332044619, 0.917009824195453, 0.9159938381495268, 0.9080158002313691, 0.8980147812483142, 0.8880557203910496, 0.8829727931524337, 0.8720097342851835, 0.86896477315639, 0.8610197023370675, 0.8560027092961224, 0.8519657381932831, 0.8409846972721224, 0.800003596410782]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 10, 1.0, :rand, 0.3, 2) => 0.9419958881036726
finished with 18
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.19155157837218073] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19155157837218073, 0.1500477159229656] ***
*** finished computation of 7 references, err: [Inf, 0.19155157837218073, 0.1500477159229656] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [4, 110, 0]]
** centroid: 1, normalized-entropy: 0.2192973081321754, [(1, 4), (2, 110)]
*** center 2: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 36, 0]]
** centroid: 3, normalized-entropy: 0.9910760598382222, [(1, 45), (2, 36)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [73, 23, 0]]
** centroid: 4, normalized-entropy: 0.7943466904341503, [(1, 73), (2, 23)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 57, 32]]
** centroid: 5, normalized-entropy: 0.9423094893103273, [(2, 57), (3, 32)]
*** center 6: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [107, 12, 0]]
** centroid: 7, normalized-entropy: 0.47165375025267803, [(1, 107), (2, 12)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20264056313299816] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20264056313299816, 0.15001120708301255] ***
*** finished computation of 7 references, err: [Inf, 0.20264056313299816, 0.15001120708301255] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [63, 16, 0]]
** centroid: 1, normalized-entropy: 0.7269625813353975, [(1, 63), (2, 16)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [85, 22, 0]]
** centroid: 2, normalized-entropy: 0.7330022650766125, [(1, 85), (2, 22)]
*** center 3: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 61, 31]]
** centroid: 4, normalized-entropy: 0.9218764863469129, [(2, 61), (3, 31)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [58, 66, 0]]
** centroid: 5, normalized-entropy: 0.9969954265557693, [(1, 58), (2, 66)]
*** center 6: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 87, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19382348473501243] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19382348473501243, 0.14810163096186366] ***
*** finished computation of 7 references, err: [Inf, 0.19382348473501243, 0.14810163096186366] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [20, 66, 0]]
** centroid: 1, normalized-entropy: 0.7824441294066888, [(1, 20), (2, 66)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [75, 30, 0]]
** centroid: 2, normalized-entropy: 0.8631205685666311, [(1, 75), (2, 30)]
*** center 3: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 91, 29]]
** centroid: 4, normalized-entropy: 0.797800919635344, [(2, 91), (3, 29)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [50, 47, 0]]
** centroid: 5, normalized-entropy: 0.999309898706868, [(1, 50), (2, 47)]
*** center 6: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 18)
[0.9500248751745758, 0.9419958881036726, 0.9310028591465717, 0.9280118441795088, 0.9260188332044619, 0.917009824195453, 0.9159938381495268, 0.9080158002313691, 0.8980147812483142, 0.8880557203910496, 0.8829727931524337, 0.8720097342851835, 0.86896477315639, 0.8610197023370675, 0.8560027092961224, 0.8519657381932831, 0.8409846972721224, 0.800003596410782]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9500248751745758
finished with 18
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.1962530996836722] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1962530996836722, 0.14922325910115614] ***
*** finished computation of 7 references, err: [Inf, 0.1962530996836722, 0.14922325910115614] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [113, 71, 0]]
** centroid: 1, normalized-entropy: 0.9620822373735962, [(1, 113), (2, 71)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [103, 7, 0]]
** centroid: 2, normalized-entropy: 0.34171390666761664, [(1, 103), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 119, 46]]
** centroid: 3, normalized-entropy: 0.8537939487169197, [(2, 119), (3, 46)]
*** center 4: selecting labels [1] (freq >= 2) [from [139, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [82, 27, 0]]
** centroid: 5, normalized-entropy: 0.8076226097576925, [(1, 82), (2, 27)]
*** center 6: selecting labels [1] (freq >= 2) [from [143, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [12, 138, 0]]
** centroid: 7, normalized-entropy: 0.4021791902022729, [(1, 12), (2, 138)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18589068415015936] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18589068415015936, 0.1485360755380243] ***
*** finished computation of 7 references, err: [Inf, 0.18589068415015936, 0.1485360755380243] ***
*** center 1: selecting labels [1] (freq >= 2) [from [115, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 30, 20]]
** centroid: 2, normalized-entropy: 0.9709505944546688, [(2, 30), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [48, 22, 0]]
** centroid: 3, normalized-entropy: 0.8980587934501658, [(1, 48), (2, 22)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [71, 2, 0]]
** centroid: 4, normalized-entropy: 0.18116640155354563, [(1, 71), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [11, 65, 0]]
** centroid: 5, normalized-entropy: 0.5965109917085881, [(1, 11), (2, 65)]
*** center 6: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 51, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19947678782232106] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19947678782232106, 0.1548174022361636] ***
*** finished computation of 7 references, err: [Inf, 0.19947678782232106, 0.1548174022361636] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [95, 12, 0]]
** centroid: 1, normalized-entropy: 0.5063657452787739, [(1, 95), (2, 12)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 24, 29]]
** centroid: 2, normalized-entropy: 0.9935704757706079, [(2, 24), (3, 29)]
*** center 3: selecting labels [1] (freq >= 2) [from [59, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [59, 5, 0]]
** centroid: 4, normalized-entropy: 0.3955378064564774, [(1, 59), (2, 5)]
*** center 5: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [11, 65, 0]]
** centroid: 6, normalized-entropy: 0.5965109917085881, [(1, 11), (2, 65)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 62, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18596721968986094] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18596721968986094, 0.15457158988993616] ***
*** finished computation of 7 references, err: [Inf, 0.18596721968986094, 0.15457158988993616] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [60, 53, 0]]
** centroid: 1, normalized-entropy: 0.9972301143765979, [(1, 60), (2, 53)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 5, 0]]
** centroid: 2, normalized-entropy: 0.462749058578174, [(1, 46), (2, 5)]
*** center 3: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 47, 18]]
** centroid: 4, normalized-entropy: 0.8512243352621381, [(2, 47), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [8, 76, 0]]
** centroid: 5, normalized-entropy: 0.45371633918694493, [(1, 8), (2, 76)]
*** center 6: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2052153328033164] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2052153328033164, 0.1516501194331795] ***
*** finished computation of 7 references, err: [Inf, 0.2052153328033164, 0.1516501194331795] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [46, 6, 0]]
** centroid: 1, normalized-entropy: 0.5159469300074472, [(1, 46), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [64, 26, 0]]
** centroid: 2, normalized-entropy: 0.8672816222000259, [(1, 64), (2, 26)]
*** center 3: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 55, 23]]
** centroid: 4, normalized-entropy: 0.8749315876677922, [(2, 55), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [51, 31, 0]]
** centroid: 5, normalized-entropy: 0.956652272148091, [(1, 51), (2, 31)]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 58, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20064917838200927] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20064917838200927, 0.15036908898130058] ***
*** finished computation of 7 references, err: [Inf, 0.20064917838200927, 0.15036908898130058] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [4, 57, 0]]
** centroid: 1, normalized-entropy: 0.34918437350730797, [(1, 4), (2, 57)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [60, 19, 0]]
** centroid: 2, normalized-entropy: 0.7958812735955936, [(1, 60), (2, 19)]
*** center 3: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 64, 27]]
** centroid: 4, normalized-entropy: 0.8772236230732716, [(2, 64), (3, 27)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [32, 33, 0]]
** centroid: 5, normalized-entropy: 0.9998292601233937, [(1, 32), (2, 33)]
*** center 6: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19602439725399018] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19602439725399018, 0.15039353900123387] ***
*** finished computation of 7 references, err: [Inf, 0.19602439725399018, 0.15039353900123387] ***
*** center 1: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [64, 1, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 46, 27]]
** centroid: 3, normalized-entropy: 0.9505668528932193, [(2, 46), (3, 27)]
*** center 4: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [25, 48, 0]]
** centroid: 5, normalized-entropy: 0.9271587399898307, [(1, 25), (2, 48)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [23, 41, 0]]
** centroid: 6, normalized-entropy: 0.9421631690835511, [(1, 23), (2, 41)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 46, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19151474179700018] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19151474179700018, 0.14882798532024025] ***
*** finished computation of 7 references, err: [Inf, 0.19151474179700018, 0.14882798532024025] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [94, 2, 0]]
** centroid: 1, normalized-entropy: 0.14609425012013613, [(1, 94), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [60, 17, 0]]
** centroid: 2, normalized-entropy: 0.7615877869576693, [(1, 60), (2, 17)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 41, 27]]
** centroid: 3, normalized-entropy: 0.9692040949598235, [(2, 41), (3, 27)]
*** center 4: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [30, 52, 0]]
** centroid: 5, normalized-entropy: 0.9474351361840305, [(1, 30), (2, 52)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 62, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18976064207591117] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18976064207591117, 0.15167601326853036] ***
*** finished computation of 7 references, err: [Inf, 0.18976064207591117, 0.15167601326853036] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [54, 38, 0]]
** centroid: 1, normalized-entropy: 0.978070970973496, [(1, 54), (2, 38)]
*** center 2: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 68, 25]]
** centroid: 4, normalized-entropy: 0.8397622740178036, [(2, 68), (3, 25)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [60, 31, 0]]
** centroid: 5, normalized-entropy: 0.9254482516437047, [(1, 60), (2, 31)]
*** center 6: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 48, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19173520492482932] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19173520492482932, 0.15196747625246643] ***
*** finished computation of 7 references, err: [Inf, 0.19173520492482932, 0.15196747625246643] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [65, 35, 0]]
** centroid: 1, normalized-entropy: 0.9340680553754911, [(1, 65), (2, 35)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [32, 23, 0]]
** centroid: 2, normalized-entropy: 0.980597440991727, [(1, 32), (2, 23)]
*** center 3: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 68, 21]]
** centroid: 4, normalized-entropy: 0.7882487221644084, [(2, 68), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [28, 57, 0]]
** centroid: 5, normalized-entropy: 0.9143242464317818, [(1, 28), (2, 57)]
*** center 6: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19730688184918835] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19730688184918835, 0.14802364733815193] ***
*** finished computation of 7 references, err: [Inf, 0.19730688184918835, 0.14802364733815193] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [36, 44, 0]]
** centroid: 1, normalized-entropy: 0.9927744539878083, [(1, 36), (2, 44)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [43, 4, 0]]
** centroid: 2, normalized-entropy: 0.4199210973757179, [(1, 43), (2, 4)]
*** center 3: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 50, 23]]
** centroid: 4, normalized-entropy: 0.8989377852081333, [(2, 50), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [66, 13, 0]]
** centroid: 5, normalized-entropy: 0.6451006442088483, [(1, 66), (2, 13)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 63, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1852588486149907] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1852588486149907, 0.1470481700100936] ***
*** finished computation of 7 references, err: [Inf, 0.1852588486149907, 0.1470481700100936] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [87, 15, 0]]
** centroid: 1, normalized-entropy: 0.6024308020404452, [(1, 87), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 6, 0]]
** centroid: 2, normalized-entropy: 0.43497348007474274, [(1, 61), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 33, 28]]
** centroid: 3, normalized-entropy: 0.995148095654003, [(2, 33), (3, 28)]
*** center 4: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [11, 63, 0]]
** centroid: 5, normalized-entropy: 0.6064481901491525, [(1, 11), (2, 63)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 57, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1909184549059719] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1909184549059719, 0.14912452430743725] ***
*** finished computation of 7 references, err: [Inf, 0.1909184549059719, 0.14912452430743725] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [10, 73, 0]]
** centroid: 1, normalized-entropy: 0.530744566923854, [(1, 10), (2, 73)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [38, 12, 0]]
** centroid: 2, normalized-entropy: 0.7950402793845225, [(1, 38), (2, 12)]
*** center 3: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 79, 21]]
** centroid: 4, normalized-entropy: 0.7414827399312738, [(2, 79), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 23, 0]]
** centroid: 5, normalized-entropy: 0.7985237652450764, [(1, 72), (2, 23)]
*** center 6: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [48, 2, 0]]
** centroid: 7, normalized-entropy: 0.24229218908241482, [(1, 48), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1934576764125377] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1934576764125377, 0.15349698266386985] ***
*** finished computation of 7 references, err: [Inf, 0.1934576764125377, 0.15349698266386985] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 73, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [43, 19, 0]]
** centroid: 3, normalized-entropy: 0.8890349038123858, [(1, 43), (2, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [64, 1, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 67, 26]]
** centroid: 5, normalized-entropy: 0.8548640967818041, [(2, 67), (3, 26)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [73, 20, 0]]
** centroid: 6, normalized-entropy: 0.7510324165275097, [(1, 73), (2, 20)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [45, 7, 0]]
** centroid: 7, normalized-entropy: 0.5699613760403499, [(1, 45), (2, 7)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19479666251316666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19479666251316666, 0.15003974497318268] ***
*** finished computation of 7 references, err: [Inf, 0.19479666251316666, 0.15003974497318268] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [4, 72, 0]]
** centroid: 1, normalized-entropy: 0.2974722489192896, [(1, 4), (2, 72)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [49, 18, 0]]
** centroid: 2, normalized-entropy: 0.8395304981054318, [(1, 49), (2, 18)]
*** center 3: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 68, 19]]
** centroid: 4, normalized-entropy: 0.7572182549240017, [(2, 68), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [33, 38, 0]]
** centroid: 5, normalized-entropy: 0.9964196342978481, [(1, 33), (2, 38)]
*** center 6: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1922891867607832] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1922891867607832, 0.15095017672050745] ***
*** finished computation of 7 references, err: [Inf, 0.1922891867607832, 0.15095017672050745] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [59, 43, 0]]
** centroid: 1, normalized-entropy: 0.9821770638877816, [(1, 59), (2, 43)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [35, 6, 0]]
** centroid: 2, normalized-entropy: 0.6006085754131871, [(1, 35), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 47, 18]]
** centroid: 3, normalized-entropy: 0.8512243352621381, [(2, 47), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [9, 72, 0]]
** centroid: 5, normalized-entropy: 0.5032583347756457, [(1, 9), (2, 72)]
*** center 6: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [51, 13, 0]]
** centroid: 7, normalized-entropy: 0.7281342378690551, [(1, 51), (2, 13)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1894372295923531] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1894372295923531, 0.15112887421250343] ***
*** finished computation of 7 references, err: [Inf, 0.1894372295923531, 0.15112887421250343] ***
*** center 1: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 41, 20]]
** centroid: 2, normalized-entropy: 0.9127341558073343, [(2, 41), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [51, 11, 0]]
** centroid: 3, normalized-entropy: 0.674398887071447, [(1, 51), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [56, 2, 0]]
** centroid: 4, normalized-entropy: 0.21639693245126485, [(1, 56), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [18, 67, 0]]
** centroid: 5, normalized-entropy: 0.7448423974714387, [(1, 18), (2, 67)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [8, 68, 0]]
** centroid: 6, normalized-entropy: 0.48546076074591343, [(1, 8), (2, 68)]
*** center 7: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.201445043255575] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.201445043255575, 0.1473402900842484] ***
*** finished computation of 7 references, err: [Inf, 0.201445043255575, 0.1473402900842484] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 49, 21]]
** centroid: 1, normalized-entropy: 0.8812908992306927, [(2, 49), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [61, 22, 0]]
** centroid: 4, normalized-entropy: 0.8342867421739538, [(1, 61), (2, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [55, 31, 0]]
** centroid: 5, normalized-entropy: 0.9430685934712909, [(1, 55), (2, 31)]
*** center 6: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 64, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18963698315620423] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18963698315620423, 0.15023704902082682] ***
*** finished computation of 7 references, err: [Inf, 0.18963698315620423, 0.15023704902082682] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 91, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [56, 28, 0]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(1, 56), (2, 28)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [39, 13, 0]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(1, 39), (2, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 2, 0]]
** centroid: 5, normalized-entropy: 0.1792560669283214, [(1, 72), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [78, 2, 0]]
** centroid: 6, normalized-entropy: 0.1686609314966701, [(1, 78), (2, 2)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 35, 22]]
** centroid: 7, normalized-entropy: 0.9621461334087003, [(2, 35), (3, 22)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18384552519954742] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18384552519954742, 0.15036952158762143] ***
*** finished computation of 7 references, err: [Inf, 0.18384552519954742, 0.15036952158762143] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 90, 19]]
** centroid: 1, normalized-entropy: 0.6674742199595056, [(2, 90), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [32, 16, 0]]
** centroid: 4, normalized-entropy: 0.9182958340544894, [(1, 32), (2, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [81, 10, 0]]
** centroid: 5, normalized-entropy: 0.49958440742366095, [(1, 81), (2, 10)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [84, 5, 0]]
** centroid: 6, normalized-entropy: 0.3120895659343452, [(1, 84), (2, 5)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 49, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18910568969510497] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18910568969510497, 0.1487971358364448] ***
*** finished computation of 7 references, err: [Inf, 0.18910568969510497, 0.1487971358364448] ***
*** center 1: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 37, 27]]
** centroid: 2, normalized-entropy: 0.9823166080205502, [(2, 37), (3, 27)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 18, 0]]
** centroid: 3, normalized-entropy: 0.8631205685666311, [(1, 45), (2, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [52, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [21, 68, 0]]
** centroid: 5, normalized-entropy: 0.7882487221644084, [(1, 21), (2, 68)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [9, 68, 0]]
** centroid: 6, normalized-entropy: 0.5203346157857599, [(1, 9), (2, 68)]
*** center 7: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18824705046974122] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18824705046974122, 0.15065555189643054] ***
*** finished computation of 7 references, err: [Inf, 0.18824705046974122, 0.15065555189643054] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [77, 41, 0]]
** centroid: 1, normalized-entropy: 0.9317769830665124, [(1, 77), (2, 41)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [37, 16, 0]]
** centroid: 2, normalized-entropy: 0.8835850861052531, [(1, 37), (2, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [43, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 65, 28]]
** centroid: 4, normalized-entropy: 0.8826013308449944, [(2, 65), (3, 28)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [21, 58, 0]]
** centroid: 5, normalized-entropy: 0.8354065254460503, [(1, 21), (2, 58)]
*** center 6: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18817621376551688] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18817621376551688, 0.1519176300750114] ***
*** finished computation of 7 references, err: [Inf, 0.18817621376551688, 0.1519176300750114] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [6, 85, 1]]
** centroid: 1, normalized-entropy: 0.35056382068186565, [(1, 6), (2, 85)]
*** center 2: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [40, 7, 0]]
** centroid: 3, normalized-entropy: 0.607171654871303, [(1, 40), (2, 7)]
*** center 4: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 70, 19]]
** centroid: 5, normalized-entropy: 0.748088105780153, [(2, 70), (3, 19)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [63, 13, 0]]
** centroid: 6, normalized-entropy: 0.6601070987550468, [(1, 63), (2, 13)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [56, 9, 0]]
** centroid: 7, normalized-entropy: 0.5801954953637372, [(1, 56), (2, 9)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19498456654511392] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19498456654511392, 0.1466871018987149] ***
*** finished computation of 7 references, err: [Inf, 0.19498456654511392, 0.1466871018987149] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [83, 3, 0]]
** centroid: 1, normalized-entropy: 0.21832103023746746, [(1, 83), (2, 3)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 31, 24]]
** centroid: 2, normalized-entropy: 0.9882836109919163, [(2, 31), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [59, 3, 0]]
** centroid: 3, normalized-entropy: 0.2795055456366802, [(1, 59), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [68, 6, 0]]
** centroid: 4, normalized-entropy: 0.40597703847557104, [(1, 68), (2, 6)]
*** center 5: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [7, 75, 0]]
** centroid: 6, normalized-entropy: 0.42080948947668984, [(1, 7), (2, 75)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 70, 0]]
** centroid: 7, normalized-entropy: 0.18312206830137262, [(1, 2), (2, 70)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1808230862673372] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1808230862673372, 0.1467375347930938] ***
*** finished computation of 7 references, err: [Inf, 0.1808230862673372, 0.1467375347930938] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [66, 32, 0]]
** centroid: 1, normalized-entropy: 0.9113423759758414, [(1, 66), (2, 32)]
*** center 2: selecting labels [1] (freq >= 2) [from [42, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 50, 21]]
** centroid: 4, normalized-entropy: 0.8760643678555242, [(2, 50), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [46, 35, 0]]
** centroid: 5, normalized-entropy: 0.9866554896538049, [(1, 46), (2, 35)]
*** center 6: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 50, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18948465525358915] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18948465525358915, 0.15160084613598884] ***
*** finished computation of 7 references, err: [Inf, 0.18948465525358915, 0.15160084613598884] ***
*** center 1: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 57, 26]]
** centroid: 2, normalized-entropy: 0.8968928834064589, [(2, 57), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [42, 14, 0]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(1, 42), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [24, 40, 0]]
** centroid: 4, normalized-entropy: 0.954434002924965, [(1, 24), (2, 40)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [18, 79, 0]]
** centroid: 5, normalized-entropy: 0.6921053253628727, [(1, 18), (2, 79)]
*** center 6: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [53, 1, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20340482246689498] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20340482246689498, 0.15053958500921727] ***
*** finished computation of 7 references, err: [Inf, 0.20340482246689498, 0.15053958500921727] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [62, 3, 0]]
** centroid: 1, normalized-entropy: 0.269828447703074, [(1, 62), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [58, 15, 0]]
** centroid: 2, normalized-entropy: 0.7327525499549903, [(1, 58), (2, 15)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 58, 18]]
** centroid: 3, normalized-entropy: 0.7897492536625221, [(2, 58), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [38, 55, 0]]
** centroid: 5, normalized-entropy: 0.9757606417025202, [(1, 38), (2, 55)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 54, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20296688744053246] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20296688744053246, 0.14795154268667102] ***
*** finished computation of 7 references, err: [Inf, 0.20296688744053246, 0.14795154268667102] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [48, 38, 0]]
** centroid: 1, normalized-entropy: 0.9902246902198684, [(1, 48), (2, 38)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [40, 16, 0]]
** centroid: 2, normalized-entropy: 0.8631205685666311, [(1, 40), (2, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 67, 23]]
** centroid: 4, normalized-entropy: 0.8199653102187632, [(2, 67), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [24, 59, 0]]
** centroid: 5, normalized-entropy: 0.8676293117125105, [(1, 24), (2, 59)]
*** center 6: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1967494912855327] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1967494912855327, 0.1540998209808022] ***
*** finished computation of 7 references, err: [Inf, 0.1967494912855327, 0.1540998209808022] ***
*** center 1: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [45, 16, 0]]
** centroid: 2, normalized-entropy: 0.8301899714180444, [(1, 45), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 43, 26]]
** centroid: 3, normalized-entropy: 0.9557589912150007, [(2, 43), (3, 26)]
*** center 4: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [55, 48, 0]]
** centroid: 5, normalized-entropy: 0.9966657283631041, [(1, 55), (2, 48)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [27, 75, 0]]
** centroid: 6, normalized-entropy: 0.8337649072106652, [(1, 27), (2, 75)]
*** center 7: selecting labels [1] (freq >= 2) [from [40, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18560757788084448] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18560757788084448, 0.14915090149641036] ***
*** finished computation of 7 references, err: [Inf, 0.18560757788084448, 0.14915090149641036] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [5, 85, 0]]
** centroid: 1, normalized-entropy: 0.3095434291503252, [(1, 5), (2, 85)]
*** center 2: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [55, 4, 0]]
** centroid: 3, normalized-entropy: 0.3576467062456333, [(1, 55), (2, 4)]
*** center 4: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [76, 4, 0]]
** centroid: 5, normalized-entropy: 0.2863969571159561, [(1, 76), (2, 4)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 70, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 19, 25]]
** centroid: 7, normalized-entropy: 0.9865446300055647, [(2, 19), (3, 25)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19461830895394086] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19461830895394086, 0.14716200744919478] ***
*** finished computation of 7 references, err: [Inf, 0.19461830895394086, 0.14716200744919478] ***
*** center 1: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 47, 25]]
** centroid: 2, normalized-entropy: 0.9315627684809641, [(2, 47), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [52, 13, 0]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(1, 52), (2, 13)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [59, 6, 0]]
** centroid: 4, normalized-entropy: 0.4441260450795996, [(1, 59), (2, 6)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [23, 67, 0]]
** centroid: 5, normalized-entropy: 0.8199653102187632, [(1, 23), (2, 67)]
*** center 6: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 55, 0]]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 362,3 => 46,1 => 592), Dict(2 => 380,3 => 27,1 => 593))
[ Info: ===== scores for single classifier: {"micro_f1":0.922,"precision":0.922,"recall":0.922,"macro_recall":0.9429218070471288,"macro_f1":0.8240638473352426,"accuracy":0.922,"class_f1":{"2":0.8965517241379309,"3":0.6136363636363636,"1":0.9620034542314334},"class_precision":{"2":0.9037433155080213,"3":0.4426229508196721,"1":0.9858407079646018},"class_recall":{"2":0.8894736842105263,"3":1.0,"1":0.93929173693086}}
[ Info: ===== scores for 1: {"micro_f1":0.973,"precision":0.973,"recall":0.973,"macro_recall":0.9816721398775184,"macro_f1":0.9748482628227096,"accuracy":0.973,"class_f1":{"2":0.9647979139504563,"3":0.9818181818181818,"1":0.9779286926994908},"class_precision":{"2":0.9560723514211886,"3":0.9642857142857143,"1":0.9846153846153847},"class_recall":{"2":0.9736842105263158,"3":1.0,"1":0.9713322091062394}}
[ Info: ===== scores for 5: {"micro_f1":0.971,"precision":0.971,"recall":0.971,"macro_recall":0.9796026744770865,"macro_f1":0.9522909530536531,"accuracy":0.971,"class_f1":{"2":0.961992136304063,"3":0.9152542372881356,"1":0.9796264855687606},"class_precision":{"2":0.95822454308094,"3":0.84375,"1":0.9863247863247864},"class_recall":{"2":0.9657894736842105,"3":1.0,"1":0.9730185497470489}}
[ Info: ===== scores for 7: {"micro_f1":0.971,"precision":0.971,"recall":0.971,"macro_recall":0.979917753912606,"macro_f1":0.9475056783942892,"accuracy":0.971,"class_f1":{"2":0.9620915032679739,"3":0.9,"1":0.9804255319148937},"class_precision":{"2":0.9558441558441558,"3":0.8181818181818182,"1":0.9896907216494846},"class_recall":{"2":0.968421052631579,"3":1.0,"1":0.9713322091062394}}
[ Info: ===== scores for 9: {"micro_f1":0.969,"precision":0.969,"recall":0.969,"macro_recall":0.9787935268187331,"macro_f1":0.9460899723719959,"accuracy":0.969,"class_f1":{"2":0.9595827900912646,"3":0.9,"1":0.9786871270247229},"class_precision":{"2":0.9509043927648578,"3":0.8181818181818182,"1":0.9896551724137931},"class_recall":{"2":0.968421052631579,"3":1.0,"1":0.9679595278246206}}
[ Info: ===== scores for 11: {"micro_f1":0.971,"precision":0.971,"recall":0.971,"macro_recall":0.9802328333481257,"macro_f1":0.9428883075340614,"accuracy":0.971,"class_f1":{"2":0.9621903520208605,"3":0.8852459016393442,"1":0.9812286689419796},"class_precision":{"2":0.9534883720930233,"3":0.7941176470588235,"1":0.9930915371329879},"class_recall":{"2":0.9710526315789474,"3":1.0,"1":0.96964586846543}}
(score = 0.97, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.973, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.973, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.971, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.971, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.969, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.969, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.972, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.972, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.971, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.971, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.976, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.976, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.971, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.971, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.976,"k":7,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.976,"precision":0.976,"recall":0.976,"macro_recall":0.9839886393893672,"macro_f1":0.9609162358769506,"accuracy":0.976,"class_f1":{"2":0.96875,"3":0.9310344827586207,"1":0.9829642248722317},"class_precision":{"2":0.9587628865979382,"3":0.8709677419354839,"1":0.9931153184165232},"class_recall":{"2":0.9789473684210527,"3":1.0,"1":0.9730185497470489}}
Test Summary: | Pass  Total
AKNC          |    8      8
[61, 11, 1, 2, 1, 5, 4, 1, 12, 2, 1, 6, 7, 1, 5, 36, 3, 3, 1, 10, 1, 2, 16, 6, 13, 3, 14, 18, 25, 8, 1, 13, 1, 31, 1, 33, 4, 9, 1, 14, 12, 1, 4, 21, 2, 3, 3, 1, 16, 51, 12, 3, 42, 18, 9, 8, 8, 12, 18, 4, 16, 4, 1, 2, 15, 2, 9, 35, 5, 150, 5, 7, 3, 37, 33, 37, 17, 5, 14, 33, 55, 7, 10, 4, 22, 5, 28, 31, 17, 22, 58, 6, 34, 9, 14, 8, 11, 15, 10, 15, 19, 35, 13, 39, 21, 13, 255, 10, 8, 26, 3, 5, 18, 48, 5, 1, 5, 10, 8, 3, 24, 52, 14, 61, 5, 658, 147, 6, 57, 191, 2, 43, 8, 10, 22, 6, 4, 4, 23, 17, 19, 7, 24, 13, 13, 41, 35, 4, 14, 10, 7, 3, 10, 8, 31, 38, 7, 16, 6, 307, 201, 3, 37, 72, 11, 19, 9, 6, 130, 6, 10, 6, 2, 3, 9, 20, 153, 53, 47, 4, 16, 6, 10, 10, 5, 17, 3, 39, 334, 11, 13, 58, 12, 35, 13, 5, 711, 4, 13, 13, 16, 20, 5, 33, 51, 5, 29, 6, 19, 17, 8, 78, 62, 22, 10, 11, 3, 60, 8, 36, 5, 5, 250, 71, 5, 31, 24, 10, 11, 42, 8, 52, 44, 16, 10, 34, 49, 64, 11, 51, 27, 219, 31, 2, 31, 8, 39, 8, 10, 15, 189, 113, 20, 45, 21, 19, 38, 2, 14, 10, 46, 35, 8, 171, 18, 13, 11, 11, 80, 43, 14, 49, 6, 4, 160, 45, 1, 19, 4, 19, 72, 95, 26, 5, 46, 10, 41, 20, 141, 7, 7, 4, 72, 50, 74, 5, 1, 12, 206, 109]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.636, speedup = 0.30232022286226923, eval_ratio = 0.07925800000000001)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.4251674107142861,"recall":0.41145833333333376,"f1":null,"seconds":0.0001909937709569931,"exhaustive_search_seconds":0.0003593284636735916,"evaluations":492.25,"distances_sum":1660.4770145072814}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5624999999999997,"recall":0.5624999999999997,"f1":null,"seconds":0.0002967286854982376,"exhaustive_search_seconds":0.0003593284636735916,"evaluations":631.265625,"distances_sum":1634.4635552713978}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6657986111111104,"recall":0.6657986111111104,"f1":0.6657986111111104,"seconds":0.0008432399481534958,"exhaustive_search_seconds":0.0003593284636735916,"evaluations":758.03125,"distances_sum":1586.695806368038}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7378472222222217,"recall":0.7378472222222217,"f1":0.7378472222222217,"seconds":0.00045802071690559387,"exhaustive_search_seconds":0.0003593284636735916,"evaluations":883.8125,"distances_sum":1554.9548987406736}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7968749999999993,"recall":0.7968749999999993,"f1":0.7968749999999993,"seconds":0.0005899891257286072,"exhaustive_search_seconds":0.0003593284636735916,"evaluations":985.875,"distances_sum":1533.8590983773263}
KCenters.DeloneInvIndex> reached performance {"precision":0.8359374999999994,"recall":0.8359374999999994,"f1":0.8359374999999994,"seconds":0.000666443258523941,"exhaustive_search_seconds":0.0003593284636735916,"evaluations":1099.96875,"distances_sum":1522.8755424169606}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8090000000000002, speedup = 0.5694551664028176, eval_ratio = 0.113793)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
