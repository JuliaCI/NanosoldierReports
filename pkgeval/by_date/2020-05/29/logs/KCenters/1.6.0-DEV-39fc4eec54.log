Julia Version 1.6.0-DEV.120
Commit 39fc4eec54 (2020-05-28 16:58 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed PooledArrays ──────────────── v0.5.3
  Installed Missings ──────────────────── v0.4.3
  Installed Compat ────────────────────── v3.10.0
  Installed KCenters ──────────────────── v0.2.2
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed StatsBase ─────────────────── v0.32.2
  Installed SimilaritySearch ──────────── v0.3.19
  Installed InvertedIndices ───────────── v1.0.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed DataAPI ───────────────────── v1.3.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed OrderedCollections ────────── v1.2.0
  Installed MLDataUtils ───────────────── v0.5.1
  Installed DataFrames ────────────────── v0.20.2
  Installed Reexport ──────────────────── v0.2.0
  Installed TableTraits ───────────────── v1.0.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed Tables ────────────────────── v1.0.4
  Installed CategoricalArrays ─────────── v0.7.7
  Installed Parsers ───────────────────── v1.0.4
  Installed JSON ──────────────────────── v0.21.0
  Installed MLDataPattern ─────────────── v0.5.3
  Installed DataStructures ────────────── v0.17.17
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.10.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.17
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.4
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_0pjokJ/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_0pjokJ/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.10.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.17
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.4
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9367083616058032
[ Info: 0.8321307849884033
[ Info: 0.5571489485601584
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3265590283026298
mean(cdnet.distances) = 0.4204433788607518
mean(crand.distances) = 0.3490247779091199
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1640625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1640625,"f1":null,"seconds":3.546476364135742e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":4.8671875,"distances_sum":559.0650380678092}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.1640625,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.1640625,"f1":null,"seconds":3.546476364135742e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":4.8671875,"distances_sum":559.0650380678092}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.1640625,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.1640625,"f1":null,"seconds":3.546476364135742e-6,"exhaustive_search_seconds":1.601874828338623e-6,"evaluations":4.8671875,"distances_sum":559.0650380678092}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.544921875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.544921875,"f1":null,"seconds":4.895031452178955e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.1875,"distances_sum":1328.5043433019678}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.544921875,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.544921875,"f1":null,"seconds":4.895031452178955e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.1875,"distances_sum":1328.5043433019678}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.8654080294705304,"seconds":6.275251507759094e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.25,"distances_sum":2134.7182426995087}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7734375,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7734375,"f1":0.8654080294705304,"seconds":6.275251507759094e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.25,"distances_sum":2134.7182426995087}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9468495046620052,"seconds":2.5391578674316406e-5,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.7421875,"distances_sum":2829.2759126736946}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9064274267399275,"seconds":7.206574082374573e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.640625,"distances_sum":2404.3634944037485}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.908203125,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9468495046620052,"seconds":2.5391578674316406e-5,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.7421875,"distances_sum":2829.2759126736946}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.908203125,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.908203125,"f1":0.9468495046620052,"seconds":2.5391578674316406e-5,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.7421875,"distances_sum":2829.2759126736946}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.744140625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.744140625,"f1":0.8391155719280728,"seconds":6.3497573137283325e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.0703125,"distances_sum":2000.0510910532544}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4326171875, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.4326171875,"f1":null,"seconds":4.7478824853897095e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":6.7578125,"distances_sum":1007.4607951447597}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.744140625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.744140625,"f1":0.8391155719280728,"seconds":6.3497573137283325e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.0703125,"distances_sum":2000.0510910532544}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.744140625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.744140625,"f1":0.8391155719280728,"seconds":6.3497573137283325e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.0703125,"distances_sum":2000.0510910532544}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.744140625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.744140625,"f1":0.8391155719280728,"seconds":6.3497573137283325e-6,"exhaustive_search_seconds":1.7117708921432495e-6,"evaluations":8.0703125,"distances_sum":2000.0510910532544}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.8678066724941734,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.65625,"distances_sum":2212.963999420629}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.546875, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.546875,"f1":0.691194222444223,"seconds":6.338581442832947e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":7.53125,"distances_sum":1378.412793200967}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.78125,"f1":0.8678066724941734,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.65625,"distances_sum":2212.963999420629}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9313160797535804,"seconds":6.329268217086792e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.875,"distances_sum":2689.289638299427}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9224478646353655,"seconds":7.189810276031494e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.8984375,"distances_sum":2602.5107928963216}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8798828125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8798828125,"f1":0.9313160797535804,"seconds":6.329268217086792e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.875,"distances_sum":2689.289638299427}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9604052197802202,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9765625,"distances_sum":2941.53270659969}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9699633699633704,"seconds":5.712732672691345e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.984375,"distances_sum":3005.2634008432965}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9354967948717957,"seconds":7.735565304756165e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9765625,"distances_sum":2666.1708983628755}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9713541666666669,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9609375,"distances_sum":3018.7009981697624}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9713541666666669,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9609375,"distances_sum":3018.7009981697624}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9713541666666669,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9609375,"distances_sum":3018.7009981697624}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.783203125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.783203125,"f1":0.8723823051948061,"seconds":6.036832928657532e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.3203125,"distances_sum":2144.1493437780387}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.572265625, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.572265625,"f1":0.709935897435898,"seconds":4.978850483894348e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":7.5078125,"distances_sum":1364.9779141981435}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.783203125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.783203125,"f1":0.8723823051948061,"seconds":6.036832928657532e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.3203125,"distances_sum":2144.1493437780387}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8173828125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8173828125,"f1":0.8926771145521156,"seconds":6.375834345817566e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.4765625,"distances_sum":2284.9247622729913}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9582818223443228,"seconds":6.768852472305298e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.8359375,"distances_sum":2784.8429711173594}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9370795870795877,"seconds":6.213784217834473e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.6875,"distances_sum":2621.2660674774647}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8486328125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8486328125,"f1":0.9108407217782223,"seconds":6.3069164752960205e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.59375,"distances_sum":2427.259428479787}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.814453125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.814453125,"f1":0.8907457126207133,"seconds":6.256625056266785e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.546875,"distances_sum":2251.0851245241815}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9582818223443228,"seconds":6.768852472305298e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.8359375,"distances_sum":2784.8429711173594}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9639938186813191,"seconds":6.515532732009888e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.8671875,"distances_sum":2851.6856352801733}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96875, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.96875,"f1":0.9828125000000002,"seconds":7.502734661102295e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.9765625,"distances_sum":2982.5927163517827}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9689560439560445,"seconds":6.120651960372925e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.9140625,"distances_sum":2881.370335219742}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.96875,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.96875,"f1":0.9828125000000002,"seconds":7.502734661102295e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.9765625,"distances_sum":2982.5927163517827}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.96875,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.96875,"f1":0.9828125000000002,"seconds":7.502734661102295e-6,"exhaustive_search_seconds":1.695007085800171e-6,"evaluations":8.9765625,"distances_sum":2982.5927163517827}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.669921875, conf: {"ssize":1,"bsize":4}, perf: {"precision":0.985063244047619,"recall":0.669921875,"f1":0.7874055631868138,"seconds":5.949288606643677e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":7.90625,"distances_sum":1223.6879833661067}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.669921875,"state":{"ssize":1,"bsize":4},"perf":{"precision":0.985063244047619,"recall":0.669921875,"f1":0.7874055631868138,"seconds":5.949288606643677e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":7.90625,"distances_sum":1223.6879833661067}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":1,"bsize":6}, perf: {"precision":0.98671875,"recall":0.8515625,"f1":0.9096382783882788,"seconds":6.7409127950668335e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":8.5234375,"distances_sum":1646.5382499280493}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8515625,"state":{"ssize":1,"bsize":6},"perf":{"precision":0.98671875,"recall":0.8515625,"f1":0.9096382783882788,"seconds":6.7409127950668335e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":8.5234375,"distances_sum":1646.5382499280493}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":4,"bsize":7}, perf: {"precision":0.983491443452381,"recall":0.900390625,"f1":0.9356551651473528,"seconds":7.005408406257629e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":8.6328125,"distances_sum":1795.5561869907092}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.900390625,"state":{"ssize":4,"bsize":7},"perf":{"precision":0.983491443452381,"recall":0.900390625,"f1":0.9356551651473528,"seconds":7.005408406257629e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":8.6328125,"distances_sum":1795.5561869907092}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.900390625,"state":{"ssize":4,"bsize":7},"perf":{"precision":0.983491443452381,"recall":0.900390625,"f1":0.9356551651473528,"seconds":7.005408406257629e-6,"exhaustive_search_seconds":1.9688159227371216e-6,"evaluations":8.6328125,"distances_sum":1795.5561869907092}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5517578125, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5517578125,"f1":0.6980529886779893,"seconds":5.673617124557495e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":6.8046875,"distances_sum":1107.6059051203536}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5205078125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5205078125,"f1":null,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":6.6484375,"distances_sum":1024.358734779302}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.787109375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.787109375,"f1":0.8726684773559782,"seconds":5.470588803291321e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.1171875,"distances_sum":1645.3340197725618}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.787109375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.787109375,"f1":0.8726684773559782,"seconds":5.470588803291321e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.1171875,"distances_sum":1645.3340197725618}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.9058842199467207,"seconds":4.241243004798889e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.25,"distances_sum":1821.6871086023978}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9422504578754586,"seconds":4.714354872703552e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.546875,"distances_sum":2015.1013489545364}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8984375,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8984375,"f1":0.9422504578754586,"seconds":4.714354872703552e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.546875,"distances_sum":2015.1013489545364}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9468635531135535,"seconds":4.764646291732788e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7421875,"distances_sum":2046.254243529423}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9645489926739931,"seconds":4.723668098449707e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8203125,"distances_sum":2146.3169135916146}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9645489926739931,"seconds":4.723668098449707e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8203125,"distances_sum":2146.3169135916146}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9645489926739931,"seconds":4.723668098449707e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8203125,"distances_sum":2146.3169135916146}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.8125,"f1":0.8887908966033973,"seconds":4.347413778305054e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.2421875,"distances_sum":1670.150604323931}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2138671875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2138671875,"f1":null,"seconds":2.7585774660110474e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":6.375,"distances_sum":430.6380975290641}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5615234375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5615234375,"f1":0.6998681873681879,"seconds":3.4049153327941895e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":7.3828125,"distances_sum":1034.3241545397561}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.8125,"f1":0.8887908966033973,"seconds":4.347413778305054e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.2421875,"distances_sum":1670.150604323931}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9395947802197807,"seconds":6.677582859992981e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.578125,"distances_sum":1904.3060054787848}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9421989468864473,"seconds":6.770715117454529e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.5703125,"distances_sum":1913.8353716382376}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8984375,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8984375,"f1":0.9421989468864473,"seconds":6.770715117454529e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.5703125,"distances_sum":1913.8353716382376}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9574061355311361,"seconds":7.094815373420715e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.734375,"distances_sum":2065.574668111734}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9730483058608064,"seconds":7.2605907917022705e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.8828125,"distances_sum":2108.9349797203427}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9447833416583423,"seconds":7.76723027229309e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.765625,"distances_sum":1940.9529193580322}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9730483058608064,"seconds":7.2605907917022705e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.8828125,"distances_sum":2108.9349797203427}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9730483058608064,"seconds":7.2605907917022705e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.8828125,"distances_sum":2108.9349797203427}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6982421875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6982421875,"f1":0.8108145326895334,"seconds":5.034729838371277e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.96875,"distances_sum":1367.5151273450151}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3994140625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3994140625,"f1":null,"seconds":7.0016831159591675e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.4140625,"distances_sum":693.3066483980767}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6982421875,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6982421875,"f1":0.8108145326895334,"seconds":5.034729838371277e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.96875,"distances_sum":1367.5151273450151}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9323062354312361,"seconds":6.2193721532821655e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.5,"distances_sum":1902.912291120973}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.884765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.884765625,"f1":0.9338999542124549,"seconds":6.0927122831344604e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.4921875,"distances_sum":1900.0979009423288}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8466928904428913,"seconds":5.416572093963623e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.84375,"distances_sum":1481.521402704982}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.884765625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.884765625,"f1":0.9338999542124549,"seconds":6.0927122831344604e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.4921875,"distances_sum":1900.0979009423288}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.970798992673993,"seconds":5.945563316345215e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.890625,"distances_sum":2166.012004716119}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9746680402930407,"seconds":5.848705768585205e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.90625,"distances_sum":2187.480626518248}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9746680402930407,"seconds":5.848705768585205e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.90625,"distances_sum":2187.480626518248}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9746680402930407,"seconds":5.848705768585205e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.90625,"distances_sum":2187.480626518248}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8680892024642034,"seconds":4.872679710388184e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.125,"distances_sum":1629.2179688003848}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.236328125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.236328125,"f1":null,"seconds":3.2745301723480225e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":5.65625,"distances_sum":581.7122278269266}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.77734375,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.77734375,"f1":0.8680892024642034,"seconds":4.872679710388184e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.125,"distances_sum":1629.2179688003848}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9418269230769238,"seconds":5.261972546577454e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.6875,"distances_sum":2047.4245053478446}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9163461538461548,"seconds":5.228444933891296e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.4921875,"distances_sum":1864.6104683802728}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8974609375,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.8974609375,"f1":0.9418269230769238,"seconds":5.261972546577454e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.6875,"distances_sum":2047.4245053478446}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.973031135531136,"seconds":5.610287189483643e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.8984375,"distances_sum":2247.2259973576984}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9580216658341664,"seconds":5.8282166719436646e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.78125,"distances_sum":2168.0084403281376}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9652930402930407,"seconds":5.653128027915955e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.8515625,"distances_sum":2190.7451650524645}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.973031135531136,"seconds":5.610287189483643e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.8984375,"distances_sum":2247.2259973576984}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.973031135531136,"seconds":5.610287189483643e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.8984375,"distances_sum":2247.2259973576984}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.71484375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.71484375,"f1":0.8213879870129878,"seconds":4.757195711135864e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":7.875,"distances_sum":1508.3500338394988}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.16796875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.16796875,"f1":null,"seconds":2.7846544981002808e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":4.671875,"distances_sum":340.10499167774606}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.71484375,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.71484375,"f1":0.8213879870129878,"seconds":4.757195711135864e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":7.875,"distances_sum":1508.3500338394988}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8666958041958052,"seconds":4.945322871208191e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":7.9921875,"distances_sum":1667.7914530701266}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.8714748792873801,"seconds":5.125999450683594e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.015625,"distances_sum":1691.9671799786363}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7841796875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7841796875,"f1":0.8714748792873801,"seconds":5.125999450683594e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.015625,"distances_sum":1691.9671799786363}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9569425366300368,"seconds":5.5730342864990234e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.7890625,"distances_sum":2170.696035289451}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9115675990675999,"seconds":5.183741450309753e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.34375,"distances_sum":1834.5215003011833}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8515625,"f1":0.9104973151848159,"seconds":4.988163709640503e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.421875,"distances_sum":1903.229758510322}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.923828125,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9569425366300368,"seconds":5.5730342864990234e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.7890625,"distances_sum":2170.696035289451}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.923828125,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.923828125,"f1":0.9569425366300368,"seconds":5.5730342864990234e-6,"exhaustive_search_seconds":1.2516975402832031e-6,"evaluations":8.7890625,"distances_sum":2170.696035289451}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.666015625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.666015625,"f1":0.7882705835830843,"seconds":5.194917321205139e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":7.984375,"distances_sum":1460.7189850705395}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2197265625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2197265625,"f1":null,"seconds":3.5446137189865112e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":5.9140625,"distances_sum":464.52485449666756}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.51953125, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.51953125,"f1":0.6663931554556559,"seconds":4.595145583152771e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":7.2578125,"distances_sum":1112.164219271221}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.666015625,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.666015625,"f1":0.7882705835830843,"seconds":5.194917321205139e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":7.984375,"distances_sum":1460.7189850705395}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9503064643689648,"seconds":6.5267086029052734e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.859375,"distances_sum":2216.159341309357}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.951991758241759,"seconds":6.411224603652954e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.8984375,"distances_sum":2203.958141234456}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.928918477355978,"seconds":6.942078471183777e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.78125,"distances_sum":2052.537944858659}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.787109375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.787109375,"f1":0.8747773060273067,"seconds":5.7034194469451904e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.6640625,"distances_sum":1791.187781582756}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.951991758241759,"seconds":6.411224603652954e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.8984375,"distances_sum":2203.958141234456}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9621711621711627,"seconds":6.6552311182022095e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.90625,"distances_sum":2294.9476005289953}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":10,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9626888736263743,"seconds":6.51925802230835e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.9453125,"distances_sum":2277.3508473523148}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9741643772893775,"seconds":6.647780537605286e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.96875,"distances_sum":2356.344052925634}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9747424450549453,"seconds":6.703659892082214e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.9765625,"distances_sum":2340.9637495855145}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9738667582417587,"seconds":6.489455699920654e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.9609375,"distances_sum":2361.7590637015537}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9646806318681324,"seconds":6.2212347984313965e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.9375,"distances_sum":2299.6916929648346}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9541015625,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9747424450549453,"seconds":6.703659892082214e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.9765625,"distances_sum":2340.9637495855145}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9541015625,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9541015625,"f1":0.9747424450549453,"seconds":6.703659892082214e-6,"exhaustive_search_seconds":1.6167759895324707e-6,"evaluations":8.9765625,"distances_sum":2340.9637495855145}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.21484375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.21484375,"f1":null,"seconds":3.0230730772018433e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":5.6328125,"distances_sum":399.91046044009494}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6630859375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6630859375,"f1":0.7841972263847273,"seconds":3.5837292671203613e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":7.9765625,"distances_sum":1370.9215687770948}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6630859375,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6630859375,"f1":0.7841972263847273,"seconds":3.5837292671203613e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":7.9765625,"distances_sum":1370.9215687770948}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8590862262737271,"seconds":3.8333237171173096e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.671875,"distances_sum":1595.6075223500907}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7626953125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7626953125,"f1":0.8590862262737271,"seconds":3.8333237171173096e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.671875,"distances_sum":1595.6075223500907}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9627861721611727,"seconds":4.7460198402404785e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.921875,"distances_sum":2180.431835164467}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9237668581418588,"seconds":6.0927122831344604e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.7265625,"distances_sum":1951.2490021089886}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9627861721611727,"seconds":4.7460198402404785e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.921875,"distances_sum":2180.431835164467}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.93359375,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9627861721611727,"seconds":4.7460198402404785e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.921875,"distances_sum":2180.431835164467}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3994140625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3994140625,"f1":null,"seconds":3.907829523086548e-6,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":5.953125,"distances_sum":789.7840375032429}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3994140625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3994140625,"f1":null,"seconds":3.907829523086548e-6,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":5.953125,"distances_sum":789.7840375032429}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8453237734487742,"seconds":4.870817065238953e-6,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":8.40625,"distances_sum":1542.1970609707498}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8564453125,"f1":0.9161317848817855,"seconds":5.155801773071289e-6,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":8.5859375,"distances_sum":1874.8107905744994}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.669921875, conf: {"ssize":7,"bsize":4}, perf: {"precision":1.0,"recall":0.669921875,"f1":0.7879266566766574,"seconds":9.020790457725525e-6,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":7.828125,"distances_sum":1349.490311306389}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8564453125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8564453125,"f1":0.9161317848817855,"seconds":5.155801773071289e-6,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":8.5859375,"distances_sum":1874.8107905744994}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9607371794871801,"seconds":1.0972842574119568e-5,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":8.9296875,"distances_sum":2156.017537794977}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9560668498168502,"seconds":1.0790303349494934e-5,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":8.84375,"distances_sum":2139.78919544234}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9559581043956049,"seconds":8.56444239616394e-6,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":8.8671875,"distances_sum":2116.0551208190295}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9249198717948725,"seconds":6.34416937828064e-6,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":8.8359375,"distances_sum":1902.9373416910767}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8876953125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8876953125,"f1":0.9345581501831507,"seconds":6.3944607973098755e-6,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":8.7578125,"distances_sum":2023.6743916921307}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9607371794871801,"seconds":1.0972842574119568e-5,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":8.9296875,"distances_sum":2156.017537794977}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9306640625,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9607371794871801,"seconds":1.0972842574119568e-5,"exhaustive_search_seconds":1.521781086921692e-6,"evaluations":8.9296875,"distances_sum":2156.017537794977}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.173828125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.173828125,"f1":null,"seconds":3.3639371395111084e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":4.46875,"distances_sum":397.3399726871599}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.173828125,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.173828125,"f1":null,"seconds":3.3639371395111084e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":4.46875,"distances_sum":397.3399726871599}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.173828125,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.173828125,"f1":null,"seconds":3.3639371395111084e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":4.46875,"distances_sum":397.3399726871599}}, n: 9
mean(cfft.distances) = 0.3258523705934863
mean(cdnet.distances) = 0.3903357011947418
mean(crand.distances) = 0.672768388127795
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8733333333333334
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8933333333333332
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.88
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.94
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.9022222222222221
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8866666666666667
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9400000000000001
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8711111111111111
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8733333333333334
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9088888888888889
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.86
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8844444444444445
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9066666666666666
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9222222222222222
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9333333333333332
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8777777777777778
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9199999999999999
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8799999999999999
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9133333333333334
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9155555555555556
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9311111111111111
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8866666666666667
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8999999999999999
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8977777777777778
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8955555555555555
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9022222222222221
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9066666666666666
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9111111111111111
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 8, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 11, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 3, 1, 3, 2, 1, 3, 2, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 8, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 11, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 3, 1, 3, 2, 1, 3, 2, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 8, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 11, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 3, 1, 3, 2, 1, 3, 2, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 8, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 11, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 3, 1, 3, 2, 1, 3, 2, 3, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 8, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 11, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 3, 1, 3, 2, 1, 3, 2, 3, 1]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 8, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 11, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 3, 1, 3, 2, 1, 3, 2, 3, 1]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 20, 1]]
** centroid: 8, normalized-entropy: 0.2761954276479391, [(2, 20), (3, 1)]
*** center 9: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 11, normalized-entropy: 0.6500224216483541, [(2, 3), (3, 15)]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 3, 1, 3, 2, 1, 3, 2, 3, 1]
acc = 0.96
*** finished computation of 12 references, err: [Inf, 0.5388816325863203] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 4, 12]]
** centroid: 5, normalized-entropy: 0.8112781244591328, [(2, 4), (3, 12)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 19, 1]]
** centroid: 7, normalized-entropy: 0.2863969571159561, [(2, 19), (3, 1)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 10: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 11: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 12, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
finished with 14 centroids; started with 12
acc = 0.96
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.27894901046837056] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27894901046837056, 0.22891640524392495] ***
*** starting iteration: 2; err: [Inf, 0.27894901046837056, 0.22891640524392495] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27894901046837056, 0.22891640524392495, 0.22735825404189192] ***
*** starting iteration: 3; err: [Inf, 0.27894901046837056, 0.22891640524392495, 0.22735825404189192] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27894901046837056, 0.22891640524392495, 0.22735825404189192, 0.22690477305128276] ***
*** finished computation of 3 references, err: [Inf, 0.27894901046837056, 0.22891640524392495, 0.22735825404189192, 0.22690477305128276] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [206, 31, 0]]
** centroid: 1, normalized-entropy: 0.5596327247559125, [(1, 206), (2, 31)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [195, 26, 0]]
** centroid: 2, normalized-entropy: 0.5225593745369407, [(1, 195), (2, 26)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 182, 26]]
** centroid: 3, normalized-entropy: 0.5435644431995963, [(2, 182), (3, 26)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4009786836741523] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4009786836741523, 0.24099336515531233] ***
*** starting iteration: 2; err: [Inf, 0.4009786836741523, 0.24099336515531233] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4009786836741523, 0.24099336515531233, 0.2313493152625155] ***
*** starting iteration: 3; err: [Inf, 0.4009786836741523, 0.24099336515531233, 0.2313493152625155] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4009786836741523, 0.24099336515531233, 0.2313493152625155, 0.22962840991387928] ***
*** starting iteration: 4; err: [Inf, 0.4009786836741523, 0.24099336515531233, 0.2313493152625155, 0.22962840991387928] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4009786836741523, 0.24099336515531233, 0.2313493152625155, 0.22962840991387928, 0.22955795240796534] ***
*** finished computation of 3 references, err: [Inf, 0.4009786836741523, 0.24099336515531233, 0.2313493152625155, 0.22962840991387928, 0.22955795240796534] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [172, 46, 0]]
** centroid: 1, normalized-entropy: 0.7434073165779199, [(1, 172), (2, 46)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [226, 29, 0]]
** centroid: 2, normalized-entropy: 0.5110518903312815, [(1, 226), (2, 29)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 166, 28]]
** centroid: 3, normalized-entropy: 0.5954670513561874, [(2, 166), (3, 28)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.31913926092994355] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31913926092994355, 0.25738075121432946] ***
*** starting iteration: 2; err: [Inf, 0.31913926092994355, 0.25738075121432946] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31913926092994355, 0.25738075121432946, 0.23568280819647092] ***
*** starting iteration: 3; err: [Inf, 0.31913926092994355, 0.25738075121432946, 0.23568280819647092] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31913926092994355, 0.25738075121432946, 0.23568280819647092, 0.23125123603875447] ***
*** starting iteration: 4; err: [Inf, 0.31913926092994355, 0.25738075121432946, 0.23568280819647092, 0.23125123603875447] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31913926092994355, 0.25738075121432946, 0.23568280819647092, 0.23125123603875447, 0.23022005973297213] ***
*** starting iteration: 5; err: [Inf, 0.31913926092994355, 0.25738075121432946, 0.23568280819647092, 0.23125123603875447, 0.23022005973297213] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31913926092994355, 0.25738075121432946, 0.23568280819647092, 0.23125123603875447, 0.23022005973297213, 0.23011258772729354] ***
*** finished computation of 3 references, err: [Inf, 0.31913926092994355, 0.25738075121432946, 0.23568280819647092, 0.23125123603875447, 0.23022005973297213, 0.23011258772729354] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [130, 68, 0]]
** centroid: 1, normalized-entropy: 0.9280672822072753, [(1, 130), (2, 68)]
*** center 2: selecting labels [1] (freq >= 2) [from [261, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [10, 180, 18]]
** centroid: 3, normalized-entropy: 0.4394667581714509, [(1, 10), (2, 180), (3, 18)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.19891648411166268] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19891648411166268, 0.16908788237673184] ***
*** starting iteration: 2; err: [Inf, 0.19891648411166268, 0.16908788237673184] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19891648411166268, 0.16908788237673184, 0.16003618533506306] ***
*** starting iteration: 3; err: [Inf, 0.19891648411166268, 0.16908788237673184, 0.16003618533506306] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19891648411166268, 0.16908788237673184, 0.16003618533506306, 0.15575358709711973] ***
*** finished computation of 7 references, err: [Inf, 0.19891648411166268, 0.16908788237673184, 0.16003618533506306, 0.15575358709711973] ***
*** center 1: selecting labels [1] (freq >= 1) [from [131, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 40, 12]]
** centroid: 2, normalized-entropy: 0.7793498372920851, [(2, 40), (3, 12)]
*** center 3: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [18, 98, 0]]
** centroid: 4, normalized-entropy: 0.6226343162547099, [(1, 18), (2, 98)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [87, 8, 0]]
** centroid: 5, normalized-entropy: 0.4168441963431652, [(1, 87), (2, 8)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [66, 50, 0]]
** centroid: 6, normalized-entropy: 0.9862325350724501, [(1, 66), (2, 50)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 43, 14]]
** centroid: 7, normalized-entropy: 0.8042522359016421, [(2, 43), (3, 14)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24608461263190223] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24608461263190223, 0.18327685132499846] ***
*** starting iteration: 2; err: [Inf, 0.24608461263190223, 0.18327685132499846] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24608461263190223, 0.18327685132499846, 0.16742584794324109] ***
*** starting iteration: 3; err: [Inf, 0.24608461263190223, 0.18327685132499846, 0.16742584794324109] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24608461263190223, 0.18327685132499846, 0.16742584794324109, 0.16298978156905838] ***
*** finished computation of 7 references, err: [Inf, 0.24608461263190223, 0.18327685132499846, 0.16742584794324109, 0.16298978156905838] ***
*** center 1: selecting labels [1] (freq >= 1) [from [161, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [37, 47, 0]]
** centroid: 2, normalized-entropy: 0.9897525351939971, [(1, 37), (2, 47)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 43, 3]]
** centroid: 3, normalized-entropy: 0.3478169135710632, [(2, 43), (3, 3)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [91, 36, 0]]
** centroid: 4, normalized-entropy: 0.8601286843311847, [(1, 91), (2, 36)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [109, 29, 0]]
** centroid: 5, normalized-entropy: 0.741759672289875, [(1, 109), (2, 29)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 68, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 18, 25]]
** centroid: 7, normalized-entropy: 0.9807983646944296, [(2, 18), (3, 25)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25158009323678254] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25158009323678254, 0.1580394393704396] ***
*** starting iteration: 2; err: [Inf, 0.25158009323678254, 0.1580394393704396] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25158009323678254, 0.1580394393704396, 0.15129294436626733] ***
*** starting iteration: 3; err: [Inf, 0.25158009323678254, 0.1580394393704396, 0.15129294436626733] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25158009323678254, 0.1580394393704396, 0.15129294436626733, 0.14844044019060412] ***
*** finished computation of 7 references, err: [Inf, 0.25158009323678254, 0.1580394393704396, 0.15129294436626733, 0.14844044019060412] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [1, 97, 0]]
** centroid: 1, normalized-entropy: 0.08214305133815322, [(1, 1), (2, 97)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [78, 7, 0]]
** centroid: 2, normalized-entropy: 0.4104161417181887, [(1, 78), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 92, 18]]
** centroid: 3, normalized-entropy: 0.6429383500409613, [(2, 92), (3, 18)]
*** center 4: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [84, 17, 0]]
** centroid: 5, normalized-entropy: 0.653839880626333, [(1, 84), (2, 17)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [72, 35, 0]]
** centroid: 6, normalized-entropy: 0.9119388957757234, [(1, 72), (2, 35)]
*** center 7: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.35008177253511225] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35008177253511225, 0.2312716215547325] ***
*** finished computation of 3 references, err: [Inf, 0.35008177253511225, 0.2312716215547325] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [248, 32, 0]]
** centroid: 1, normalized-entropy: 0.5127091420308771, [(1, 248), (2, 32)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [150, 46, 0]]
** centroid: 2, normalized-entropy: 0.7861044688447759, [(1, 150), (2, 46)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 163, 28]]
** centroid: 3, normalized-entropy: 0.6012580062698922, [(2, 163), (3, 28)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3486957950175445] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3486957950175445, 0.2367202816607858] ***
*** finished computation of 3 references, err: [Inf, 0.3486957950175445, 0.2367202816607858] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [92, 181, 18]]
** centroid: 1, normalized-entropy: 0.7568994736906566, [(1, 92), (2, 181), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [210, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [99, 67, 0]]
** centroid: 3, normalized-entropy: 0.9730256894881769, [(1, 99), (2, 67)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24012160088654394] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24012160088654394, 0.2166151514265675] ***
*** starting iteration: 2; err: [Inf, 0.24012160088654394, 0.2166151514265675] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24012160088654394, 0.2166151514265675, 0.20778419548231694] ***
*** starting iteration: 3; err: [Inf, 0.24012160088654394, 0.2166151514265675, 0.20778419548231694] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24012160088654394, 0.2166151514265675, 0.20778419548231694, 0.2033838597461917] ***
*** starting iteration: 4; err: [Inf, 0.24012160088654394, 0.2166151514265675, 0.20778419548231694, 0.2033838597461917] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24012160088654394, 0.2166151514265675, 0.20778419548231694, 0.2033838597461917, 0.2004728562746745] ***
*** starting iteration: 5; err: [Inf, 0.24012160088654394, 0.2166151514265675, 0.20778419548231694, 0.2033838597461917, 0.2004728562746745] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24012160088654394, 0.2166151514265675, 0.20778419548231694, 0.2033838597461917, 0.2004728562746745, 0.19477316272073053] ***
*** starting iteration: 6; err: [Inf, 0.24012160088654394, 0.2166151514265675, 0.20778419548231694, 0.2033838597461917, 0.2004728562746745, 0.19477316272073053] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24012160088654394, 0.2166151514265675, 0.20778419548231694, 0.2033838597461917, 0.2004728562746745, 0.19477316272073053, 0.19376625398428435] ***
*** starting iteration: 7; err: [Inf, 0.24012160088654394, 0.2166151514265675, 0.20778419548231694, 0.2033838597461917, 0.2004728562746745, 0.19477316272073053, 0.19376625398428435] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24012160088654394, 0.2166151514265675, 0.20778419548231694, 0.2033838597461917, 0.2004728562746745, 0.19477316272073053, 0.19376625398428435, 0.19332384727140134] ***
*** finished computation of 7 references, err: [Inf, 0.24012160088654394, 0.2166151514265675, 0.20778419548231694, 0.2033838597461917, 0.2004728562746745, 0.19477316272073053, 0.19376625398428435, 0.19332384727140134] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 76, 26]]
** centroid: 1, normalized-entropy: 0.8189555018403103, [(2, 76), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [27, 59, 0]]
** centroid: 2, normalized-entropy: 0.8976844934141643, [(1, 27), (2, 59)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [61, 26, 0]]
** centroid: 3, normalized-entropy: 0.8798813089176428, [(1, 61), (2, 26)]
*** center 4: selecting labels [1] (freq >= 1) [from [121, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [67, 1, 0]]
** centroid: 5, normalized-entropy: 0.11058084476988722, [(1, 67), (2, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [117, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [8, 77, 0]]
** centroid: 7, normalized-entropy: 0.4500666580964382, [(1, 8), (2, 77)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3079537752557775] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3079537752557775, 0.2291763571965071] ***
*** starting iteration: 2; err: [Inf, 0.3079537752557775, 0.2291763571965071] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3079537752557775, 0.2291763571965071, 0.21262572978021413] ***
*** starting iteration: 3; err: [Inf, 0.3079537752557775, 0.2291763571965071, 0.21262572978021413] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3079537752557775, 0.2291763571965071, 0.21262572978021413, 0.20385897978777248] ***
*** starting iteration: 4; err: [Inf, 0.3079537752557775, 0.2291763571965071, 0.21262572978021413, 0.20385897978777248] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3079537752557775, 0.2291763571965071, 0.21262572978021413, 0.20385897978777248, 0.19681687898601571] ***
*** starting iteration: 5; err: [Inf, 0.3079537752557775, 0.2291763571965071, 0.21262572978021413, 0.20385897978777248, 0.19681687898601571] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3079537752557775, 0.2291763571965071, 0.21262572978021413, 0.20385897978777248, 0.19681687898601571, 0.19364788055956095] ***
*** starting iteration: 6; err: [Inf, 0.3079537752557775, 0.2291763571965071, 0.21262572978021413, 0.20385897978777248, 0.19681687898601571, 0.19364788055956095] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3079537752557775, 0.2291763571965071, 0.21262572978021413, 0.20385897978777248, 0.19681687898601571, 0.19364788055956095, 0.19231467541569713] ***
*** starting iteration: 7; err: [Inf, 0.3079537752557775, 0.2291763571965071, 0.21262572978021413, 0.20385897978777248, 0.19681687898601571, 0.19364788055956095, 0.19231467541569713] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3079537752557775, 0.2291763571965071, 0.21262572978021413, 0.20385897978777248, 0.19681687898601571, 0.19364788055956095, 0.19231467541569713, 0.19109320517411565] ***
*** starting iteration: 8; err: [Inf, 0.3079537752557775, 0.2291763571965071, 0.21262572978021413, 0.20385897978777248, 0.19681687898601571, 0.19364788055956095, 0.19231467541569713, 0.19109320517411565] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3079537752557775, 0.2291763571965071, 0.21262572978021413, 0.20385897978777248, 0.19681687898601571, 0.19364788055956095, 0.19231467541569713, 0.19109320517411565, 0.19014655775146216] ***
*** finished computation of 7 references, err: [Inf, 0.3079537752557775, 0.2291763571965071, 0.21262572978021413, 0.20385897978777248, 0.19681687898601571, 0.19364788055956095, 0.19231467541569713, 0.19109320517411565, 0.19014655775146216] ***
*** center 1: selecting labels [1] (freq >= 1) [from [122, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [30, 69, 0]]
** centroid: 2, normalized-entropy: 0.8849636363831529, [(1, 30), (2, 69)]
*** center 3: selecting labels [1] (freq >= 1) [from [105, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [66, 23, 0]]
** centroid: 4, normalized-entropy: 0.8243633538094403, [(1, 66), (2, 23)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 54, 28]]
** centroid: 5, normalized-entropy: 0.9262122127346664, [(2, 54), (3, 28)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 77, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [75, 18, 0]]
** centroid: 7, normalized-entropy: 0.708835673332196, [(1, 75), (2, 18)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21894764767211305] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21894764767211305, 0.19980364886979604] ***
*** starting iteration: 2; err: [Inf, 0.21894764767211305, 0.19980364886979604] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21894764767211305, 0.19980364886979604, 0.1973964394275462] ***
*** starting iteration: 3; err: [Inf, 0.21894764767211305, 0.19980364886979604, 0.1973964394275462] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21894764767211305, 0.19980364886979604, 0.1973964394275462, 0.19642365530462771] ***
*** finished computation of 7 references, err: [Inf, 0.21894764767211305, 0.19980364886979604, 0.1973964394275462, 0.19642365530462771] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [32, 79, 0]]
** centroid: 1, normalized-entropy: 0.8664998383682039, [(1, 32), (2, 79)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [86, 54, 0]]
** centroid: 2, normalized-entropy: 0.9619780596506257, [(1, 86), (2, 54)]
*** center 3: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 99, 18]]
** centroid: 5, normalized-entropy: 0.6193821946787638, [(2, 99), (3, 18)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [52, 16, 0]]
** centroid: 6, normalized-entropy: 0.787126586201269, [(1, 52), (2, 16)]
*** center 7: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.35803434256374744] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35803434256374744, 0.3082913793483609] ***
*** starting iteration: 2; err: [Inf, 0.35803434256374744, 0.3082913793483609] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35803434256374744, 0.3082913793483609, 0.3043606438472666] ***
*** starting iteration: 3; err: [Inf, 0.35803434256374744, 0.3082913793483609, 0.3043606438472666] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35803434256374744, 0.3082913793483609, 0.3043606438472666, 0.3030271881823526] ***
*** starting iteration: 4; err: [Inf, 0.35803434256374744, 0.3082913793483609, 0.3043606438472666, 0.3030271881823526] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35803434256374744, 0.3082913793483609, 0.3043606438472666, 0.3030271881823526, 0.301914524161131] ***
*** starting iteration: 5; err: [Inf, 0.35803434256374744, 0.3082913793483609, 0.3043606438472666, 0.3030271881823526, 0.301914524161131] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35803434256374744, 0.3082913793483609, 0.3043606438472666, 0.3030271881823526, 0.301914524161131, 0.3008755495857067] ***
*** starting iteration: 6; err: [Inf, 0.35803434256374744, 0.3082913793483609, 0.3043606438472666, 0.3030271881823526, 0.301914524161131, 0.3008755495857067] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35803434256374744, 0.3082913793483609, 0.3043606438472666, 0.3030271881823526, 0.301914524161131, 0.3008755495857067, 0.30030413190400723] ***
*** finished computation of 3 references, err: [Inf, 0.35803434256374744, 0.3082913793483609, 0.3043606438472666, 0.3030271881823526, 0.301914524161131, 0.3008755495857067, 0.30030413190400723] ***
*** center 1: selecting labels [1] (freq >= 1) [from [217, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [120, 88, 0]]
** centroid: 2, normalized-entropy: 0.9828586897127057, [(1, 120), (2, 88)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [64, 151, 26]]
** centroid: 3, normalized-entropy: 0.8057988245310557, [(1, 64), (2, 151), (3, 26)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.47699551312518174] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47699551312518174, 0.33293830528799473] ***
*** starting iteration: 2; err: [Inf, 0.47699551312518174, 0.33293830528799473] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47699551312518174, 0.33293830528799473, 0.3082412443887526] ***
*** starting iteration: 3; err: [Inf, 0.47699551312518174, 0.33293830528799473, 0.3082412443887526] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47699551312518174, 0.33293830528799473, 0.3082412443887526, 0.29792789836320605] ***
*** starting iteration: 4; err: [Inf, 0.47699551312518174, 0.33293830528799473, 0.3082412443887526, 0.29792789836320605] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47699551312518174, 0.33293830528799473, 0.3082412443887526, 0.29792789836320605, 0.2947101640728661] ***
*** starting iteration: 5; err: [Inf, 0.47699551312518174, 0.33293830528799473, 0.3082412443887526, 0.29792789836320605, 0.2947101640728661] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47699551312518174, 0.33293830528799473, 0.3082412443887526, 0.29792789836320605, 0.2947101640728661, 0.2931191940335319] ***
*** starting iteration: 6; err: [Inf, 0.47699551312518174, 0.33293830528799473, 0.3082412443887526, 0.29792789836320605, 0.2947101640728661, 0.2931191940335319] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47699551312518174, 0.33293830528799473, 0.3082412443887526, 0.29792789836320605, 0.2947101640728661, 0.2931191940335319, 0.2920537027690945] ***
*** starting iteration: 7; err: [Inf, 0.47699551312518174, 0.33293830528799473, 0.3082412443887526, 0.29792789836320605, 0.2947101640728661, 0.2931191940335319, 0.2920537027690945] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.47699551312518174, 0.33293830528799473, 0.3082412443887526, 0.29792789836320605, 0.2947101640728661, 0.2931191940335319, 0.2920537027690945, 0.2914471470232846] ***
*** finished computation of 3 references, err: [Inf, 0.47699551312518174, 0.33293830528799473, 0.3082412443887526, 0.29792789836320605, 0.2947101640728661, 0.2931191940335319, 0.2920537027690945, 0.2914471470232846] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [235, 10, 0]]
** centroid: 1, normalized-entropy: 0.2460225782203316, [(1, 235), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [163, 47, 0]]
** centroid: 2, normalized-entropy: 0.7670628263874817, [(1, 163), (2, 47)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 184, 28]]
** centroid: 3, normalized-entropy: 0.5631028237513912, [(2, 184), (3, 28)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3996746409851974] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3996746409851974, 0.29941831844701045] ***
*** starting iteration: 2; err: [Inf, 0.3996746409851974, 0.29941831844701045] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3996746409851974, 0.29941831844701045, 0.2971233693544922] ***
*** starting iteration: 3; err: [Inf, 0.3996746409851974, 0.29941831844701045, 0.2971233693544922] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3996746409851974, 0.29941831844701045, 0.2971233693544922, 0.2968917426917104] ***
*** finished computation of 3 references, err: [Inf, 0.3996746409851974, 0.29941831844701045, 0.2971233693544922, 0.2968917426917104] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [73, 171, 18]]
** centroid: 1, normalized-entropy: 0.7450466527216324, [(1, 73), (2, 171), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [194, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [134, 77, 0]]
** centroid: 3, normalized-entropy: 0.9466986429496074, [(1, 134), (2, 77)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.23738749959861283] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23738749959861283, 0.19598568722538584] ***
*** starting iteration: 2; err: [Inf, 0.23738749959861283, 0.19598568722538584] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23738749959861283, 0.19598568722538584, 0.19109945849993745] ***
*** starting iteration: 3; err: [Inf, 0.23738749959861283, 0.19598568722538584, 0.19109945849993745] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23738749959861283, 0.19598568722538584, 0.19109945849993745, 0.19071651435234827] ***
*** finished computation of 7 references, err: [Inf, 0.23738749959861283, 0.19598568722538584, 0.19109945849993745, 0.19071651435234827] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [100, 25, 0]]
** centroid: 1, normalized-entropy: 0.7219280948873623, [(1, 100), (2, 25)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [50, 7, 0]]
** centroid: 2, normalized-entropy: 0.5373760853377334, [(1, 50), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 85, 26]]
** centroid: 3, normalized-entropy: 0.7853198101035018, [(2, 85), (3, 26)]
*** center 4: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [11, 93, 0]]
** centroid: 5, normalized-entropy: 0.48702128315977294, [(1, 11), (2, 93)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [54, 29, 0]]
** centroid: 6, normalized-entropy: 0.9335289015212996, [(1, 54), (2, 29)]
*** center 7: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24149244519389015] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24149244519389015, 0.1984112870193895] ***
*** starting iteration: 2; err: [Inf, 0.24149244519389015, 0.1984112870193895] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24149244519389015, 0.1984112870193895, 0.19419551717265435] ***
*** starting iteration: 3; err: [Inf, 0.24149244519389015, 0.1984112870193895, 0.19419551717265435] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24149244519389015, 0.1984112870193895, 0.19419551717265435, 0.19276606657917889] ***
*** starting iteration: 4; err: [Inf, 0.24149244519389015, 0.1984112870193895, 0.19419551717265435, 0.19276606657917889] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24149244519389015, 0.1984112870193895, 0.19419551717265435, 0.19276606657917889, 0.1916079831175573] ***
*** starting iteration: 5; err: [Inf, 0.24149244519389015, 0.1984112870193895, 0.19419551717265435, 0.19276606657917889, 0.1916079831175573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24149244519389015, 0.1984112870193895, 0.19419551717265435, 0.19276606657917889, 0.1916079831175573, 0.19086185698725586] ***
*** finished computation of 7 references, err: [Inf, 0.24149244519389015, 0.1984112870193895, 0.19419551717265435, 0.19276606657917889, 0.1916079831175573, 0.19086185698725586] ***
*** center 1: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [70, 24, 0]]
** centroid: 2, normalized-entropy: 0.8196004346196011, [(1, 70), (2, 24)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 51, 28]]
** centroid: 3, normalized-entropy: 0.9379626436434424, [(2, 51), (3, 28)]
*** center 4: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 83, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [15, 83, 0]]
** centroid: 7, normalized-entropy: 0.6174482957894681, [(1, 15), (2, 83)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24714561203436025] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24714561203436025, 0.1962874723539717] ***
*** starting iteration: 2; err: [Inf, 0.24714561203436025, 0.1962874723539717] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24714561203436025, 0.1962874723539717, 0.19189193066784824] ***
*** starting iteration: 3; err: [Inf, 0.24714561203436025, 0.1962874723539717, 0.19189193066784824] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24714561203436025, 0.1962874723539717, 0.19189193066784824, 0.19123688003402958] ***
*** finished computation of 7 references, err: [Inf, 0.24714561203436025, 0.1962874723539717, 0.19189193066784824, 0.19123688003402958] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [40, 69, 0]]
** centroid: 1, normalized-entropy: 0.9483190833715304, [(1, 40), (2, 69)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [54, 9, 0]]
** centroid: 2, normalized-entropy: 0.5916727785823274, [(1, 54), (2, 9)]
*** center 3: selecting labels [1] (freq >= 2) [from [120, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 74, 18]]
** centroid: 4, normalized-entropy: 0.7131467486384921, [(2, 74), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [82, 9, 0]]
** centroid: 5, normalized-entropy: 0.4655024490815131, [(1, 82), (2, 9)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [8, 87, 0]]
** centroid: 6, normalized-entropy: 0.4168441963431652, [(1, 8), (2, 87)]
*** center 7: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2175870557642869] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2175870557642869, 0.16031383717706701] ***
*** starting iteration: 2; err: [Inf, 0.2175870557642869, 0.16031383717706701] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2175870557642869, 0.16031383717706701, 0.15054043659705435] ***
*** starting iteration: 3; err: [Inf, 0.2175870557642869, 0.16031383717706701, 0.15054043659705435] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2175870557642869, 0.16031383717706701, 0.15054043659705435, 0.14892729885971268] ***
*** finished computation of 7 references, err: [Inf, 0.2175870557642869, 0.16031383717706701, 0.15054043659705435, 0.14892729885971268] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [77, 15, 0]]
** centroid: 1, normalized-entropy: 0.6415410585827175, [(1, 77), (2, 15)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 45, 26]]
** centroid: 2, normalized-entropy: 0.9477073729342067, [(2, 45), (3, 26)]
*** center 3: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [117, 2, 0]]
** centroid: 4, normalized-entropy: 0.1231146356503104, [(1, 117), (2, 2)]
*** center 5: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 95, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [3, 82, 0]]
** centroid: 7, normalized-entropy: 0.22028326695127437, [(1, 3), (2, 82)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1978110043245411] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1978110043245411, 0.15329130679631475] ***
*** starting iteration: 2; err: [Inf, 0.1978110043245411, 0.15329130679631475] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1978110043245411, 0.15329130679631475, 0.1487694295301944] ***
*** starting iteration: 3; err: [Inf, 0.1978110043245411, 0.15329130679631475, 0.1487694295301944] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1978110043245411, 0.15329130679631475, 0.1487694295301944, 0.1478099885910318] ***
*** finished computation of 7 references, err: [Inf, 0.1978110043245411, 0.15329130679631475, 0.1487694295301944, 0.1478099885910318] ***
*** center 1: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 83, 28]]
** centroid: 2, normalized-entropy: 0.8148283832923793, [(2, 83), (3, 28)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [63, 36, 0]]
** centroid: 3, normalized-entropy: 0.9456603046006401, [(1, 63), (2, 36)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [12, 65, 0]]
** centroid: 4, normalized-entropy: 0.6242741010130388, [(1, 12), (2, 65)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [27, 57, 0]]
** centroid: 5, normalized-entropy: 0.9059282160429994, [(1, 27), (2, 57)]
*** center 6: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1950473629323573] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1950473629323573, 0.1559057567796406] ***
*** starting iteration: 2; err: [Inf, 0.1950473629323573, 0.1559057567796406] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1950473629323573, 0.1559057567796406, 0.15071501078243288] ***
*** starting iteration: 3; err: [Inf, 0.1950473629323573, 0.1559057567796406, 0.15071501078243288] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1950473629323573, 0.1559057567796406, 0.15071501078243288, 0.1492575532536831] ***
*** finished computation of 7 references, err: [Inf, 0.1950473629323573, 0.1559057567796406, 0.15071501078243288, 0.1492575532536831] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [117, 13, 0]]
** centroid: 1, normalized-entropy: 0.46899559358928133, [(1, 117), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [54, 9, 0]]
** centroid: 2, normalized-entropy: 0.5916727785823274, [(1, 54), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 86, 18]]
** centroid: 3, normalized-entropy: 0.6646953053493416, [(2, 86), (3, 18)]
*** center 4: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [51, 41, 0]]
** centroid: 5, normalized-entropy: 0.9914606013843205, [(1, 51), (2, 41)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [5, 99, 0]]
** centroid: 6, normalized-entropy: 0.2781710079264946, [(1, 5), (2, 99)]
*** center 7: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28285622624288853] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28285622624288853, 0.20788449682672885] ***
*** finished computation of 7 references, err: [Inf, 0.28285622624288853, 0.20788449682672885] ***
*** center 1: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 111, 26]]
** centroid: 3, normalized-entropy: 0.701013149847168, [(2, 111), (3, 26)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [53, 11, 0]]
** centroid: 4, normalized-entropy: 0.6619760641115651, [(1, 53), (2, 11)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [22, 109, 0]]
** centroid: 5, normalized-entropy: 0.6529681388603088, [(1, 22), (2, 109)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [113, 8, 0]]
** centroid: 6, normalized-entropy: 0.3512580905562789, [(1, 113), (2, 8)]
*** center 7: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.27389006749650036] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27389006749650036, 0.20065718908505192] ***
*** finished computation of 7 references, err: [Inf, 0.27389006749650036, 0.20065718908505192] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [43, 6, 0]]
** centroid: 1, normalized-entropy: 0.5363596511250623, [(1, 43), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [40, 65, 0]]
** centroid: 2, normalized-entropy: 0.9587118829771317, [(1, 40), (2, 65)]
*** center 3: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [90, 42, 0]]
** centroid: 5, normalized-entropy: 0.9023932827949788, [(1, 90), (2, 42)]
*** center 6: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 128, 28]]
** centroid: 7, normalized-entropy: 0.6789538995185759, [(2, 128), (3, 28)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.233785063929638] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.233785063929638, 0.2059790954486686] ***
*** finished computation of 7 references, err: [Inf, 0.233785063929638, 0.2059790954486686] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [71, 11, 0]]
** centroid: 1, normalized-entropy: 0.5687008669370753, [(1, 71), (2, 11)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 84, 18]]
** centroid: 2, normalized-entropy: 0.6722948170756378, [(2, 84), (3, 18)]
*** center 3: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [10, 49, 0]]
** centroid: 4, normalized-entropy: 0.656540281386946, [(1, 10), (2, 49)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [3, 50, 0]]
** centroid: 5, normalized-entropy: 0.3138129641688652, [(1, 3), (2, 50)]
*** center 6: selecting labels [1] (freq >= 1) [from [140, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [106, 54, 0]]
** centroid: 7, normalized-entropy: 0.9224062617590724, [(1, 106), (2, 54)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19100611840791484] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19100611840791484, 0.15662309839341274] ***
*** starting iteration: 2; err: [Inf, 0.19100611840791484, 0.15662309839341274] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19100611840791484, 0.15662309839341274, 0.1521088683658892] ***
*** starting iteration: 3; err: [Inf, 0.19100611840791484, 0.15662309839341274, 0.1521088683658892] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19100611840791484, 0.15662309839341274, 0.1521088683658892, 0.15133023321944605] ***
*** finished computation of 7 references, err: [Inf, 0.19100611840791484, 0.15662309839341274, 0.1521088683658892, 0.15133023321944605] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 117, 26]]
** centroid: 1, normalized-entropy: 0.6840384356390419, [(2, 117), (3, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [53, 33, 0]]
** centroid: 3, normalized-entropy: 0.9606276613221153, [(1, 53), (2, 33)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [63, 2, 0]]
** centroid: 4, normalized-entropy: 0.19823496409776642, [(1, 63), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [99, 7, 0]]
** centroid: 5, normalized-entropy: 0.3509601730322126, [(1, 99), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [110, 7, 0]]
** centroid: 6, normalized-entropy: 0.32676597648839795, [(1, 110), (2, 7)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 73, 0]]
** centroid: 7, normalized-entropy: 0.1773894531859976, [(1, 2), (2, 73)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18925785993482788] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18925785993482788, 0.15442586965465183] ***
*** starting iteration: 2; err: [Inf, 0.18925785993482788, 0.15442586965465183] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18925785993482788, 0.15442586965465183, 0.1513333103243915] ***
*** starting iteration: 3; err: [Inf, 0.18925785993482788, 0.15442586965465183, 0.1513333103243915] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18925785993482788, 0.15442586965465183, 0.1513333103243915, 0.15033742065424158] ***
*** finished computation of 7 references, err: [Inf, 0.18925785993482788, 0.15442586965465183, 0.1513333103243915, 0.15033742065424158] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [137, 1, 0]]
** centroid: 1, normalized-entropy: 0.06192738891155935, [(1, 137), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [56, 16, 0]]
** centroid: 2, normalized-entropy: 0.7642045065086204, [(1, 56), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 67, 28]]
** centroid: 3, normalized-entropy: 0.8747617811911199, [(2, 67), (3, 28)]
*** center 4: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [23, 63, 0]]
** centroid: 5, normalized-entropy: 0.8377698690066789, [(1, 23), (2, 63)]
*** center 6: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 94, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21242395365216965] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21242395365216965, 0.15169071126449993] ***
*** starting iteration: 2; err: [Inf, 0.21242395365216965, 0.15169071126449993] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21242395365216965, 0.15169071126449993, 0.14706463094261743] ***
*** starting iteration: 3; err: [Inf, 0.21242395365216965, 0.15169071126449993, 0.14706463094261743] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21242395365216965, 0.15169071126449993, 0.14706463094261743, 0.1465953653580558] ***
*** finished computation of 7 references, err: [Inf, 0.21242395365216965, 0.15169071126449993, 0.14706463094261743, 0.1465953653580558] ***
*** center 1: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 92, 18]]
** centroid: 2, normalized-entropy: 0.6429383500409613, [(2, 92), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [50, 39, 0]]
** centroid: 3, normalized-entropy: 0.9889525767600615, [(1, 50), (2, 39)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [60, 46, 0]]
** centroid: 4, normalized-entropy: 0.987380023288353, [(1, 60), (2, 46)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [31, 71, 0]]
** centroid: 5, normalized-entropy: 0.8860318997477157, [(1, 31), (2, 71)]
*** center 6: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20520945385870365] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20520945385870365, 0.1668769127854311] ***
*** starting iteration: 2; err: [Inf, 0.20520945385870365, 0.1668769127854311] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20520945385870365, 0.1668769127854311, 0.15895143135341708] ***
*** starting iteration: 3; err: [Inf, 0.20520945385870365, 0.1668769127854311, 0.15895143135341708] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20520945385870365, 0.1668769127854311, 0.15895143135341708, 0.15549638824098305] ***
*** starting iteration: 4; err: [Inf, 0.20520945385870365, 0.1668769127854311, 0.15895143135341708, 0.15549638824098305] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20520945385870365, 0.1668769127854311, 0.15895143135341708, 0.15549638824098305, 0.15322137831405433] ***
*** starting iteration: 5; err: [Inf, 0.20520945385870365, 0.1668769127854311, 0.15895143135341708, 0.15549638824098305, 0.15322137831405433] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20520945385870365, 0.1668769127854311, 0.15895143135341708, 0.15549638824098305, 0.15322137831405433, 0.15196024399605934] ***
*** starting iteration: 6; err: [Inf, 0.20520945385870365, 0.1668769127854311, 0.15895143135341708, 0.15549638824098305, 0.15322137831405433, 0.15196024399605934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20520945385870365, 0.1668769127854311, 0.15895143135341708, 0.15549638824098305, 0.15322137831405433, 0.15196024399605934, 0.1512391022280664] ***
*** finished computation of 7 references, err: [Inf, 0.20520945385870365, 0.1668769127854311, 0.15895143135341708, 0.15549638824098305, 0.15322137831405433, 0.15196024399605934, 0.1512391022280664] ***
*** center 1: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 84, 2]]
** centroid: 2, normalized-entropy: 0.15935006268563429, [(2, 84), (3, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [125, 5, 0]]
** centroid: 4, normalized-entropy: 0.23519338181924157, [(1, 125), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [87, 14, 0]]
** centroid: 5, normalized-entropy: 0.5805970961414402, [(1, 87), (2, 14)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 84, 24]]
** centroid: 6, normalized-entropy: 0.7642045065086204, [(2, 84), (3, 24)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [44, 52, 0]]
** centroid: 7, normalized-entropy: 0.9949848281859699, [(1, 44), (2, 52)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21970550539712053] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21970550539712053, 0.18688241728913804] ***
*** starting iteration: 2; err: [Inf, 0.21970550539712053, 0.18688241728913804] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21970550539712053, 0.18688241728913804, 0.17276172608142715] ***
*** starting iteration: 3; err: [Inf, 0.21970550539712053, 0.18688241728913804, 0.17276172608142715] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21970550539712053, 0.18688241728913804, 0.17276172608142715, 0.16060571849200947] ***
*** starting iteration: 4; err: [Inf, 0.21970550539712053, 0.18688241728913804, 0.17276172608142715, 0.16060571849200947] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21970550539712053, 0.18688241728913804, 0.17276172608142715, 0.16060571849200947, 0.15303332101018902] ***
*** starting iteration: 5; err: [Inf, 0.21970550539712053, 0.18688241728913804, 0.17276172608142715, 0.16060571849200947, 0.15303332101018902] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21970550539712053, 0.18688241728913804, 0.17276172608142715, 0.16060571849200947, 0.15303332101018902, 0.14962594049551275] ***
*** starting iteration: 6; err: [Inf, 0.21970550539712053, 0.18688241728913804, 0.17276172608142715, 0.16060571849200947, 0.15303332101018902, 0.14962594049551275] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21970550539712053, 0.18688241728913804, 0.17276172608142715, 0.16060571849200947, 0.15303332101018902, 0.14962594049551275, 0.14757368572522653] ***
*** starting iteration: 7; err: [Inf, 0.21970550539712053, 0.18688241728913804, 0.17276172608142715, 0.16060571849200947, 0.15303332101018902, 0.14962594049551275, 0.14757368572522653] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21970550539712053, 0.18688241728913804, 0.17276172608142715, 0.16060571849200947, 0.15303332101018902, 0.14962594049551275, 0.14757368572522653, 0.1463236401738624] ***
*** starting iteration: 8; err: [Inf, 0.21970550539712053, 0.18688241728913804, 0.17276172608142715, 0.16060571849200947, 0.15303332101018902, 0.14962594049551275, 0.14757368572522653, 0.1463236401738624] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21970550539712053, 0.18688241728913804, 0.17276172608142715, 0.16060571849200947, 0.15303332101018902, 0.14962594049551275, 0.14757368572522653, 0.1463236401738624, 0.1455140395705746] ***
*** finished computation of 7 references, err: [Inf, 0.21970550539712053, 0.18688241728913804, 0.17276172608142715, 0.16060571849200947, 0.15303332101018902, 0.14962594049551275, 0.14757368572522653, 0.1463236401738624, 0.1455140395705746] ***
*** center 1: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [5, 72, 0]]
** centroid: 2, normalized-entropy: 0.34673146824966367, [(1, 5), (2, 72)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [71, 31, 0]]
** centroid: 3, normalized-entropy: 0.8860318997477157, [(1, 71), (2, 31)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [59, 19, 0]]
** centroid: 4, normalized-entropy: 0.8009591077369054, [(1, 59), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [85, 20, 0]]
** centroid: 5, normalized-entropy: 0.7024665512903904, [(1, 85), (2, 20)]
*** center 6: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 99, 28]]
** centroid: 7, normalized-entropy: 0.7610292284611874, [(2, 99), (3, 28)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19751728835586888] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19751728835586888, 0.16679761987710107] ***
*** starting iteration: 2; err: [Inf, 0.19751728835586888, 0.16679761987710107] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19751728835586888, 0.16679761987710107, 0.15592720058943513] ***
*** starting iteration: 3; err: [Inf, 0.19751728835586888, 0.16679761987710107, 0.15592720058943513] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19751728835586888, 0.16679761987710107, 0.15592720058943513, 0.15277821697836472] ***
*** starting iteration: 4; err: [Inf, 0.19751728835586888, 0.16679761987710107, 0.15592720058943513, 0.15277821697836472] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19751728835586888, 0.16679761987710107, 0.15592720058943513, 0.15277821697836472, 0.15143088229430623] ***
*** starting iteration: 5; err: [Inf, 0.19751728835586888, 0.16679761987710107, 0.15592720058943513, 0.15277821697836472, 0.15143088229430623] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19751728835586888, 0.16679761987710107, 0.15592720058943513, 0.15277821697836472, 0.15143088229430623, 0.15084974366104764] ***
*** finished computation of 7 references, err: [Inf, 0.19751728835586888, 0.16679761987710107, 0.15592720058943513, 0.15277821697836472, 0.15143088229430623, 0.15084974366104764] ***
*** center 1: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 89, 13]]
** centroid: 2, normalized-entropy: 0.550405815580872, [(2, 89), (3, 13)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 101, 5]]
** centroid: 3, normalized-entropy: 0.27425064105029284, [(2, 101), (3, 5)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [59, 38, 0]]
** centroid: 4, normalized-entropy: 0.9659212398860464, [(1, 59), (2, 38)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [118, 5, 0]]
** centroid: 5, normalized-entropy: 0.2452663728259548, [(1, 118), (2, 5)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [56, 15, 0]]
** centroid: 6, normalized-entropy: 0.743898745288434, [(1, 56), (2, 15)]
*** center 7: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3452318241909236] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3452318241909236, 0.23740776621823287] ***
*** finished computation of 3 references, err: [Inf, 0.3452318241909236, 0.23740776621823287] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [74, 207, 26]]
** centroid: 1, normalized-entropy: 0.744374490170658, [(1, 74), (2, 207), (3, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [205, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [122, 32, 0]]
** centroid: 3, normalized-entropy: 0.7372413771710565, [(1, 122), (2, 32)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 12)
[0.934946922970875, 0.9340058621495747, 0.9279878681076287, 0.9169738600876326, 0.9030227832623042, 0.9020097942253632, 0.8960127792463122, 0.8859757961554369, 0.8750067432702163, 0.8510336683989378, 0.822019624414834, 0.8090275904647162]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.9, 1) => 0.934946922970875
finished with 13
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.185405106922785] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.185405106922785, 0.15519870281241857] ***
*** finished computation of 7 references, err: [Inf, 0.185405106922785, 0.15519870281241857] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [28, 27, 0]]
** centroid: 1, normalized-entropy: 0.9997615248696311, [(1, 28), (2, 27)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 66, 26]]
** centroid: 2, normalized-entropy: 0.8589810370425965, [(2, 66), (3, 26)]
*** center 3: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [18, 60, 0]]
** centroid: 4, normalized-entropy: 0.7793498372920851, [(1, 18), (2, 60)]
*** center 5: selecting labels [1] (freq >= 1) [from [140, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [29, 86, 0]]
** centroid: 6, normalized-entropy: 0.814705548656723, [(1, 29), (2, 86)]
*** center 7: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1777598867206827] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1777598867206827, 0.15882576049223118] ***
*** finished computation of 7 references, err: [Inf, 0.1777598867206827, 0.15882576049223118] ***
*** center 1: selecting labels [1] (freq >= 1) [from [41, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [98, 36, 0]]
** centroid: 3, normalized-entropy: 0.8395304981054318, [(1, 98), (2, 36)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [51, 42, 0]]
** centroid: 4, normalized-entropy: 0.9932338197397066, [(1, 51), (2, 42)]
*** center 5: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 128, 28]]
** centroid: 6, normalized-entropy: 0.6789538995185759, [(2, 128), (3, 28)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [74, 35, 0]]
** centroid: 7, normalized-entropy: 0.9055746490923751, [(1, 74), (2, 35)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.17689938143850759] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17689938143850759, 0.15889875409284096] ***
*** finished computation of 7 references, err: [Inf, 0.17689938143850759, 0.15889875409284096] ***
*** center 1: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [55, 10, 0]]
** centroid: 3, normalized-entropy: 0.6193821946787638, [(1, 55), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [20, 88, 0]]
** centroid: 4, normalized-entropy: 0.6912898694057888, [(1, 20), (2, 88)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 96, 18]]
** centroid: 5, normalized-entropy: 0.6292492238560344, [(2, 96), (3, 18)]
*** center 6: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [111, 54, 0]]
** centroid: 7, normalized-entropy: 0.9121156307204275, [(1, 111), (2, 54)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 13)
[0.934946922970875, 0.9340058621495747, 0.9279878681076287, 0.9169738600876326, 0.9030227832623042, 0.9020097942253632, 0.8960127792463122, 0.8880137622652593, 0.8859757961554369, 0.8750067432702163, 0.8510336683989378, 0.822019624414834, 0.8090275904647162]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.9, 1) => 0.934946922970875
finished with 15
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.23245007589716335] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23245007589716335, 0.18704809292570046] ***
*** starting iteration: 2; err: [Inf, 0.23245007589716335, 0.18704809292570046] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23245007589716335, 0.18704809292570046, 0.18326905836955806] ***
*** starting iteration: 3; err: [Inf, 0.23245007589716335, 0.18704809292570046, 0.18326905836955806] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23245007589716335, 0.18704809292570046, 0.18326905836955806, 0.1831246559302891] ***
*** finished computation of 7 references, err: [Inf, 0.23245007589716335, 0.18704809292570046, 0.18326905836955806, 0.1831246559302891] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [57, 59, 0]]
** centroid: 1, normalized-entropy: 0.9997855578884436, [(1, 57), (2, 59)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [65, 26, 0]]
** centroid: 2, normalized-entropy: 0.8631205685666311, [(1, 65), (2, 26)]
*** center 3: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [1, 97, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 59, 28]]
** centroid: 5, normalized-entropy: 0.9063701886077911, [(2, 59), (3, 28)]
*** center 6: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24409246564712905] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24409246564712905, 0.19639045706876124] ***
*** starting iteration: 2; err: [Inf, 0.24409246564712905, 0.19639045706876124] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24409246564712905, 0.19639045706876124, 0.19328281185080087] ***
*** starting iteration: 3; err: [Inf, 0.24409246564712905, 0.19639045706876124, 0.19328281185080087] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24409246564712905, 0.19639045706876124, 0.19328281185080087, 0.19210408773759138] ***
*** starting iteration: 4; err: [Inf, 0.24409246564712905, 0.19639045706876124, 0.19328281185080087, 0.19210408773759138] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24409246564712905, 0.19639045706876124, 0.19328281185080087, 0.19210408773759138, 0.1909248725102022] ***
*** starting iteration: 5; err: [Inf, 0.24409246564712905, 0.19639045706876124, 0.19328281185080087, 0.19210408773759138, 0.1909248725102022] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24409246564712905, 0.19639045706876124, 0.19328281185080087, 0.19210408773759138, 0.1909248725102022, 0.19011351877803925] ***
*** finished computation of 7 references, err: [Inf, 0.24409246564712905, 0.19639045706876124, 0.19328281185080087, 0.19210408773759138, 0.1909248725102022, 0.19011351877803925] ***
*** center 1: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [87, 11, 0]]
** centroid: 2, normalized-entropy: 0.5066503344840895, [(1, 87), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 69, 18]]
** centroid: 3, normalized-entropy: 0.7355085815538399, [(2, 69), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [120, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [54, 45, 0]]
** centroid: 5, normalized-entropy: 0.9940302114769566, [(1, 54), (2, 45)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [53, 34, 0]]
** centroid: 6, normalized-entropy: 0.9653168212008997, [(1, 53), (2, 34)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 89, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21317570035027023] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21317570035027023, 0.1525420381718346] ***
*** starting iteration: 2; err: [Inf, 0.21317570035027023, 0.1525420381718346] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21317570035027023, 0.1525420381718346, 0.1481821054114482] ***
*** starting iteration: 3; err: [Inf, 0.21317570035027023, 0.1525420381718346, 0.1481821054114482] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21317570035027023, 0.1525420381718346, 0.1481821054114482, 0.1473765803987647] ***
*** finished computation of 7 references, err: [Inf, 0.21317570035027023, 0.1525420381718346, 0.1481821054114482, 0.1473765803987647] ***
*** center 1: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 76, 26]]
** centroid: 2, normalized-entropy: 0.8189555018403103, [(2, 76), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [61, 31, 0]]
** centroid: 3, normalized-entropy: 0.9218764863469129, [(1, 61), (2, 31)]
*** center 4: selecting labels [1] (freq >= 2) [from [101, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [52, 68, 0]]
** centroid: 5, normalized-entropy: 0.9871377743721862, [(1, 52), (2, 68)]
*** center 6: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 63, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2005455786916616] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2005455786916616, 0.1577769794837869] ***
*** starting iteration: 2; err: [Inf, 0.2005455786916616, 0.1577769794837869] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2005455786916616, 0.1577769794837869, 0.1523193466872245] ***
*** starting iteration: 3; err: [Inf, 0.2005455786916616, 0.1577769794837869, 0.1523193466872245] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2005455786916616, 0.1577769794837869, 0.1523193466872245, 0.15046213962824673] ***
*** starting iteration: 4; err: [Inf, 0.2005455786916616, 0.1577769794837869, 0.1523193466872245, 0.15046213962824673] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2005455786916616, 0.1577769794837869, 0.1523193466872245, 0.15046213962824673, 0.14964017904512975] ***
*** finished computation of 7 references, err: [Inf, 0.2005455786916616, 0.1577769794837869, 0.1523193466872245, 0.15046213962824673, 0.14964017904512975] ***
*** center 1: selecting labels [1] (freq >= 2) [from [122, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 74, 28]]
** centroid: 2, normalized-entropy: 0.8478617451660525, [(2, 74), (3, 28)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [52, 27, 0]]
** centroid: 3, normalized-entropy: 0.9265044456232997, [(1, 52), (2, 27)]
*** center 4: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [30, 62, 0]]
** centroid: 5, normalized-entropy: 0.9108783787500366, [(1, 30), (2, 62)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [10, 78, 0]]
** centroid: 6, normalized-entropy: 0.5107878229540133, [(1, 10), (2, 78)]
*** center 7: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18797657120207706] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18797657120207706, 0.1535848014313599] ***
*** starting iteration: 2; err: [Inf, 0.18797657120207706, 0.1535848014313599] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18797657120207706, 0.1535848014313599, 0.14968809006928369] ***
*** starting iteration: 3; err: [Inf, 0.18797657120207706, 0.1535848014313599, 0.14968809006928369] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18797657120207706, 0.1535848014313599, 0.14968809006928369, 0.14883885032468025] ***
*** finished computation of 7 references, err: [Inf, 0.18797657120207706, 0.1535848014313599, 0.14968809006928369, 0.14883885032468025] ***
*** center 1: selecting labels [1] (freq >= 2) [from [145, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [54, 9, 0]]
** centroid: 2, normalized-entropy: 0.5916727785823274, [(1, 54), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 60, 18]]
** centroid: 3, normalized-entropy: 0.7793498372920851, [(2, 60), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [17, 90, 0]]
** centroid: 5, normalized-entropy: 0.6316198184485629, [(1, 17), (2, 90)]
*** center 6: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [10, 89, 0]]
** centroid: 7, normalized-entropy: 0.47218938467675087, [(1, 10), (2, 89)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21791896427906043] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21791896427906043, 0.19522324669127306] ***
*** starting iteration: 2; err: [Inf, 0.21791896427906043, 0.19522324669127306] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21791896427906043, 0.19522324669127306, 0.19273910967125515] ***
*** starting iteration: 3; err: [Inf, 0.21791896427906043, 0.19522324669127306, 0.19273910967125515] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21791896427906043, 0.19522324669127306, 0.19273910967125515, 0.1922261955995426] ***
*** finished computation of 7 references, err: [Inf, 0.21791896427906043, 0.19522324669127306, 0.19273910967125515, 0.1922261955995426] ***
*** center 1: selecting labels [1] (freq >= 2) [from [133, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 68, 26]]
** centroid: 2, normalized-entropy: 0.8507707040532602, [(2, 68), (3, 26)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [47, 3, 0]]
** centroid: 3, normalized-entropy: 0.3274449191544762, [(1, 47), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [75, 8, 0]]
** centroid: 4, normalized-entropy: 0.4574321808988397, [(1, 75), (2, 8)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [19, 88, 0]]
** centroid: 5, normalized-entropy: 0.6747323584057238, [(1, 19), (2, 88)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [36, 72, 0]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(1, 36), (2, 72)]
*** center 7: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 15)
[0.934946922970875, 0.9340058621495747, 0.9279878681076287, 0.9169738600876326, 0.9139678600756445, 0.9030227832623042, 0.9020097942253632, 0.8990367613122104, 0.8960127792463122, 0.8880137622652593, 0.8859757961554369, 0.8750067432702163, 0.8510336683989378, 0.822019624414834, 0.8090275904647162]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.9, 1) => 0.934946922970875
finished with 15
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.934946922970875, 0.9340058621495747, 0.9279878681076287, 0.9169738600876326, 0.9139678600756445, 0.9030227832623042, 0.9020097942253632, 0.8990367613122104, 0.8960127792463122, 0.8880137622652593, 0.8859757961554369, 0.8750067432702163, 0.8510336683989378, 0.822019624414834, 0.8090275904647162]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.9, 1) => 0.934946922970875
finished with 15
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.934946922970875, 0.9340058621495747, 0.9279878681076287, 0.9169738600876326, 0.9139678600756445, 0.9030227832623042, 0.9020097942253632, 0.8990367613122104, 0.8960127792463122, 0.8880137622652593, 0.8859757961554369, 0.8750067432702163, 0.8510336683989378, 0.822019624414834, 0.8090275904647162]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.9, 1) => 0.934946922970875
finished with 15
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.934946922970875, 0.9340058621495747, 0.9279878681076287, 0.9169738600876326, 0.9139678600756445, 0.9030227832623042, 0.9020097942253632, 0.8990367613122104, 0.8960127792463122, 0.8880137622652593, 0.8859757961554369, 0.8750067432702163, 0.8510336683989378, 0.822019624414834, 0.8090275904647162]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.9, 1) => 0.934946922970875
finished with 17
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.5622069935982784] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5622069935982784, 0.31805291203865865] ***
*** starting iteration: 2; err: [Inf, 0.5622069935982784, 0.31805291203865865] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5622069935982784, 0.31805291203865865, 0.30064107518497707] ***
*** starting iteration: 3; err: [Inf, 0.5622069935982784, 0.31805291203865865, 0.30064107518497707] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5622069935982784, 0.31805291203865865, 0.30064107518497707, 0.2973862444498092] ***
*** finished computation of 3 references, err: [Inf, 0.5622069935982784, 0.31805291203865865, 0.30064107518497707, 0.2973862444498092] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [39, 162, 26]]
** centroid: 1, normalized-entropy: 0.7205070113214956, [(1, 39), (2, 162), (3, 26)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [150, 77, 0]]
** centroid: 2, normalized-entropy: 0.9240578828508732, [(1, 150), (2, 77)]
*** center 3: selecting labels [1] (freq >= 1) [from [212, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4229242559354836] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4229242559354836, 0.328083383243369] ***
*** starting iteration: 2; err: [Inf, 0.4229242559354836, 0.328083383243369] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4229242559354836, 0.328083383243369, 0.3075541676241329] ***
*** starting iteration: 3; err: [Inf, 0.4229242559354836, 0.328083383243369, 0.3075541676241329] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4229242559354836, 0.328083383243369, 0.3075541676241329, 0.30198209581692803] ***
*** finished computation of 3 references, err: [Inf, 0.4229242559354836, 0.328083383243369, 0.3075541676241329, 0.30198209581692803] ***
*** center 1: selecting labels [1] (freq >= 1) [from [218, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [134, 84, 0]]
** centroid: 2, normalized-entropy: 0.9617136136083148, [(1, 134), (2, 84)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [46, 157, 28]]
** centroid: 3, normalized-entropy: 0.7642410676548927, [(1, 46), (2, 157), (3, 28)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3672185776492712] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3672185776492712, 0.2989538121504941] ***
*** starting iteration: 2; err: [Inf, 0.3672185776492712, 0.2989538121504941] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3672185776492712, 0.2989538121504941, 0.293236359786326] ***
*** starting iteration: 3; err: [Inf, 0.3672185776492712, 0.2989538121504941, 0.293236359786326] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3672185776492712, 0.2989538121504941, 0.293236359786326, 0.2913680058810441] ***
*** finished computation of 3 references, err: [Inf, 0.3672185776492712, 0.2989538121504941, 0.293236359786326, 0.2913680058810441] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [1, 198, 18]]
** centroid: 1, normalized-entropy: 0.28663794824804933, [(1, 1), (2, 198), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [152, 41, 0]]
** centroid: 2, normalized-entropy: 0.7461118858029693, [(1, 152), (2, 41)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [248, 9, 0]]
** centroid: 3, normalized-entropy: 0.21897081382840794, [(1, 248), (2, 9)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2810503478824824] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2810503478824824, 0.2293029459761092] ***
*** starting iteration: 2; err: [Inf, 0.2810503478824824, 0.2293029459761092] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2810503478824824, 0.2293029459761092, 0.22705167532806192] ***
*** starting iteration: 3; err: [Inf, 0.2810503478824824, 0.2293029459761092, 0.22705167532806192] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2810503478824824, 0.2293029459761092, 0.22705167532806192, 0.22605107472608196] ***
*** finished computation of 3 references, err: [Inf, 0.2810503478824824, 0.2293029459761092, 0.22705167532806192, 0.22605107472608196] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [230, 4, 0]]
** centroid: 1, normalized-entropy: 0.1247975754927792, [(1, 230), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [168, 46, 0]]
** centroid: 2, normalized-entropy: 0.7508446639457529, [(1, 168), (2, 46)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [3, 189, 26]]
** centroid: 3, normalized-entropy: 0.3971790910380669, [(1, 3), (2, 189), (3, 26)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3142939985285037] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3142939985285037, 0.2299830292126742] ***
*** starting iteration: 2; err: [Inf, 0.3142939985285037, 0.2299830292126742] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3142939985285037, 0.2299830292126742, 0.22952049129085428] ***
*** finished computation of 3 references, err: [Inf, 0.3142939985285037, 0.2299830292126742, 0.22952049129085428] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [169, 46, 0]]
** centroid: 1, normalized-entropy: 0.7489720369833592, [(1, 169), (2, 46)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [229, 29, 0]]
** centroid: 2, normalized-entropy: 0.5071221533577512, [(1, 229), (2, 29)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 166, 28]]
** centroid: 3, normalized-entropy: 0.5954670513561874, [(2, 166), (3, 28)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3011050744574221] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3011050744574221, 0.24293425228904703] ***
*** starting iteration: 2; err: [Inf, 0.3011050744574221, 0.24293425228904703] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3011050744574221, 0.24293425228904703, 0.23475516198106625] ***
*** starting iteration: 3; err: [Inf, 0.3011050744574221, 0.24293425228904703, 0.23475516198106625] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3011050744574221, 0.24293425228904703, 0.23475516198106625, 0.23356117285240716] ***
*** finished computation of 3 references, err: [Inf, 0.3011050744574221, 0.24293425228904703, 0.23475516198106625, 0.23356117285240716] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [56, 166, 18]]
** centroid: 1, normalized-entropy: 0.7180155985735601, [(1, 56), (2, 166), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [191, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [154, 82, 0]]
** centroid: 3, normalized-entropy: 0.9317769830665124, [(1, 154), (2, 82)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 17)
[0.934946922970875, 0.9340058621495747, 0.9279878681076287, 0.9169738600876326, 0.9139678600756445, 0.9030227832623042, 0.9020097942253632, 0.8990367613122104, 0.8969928011844179, 0.8960127792463122, 0.8880137622652593, 0.8859757961554369, 0.8750067432702163, 0.8599887312462163, 0.8510336683989378, 0.822019624414834, 0.8090275904647162]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.9, 1) => 0.934946922970875
finished with 17
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.934946922970875, 0.9340058621495747, 0.9279878681076287, 0.9169738600876326, 0.9139678600756445, 0.9030227832623042, 0.9020097942253632, 0.8990367613122104, 0.8969928011844179, 0.8960127792463122, 0.8880137622652593, 0.8859757961554369, 0.8750067432702163, 0.8599887312462163, 0.8510336683989378, 0.822019624414834, 0.8090275904647162]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.9, 1) => 0.934946922970875
finished with 17
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.21055647998536006] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21055647998536006, 0.1527869975855574] ***
*** starting iteration: 2; err: [Inf, 0.21055647998536006, 0.1527869975855574] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21055647998536006, 0.1527869975855574, 0.14785332690319047] ***
*** starting iteration: 3; err: [Inf, 0.21055647998536006, 0.1527869975855574, 0.14785332690319047] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21055647998536006, 0.1527869975855574, 0.14785332690319047, 0.14696553170448168] ***
*** finished computation of 7 references, err: [Inf, 0.21055647998536006, 0.1527869975855574, 0.14785332690319047, 0.14696553170448168] ***
*** center 1: selecting labels [1] (freq >= 1) [from [143, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [87, 62, 0]]
** centroid: 2, normalized-entropy: 0.9795963366848085, [(1, 87), (2, 62)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 122, 36]]
** centroid: 3, normalized-entropy: 0.7742411580847273, [(2, 122), (3, 36)]
*** center 4: selecting labels [1] (freq >= 1) [from [150, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [78, 78, 0]]
** centroid: 5, normalized-entropy: 1.0, [(1, 78), (2, 78)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [6, 102, 0]]
** centroid: 6, normalized-entropy: 0.3095434291503252, [(1, 6), (2, 102)]
*** center 7: selecting labels [1] (freq >= 1) [from [136, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19415917541645467] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19415917541645467, 0.15284250863455237] ***
*** starting iteration: 2; err: [Inf, 0.19415917541645467, 0.15284250863455237] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19415917541645467, 0.15284250863455237, 0.14910851671360434] ***
*** starting iteration: 3; err: [Inf, 0.19415917541645467, 0.15284250863455237, 0.14910851671360434] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19415917541645467, 0.15284250863455237, 0.14910851671360434, 0.14742639629729093] ***
*** finished computation of 7 references, err: [Inf, 0.19415917541645467, 0.15284250863455237, 0.14910851671360434, 0.14742639629729093] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [78, 1, 0]]
** centroid: 1, normalized-entropy: 0.09794058271817412, [(1, 78), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [48, 23, 0]]
** centroid: 2, normalized-entropy: 0.9086185980409245, [(1, 48), (2, 23)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 53, 20]]
** centroid: 3, normalized-entropy: 0.847107490529376, [(2, 53), (3, 20)]
*** center 4: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [45, 25, 0]]
** centroid: 5, normalized-entropy: 0.940285958670631, [(1, 45), (2, 25)]
*** center 6: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 58, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18929222607612609] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18929222607612609, 0.15154607065580786] ***
*** starting iteration: 2; err: [Inf, 0.18929222607612609, 0.15154607065580786] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18929222607612609, 0.15154607065580786, 0.14509663921967147] ***
*** starting iteration: 3; err: [Inf, 0.18929222607612609, 0.15154607065580786, 0.14509663921967147] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18929222607612609, 0.15154607065580786, 0.14509663921967147, 0.14270630625914782] ***
*** finished computation of 7 references, err: [Inf, 0.18929222607612609, 0.15154607065580786, 0.14509663921967147, 0.14270630625914782] ***
*** center 1: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 57, 15]]
** centroid: 3, normalized-entropy: 0.7382848661434506, [(2, 57), (3, 15)]
*** center 4: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [43, 31, 0]]
** centroid: 5, normalized-entropy: 0.9809470132751208, [(1, 43), (2, 31)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [33, 53, 0]]
** centroid: 6, normalized-entropy: 0.9606276613221153, [(1, 33), (2, 53)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 41, 0]]
** centroid: 7, normalized-entropy: 0.1623261801753929, [(1, 1), (2, 41)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2028472503721714] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2028472503721714, 0.15247826461680233] ***
*** starting iteration: 2; err: [Inf, 0.2028472503721714, 0.15247826461680233] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2028472503721714, 0.15247826461680233, 0.14725190869811922] ***
*** starting iteration: 3; err: [Inf, 0.2028472503721714, 0.15247826461680233, 0.14725190869811922] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2028472503721714, 0.15247826461680233, 0.14725190869811922, 0.1463232989963144] ***
*** finished computation of 7 references, err: [Inf, 0.2028472503721714, 0.15247826461680233, 0.14725190869811922, 0.1463232989963144] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [83, 2, 0]]
** centroid: 1, normalized-entropy: 0.16082302082246946, [(1, 83), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [40, 19, 0]]
** centroid: 2, normalized-entropy: 0.9065795484987461, [(1, 40), (2, 19)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 57, 19]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 57), (3, 19)]
*** center 4: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [25, 37, 0]]
** centroid: 5, normalized-entropy: 0.9728063221185002, [(1, 25), (2, 37)]
*** center 6: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [3, 57, 0]]
** centroid: 7, normalized-entropy: 0.2863969571159561, [(1, 3), (2, 57)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1918298772610724] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1918298772610724, 0.15395111665083094] ***
*** starting iteration: 2; err: [Inf, 0.1918298772610724, 0.15395111665083094] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1918298772610724, 0.15395111665083094, 0.14892511903401465] ***
*** starting iteration: 3; err: [Inf, 0.1918298772610724, 0.15395111665083094, 0.14892511903401465] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1918298772610724, 0.15395111665083094, 0.14892511903401465, 0.1476590364696458] ***
*** finished computation of 7 references, err: [Inf, 0.1918298772610724, 0.15395111665083094, 0.14892511903401465, 0.1476590364696458] ***
*** center 1: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [40, 28, 0]]
** centroid: 2, normalized-entropy: 0.9774178175281716, [(1, 40), (2, 28)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 57, 20]]
** centroid: 3, normalized-entropy: 0.8263541679009075, [(2, 57), (3, 20)]
*** center 4: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [38, 34, 0]]
** centroid: 5, normalized-entropy: 0.9977724720899819, [(1, 38), (2, 34)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 62, 0]]
** centroid: 6, normalized-entropy: 0.269828447703074, [(1, 3), (2, 62)]
*** center 7: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20900781394727527] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20900781394727527, 0.14883779135905206] ***
*** starting iteration: 2; err: [Inf, 0.20900781394727527, 0.14883779135905206] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20900781394727527, 0.14883779135905206, 0.14502086064592004] ***
*** starting iteration: 3; err: [Inf, 0.20900781394727527, 0.14883779135905206, 0.14502086064592004] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20900781394727527, 0.14883779135905206, 0.14502086064592004, 0.14471399107947946] ***
*** finished computation of 7 references, err: [Inf, 0.20900781394727527, 0.14883779135905206, 0.14502086064592004, 0.14471399107947946] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [25, 49, 0]]
** centroid: 1, normalized-entropy: 0.9227346209530939, [(1, 25), (2, 49)]
*** center 2: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [50, 4, 0]]
** centroid: 3, normalized-entropy: 0.38094658570539014, [(1, 50), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [70, 12, 0]]
** centroid: 4, normalized-entropy: 0.6006085754131871, [(1, 70), (2, 12)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 59, 17]]
** centroid: 5, normalized-entropy: 0.7668379316856329, [(2, 59), (3, 17)]
*** center 6: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 63, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21233859878405928] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21233859878405928, 0.15059697194304317] ***
*** starting iteration: 2; err: [Inf, 0.21233859878405928, 0.15059697194304317] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21233859878405928, 0.15059697194304317, 0.145333522439003] ***
*** starting iteration: 3; err: [Inf, 0.21233859878405928, 0.15059697194304317, 0.145333522439003] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21233859878405928, 0.15059697194304317, 0.145333522439003, 0.14479044805280863] ***
*** finished computation of 7 references, err: [Inf, 0.21233859878405928, 0.15059697194304317, 0.145333522439003, 0.14479044805280863] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [54, 13, 0]]
** centroid: 1, normalized-entropy: 0.709825885194168, [(1, 54), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [56, 6, 0]]
** centroid: 2, normalized-entropy: 0.45868581620054033, [(1, 56), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 75, 15]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(2, 75), (3, 15)]
*** center 4: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [37, 27, 0]]
** centroid: 5, normalized-entropy: 0.9823166080205502, [(1, 37), (2, 27)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 77, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21315319820493459] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21315319820493459, 0.15738380469856203] ***
*** starting iteration: 2; err: [Inf, 0.21315319820493459, 0.15738380469856203] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21315319820493459, 0.15738380469856203, 0.15245956543274225] ***
*** starting iteration: 3; err: [Inf, 0.21315319820493459, 0.15738380469856203, 0.15245956543274225] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21315319820493459, 0.15738380469856203, 0.15245956543274225, 0.15178054586425424] ***
*** finished computation of 7 references, err: [Inf, 0.21315319820493459, 0.15738380469856203, 0.15245956543274225, 0.15178054586425424] ***
*** center 1: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 55, 17]]
** centroid: 2, normalized-entropy: 0.7885131605379784, [(2, 55), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [41, 4, 0]]
** centroid: 3, normalized-entropy: 0.43275015878875417, [(1, 41), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [76, 23, 0]]
** centroid: 4, normalized-entropy: 0.7820392866349247, [(1, 76), (2, 23)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [29, 48, 0]]
** centroid: 5, normalized-entropy: 0.9556222693531471, [(1, 29), (2, 48)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 53, 0]]
** centroid: 6, normalized-entropy: 0.22536363912739493, [(1, 2), (2, 53)]
*** center 7: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20833249500393866] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20833249500393866, 0.16006347578391433] ***
*** starting iteration: 2; err: [Inf, 0.20833249500393866, 0.16006347578391433] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20833249500393866, 0.16006347578391433, 0.15159266214608214] ***
*** starting iteration: 3; err: [Inf, 0.20833249500393866, 0.16006347578391433, 0.15159266214608214] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20833249500393866, 0.16006347578391433, 0.15159266214608214, 0.15034700688626618] ***
*** finished computation of 7 references, err: [Inf, 0.20833249500393866, 0.16006347578391433, 0.15159266214608214, 0.15034700688626618] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [60, 6, 0]]
** centroid: 1, normalized-entropy: 0.43949698692151346, [(1, 60), (2, 6)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 41, 22]]
** centroid: 2, normalized-entropy: 0.9333572600179806, [(2, 41), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [68, 3, 0]]
** centroid: 3, normalized-entropy: 0.25253077151613923, [(1, 68), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [80, 5, 0]]
** centroid: 4, normalized-entropy: 0.32275695889739825, [(1, 80), (2, 5)]
*** center 5: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [4, 62, 0]]
** centroid: 6, normalized-entropy: 0.32984607020714635, [(1, 4), (2, 62)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 76, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20070473893545568] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20070473893545568, 0.15377218363434075] ***
*** starting iteration: 2; err: [Inf, 0.20070473893545568, 0.15377218363434075] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20070473893545568, 0.15377218363434075, 0.14689221038296818] ***
*** starting iteration: 3; err: [Inf, 0.20070473893545568, 0.15377218363434075, 0.14689221038296818] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20070473893545568, 0.15377218363434075, 0.14689221038296818, 0.14512953604385256] ***
*** finished computation of 7 references, err: [Inf, 0.20070473893545568, 0.15377218363434075, 0.14689221038296818, 0.14512953604385256] ***
*** center 1: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [84, 2, 0]]
** centroid: 2, normalized-entropy: 0.15935006268563429, [(1, 84), (2, 2)]
*** center 3: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 25, 19]]
** centroid: 4, normalized-entropy: 0.9865446300055647, [(2, 25), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [61, 9, 0]]
** centroid: 5, normalized-entropy: 0.5535072654547254, [(1, 61), (2, 9)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 68, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [5, 67, 0]]
** centroid: 7, normalized-entropy: 0.3638469981769295, [(1, 5), (2, 67)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19189434638246894] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19189434638246894, 0.15648940947465598] ***
*** starting iteration: 2; err: [Inf, 0.19189434638246894, 0.15648940947465598] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19189434638246894, 0.15648940947465598, 0.15265444291755556] ***
*** starting iteration: 3; err: [Inf, 0.19189434638246894, 0.15648940947465598, 0.15265444291755556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19189434638246894, 0.15648940947465598, 0.15265444291755556, 0.15214539312198758] ***
*** finished computation of 7 references, err: [Inf, 0.19189434638246894, 0.15648940947465598, 0.15265444291755556, 0.15214539312198758] ***
*** center 1: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 47, 23]]
** centroid: 2, normalized-entropy: 0.9134601452569628, [(2, 47), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [48, 18, 0]]
** centroid: 3, normalized-entropy: 0.8453509366224364, [(1, 48), (2, 18)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [12, 54, 0]]
** centroid: 4, normalized-entropy: 0.6840384356390419, [(1, 12), (2, 54)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [18, 52, 0]]
** centroid: 5, normalized-entropy: 0.8224042259549892, [(1, 18), (2, 52)]
*** center 6: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2034704222716391] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2034704222716391, 0.15716259182104841] ***
*** starting iteration: 2; err: [Inf, 0.2034704222716391, 0.15716259182104841] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2034704222716391, 0.15716259182104841, 0.15195674186013639] ***
*** starting iteration: 3; err: [Inf, 0.2034704222716391, 0.15716259182104841, 0.15195674186013639] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2034704222716391, 0.15716259182104841, 0.15195674186013639, 0.15115252338536084] ***
*** finished computation of 7 references, err: [Inf, 0.2034704222716391, 0.15716259182104841, 0.15195674186013639, 0.15115252338536084] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [75, 19, 0]]
** centroid: 1, normalized-entropy: 0.7261630586710504, [(1, 75), (2, 19)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [40, 4, 0]]
** centroid: 2, normalized-entropy: 0.43949698692151346, [(1, 40), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 62, 21]]
** centroid: 3, normalized-entropy: 0.8160172973428256, [(2, 62), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [49, 23, 0]]
** centroid: 5, normalized-entropy: 0.9037762882345833, [(1, 49), (2, 23)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 72, 0]]
** centroid: 6, normalized-entropy: 0.24229218908241482, [(1, 3), (2, 72)]
*** center 7: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18336306096985935] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18336306096985935, 0.15249730857741087] ***
*** starting iteration: 2; err: [Inf, 0.18336306096985935, 0.15249730857741087] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18336306096985935, 0.15249730857741087, 0.14702949894592166] ***
*** starting iteration: 3; err: [Inf, 0.18336306096985935, 0.15249730857741087, 0.14702949894592166] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18336306096985935, 0.15249730857741087, 0.14702949894592166, 0.1454966016449034] ***
*** finished computation of 7 references, err: [Inf, 0.18336306096985935, 0.15249730857741087, 0.14702949894592166, 0.1454966016449034] ***
*** center 1: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 53, 14]]
** centroid: 2, normalized-entropy: 0.7394809367166378, [(2, 53), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [44, 18, 0]]
** centroid: 3, normalized-entropy: 0.8691375806126381, [(1, 44), (2, 18)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [6, 58, 0]]
** centroid: 4, normalized-entropy: 0.44886448872302936, [(1, 6), (2, 58)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [25, 66, 0]]
** centroid: 5, normalized-entropy: 0.8481636883083004, [(1, 25), (2, 66)]
*** center 6: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17615255250036715] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17615255250036715, 0.15486728850379586] ***
*** starting iteration: 2; err: [Inf, 0.17615255250036715, 0.15486728850379586] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17615255250036715, 0.15486728850379586, 0.15095332881622017] ***
*** starting iteration: 3; err: [Inf, 0.17615255250036715, 0.15486728850379586, 0.15095332881622017] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17615255250036715, 0.15486728850379586, 0.15095332881622017, 0.14996972075942905] ***
*** finished computation of 7 references, err: [Inf, 0.17615255250036715, 0.15486728850379586, 0.15095332881622017, 0.14996972075942905] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [48, 31, 0]]
** centroid: 1, normalized-entropy: 0.966334094295981, [(1, 48), (2, 31)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [40, 7, 0]]
** centroid: 2, normalized-entropy: 0.607171654871303, [(1, 40), (2, 7)]
*** center 3: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 67, 16]]
** centroid: 4, normalized-entropy: 0.7072324944713736, [(2, 67), (3, 16)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 72, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [83, 2, 0]]
** centroid: 7, normalized-entropy: 0.16082302082246946, [(1, 83), (2, 2)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1838140880651772] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1838140880651772, 0.1509143479252234] ***
*** starting iteration: 2; err: [Inf, 0.1838140880651772, 0.1509143479252234] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1838140880651772, 0.1509143479252234, 0.1482524496060796] ***
*** starting iteration: 3; err: [Inf, 0.1838140880651772, 0.1509143479252234, 0.1482524496060796] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1838140880651772, 0.1509143479252234, 0.1482524496060796, 0.14796983295073732] ***
*** finished computation of 7 references, err: [Inf, 0.1838140880651772, 0.1509143479252234, 0.1482524496060796, 0.14796983295073732] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 67, 17]]
** centroid: 1, normalized-entropy: 0.7266645172796352, [(2, 67), (3, 17)]
*** center 2: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [85, 7, 0]]
** centroid: 5, normalized-entropy: 0.3882389775123619, [(1, 85), (2, 7)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 55, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [18, 53, 0]]
** centroid: 7, normalized-entropy: 0.8168114277045246, [(1, 18), (2, 53)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19600000543612986] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19600000543612986, 0.15596772681176663] ***
*** starting iteration: 2; err: [Inf, 0.19600000543612986, 0.15596772681176663] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19600000543612986, 0.15596772681176663, 0.1490129762655124] ***
*** starting iteration: 3; err: [Inf, 0.19600000543612986, 0.15596772681176663, 0.1490129762655124] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19600000543612986, 0.15596772681176663, 0.1490129762655124, 0.14709099590778352] ***
*** finished computation of 7 references, err: [Inf, 0.19600000543612986, 0.15596772681176663, 0.1490129762655124, 0.14709099590778352] ***
*** center 1: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 42, 25]]
** centroid: 2, normalized-entropy: 0.9530483471581301, [(2, 42), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [43, 6, 0]]
** centroid: 3, normalized-entropy: 0.5363596511250623, [(1, 43), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [86, 2, 0]]
** centroid: 4, normalized-entropy: 0.1564910629057016, [(1, 86), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [14, 67, 0]]
** centroid: 5, normalized-entropy: 0.6641593279528072, [(1, 14), (2, 67)]
*** center 6: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [3, 55, 0]]
** centroid: 7, normalized-entropy: 0.29367630985136944, [(1, 3), (2, 55)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18585983921587468] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18585983921587468, 0.15178608219698073] ***
*** starting iteration: 2; err: [Inf, 0.18585983921587468, 0.15178608219698073] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18585983921587468, 0.15178608219698073, 0.14763098465558142] ***
*** starting iteration: 3; err: [Inf, 0.18585983921587468, 0.15178608219698073, 0.14763098465558142] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18585983921587468, 0.15178608219698073, 0.14763098465558142, 0.1468806513864547] ***
*** finished computation of 7 references, err: [Inf, 0.18585983921587468, 0.15178608219698073, 0.14763098465558142, 0.1468806513864547] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 74, 20]]
** centroid: 1, normalized-entropy: 0.7467366074830678, [(2, 74), (3, 20)]
*** center 2: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [61, 15, 0]]
** centroid: 5, normalized-entropy: 0.7166336117927455, [(1, 61), (2, 15)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 53, 0]]
** centroid: 6, normalized-entropy: 0.13303964861069897, [(1, 1), (2, 53)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [31, 56, 0]]
** centroid: 7, normalized-entropy: 0.9395876193289702, [(1, 31), (2, 56)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18381255432777108] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18381255432777108, 0.1523011874333024] ***
*** starting iteration: 2; err: [Inf, 0.18381255432777108, 0.1523011874333024] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18381255432777108, 0.1523011874333024, 0.1495284389690496] ***
*** starting iteration: 3; err: [Inf, 0.18381255432777108, 0.1523011874333024, 0.1495284389690496] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18381255432777108, 0.1523011874333024, 0.1495284389690496, 0.14862250275630504] ***
*** finished computation of 7 references, err: [Inf, 0.18381255432777108, 0.1523011874333024, 0.1495284389690496, 0.14862250275630504] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 70, 15]]
** centroid: 1, normalized-entropy: 0.6722948170756378, [(2, 70), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [43, 3, 0]]
** centroid: 3, normalized-entropy: 0.3478169135710632, [(1, 43), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [50, 22, 0]]
** centroid: 4, normalized-entropy: 0.887976319515135, [(1, 50), (2, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [75, 16, 0]]
** centroid: 5, normalized-entropy: 0.6708561590207726, [(1, 75), (2, 16)]
*** center 6: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [6, 74, 0]]
** centroid: 7, normalized-entropy: 0.3843115441264972, [(1, 6), (2, 74)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19245309342443942] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19245309342443942, 0.1601715081166476] ***
*** starting iteration: 2; err: [Inf, 0.19245309342443942, 0.1601715081166476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19245309342443942, 0.1601715081166476, 0.1541073784325272] ***
*** starting iteration: 3; err: [Inf, 0.19245309342443942, 0.1601715081166476, 0.1541073784325272] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19245309342443942, 0.1601715081166476, 0.1541073784325272, 0.15208524364233017] ***
*** finished computation of 7 references, err: [Inf, 0.19245309342443942, 0.1601715081166476, 0.1541073784325272, 0.15208524364233017] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [72, 1, 0]]
** centroid: 1, normalized-entropy: 0.1044190780054077, [(1, 72), (2, 1)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 49, 12]]
** centroid: 2, normalized-entropy: 0.7153220528038851, [(2, 49), (3, 12)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [73, 2, 0]]
** centroid: 3, normalized-entropy: 0.1773894531859976, [(1, 73), (2, 2)]
*** center 4: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [16, 55, 0]]
** centroid: 6, normalized-entropy: 0.7698205808588191, [(1, 16), (2, 55)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 66, 0]]
** centroid: 7, normalized-entropy: 0.11190990870168394, [(1, 1), (2, 66)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20526668448001145] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20526668448001145, 0.15573533328436315] ***
*** starting iteration: 2; err: [Inf, 0.20526668448001145, 0.15573533328436315] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20526668448001145, 0.15573533328436315, 0.1484383249953389] ***
*** starting iteration: 3; err: [Inf, 0.20526668448001145, 0.15573533328436315, 0.1484383249953389] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20526668448001145, 0.15573533328436315, 0.1484383249953389, 0.14544516481645406] ***
*** finished computation of 7 references, err: [Inf, 0.20526668448001145, 0.15573533328436315, 0.1484383249953389, 0.14544516481645406] ***
*** center 1: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [58, 6, 0]]
** centroid: 2, normalized-entropy: 0.44886448872302936, [(1, 58), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 46, 15]]
** centroid: 3, normalized-entropy: 0.8047175193210769, [(2, 46), (3, 15)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [49, 8, 0]]
** centroid: 4, normalized-entropy: 0.5851569902762294, [(1, 49), (2, 8)]
*** center 5: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 75, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [18, 54, 0]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(1, 18), (2, 54)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.195206064324826] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.195206064324826, 0.15323978506959976] ***
*** starting iteration: 2; err: [Inf, 0.195206064324826, 0.15323978506959976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.195206064324826, 0.15323978506959976, 0.1479323146920651] ***
*** starting iteration: 3; err: [Inf, 0.195206064324826, 0.15323978506959976, 0.1479323146920651] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.195206064324826, 0.15323978506959976, 0.1479323146920651, 0.14714115282334386] ***
*** finished computation of 7 references, err: [Inf, 0.195206064324826, 0.15323978506959976, 0.1479323146920651, 0.14714115282334386] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [7, 79, 0]]
** centroid: 1, normalized-entropy: 0.40707680632541937, [(1, 7), (2, 79)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [38, 30, 0]]
** centroid: 2, normalized-entropy: 0.9899927915575186, [(1, 38), (2, 30)]
*** center 3: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 55, 24]]
** centroid: 4, normalized-entropy: 0.8858834790484443, [(2, 55), (3, 24)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [49, 13, 0]]
** centroid: 5, normalized-entropy: 0.7408656862339816, [(1, 49), (2, 13)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [70, 10, 0]]
** centroid: 6, normalized-entropy: 0.5435644431995963, [(1, 70), (2, 10)]
*** center 7: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20610812257602812] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20610812257602812, 0.15601220454648138] ***
*** starting iteration: 2; err: [Inf, 0.20610812257602812, 0.15601220454648138] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20610812257602812, 0.15601220454648138, 0.15039865602832286] ***
*** starting iteration: 3; err: [Inf, 0.20610812257602812, 0.15601220454648138, 0.15039865602832286] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20610812257602812, 0.15601220454648138, 0.15039865602832286, 0.14932725529000163] ***
*** finished computation of 7 references, err: [Inf, 0.20610812257602812, 0.15601220454648138, 0.15039865602832286, 0.14932725529000163] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [91, 2, 0]]
** centroid: 1, normalized-entropy: 0.14981136747274781, [(1, 91), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [43, 8, 0]]
** centroid: 2, normalized-entropy: 0.6267511370265896, [(1, 43), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 52, 19]]
** centroid: 3, normalized-entropy: 0.8380078505079931, [(2, 52), (3, 19)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [34, 44, 0]]
** centroid: 4, normalized-entropy: 0.98811083652183, [(1, 34), (2, 44)]
*** center 5: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [6, 62, 0]]
** centroid: 6, normalized-entropy: 0.43055186701043935, [(1, 6), (2, 62)]
*** center 7: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18920326258428394] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18920326258428394, 0.14990787132456898] ***
*** starting iteration: 2; err: [Inf, 0.18920326258428394, 0.14990787132456898] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18920326258428394, 0.14990787132456898, 0.14654289041040466] ***
*** starting iteration: 3; err: [Inf, 0.18920326258428394, 0.14990787132456898, 0.14654289041040466] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18920326258428394, 0.14990787132456898, 0.14654289041040466, 0.14568237558100372] ***
*** finished computation of 7 references, err: [Inf, 0.18920326258428394, 0.14990787132456898, 0.14654289041040466, 0.14568237558100372] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [45, 31, 0]]
** centroid: 1, normalized-entropy: 0.9753817903274211, [(1, 45), (2, 31)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [38, 19, 0]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(1, 38), (2, 19)]
*** center 3: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 66, 18]]
** centroid: 4, normalized-entropy: 0.7495952572594798, [(2, 66), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [23, 68, 0]]
** centroid: 5, normalized-entropy: 0.8156034512499668, [(1, 23), (2, 68)]
*** center 6: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1949871028792113] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1949871028792113, 0.15441977316886188] ***
*** starting iteration: 2; err: [Inf, 0.1949871028792113, 0.15441977316886188] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1949871028792113, 0.15441977316886188, 0.15115960812568666] ***
*** starting iteration: 3; err: [Inf, 0.1949871028792113, 0.15441977316886188, 0.15115960812568666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1949871028792113, 0.15441977316886188, 0.15115960812568666, 0.15028897488862275] ***
*** finished computation of 7 references, err: [Inf, 0.1949871028792113, 0.15441977316886188, 0.15115960812568666, 0.15028897488862275] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [5, 76, 0]]
** centroid: 1, normalized-entropy: 0.33426813256179383, [(1, 5), (2, 76)]
*** center 2: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [51, 6, 0]]
** centroid: 3, normalized-entropy: 0.48546076074591343, [(1, 51), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [83, 3, 0]]
** centroid: 4, normalized-entropy: 0.21832103023746746, [(1, 83), (2, 3)]
*** center 5: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 58, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 37, 18]]
** centroid: 7, normalized-entropy: 0.9121156307204275, [(2, 37), (3, 18)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.216390973970294] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.216390973970294, 0.15874489300698041] ***
*** starting iteration: 2; err: [Inf, 0.216390973970294, 0.15874489300698041] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.216390973970294, 0.15874489300698041, 0.15065206514298915] ***
*** starting iteration: 3; err: [Inf, 0.216390973970294, 0.15874489300698041, 0.15065206514298915] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.216390973970294, 0.15874489300698041, 0.15065206514298915, 0.14892047360539437] ***
*** finished computation of 7 references, err: [Inf, 0.216390973970294, 0.15874489300698041, 0.15065206514298915, 0.14892047360539437] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 63, 16]]
** centroid: 1, normalized-entropy: 0.7269625813353975, [(2, 63), (3, 16)]
*** center 2: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [72, 4, 0]]
** centroid: 3, normalized-entropy: 0.2974722489192896, [(1, 72), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [37, 32, 0]]
** centroid: 4, normalized-entropy: 0.9962088839046743, [(1, 37), (2, 32)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [46, 23, 0]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(1, 46), (2, 23)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 67, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1958616162557155] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1958616162557155, 0.15173672879394143] ***
*** starting iteration: 2; err: [Inf, 0.1958616162557155, 0.15173672879394143] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1958616162557155, 0.15173672879394143, 0.14681827709497883] ***
*** starting iteration: 3; err: [Inf, 0.1958616162557155, 0.15173672879394143, 0.14681827709497883] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1958616162557155, 0.15173672879394143, 0.14681827709497883, 0.14567718691704795] ***
*** finished computation of 7 references, err: [Inf, 0.1958616162557155, 0.15173672879394143, 0.14681827709497883, 0.14567718691704795] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [40, 37, 0]]
** centroid: 1, normalized-entropy: 0.9989047442823606, [(1, 40), (2, 37)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [45, 25, 0]]
** centroid: 2, normalized-entropy: 0.940285958670631, [(1, 45), (2, 25)]
*** center 3: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 71, 22]]
** centroid: 4, normalized-entropy: 0.7892712724536985, [(2, 71), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [24, 47, 0]]
** centroid: 5, normalized-entropy: 0.9229192878686723, [(1, 24), (2, 47)]
*** center 6: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20408794942125677] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20408794942125677, 0.1585748319812119] ***
*** starting iteration: 2; err: [Inf, 0.20408794942125677, 0.1585748319812119] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20408794942125677, 0.1585748319812119, 0.15378086979594083] ***
*** starting iteration: 3; err: [Inf, 0.20408794942125677, 0.1585748319812119, 0.15378086979594083] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20408794942125677, 0.1585748319812119, 0.15378086979594083, 0.152237658534199] ***
*** finished computation of 7 references, err: [Inf, 0.20408794942125677, 0.1585748319812119, 0.15378086979594083, 0.152237658534199] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 62, 18]]
** centroid: 1, normalized-entropy: 0.7691928290130138, [(2, 62), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [74, 3, 0]]
** centroid: 3, normalized-entropy: 0.23750814382859295, [(1, 74), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [40, 38, 0]]
** centroid: 4, normalized-entropy: 0.9995256892936492, [(1, 40), (2, 38)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [44, 21, 0]]
** centroid: 5, normalized-entropy: 0.9076961653608385, [(1, 44), (2, 21)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 56, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20238998398091643] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20238998398091643, 0.15391595256421714] ***
*** starting iteration: 2; err: [Inf, 0.20238998398091643, 0.15391595256421714] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20238998398091643, 0.15391595256421714, 0.1501838470622897] ***
*** starting iteration: 3; err: [Inf, 0.20238998398091643, 0.15391595256421714, 0.1501838470622897] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20238998398091643, 0.15391595256421714, 0.1501838470622897, 0.1496250251084566] ***
*** finished computation of 7 references, err: [Inf, 0.20238998398091643, 0.15391595256421714, 0.1501838470622897, 0.1496250251084566] ***
*** center 1: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 67, 15]]
** centroid: 2, normalized-entropy: 0.6864381668766382, [(2, 67), (3, 15)]
*** center 3: selecting labels [1] (freq >= 1) [from [41, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [60, 35, 0]]
** centroid: 4, normalized-entropy: 0.9494520153879484, [(1, 60), (2, 35)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [28, 47, 0]]
** centroid: 5, normalized-entropy: 0.9531971725430559, [(1, 28), (2, 47)]
*** center 6: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 48, 0]]
** centroid: 7, normalized-entropy: 0.14372616993938164, [(1, 1), (2, 48)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1941705438850913] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1941705438850913, 0.1586832967279479] ***
*** starting iteration: 2; err: [Inf, 0.1941705438850913, 0.1586832967279479] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1941705438850913, 0.1586832967279479, 0.15282598490454258] ***
*** starting iteration: 3; err: [Inf, 0.1941705438850913, 0.1586832967279479, 0.15282598490454258] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1941705438850913, 0.1586832967279479, 0.15282598490454258, 0.14965699842199684] ***
*** finished computation of 7 references, err: [Inf, 0.1941705438850913, 0.1586832967279479, 0.15282598490454258, 0.14965699842199684] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [83, 9, 0]]
** centroid: 1, normalized-entropy: 0.4620663276355394, [(1, 83), (2, 9)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [47, 9, 0]]
** centroid: 2, normalized-entropy: 0.6360156177392153, [(1, 47), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 66, 15]]
** centroid: 3, normalized-entropy: 0.6912898694057888, [(2, 66), (3, 15)]
*** center 4: selecting labels [1] (freq >= 1) [from [67, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [1, 69, 0]]
** centroid: 5, normalized-entropy: 0.10802319526362848, [(1, 1), (2, 69)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [27, 26, 0]]
** centroid: 6, normalized-entropy: 0.9997431860710851, [(1, 27), (2, 26)]
*** center 7: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20219574850983918] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20219574850983918, 0.15510413569770753] ***
*** starting iteration: 2; err: [Inf, 0.20219574850983918, 0.15510413569770753] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20219574850983918, 0.15510413569770753, 0.14905498249456287] ***
*** starting iteration: 3; err: [Inf, 0.20219574850983918, 0.15510413569770753, 0.14905498249456287] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20219574850983918, 0.15510413569770753, 0.14905498249456287, 0.1472757317237556] ***
*** finished computation of 7 references, err: [Inf, 0.20219574850983918, 0.15510413569770753, 0.14905498249456287, 0.1472757317237556] ***
*** center 1: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [77, 1, 0]]
** centroid: 2, normalized-entropy: 0.098959095355743, [(1, 77), (2, 1)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 47, 15]]
** centroid: 3, normalized-entropy: 0.7982441335646697, [(2, 47), (3, 15)]
*** center 4: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [66, 4, 0]]
** centroid: 5, normalized-entropy: 0.3159971329784246, [(1, 66), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 66, 0]]
** centroid: 6, normalized-entropy: 0.11190990870168394, [(1, 1), (2, 66)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 66, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19520063840225338] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19520063840225338, 0.15892163805477322] ***
*** starting iteration: 2; err: [Inf, 0.19520063840225338, 0.15892163805477322] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19520063840225338, 0.15892163805477322, 0.1554510900825262] ***
*** starting iteration: 3; err: [Inf, 0.19520063840225338, 0.15892163805477322, 0.1554510900825262] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19520063840225338, 0.15892163805477322, 0.1554510900825262, 0.15427225970849395] ***
*** finished computation of 7 references, err: [Inf, 0.19520063840225338, 0.15892163805477322, 0.1554510900825262, 0.15427225970849395] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 94, 19]]
** centroid: 1, normalized-entropy: 0.6534358224760193, [(2, 94), (3, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [43, 2, 0]]
** centroid: 3, normalized-entropy: 0.2623112196143368, [(1, 43), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [43, 27, 0]]
** centroid: 4, normalized-entropy: 0.9619780596506257, [(1, 43), (2, 27)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [68, 7, 0]]
** centroid: 5, normalized-entropy: 0.44749925503686355, [(1, 68), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [68, 5, 0]]
** centroid: 6, normalized-entropy: 0.3602750564216625, [(1, 68), (2, 5)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 63, 0]]
finished with 8 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 364,3 => 36,1 => 600), Dict(2 => 366,3 => 41,1 => 593))
[ Info: ===== scores for single classifier: {"micro_f1":0.94,"precision":0.94,"recall":0.94,"macro_recall":0.6518029100894774,"macro_f1":0.635307339770501,"accuracy":0.94,"class_f1":{"2":0.9218749999999999,"3":0.0,"1":0.984047019311503},"class_precision":{"2":0.8805970149253731,"3":0.0,"1":0.979933110367893},"class_recall":{"2":0.9672131147540983,"3":0.0,"1":0.9881956155143339}}
[ Info: ===== scores for 1: {"micro_f1":0.984,"precision":0.984,"recall":0.984,"macro_recall":0.9730811816176658,"macro_f1":0.9804525215727402,"accuracy":0.984,"class_f1":{"2":0.9781420765027322,"3":0.975,"1":0.9882154882154882},"class_precision":{"2":0.9781420765027322,"3":1.0,"1":0.9865546218487395},"class_recall":{"2":0.9781420765027322,"3":0.9512195121951219,"1":0.9898819561551433}}
[ Info: ===== scores for 5: {"micro_f1":0.9810000000000001,"precision":0.981,"recall":0.981,"macro_recall":0.9479936711843275,"macro_f1":0.9657760588521063,"accuracy":0.981,"class_f1":{"2":0.9740082079343365,"3":0.9350649350649352,"1":0.988255033557047},"class_precision":{"2":0.9753424657534246,"3":1.0,"1":0.9833055091819699},"class_recall":{"2":0.9726775956284153,"3":0.8780487804878049,"1":0.9932546374367622}}
[ Info: ===== scores for 7: {"micro_f1":0.98,"precision":0.98,"recall":0.98,"macro_recall":0.9402122231489641,"macro_f1":0.9606799897644415,"accuracy":0.98,"class_f1":{"2":0.9727520435967302,"3":0.9210526315789475,"1":0.988235294117647},"class_precision":{"2":0.970108695652174,"3":1.0,"1":0.9849246231155779},"class_recall":{"2":0.9754098360655737,"3":0.8536585365853658,"1":0.9915682967959528}}
[ Info: ===== scores for 9: {"micro_f1":0.973,"precision":0.973,"recall":0.973,"macro_recall":0.9197469597508571,"macro_f1":0.9463769101823738,"accuracy":0.973,"class_f1":{"2":0.9631650750341064,"3":0.8918918918918919,"1":0.9840737636211233},"class_precision":{"2":0.9618528610354223,"3":1.0,"1":0.9783333333333334},"class_recall":{"2":0.9644808743169399,"3":0.8048780487804879,"1":0.9898819561551433}}
[ Info: precision is zero for label '3'; #classes=3 
[ Info: ===== scores for 11: {"micro_f1":0.942,"precision":0.942,"recall":0.942,"macro_recall":0.6529271371833504,"macro_f1":0.6366773979633152,"accuracy":0.942,"class_f1":{"2":0.9242819843342036,"3":0.0,"1":0.9857502095557419},"class_precision":{"2":0.885,"3":0.0,"1":0.98},"class_recall":{"2":0.9672131147540983,"3":0.0,"1":0.9915682967959528}}
(score = 0.982, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.982, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.984, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.984, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.984, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.984, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.985, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.985, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.982, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.982, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.981, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.981, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.979, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.979, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.98, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.98, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.985,"k":3,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.985,"precision":0.985,"recall":0.985,"macro_recall":0.9664239606761754,"macro_f1":0.9771534863838042,"accuracy":0.985,"class_f1":{"2":0.9795361527967258,"3":0.9620253164556963,"1":0.9898989898989901},"class_precision":{"2":0.9782016348773842,"3":1.0,"1":0.9882352941176471},"class_recall":{"2":0.9808743169398907,"3":0.926829268292683,"1":0.9915682967959528}}
Test Summary: | Pass  Total
AKNC          |    8      8
[13, 3, 2, 1, 1, 2, 5, 3, 3, 2, 1, 4, 22, 5, 9, 2, 6, 2, 2, 9, 3, 24, 55, 1, 2, 7, 20, 4, 3, 6, 50, 9, 21, 19, 4, 14, 24, 38, 16, 4, 40, 13, 6, 27, 8, 6, 4, 8, 21, 1, 5, 7, 3, 18, 4, 3, 16, 9, 31, 6, 42, 5, 24, 8, 13, 5, 28, 1, 6, 15, 40, 6, 6, 20, 23, 19, 7, 5, 17, 17, 9, 3, 6, 37, 42, 35, 2, 11, 4, 13, 12, 5, 13, 2, 3, 12, 10, 21, 8, 1793, 55, 22, 7, 51, 21, 25, 84, 3, 67, 12, 2, 3, 26, 40, 54, 71, 6, 4, 21, 5, 14, 4, 44, 35, 8, 75, 10, 12, 15, 4, 42, 4, 7, 27, 37, 60, 49, 134, 11, 17, 31, 34, 17, 10, 42, 25, 47, 19, 10, 4, 3, 72, 11, 4, 25, 1, 10, 14, 4, 13, 9, 25, 35, 1, 16, 10, 24, 35, 65, 7, 2, 14, 69, 8, 9, 5, 3, 7, 10, 136, 51, 18, 37, 41, 105, 3, 12, 6, 13, 28, 128, 2, 11, 37, 26, 5, 79, 54, 7, 4, 9, 95, 31, 44, 9, 38, 6, 8, 9, 9, 50, 39, 12, 47, 43, 8, 9, 167, 38, 36, 10, 23, 1, 50, 35, 55, 14, 23, 7, 36, 160, 45, 8, 4, 2, 19, 22, 15, 15, 156, 64, 96, 8, 20, 12, 47, 44, 7, 140, 17, 8, 18, 33, 4, 55, 313, 38, 10, 179, 212, 21, 33, 20, 10, 27, 60, 18, 65, 16, 15, 5, 81, 23, 8, 29, 5, 3, 31, 47, 70, 63, 152, 89, 12, 43, 12, 59, 66, 75, 13, 14, 41, 34, 53, 72, 65, 23, 18, 21, 10]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6729999999999998, speedup = 0.21033876348590816, eval_ratio = 0.10386300000000001)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.4022879464285714,"recall":0.3828125,"f1":null,"seconds":0.00032245926558971405,"exhaustive_search_seconds":0.00040039047598838806,"evaluations":731.4296875,"distances_sum":1696.1096262407405}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5667162698412699,"recall":0.5659722222222222,"f1":null,"seconds":0.0009245015680789948,"exhaustive_search_seconds":0.00040039047598838806,"evaluations":990.671875,"distances_sum":1662.815335332735}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6588541666666664,"recall":0.6588541666666664,"f1":null,"seconds":0.0005956031382083893,"exhaustive_search_seconds":0.00040039047598838806,"evaluations":1113.09375,"distances_sum":1610.6682611822127}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7361111111111104,"recall":0.7361111111111104,"f1":0.7361111111111104,"seconds":0.0009552650153636932,"exhaustive_search_seconds":0.00040039047598838806,"evaluations":1270.2734375,"distances_sum":1579.431967283585}
KCenters.DeloneInvIndex> reached performance {"precision":0.8003472222222213,"recall":0.8003472222222213,"f1":0.8003472222222213,"seconds":0.0008538365364074707,"exhaustive_search_seconds":0.00040039047598838806,"evaluations":1455.703125,"distances_sum":1554.550634740843}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8020000000000006, speedup = 0.3711333823664158, eval_ratio = 0.13288699999999998)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
