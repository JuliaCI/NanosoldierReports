Julia Version 1.6.0-DEV.120
Commit 39fc4eec54 (2020-05-28 16:58 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed PooledArrays ──────────────── v0.5.3
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Missings ──────────────────── v0.4.3
  Installed Compat ────────────────────── v3.10.0
  Installed KCenters ──────────────────── v0.2.2
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed StatsBase ─────────────────── v0.32.2
  Installed SimilaritySearch ──────────── v0.3.19
  Installed DataAPI ───────────────────── v1.3.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed InvertedIndices ───────────── v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed MLDataUtils ───────────────── v0.5.1
  Installed OrderedCollections ────────── v1.2.0
  Installed Reexport ──────────────────── v0.2.0
  Installed TableTraits ───────────────── v1.0.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed MLDataPattern ─────────────── v0.5.3
  Installed DataFrames ────────────────── v0.20.2
  Installed Tables ────────────────────── v1.0.4
  Installed JSON ──────────────────────── v0.21.0
  Installed Parsers ───────────────────── v1.0.4
  Installed DataStructures ────────────── v0.17.17
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.10.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.17
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.4
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_t8aWDW/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_t8aWDW/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.10.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.17
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.4
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9360659371813138
[ Info: 0.8326150393486023
[ Info: 0.5546240802109241
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.32982491600016756
mean(cdnet.distances) = 0.39654180735349653
mean(crand.distances) = 0.34446653053164483
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.791015625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.791015625,"f1":0.8781510156510165,"seconds":5.584210157394409e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.8984375,"distances_sum":2130.1227987162256}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5634765625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5634765625,"f1":null,"seconds":5.211681127548218e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":7.6796875,"distances_sum":1500.122848420417}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.791015625,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.791015625,"f1":0.8781510156510165,"seconds":5.584210157394409e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.8984375,"distances_sum":2130.1227987162256}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.85546875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.85546875,"f1":0.9174767940392949,"seconds":5.835667252540588e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.953125,"distances_sum":2398.278576486449}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9367476273726278,"seconds":5.980953574180603e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.8828125,"distances_sum":2536.570951986104}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.802734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.802734375,"f1":0.8840295121545128,"seconds":5.183741450309753e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.8671875,"distances_sum":2155.5807828488455}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8916015625,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8916015625,"f1":0.9367476273726278,"seconds":5.980953574180603e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.8828125,"distances_sum":2536.570951986104}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9432520604395612,"seconds":4.725530743598938e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.921875,"distances_sum":2553.0373672762075}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9665579212454217,"seconds":4.600733518600464e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.9296875,"distances_sum":2745.8363765275153}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9490415834165837,"seconds":4.6174973249435425e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.90625,"distances_sum":2642.356551910478}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9404296875,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9665579212454217,"seconds":4.600733518600464e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.9296875,"distances_sum":2745.8363765275153}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9404296875,"state":{"ssize":4,"bsize":10},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9665579212454217,"seconds":4.600733518600464e-6,"exhaustive_search_seconds":1.4547258615493774e-6,"evaluations":8.9296875,"distances_sum":2745.8363765275153}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.37890625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.37890625,"f1":null,"seconds":3.375113010406494e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":6.1796875,"distances_sum":931.9011755686886}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.8703359140859147,"seconds":5.239620804786682e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.828125,"distances_sum":1964.9465302763886}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78125,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.78125,"f1":0.8703359140859147,"seconds":5.239620804786682e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.828125,"distances_sum":1964.9465302763886}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8095703125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8095703125,"f1":0.8865192099567105,"seconds":5.6549906730651855e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.890625,"distances_sum":2067.709818760543}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9345524267399274,"seconds":5.85801899433136e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.8984375,"distances_sum":2377.102123930873}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9489812271062276,"seconds":5.820766091346741e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.8828125,"distances_sum":2485.7378640148077}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91015625,"f1":0.9489812271062276,"seconds":5.820766091346741e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.8828125,"distances_sum":2485.7378640148077}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9766197344322349,"seconds":6.156042218208313e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.96875,"distances_sum":2694.7750780181377}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9561813186813191,"seconds":5.912035703659058e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.90625,"distances_sum":2547.9950221323934}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9684383325008327,"seconds":4.390254616737366e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.8984375,"distances_sum":2648.363834777249}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9766197344322349,"seconds":6.156042218208313e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.96875,"distances_sum":2694.7750780181377}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9766197344322349,"seconds":6.156042218208313e-6,"exhaustive_search_seconds":1.469627022743225e-6,"evaluations":8.96875,"distances_sum":2694.7750780181377}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.44921875, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.44921875,"f1":null,"seconds":3.7048012018203735e-6,"exhaustive_search_seconds":1.0784715414047241e-6,"evaluations":7.0234375,"distances_sum":995.9541587227048}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7958984375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7958984375,"f1":0.8793019480519488,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.0784715414047241e-6,"evaluations":8.7265625,"distances_sum":1974.9216088139042}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7958984375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7958984375,"f1":0.8793019480519488,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.0784715414047241e-6,"evaluations":8.7265625,"distances_sum":1974.9216088139042}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9663518772893777,"seconds":6.195157766342163e-6,"exhaustive_search_seconds":1.0784715414047241e-6,"evaluations":8.953125,"distances_sum":2554.4271426658943}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9663518772893777,"seconds":6.195157766342163e-6,"exhaustive_search_seconds":1.0784715414047241e-6,"evaluations":8.953125,"distances_sum":2554.4271426658943}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.975280448717949,"seconds":5.815178155899048e-6,"exhaustive_search_seconds":1.0784715414047241e-6,"evaluations":8.9765625,"distances_sum":2611.227096670504}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.975280448717949,"seconds":5.815178155899048e-6,"exhaustive_search_seconds":1.0784715414047241e-6,"evaluations":8.9765625,"distances_sum":2611.227096670504}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.975280448717949,"seconds":5.815178155899048e-6,"exhaustive_search_seconds":1.0784715414047241e-6,"evaluations":8.9765625,"distances_sum":2611.227096670504}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.70703125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.70703125,"f1":0.8202386155511164,"seconds":4.783272743225098e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.1875,"distances_sum":1719.5748213903871}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.21875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.21875,"f1":null,"seconds":3.1422823667526245e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":5.90625,"distances_sum":541.0680351032087}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.70703125,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.70703125,"f1":0.8202386155511164,"seconds":4.783272743225098e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.1875,"distances_sum":1719.5748213903871}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9559409340659344,"seconds":5.695968866348267e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.890625,"distances_sum":2541.2169552949767}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.9001092657342664,"seconds":5.422160029411316e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.765625,"distances_sum":2113.7095547681893}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.8702469405594414,"seconds":5.0961971282958984e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.4765625,"distances_sum":1967.5874066317576}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9559409340659344,"seconds":5.695968866348267e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.890625,"distances_sum":2541.2169552949767}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9708905677655679,"seconds":4.161149263381958e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.9375,"distances_sum":2637.1424224483926}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9649381868131872,"seconds":5.420297384262085e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.9609375,"distances_sum":2572.0553422224075}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9719894688644692,"seconds":6.0480087995529175e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.96875,"distances_sum":2654.2086491278797}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9719894688644692,"seconds":6.0480087995529175e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.96875,"distances_sum":2654.2086491278797}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9719894688644692,"seconds":6.0480087995529175e-6,"exhaustive_search_seconds":1.1641532182693481e-6,"evaluations":8.96875,"distances_sum":2654.2086491278797}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5859375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5859375,"f1":null,"seconds":4.589557647705078e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.234375,"distances_sum":1332.5344672981105}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.8469129828504838,"seconds":5.491077899932861e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.296875,"distances_sum":1821.1373302264803}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1796875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1796875,"f1":null,"seconds":3.2205134630203247e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":5.578125,"distances_sum":409.4844474871479}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7509765625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7509765625,"f1":0.8469129828504838,"seconds":5.491077899932861e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.296875,"distances_sum":1821.1373302264803}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8620858308358317,"seconds":5.124136805534363e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.3671875,"distances_sum":1883.2771258487599}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76953125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.76953125,"f1":0.8620858308358317,"seconds":5.124136805534363e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.3671875,"distances_sum":1883.2771258487599}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.921677801365302,"seconds":5.075708031654358e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.65625,"distances_sum":2251.1586659158284}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9532795329670335,"seconds":5.982816219329834e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.8515625,"distances_sum":2450.829501912179}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8203125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8203125,"f1":0.8950325715950724,"seconds":5.7425349950790405e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.6171875,"distances_sum":2056.0887196743324}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9532795329670335,"seconds":5.982816219329834e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.8515625,"distances_sum":2450.829501912179}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91796875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9532795329670335,"seconds":5.982816219329834e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.8515625,"distances_sum":2450.829501912179}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.1826171875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.1826171875,"f1":null,"seconds":3.3136457204818726e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":5.2578125,"distances_sum":477.39503449845097}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.1826171875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.1826171875,"f1":null,"seconds":3.3136457204818726e-6,"exhaustive_search_seconds":1.5534460544586182e-6,"evaluations":5.2578125,"distances_sum":477.39503449845097}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.359375, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.359375,"f1":null,"seconds":4.161149263381958e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":6.0625,"distances_sum":864.9253645236619}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.359375,"state":{"ssize":4,"bsize":2},"perf":{"precision":null,"recall":0.359375,"f1":null,"seconds":4.161149263381958e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":6.0625,"distances_sum":864.9253645236619}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.533203125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.533203125,"f1":0.6768864815739821,"seconds":4.453584551811218e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.0703125,"distances_sum":1343.3540999586835}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.533203125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.533203125,"f1":0.6768864815739821,"seconds":4.453584551811218e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.0703125,"distances_sum":1343.3540999586835}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.9214145229770235,"seconds":4.319474101066589e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.578125,"distances_sum":2467.6196315309253}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.71875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.71875,"f1":0.8253813894438903,"seconds":3.883615136146545e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.9609375,"distances_sum":1930.424163671832}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5712890625, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5712890625,"f1":0.7080514971139976,"seconds":4.045665264129639e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.4765625,"distances_sum":1473.766299980302}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.638671875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.638671875,"f1":0.7657465798090806,"seconds":4.505738615989685e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":7.2578125,"distances_sum":1662.7872676476588}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.736328125, conf: {"ssize":12,"bsize":5}, perf: {"precision":1.0,"recall":0.736328125,"f1":0.8388970404595413,"seconds":5.1818788051605225e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.140625,"distances_sum":1947.221575813371}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8671875,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.8671875,"f1":0.9214145229770235,"seconds":4.319474101066589e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.578125,"distances_sum":2467.6196315309253}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8671875,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.8671875,"f1":0.9214145229770235,"seconds":4.319474101066589e-6,"exhaustive_search_seconds":1.4603137969970703e-6,"evaluations":8.578125,"distances_sum":2467.6196315309253}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5703125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5703125,"f1":null,"seconds":4.153698682785034e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":6.8046875,"distances_sum":1238.8629575240334}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5703125,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5703125,"f1":null,"seconds":4.153698682785034e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":6.8046875,"distances_sum":1238.8629575240334}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.830078125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.830078125,"f1":0.9001430860805868,"seconds":5.763024091720581e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.3359375,"distances_sum":2081.5847644745427}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.830078125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.830078125,"f1":0.9001430860805868,"seconds":5.763024091720581e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.3359375,"distances_sum":2081.5847644745427}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9523351648351656,"seconds":6.096437573432922e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.7734375,"distances_sum":2447.6834651200907}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8974609375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8974609375,"f1":0.9405219780219785,"seconds":5.820766091346741e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.671875,"distances_sum":2345.706644815027}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9523351648351656,"seconds":6.096437573432922e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.7734375,"distances_sum":2447.6834651200907}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.916015625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.9523351648351656,"seconds":6.096437573432922e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.7734375,"distances_sum":2447.6834651200907}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.30859375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.30859375,"f1":null,"seconds":3.4943222999572754e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":4.6875,"distances_sum":727.404779844785}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.30859375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.30859375,"f1":null,"seconds":3.4943222999572754e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":4.6875,"distances_sum":727.404779844785}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.9030849358974365,"seconds":5.556270480155945e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.453125,"distances_sum":2101.079182208908}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8369140625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8369140625,"f1":0.9030849358974365,"seconds":5.556270480155945e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.453125,"distances_sum":2101.079182208908}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9366560522810528,"seconds":5.753710865974426e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.703125,"distances_sum":2339.2515297296873}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8916015625,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.8916015625,"f1":0.9366560522810528,"seconds":5.753710865974426e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.703125,"distances_sum":2339.2515297296873}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8916015625,"state":{"ssize":3,"bsize":8},"perf":{"precision":1.0,"recall":0.8916015625,"f1":0.9366560522810528,"seconds":5.753710865974426e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.703125,"distances_sum":2339.2515297296873}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6796875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6796875,"f1":0.7999526515151524,"seconds":4.9639493227005005e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.6484375,"distances_sum":1651.9850096413907}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.390625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.390625,"f1":null,"seconds":3.905966877937317e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":5.609375,"distances_sum":852.4925812785059}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6796875,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6796875,"f1":0.7999526515151524,"seconds":4.9639493227005005e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":7.6484375,"distances_sum":1651.9850096413907}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9300022893772898,"seconds":5.707144737243652e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.5859375,"distances_sum":2300.1603918907927}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8798828125,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.8798828125,"f1":0.9300022893772898,"seconds":5.707144737243652e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.5859375,"distances_sum":2300.1603918907927}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9365670787545792,"seconds":5.124136805534363e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.6484375,"distances_sum":2357.1755389619307}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":8,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9635130494505499,"seconds":5.738809704780579e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8046875,"distances_sum":2505.644173633547}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.935546875,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9635130494505499,"seconds":5.738809704780579e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8046875,"distances_sum":2505.644173633547}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.935546875,"state":{"ssize":8,"bsize":10},"perf":{"precision":1.0,"recall":0.935546875,"f1":0.9635130494505499,"seconds":5.738809704780579e-6,"exhaustive_search_seconds":1.428648829460144e-6,"evaluations":8.8046875,"distances_sum":2505.644173633547}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5869140625, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5869140625,"f1":0.726792825230326,"seconds":4.120171070098877e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":7.0859375,"distances_sum":1319.1640406080867}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.439453125, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.439453125,"f1":null,"seconds":3.4905970096588135e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":5.9453125,"distances_sum":965.0005803115631}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5869140625,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5869140625,"f1":0.726792825230326,"seconds":4.120171070098877e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":7.0859375,"distances_sum":1319.1640406080867}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6767578125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6767578125,"f1":0.796572698135199,"seconds":3.157183527946472e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":7.2421875,"distances_sum":1559.3956736553025}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9399095695970703,"seconds":4.122033715248108e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.7734375,"distances_sum":2360.0989416890457}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5947265625, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5947265625,"f1":0.7339283979908987,"seconds":3.248453140258789e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":7.0546875,"distances_sum":1327.0885708962805}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8310546875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8310546875,"f1":0.900948010323011,"seconds":5.330890417098999e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.3984375,"distances_sum":2113.1826641458388}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.728515625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.728515625,"f1":0.8352397602397612,"seconds":4.5727938413619995e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":7.75,"distances_sum":1733.081745693427}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.892578125,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.892578125,"f1":0.9399095695970703,"seconds":4.122033715248108e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.7734375,"distances_sum":2360.0989416890457}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9726934523809527,"seconds":5.841255187988281e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.921875,"distances_sum":2623.0967432932916}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9651614010989016,"seconds":5.736947059631348e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.90625,"distances_sum":2540.3568357891436}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9664835164835168,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.8984375,"distances_sum":2569.527021126917}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9548992673992681,"seconds":5.554407835006714e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.828125,"distances_sum":2498.533797558204}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9726934523809527,"seconds":5.841255187988281e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.921875,"distances_sum":2623.0967432932916}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9726934523809527,"seconds":5.841255187988281e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.921875,"distances_sum":2623.0967432932916}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5439453125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5439453125,"f1":0.6873043623043628,"seconds":4.092231392860413e-6,"exhaustive_search_seconds":1.0225921869277954e-6,"evaluations":6.9140625,"distances_sum":1243.5323983845078}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7822265625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7822265625,"f1":0.8685023310023318,"seconds":5.034729838371277e-6,"exhaustive_search_seconds":1.0225921869277954e-6,"evaluations":8.21875,"distances_sum":1954.7915247072951}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7822265625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7822265625,"f1":0.8685023310023318,"seconds":5.034729838371277e-6,"exhaustive_search_seconds":1.0225921869277954e-6,"evaluations":8.21875,"distances_sum":1954.7915247072951}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8271484375, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8271484375,"f1":0.8955960705960713,"seconds":4.861503839492798e-6,"exhaustive_search_seconds":1.0225921869277954e-6,"evaluations":8.2890625,"distances_sum":2134.1287401319287}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9352793040293049,"seconds":5.183741450309753e-6,"exhaustive_search_seconds":1.0225921869277954e-6,"evaluations":8.625,"distances_sum":2379.709479379391}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8923050907425913,"seconds":4.941597580909729e-6,"exhaustive_search_seconds":1.0225921869277954e-6,"evaluations":8.2890625,"distances_sum":2109.7236417703243}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.888671875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.888671875,"f1":0.9352793040293049,"seconds":5.183741450309753e-6,"exhaustive_search_seconds":1.0225921869277954e-6,"evaluations":8.625,"distances_sum":2379.709479379391}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9697573260073267,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.0225921869277954e-6,"evaluations":8.9140625,"distances_sum":2556.4040667964546}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9699977106227111,"seconds":5.5655837059021e-6,"exhaustive_search_seconds":1.0225921869277954e-6,"evaluations":8.8671875,"distances_sum":2559.9314359975597}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9657222985347991,"seconds":5.641952157020569e-6,"exhaustive_search_seconds":1.0225921869277954e-6,"evaluations":8.859375,"distances_sum":2534.47329297992}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9580242673992679,"seconds":5.202367901802063e-6,"exhaustive_search_seconds":1.0225921869277954e-6,"evaluations":8.7734375,"distances_sum":2494.4435290224715}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9479452838827844,"seconds":5.144625902175903e-6,"exhaustive_search_seconds":1.0225921869277954e-6,"evaluations":8.6796875,"distances_sum":2469.8779363578537}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9432577838827845,"seconds":4.971399903297424e-6,"exhaustive_search_seconds":1.0225921869277954e-6,"evaluations":8.65625,"distances_sum":2446.7426658891754}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9610347985347989,"seconds":5.688518285751343e-6,"exhaustive_search_seconds":1.0225921869277954e-6,"evaluations":8.8046875,"distances_sum":2515.985791826779}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9453125,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9697573260073267,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.0225921869277954e-6,"evaluations":8.9140625,"distances_sum":2556.4040667964546}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9453125,"state":{"ssize":2,"bsize":12},"perf":{"precision":1.0,"recall":0.9453125,"f1":0.9697573260073267,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.0225921869277954e-6,"evaluations":8.9140625,"distances_sum":2556.4040667964546}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.234375,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.234375,"f1":null,"seconds":3.507360816001892e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":6.796875,"distances_sum":510.60795324713115}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.234375,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.234375,"f1":null,"seconds":3.507360816001892e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":6.796875,"distances_sum":510.60795324713115}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6806640625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6806640625,"f1":0.7996519105894113,"seconds":4.950910806655884e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":7.8125,"distances_sum":1292.6937529492702}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5615234375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5615234375,"f1":null,"seconds":4.176050424575806e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":6.9609375,"distances_sum":1062.8081274167866}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6806640625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6806640625,"f1":0.7996519105894113,"seconds":4.950910806655884e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":7.8125,"distances_sum":1292.6937529492702}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9471039377289382,"seconds":5.46872615814209e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.546875,"distances_sum":1941.988432417525}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9072265625,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.9471039377289382,"seconds":5.46872615814209e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.546875,"distances_sum":1941.988432417525}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.959678342490843,"seconds":5.7015568017959595e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.8046875,"distances_sum":2027.1017337781382}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9534340659340665,"seconds":5.727633833885193e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.7890625,"distances_sum":1999.8317838587564}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":8,"bsize":8},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.959678342490843,"seconds":5.7015568017959595e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.8046875,"distances_sum":2027.1017337781382}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9287109375,"state":{"ssize":8,"bsize":8},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.959678342490843,"seconds":5.7015568017959595e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.8046875,"distances_sum":2027.1017337781382}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5908203125, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.5908203125,"f1":null,"seconds":4.459172487258911e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.3515625,"distances_sum":1167.1870941618474}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.814453125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.814453125,"f1":0.8901263666888676,"seconds":5.193054676055908e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.46875,"distances_sum":1764.0592141233508}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.703125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.703125,"f1":0.8153481934731943,"seconds":4.896894097328186e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.234375,"distances_sum":1460.5727442193045}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.814453125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.814453125,"f1":0.8901263666888676,"seconds":5.193054676055908e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.46875,"distances_sum":1764.0592141233508}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9550080128205131,"seconds":5.608424544334412e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.796875,"distances_sum":2085.8841463165763}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9392342032967036,"seconds":5.519017577171326e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7265625,"distances_sum":1978.4543451216011}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8779296875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8779296875,"f1":0.9298248626373634,"seconds":3.829598426818848e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.6015625,"distances_sum":1927.3964835364877}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.853515625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.853515625,"f1":0.9150099900099906,"seconds":3.928318619728088e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.484375,"distances_sum":1819.298952643547}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9550080128205131,"seconds":5.608424544334412e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.796875,"distances_sum":2085.8841463165763}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96484375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.96484375,"f1":0.9804887820512824,"seconds":6.18956983089447e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.953125,"distances_sum":2236.199433311593}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.964755036630037,"seconds":5.738809704780579e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8515625,"distances_sum":2140.1793654825165}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9663347069597072,"seconds":5.60469925403595e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8671875,"distances_sum":2137.9996956461296}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9633814102564108,"seconds":5.608424544334412e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.859375,"distances_sum":2128.599443370738}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.96484375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9804887820512824,"seconds":6.18956983089447e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.953125,"distances_sum":2236.199433311593}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.96484375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9804887820512824,"seconds":6.18956983089447e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.953125,"distances_sum":2236.199433311593}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7353515625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7353515625,"f1":0.835650287212788,"seconds":4.9658119678497314e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.0390625,"distances_sum":1401.9138473906514}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.392578125, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.392578125,"f1":null,"seconds":3.3974647521972656e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":5.7265625,"distances_sum":707.4776143072423}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7353515625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.7353515625,"f1":0.835650287212788,"seconds":4.9658119678497314e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.0390625,"distances_sum":1401.9138473906514}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9438701923076929,"seconds":5.384907126426697e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.6796875,"distances_sum":1932.255605434204}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8115234375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8115234375,"f1":0.887150869963371,"seconds":5.306676030158997e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.25,"distances_sum":1576.909331819681}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.8637305402930412,"seconds":4.978850483894348e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.21875,"distances_sum":1494.2678621654004}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90234375,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.9438701923076929,"seconds":5.384907126426697e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.6796875,"distances_sum":1932.255605434204}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":6,"bsize":12}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9792410714285716,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.96875,"distances_sum":2085.4629360070066}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9696829212454217,"seconds":5.709007382392883e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.8515625,"distances_sum":2045.0264119306516}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9615899725274732,"seconds":5.2228569984436035e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.765625,"distances_sum":2016.3855371605518}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9792410714285716,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.96875,"distances_sum":2085.4629360070066}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":6,"bsize":12},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9792410714285716,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.96875,"distances_sum":2085.4629360070066}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8615618756243764,"seconds":4.967674612998962e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.15625,"distances_sum":1550.003685373852}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.775390625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.775390625,"f1":0.8615618756243764,"seconds":4.967674612998962e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.15625,"distances_sum":1550.003685373852}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9400188353313358,"seconds":5.3104013204574585e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.640625,"distances_sum":1844.8412040058345}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8388671875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8388671875,"f1":0.9037493756243762,"seconds":5.370005965232849e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.2734375,"distances_sum":1667.7500387660145}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8955078125,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8955078125,"f1":0.9400188353313358,"seconds":5.3104013204574585e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.640625,"distances_sum":1844.8412040058345}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9574118589743593,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.859375,"distances_sum":1957.0765501277892}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.953766025641026,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.8046875,"distances_sum":1930.0370377756628}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9574118589743593,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.859375,"distances_sum":1957.0765501277892}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.92578125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9574118589743593,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":1.3280659914016724e-6,"evaluations":8.859375,"distances_sum":1957.0765501277892}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8644470113220121,"seconds":4.7050416469573975e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.0078125,"distances_sum":1571.4086954948618}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.775390625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.775390625,"f1":0.8644470113220121,"seconds":4.7050416469573975e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.0078125,"distances_sum":1571.4086954948618}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9370135073260079,"seconds":5.364418029785156e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.53125,"distances_sum":1843.4291405847741}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9425881410256417,"seconds":5.349516868591309e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.578125,"distances_sum":1882.127793436493}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90234375,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.9425881410256417,"seconds":5.349516868591309e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.578125,"distances_sum":1882.127793436493}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9504750457875464,"seconds":5.50784170627594e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.671875,"distances_sum":1951.7920082031421}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9583390567765573,"seconds":5.850568413734436e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.7734375,"distances_sum":1961.7317751181984}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9638671875, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9638671875,"f1":0.9800251831501834,"seconds":6.040558218955994e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.890625,"distances_sum":2109.3416087027954}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9552655677655684,"seconds":5.798414349555969e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.765625,"distances_sum":1958.7881176657563}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9638671875,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.9800251831501834,"seconds":6.040558218955994e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.890625,"distances_sum":2109.3416087027954}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9638671875,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.9800251831501834,"seconds":6.040558218955994e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.890625,"distances_sum":2109.3416087027954}}, n: 9
mean(cfft.distances) = 0.9587884950058038
mean(cdnet.distances) = 0.9387836240874999
mean(crand.distances) = 0.34771200142453623
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8822222222222221
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9111111111111111
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9022222222222221
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.86
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8911111111111111
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8844444444444445
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8955555555555555
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9333333333333332
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.94
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9444444444444445
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.9133333333333332
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.88
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9133333333333334
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8755555555555555
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8911111111111111
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9288888888888889
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9199999999999999
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9244444444444445
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.928888888888889
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8533333333333334
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8711111111111111
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9266666666666666
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9244444444444445
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9044444444444445
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9177777777777778
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8777777777777778
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9066666666666667
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8955555555555555
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8377777777777778
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8822222222222224
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8977777777777778
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8911111111111111
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9022222222222221
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 6: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.5988057625293731] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 30, 3]]
** centroid: 1, normalized-entropy: 0.43949698692151346, [(2, 30), (3, 3)]
*** center 2: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 11, 2]]
** centroid: 7, normalized-entropy: 0.6193821946787638, [(2, 11), (3, 2)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 10, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
finished with 14 centroids; started with 12
acc = 0.9333333333333333
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.499925355298316] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.499925355298316, 0.26547100751971203] ***
*** starting iteration: 2; err: [Inf, 0.499925355298316, 0.26547100751971203] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.499925355298316, 0.26547100751971203, 0.24302867963608052] ***
*** starting iteration: 3; err: [Inf, 0.499925355298316, 0.26547100751971203, 0.24302867963608052] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.499925355298316, 0.26547100751971203, 0.24302867963608052, 0.23673991206963477] ***
*** finished computation of 3 references, err: [Inf, 0.499925355298316, 0.26547100751971203, 0.24302867963608052, 0.23673991206963477] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [66, 172, 18]]
** centroid: 1, normalized-entropy: 0.7312224464908087, [(1, 66), (2, 172), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [144, 84, 0]]
** centroid: 2, normalized-entropy: 0.9494520153879484, [(1, 144), (2, 84)]
*** center 3: selecting labels [1] (freq >= 2) [from [182, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30433972305415763] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30433972305415763, 0.2731290902534704] ***
*** starting iteration: 2; err: [Inf, 0.30433972305415763, 0.2731290902534704] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30433972305415763, 0.2731290902534704, 0.2640551237705006] ***
*** starting iteration: 3; err: [Inf, 0.30433972305415763, 0.2731290902534704, 0.2640551237705006] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30433972305415763, 0.2731290902534704, 0.2640551237705006, 0.24699212142965873] ***
*** finished computation of 3 references, err: [Inf, 0.30433972305415763, 0.2731290902534704, 0.2640551237705006, 0.24699212142965873] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [140, 107, 0]]
** centroid: 1, normalized-entropy: 0.9870854910291392, [(1, 140), (2, 107)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [10, 152, 23]]
** centroid: 2, normalized-entropy: 0.5264320377387204, [(1, 10), (2, 152), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [232, 3, 0]]
** centroid: 3, normalized-entropy: 0.09861703860006277, [(1, 232), (2, 3)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.30230070698539957] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30230070698539957, 0.2715765190697547] ***
*** starting iteration: 2; err: [Inf, 0.30230070698539957, 0.2715765190697547] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30230070698539957, 0.2715765190697547, 0.26173932215749013] ***
*** starting iteration: 3; err: [Inf, 0.30230070698539957, 0.2715765190697547, 0.26173932215749013] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30230070698539957, 0.2715765190697547, 0.26173932215749013, 0.2437246980332676] ***
*** finished computation of 3 references, err: [Inf, 0.30230070698539957, 0.2715765190697547, 0.26173932215749013, 0.2437246980332676] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [224, 4, 0]]
** centroid: 1, normalized-entropy: 0.1274185117923586, [(1, 224), (2, 4)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [10, 176, 23]]
** centroid: 2, normalized-entropy: 0.48517256653561186, [(1, 10), (2, 176), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [160, 70, 0]]
** centroid: 3, normalized-entropy: 0.8865408928220899, [(1, 160), (2, 70)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22840201087876688] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22840201087876688, 0.15982484759332183] ***
*** starting iteration: 2; err: [Inf, 0.22840201087876688, 0.15982484759332183] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22840201087876688, 0.15982484759332183, 0.15141932629646632] ***
*** starting iteration: 3; err: [Inf, 0.22840201087876688, 0.15982484759332183, 0.15141932629646632] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22840201087876688, 0.15982484759332183, 0.15141932629646632, 0.1490948896760026] ***
*** finished computation of 7 references, err: [Inf, 0.22840201087876688, 0.15982484759332183, 0.15141932629646632, 0.1490948896760026] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [93, 34, 0]]
** centroid: 1, normalized-entropy: 0.8381688912165873, [(1, 93), (2, 34)]
*** center 2: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [76, 11, 0]]
** centroid: 4, normalized-entropy: 0.5475844288749033, [(1, 76), (2, 11)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 91, 18]]
** centroid: 5, normalized-entropy: 0.6464599001526788, [(2, 91), (3, 18)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [74, 18, 0]]
** centroid: 6, normalized-entropy: 0.7131467486384921, [(1, 74), (2, 18)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 102, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2067223195031263] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2067223195031263, 0.1707283668052489] ***
*** starting iteration: 2; err: [Inf, 0.2067223195031263, 0.1707283668052489] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2067223195031263, 0.1707283668052489, 0.15980788797693052] ***
*** starting iteration: 3; err: [Inf, 0.2067223195031263, 0.1707283668052489, 0.15980788797693052] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2067223195031263, 0.1707283668052489, 0.15980788797693052, 0.15486766444239905] ***
*** finished computation of 7 references, err: [Inf, 0.2067223195031263, 0.1707283668052489, 0.15980788797693052, 0.15486766444239905] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [43, 55, 0]]
** centroid: 1, normalized-entropy: 0.9891571023188154, [(1, 43), (2, 55)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [43, 19, 0]]
** centroid: 2, normalized-entropy: 0.8890349038123858, [(1, 43), (2, 19)]
*** center 3: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 92, 23]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(2, 92), (3, 23)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [54, 14, 0]]
** centroid: 6, normalized-entropy: 0.7335379291086666, [(1, 54), (2, 14)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [43, 82, 0]]
** centroid: 7, normalized-entropy: 0.9285950940151024, [(1, 43), (2, 82)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21154621723659525] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21154621723659525, 0.1729018922659221] ***
*** starting iteration: 2; err: [Inf, 0.21154621723659525, 0.1729018922659221] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21154621723659525, 0.1729018922659221, 0.16089811312513652] ***
*** starting iteration: 3; err: [Inf, 0.21154621723659525, 0.1729018922659221, 0.16089811312513652] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21154621723659525, 0.1729018922659221, 0.16089811312513652, 0.15521940342506682] ***
*** finished computation of 7 references, err: [Inf, 0.21154621723659525, 0.1729018922659221, 0.16089811312513652, 0.15521940342506682] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [40, 18, 0]]
** centroid: 1, normalized-entropy: 0.8935711016541908, [(1, 40), (2, 18)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [116, 6, 0]]
** centroid: 2, normalized-entropy: 0.28290479297989196, [(1, 116), (2, 6)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [49, 41, 0]]
** centroid: 3, normalized-entropy: 0.9942929346520455, [(1, 49), (2, 41)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [69, 44, 0]]
** centroid: 4, normalized-entropy: 0.9643986196033757, [(1, 69), (2, 44)]
*** center 5: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 141, 23]]
** centroid: 7, normalized-entropy: 0.584877213901369, [(2, 141), (3, 23)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.16967163426107965] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16967163426107965, 0.1557774855566488] ***
*** finished computation of 7 references, err: [Inf, 0.16967163426107965, 0.1557774855566488] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 125, 18]]
** centroid: 1, normalized-entropy: 0.5460133954586516, [(2, 125), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [86, 13, 0]]
** centroid: 2, normalized-entropy: 0.5610284863400681, [(1, 86), (2, 13)]
*** center 3: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [52, 50, 0]]
** centroid: 4, normalized-entropy: 0.9997226475394071, [(1, 52), (2, 50)]
*** center 5: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [64, 4, 0]]
** centroid: 6, normalized-entropy: 0.32275695889739825, [(1, 64), (2, 4)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [38, 64, 0]]
** centroid: 7, normalized-entropy: 0.9526092095121206, [(1, 38), (2, 64)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22006663234452012] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22006663234452012, 0.1729704473304494] ***
*** finished computation of 7 references, err: [Inf, 0.22006663234452012, 0.1729704473304494] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [7, 90, 0]]
** centroid: 1, normalized-entropy: 0.37395136668121054, [(1, 7), (2, 90)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 79, 4]]
** centroid: 2, normalized-entropy: 0.27866980356389914, [(2, 79), (3, 4)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [193, 3, 0]]
** centroid: 3, normalized-entropy: 0.114204253835091, [(1, 193), (2, 3)]
*** center 4: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [43, 13, 0]]
** centroid: 5, normalized-entropy: 0.7817281222714539, [(1, 43), (2, 13)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [101, 43, 0]]
** centroid: 6, normalized-entropy: 0.8795864999831354, [(1, 101), (2, 43)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 34, 19]]
** centroid: 7, normalized-entropy: 0.9414231081869789, [(2, 34), (3, 19)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23581617906887917] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23581617906887917, 0.16219239336657693] ***
*** finished computation of 7 references, err: [Inf, 0.23581617906887917, 0.16219239336657693] ***
*** center 1: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [96, 7, 0]]
** centroid: 2, normalized-entropy: 0.35826863860424546, [(1, 96), (2, 7)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [26, 36, 0]]
** centroid: 3, normalized-entropy: 0.9811522341999134, [(1, 26), (2, 36)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [80, 67, 0]]
** centroid: 4, normalized-entropy: 0.994351097546162, [(1, 80), (2, 67)]
*** center 5: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 140, 23]]
** centroid: 7, normalized-entropy: 0.5871235691905463, [(2, 140), (3, 23)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3989076455370865] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3989076455370865, 0.31025134515355174] ***
*** starting iteration: 2; err: [Inf, 0.3989076455370865, 0.31025134515355174] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3989076455370865, 0.31025134515355174, 0.3034999130797786] ***
*** starting iteration: 3; err: [Inf, 0.3989076455370865, 0.31025134515355174, 0.3034999130797786] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3989076455370865, 0.31025134515355174, 0.3034999130797786, 0.3000537188188906] ***
*** finished computation of 3 references, err: [Inf, 0.3989076455370865, 0.31025134515355174, 0.3034999130797786, 0.3000537188188906] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [100, 163, 23]]
** centroid: 1, normalized-entropy: 0.8106189206787927, [(1, 100), (2, 163), (3, 23)]
*** center 2: selecting labels [1] (freq >= 1) [from [183, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [99, 99, 0]]
** centroid: 3, normalized-entropy: 1.0, [(1, 99), (2, 99)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4163269221536938] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4163269221536938, 0.309606225524416] ***
*** starting iteration: 2; err: [Inf, 0.4163269221536938, 0.309606225524416] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4163269221536938, 0.309606225524416, 0.3012462142307585] ***
*** starting iteration: 3; err: [Inf, 0.4163269221536938, 0.309606225524416, 0.3012462142307585] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4163269221536938, 0.309606225524416, 0.3012462142307585, 0.29808521329395954] ***
*** finished computation of 3 references, err: [Inf, 0.4163269221536938, 0.309606225524416, 0.3012462142307585, 0.29808521329395954] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [226, 44, 0]]
** centroid: 1, normalized-entropy: 0.6413510165846328, [(1, 226), (2, 44)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [168, 33, 0]]
** centroid: 2, normalized-entropy: 0.6442142137378306, [(1, 168), (2, 33)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 173, 23]]
** centroid: 3, normalized-entropy: 0.5216863320210009, [(2, 173), (3, 23)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4055140843788335] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4055140843788335, 0.31073337907038695] ***
*** finished computation of 3 references, err: [Inf, 0.4055140843788335, 0.31073337907038695] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [196, 77, 0]]
** centroid: 1, normalized-entropy: 0.8582307926411409, [(1, 196), (2, 77)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [14, 179, 18]]
** centroid: 2, normalized-entropy: 0.4819803529784532, [(1, 14), (2, 179), (3, 18)]
*** center 3: selecting labels [1] (freq >= 1) [from [182, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3652857852292651] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3652857852292651, 0.291989932933594] ***
*** finished computation of 3 references, err: [Inf, 0.3652857852292651, 0.291989932933594] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [15, 211, 23]]
** centroid: 1, normalized-entropy: 0.4820487486550039, [(1, 15), (2, 211), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [116, 50, 0]]
** centroid: 2, normalized-entropy: 0.8827586787955116, [(1, 116), (2, 50)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [251, 1, 0]]
** centroid: 3, normalized-entropy: 0.037369478890218966, [(1, 251), (2, 1)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3526223584663296] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3526223584663296, 0.3093724536906364] ***
*** finished computation of 3 references, err: [Inf, 0.3526223584663296, 0.3093724536906364] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 155, 23]]
** centroid: 1, normalized-entropy: 0.5552772073325881, [(2, 155), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [255, 79, 0]]
** centroid: 2, normalized-entropy: 0.7892168508423161, [(1, 255), (2, 79)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [139, 16, 0]]
** centroid: 3, normalized-entropy: 0.4791385400576728, [(1, 139), (2, 16)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20575242062090887] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20575242062090887, 0.15640145522268215] ***
*** starting iteration: 2; err: [Inf, 0.20575242062090887, 0.15640145522268215] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20575242062090887, 0.15640145522268215, 0.15083394102701866] ***
*** starting iteration: 3; err: [Inf, 0.20575242062090887, 0.15640145522268215, 0.15083394102701866] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20575242062090887, 0.15640145522268215, 0.15083394102701866, 0.14973726529381923] ***
*** starting iteration: 4; err: [Inf, 0.20575242062090887, 0.15640145522268215, 0.15083394102701866, 0.14973726529381923] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20575242062090887, 0.15640145522268215, 0.15083394102701866, 0.14973726529381923, 0.14936818812579453] ***
*** finished computation of 7 references, err: [Inf, 0.20575242062090887, 0.15640145522268215, 0.15083394102701866, 0.14973726529381923, 0.14936818812579453] ***
*** center 1: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [101, 18, 0]]
** centroid: 2, normalized-entropy: 0.6129857483172468, [(1, 101), (2, 18)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 72, 18]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(2, 72), (3, 18)]
*** center 4: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [29, 79, 0]]
** centroid: 5, normalized-entropy: 0.8393307617496655, [(1, 29), (2, 79)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 76, 0]]
** centroid: 6, normalized-entropy: 0.1000009430103234, [(1, 1), (2, 76)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [61, 11, 0]]
** centroid: 7, normalized-entropy: 0.6167482598263911, [(1, 61), (2, 11)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19774091437408725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19774091437408725, 0.1517604491401134] ***
*** starting iteration: 2; err: [Inf, 0.19774091437408725, 0.1517604491401134] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19774091437408725, 0.1517604491401134, 0.14821741029388388] ***
*** starting iteration: 3; err: [Inf, 0.19774091437408725, 0.1517604491401134, 0.14821741029388388] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19774091437408725, 0.1517604491401134, 0.14821741029388388, 0.14724158091858766] ***
*** finished computation of 7 references, err: [Inf, 0.19774091437408725, 0.1517604491401134, 0.14821741029388388, 0.14724158091858766] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [109, 1, 0]]
** centroid: 1, normalized-entropy: 0.07470433715479614, [(1, 109), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [59, 34, 0]]
** centroid: 2, normalized-entropy: 0.9472268055719005, [(1, 59), (2, 34)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 66, 23]]
** centroid: 3, normalized-entropy: 0.8243633538094403, [(2, 66), (3, 23)]
*** center 4: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [45, 71, 0]]
** centroid: 5, normalized-entropy: 0.9634513846131947, [(1, 45), (2, 71)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 90, 0]]
** centroid: 6, normalized-entropy: 0.1510969705171136, [(1, 2), (2, 90)]
*** center 7: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20975935210249033] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20975935210249033, 0.15901383475122646] ***
*** starting iteration: 2; err: [Inf, 0.20975935210249033, 0.15901383475122646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20975935210249033, 0.15901383475122646, 0.15216802431108511] ***
*** starting iteration: 3; err: [Inf, 0.20975935210249033, 0.15901383475122646, 0.15216802431108511] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20975935210249033, 0.15901383475122646, 0.15216802431108511, 0.1513428064715955] ***
*** finished computation of 7 references, err: [Inf, 0.20975935210249033, 0.15901383475122646, 0.15216802431108511, 0.1513428064715955] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [96, 7, 0]]
** centroid: 1, normalized-entropy: 0.35826863860424546, [(1, 96), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [106, 5, 0]]
** centroid: 2, normalized-entropy: 0.2649635360966293, [(1, 106), (2, 5)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 48, 23]]
** centroid: 3, normalized-entropy: 0.9086185980409245, [(2, 48), (3, 23)]
*** center 4: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [81, 10, 0]]
** centroid: 5, normalized-entropy: 0.49958440742366095, [(1, 81), (2, 10)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [9, 94, 0]]
** centroid: 6, normalized-entropy: 0.4276590022251725, [(1, 9), (2, 94)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [3, 86, 0]]
** centroid: 7, normalized-entropy: 0.21265863988163503, [(1, 3), (2, 86)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24643951040963913] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24643951040963913, 0.19383875199932013] ***
*** finished computation of 7 references, err: [Inf, 0.24643951040963913, 0.19383875199932013] ***
*** center 1: selecting labels [1] (freq >= 2) [from [141, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 47, 18]]
** centroid: 2, normalized-entropy: 0.8512243352621381, [(2, 47), (3, 18)]
*** center 3: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [68, 20, 0]]
** centroid: 4, normalized-entropy: 0.7732266742876346, [(1, 68), (2, 20)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [11, 110, 0]]
** centroid: 5, normalized-entropy: 0.43949698692151346, [(1, 11), (2, 110)]
*** center 6: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [6, 79, 0]]
** centroid: 7, normalized-entropy: 0.3681150054280774, [(1, 6), (2, 79)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22080458030439745] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22080458030439745, 0.1904236421064436] ***
*** finished computation of 7 references, err: [Inf, 0.22080458030439745, 0.1904236421064436] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [67, 62, 0]]
** centroid: 1, normalized-entropy: 0.9989160383328897, [(1, 67), (2, 62)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [59, 15, 0]]
** centroid: 2, normalized-entropy: 0.7273006785144036, [(1, 59), (2, 15)]
*** center 3: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 60, 23]]
** centroid: 4, normalized-entropy: 0.8514808683852091, [(2, 60), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [24, 125, 0]]
** centroid: 5, normalized-entropy: 0.636872308381164, [(1, 24), (2, 125)]
*** center 6: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23896070229129746] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23896070229129746, 0.19474732384750287] ***
*** finished computation of 7 references, err: [Inf, 0.23896070229129746, 0.19474732384750287] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 155, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [53, 39, 0]]
** centroid: 3, normalized-entropy: 0.9832307535844343, [(1, 53), (2, 39)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [57, 21, 0]]
** centroid: 4, normalized-entropy: 0.8403586716091169, [(1, 57), (2, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [122, 5, 0]]
** centroid: 5, normalized-entropy: 0.2393965319917804, [(1, 122), (2, 5)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [95, 8, 0]]
** centroid: 6, normalized-entropy: 0.3939152573634121, [(1, 95), (2, 8)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 22, 23]]
** centroid: 7, normalized-entropy: 0.9996437496778561, [(2, 22), (3, 23)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.34865035147996276] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34865035147996276, 0.3038662171547858] ***
*** starting iteration: 2; err: [Inf, 0.34865035147996276, 0.3038662171547858] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34865035147996276, 0.3038662171547858, 0.29457012993037457] ***
*** starting iteration: 3; err: [Inf, 0.34865035147996276, 0.3038662171547858, 0.29457012993037457] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34865035147996276, 0.3038662171547858, 0.29457012993037457, 0.29182552919910476] ***
*** finished computation of 3 references, err: [Inf, 0.34865035147996276, 0.3038662171547858, 0.29457012993037457, 0.29182552919910476] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [256, 15, 0]]
** centroid: 1, normalized-entropy: 0.308704912445651, [(1, 256), (2, 15)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 184, 18]]
** centroid: 2, normalized-entropy: 0.43348846324460666, [(2, 184), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [136, 57, 0]]
** centroid: 3, normalized-entropy: 0.8755157045352492, [(1, 136), (2, 57)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.34717884271320465] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34717884271320465, 0.3084180561680419] ***
*** starting iteration: 2; err: [Inf, 0.34717884271320465, 0.3084180561680419] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34717884271320465, 0.3084180561680419, 0.2928840478859853] ***
*** starting iteration: 3; err: [Inf, 0.34717884271320465, 0.3084180561680419, 0.2928840478859853] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.34717884271320465, 0.3084180561680419, 0.2928840478859853, 0.28940294810320843] ***
*** finished computation of 3 references, err: [Inf, 0.34717884271320465, 0.3084180561680419, 0.2928840478859853, 0.28940294810320843] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [71, 155, 23]]
** centroid: 1, normalized-entropy: 0.7945337098783647, [(1, 71), (2, 155), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [107, 107, 0]]
** centroid: 2, normalized-entropy: 1.0, [(1, 107), (2, 107)]
*** center 3: selecting labels [1] (freq >= 1) [from [204, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4095718960348947] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4095718960348947, 0.3069536825013661] ***
*** starting iteration: 2; err: [Inf, 0.4095718960348947, 0.3069536825013661] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4095718960348947, 0.3069536825013661, 0.3050867542896749] ***
*** starting iteration: 3; err: [Inf, 0.4095718960348947, 0.3069536825013661, 0.3050867542896749] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4095718960348947, 0.3069536825013661, 0.3050867542896749, 0.3045941611131963] ***
*** finished computation of 3 references, err: [Inf, 0.4095718960348947, 0.3069536825013661, 0.3050867542896749, 0.3045941611131963] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [127, 89, 0]]
** centroid: 1, normalized-entropy: 0.9775577309779387, [(1, 127), (2, 89)]
*** center 2: selecting labels [1] (freq >= 1) [from [183, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [84, 161, 23]]
** centroid: 3, normalized-entropy: 0.8014637029022503, [(1, 84), (2, 161), (3, 23)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.1783897686629436] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1783897686629436, 0.1618349818252698] ***
*** starting iteration: 2; err: [Inf, 0.1783897686629436, 0.1618349818252698] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1783897686629436, 0.1618349818252698, 0.15996765487410644] ***
*** starting iteration: 3; err: [Inf, 0.1783897686629436, 0.1618349818252698, 0.15996765487410644] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1783897686629436, 0.1618349818252698, 0.15996765487410644, 0.15911861426178114] ***
*** finished computation of 7 references, err: [Inf, 0.1783897686629436, 0.1618349818252698, 0.15996765487410644, 0.15911861426178114] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 9, 15]]
** centroid: 1, normalized-entropy: 0.954434002924965, [(2, 9), (3, 15)]
*** center 2: selecting labels [1] (freq >= 2) [from [112, 1, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [115, 27, 0]]
** centroid: 3, normalized-entropy: 0.7017660038918877, [(1, 115), (2, 27)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [9, 87, 0]]
** centroid: 4, normalized-entropy: 0.44886448872302936, [(1, 9), (2, 87)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 47, 3]]
** centroid: 5, normalized-entropy: 0.3274449191544762, [(2, 47), (3, 3)]
*** center 6: selecting labels [1] (freq >= 2) [from [156, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 85, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19389734871551462] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19389734871551462, 0.150833778379337] ***
*** starting iteration: 2; err: [Inf, 0.19389734871551462, 0.150833778379337] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19389734871551462, 0.150833778379337, 0.145897071434372] ***
*** starting iteration: 3; err: [Inf, 0.19389734871551462, 0.150833778379337, 0.145897071434372] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19389734871551462, 0.150833778379337, 0.145897071434372, 0.14474674527281323] ***
*** starting iteration: 4; err: [Inf, 0.19389734871551462, 0.150833778379337, 0.145897071434372, 0.14474674527281323] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19389734871551462, 0.150833778379337, 0.145897071434372, 0.14474674527281323, 0.14429597895050691] ***
*** finished computation of 7 references, err: [Inf, 0.19389734871551462, 0.150833778379337, 0.145897071434372, 0.14474674527281323, 0.14429597895050691] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [55, 11, 0]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(1, 55), (2, 11)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 89, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [92, 38, 0]]
** centroid: 5, normalized-entropy: 0.871683617119982, [(1, 92), (2, 38)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [48, 55, 0]]
** centroid: 6, normalized-entropy: 0.9966657283631041, [(1, 48), (2, 55)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 69, 23]]
** centroid: 7, normalized-entropy: 0.8112781244591328, [(2, 69), (3, 23)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21473632853009042] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21473632853009042, 0.15791334218668124] ***
*** starting iteration: 2; err: [Inf, 0.21473632853009042, 0.15791334218668124] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21473632853009042, 0.15791334218668124, 0.1552249593799864] ***
*** starting iteration: 3; err: [Inf, 0.21473632853009042, 0.15791334218668124, 0.1552249593799864] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21473632853009042, 0.15791334218668124, 0.1552249593799864, 0.15365809730618543] ***
*** starting iteration: 4; err: [Inf, 0.21473632853009042, 0.15791334218668124, 0.1552249593799864, 0.15365809730618543] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21473632853009042, 0.15791334218668124, 0.1552249593799864, 0.15365809730618543, 0.15223780737067902] ***
*** starting iteration: 5; err: [Inf, 0.21473632853009042, 0.15791334218668124, 0.1552249593799864, 0.15365809730618543, 0.15223780737067902] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21473632853009042, 0.15791334218668124, 0.1552249593799864, 0.15365809730618543, 0.15223780737067902, 0.1507042263595407] ***
*** starting iteration: 6; err: [Inf, 0.21473632853009042, 0.15791334218668124, 0.1552249593799864, 0.15365809730618543, 0.15223780737067902, 0.1507042263595407] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21473632853009042, 0.15791334218668124, 0.1552249593799864, 0.15365809730618543, 0.15223780737067902, 0.1507042263595407, 0.14928246496072126] ***
*** starting iteration: 7; err: [Inf, 0.21473632853009042, 0.15791334218668124, 0.1552249593799864, 0.15365809730618543, 0.15223780737067902, 0.1507042263595407, 0.14928246496072126] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21473632853009042, 0.15791334218668124, 0.1552249593799864, 0.15365809730618543, 0.15223780737067902, 0.1507042263595407, 0.14928246496072126, 0.1479605567575931] ***
*** starting iteration: 8; err: [Inf, 0.21473632853009042, 0.15791334218668124, 0.1552249593799864, 0.15365809730618543, 0.15223780737067902, 0.1507042263595407, 0.14928246496072126, 0.1479605567575931] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21473632853009042, 0.15791334218668124, 0.1552249593799864, 0.15365809730618543, 0.15223780737067902, 0.1507042263595407, 0.14928246496072126, 0.1479605567575931, 0.14748084116056898] ***
*** finished computation of 7 references, err: [Inf, 0.21473632853009042, 0.15791334218668124, 0.1552249593799864, 0.15365809730618543, 0.15223780737067902, 0.1507042263595407, 0.14928246496072126, 0.1479605567575931, 0.14748084116056898] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [50, 57, 0]]
** centroid: 1, normalized-entropy: 0.9969105350354788, [(1, 50), (2, 57)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 82, 23]]
** centroid: 2, normalized-entropy: 0.7584246665423688, [(2, 82), (3, 23)]
*** center 3: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [97, 30, 0]]
** centroid: 5, normalized-entropy: 0.7886983595248671, [(1, 97), (2, 30)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [72, 20, 0]]
** centroid: 6, normalized-entropy: 0.7553754125614286, [(1, 72), (2, 20)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 61, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3749452612443908] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3749452612443908, 0.31271964286708526] ***
*** starting iteration: 2; err: [Inf, 0.3749452612443908, 0.31271964286708526] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3749452612443908, 0.31271964286708526, 0.2977479743427253] ***
*** starting iteration: 3; err: [Inf, 0.3749452612443908, 0.31271964286708526, 0.2977479743427253] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3749452612443908, 0.31271964286708526, 0.2977479743427253, 0.29250176788472737] ***
*** finished computation of 3 references, err: [Inf, 0.3749452612443908, 0.31271964286708526, 0.2977479743427253, 0.29250176788472737] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [251, 21, 0]]
** centroid: 1, normalized-entropy: 0.3922565988974065, [(1, 251), (2, 21)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 182, 18]]
** centroid: 2, normalized-entropy: 0.4364698170641031, [(2, 182), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [141, 53, 0]]
** centroid: 3, normalized-entropy: 0.8460132299186768, [(1, 141), (2, 53)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 11)
[0.9349978721236206, 0.9290308272344201, 0.9290008571445697, 0.9260158361954769, 0.921019822217427, 0.906999814185443, 0.8950027872183561, 0.8949878021734309, 0.844038649427871, 0.8400016783250316, 0.7899726073378769]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9349978721236206
finished with 11
iteration 2 finished
generating 4 configurations using top 12 configurations, starting with 11)
[0.9349978721236206, 0.9290308272344201, 0.9290008571445697, 0.9260158361954769, 0.921019822217427, 0.906999814185443, 0.8950027872183561, 0.8949878021734309, 0.844038649427871, 0.8400016783250316, 0.7899726073378769]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9349978721236206
finished with 12
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.487642428488121] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.487642428488121, 0.30397931905743014] ***
*** starting iteration: 2; err: [Inf, 0.487642428488121, 0.30397931905743014] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.487642428488121, 0.30397931905743014, 0.29250470353094665] ***
*** starting iteration: 3; err: [Inf, 0.487642428488121, 0.30397931905743014, 0.29250470353094665] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.487642428488121, 0.30397931905743014, 0.29250470353094665, 0.29121136237159595] ***
*** finished computation of 3 references, err: [Inf, 0.487642428488121, 0.30397931905743014, 0.29250470353094665, 0.29121136237159595] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [213, 20, 0]]
** centroid: 1, normalized-entropy: 0.42241914462916963, [(1, 213), (2, 20)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 196, 18]]
** centroid: 2, normalized-entropy: 0.4165054000808552, [(2, 196), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [179, 40, 0]]
** centroid: 3, normalized-entropy: 0.6858366124514181, [(1, 179), (2, 40)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4840536493084755] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4840536493084755, 0.3853174032171493] ***
*** starting iteration: 2; err: [Inf, 0.4840536493084755, 0.3853174032171493] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4840536493084755, 0.3853174032171493, 0.3601340338220538] ***
*** starting iteration: 3; err: [Inf, 0.4840536493084755, 0.3853174032171493, 0.3601340338220538] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4840536493084755, 0.3853174032171493, 0.3601340338220538, 0.3475882535858982] ***
*** finished computation of 3 references, err: [Inf, 0.4840536493084755, 0.3853174032171493, 0.3601340338220538, 0.3475882535858982] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [107, 221, 23]]
** centroid: 1, normalized-entropy: 0.7573215135123341, [(1, 107), (2, 221), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [163, 41, 0]]
** centroid: 2, normalized-entropy: 0.7238845511430297, [(1, 163), (2, 41)]
*** center 3: selecting labels [1] (freq >= 2) [from [112, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3894404937978136] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3894404937978136, 0.31016595375401596] ***
*** starting iteration: 2; err: [Inf, 0.3894404937978136, 0.31016595375401596] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3894404937978136, 0.31016595375401596, 0.30514207262841836] ***
*** starting iteration: 3; err: [Inf, 0.3894404937978136, 0.31016595375401596, 0.30514207262841836] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3894404937978136, 0.31016595375401596, 0.30514207262841836, 0.30431345358178175] ***
*** finished computation of 3 references, err: [Inf, 0.3894404937978136, 0.31016595375401596, 0.30514207262841836, 0.30431345358178175] ***
*** center 1: selecting labels [1] (freq >= 2) [from [202, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [80, 140, 23]]
** centroid: 2, normalized-entropy: 0.8252292276624534, [(1, 80), (2, 140), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [112, 110, 0]]
** centroid: 3, normalized-entropy: 0.999941453025042, [(1, 112), (2, 110)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 12)
[0.9349978721236206, 0.9290308272344201, 0.9290008571445697, 0.9260158361954769, 0.921019822217427, 0.906999814185443, 0.8950027872183561, 0.8949878021734309, 0.8599737462012911, 0.844038649427871, 0.8400016783250316, 0.7899726073378769]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9349978721236206
finished with 13
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.23352853915452756] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23352853915452756, 0.19418318282012959] ***
*** starting iteration: 2; err: [Inf, 0.23352853915452756, 0.19418318282012959] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23352853915452756, 0.19418318282012959, 0.19040751274445797] ***
*** starting iteration: 3; err: [Inf, 0.23352853915452756, 0.19418318282012959, 0.19040751274445797] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23352853915452756, 0.19418318282012959, 0.19040751274445797, 0.18889531181207872] ***
*** finished computation of 7 references, err: [Inf, 0.23352853915452756, 0.19418318282012959, 0.19040751274445797, 0.18889531181207872] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [59, 36, 0]]
** centroid: 1, normalized-entropy: 0.9572951876544017, [(1, 59), (2, 36)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 68, 17]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(2, 68), (3, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 90, 1]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [87, 35, 0]]
** centroid: 6, normalized-entropy: 0.864663651235729, [(1, 87), (2, 35)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [60, 27, 0]]
** centroid: 7, normalized-entropy: 0.8935711016541908, [(1, 60), (2, 27)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3070914414941684] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3070914414941684, 0.2264022886839652] ***
*** starting iteration: 2; err: [Inf, 0.3070914414941684, 0.2264022886839652] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3070914414941684, 0.2264022886839652, 0.2150078945488821] ***
*** starting iteration: 3; err: [Inf, 0.3070914414941684, 0.2264022886839652, 0.2150078945488821] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3070914414941684, 0.2264022886839652, 0.2150078945488821, 0.2073639567642622] ***
*** finished computation of 7 references, err: [Inf, 0.3070914414941684, 0.2264022886839652, 0.2150078945488821, 0.2073639567642622] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 143, 6]]
** centroid: 1, normalized-entropy: 0.24352170057198275, [(2, 143), (3, 6)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [91, 32, 0]]
** centroid: 2, normalized-entropy: 0.8269916414523998, [(1, 91), (2, 32)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [127, 2, 0]]
** centroid: 3, normalized-entropy: 0.11539039325220708, [(1, 127), (2, 2)]
*** center 4: selecting labels [1] (freq >= 2) [from [42, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [40, 31, 0]]
** centroid: 5, normalized-entropy: 0.9883779727795042, [(1, 40), (2, 31)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 54, 17]]
** centroid: 6, normalized-entropy: 0.7941021417852022, [(2, 54), (3, 17)]
*** center 7: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25907049314579694] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25907049314579694, 0.20070070479863855] ***
*** starting iteration: 2; err: [Inf, 0.25907049314579694, 0.20070070479863855] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25907049314579694, 0.20070070479863855, 0.19048566438224182] ***
*** starting iteration: 3; err: [Inf, 0.25907049314579694, 0.20070070479863855, 0.19048566438224182] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25907049314579694, 0.20070070479863855, 0.19048566438224182, 0.18787401609368498] ***
*** finished computation of 7 references, err: [Inf, 0.25907049314579694, 0.20070070479863855, 0.19048566438224182, 0.18787401609368498] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [56, 26, 0]]
** centroid: 1, normalized-entropy: 0.9011701959974223, [(1, 56), (2, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [98, 7, 0]]
** centroid: 2, normalized-entropy: 0.3533593350214213, [(1, 98), (2, 7)]
*** center 3: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [88, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [75, 44, 0]]
** centroid: 5, normalized-entropy: 0.9504783262723793, [(1, 75), (2, 44)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 63, 23]]
** centroid: 6, normalized-entropy: 0.8377698690066789, [(2, 63), (3, 23)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 110, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 13)
[0.9349978721236206, 0.9290308272344201, 0.9290008571445697, 0.9260158361954769, 0.921019822217427, 0.9149958341575108, 0.906999814185443, 0.8950027872183561, 0.8949878021734309, 0.8599737462012911, 0.844038649427871, 0.8400016783250316, 0.7899726073378769]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9349978721236206
finished with 15
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.20032946220088704] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20032946220088704, 0.1635955641266062] ***
*** starting iteration: 2; err: [Inf, 0.20032946220088704, 0.1635955641266062] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20032946220088704, 0.1635955641266062, 0.1594526819386953] ***
*** starting iteration: 3; err: [Inf, 0.20032946220088704, 0.1635955641266062, 0.1594526819386953] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20032946220088704, 0.1635955641266062, 0.1594526819386953, 0.1554535013384412] ***
*** finished computation of 7 references, err: [Inf, 0.20032946220088704, 0.1635955641266062, 0.1594526819386953, 0.1554535013384412] ***
*** center 1: selecting labels [1] (freq >= 2) [from [121, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 93, 18]]
** centroid: 2, normalized-entropy: 0.6394571324851642, [(2, 93), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [18, 93, 0]]
** centroid: 3, normalized-entropy: 0.6394571324851642, [(1, 18), (2, 93)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [92, 24, 0]]
** centroid: 4, normalized-entropy: 0.7355085815538399, [(1, 92), (2, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [100, 6, 0]]
** centroid: 5, normalized-entropy: 0.3138129641688652, [(1, 100), (2, 6)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [29, 40, 0]]
** centroid: 6, normalized-entropy: 0.9815886212101388, [(1, 29), (2, 40)]
*** center 7: selecting labels [1] (freq >= 2) [from [32, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.17736839808208094] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17736839808208094, 0.159044468406074] ***
*** starting iteration: 2; err: [Inf, 0.17736839808208094, 0.159044468406074] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17736839808208094, 0.159044468406074, 0.15484971941254663] ***
*** starting iteration: 3; err: [Inf, 0.17736839808208094, 0.159044468406074, 0.15484971941254663] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17736839808208094, 0.159044468406074, 0.15484971941254663, 0.15148197502111443] ***
*** finished computation of 7 references, err: [Inf, 0.17736839808208094, 0.159044468406074, 0.15484971941254663, 0.15148197502111443] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 90, 23]]
** centroid: 1, normalized-entropy: 0.7289514964064973, [(2, 90), (3, 23)]
*** center 2: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [7, 109, 0]]
** centroid: 3, normalized-entropy: 0.3288122377561222, [(1, 7), (2, 109)]
*** center 4: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [52, 36, 0]]
** centroid: 5, normalized-entropy: 0.976020648236615, [(1, 52), (2, 36)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [62, 3, 0]]
** centroid: 6, normalized-entropy: 0.269828447703074, [(1, 62), (2, 3)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [70, 24, 0]]
** centroid: 7, normalized-entropy: 0.8196004346196011, [(1, 70), (2, 24)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18582775983526587] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18582775983526587, 0.15406188782796018] ***
*** starting iteration: 2; err: [Inf, 0.18582775983526587, 0.15406188782796018] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18582775983526587, 0.15406188782796018, 0.15004911177234537] ***
*** starting iteration: 3; err: [Inf, 0.18582775983526587, 0.15406188782796018, 0.15004911177234537] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18582775983526587, 0.15406188782796018, 0.15004911177234537, 0.14913654510306007] ***
*** finished computation of 7 references, err: [Inf, 0.18582775983526587, 0.15406188782796018, 0.15004911177234537, 0.14913654510306007] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 69, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [109, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [87, 42, 0]]
** centroid: 3, normalized-entropy: 0.9103480624345157, [(1, 87), (2, 42)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [63, 6, 0]]
** centroid: 4, normalized-entropy: 0.42622865699814483, [(1, 63), (2, 6)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 60, 23]]
** centroid: 5, normalized-entropy: 0.8514808683852091, [(2, 60), (3, 23)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [32, 73, 0]]
** centroid: 6, normalized-entropy: 0.8870341576828725, [(1, 32), (2, 73)]
*** center 7: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.32175507782972435] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32175507782972435, 0.21162813258645413] ***
*** starting iteration: 2; err: [Inf, 0.32175507782972435, 0.21162813258645413] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32175507782972435, 0.21162813258645413, 0.1996722896863055] ***
*** starting iteration: 3; err: [Inf, 0.32175507782972435, 0.21162813258645413, 0.1996722896863055] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.32175507782972435, 0.21162813258645413, 0.1996722896863055, 0.19480171725265794] ***
*** finished computation of 7 references, err: [Inf, 0.32175507782972435, 0.21162813258645413, 0.1996722896863055, 0.19480171725265794] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [83, 6, 0]]
** centroid: 1, normalized-entropy: 0.35620480393132253, [(1, 83), (2, 6)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [42, 71, 0]]
** centroid: 2, normalized-entropy: 0.9519543850564236, [(1, 42), (2, 71)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [23, 66, 0]]
** centroid: 3, normalized-entropy: 0.8243633538094403, [(1, 23), (2, 66)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 113, 18]]
** centroid: 4, normalized-entropy: 0.577401071927696, [(2, 113), (3, 18)]
*** center 5: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [90, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22890370068834281] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22890370068834281, 0.19580853614269167] ***
*** starting iteration: 2; err: [Inf, 0.22890370068834281, 0.19580853614269167] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22890370068834281, 0.19580853614269167, 0.18955925269878987] ***
*** starting iteration: 3; err: [Inf, 0.22890370068834281, 0.19580853614269167, 0.18955925269878987] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22890370068834281, 0.19580853614269167, 0.18955925269878987, 0.18718510503794109] ***
*** finished computation of 7 references, err: [Inf, 0.22890370068834281, 0.19580853614269167, 0.18955925269878987, 0.18718510503794109] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [68, 41, 0]]
** centroid: 1, normalized-entropy: 0.9552751009754172, [(1, 68), (2, 41)]
*** center 2: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 89, 23]]
** centroid: 3, normalized-entropy: 0.7325138475458123, [(2, 89), (3, 23)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [6, 89, 0]]
** centroid: 4, normalized-entropy: 0.3398550782221443, [(1, 6), (2, 89)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [45, 10, 0]]
** centroid: 5, normalized-entropy: 0.6840384356390419, [(1, 45), (2, 10)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [80, 33, 0]]
** centroid: 6, normalized-entropy: 0.8713360108238786, [(1, 80), (2, 33)]
*** center 7: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31148823593621666] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31148823593621666, 0.2555398813335747] ***
*** starting iteration: 2; err: [Inf, 0.31148823593621666, 0.2555398813335747] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31148823593621666, 0.2555398813335747, 0.23965306836494554] ***
*** starting iteration: 3; err: [Inf, 0.31148823593621666, 0.2555398813335747, 0.23965306836494554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31148823593621666, 0.2555398813335747, 0.23965306836494554, 0.22867264277462301] ***
*** finished computation of 7 references, err: [Inf, 0.31148823593621666, 0.2555398813335747, 0.23965306836494554, 0.22867264277462301] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [180, 11, 0]]
** centroid: 1, normalized-entropy: 0.3178094293742214, [(1, 180), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [30, 32, 0]]
** centroid: 2, normalized-entropy: 0.9992492479956566, [(1, 30), (2, 32)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [65, 41, 0]]
** centroid: 3, normalized-entropy: 0.9626983787500768, [(1, 65), (2, 41)]
*** center 4: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 88, 1]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 78, 22]]
** centroid: 6, normalized-entropy: 0.7601675029619658, [(2, 78), (3, 22)]
*** center 7: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 15)
[0.9349978721236206, 0.9290308272344201, 0.9290008571445697, 0.9260158361954769, 0.921019822217427, 0.9149958341575108, 0.9100447753142363, 0.9080247912583242, 0.906999814185443, 0.8950027872183561, 0.8949878021734309, 0.8599737462012911, 0.844038649427871, 0.8400016783250316, 0.7899726073378769]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9349978721236206
finished with 15
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9349978721236206, 0.9290308272344201, 0.9290008571445697, 0.9260158361954769, 0.921019822217427, 0.9149958341575108, 0.9100447753142363, 0.9080247912583242, 0.906999814185443, 0.8950027872183561, 0.8949878021734309, 0.8599737462012911, 0.844038649427871, 0.8400016783250316, 0.7899726073378769]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9349978721236206
finished with 16
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.22288583901881412] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22288583901881412, 0.20524956493613286] ***
*** starting iteration: 2; err: [Inf, 0.22288583901881412, 0.20524956493613286] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22288583901881412, 0.20524956493613286, 0.1994520729930663] ***
*** starting iteration: 3; err: [Inf, 0.22288583901881412, 0.20524956493613286, 0.1994520729930663] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22288583901881412, 0.20524956493613286, 0.1994520729930663, 0.19608227174460618] ***
*** starting iteration: 4; err: [Inf, 0.22288583901881412, 0.20524956493613286, 0.1994520729930663, 0.19608227174460618] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22288583901881412, 0.20524956493613286, 0.1994520729930663, 0.19608227174460618, 0.19353221979865515] ***
*** starting iteration: 5; err: [Inf, 0.22288583901881412, 0.20524956493613286, 0.1994520729930663, 0.19608227174460618, 0.19353221979865515] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22288583901881412, 0.20524956493613286, 0.1994520729930663, 0.19608227174460618, 0.19353221979865515, 0.19218396663794424] ***
*** starting iteration: 6; err: [Inf, 0.22288583901881412, 0.20524956493613286, 0.1994520729930663, 0.19608227174460618, 0.19353221979865515, 0.19218396663794424] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22288583901881412, 0.20524956493613286, 0.1994520729930663, 0.19608227174460618, 0.19353221979865515, 0.19218396663794424, 0.1896240795814284] ***
*** starting iteration: 7; err: [Inf, 0.22288583901881412, 0.20524956493613286, 0.1994520729930663, 0.19608227174460618, 0.19353221979865515, 0.19218396663794424, 0.1896240795814284] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22288583901881412, 0.20524956493613286, 0.1994520729930663, 0.19608227174460618, 0.19353221979865515, 0.19218396663794424, 0.1896240795814284, 0.1888050043720517] ***
*** finished computation of 7 references, err: [Inf, 0.22288583901881412, 0.20524956493613286, 0.1994520729930663, 0.19608227174460618, 0.19353221979865515, 0.19218396663794424, 0.1896240795814284, 0.1888050043720517] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [58, 43, 0]]
** centroid: 1, normalized-entropy: 0.9840304711717017, [(1, 58), (2, 43)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 111, 18]]
** centroid: 2, normalized-entropy: 0.5830194167347007, [(2, 111), (3, 18)]
*** center 3: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [36, 58, 0]]
** centroid: 4, normalized-entropy: 0.9601186626422924, [(1, 36), (2, 58)]
*** center 5: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [85, 4, 0]]
** centroid: 6, normalized-entropy: 0.2645173683629748, [(1, 85), (2, 4)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [52, 40, 0]]
** centroid: 7, normalized-entropy: 0.9876925088958032, [(1, 52), (2, 40)]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23094874442271565] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23094874442271565, 0.19908378985424202] ***
*** starting iteration: 2; err: [Inf, 0.23094874442271565, 0.19908378985424202] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23094874442271565, 0.19908378985424202, 0.19262181797708527] ***
*** starting iteration: 3; err: [Inf, 0.23094874442271565, 0.19908378985424202, 0.19262181797708527] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23094874442271565, 0.19908378985424202, 0.19262181797708527, 0.1890976011775423] ***
*** starting iteration: 4; err: [Inf, 0.23094874442271565, 0.19908378985424202, 0.19262181797708527, 0.1890976011775423] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23094874442271565, 0.19908378985424202, 0.19262181797708527, 0.1890976011775423, 0.18686116033413824] ***
*** starting iteration: 5; err: [Inf, 0.23094874442271565, 0.19908378985424202, 0.19262181797708527, 0.1890976011775423, 0.18686116033413824] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23094874442271565, 0.19908378985424202, 0.19262181797708527, 0.1890976011775423, 0.18686116033413824, 0.18601158019462447] ***
*** finished computation of 7 references, err: [Inf, 0.23094874442271565, 0.19908378985424202, 0.19262181797708527, 0.1890976011775423, 0.18686116033413824, 0.18601158019462447] ***
*** center 1: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [6, 70, 0]]
** centroid: 3, normalized-entropy: 0.39845927409523557, [(1, 6), (2, 70)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 62, 23]]
** centroid: 4, normalized-entropy: 0.8423074510400833, [(2, 62), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [58, 51, 0]]
** centroid: 5, normalized-entropy: 0.9970229471810967, [(1, 58), (2, 51)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 77, 0]]
** centroid: 6, normalized-entropy: 0.3313056130577883, [(1, 5), (2, 77)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [106, 2, 0]]
** centroid: 7, normalized-entropy: 0.13303964861069897, [(1, 106), (2, 2)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24781545100669408] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24781545100669408, 0.21538934608114355] ***
*** starting iteration: 2; err: [Inf, 0.24781545100669408, 0.21538934608114355] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24781545100669408, 0.21538934608114355, 0.20863883619684018] ***
*** starting iteration: 3; err: [Inf, 0.24781545100669408, 0.21538934608114355, 0.20863883619684018] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24781545100669408, 0.21538934608114355, 0.20863883619684018, 0.20470290354312] ***
*** starting iteration: 4; err: [Inf, 0.24781545100669408, 0.21538934608114355, 0.20863883619684018, 0.20470290354312] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24781545100669408, 0.21538934608114355, 0.20863883619684018, 0.20470290354312, 0.20288353106928528] ***
*** starting iteration: 5; err: [Inf, 0.24781545100669408, 0.21538934608114355, 0.20863883619684018, 0.20470290354312, 0.20288353106928528] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24781545100669408, 0.21538934608114355, 0.20863883619684018, 0.20470290354312, 0.20288353106928528, 0.2005135869004134] ***
*** starting iteration: 6; err: [Inf, 0.24781545100669408, 0.21538934608114355, 0.20863883619684018, 0.20470290354312, 0.20288353106928528, 0.2005135869004134] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24781545100669408, 0.21538934608114355, 0.20863883619684018, 0.20470290354312, 0.20288353106928528, 0.2005135869004134, 0.19896251643202204] ***
*** starting iteration: 7; err: [Inf, 0.24781545100669408, 0.21538934608114355, 0.20863883619684018, 0.20470290354312, 0.20288353106928528, 0.2005135869004134, 0.19896251643202204] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24781545100669408, 0.21538934608114355, 0.20863883619684018, 0.20470290354312, 0.20288353106928528, 0.2005135869004134, 0.19896251643202204, 0.1982804620512824] ***
*** finished computation of 7 references, err: [Inf, 0.24781545100669408, 0.21538934608114355, 0.20863883619684018, 0.20470290354312, 0.20288353106928528, 0.2005135869004134, 0.19896251643202204, 0.1982804620512824] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [104, 47, 0]]
** centroid: 1, normalized-entropy: 0.8946205888911548, [(1, 104), (2, 47)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 71, 23]]
** centroid: 2, normalized-entropy: 0.8027381019527042, [(2, 71), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [116, 6, 0]]
** centroid: 3, normalized-entropy: 0.28290479297989196, [(1, 116), (2, 6)]
*** center 4: selecting labels [1] (freq >= 2) [from [58, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [1, 102, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [18, 24, 0]]
** centroid: 6, normalized-entropy: 0.9852281360342514, [(1, 18), (2, 24)]
*** center 7: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 16)
[0.9349978721236206, 0.9290308272344201, 0.9290008571445697, 0.9260158361954769, 0.9240048431665198, 0.921019822217427, 0.9149958341575108, 0.9100447753142363, 0.9080247912583242, 0.906999814185443, 0.8950027872183561, 0.8949878021734309, 0.8599737462012911, 0.844038649427871, 0.8400016783250316, 0.7899726073378769]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9349978721236206
finished with 17
iteration 8 finished
*** starting iteration: 1; err: [Inf, 0.2652973264327144] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2652973264327144, 0.2169634366782757] ***
*** finished computation of 7 references, err: [Inf, 0.2652973264327144, 0.2169634366782757] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 145, 18]]
** centroid: 1, normalized-entropy: 0.501209945162813, [(2, 145), (3, 18)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [45, 36, 0]]
** centroid: 2, normalized-entropy: 0.9910760598382222, [(1, 45), (2, 36)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [123, 23, 0]]
** centroid: 3, normalized-entropy: 0.628377920893457, [(1, 123), (2, 23)]
*** center 4: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [47, 15, 0]]
** centroid: 5, normalized-entropy: 0.7982441335646697, [(1, 47), (2, 15)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [40, 37, 0]]
** centroid: 6, normalized-entropy: 0.9989047442823606, [(1, 40), (2, 37)]
*** center 7: selecting labels [1] (freq >= 1) [from [31, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.27148453005438744] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27148453005438744, 0.20569557474222386] ***
*** finished computation of 7 references, err: [Inf, 0.27148453005438744, 0.20569557474222386] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 119, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 78, 23]]
** centroid: 2, normalized-entropy: 0.7740204128451942, [(2, 78), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [66, 29, 0]]
** centroid: 3, normalized-entropy: 0.8876297058429742, [(1, 66), (2, 29)]
*** center 4: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [47, 36, 0]]
** centroid: 5, normalized-entropy: 0.9872927315785851, [(1, 47), (2, 36)]
*** center 6: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [87, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.31097018120690306] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31097018120690306, 0.22391190915612846] ***
*** finished computation of 7 references, err: [Inf, 0.31097018120690306, 0.22391190915612846] ***
*** center 1: selecting labels [1] (freq >= 1) [from [153, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [66, 28, 0]]
** centroid: 2, normalized-entropy: 0.8786744932173094, [(1, 66), (2, 28)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [37, 44, 4]]
** centroid: 3, normalized-entropy: 0.7707249616772214, [(1, 37), (2, 44), (3, 4)]
*** center 4: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [41, 80, 0]]
** centroid: 5, normalized-entropy: 0.9237072060321943, [(1, 41), (2, 80)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 78, 19]]
** centroid: 6, normalized-entropy: 0.7136036068604937, [(2, 78), (3, 19)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [31, 20, 0]]
** centroid: 7, normalized-entropy: 0.9661773513883509, [(1, 31), (2, 20)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 17)
[0.9349978721236206, 0.9290308272344201, 0.9290008571445697, 0.9260158361954769, 0.9240048431665198, 0.921019822217427, 0.9149958341575108, 0.9100447753142363, 0.9080247912583242, 0.906999814185443, 0.9060108012203821, 0.8950027872183561, 0.8949878021734309, 0.8599737462012911, 0.844038649427871, 0.8400016783250316, 0.7899726073378769]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 2) => 0.9349978721236206
finished with 19
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.33318051485124156] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33318051485124156, 0.24353431839484727] ***
*** finished computation of 3 references, err: [Inf, 0.33318051485124156, 0.24353431839484727] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [103, 205, 23]]
** centroid: 1, normalized-entropy: 0.7694152737594973, [(1, 103), (2, 205), (3, 23)]
*** center 2: selecting labels [1] (freq >= 1) [from [178, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [101, 57, 0]]
** centroid: 3, normalized-entropy: 0.9433118205484854, [(1, 101), (2, 57)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3425810172253319] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3425810172253319, 0.23859632495572572] ***
*** finished computation of 3 references, err: [Inf, 0.3425810172253319, 0.23859632495572572] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [74, 202, 18]]
** centroid: 1, normalized-entropy: 0.7064412093565917, [(1, 74), (2, 202), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [196, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [122, 54, 0]]
** centroid: 3, normalized-entropy: 0.8894663896628687, [(1, 122), (2, 54)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.38556684205319725] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38556684205319725, 0.23631136846411666] ***
*** finished computation of 3 references, err: [Inf, 0.38556684205319725, 0.23631136846411666] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [117, 158, 22]]
** centroid: 1, normalized-entropy: 0.8151426597018528, [(1, 117), (2, 158), (3, 22)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [105, 92, 1]]
** centroid: 2, normalized-entropy: 0.6546665145746621, [(1, 105), (2, 92), (3, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [172, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4270690969770422] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4270690969770422, 0.3049699642245208] ***
*** finished computation of 3 references, err: [Inf, 0.4270690969770422, 0.3049699642245208] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [254, 65, 0]]
** centroid: 1, normalized-entropy: 0.729388105028256, [(1, 254), (2, 65)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [138, 41, 0]]
** centroid: 2, normalized-entropy: 0.7763520497518052, [(1, 138), (2, 41)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 150, 18]]
** centroid: 3, normalized-entropy: 0.4912373418243334, [(2, 150), (3, 18)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.41173240548415835] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41173240548415835, 0.294681434128978] ***
*** finished computation of 3 references, err: [Inf, 0.41173240548415835, 0.294681434128978] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [267, 35, 0]]
** centroid: 1, normalized-entropy: 0.5174420924586859, [(1, 267), (2, 35)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 168, 23]]
** centroid: 2, normalized-entropy: 0.5305636342339527, [(2, 168), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [115, 59, 0]]
** centroid: 3, normalized-entropy: 0.9239360488892353, [(1, 115), (2, 59)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.45083612632886066] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45083612632886066, 0.2987923801302731] ***
*** finished computation of 3 references, err: [Inf, 0.45083612632886066, 0.2987923801302731] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [241, 56, 0]]
** centroid: 1, normalized-entropy: 0.6984329064349525, [(1, 241), (2, 56)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [153, 47, 0]]
** centroid: 2, normalized-entropy: 0.7866261099706013, [(1, 153), (2, 47)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 147, 23]]
** centroid: 3, normalized-entropy: 0.5717805850773673, [(2, 147), (3, 23)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.24869595066970215] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24869595066970215, 0.1934925240119919] ***
*** finished computation of 7 references, err: [Inf, 0.24869595066970215, 0.1934925240119919] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [22, 184, 0]]
** centroid: 1, normalized-entropy: 0.4901757916273403, [(1, 22), (2, 184)]
*** center 2: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [91, 59, 0]]
** centroid: 3, normalized-entropy: 0.9669170093596808, [(1, 91), (2, 59)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [87, 48, 0]]
** centroid: 4, normalized-entropy: 0.9389320105807949, [(1, 87), (2, 48)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 93, 32]]
** centroid: 5, normalized-entropy: 0.8206501291977116, [(2, 93), (3, 32)]
*** center 6: selecting labels [1] (freq >= 2) [from [136, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [165, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23184203943051399] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23184203943051399, 0.19250295299291612] ***
*** finished computation of 7 references, err: [Inf, 0.23184203943051399, 0.19250295299291612] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 72, 14]]
** centroid: 1, normalized-entropy: 0.6409441847875289, [(2, 72), (3, 14)]
*** center 2: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [40, 22, 0]]
** centroid: 3, normalized-entropy: 0.9383153522334071, [(1, 40), (2, 22)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [77, 10, 0]]
** centroid: 4, normalized-entropy: 0.5146464316834292, [(1, 77), (2, 10)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [56, 28, 0]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(1, 56), (2, 28)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 60, 3]]
** centroid: 6, normalized-entropy: 0.2761954276479391, [(2, 60), (3, 3)]
*** center 7: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24584694670978935] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24584694670978935, 0.19552355800569057] ***
*** finished computation of 7 references, err: [Inf, 0.24584694670978935, 0.19552355800569057] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [86, 9, 0]]
** centroid: 1, normalized-entropy: 0.4520861986745138, [(1, 86), (2, 9)]
*** center 2: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 25, 19]]
** centroid: 3, normalized-entropy: 0.9865446300055647, [(2, 25), (3, 19)]
*** center 4: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 6, 0]]
** centroid: 5, normalized-entropy: 0.42622865699814483, [(1, 63), (2, 6)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [28, 61, 0]]
** centroid: 6, normalized-entropy: 0.898419774686072, [(1, 28), (2, 61)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 84, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2286790756592527] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2286790756592527, 0.19782732089795171] ***
*** finished computation of 7 references, err: [Inf, 0.2286790756592527, 0.19782732089795171] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [64, 32, 0]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(1, 64), (2, 32)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [45, 19, 0]]
** centroid: 2, normalized-entropy: 0.877437311089633, [(1, 45), (2, 19)]
*** center 3: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 33, 13]]
** centroid: 4, normalized-entropy: 0.8589810370425965, [(2, 33), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [64, 16, 0]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(1, 64), (2, 16)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 90, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23785164549667387] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23785164549667387, 0.19086105720326305] ***
*** finished computation of 7 references, err: [Inf, 0.23785164549667387, 0.19086105720326305] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [91, 4, 0]]
** centroid: 1, normalized-entropy: 0.25186284771956524, [(1, 91), (2, 4)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 25, 16]]
** centroid: 2, normalized-entropy: 0.9649567669505686, [(2, 25), (3, 16)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [76, 8, 0]]
** centroid: 3, normalized-entropy: 0.45371633918694493, [(1, 76), (2, 8)]
*** center 4: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 103, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [9, 59, 0]]
** centroid: 7, normalized-entropy: 0.5638560041131417, [(1, 9), (2, 59)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24018436127249151] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24018436127249151, 0.19124407753907144] ***
*** finished computation of 7 references, err: [Inf, 0.24018436127249151, 0.19124407753907144] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [48, 31, 0]]
** centroid: 1, normalized-entropy: 0.966334094295981, [(1, 48), (2, 31)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [43, 6, 0]]
** centroid: 2, normalized-entropy: 0.5363596511250623, [(1, 43), (2, 6)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 63, 13]]
** centroid: 3, normalized-entropy: 0.6601070987550468, [(2, 63), (3, 13)]
*** center 4: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [46, 17, 0]]
** centroid: 5, normalized-entropy: 0.8412367762002599, [(1, 46), (2, 17)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 81, 0]]
** centroid: 6, normalized-entropy: 0.32001486274754665, [(1, 5), (2, 81)]
*** center 7: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24991887040622532] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24991887040622532, 0.19796567146107555] ***
*** finished computation of 7 references, err: [Inf, 0.24991887040622532, 0.19796567146107555] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [68, 5, 0]]
** centroid: 1, normalized-entropy: 0.3602750564216625, [(1, 68), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [70, 7, 0]]
** centroid: 2, normalized-entropy: 0.43949698692151346, [(1, 70), (2, 7)]
*** center 3: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 18, 15]]
** centroid: 4, normalized-entropy: 0.9940302114769566, [(2, 18), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [69, 20, 0]]
** centroid: 5, normalized-entropy: 0.7686913027030167, [(1, 69), (2, 20)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 78, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 71, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22414880511164664] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22414880511164664, 0.1924107367657125] ***
*** finished computation of 7 references, err: [Inf, 0.22414880511164664, 0.1924107367657125] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 82, 14]]
** centroid: 1, normalized-entropy: 0.5993142373098089, [(2, 82), (3, 14)]
*** center 2: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [47, 24, 0]]
** centroid: 3, normalized-entropy: 0.9229192878686723, [(1, 47), (2, 24)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [94, 10, 0]]
** centroid: 4, normalized-entropy: 0.45668363153944286, [(1, 94), (2, 10)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [55, 19, 0]]
** centroid: 5, normalized-entropy: 0.8218127305034848, [(1, 55), (2, 19)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 60, 1]]
*** center 7: selecting labels [1] (freq >= 2) [from [39, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.216638070859015] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.216638070859015, 0.19128454604186118] ***
*** finished computation of 7 references, err: [Inf, 0.216638070859015, 0.19128454604186118] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [38, 42, 0]]
** centroid: 1, normalized-entropy: 0.99819587904281, [(1, 38), (2, 42)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [47, 19, 0]]
** centroid: 2, normalized-entropy: 0.8659653498997099, [(1, 47), (2, 19)]
*** center 3: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [74, 13, 0]]
** centroid: 4, normalized-entropy: 0.6084002154765848, [(1, 74), (2, 13)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 21, 14]]
** centroid: 5, normalized-entropy: 0.9709505944546688, [(2, 21), (3, 14)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 88, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [82, 3, 0]]
** centroid: 7, normalized-entropy: 0.22028326695127437, [(1, 82), (2, 3)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2382661581952125] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2382661581952125, 0.1919827782874927] ***
*** finished computation of 7 references, err: [Inf, 0.2382661581952125, 0.1919827782874927] ***
*** center 1: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 36, 15]]
** centroid: 2, normalized-entropy: 0.8739810481273581, [(2, 36), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [71, 17, 0]]
** centroid: 3, normalized-entropy: 0.7080803256135676, [(1, 71), (2, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [46, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [10, 78, 0]]
** centroid: 5, normalized-entropy: 0.5107878229540133, [(1, 10), (2, 78)]
*** center 6: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [8, 60, 0]]
** centroid: 7, normalized-entropy: 0.5225593745369407, [(1, 8), (2, 60)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22358650068566202] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22358650068566202, 0.19232379792258145] ***
*** finished computation of 7 references, err: [Inf, 0.22358650068566202, 0.19232379792258145] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 80, 14]]
** centroid: 1, normalized-entropy: 0.607171654871303, [(2, 80), (3, 14)]
*** center 2: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [40, 15, 0]]
** centroid: 3, normalized-entropy: 0.8453509366224364, [(1, 40), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [74, 12, 0]]
** centroid: 4, normalized-entropy: 0.5830194167347007, [(1, 74), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 16, 0]]
** centroid: 5, normalized-entropy: 0.6840384356390419, [(1, 72), (2, 16)]
*** center 6: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 62, 3]]
** centroid: 7, normalized-entropy: 0.269828447703074, [(2, 62), (3, 3)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24801595500577242] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24801595500577242, 0.19672523234598338] ***
*** finished computation of 7 references, err: [Inf, 0.24801595500577242, 0.19672523234598338] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [82, 18, 0]]
** centroid: 1, normalized-entropy: 0.6800770457282798, [(1, 82), (2, 18)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 17, 11]]
** centroid: 2, normalized-entropy: 0.9666186325481027, [(2, 17), (3, 11)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [66, 3, 0]]
** centroid: 3, normalized-entropy: 0.2580186686648155, [(1, 66), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [64, 9, 0]]
** centroid: 4, normalized-entropy: 0.5387379148665815, [(1, 64), (2, 9)]
*** center 5: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 66, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 88, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2347484809756279] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2347484809756279, 0.18769876012764872] ***
*** finished computation of 7 references, err: [Inf, 0.2347484809756279, 0.18769876012764872] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [76, 7, 0]]
** centroid: 1, normalized-entropy: 0.4172806906708316, [(1, 76), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 12, 0]]
** centroid: 2, normalized-entropy: 0.7355085815538399, [(1, 46), (2, 12)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 46, 16]]
** centroid: 3, normalized-entropy: 0.8238116333123173, [(2, 46), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [31, 59, 0]]
** centroid: 5, normalized-entropy: 0.9290083681703216, [(1, 31), (2, 59)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [2, 69, 0]]
** centroid: 6, normalized-entropy: 0.18512476010054582, [(1, 2), (2, 69)]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23927702087908984] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23927702087908984, 0.19447267629764975] ***
*** finished computation of 7 references, err: [Inf, 0.23927702087908984, 0.19447267629764975] ***
*** center 1: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 53, 9]]
** centroid: 2, normalized-entropy: 0.5975977764379984, [(2, 53), (3, 9)]
*** center 3: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [55, 13, 0]]
** centroid: 4, normalized-entropy: 0.7039260680195971, [(1, 55), (2, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [33, 78, 0]]
** centroid: 5, normalized-entropy: 0.8779620013943914, [(1, 33), (2, 78)]
*** center 6: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [15, 49, 0]]
** centroid: 7, normalized-entropy: 0.7855602922535471, [(1, 15), (2, 49)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2135750258602202] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2135750258602202, 0.1913199650347233] ***
*** finished computation of 7 references, err: [Inf, 0.2135750258602202, 0.1913199650347233] ***
*** center 1: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 39, 18]]
** centroid: 2, normalized-entropy: 0.8997437586982626, [(2, 39), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [47, 9, 0]]
** centroid: 3, normalized-entropy: 0.6360156177392153, [(1, 47), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [53, 39, 0]]
** centroid: 4, normalized-entropy: 0.9832307535844343, [(1, 53), (2, 39)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [8, 92, 0]]
** centroid: 5, normalized-entropy: 0.4021791902022729, [(1, 8), (2, 92)]
*** center 6: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [71, 1, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2346973302438855] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2346973302438855, 0.19194179361127317] ***
*** finished computation of 7 references, err: [Inf, 0.2346973302438855, 0.19194179361127317] ***
*** center 1: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [42, 17, 0]]
** centroid: 2, normalized-entropy: 0.8663006754980497, [(1, 42), (2, 17)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 61, 15]]
** centroid: 3, normalized-entropy: 0.7166336117927455, [(2, 61), (3, 15)]
*** center 4: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [60, 28, 0]]
** centroid: 5, normalized-entropy: 0.9023932827949788, [(1, 60), (2, 28)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [34, 9, 0]]
** centroid: 6, normalized-entropy: 0.7401470427139037, [(1, 34), (2, 9)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [5, 72, 0]]
** centroid: 7, normalized-entropy: 0.34673146824966367, [(1, 5), (2, 72)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2347997914776206] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2347997914776206, 0.1962537156008184] ***
*** finished computation of 7 references, err: [Inf, 0.2347997914776206, 0.1962537156008184] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 96, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [34, 26, 0]]
** centroid: 3, normalized-entropy: 0.9871377743721862, [(1, 34), (2, 26)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [47, 24, 0]]
** centroid: 4, normalized-entropy: 0.9229192878686723, [(1, 47), (2, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [92, 4, 0]]
** centroid: 5, normalized-entropy: 0.24988229283318547, [(1, 92), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [73, 15, 0]]
** centroid: 6, normalized-entropy: 0.6587435307694671, [(1, 73), (2, 15)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 19, 13]]
** centroid: 7, normalized-entropy: 0.9744894033980525, [(2, 19), (3, 13)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22261522851139307] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22261522851139307, 0.20057890976034104] ***
*** finished computation of 7 references, err: [Inf, 0.22261522851139307, 0.20057890976034104] ***
*** center 1: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 44, 20]]
** centroid: 2, normalized-entropy: 0.8960382325345574, [(2, 44), (3, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [47, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [67, 51, 0]]
** centroid: 4, normalized-entropy: 0.9866967086735614, [(1, 67), (2, 51)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [15, 69, 0]]
** centroid: 5, normalized-entropy: 0.6769418697808861, [(1, 15), (2, 69)]
*** center 6: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 36, 0]]
** centroid: 7, normalized-entropy: 0.46899559358928133, [(1, 4), (2, 36)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24486948873661457] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24486948873661457, 0.19535311806201935] ***
*** finished computation of 7 references, err: [Inf, 0.24486948873661457, 0.19535311806201935] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [43, 65, 0]]
** centroid: 1, normalized-entropy: 0.9698570179131006, [(1, 43), (2, 65)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [33, 5, 0]]
** centroid: 2, normalized-entropy: 0.5617526078313283, [(1, 33), (2, 5)]
*** center 3: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 40, 19]]
** centroid: 4, normalized-entropy: 0.9065795484987461, [(2, 40), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [51, 7, 0]]
** centroid: 5, normalized-entropy: 0.5313400141801669, [(1, 51), (2, 7)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [9, 74, 0]]
** centroid: 6, normalized-entropy: 0.4951734787020683, [(1, 9), (2, 74)]
*** center 7: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24721854893863202] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24721854893863202, 0.19627669384237378] ***
*** finished computation of 7 references, err: [Inf, 0.24721854893863202, 0.19627669384237378] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [99, 6, 0]]
** centroid: 1, normalized-entropy: 0.3159971329784246, [(1, 99), (2, 6)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 16, 17]]
** centroid: 2, normalized-entropy: 0.9993375041688846, [(2, 16), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [68, 14, 0]]
** centroid: 3, normalized-entropy: 0.6593758812786991, [(1, 68), (2, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 75, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 71, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23292919447831809] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23292919447831809, 0.1908598295338452] ***
*** finished computation of 7 references, err: [Inf, 0.23292919447831809, 0.1908598295338452] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [28, 67, 0]]
** centroid: 1, normalized-entropy: 0.8747617811911199, [(1, 28), (2, 67)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [47, 7, 0]]
** centroid: 2, normalized-entropy: 0.5564215672884282, [(1, 47), (2, 7)]
*** center 3: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 33, 10]]
** centroid: 4, normalized-entropy: 0.7824441294066888, [(2, 33), (3, 10)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [2, 68, 0]]
** centroid: 5, normalized-entropy: 0.18717625687320805, [(1, 2), (2, 68)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [57, 2, 0]]
** centroid: 6, normalized-entropy: 0.21357981533827744, [(1, 57), (2, 2)]
*** center 7: selecting labels [1] (freq >= 2) [from [103, 1, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2270017764205113] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2270017764205113, 0.18880707957595586] ***
*** finished computation of 7 references, err: [Inf, 0.2270017764205113, 0.18880707957595586] ***
*** center 1: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 30, 20]]
** centroid: 2, normalized-entropy: 0.9709505944546688, [(2, 30), (3, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [48, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [16, 87, 0]]
** centroid: 4, normalized-entropy: 0.6230433996216712, [(1, 16), (2, 87)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [42, 17, 0]]
** centroid: 5, normalized-entropy: 0.8663006754980497, [(1, 42), (2, 17)]
*** center 6: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 60, 0]]
** centroid: 7, normalized-entropy: 0.2055925081850832, [(1, 2), (2, 60)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24047941241599619] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24047941241599619, 0.19491406350210308] ***
*** finished computation of 7 references, err: [Inf, 0.24047941241599619, 0.19491406350210308] ***
*** center 1: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 47, 13]]
** centroid: 2, normalized-entropy: 0.7540340561971327, [(2, 47), (3, 13)]
*** center 3: selecting labels [1] (freq >= 2) [from [59, 1, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [43, 62, 0]]
** centroid: 4, normalized-entropy: 0.9762497491311086, [(1, 43), (2, 62)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [58, 25, 0]]
** centroid: 5, normalized-entropy: 0.8827586787955116, [(1, 58), (2, 25)]
*** center 6: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 57, 0]]
** centroid: 7, normalized-entropy: 0.21357981533827744, [(1, 2), (2, 57)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25567778122518214] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25567778122518214, 0.19561540482100098] ***
*** finished computation of 7 references, err: [Inf, 0.25567778122518214, 0.19561540482100098] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [23, 74, 0]]
** centroid: 1, normalized-entropy: 0.790206924188637, [(1, 23), (2, 74)]
*** center 2: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [52, 35, 0]]
** centroid: 3, normalized-entropy: 0.9722794620968822, [(1, 52), (2, 35)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [44, 26, 0]]
** centroid: 4, normalized-entropy: 0.9517626756348312, [(1, 44), (2, 26)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 53, 14]]
** centroid: 5, normalized-entropy: 0.7394809367166378, [(2, 53), (3, 14)]
*** center 6: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2236895270999521] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2236895270999521, 0.19469870207924395] ***
*** finished computation of 7 references, err: [Inf, 0.2236895270999521, 0.19469870207924395] ***
*** center 1: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 42, 11]]
** centroid: 2, normalized-entropy: 0.7367680100024784, [(2, 42), (3, 11)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [43, 15, 0]]
** centroid: 3, normalized-entropy: 0.8246578332945033, [(1, 43), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [39, 51, 0]]
** centroid: 4, normalized-entropy: 0.9871377743721862, [(1, 39), (2, 51)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [11, 85, 0]]
** centroid: 5, normalized-entropy: 0.5135877363803757, [(1, 11), (2, 85)]
*** center 6: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [30, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2400363801252097] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2400363801252097, 0.1942061514016241] ***
*** finished computation of 7 references, err: [Inf, 0.2400363801252097, 0.1942061514016241] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 92, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [40, 45, 0]]
** centroid: 3, normalized-entropy: 0.9975025463691153, [(1, 40), (2, 45)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [89, 4, 0]]
** centroid: 4, normalized-entropy: 0.2559300438391133, [(1, 89), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [65, 12, 0]]
** centroid: 5, normalized-entropy: 0.6242741010130388, [(1, 65), (2, 12)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 37, 20]]
** centroid: 6, normalized-entropy: 0.9348490242345946, [(2, 37), (3, 20)]
*** center 7: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2346101155327633] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2346101155327633, 0.19612028888240457] ***
*** finished computation of 7 references, err: [Inf, 0.2346101155327633, 0.19612028888240457] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [36, 49, 0]]
** centroid: 1, normalized-entropy: 0.9830605548016024, [(1, 36), (2, 49)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [40, 11, 0]]
** centroid: 2, normalized-entropy: 0.7522121733341471, [(1, 40), (2, 11)]
*** center 3: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 31, 14]]
** centroid: 4, normalized-entropy: 0.8944518845341284, [(2, 31), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [54, 9, 0]]
** centroid: 5, normalized-entropy: 0.5916727785823274, [(1, 54), (2, 9)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [89, 10, 0]]
** centroid: 6, normalized-entropy: 0.47218938467675087, [(1, 89), (2, 10)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 79, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21529678278788925] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21529678278788925, 0.1906367174386978] ***
*** finished computation of 7 references, err: [Inf, 0.21529678278788925, 0.1906367174386978] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 81, 3]]
** centroid: 1, normalized-entropy: 0.2222848306856879, [(2, 81), (3, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [37, 11, 0]]
** centroid: 2, normalized-entropy: 0.7765557854444601, [(1, 37), (2, 11)]
*** center 3: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 62, 19]]
** centroid: 4, normalized-entropy: 0.785889583138768, [(2, 62), (3, 19)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [62, 19, 0]]
** centroid: 5, normalized-entropy: 0.785889583138768, [(1, 62), (2, 19)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [49, 8, 0]]
** centroid: 6, normalized-entropy: 0.5851569902762294, [(1, 49), (2, 8)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [83, 3, 0]]
** centroid: 7, normalized-entropy: 0.21832103023746746, [(1, 83), (2, 3)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24553469983302056] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24553469983302056, 0.19571286571864038] ***
*** finished computation of 7 references, err: [Inf, 0.24553469983302056, 0.19571286571864038] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [40, 60, 0]]
** centroid: 1, normalized-entropy: 0.9709505944546688, [(1, 40), (2, 60)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [38, 8, 0]]
** centroid: 2, normalized-entropy: 0.6665783579949205, [(1, 38), (2, 8)]
*** center 3: selecting labels [1] (freq >= 2) [from [42, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 61, 15]]
** centroid: 4, normalized-entropy: 0.7166336117927455, [(2, 61), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [31, 73, 0]]
** centroid: 5, normalized-entropy: 0.8789274256388384, [(1, 31), (2, 73)]
*** center 6: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25143386756815017] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25143386756815017, 0.1897319431193173] ***
*** finished computation of 7 references, err: [Inf, 0.25143386756815017, 0.1897319431193173] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 68, 14]]
** centroid: 1, normalized-entropy: 0.6593758812786991, [(2, 68), (3, 14)]
*** center 2: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [40, 17, 0]]
** centroid: 3, normalized-entropy: 0.8791357668533337, [(1, 40), (2, 17)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [78, 20, 0]]
** centroid: 4, normalized-entropy: 0.7300166301457938, [(1, 78), (2, 20)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [49, 31, 0]]
** centroid: 5, normalized-entropy: 0.9631672450918831, [(1, 49), (2, 31)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 55, 1]]
*** center 7: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23346616293676198] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23346616293676198, 0.1881153598520905] ***
*** finished computation of 7 references, err: [Inf, 0.23346616293676198, 0.1881153598520905] ***
*** center 1: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 38, 13]]
** centroid: 2, normalized-entropy: 0.8189555018403103, [(2, 38), (3, 13)]
*** center 3: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [52, 16, 0]]
** centroid: 4, normalized-entropy: 0.787126586201269, [(1, 52), (2, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [11, 87, 0]]
** centroid: 5, normalized-entropy: 0.5066503344840895, [(1, 11), (2, 87)]
*** center 6: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [3, 50, 0]]
** centroid: 7, normalized-entropy: 0.3138129641688652, [(1, 3), (2, 50)]
finished with 9 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 384,3 => 32,1 => 584), Dict(2 => 357,3 => 31,1 => 612))
[ Info: ===== scores for single classifier: {"micro_f1":0.933,"precision":0.933,"recall":0.933,"macro_recall":0.9470748873025913,"macro_f1":0.885538941806694,"accuracy":0.933,"class_f1":{"2":0.910547396528705,"3":0.7894736842105263,"1":0.9565957446808511},"class_precision":{"2":0.8698979591836735,"3":0.6666666666666666,"1":0.9982238010657194},"class_recall":{"2":0.9551820728291317,"3":0.967741935483871,"1":0.9183006535947712}}
[ Info: ===== scores for 1: {"micro_f1":0.966,"precision":0.966,"recall":0.966,"macro_recall":0.9057458108691505,"macro_f1":0.9345820046990903,"accuracy":0.966,"class_f1":{"2":0.9531680440771348,"3":0.8727272727272727,"1":0.977850697292863},"class_precision":{"2":0.9376693766937669,"3":1.0,"1":0.9818780889621087},"class_recall":{"2":0.969187675070028,"3":0.7741935483870968,"1":0.9738562091503268}}
[ Info: ===== scores for 5: {"micro_f1":0.962,"precision":0.962,"recall":0.962,"macro_recall":0.9353583727397768,"macro_f1":0.9504038921666861,"accuracy":0.962,"class_f1":{"2":0.9483695652173912,"3":0.9310344827586207,"1":0.9718076285240465},"class_precision":{"2":0.920844327176781,"3":1.0,"1":0.9865319865319865},"class_recall":{"2":0.9775910364145658,"3":0.8709677419354839,"1":0.9575163398692811}}
[ Info: ===== scores for 7: {"micro_f1":0.959,"precision":0.959,"recall":0.959,"macro_recall":0.9329462967982892,"macro_f1":0.933741462018789,"accuracy":0.959,"class_f1":{"2":0.94421768707483,"3":0.8852459016393444,"1":0.9717607973421928},"class_precision":{"2":0.917989417989418,"3":0.9,"1":0.9881756756756757},"class_recall":{"2":0.9719887955182073,"3":0.8709677419354839,"1":0.9558823529411765}}
[ Info: ===== scores for 9: {"micro_f1":0.959,"precision":0.959,"recall":0.959,"macro_recall":0.945099545194422,"macro_f1":0.944282825356474,"accuracy":0.959,"class_f1":{"2":0.9449664429530202,"3":0.9180327868852459,"1":0.9698492462311558},"class_precision":{"2":0.9072164948453608,"3":0.9333333333333333,"1":0.9948453608247423},"class_recall":{"2":0.9859943977591037,"3":0.9032258064516129,"1":0.946078431372549}}
[ Info: ===== scores for 11: {"micro_f1":0.961,"precision":0.961,"recall":0.961,"macro_recall":0.9563968956758332,"macro_f1":0.9465564343182583,"accuracy":0.961,"class_f1":{"2":0.9475100942126514,"3":0.9206349206349206,"1":0.9715242881072026},"class_precision":{"2":0.9119170984455959,"3":0.90625,"1":0.9965635738831615},"class_recall":{"2":0.9859943977591037,"3":0.9354838709677419,"1":0.9477124183006536}}
(score = 0.966, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.969, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.969, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.962, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.962, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.962, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.962, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.96, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.96, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.959, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.959, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.962, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.962, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.969,"k":1,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.969,"precision":0.969,"recall":0.969,"macro_recall":0.9077688423039466,"macro_f1":0.9367655069633588,"accuracy":0.969,"class_f1":{"2":0.9572413793103448,"3":0.8727272727272727,"1":0.9803278688524589},"class_precision":{"2":0.9429347826086957,"3":1.0,"1":0.9835526315789473},"class_recall":{"2":0.9719887955182073,"3":0.7741935483870968,"1":0.9771241830065359}}
Test Summary: | Pass  Total
AKNC          |    8      8
[7, 3, 1, 1, 2, 3, 4, 5, 10, 10, 34, 5, 1, 8, 7, 9, 44, 12, 3, 1, 3, 2, 1, 7, 3, 4, 7, 2, 1, 3, 1, 3, 81, 3, 2, 20, 8, 15, 40, 1, 25, 8, 12, 9, 22, 16, 6, 34, 14, 3, 76, 21, 9, 13, 31, 11, 67, 6, 40, 17, 8, 33, 103, 3, 12, 6, 17, 3, 11, 5, 2, 34, 17, 2, 2, 2, 16, 1198, 107, 30, 5, 135, 18, 14, 4, 1, 1, 4, 2, 12, 9, 22, 37, 6, 6, 8, 13, 2, 3, 24, 15, 22, 2, 22, 8, 69, 3, 20, 40, 24, 5, 21, 69, 8, 7, 10, 17, 4, 53, 9, 6, 16, 121, 51, 4, 31, 10, 75, 15, 4, 40, 33, 40, 15, 23, 1, 77, 9, 28, 23, 1, 4, 21, 30, 12, 19, 18, 77, 33, 14, 19, 6, 21, 1, 62, 119, 4, 47, 16, 32, 4, 2, 40, 179, 9, 19, 7, 14, 13, 8, 27, 71, 249, 2, 27, 35, 20, 77, 7, 10, 53, 61, 2, 40, 19, 29, 2, 33, 49, 17, 7, 389, 6, 38, 12, 38, 30, 40, 7, 84, 13, 40, 2, 8, 32, 2, 14, 20, 11, 7, 81, 186, 11, 2, 8, 14, 26, 7, 19, 8, 22, 11, 12, 29, 4, 8, 8, 19, 7, 16, 14, 44, 3, 49, 12, 41, 34, 37, 74, 77, 10, 14, 10, 38, 67, 35, 6, 79, 73, 258, 8, 35, 206, 63, 9, 190, 25, 63, 8, 13, 43, 54, 16, 119, 73, 79, 17, 4, 91, 73, 33, 9, 119, 28, 76, 8, 36, 5, 26, 43, 91, 20, 13, 12, 20, 53, 34, 3, 12, 33, 2, 17, 6, 44, 5, 34, 2, 181, 86, 2]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6739999999999999, speedup = 0.3318692005512187, eval_ratio = 0.076901)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":null,"recall":0.4036458333333333,"f1":null,"seconds":0.00017266720533370972,"exhaustive_search_seconds":0.0003600325435400009,"evaluations":545.953125,"distances_sum":1696.808040770851}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5746527777777776,"recall":0.5737847222222221,"f1":null,"seconds":0.0004372987896203995,"exhaustive_search_seconds":0.0003600325435400009,"evaluations":705.296875,"distances_sum":1596.7364436119506}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.676215277777777,"recall":0.676215277777777,"f1":null,"seconds":0.0003485754132270813,"exhaustive_search_seconds":0.0003600325435400009,"evaluations":872.1328125,"distances_sum":1574.5141222268883}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7465277777777771,"recall":0.7465277777777771,"f1":0.7465277777777771,"seconds":0.00044097378849983215,"exhaustive_search_seconds":0.0003600325435400009,"evaluations":993.7890625,"distances_sum":1548.2701073880266}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7925347222222217,"recall":0.7925347222222217,"f1":0.7925347222222217,"seconds":0.0005718991160392761,"exhaustive_search_seconds":0.0003600325435400009,"evaluations":1110.9765625,"distances_sum":1531.7060599440692}
KCenters.DeloneInvIndex> reached performance {"precision":0.8437499999999991,"recall":0.8437499999999991,"f1":0.8437499999999991,"seconds":0.0008187554776668549,"exhaustive_search_seconds":0.0003600325435400009,"evaluations":1238.484375,"distances_sum":1517.2595396766778}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8140000000000002, speedup = 0.7111068839248271, eval_ratio = 0.10317799999999999)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
