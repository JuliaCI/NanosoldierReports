Julia Version 1.6.0-DEV.106
Commit 39e360c5a8 (2020-05-26 17:21 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed PooledArrays ──────────────── v0.5.3
  Installed InvertedIndices ───────────── v1.0.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed MappedArrays ──────────────── v0.2.2
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed MLDataUtils ───────────────── v0.5.1
  Installed Reexport ──────────────────── v0.2.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed Missings ──────────────────── v0.4.3
  Installed Parsers ───────────────────── v1.0.4
  Installed Tables ────────────────────── v1.0.4
  Installed StatsBase ─────────────────── v0.32.2
  Installed Compat ────────────────────── v3.10.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed TableTraits ───────────────── v1.0.0
  Installed DataAPI ───────────────────── v1.3.0
  Installed OrderedCollections ────────── v1.2.0
  Installed JSON ──────────────────────── v0.21.0
  Installed DataStructures ────────────── v0.17.17
  Installed MLDataPattern ─────────────── v0.5.3
  Installed DataFrames ────────────────── v0.20.2
  Installed SimilaritySearch ──────────── v0.3.19
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.10.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.17
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.4
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_mwcQId/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_mwcQId/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.10.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.17
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.4
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9323044313987097
[ Info: 0.8321307849884033
[ Info: 0.5531853482623895
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3370421227564414
mean(cdnet.distances) = 0.38256781386832395
mean(crand.distances) = 0.34551169817646343
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4189453125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4189453125,"f1":null,"seconds":4.127621650695801e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":6.234375,"distances_sum":1075.7537107229234}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8582906676656685,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.2890625,"distances_sum":2099.022051044356}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.765625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.765625,"f1":0.8582906676656685,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.2890625,"distances_sum":2099.022051044356}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9224447427572433,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.6171875,"distances_sum":2433.4775391676894}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9499141483516487,"seconds":6.020069122314453e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.7890625,"distances_sum":2664.1111574184124}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9287316849816856,"seconds":5.677342414855957e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.7109375,"distances_sum":2511.090539611015}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.922078442390943,"seconds":5.720183253288269e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.609375,"distances_sum":2445.8492568852707}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.912109375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.912109375,"f1":0.9499141483516487,"seconds":6.020069122314453e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.7890625,"distances_sum":2664.1111574184124}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9602335164835167,"seconds":6.856396794319153e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.8515625,"distances_sum":2719.4195635545298}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9558836996337,"seconds":7.160007953643799e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.8828125,"distances_sum":2717.5698863564844}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9296875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9602335164835167,"seconds":6.856396794319153e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.8515625,"distances_sum":2719.4195635545298}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9296875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9602335164835167,"seconds":6.856396794319153e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.8515625,"distances_sum":2719.4195635545298}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8526905386280395,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.3046875,"distances_sum":1859.4625280975354}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5908203125, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5908203125,"f1":0.7285863442113448,"seconds":4.911795258522034e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":7.109375,"distances_sum":1362.517049824757}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.755859375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.755859375,"f1":0.8526905386280395,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.3046875,"distances_sum":1859.4625280975354}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.956295787545788,"seconds":7.223337888717651e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.890625,"distances_sum":2511.514726726654}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9228515625,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.956295787545788,"seconds":7.223337888717651e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.890625,"distances_sum":2511.514726726654}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9602163461538467,"seconds":6.858259439468384e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.9296875,"distances_sum":2560.373513341432}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":7,"bsize":12}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9768429487179491,"seconds":7.439404726028442e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.9296875,"distances_sum":2679.982365668749}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9768429487179491,"seconds":7.439404726028442e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.9296875,"distances_sum":2679.982365668749}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9768429487179491,"seconds":7.439404726028442e-6,"exhaustive_search_seconds":1.5925616025924683e-6,"evaluations":8.9296875,"distances_sum":2679.982365668749}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5859375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5859375,"f1":0.721946803196804,"seconds":4.779547452926636e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":7.90625,"distances_sum":1356.6581557345078}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5859375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5859375,"f1":0.721946803196804,"seconds":4.779547452926636e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":7.90625,"distances_sum":1356.6581557345078}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5859375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5859375,"f1":0.721946803196804,"seconds":4.779547452926636e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":7.90625,"distances_sum":1356.6581557345078}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.5859375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5859375,"f1":0.721946803196804,"seconds":4.779547452926636e-6,"exhaustive_search_seconds":1.475214958190918e-6,"evaluations":7.90625,"distances_sum":1356.6581557345078}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4169921875, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.4169921875,"f1":null,"seconds":3.729015588760376e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":6.015625,"distances_sum":693.5210202184477}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4169921875,"state":{"ssize":5,"bsize":2},"perf":{"precision":null,"recall":0.4169921875,"f1":null,"seconds":3.729015588760376e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":6.015625,"distances_sum":693.5210202184477}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5908203125, conf: {"ssize":7,"bsize":3}, perf: {"precision":1.0,"recall":0.5908203125,"f1":0.727477210289711,"seconds":4.1835010051727295e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":6.9375,"distances_sum":1048.7438462976338}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5908203125,"state":{"ssize":7,"bsize":3},"perf":{"precision":1.0,"recall":0.5908203125,"f1":0.727477210289711,"seconds":4.1835010051727295e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":6.9375,"distances_sum":1048.7438462976338}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.693359375, conf: {"ssize":9,"bsize":4}, perf: {"precision":1.0,"recall":0.693359375,"f1":0.8084653194028204,"seconds":4.537403583526611e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.3828125,"distances_sum":1285.0466876303826}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.693359375,"state":{"ssize":9,"bsize":4},"perf":{"precision":1.0,"recall":0.693359375,"f1":0.8084653194028204,"seconds":4.537403583526611e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.3828125,"distances_sum":1285.0466876303826}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.693359375,"state":{"ssize":9,"bsize":4},"perf":{"precision":1.0,"recall":0.693359375,"f1":0.8084653194028204,"seconds":4.537403583526611e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.3828125,"distances_sum":1285.0466876303826}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6484375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6484375,"f1":0.772613324175825,"seconds":4.742294549942017e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.546875,"distances_sum":1260.9981666738881}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.662109375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.662109375,"f1":0.7815477924852932,"seconds":4.610046744346619e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.5234375,"distances_sum":1327.768995875856}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.662109375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.662109375,"f1":0.7815477924852932,"seconds":4.610046744346619e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.5234375,"distances_sum":1327.768995875856}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.860778284215785,"seconds":5.288049578666687e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.328125,"distances_sum":1622.5268569620132}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9353308150183157,"seconds":5.5283308029174805e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.71875,"distances_sum":2086.0932682353955}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9415324259074264,"seconds":5.593523383140564e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7265625,"distances_sum":2108.681830315962}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9432005494505502,"seconds":5.638226866722107e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7734375,"distances_sum":2102.9899089839028}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.8979062604062612,"seconds":5.299225449562073e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.640625,"distances_sum":1804.3452064425367}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.751953125,"f1":0.8479088619713628,"seconds":5.273148417472839e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.3046875,"distances_sum":1537.1826082155085}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.85957323926074,"seconds":5.41098415851593e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.375,"distances_sum":1588.491644497434}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8994140625,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.8994140625,"f1":0.9432005494505502,"seconds":5.638226866722107e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7734375,"distances_sum":2102.9899089839028}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":9,"bsize":10}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9734031593406596,"seconds":6.068497896194458e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9375,"distances_sum":2259.0862968937745}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.966796875, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.966796875,"f1":0.9818280677655681,"seconds":6.187707185745239e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9375,"distances_sum":2316.061589404744}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9799107142857144,"seconds":6.338581442832947e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9609375,"distances_sum":2289.1038420015097}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.950807005494506,"seconds":5.8729201555252075e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.890625,"distances_sum":2111.9872586859665}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.966796875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9818280677655681,"seconds":6.187707185745239e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9375,"distances_sum":2316.061589404744}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.966796875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9818280677655681,"seconds":6.187707185745239e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9375,"distances_sum":2316.061589404744}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1982421875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1982421875,"f1":null,"seconds":3.2782554626464844e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":5.3828125,"distances_sum":393.97600682177847}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6767578125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6767578125,"f1":0.7965402652902661,"seconds":4.656612873077393e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":7.2265625,"distances_sum":1382.25835830866}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4130859375, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.4130859375,"f1":null,"seconds":3.769993782043457e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":5.59375,"distances_sum":784.8099699994733}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6767578125,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6767578125,"f1":0.7965402652902661,"seconds":4.656612873077393e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":7.2265625,"distances_sum":1382.25835830866}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9484088827838834,"seconds":6.370246410369873e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.6875,"distances_sum":2208.416726031126}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8857421875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8857421875,"f1":0.9346096611721617,"seconds":5.645677447319031e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.7734375,"distances_sum":2073.725834444178}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9091796875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9091796875,"f1":0.9484088827838834,"seconds":6.370246410369873e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.6875,"distances_sum":2208.416726031126}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9671875000000004,"seconds":6.686896085739136e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.859375,"distances_sum":2281.4379380944715}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9669127747252753,"seconds":5.774199962615967e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8671875,"distances_sum":2280.3189338515713}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9599759615384618,"seconds":5.619600415229797e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.84375,"distances_sum":2246.5378272139787}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9404296875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9671875000000004,"seconds":6.686896085739136e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.859375,"distances_sum":2281.4379380944715}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9404296875,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9671875000000004,"seconds":6.686896085739136e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.859375,"distances_sum":2281.4379380944715}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6513671875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6513671875,"f1":0.7784965034965042,"seconds":4.751607775688171e-6,"exhaustive_search_seconds":2.1569430828094482e-6,"evaluations":7.3125,"distances_sum":1382.5569248808947}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6513671875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6513671875,"f1":0.7784965034965042,"seconds":4.751607775688171e-6,"exhaustive_search_seconds":2.1569430828094482e-6,"evaluations":7.3125,"distances_sum":1382.5569248808947}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9018174533799542,"seconds":5.844980478286743e-6,"exhaustive_search_seconds":2.1569430828094482e-6,"evaluations":8.6875,"distances_sum":1885.1365599507217}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7294921875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7294921875,"f1":0.834636197136198,"seconds":5.4370611906051636e-6,"exhaustive_search_seconds":2.1569430828094482e-6,"evaluations":7.765625,"distances_sum":1584.7382487454513}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9413404304029309,"seconds":5.720183253288269e-6,"exhaustive_search_seconds":2.1569430828094482e-6,"evaluations":8.71875,"distances_sum":2152.465248903278}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7353515625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7353515625,"f1":0.836491113053614,"seconds":5.189329385757446e-6,"exhaustive_search_seconds":2.1569430828094482e-6,"evaluations":7.8203125,"distances_sum":1577.5839281863987}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7265625, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.7265625,"f1":0.8315625346875353,"seconds":5.535781383514404e-6,"exhaustive_search_seconds":2.1569430828094482e-6,"evaluations":7.765625,"distances_sum":1577.8651921064616}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8994140625,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.8994140625,"f1":0.9413404304029309,"seconds":5.720183253288269e-6,"exhaustive_search_seconds":2.1569430828094482e-6,"evaluations":8.71875,"distances_sum":2152.465248903278}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9735691391941397,"seconds":6.0889869928359985e-6,"exhaustive_search_seconds":2.1569430828094482e-6,"evaluations":8.90625,"distances_sum":2353.664808991849}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9521462912087916,"seconds":6.4838677644729614e-6,"exhaustive_search_seconds":2.1569430828094482e-6,"evaluations":8.71875,"distances_sum":2251.5287695394236}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9677734375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9677734375,"f1":0.9823660714285718,"seconds":6.314367055892944e-6,"exhaustive_search_seconds":2.1569430828094482e-6,"evaluations":8.9375,"distances_sum":2397.380828845183}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9662431318681325,"seconds":5.992129445075989e-6,"exhaustive_search_seconds":2.1569430828094482e-6,"evaluations":8.8359375,"distances_sum":2331.8486602123985}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9677734375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9823660714285718,"seconds":6.314367055892944e-6,"exhaustive_search_seconds":2.1569430828094482e-6,"evaluations":8.9375,"distances_sum":2397.380828845183}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9677734375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9823660714285718,"seconds":6.314367055892944e-6,"exhaustive_search_seconds":2.1569430828094482e-6,"evaluations":8.9375,"distances_sum":2397.380828845183}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.208984375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.208984375,"f1":null,"seconds":3.8389116525650024e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":6.2109375,"distances_sum":488.25230163670943}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.79296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.79296875,"f1":0.8762508325008332,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.15625,"distances_sum":1855.8434908332017}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7158203125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.7158203125,"f1":0.8230711996337003,"seconds":5.081295967102051e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.0,"distances_sum":1606.3886294472275}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.79296875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.79296875,"f1":0.8762508325008332,"seconds":5.559995770454407e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.15625,"distances_sum":1855.8434908332017}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9338115009990016,"seconds":5.9157609939575195e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.859375,"distances_sum":2195.087078193191}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.837890625, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.837890625,"f1":0.9057666292041299,"seconds":5.749985575675964e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.6796875,"distances_sum":1987.8013104109111}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9588401182151187,"seconds":6.0014426708221436e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.859375,"distances_sum":2387.400049118901}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.93798076923077,"seconds":6.064772605895996e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.765625,"distances_sum":2260.0848603706345}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9588401182151187,"seconds":6.0014426708221436e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.859375,"distances_sum":2387.400049118901}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96484375, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.96484375,"f1":0.980637591575092,"seconds":6.3069164752960205e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.953125,"distances_sum":2532.5222797522697}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.958984375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.958984375,"f1":0.9774381868131871,"seconds":6.252899765968323e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.9453125,"distances_sum":2498.542036715206}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9653674450549458,"seconds":6.472691893577576e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.9140625,"distances_sum":2416.140566215585}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9700148809523815,"seconds":5.932524800300598e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.8671875,"distances_sum":2474.5076432039195}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.96484375,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.980637591575092,"seconds":6.3069164752960205e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.953125,"distances_sum":2532.5222797522697}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.96484375,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.980637591575092,"seconds":6.3069164752960205e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.953125,"distances_sum":2532.5222797522697}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.865279512154513,"seconds":4.727393388748169e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":7.625,"distances_sum":1762.4163938832676}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1787109375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1787109375,"f1":null,"seconds":3.1460076570510864e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":4.90625,"distances_sum":363.3477263487733}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7724609375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7724609375,"f1":0.8631420662670672,"seconds":5.00120222568512e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":7.5546875,"distances_sum":1752.063076775884}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.775390625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.775390625,"f1":0.865279512154513,"seconds":4.727393388748169e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":7.625,"distances_sum":1762.4163938832676}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8125,"f1":0.8883304195804204,"seconds":5.105510354042053e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.0546875,"distances_sum":1963.7846325194969}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8203125, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8203125,"f1":0.8922421328671337,"seconds":5.321577191352844e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.3203125,"distances_sum":1946.4821310491131}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9563847610722612,"seconds":5.5283308029174805e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.71875,"distances_sum":2363.0988137025615}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9436984890109894,"seconds":5.636364221572876e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.6328125,"distances_sum":2306.0852673690442}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9228515625,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.9563847610722612,"seconds":5.5283308029174805e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.71875,"distances_sum":2363.0988137025615}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9604395604395609,"seconds":5.705282092094421e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.8046875,"distances_sum":2380.8511590333333}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9644001831501833,"seconds":5.885958671569824e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.75,"distances_sum":2429.0279502188764}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9365234375,"state":{"ssize":9,"bsize":8},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9644001831501833,"seconds":5.885958671569824e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.75,"distances_sum":2429.0279502188764}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9365234375,"state":{"ssize":9,"bsize":8},"perf":{"precision":1.0,"recall":0.9365234375,"f1":0.9644001831501833,"seconds":5.885958671569824e-6,"exhaustive_search_seconds":1.2274831533432007e-6,"evaluations":8.75,"distances_sum":2429.0279502188764}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.677734375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.677734375,"f1":0.7965428668553677,"seconds":4.602596163749695e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":7.75,"distances_sum":1410.5415544508794}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.677734375,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.677734375,"f1":0.7965428668553677,"seconds":4.602596163749695e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":7.75,"distances_sum":1410.5415544508794}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8125,"f1":0.8911775724275732,"seconds":5.500391125679016e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.4921875,"distances_sum":1864.5553713321476}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8125,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.8125,"f1":0.8911775724275732,"seconds":5.500391125679016e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.4921875,"distances_sum":1864.5553713321476}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9223817848817857,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.7890625,"distances_sum":2092.518934279116}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.865234375,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.865234375,"f1":0.9223817848817857,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.7890625,"distances_sum":2092.518934279116}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.865234375,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.865234375,"f1":0.9223817848817857,"seconds":5.716457962989807e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.7890625,"distances_sum":2092.518934279116}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4794921875, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.4794921875,"f1":null,"seconds":3.926455974578857e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":6.5859375,"distances_sum":918.8305051599308}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.46484375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.46484375,"f1":null,"seconds":4.552304744720459e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":6.4765625,"distances_sum":898.6603764943228}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4794921875,"state":{"ssize":4,"bsize":2},"perf":{"precision":null,"recall":0.4794921875,"f1":null,"seconds":3.926455974578857e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":6.5859375,"distances_sum":918.8305051599308}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.8916557400932409,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.46875,"distances_sum":1901.040691031482}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.8556438353313361,"seconds":5.161389708518982e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.0,"distances_sum":1677.9328106436885}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.771484375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.771484375,"f1":0.8633475899100905,"seconds":5.239620804786682e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.078125,"distances_sum":1723.5115364878259}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65625, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.65625,"f1":0.7789824758574767,"seconds":4.4889748096466064e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":7.21875,"distances_sum":1393.3450628308753}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8154296875,"state":{"ssize":8,"bsize":6},"perf":{"precision":1.0,"recall":0.8154296875,"f1":0.8916557400932409,"seconds":5.632638931274414e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.46875,"distances_sum":1901.040691031482}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9334191849816854,"seconds":5.636364221572876e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.84375,"distances_sum":2167.179470339954}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8212890625,"f1":0.8960513444888453,"seconds":5.302950739860535e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.515625,"distances_sum":1906.124816348576}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.8960716366966375,"seconds":6.226822733879089e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.484375,"distances_sum":1953.3553894149143}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9283430111555119,"seconds":5.505979061126709e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.78125,"distances_sum":2173.3256563782397}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9566277472527481,"seconds":6.336718797683716e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.953125,"distances_sum":2323.6626947565514}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9513679029304037,"seconds":5.42961061000824e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.90625,"distances_sum":2314.8594554377923}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9379922161172165,"seconds":4.177913069725037e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.8359375,"distances_sum":2228.9396129732722}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9228515625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.9566277472527481,"seconds":6.336718797683716e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.953125,"distances_sum":2323.6626947565514}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9228515625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.9566277472527481,"seconds":6.336718797683716e-6,"exhaustive_search_seconds":1.257285475730896e-6,"evaluations":8.953125,"distances_sum":2323.6626947565514}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.1904296875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.1904296875,"f1":null,"seconds":3.1925737857818604e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":6.0703125,"distances_sum":428.99557102606957}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.1904296875,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.1904296875,"f1":null,"seconds":3.1925737857818604e-6,"exhaustive_search_seconds":1.2349337339401245e-6,"evaluations":6.0703125,"distances_sum":428.99557102606957}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4443359375, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.4443359375,"f1":null,"seconds":3.937631845474243e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":6.609375,"distances_sum":894.387185478075}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5712890625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5712890625,"f1":null,"seconds":4.289671778678894e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":7.3515625,"distances_sum":1168.9289584106787}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5712890625,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5712890625,"f1":null,"seconds":4.289671778678894e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":7.3515625,"distances_sum":1168.9289584106787}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.8703817016317024,"seconds":5.1353126764297485e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.375,"distances_sum":1727.634352897146}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.93598640942391,"seconds":5.6996941566467285e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.75,"distances_sum":2079.6042125462877}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6884765625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6884765625,"f1":0.8053103146853153,"seconds":4.7013163566589355e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":7.828125,"distances_sum":1439.6480921811856}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8523781773781781,"seconds":5.25452196598053e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.1640625,"distances_sum":1652.070016646176}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6083984375, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.6083984375,"f1":0.7387707778332784,"seconds":4.297122359275818e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":7.5859375,"distances_sum":1247.48633826037}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8621368215118222,"seconds":5.107372999191284e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.296875,"distances_sum":1694.6231520587262}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.888671875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.888671875,"f1":0.93598640942391,"seconds":5.6996941566467285e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.75,"distances_sum":2079.6042125462877}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9750000000000002,"seconds":6.226822733879089e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.9375,"distances_sum":2316.356204337379}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9549164377289382,"seconds":5.580484867095947e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.84375,"distances_sum":2211.8541169675977}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9497856310356315,"seconds":5.887821316719055e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.890625,"distances_sum":2171.6224090572487}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.951416812354313,"seconds":5.707144737243652e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.859375,"distances_sum":2160.5041005464905}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9750000000000002,"seconds":6.226822733879089e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.9375,"distances_sum":2316.356204337379}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9750000000000002,"seconds":6.226822733879089e-6,"exhaustive_search_seconds":1.171603798866272e-6,"evaluations":8.9375,"distances_sum":2316.356204337379}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6904296875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6904296875,"f1":0.8026992105117113,"seconds":4.654750227928162e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.1953125,"distances_sum":1512.896350013271}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3896484375, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.3896484375,"f1":null,"seconds":3.7811696529388428e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":6.6796875,"distances_sum":779.490932531089}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6904296875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6904296875,"f1":0.8026992105117113,"seconds":4.654750227928162e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.1953125,"distances_sum":1512.896350013271}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9470352564102571,"seconds":5.925074219703674e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.84375,"distances_sum":2176.221763612779}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9072265625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9072265625,"f1":0.9470352564102571,"seconds":5.925074219703674e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.84375,"distances_sum":2176.221763612779}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9677312271062273,"seconds":5.977228283882141e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.890625,"distances_sum":2302.5508389133943}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.970798992673993,"seconds":5.783513188362122e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.9375,"distances_sum":2330.671998777685}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9718406593406596,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.9453125,"distances_sum":2324.519684685663}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9718406593406596,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.9453125,"distances_sum":2324.519684685663}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9718406593406596,"seconds":5.89713454246521e-6,"exhaustive_search_seconds":1.218169927597046e-6,"evaluations":8.9453125,"distances_sum":2324.519684685663}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.19921875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.19921875,"f1":null,"seconds":3.168359398841858e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":5.65625,"distances_sum":460.4419298383459}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4013671875, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.4013671875,"f1":null,"seconds":3.591179847717285e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":6.109375,"distances_sum":858.0867416188082}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.685546875, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.685546875,"f1":0.7984146062271069,"seconds":4.669651389122009e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":7.859375,"distances_sum":1554.6083971849994}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.685546875,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.685546875,"f1":0.7984146062271069,"seconds":4.669651389122009e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":7.859375,"distances_sum":1554.6083971849994}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.924940684315685,"seconds":5.582347512245178e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.6640625,"distances_sum":2113.281713228417}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8607439435564445,"seconds":5.111098289489746e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.2578125,"distances_sum":1736.1873267080355}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.87109375,"state":{"ssize":8,"bsize":7},"perf":{"precision":1.0,"recall":0.87109375,"f1":0.924940684315685,"seconds":5.582347512245178e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.6640625,"distances_sum":2113.281713228417}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":11,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9493704212454217,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.734375,"distances_sum":2288.659103603279}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9612179487179492,"seconds":5.519017577171326e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.875,"distances_sum":2337.5813572600814}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9296875,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9612179487179492,"seconds":5.519017577171326e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.875,"distances_sum":2337.5813572600814}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9296875,"state":{"ssize":8,"bsize":9},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9612179487179492,"seconds":5.519017577171326e-6,"exhaustive_search_seconds":1.34296715259552e-6,"evaluations":8.875,"distances_sum":2337.5813572600814}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8600451631701641,"seconds":5.198642611503601e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.0390625,"distances_sum":1770.7819677020534}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65625, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.65625,"f1":0.7767446095571101,"seconds":4.637986421585083e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":7.5078125,"distances_sum":1461.0199850387119}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.767578125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.767578125,"f1":0.8600451631701641,"seconds":5.198642611503601e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.0390625,"distances_sum":1770.7819677020534}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.8993246336996344,"seconds":5.401670932769775e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.3515625,"distances_sum":1940.1056374508498}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9620020604395609,"seconds":5.561858415603638e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8203125,"distances_sum":2342.8488352462437}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.931640625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.931640625,"f1":0.9620020604395609,"seconds":5.561858415603638e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8203125,"distances_sum":2342.8488352462437}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.9778674450549453,"seconds":5.867332220077515e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9375,"distances_sum":2421.9029745263}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9744047619047624,"seconds":5.9138983488082886e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8984375,"distances_sum":2392.764784697909}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9599609375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9778674450549453,"seconds":5.867332220077515e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9375,"distances_sum":2421.9029745263}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9599609375,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9778674450549453,"seconds":5.867332220077515e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.9375,"distances_sum":2421.9029745263}}, n: 9
mean(cfft.distances) = 0.40190645540286235
mean(cdnet.distances) = 0.405112685083966
mean(crand.distances) = 0.36607368477001556
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8688888888888888
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.9466666666666667
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8888888888888888
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8755555555555556
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8844444444444445
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9022222222222221
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9355555555555556
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8622222222222221
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9222222222222222
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8822222222222221
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9155555555555556
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9244444444444445
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.88
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.8955555555555555
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9222222222222222
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9222222222222222
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8933333333333332
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8666666666666667
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8822222222222221
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9266666666666667
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9133333333333334
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9177777777777778
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.9022222222222221
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9066666666666666
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9177777777777777
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.88
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8933333333333332
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9111111111111111
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9044444444444443
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 20]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 7]]
** centroid: 9, normalized-entropy: 0.7642045065086204, [(2, 2), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 3, 3]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.6036198555429777] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 18, 8]]
** centroid: 1, normalized-entropy: 0.8904916402194913, [(2, 18), (3, 8)]
*** center 2: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 13]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 12, 2]]
** centroid: 7, normalized-entropy: 0.5916727785823274, [(2, 12), (3, 2)]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 2, 12]]
** centroid: 10, normalized-entropy: 0.5916727785823274, [(2, 2), (3, 12)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
finished with 15 centroids; started with 12
acc = 0.96
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.3398167826417084] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3398167826417084, 0.27296118286379556] ***
*** starting iteration: 2; err: [Inf, 0.3398167826417084, 0.27296118286379556] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3398167826417084, 0.27296118286379556, 0.2470300830579041] ***
*** starting iteration: 3; err: [Inf, 0.3398167826417084, 0.27296118286379556, 0.2470300830579041] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3398167826417084, 0.27296118286379556, 0.2470300830579041, 0.23301814486029315] ***
*** starting iteration: 4; err: [Inf, 0.3398167826417084, 0.27296118286379556, 0.2470300830579041, 0.23301814486029315] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3398167826417084, 0.27296118286379556, 0.2470300830579041, 0.23301814486029315, 0.23061521183671402] ***
*** starting iteration: 5; err: [Inf, 0.3398167826417084, 0.27296118286379556, 0.2470300830579041, 0.23301814486029315, 0.23061521183671402] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3398167826417084, 0.27296118286379556, 0.2470300830579041, 0.23301814486029315, 0.23061521183671402, 0.2302464934851829] ***
*** finished computation of 3 references, err: [Inf, 0.3398167826417084, 0.27296118286379556, 0.2470300830579041, 0.23301814486029315, 0.23061521183671402, 0.2302464934851829] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [127, 72, 0]]
** centroid: 1, normalized-entropy: 0.9441745937903245, [(1, 127), (2, 72)]
*** center 2: selecting labels [1] (freq >= 2) [from [227, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [71, 144, 25]]
** centroid: 3, normalized-entropy: 0.8214076893695795, [(1, 71), (2, 144), (3, 25)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.23469240620855364] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23469240620855364, 0.18983618301331057] ***
*** starting iteration: 2; err: [Inf, 0.23469240620855364, 0.18983618301331057] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23469240620855364, 0.18983618301331057, 0.18738670171204921] ***
*** starting iteration: 3; err: [Inf, 0.23469240620855364, 0.18983618301331057, 0.18738670171204921] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23469240620855364, 0.18983618301331057, 0.18738670171204921, 0.18701133306778678] ***
*** finished computation of 7 references, err: [Inf, 0.23469240620855364, 0.18983618301331057, 0.18738670171204921, 0.18701133306778678] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [19, 71, 0]]
** centroid: 1, normalized-entropy: 0.7436012269934466, [(1, 19), (2, 71)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [85, 20, 0]]
** centroid: 2, normalized-entropy: 0.7024665512903904, [(1, 85), (2, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [37, 52, 0]]
** centroid: 4, normalized-entropy: 0.9794116346561961, [(1, 37), (2, 52)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 73, 25]]
** centroid: 5, normalized-entropy: 0.8192649712314392, [(2, 73), (3, 25)]
*** center 6: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [105, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2680095648742106] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2680095648742106, 0.23397154118893654] ***
*** starting iteration: 2; err: [Inf, 0.2680095648742106, 0.23397154118893654] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2680095648742106, 0.23397154118893654, 0.23280685562137765] ***
*** starting iteration: 3; err: [Inf, 0.2680095648742106, 0.23397154118893654, 0.23280685562137765] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2680095648742106, 0.23397154118893654, 0.23280685562137765, 0.23262867203744678] ***
*** finished computation of 3 references, err: [Inf, 0.2680095648742106, 0.23397154118893654, 0.23280685562137765, 0.23262867203744678] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [122, 63, 0]]
** centroid: 1, normalized-entropy: 0.9253350261208155, [(1, 122), (2, 63)]
*** center 2: selecting labels [1] (freq >= 2) [from [240, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [60, 160, 22]]
** centroid: 3, normalized-entropy: 0.7621617784943289, [(1, 60), (2, 160), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.28262433225101885] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28262433225101885, 0.23716451591257748] ***
*** starting iteration: 2; err: [Inf, 0.28262433225101885, 0.23716451591257748] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28262433225101885, 0.23716451591257748, 0.23326461444395236] ***
*** starting iteration: 3; err: [Inf, 0.28262433225101885, 0.23716451591257748, 0.23326461444395236] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28262433225101885, 0.23716451591257748, 0.23326461444395236, 0.23168478317620203] ***
*** starting iteration: 4; err: [Inf, 0.28262433225101885, 0.23716451591257748, 0.23326461444395236, 0.23168478317620203] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28262433225101885, 0.23716451591257748, 0.23326461444395236, 0.23168478317620203, 0.23103810517002885] ***
*** finished computation of 3 references, err: [Inf, 0.28262433225101885, 0.23716451591257748, 0.23326461444395236, 0.23168478317620203, 0.23103810517002885] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [268, 5, 0]]
** centroid: 1, normalized-entropy: 0.1318723661318679, [(1, 268), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [155, 44, 0]]
** centroid: 2, normalized-entropy: 0.7621810324152676, [(1, 155), (2, 44)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [6, 166, 23]]
** centroid: 3, normalized-entropy: 0.451749474847379, [(1, 6), (2, 166), (3, 23)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.1909750123513868] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1909750123513868, 0.16192848343323837] ***
*** finished computation of 7 references, err: [Inf, 0.1909750123513868, 0.16192848343323837] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [141, 4, 0]]
** centroid: 1, normalized-entropy: 0.1821384645788663, [(1, 141), (2, 4)]
*** center 2: selecting labels [1] (freq >= 2) [from [196, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 25, 18]]
** centroid: 3, normalized-entropy: 0.9807983646944296, [(2, 25), (3, 18)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [18, 66, 0]]
** centroid: 4, normalized-entropy: 0.7495952572594798, [(1, 18), (2, 66)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 77, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 26, 7]]
** centroid: 6, normalized-entropy: 0.7455178428108284, [(2, 26), (3, 7)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [70, 18, 0]]
** centroid: 7, normalized-entropy: 0.7309263775906009, [(1, 70), (2, 18)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19081654920029095] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19081654920029095, 0.16674458910676201] ***
*** finished computation of 7 references, err: [Inf, 0.19081654920029095, 0.16674458910676201] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [134, 23, 0]]
** centroid: 1, normalized-entropy: 0.6010037010530741, [(1, 134), (2, 23)]
*** center 2: selecting labels [1] (freq >= 2) [from [156, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [16, 3, 0]]
** centroid: 3, normalized-entropy: 0.6292492238560344, [(1, 16), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [39, 52, 0]]
** centroid: 4, normalized-entropy: 0.9852281360342514, [(1, 39), (2, 52)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 73, 22]]
** centroid: 5, normalized-entropy: 0.7807536250860868, [(2, 73), (3, 22)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 69, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [77, 3, 0]]
** centroid: 7, normalized-entropy: 0.2307099556914763, [(1, 77), (2, 3)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2692063879249603] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2692063879249603, 0.1703659486510083] ***
*** finished computation of 7 references, err: [Inf, 0.2692063879249603, 0.1703659486510083] ***
*** center 1: selecting labels [1] (freq >= 2) [from [141, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 77, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [43, 6, 0]]
** centroid: 3, normalized-entropy: 0.5363596511250623, [(1, 43), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [95, 23, 0]]
** centroid: 4, normalized-entropy: 0.7116412885080164, [(1, 95), (2, 23)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [53, 65, 0]]
** centroid: 5, normalized-entropy: 0.9925270159830354, [(1, 53), (2, 65)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [97, 5, 0]]
** centroid: 6, normalized-entropy: 0.28221763445592507, [(1, 97), (2, 5)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 39, 23]]
** centroid: 7, normalized-entropy: 0.9514122535330207, [(2, 39), (3, 23)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.36340040631883136] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36340040631883136, 0.33447693842575066] ***
*** starting iteration: 2; err: [Inf, 0.36340040631883136, 0.33447693842575066] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36340040631883136, 0.33447693842575066, 0.3304549047608745] ***
*** starting iteration: 3; err: [Inf, 0.36340040631883136, 0.33447693842575066, 0.3304549047608745] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36340040631883136, 0.33447693842575066, 0.3304549047608745, 0.32716535524585405] ***
*** finished computation of 3 references, err: [Inf, 0.36340040631883136, 0.33447693842575066, 0.3304549047608745, 0.32716535524585405] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [237, 43, 0]]
** centroid: 1, normalized-entropy: 0.6187061082268321, [(1, 237), (2, 43)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [159, 46, 0]]
** centroid: 2, normalized-entropy: 0.76810331965747, [(1, 159), (2, 46)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [29, 127, 25]]
** centroid: 3, normalized-entropy: 0.7422358595532725, [(1, 29), (2, 127), (3, 25)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.6449020214007422] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6449020214007422, 0.34460566977508134] ***
*** starting iteration: 2; err: [Inf, 0.6449020214007422, 0.34460566977508134] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6449020214007422, 0.34460566977508134, 0.30931902639958814] ***
*** starting iteration: 3; err: [Inf, 0.6449020214007422, 0.34460566977508134, 0.30931902639958814] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6449020214007422, 0.34460566977508134, 0.30931902639958814, 0.29960112901742403] ***
*** finished computation of 3 references, err: [Inf, 0.6449020214007422, 0.34460566977508134, 0.30931902639958814, 0.29960112901742403] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [249, 33, 0]]
** centroid: 1, normalized-entropy: 0.5207375686265202, [(1, 249), (2, 33)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 171, 22]]
** centroid: 2, normalized-entropy: 0.5118338473431631, [(2, 171), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [173, 19, 0]]
** centroid: 3, normalized-entropy: 0.4656848645931274, [(1, 173), (2, 19)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.5098776653439723] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5098776653439723, 0.3064465804257314] ***
*** starting iteration: 2; err: [Inf, 0.5098776653439723, 0.3064465804257314] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5098776653439723, 0.3064465804257314, 0.30023278549280036] ***
*** starting iteration: 3; err: [Inf, 0.5098776653439723, 0.3064465804257314, 0.30023278549280036] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5098776653439723, 0.3064465804257314, 0.30023278549280036, 0.29980159990455973] ***
*** finished computation of 3 references, err: [Inf, 0.5098776653439723, 0.3064465804257314, 0.30023278549280036, 0.29980159990455973] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [251, 33, 0]]
** centroid: 1, normalized-entropy: 0.5183300843621725, [(1, 251), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [178, 29, 0]]
** centroid: 2, normalized-entropy: 0.584491790491024, [(1, 178), (2, 29)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 153, 23]]
** centroid: 3, normalized-entropy: 0.5593051134027119, [(2, 153), (3, 23)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3051475818162678] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3051475818162678, 0.24460037366987708] ***
*** starting iteration: 2; err: [Inf, 0.3051475818162678, 0.24460037366987708] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3051475818162678, 0.24460037366987708, 0.2427031581245318] ***
*** starting iteration: 3; err: [Inf, 0.3051475818162678, 0.24460037366987708, 0.2427031581245318] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3051475818162678, 0.24460037366987708, 0.2427031581245318, 0.2423745172263288] ***
*** finished computation of 3 references, err: [Inf, 0.3051475818162678, 0.24460037366987708, 0.2427031581245318, 0.2423745172263288] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [251, 20, 0]]
** centroid: 1, normalized-entropy: 0.3799498017251224, [(1, 251), (2, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [174, 38, 0]]
** centroid: 2, normalized-entropy: 0.6784232197116191, [(1, 174), (2, 38)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 158, 25]]
** centroid: 3, normalized-entropy: 0.5752967620198328, [(2, 158), (3, 25)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.27305442011182796] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27305442011182796, 0.23660296952628393] ***
*** starting iteration: 2; err: [Inf, 0.27305442011182796, 0.23660296952628393] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27305442011182796, 0.23660296952628393, 0.23281958872016736] ***
*** starting iteration: 3; err: [Inf, 0.27305442011182796, 0.23660296952628393, 0.23281958872016736] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27305442011182796, 0.23660296952628393, 0.23281958872016736, 0.23241523314111012] ***
*** finished computation of 3 references, err: [Inf, 0.27305442011182796, 0.23660296952628393, 0.23281958872016736, 0.23241523314111012] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [17, 168, 22]]
** centroid: 1, normalized-entropy: 0.5579251133807532, [(1, 17), (2, 168), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [273, 3, 0]]
** centroid: 2, normalized-entropy: 0.08650421412134586, [(1, 273), (2, 3)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [132, 52, 0]]
** centroid: 3, normalized-entropy: 0.8589810370425965, [(1, 132), (2, 52)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3458248603498393] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3458248603498393, 0.2676328456523581] ***
*** starting iteration: 2; err: [Inf, 0.3458248603498393, 0.2676328456523581] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3458248603498393, 0.2676328456523581, 0.24403220495541414] ***
*** starting iteration: 3; err: [Inf, 0.3458248603498393, 0.2676328456523581, 0.24403220495541414] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3458248603498393, 0.2676328456523581, 0.24403220495541414, 0.23992521613780438] ***
*** starting iteration: 4; err: [Inf, 0.3458248603498393, 0.2676328456523581, 0.24403220495541414, 0.23992521613780438] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3458248603498393, 0.2676328456523581, 0.24403220495541414, 0.23992521613780438, 0.23899891218268263] ***
*** finished computation of 3 references, err: [Inf, 0.3458248603498393, 0.2676328456523581, 0.24403220495541414, 0.23992521613780438, 0.23899891218268263] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [246, 33, 0]]
** centroid: 1, normalized-entropy: 0.5243952392403632, [(1, 246), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [183, 24, 0]]
** centroid: 2, normalized-entropy: 0.5175827525559071, [(1, 183), (2, 24)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 158, 23]]
** centroid: 3, normalized-entropy: 0.5493526097279925, [(2, 158), (3, 23)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21711295959539711] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21711295959539711, 0.19188297431248574] ***
*** starting iteration: 2; err: [Inf, 0.21711295959539711, 0.19188297431248574] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21711295959539711, 0.19188297431248574, 0.18899006114482345] ***
*** starting iteration: 3; err: [Inf, 0.21711295959539711, 0.19188297431248574, 0.18899006114482345] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21711295959539711, 0.19188297431248574, 0.18899006114482345, 0.18797272266443077] ***
*** finished computation of 7 references, err: [Inf, 0.21711295959539711, 0.19188297431248574, 0.18899006114482345, 0.18797272266443077] ***
*** center 1: selecting labels [1] (freq >= 2) [from [114, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [73, 16, 0]]
** centroid: 2, normalized-entropy: 0.6795851972782937, [(1, 73), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 51, 22]]
** centroid: 3, normalized-entropy: 0.8829589691462253, [(2, 51), (3, 22)]
*** center 4: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [83, 19, 0]]
** centroid: 5, normalized-entropy: 0.6936126404300949, [(1, 83), (2, 19)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [39, 64, 0]]
** centroid: 6, normalized-entropy: 0.9570763860606195, [(1, 39), (2, 64)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 73, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24875894168914034] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24875894168914034, 0.19796084406655812] ***
*** starting iteration: 2; err: [Inf, 0.24875894168914034, 0.19796084406655812] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24875894168914034, 0.19796084406655812, 0.192182050957142] ***
*** starting iteration: 3; err: [Inf, 0.24875894168914034, 0.19796084406655812, 0.192182050957142] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24875894168914034, 0.19796084406655812, 0.192182050957142, 0.1915401426113226] ***
*** finished computation of 7 references, err: [Inf, 0.24875894168914034, 0.19796084406655812, 0.192182050957142, 0.1915401426113226] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [39, 57, 0]]
** centroid: 1, normalized-entropy: 0.9744894033980525, [(1, 39), (2, 57)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [70, 22, 0]]
** centroid: 2, normalized-entropy: 0.7935912300117066, [(1, 70), (2, 22)]
*** center 3: selecting labels [1] (freq >= 2) [from [129, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 71, 23]]
** centroid: 4, normalized-entropy: 0.8027381019527042, [(2, 71), (3, 23)]
*** center 5: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 64, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [92, 1, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.38913558065952797] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.38913558065952797, 0.2900919584437153] ***
*** finished computation of 3 references, err: [Inf, 0.38913558065952797, 0.2900919584437153] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [299, 88, 0]]
** centroid: 1, normalized-entropy: 0.7734339860531556, [(1, 299), (2, 88)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [42, 128, 25]]
** centroid: 2, normalized-entropy: 0.7922396435204472, [(1, 42), (2, 128), (3, 25)]
*** center 3: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3516053265921291] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3516053265921291, 0.2355579818198192] ***
*** finished computation of 3 references, err: [Inf, 0.3516053265921291, 0.2355579818198192] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [215, 20, 0]]
** centroid: 1, normalized-entropy: 0.4199210973757179, [(1, 215), (2, 20)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 150, 22]]
** centroid: 2, normalized-entropy: 0.5516699920020824, [(2, 150), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [207, 53, 0]]
** centroid: 3, normalized-entropy: 0.7295540272814934, [(1, 207), (2, 53)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3306598062717776] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3306598062717776, 0.28370907741865475] ***
*** finished computation of 3 references, err: [Inf, 0.3306598062717776, 0.28370907741865475] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [249, 77, 0]]
** centroid: 1, normalized-entropy: 0.7886574649106496, [(1, 249), (2, 77)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [46, 136, 23]]
** centroid: 2, normalized-entropy: 0.7764212284190077, [(1, 46), (2, 136), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [134, 2, 0]]
** centroid: 3, normalized-entropy: 0.11058084476988722, [(1, 134), (2, 2)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.20261315784456246] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20261315784456246, 0.16088434467553622] ***
*** finished computation of 7 references, err: [Inf, 0.20261315784456246, 0.16088434467553622] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 74, 21]]
** centroid: 1, normalized-entropy: 0.762084924805724, [(2, 74), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [135, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [90, 44, 0]]
** centroid: 4, normalized-entropy: 0.9132401614300725, [(1, 90), (2, 44)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [67, 27, 0]]
** centroid: 5, normalized-entropy: 0.8651214227512075, [(1, 67), (2, 27)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [31, 5, 0]]
** centroid: 6, normalized-entropy: 0.581321498763703, [(1, 31), (2, 5)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 66, 4]]
** centroid: 7, normalized-entropy: 0.3159971329784246, [(2, 66), (3, 4)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1821356335308576] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1821356335308576, 0.1517138919727444] ***
*** finished computation of 7 references, err: [Inf, 0.1821356335308576, 0.1517138919727444] ***
*** center 1: selecting labels [1] (freq >= 1) [from [117, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [106, 18, 0]]
** centroid: 2, normalized-entropy: 0.5975977764379984, [(1, 106), (2, 18)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 44, 22]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(2, 44), (3, 22)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 77, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [67, 42, 0]]
** centroid: 5, normalized-entropy: 0.9617136136083148, [(1, 67), (2, 42)]
*** center 6: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [39, 42, 0]]
** centroid: 7, normalized-entropy: 0.9990102708804813, [(1, 39), (2, 42)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22126009823639933] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22126009823639933, 0.1711332597511484] ***
*** finished computation of 7 references, err: [Inf, 0.22126009823639933, 0.1711332597511484] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [68, 34, 0]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(1, 68), (2, 34)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [4, 45, 0]]
** centroid: 2, normalized-entropy: 0.4079059801389762, [(1, 4), (2, 45)]
*** center 3: selecting labels [1] (freq >= 1) [from [188, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 67, 23]]
** centroid: 4, normalized-entropy: 0.8199653102187632, [(2, 67), (3, 23)]
*** center 5: selecting labels [1] (freq >= 1) [from [117, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [35, 28, 0]]
** centroid: 6, normalized-entropy: 0.9910760598382222, [(1, 35), (2, 28)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [17, 41, 0]]
** centroid: 7, normalized-entropy: 0.8726965039103788, [(1, 17), (2, 41)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2793196917416433] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2793196917416433, 0.2119972700834856] ***
*** finished computation of 7 references, err: [Inf, 0.2793196917416433, 0.2119972700834856] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [14, 64, 25]]
** centroid: 1, normalized-entropy: 0.828846785739125, [(1, 14), (2, 64), (3, 25)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [20, 103, 0]]
** centroid: 2, normalized-entropy: 0.6404973004805509, [(1, 20), (2, 103)]
*** center 3: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [67, 49, 0]]
** centroid: 7, normalized-entropy: 0.9825606664869173, [(1, 67), (2, 49)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22716587377751227] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22716587377751227, 0.19003139838933766] ***
*** finished computation of 7 references, err: [Inf, 0.22716587377751227, 0.19003139838933766] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [27, 49, 0]]
** centroid: 1, normalized-entropy: 0.9386808697586004, [(1, 27), (2, 49)]
*** center 2: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [94, 6, 0]]
** centroid: 3, normalized-entropy: 0.3274449191544762, [(1, 94), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [47, 51, 0]]
** centroid: 4, normalized-entropy: 0.9987979209581141, [(1, 47), (2, 51)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 100, 22]]
** centroid: 5, normalized-entropy: 0.6807937753703207, [(2, 100), (3, 22)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [93, 6, 0]]
** centroid: 6, normalized-entropy: 0.32984607020714635, [(1, 93), (2, 6)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [78, 11, 0]]
** centroid: 7, normalized-entropy: 0.5396084773004918, [(1, 78), (2, 11)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23314410584212197] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23314410584212197, 0.19938584085486863] ***
*** finished computation of 7 references, err: [Inf, 0.23314410584212197, 0.19938584085486863] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [5, 81, 0]]
** centroid: 1, normalized-entropy: 0.32001486274754665, [(1, 5), (2, 81)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [122, 46, 0]]
** centroid: 2, normalized-entropy: 0.8468781063424823, [(1, 122), (2, 46)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [39, 27, 0]]
** centroid: 3, normalized-entropy: 0.976020648236615, [(1, 39), (2, 27)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 61, 23]]
** centroid: 4, normalized-entropy: 0.8468781063424823, [(2, 61), (3, 23)]
*** center 5: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [41, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [115, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.37550034370922203] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37550034370922203, 0.3068374348636549] ***
*** starting iteration: 2; err: [Inf, 0.37550034370922203, 0.3068374348636549] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37550034370922203, 0.3068374348636549, 0.30106464198751337] ***
*** starting iteration: 3; err: [Inf, 0.37550034370922203, 0.3068374348636549, 0.30106464198751337] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37550034370922203, 0.3068374348636549, 0.30106464198751337, 0.29831547811193887] ***
*** finished computation of 3 references, err: [Inf, 0.37550034370922203, 0.3068374348636549, 0.30106464198751337, 0.29831547811193887] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [6, 169, 25]]
** centroid: 1, normalized-entropy: 0.4618924214545815, [(1, 6), (2, 169), (3, 25)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [166, 40, 0]]
** centroid: 2, normalized-entropy: 0.7101234912653349, [(1, 166), (2, 40)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [253, 7, 0]]
** centroid: 3, normalized-entropy: 0.17871835590513271, [(1, 253), (2, 7)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3851292211020636] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3851292211020636, 0.31675786182502175] ***
*** starting iteration: 2; err: [Inf, 0.3851292211020636, 0.31675786182502175] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3851292211020636, 0.31675786182502175, 0.3003755480698917] ***
*** starting iteration: 3; err: [Inf, 0.3851292211020636, 0.31675786182502175, 0.3003755480698917] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3851292211020636, 0.31675786182502175, 0.3003755480698917, 0.29652018592912127] ***
*** finished computation of 3 references, err: [Inf, 0.3851292211020636, 0.31675786182502175, 0.3003755480698917, 0.29652018592912127] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [147, 69, 0]]
** centroid: 1, normalized-entropy: 0.9037762882345833, [(1, 147), (2, 69)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [59, 154, 22]]
** centroid: 2, normalized-entropy: 0.7697689861390085, [(1, 59), (2, 154), (3, 22)]
*** center 3: selecting labels [1] (freq >= 1) [from [216, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4526638516742943] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4526638516742943, 0.29914055245256854] ***
*** starting iteration: 2; err: [Inf, 0.4526638516742943, 0.29914055245256854] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4526638516742943, 0.29914055245256854, 0.29219631222670134] ***
*** starting iteration: 3; err: [Inf, 0.4526638516742943, 0.29914055245256854, 0.29219631222670134] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4526638516742943, 0.29914055245256854, 0.29219631222670134, 0.29108536720270295] ***
*** finished computation of 3 references, err: [Inf, 0.4526638516742943, 0.29914055245256854, 0.29219631222670134, 0.29108536720270295] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [135, 60, 0]]
** centroid: 1, normalized-entropy: 0.8904916402194913, [(1, 135), (2, 60)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [71, 155, 23]]
** centroid: 2, normalized-entropy: 0.7945337098783647, [(1, 71), (2, 155), (3, 23)]
*** center 3: selecting labels [1] (freq >= 1) [from [223, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.31606339291437296] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31606339291437296, 0.2568228124996071] ***
*** starting iteration: 2; err: [Inf, 0.31606339291437296, 0.2568228124996071] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31606339291437296, 0.2568228124996071, 0.24533580145001546] ***
*** starting iteration: 3; err: [Inf, 0.31606339291437296, 0.2568228124996071, 0.24533580145001546] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31606339291437296, 0.2568228124996071, 0.24533580145001546, 0.2424872674428307] ***
*** starting iteration: 4; err: [Inf, 0.31606339291437296, 0.2568228124996071, 0.24533580145001546, 0.2424872674428307] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31606339291437296, 0.2568228124996071, 0.24533580145001546, 0.2424872674428307, 0.2418750669679943] ***
*** finished computation of 3 references, err: [Inf, 0.31606339291437296, 0.2568228124996071, 0.24533580145001546, 0.2424872674428307, 0.2418750669679943] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [273, 14, 0]]
** centroid: 1, normalized-entropy: 0.2811937964320427, [(1, 273), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [152, 56, 0]]
** centroid: 2, normalized-entropy: 0.8403586716091169, [(1, 152), (2, 56)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 146, 25]]
** centroid: 3, normalized-entropy: 0.6002455538282918, [(2, 146), (3, 25)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3634250799706764] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3634250799706764, 0.23525724971787013] ***
*** starting iteration: 2; err: [Inf, 0.3634250799706764, 0.23525724971787013] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3634250799706764, 0.23525724971787013, 0.2327326347910404] ***
*** starting iteration: 3; err: [Inf, 0.3634250799706764, 0.23525724971787013, 0.2327326347910404] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3634250799706764, 0.23525724971787013, 0.2327326347910404, 0.23244469729845582] ***
*** finished computation of 3 references, err: [Inf, 0.3634250799706764, 0.23525724971787013, 0.2327326347910404, 0.23244469729845582] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [85, 138, 22]]
** centroid: 1, normalized-entropy: 0.8256016993710429, [(1, 85), (2, 138), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [113, 85, 0]]
** centroid: 2, normalized-entropy: 0.9855260527835448, [(1, 113), (2, 85)]
*** center 3: selecting labels [1] (freq >= 2) [from [224, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3501000035459223] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3501000035459223, 0.24319038896736267] ***
*** starting iteration: 2; err: [Inf, 0.3501000035459223, 0.24319038896736267] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3501000035459223, 0.24319038896736267, 0.2409345386116982] ***
*** starting iteration: 3; err: [Inf, 0.3501000035459223, 0.24319038896736267, 0.2409345386116982] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3501000035459223, 0.24319038896736267, 0.2409345386116982, 0.2392823079648404] ***
*** starting iteration: 4; err: [Inf, 0.3501000035459223, 0.24319038896736267, 0.2409345386116982, 0.2392823079648404] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3501000035459223, 0.24319038896736267, 0.2409345386116982, 0.2392823079648404, 0.2378122512707724] ***
*** starting iteration: 5; err: [Inf, 0.3501000035459223, 0.24319038896736267, 0.2409345386116982, 0.2392823079648404, 0.2378122512707724] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3501000035459223, 0.24319038896736267, 0.2409345386116982, 0.2392823079648404, 0.2378122512707724, 0.23739876403093527] ***
*** finished computation of 3 references, err: [Inf, 0.3501000035459223, 0.24319038896736267, 0.2409345386116982, 0.2392823079648404, 0.2378122512707724, 0.23739876403093527] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [114, 103, 11]]
** centroid: 1, normalized-entropy: 0.7753411604110241, [(1, 114), (2, 103), (3, 11)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [90, 112, 12]]
** centroid: 2, normalized-entropy: 0.7870814922272945, [(1, 90), (2, 112), (3, 12)]
*** center 3: selecting labels [1] (freq >= 2) [from [225, 0, 0]]
finished with 7 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 12)
[0.9349738960517403, 0.9090108072144, 0.9060078042113969, 0.9000197802593012, 0.8959858061654469, 0.8929708151265038, 0.8859937782093471, 0.8809977642312972, 0.8720097342851835, 0.8620207033380686, 0.8540306773839709, 0.7800075524626422]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.6, 2) => 0.9349738960517403
finished with 12
iteration 2 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9349738960517403, 0.9090108072144, 0.9060078042113969, 0.9000197802593012, 0.8959858061654469, 0.8929708151265038, 0.8859937782093471, 0.8809977642312972, 0.8720097342851835, 0.8620207033380686, 0.8540306773839709, 0.7800075524626422]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.6, 2) => 0.9349738960517403
finished with 12
iteration 3 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9349738960517403, 0.9090108072144, 0.9060078042113969, 0.9000197802593012, 0.8959858061654469, 0.8929708151265038, 0.8859937782093471, 0.8809977642312972, 0.8720097342851835, 0.8620207033380686, 0.8540306773839709, 0.7800075524626422]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.6, 2) => 0.9349738960517403
finished with 12
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 12)
[0.9349738960517403, 0.9090108072144, 0.9060078042113969, 0.9000197802593012, 0.8959858061654469, 0.8929708151265038, 0.8859937782093471, 0.8809977642312972, 0.8720097342851835, 0.8620207033380686, 0.8540306773839709, 0.7800075524626422]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.6, 2) => 0.9349738960517403
finished with 13
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.3318744215445856] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3318744215445856, 0.2702843134176803] ***
*** starting iteration: 2; err: [Inf, 0.3318744215445856, 0.2702843134176803] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3318744215445856, 0.2702843134176803, 0.2434088831526918] ***
*** starting iteration: 3; err: [Inf, 0.3318744215445856, 0.2702843134176803, 0.2434088831526918] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3318744215445856, 0.2702843134176803, 0.2434088831526918, 0.23548858946010293] ***
*** finished computation of 3 references, err: [Inf, 0.3318744215445856, 0.2702843134176803, 0.2434088831526918, 0.23548858946010293] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [85, 91, 4]]
** centroid: 1, normalized-entropy: 0.7133923267268024, [(1, 85), (2, 91), (3, 4)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [105, 125, 21]]
** centroid: 2, normalized-entropy: 0.8367987417956542, [(1, 105), (2, 125), (3, 21)]
*** center 3: selecting labels [1] (freq >= 1) [from [235, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2864399383248094] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2864399383248094, 0.24881471004169517] ***
*** starting iteration: 2; err: [Inf, 0.2864399383248094, 0.24881471004169517] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2864399383248094, 0.24881471004169517, 0.23803949640362873] ***
*** starting iteration: 3; err: [Inf, 0.2864399383248094, 0.24881471004169517, 0.23803949640362873] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2864399383248094, 0.24881471004169517, 0.23803949640362873, 0.2351276485762186] ***
*** finished computation of 3 references, err: [Inf, 0.2864399383248094, 0.24881471004169517, 0.23803949640362873, 0.2351276485762186] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 174, 22]]
** centroid: 1, normalized-entropy: 0.5066503344840895, [(2, 174), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [201, 28, 0]]
** centroid: 2, normalized-entropy: 0.5358530119197493, [(1, 201), (2, 28)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [221, 21, 0]]
** centroid: 3, normalized-entropy: 0.42561889221732047, [(1, 221), (2, 21)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3169116264717399] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3169116264717399, 0.2685336247770705] ***
*** starting iteration: 2; err: [Inf, 0.3169116264717399, 0.2685336247770705] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3169116264717399, 0.2685336247770705, 0.24312294397860587] ***
*** starting iteration: 3; err: [Inf, 0.3169116264717399, 0.2685336247770705, 0.24312294397860587] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3169116264717399, 0.2685336247770705, 0.24312294397860587, 0.23442864663357185] ***
*** finished computation of 3 references, err: [Inf, 0.3169116264717399, 0.2685336247770705, 0.24312294397860587, 0.23442864663357185] ***
*** center 1: selecting labels [1] (freq >= 1) [from [236, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [109, 68, 0]]
** centroid: 2, normalized-entropy: 0.9609413432710876, [(1, 109), (2, 68)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [84, 147, 23]]
** centroid: 3, normalized-entropy: 0.8191591683536291, [(1, 84), (2, 147), (3, 23)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 13)
[0.9349738960517403, 0.9090108072144, 0.9060078042113969, 0.9000197802593012, 0.8959858061654469, 0.8929708151265038, 0.8859937782093471, 0.8820107532682383, 0.8809977642312972, 0.8720097342851835, 0.8620207033380686, 0.8540306773839709, 0.7800075524626422]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.6, 2) => 0.9349738960517403
finished with 15
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.22749277014380273] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22749277014380273, 0.19342055997002808] ***
*** starting iteration: 2; err: [Inf, 0.22749277014380273, 0.19342055997002808] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22749277014380273, 0.19342055997002808, 0.1919927368795072] ***
*** starting iteration: 3; err: [Inf, 0.22749277014380273, 0.19342055997002808, 0.1919927368795072] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22749277014380273, 0.19342055997002808, 0.1919927368795072, 0.1914339324534833] ***
*** finished computation of 7 references, err: [Inf, 0.22749277014380273, 0.19342055997002808, 0.1919927368795072, 0.1914339324534833] ***
*** center 1: selecting labels [1] (freq >= 2) [from [124, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 74, 22]]
** centroid: 2, normalized-entropy: 0.7765557854444601, [(2, 74), (3, 22)]
*** center 3: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [80, 46, 0]]
** centroid: 4, normalized-entropy: 0.9468188316776024, [(1, 80), (2, 46)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [33, 46, 0]]
** centroid: 5, normalized-entropy: 0.980377508715691, [(1, 33), (2, 46)]
*** center 6: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [8, 57, 0]]
** centroid: 7, normalized-entropy: 0.5381411852224502, [(1, 8), (2, 57)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24347027374160612] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24347027374160612, 0.19833334239906278] ***
*** starting iteration: 2; err: [Inf, 0.24347027374160612, 0.19833334239906278] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24347027374160612, 0.19833334239906278, 0.19264691856562688] ***
*** starting iteration: 3; err: [Inf, 0.24347027374160612, 0.19833334239906278, 0.19264691856562688] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24347027374160612, 0.19833334239906278, 0.19264691856562688, 0.1915706103046968] ***
*** starting iteration: 4; err: [Inf, 0.24347027374160612, 0.19833334239906278, 0.19264691856562688, 0.1915706103046968] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24347027374160612, 0.19833334239906278, 0.19264691856562688, 0.1915706103046968, 0.19138017766222334] ***
*** finished computation of 7 references, err: [Inf, 0.24347027374160612, 0.19833334239906278, 0.19264691856562688, 0.1915706103046968, 0.19138017766222334] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [101, 12, 0]]
** centroid: 1, normalized-entropy: 0.48833020341885913, [(1, 101), (2, 12)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [68, 21, 0]]
** centroid: 2, normalized-entropy: 0.7882487221644084, [(1, 68), (2, 21)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 88, 23]]
** centroid: 3, normalized-entropy: 0.7361103940132281, [(2, 88), (3, 23)]
*** center 4: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [68, 39, 0]]
** centroid: 5, normalized-entropy: 0.9463439981707659, [(1, 68), (2, 39)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [14, 55, 0]]
** centroid: 6, normalized-entropy: 0.7276874545656657, [(1, 14), (2, 55)]
*** center 7: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22830832522088387] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22830832522088387, 0.18976874183024373] ***
*** starting iteration: 2; err: [Inf, 0.22830832522088387, 0.18976874183024373] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22830832522088387, 0.18976874183024373, 0.18756598473020322] ***
*** starting iteration: 3; err: [Inf, 0.22830832522088387, 0.18976874183024373, 0.18756598473020322] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22830832522088387, 0.18976874183024373, 0.18756598473020322, 0.18719440760152475] ***
*** finished computation of 7 references, err: [Inf, 0.22830832522088387, 0.18976874183024373, 0.18756598473020322, 0.18719440760152475] ***
*** center 1: selecting labels [1] (freq >= 2) [from [152, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 57, 25]]
** centroid: 2, normalized-entropy: 0.8871723027673716, [(2, 57), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [75, 6, 0]]
** centroid: 3, normalized-entropy: 0.38094658570539014, [(1, 75), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [75, 17, 0]]
** centroid: 4, normalized-entropy: 0.6904285855304167, [(1, 75), (2, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [28, 70, 0]]
** centroid: 5, normalized-entropy: 0.8631205685666311, [(1, 28), (2, 70)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [8, 66, 0]]
** centroid: 6, normalized-entropy: 0.4941829348497886, [(1, 8), (2, 66)]
*** center 7: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1987317081851264] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1987317081851264, 0.1469294617243402] ***
*** starting iteration: 2; err: [Inf, 0.1987317081851264, 0.1469294617243402] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1987317081851264, 0.1469294617243402, 0.1434591712007808] ***
*** starting iteration: 3; err: [Inf, 0.1987317081851264, 0.1469294617243402, 0.1434591712007808] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1987317081851264, 0.1469294617243402, 0.1434591712007808, 0.14280953070263494] ***
*** finished computation of 7 references, err: [Inf, 0.1987317081851264, 0.1469294617243402, 0.1434591712007808, 0.14280953070263494] ***
*** center 1: selecting labels [1] (freq >= 2) [from [129, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 56, 25]]
** centroid: 2, normalized-entropy: 0.8915996278279094, [(2, 56), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [66, 34, 0]]
** centroid: 3, normalized-entropy: 0.9248187049730301, [(1, 66), (2, 34)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [103, 11, 0]]
** centroid: 4, normalized-entropy: 0.4577733290341998, [(1, 103), (2, 11)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [37, 47, 0]]
** centroid: 5, normalized-entropy: 0.9897525351939971, [(1, 37), (2, 47)]
*** center 6: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 68, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19276677257632013] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19276677257632013, 0.1523204246602919] ***
*** starting iteration: 2; err: [Inf, 0.19276677257632013, 0.1523204246602919] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19276677257632013, 0.1523204246602919, 0.147522010769265] ***
*** starting iteration: 3; err: [Inf, 0.19276677257632013, 0.1523204246602919, 0.147522010769265] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19276677257632013, 0.1523204246602919, 0.147522010769265, 0.1470287207296227] ***
*** finished computation of 7 references, err: [Inf, 0.19276677257632013, 0.1523204246602919, 0.147522010769265, 0.1470287207296227] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [17, 77, 0]]
** centroid: 1, normalized-entropy: 0.6819353204567525, [(1, 17), (2, 77)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [67, 36, 0]]
** centroid: 2, normalized-entropy: 0.9336337717211408, [(1, 67), (2, 36)]
*** center 3: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 97, 22]]
** centroid: 4, normalized-entropy: 0.6906241389199443, [(2, 97), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [95, 10, 0]]
** centroid: 5, normalized-entropy: 0.45371633918694493, [(1, 95), (2, 10)]
*** center 6: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [62, 3, 0]]
** centroid: 7, normalized-entropy: 0.269828447703074, [(1, 62), (2, 3)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20339999947211015] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20339999947211015, 0.15498679091196055] ***
*** starting iteration: 2; err: [Inf, 0.20339999947211015, 0.15498679091196055] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20339999947211015, 0.15498679091196055, 0.14985630546474474] ***
*** starting iteration: 3; err: [Inf, 0.20339999947211015, 0.15498679091196055, 0.14985630546474474] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20339999947211015, 0.15498679091196055, 0.14985630546474474, 0.14866871827294578] ***
*** starting iteration: 4; err: [Inf, 0.20339999947211015, 0.15498679091196055, 0.14985630546474474, 0.14866871827294578] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20339999947211015, 0.15498679091196055, 0.14985630546474474, 0.14866871827294578, 0.14781224895184902] ***
*** finished computation of 7 references, err: [Inf, 0.20339999947211015, 0.15498679091196055, 0.14985630546474474, 0.14866871827294578, 0.14781224895184902] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [107, 8, 0]]
** centroid: 1, normalized-entropy: 0.36429902881461246, [(1, 107), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [72, 24, 0]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(1, 72), (2, 24)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 72, 23]]
** centroid: 3, normalized-entropy: 0.7985237652450764, [(2, 72), (3, 23)]
*** center 4: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [65, 38, 0]]
** centroid: 5, normalized-entropy: 0.9498485528365604, [(1, 65), (2, 38)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 73, 0]]
** centroid: 6, normalized-entropy: 0.3877431810559867, [(1, 6), (2, 73)]
*** center 7: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 15)
[0.9349738960517403, 0.9259978541415667, 0.9090108072144, 0.9060407713102324, 0.9060078042113969, 0.9000197802593012, 0.8959858061654469, 0.8929708151265038, 0.8859937782093471, 0.8820107532682383, 0.8809977642312972, 0.8720097342851835, 0.8620207033380686, 0.8540306773839709, 0.7800075524626422]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.6, 2) => 0.9349738960517403
finished with 16
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.4215155846660246] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4215155846660246, 0.3009105548514305] ***
*** starting iteration: 2; err: [Inf, 0.4215155846660246, 0.3009105548514305] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4215155846660246, 0.3009105548514305, 0.2978504092905212] ***
*** starting iteration: 3; err: [Inf, 0.4215155846660246, 0.3009105548514305, 0.2978504092905212] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4215155846660246, 0.3009105548514305, 0.2978504092905212, 0.2975872819390226] ***
*** finished computation of 3 references, err: [Inf, 0.4215155846660246, 0.3009105548514305, 0.2978504092905212, 0.2975872819390226] ***
*** center 1: selecting labels [1] (freq >= 2) [from [230, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [84, 125, 25]]
** centroid: 2, normalized-entropy: 0.857124111357569, [(1, 84), (2, 125), (3, 25)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [111, 91, 0]]
** centroid: 3, normalized-entropy: 0.9929170598659379, [(1, 111), (2, 91)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.44435724052230546] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44435724052230546, 0.35454715426377337] ***
*** starting iteration: 2; err: [Inf, 0.44435724052230546, 0.35454715426377337] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44435724052230546, 0.35454715426377337, 0.34120034729723986] ***
*** starting iteration: 3; err: [Inf, 0.44435724052230546, 0.35454715426377337, 0.34120034729723986] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44435724052230546, 0.35454715426377337, 0.34120034729723986, 0.3355919649315554] ***
*** starting iteration: 4; err: [Inf, 0.44435724052230546, 0.35454715426377337, 0.34120034729723986, 0.3355919649315554] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44435724052230546, 0.35454715426377337, 0.34120034729723986, 0.3355919649315554, 0.3336038750720614] ***
*** starting iteration: 5; err: [Inf, 0.44435724052230546, 0.35454715426377337, 0.34120034729723986, 0.3355919649315554, 0.3336038750720614] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44435724052230546, 0.35454715426377337, 0.34120034729723986, 0.3355919649315554, 0.3336038750720614, 0.33195447922171817] ***
*** starting iteration: 6; err: [Inf, 0.44435724052230546, 0.35454715426377337, 0.34120034729723986, 0.3355919649315554, 0.3336038750720614, 0.33195447922171817] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44435724052230546, 0.35454715426377337, 0.34120034729723986, 0.3355919649315554, 0.3336038750720614, 0.33195447922171817, 0.3301138006767881] ***
*** starting iteration: 7; err: [Inf, 0.44435724052230546, 0.35454715426377337, 0.34120034729723986, 0.3355919649315554, 0.3336038750720614, 0.33195447922171817, 0.3301138006767881] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44435724052230546, 0.35454715426377337, 0.34120034729723986, 0.3355919649315554, 0.3336038750720614, 0.33195447922171817, 0.3301138006767881, 0.3286751038653181] ***
*** starting iteration: 8; err: [Inf, 0.44435724052230546, 0.35454715426377337, 0.34120034729723986, 0.3355919649315554, 0.3336038750720614, 0.33195447922171817, 0.3301138006767881, 0.3286751038653181] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44435724052230546, 0.35454715426377337, 0.34120034729723986, 0.3355919649315554, 0.3336038750720614, 0.33195447922171817, 0.3301138006767881, 0.3286751038653181, 0.32628425474612344] ***
*** starting iteration: 9; err: [Inf, 0.44435724052230546, 0.35454715426377337, 0.34120034729723986, 0.3355919649315554, 0.3336038750720614, 0.33195447922171817, 0.3301138006767881, 0.3286751038653181, 0.32628425474612344] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44435724052230546, 0.35454715426377337, 0.34120034729723986, 0.3355919649315554, 0.3336038750720614, 0.33195447922171817, 0.3301138006767881, 0.3286751038653181, 0.32628425474612344, 0.3225681989996888] ***
*** starting iteration: 10; err: [Inf, 0.44435724052230546, 0.35454715426377337, 0.34120034729723986, 0.3355919649315554, 0.3336038750720614, 0.33195447922171817, 0.3301138006767881, 0.3286751038653181, 0.32628425474612344, 0.3225681989996888] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44435724052230546, 0.35454715426377337, 0.34120034729723986, 0.3355919649315554, 0.3336038750720614, 0.33195447922171817, 0.3301138006767881, 0.3286751038653181, 0.32628425474612344, 0.3225681989996888, 0.3158967172024657] ***
*** finished computation of 3 references, err: [Inf, 0.44435724052230546, 0.35454715426377337, 0.34120034729723986, 0.3355919649315554, 0.3336038750720614, 0.33195447922171817, 0.3301138006767881, 0.3286751038653181, 0.32628425474612344, 0.3225681989996888, 0.3158967172024657] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [223, 4, 0]]
** centroid: 1, normalized-entropy: 0.12786708780973463, [(1, 223), (2, 4)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [36, 165, 22]]
** centroid: 2, normalized-entropy: 0.6788371740007157, [(1, 36), (2, 165), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [163, 54, 0]]
** centroid: 3, normalized-entropy: 0.8094470192809174, [(1, 163), (2, 54)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3365449985723825] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3365449985723825, 0.30278993981598556] ***
*** starting iteration: 2; err: [Inf, 0.3365449985723825, 0.30278993981598556] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3365449985723825, 0.30278993981598556, 0.30080796203211596] ***
*** starting iteration: 3; err: [Inf, 0.3365449985723825, 0.30278993981598556, 0.30080796203211596] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3365449985723825, 0.30278993981598556, 0.30080796203211596, 0.30031038082457484] ***
*** finished computation of 3 references, err: [Inf, 0.3365449985723825, 0.30278993981598556, 0.30080796203211596, 0.30031038082457484] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [259, 30, 0]]
** centroid: 1, normalized-entropy: 0.48094622098139506, [(1, 259), (2, 30)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 147, 23]]
** centroid: 2, normalized-entropy: 0.5717805850773673, [(2, 147), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [170, 38, 0]]
** centroid: 3, normalized-entropy: 0.6859315226878925, [(1, 170), (2, 38)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 16)
[0.9349738960517403, 0.9259978541415667, 0.9090108072144, 0.9060407713102324, 0.9060078042113969, 0.9000197802593012, 0.8959858061654469, 0.8929708151265038, 0.8859937782093471, 0.8820107532682383, 0.8809977642312972, 0.8720097342851835, 0.8649757541973111, 0.8620207033380686, 0.8540306773839709, 0.7800075524626422]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.6, 2) => 0.9349738960517403
finished with 16
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9349738960517403, 0.9259978541415667, 0.9090108072144, 0.9060407713102324, 0.9060078042113969, 0.9000197802593012, 0.8959858061654469, 0.8929708151265038, 0.8859937782093471, 0.8820107532682383, 0.8809977642312972, 0.8720097342851835, 0.8649757541973111, 0.8620207033380686, 0.8540306773839709, 0.7800075524626422]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :dnet, 0.6, 2) => 0.9349738960517403
finished with 16
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.3147842018287629] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3147842018287629, 0.18935993168875576] ***
*** finished computation of 7 references, err: [Inf, 0.3147842018287629, 0.18935993168875576] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [14, 132, 0]]
** centroid: 1, normalized-entropy: 0.4558314584408233, [(1, 14), (2, 132)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [129, 11, 0]]
** centroid: 2, normalized-entropy: 0.39712541869775164, [(1, 129), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 19, 32]]
** centroid: 3, normalized-entropy: 0.9526092095121206, [(2, 19), (3, 32)]
*** center 4: selecting labels [2] (freq >= 2) [from [1, 57, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [284, 2, 0]]
** centroid: 5, normalized-entropy: 0.060122448878635194, [(1, 284), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [210, 38, 0]]
** centroid: 6, normalized-entropy: 0.6178543578838833, [(1, 210), (2, 38)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 68, 3]]
** centroid: 7, normalized-entropy: 0.25253077151613923, [(2, 68), (3, 3)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1837545701581985] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1837545701581985, 0.15229954497516154] ***
*** finished computation of 7 references, err: [Inf, 0.1837545701581985, 0.15229954497516154] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [31, 43, 0]]
** centroid: 1, normalized-entropy: 0.9809470132751208, [(1, 31), (2, 43)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [67, 26, 0]]
** centroid: 2, normalized-entropy: 0.8548640967818041, [(1, 67), (2, 26)]
*** center 3: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [39, 22, 0]]
** centroid: 4, normalized-entropy: 0.9432261548473416, [(1, 39), (2, 22)]
*** center 5: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 70, 16]]
** centroid: 7, normalized-entropy: 0.6931274153282881, [(2, 70), (3, 16)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.211785201465711] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.211785201465711, 0.16402429958526046] ***
*** finished computation of 7 references, err: [Inf, 0.211785201465711, 0.16402429958526046] ***
*** center 1: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [123, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [28, 44, 0]]
** centroid: 3, normalized-entropy: 0.9640787648082293, [(1, 28), (2, 44)]
*** center 4: selecting labels [1, 2, 3] (freq >= 2) [from [5, 54, 7]]
** centroid: 4, normalized-entropy: 0.5439853567522881, [(1, 5), (2, 54), (3, 7)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [21, 17, 0]]
** centroid: 5, normalized-entropy: 0.9919924034538556, [(1, 21), (2, 17)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 56, 10]]
** centroid: 6, normalized-entropy: 0.6136190195993708, [(2, 56), (3, 10)]
*** center 7: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20855807202029975] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20855807202029975, 0.1713135908935219] ***
*** finished computation of 7 references, err: [Inf, 0.20855807202029975, 0.1713135908935219] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [12, 85, 14]]
** centroid: 1, normalized-entropy: 0.6426355619676674, [(1, 12), (2, 85), (3, 14)]
*** center 2: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [112, 2, 0]]
** centroid: 3, normalized-entropy: 0.1274185117923586, [(1, 112), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [3, 46, 0]]
** centroid: 4, normalized-entropy: 0.3322866302216152, [(1, 3), (2, 46)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [31, 3, 0]]
** centroid: 5, normalized-entropy: 0.43055186701043935, [(1, 31), (2, 3)]
*** center 6: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 7: selecting labels [1, 2, 3] (freq >= 2) [from [8, 38, 4]]
** centroid: 7, normalized-entropy: 0.6406658069800262, [(1, 8), (2, 38), (3, 4)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18860405523469673] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18860405523469673, 0.16070188668183982] ***
*** finished computation of 7 references, err: [Inf, 0.18860405523469673, 0.16070188668183982] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 83, 18]]
** centroid: 1, normalized-entropy: 0.6761627418829197, [(2, 83), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [14, 45, 0]]
** centroid: 3, normalized-entropy: 0.7905013842153699, [(1, 14), (2, 45)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [91, 19, 0]]
** centroid: 4, normalized-entropy: 0.6639057588563916, [(1, 91), (2, 19)]
*** center 5: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [39, 23, 0]]
** centroid: 6, normalized-entropy: 0.9514122535330207, [(1, 39), (2, 23)]
*** center 7: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21186348455958068] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21186348455958068, 0.16901459630019963] ***
*** finished computation of 7 references, err: [Inf, 0.21186348455958068, 0.16901459630019963] ***
*** center 1: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 32, 14]]
** centroid: 2, normalized-entropy: 0.8865408928220899, [(2, 32), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [101, 30, 0]]
** centroid: 3, normalized-entropy: 0.7762773708031997, [(1, 101), (2, 30)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [59, 20, 0]]
** centroid: 4, normalized-entropy: 0.8162554088088008, [(1, 59), (2, 20)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [2, 63, 0]]
** centroid: 5, normalized-entropy: 0.19823496409776642, [(1, 2), (2, 63)]
*** center 6: selecting labels [1] (freq >= 2) [from [40, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 36, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2158453576527536] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2158453576527536, 0.16967419377714396] ***
*** finished computation of 7 references, err: [Inf, 0.2158453576527536, 0.16967419377714396] ***
*** center 1: selecting labels [1] (freq >= 2) [from [117, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [3, 37, 0]]
** centroid: 2, normalized-entropy: 0.3843115441264972, [(1, 3), (2, 37)]
*** center 3: selecting labels [1] (freq >= 2) [from [20, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [102, 46, 0]]
** centroid: 4, normalized-entropy: 0.8941071841443881, [(1, 102), (2, 46)]
*** center 5: selecting labels [1] (freq >= 2) [from [49, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 66, 24]]
** centroid: 6, normalized-entropy: 0.8366407419411671, [(2, 66), (3, 24)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [18, 18, 0]]
** centroid: 7, normalized-entropy: 1.0, [(1, 18), (2, 18)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2346827181465924] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2346827181465924, 0.1928593599945307] ***
*** finished computation of 7 references, err: [Inf, 0.2346827181465924, 0.1928593599945307] ***
*** center 1: selecting labels [1] (freq >= 2) [from [174, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 29, 16]]
** centroid: 3, normalized-entropy: 0.9389320105807949, [(2, 29), (3, 16)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [28, 71, 0]]
** centroid: 4, normalized-entropy: 0.8592759806609698, [(1, 28), (2, 71)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 28, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [27, 31, 0]]
** centroid: 7, normalized-entropy: 0.9965663713274552, [(1, 27), (2, 31)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20312334657274186] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20312334657274186, 0.167672012841329] ***
*** finished computation of 7 references, err: [Inf, 0.20312334657274186, 0.167672012841329] ***
*** center 1: selecting labels [2] (freq >= 2) [from [1, 26, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [151, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 74, 19]]
** centroid: 3, normalized-entropy: 0.7304472862481346, [(2, 74), (3, 19)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [19, 28, 0]]
** centroid: 4, normalized-entropy: 0.9733854352299557, [(1, 19), (2, 28)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [6, 11, 0]]
** centroid: 5, normalized-entropy: 0.9366673818775627, [(1, 6), (2, 11)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [94, 19, 0]]
** centroid: 6, normalized-entropy: 0.6534358224760193, [(1, 94), (2, 19)]
*** center 7: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2083201581388712] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2083201581388712, 0.16682734046503903] ***
*** finished computation of 7 references, err: [Inf, 0.2083201581388712, 0.16682734046503903] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 56, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [7, 49, 0]]
** centroid: 2, normalized-entropy: 0.5435644431995963, [(1, 7), (2, 49)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [82, 21, 0]]
** centroid: 3, normalized-entropy: 0.7296274178915987, [(1, 82), (2, 21)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [96, 23, 0]]
** centroid: 4, normalized-entropy: 0.7082772165975041, [(1, 96), (2, 23)]
*** center 5: selecting labels [1] (freq >= 2) [from [120, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 13, 7]]
** centroid: 6, normalized-entropy: 0.9340680553754911, [(2, 13), (3, 7)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 17, 9]]
** centroid: 7, normalized-entropy: 0.9305861291319927, [(2, 17), (3, 9)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22651021147146821] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22651021147146821, 0.16391720631718634] ***
*** finished computation of 7 references, err: [Inf, 0.22651021147146821, 0.16391720631718634] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [97, 43, 0]]
** centroid: 1, normalized-entropy: 0.8898478016282408, [(1, 97), (2, 43)]
*** center 2: selecting labels [1] (freq >= 2) [from [22, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [60, 6, 0]]
** centroid: 3, normalized-entropy: 0.43949698692151346, [(1, 60), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [52, 12, 0]]
** centroid: 4, normalized-entropy: 0.6962122601251459, [(1, 52), (2, 12)]
*** center 5: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 104, 14]]
** centroid: 6, normalized-entropy: 0.5254506799086205, [(2, 104), (3, 14)]
*** center 7: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2966848928863183] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2966848928863183, 0.19653036618418993] ***
*** finished computation of 7 references, err: [Inf, 0.2966848928863183, 0.19653036618418993] ***
*** center 1: selecting labels [1] (freq >= 2) [from [40, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [9, 122, 19]]
** centroid: 2, normalized-entropy: 0.5448410737977027, [(1, 9), (2, 122), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [87, 40, 0]]
** centroid: 3, normalized-entropy: 0.898816907761663, [(1, 87), (2, 40)]
*** center 4: selecting labels [1] (freq >= 2) [from [24, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [101, 10, 0]]
** centroid: 5, normalized-entropy: 0.436770454577089, [(1, 101), (2, 10)]
*** center 6: selecting labels [1] (freq >= 2) [from [37, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [11, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17452017429191619] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17452017429191619, 0.15420403713732958] ***
*** finished computation of 7 references, err: [Inf, 0.17452017429191619, 0.15420403713732958] ***
*** center 1: selecting labels [1] (freq >= 2) [from [107, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [65, 7, 0]]
** centroid: 2, normalized-entropy: 0.460127886147135, [(1, 65), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 51, 21]]
** centroid: 3, normalized-entropy: 0.8708644692353648, [(2, 51), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [53, 19, 0]]
** centroid: 5, normalized-entropy: 0.8325582396745668, [(1, 53), (2, 19)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [20, 29, 0]]
** centroid: 6, normalized-entropy: 0.9755259511264975, [(1, 20), (2, 29)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [7, 49, 0]]
** centroid: 7, normalized-entropy: 0.5435644431995963, [(1, 7), (2, 49)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2325094527034089] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2325094527034089, 0.18706044555082918] ***
*** finished computation of 7 references, err: [Inf, 0.2325094527034089, 0.18706044555082918] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [22, 63, 8]]
** centroid: 1, normalized-entropy: 0.7426357893900505, [(1, 22), (2, 63), (3, 8)]
*** center 2: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [35, 34, 0]]
** centroid: 3, normalized-entropy: 0.9998484829291058, [(1, 35), (2, 34)]
*** center 4: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 5: selecting labels [1, 2, 3] (freq >= 2) [from [14, 55, 9]]
** centroid: 5, normalized-entropy: 0.7316705896702257, [(1, 14), (2, 55), (3, 9)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [34, 11, 0]]
** centroid: 6, normalized-entropy: 0.80235344282919, [(1, 34), (2, 11)]
*** center 7: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
finished with 13 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2767310664653778] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2767310664653778, 0.18303123927675188] ***
*** finished computation of 7 references, err: [Inf, 0.2767310664653778, 0.18303123927675188] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [20, 126, 18]]
** centroid: 1, normalized-entropy: 0.6386395861760048, [(1, 20), (2, 126), (3, 18)]
*** center 2: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [29, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [21, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [54, 1, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 40, 0]]
** centroid: 6, normalized-entropy: 0.5032583347756457, [(1, 5), (2, 40)]
*** center 7: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23460699846968056] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23460699846968056, 0.18984567738696934] ***
*** finished computation of 7 references, err: [Inf, 0.23460699846968056, 0.18984567738696934] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [19, 39, 0]]
** centroid: 1, normalized-entropy: 0.912441179764541, [(1, 19), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [179, 5, 0]]
** centroid: 2, normalized-entropy: 0.18001486581386775, [(1, 179), (2, 5)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [5, 69, 0]]
** centroid: 3, normalized-entropy: 0.35678001438394347, [(1, 5), (2, 69)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 18, 13]]
** centroid: 4, normalized-entropy: 0.9811522341999134, [(2, 18), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [19, 19, 0]]
** centroid: 5, normalized-entropy: 1.0, [(1, 19), (2, 19)]
*** center 6: selecting labels [1] (freq >= 2) [from [84, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 30, 1]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24109677531011403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24109677531011403, 0.16931745304726065] ***
*** finished computation of 7 references, err: [Inf, 0.24109677531011403, 0.16931745304726065] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [101, 47, 0]]
** centroid: 1, normalized-entropy: 0.901716637339894, [(1, 101), (2, 47)]
*** center 2: selecting labels [2] (freq >= 2) [from [1, 18, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [37, 1, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [125, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 59, 19]]
** centroid: 5, normalized-entropy: 0.8009591077369054, [(2, 59), (3, 19)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [52, 7, 0]]
** centroid: 6, normalized-entropy: 0.5254506799086205, [(1, 52), (2, 7)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 33, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17452929635159672] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17452929635159672, 0.15046584672667085] ***
*** finished computation of 7 references, err: [Inf, 0.17452929635159672, 0.15046584672667085] ***
*** center 1: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [53, 22, 0]]
** centroid: 2, normalized-entropy: 0.8729882944709463, [(1, 53), (2, 22)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 44, 17]]
** centroid: 3, normalized-entropy: 0.8536576732793314, [(2, 44), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [86, 5, 0]]
** centroid: 5, normalized-entropy: 0.30704288878312236, [(1, 86), (2, 5)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 39, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 57, 0]]
** centroid: 7, normalized-entropy: 0.21357981533827744, [(1, 2), (2, 57)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24713692820165306] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24713692820165306, 0.1636480986531824] ***
*** finished computation of 7 references, err: [Inf, 0.24713692820165306, 0.1636480986531824] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [29, 13, 0]]
** centroid: 1, normalized-entropy: 0.8926230133850988, [(1, 29), (2, 13)]
*** center 2: selecting labels [1] (freq >= 2) [from [61, 1, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [1, 102, 16]]
** centroid: 3, normalized-entropy: 0.572580465623769, [(2, 102), (3, 16)]
*** center 4: selecting labels [1] (freq >= 2) [from [48, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 32, 0]]
** centroid: 5, normalized-entropy: 0.9217647116941611, [(1, 63), (2, 32)]
*** center 6: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2016295919008553] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2016295919008553, 0.15828033843450248] ***
*** finished computation of 7 references, err: [Inf, 0.2016295919008553, 0.15828033843450248] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [18, 36, 0]]
** centroid: 1, normalized-entropy: 0.9182958340544894, [(1, 18), (2, 36)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [51, 25, 0]]
** centroid: 2, normalized-entropy: 0.9138472873262908, [(1, 51), (2, 25)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [5, 39, 0]]
** centroid: 3, normalized-entropy: 0.5107878229540133, [(1, 5), (2, 39)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [91, 7, 0]]
** centroid: 4, normalized-entropy: 0.3712323266408756, [(1, 91), (2, 7)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 64, 13]]
** centroid: 5, normalized-entropy: 0.6550239908788728, [(2, 64), (3, 13)]
*** center 6: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22345964578539132] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22345964578539132, 0.16243153106048702] ***
*** finished computation of 7 references, err: [Inf, 0.22345964578539132, 0.16243153106048702] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 84, 19]]
** centroid: 1, normalized-entropy: 0.6897501750585195, [(2, 84), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [53, 14, 0]]
** centroid: 3, normalized-entropy: 0.7394809367166378, [(1, 53), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [51, 5, 0]]
** centroid: 4, normalized-entropy: 0.4340811200043348, [(1, 51), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [37, 54, 0]]
** centroid: 5, normalized-entropy: 0.974677061681131, [(1, 37), (2, 54)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [80, 6, 0]]
** centroid: 6, normalized-entropy: 0.3650551896402848, [(1, 80), (2, 6)]
*** center 7: selecting labels [1] (freq >= 2) [from [36, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1892685767081566] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1892685767081566, 0.16394853342603893] ***
*** finished computation of 7 references, err: [Inf, 0.1892685767081566, 0.16394853342603893] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [79, 36, 0]]
** centroid: 1, normalized-entropy: 0.8966554495712067, [(1, 79), (2, 36)]
*** center 2: selecting labels [1] (freq >= 2) [from [35, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [26, 28, 0]]
** centroid: 3, normalized-entropy: 0.9990102708804813, [(1, 26), (2, 28)]
*** center 4: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [26, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 85, 16]]
** centroid: 6, normalized-entropy: 0.6305062394675903, [(2, 85), (3, 16)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [73, 20, 0]]
** centroid: 7, normalized-entropy: 0.7510324165275097, [(1, 73), (2, 20)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23983450816757976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23983450816757976, 0.1517608828158118] ***
*** finished computation of 7 references, err: [Inf, 0.23983450816757976, 0.1517608828158118] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 38, 15]]
** centroid: 1, normalized-entropy: 0.8595316914502928, [(2, 38), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [23, 31, 0]]
** centroid: 2, normalized-entropy: 0.9841095278800533, [(1, 23), (2, 31)]
*** center 3: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [73, 18, 0]]
** centroid: 4, normalized-entropy: 0.7175106531195438, [(1, 73), (2, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [64, 20, 0]]
** centroid: 5, normalized-entropy: 0.7918583525674836, [(1, 64), (2, 20)]
*** center 6: selecting labels [1] (freq >= 2) [from [89, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 48, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29141912774834783] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29141912774834783, 0.17954985091555864] ***
*** finished computation of 7 references, err: [Inf, 0.29141912774834783, 0.17954985091555864] ***
*** center 1: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [8, 40, 3]]
** centroid: 3, normalized-entropy: 0.5896308380055666, [(1, 8), (2, 40), (3, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [63, 3, 0]]
** centroid: 4, normalized-entropy: 0.2667649878030262, [(1, 63), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [60, 33, 0]]
** centroid: 5, normalized-entropy: 0.9383153522334071, [(1, 60), (2, 33)]
*** center 6: selecting labels [1, 2, 3] (freq >= 2) [from [7, 90, 16]]
** centroid: 6, normalized-entropy: 0.5737661757977477, [(1, 7), (2, 90), (3, 16)]
*** center 7: selecting labels [1] (freq >= 2) [from [57, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1989362645074725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1989362645074725, 0.16978357263468205] ***
*** finished computation of 7 references, err: [Inf, 0.1989362645074725, 0.16978357263468205] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [13, 68, 0]]
** centroid: 1, normalized-entropy: 0.635489638182683, [(1, 13), (2, 68)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [94, 17, 0]]
** centroid: 2, normalized-entropy: 0.6176751423955683, [(1, 94), (2, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [155, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 15, 8]]
** centroid: 4, normalized-entropy: 0.9321115676166747, [(2, 15), (3, 8)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 11, 7]]
** centroid: 5, normalized-entropy: 0.9640787648082293, [(2, 11), (3, 7)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 38, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [60, 14, 0]]
** centroid: 7, normalized-entropy: 0.699772221773307, [(1, 60), (2, 14)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19928641795925797] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19928641795925797, 0.15528746885806322] ***
*** finished computation of 7 references, err: [Inf, 0.19928641795925797, 0.15528746885806322] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [67, 26, 0]]
** centroid: 1, normalized-entropy: 0.8548640967818041, [(1, 67), (2, 26)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [68, 20, 0]]
** centroid: 2, normalized-entropy: 0.7732266742876346, [(1, 68), (2, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [95, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [10, 45, 0]]
** centroid: 5, normalized-entropy: 0.6840384356390419, [(1, 10), (2, 45)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 51, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 21, 17]]
** centroid: 7, normalized-entropy: 0.9919924034538556, [(2, 21), (3, 17)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.16906778275966644] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16906778275966644, 0.15016226719506084] ***
*** finished computation of 7 references, err: [Inf, 0.16906778275966644, 0.15016226719506084] ***
*** center 1: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 41, 18]]
** centroid: 2, normalized-entropy: 0.8874179270685693, [(2, 41), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [11, 57, 0]]
** centroid: 3, normalized-entropy: 0.6385146263620961, [(1, 11), (2, 57)]
*** center 4: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [76, 5, 0]]
** centroid: 5, normalized-entropy: 0.33426813256179383, [(1, 76), (2, 5)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [10, 62, 0]]
** centroid: 6, normalized-entropy: 0.581321498763703, [(1, 10), (2, 62)]
*** center 7: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25942665262892844] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25942665262892844, 0.18927427383954637] ***
*** finished computation of 7 references, err: [Inf, 0.25942665262892844, 0.18927427383954637] ***
*** center 1: selecting labels [1] (freq >= 2) [from [147, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [5, 98, 17]]
** centroid: 2, normalized-entropy: 0.5230870232406757, [(1, 5), (2, 98), (3, 17)]
*** center 3: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [78, 24, 0]]
** centroid: 4, normalized-entropy: 0.787126586201269, [(1, 78), (2, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [21, 19, 0]]
** centroid: 5, normalized-entropy: 0.99819587904281, [(1, 21), (2, 19)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [18, 13, 0]]
** centroid: 7, normalized-entropy: 0.9811522341999134, [(1, 18), (2, 13)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1929231201261282] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1929231201261282, 0.15698661751672627] ***
*** finished computation of 7 references, err: [Inf, 0.1929231201261282, 0.15698661751672627] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [96, 17, 0]]
** centroid: 1, normalized-entropy: 0.6109464989595527, [(1, 96), (2, 17)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [17, 42, 0]]
** centroid: 2, normalized-entropy: 0.8663006754980497, [(1, 17), (2, 42)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [4, 51, 0]]
** centroid: 3, normalized-entropy: 0.37601985096927276, [(1, 4), (2, 51)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 44, 14]]
** centroid: 4, normalized-entropy: 0.7973265101474423, [(2, 44), (3, 14)]
*** center 5: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [121, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [30, 2, 0]]
** centroid: 7, normalized-entropy: 0.3372900666170139, [(1, 30), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21185974455997347] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21185974455997347, 0.16906528877839447] ***
*** finished computation of 7 references, err: [Inf, 0.21185974455997347, 0.16906528877839447] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [30, 52, 0]]
** centroid: 1, normalized-entropy: 0.9474351361840305, [(1, 30), (2, 52)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 38, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 38, 17]]
** centroid: 3, normalized-entropy: 0.8921212805771683, [(2, 38), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [113, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [119, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [49, 8, 0]]
** centroid: 6, normalized-entropy: 0.5851569902762294, [(1, 49), (2, 8)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [19, 17, 0]]
** centroid: 7, normalized-entropy: 0.9977724720899819, [(1, 19), (2, 17)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24405737694539129] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24405737694539129, 0.17333347605355084] ***
*** finished computation of 7 references, err: [Inf, 0.24405737694539129, 0.17333347605355084] ***
*** center 1: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [126, 29, 0]]
** centroid: 2, normalized-entropy: 0.6953584748246308, [(1, 126), (2, 29)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [39, 19, 0]]
** centroid: 3, normalized-entropy: 0.912441179764541, [(1, 39), (2, 19)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 44, 11]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(2, 44), (3, 11)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [14, 20, 0]]
** centroid: 5, normalized-entropy: 0.9774178175281716, [(1, 14), (2, 20)]
*** center 6: selecting labels [1] (freq >= 2) [from [31, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 63, 3]]
** centroid: 7, normalized-entropy: 0.2667649878030262, [(2, 63), (3, 3)]
finished with 11 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 327,3 => 35,1 => 638), Dict(2 => 373,3 => 35,1 => 592))
[ Info: ===== scores for single classifier: {"micro_f1":0.925,"precision":0.925,"recall":0.925,"macro_recall":0.8638651098436622,"macro_f1":0.8740865225472971,"accuracy":0.925,"class_f1":{"2":0.9056603773584905,"3":0.7692307692307692,"1":0.9473684210526316},"class_precision":{"2":0.8530805687203792,"3":0.8333333333333334,"1":0.9854014598540146},"class_recall":{"2":0.9651474530831099,"3":0.7142857142857143,"1":0.9121621621621622}}
[ Info: ===== scores for 1: {"micro_f1":0.9810000000000001,"precision":0.981,"recall":0.981,"macro_recall":0.9830205540661305,"macro_f1":0.9613524488280154,"accuracy":0.981,"class_f1":{"2":0.9738651994497937,"3":0.9210526315789475,"1":0.9891395154553049},"class_precision":{"2":1.0,"3":0.8536585365853658,"1":0.9785123966942149},"class_recall":{"2":0.9490616621983914,"3":1.0,"1":1.0}}
[ Info: ===== scores for 5: {"micro_f1":0.976,"precision":0.976,"recall":0.976,"macro_recall":0.9805358307369031,"macro_f1":0.9504234454279867,"accuracy":0.976,"class_f1":{"2":0.9673024523160763,"3":0.8974358974358974,"1":0.9865319865319865},"class_precision":{"2":0.9833795013850416,"3":0.813953488372093,"1":0.9832214765100671},"class_recall":{"2":0.9517426273458445,"3":1.0,"1":0.9898648648648649}}
[ Info: ===== scores for 7: {"micro_f1":0.97,"precision":0.97,"recall":0.97,"macro_recall":0.9681967058977783,"macro_f1":0.9381112858270217,"accuracy":0.97,"class_f1":{"2":0.9594594594594594,"3":0.8717948717948717,"1":0.9830795262267344},"class_precision":{"2":0.9673024523160763,"3":0.7906976744186046,"1":0.9847457627118644},"class_recall":{"2":0.9517426273458445,"3":0.9714285714285714,"1":0.981418918918919}}
[ Info: ===== scores for 9: {"micro_f1":0.962,"precision":0.962,"recall":0.962,"macro_recall":0.9620392414628339,"macro_f1":0.9255042897298683,"accuracy":0.962,"class_f1":{"2":0.9485094850948508,"3":0.85,"1":0.9780033840947546},"class_precision":{"2":0.958904109589041,"3":0.7555555555555555,"1":0.9796610169491525},"class_recall":{"2":0.938337801608579,"3":0.9714285714285714,"1":0.9763513513513513}}
[ Info: ===== scores for 11: {"micro_f1":0.961,"precision":0.961,"recall":0.961,"macro_recall":0.9614761783997708,"macro_f1":0.9247879998945873,"accuracy":0.961,"class_f1":{"2":0.9472259810554804,"3":0.85,"1":0.9771380186282812},"class_precision":{"2":0.9562841530054644,"3":0.7555555555555555,"1":0.9796264855687606},"class_recall":{"2":0.938337801608579,"3":0.9714285714285714,"1":0.9746621621621622}}
(score = 0.981, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.981, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.981, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.981, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.98, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.98, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.982, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.982, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.976, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.976, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.976, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.976, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.967, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.967, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.982,"k":3,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.982,"precision":0.982,"recall":0.982,"macro_recall":0.9849059850735454,"macro_f1":0.9659649917524028,"accuracy":0.982,"class_f1":{"2":0.9754768392370572,"3":0.9333333333333333,"1":0.9890848026868178},"class_precision":{"2":0.9916897506925207,"3":0.875,"1":0.9833055091819699},"class_recall":{"2":0.9597855227882037,"3":1.0,"1":0.9949324324324325}}
Test Summary: | Pass  Total
AKNC          |    8      8
[478, 1, 3, 4, 5, 1, 9, 3, 3, 1, 3, 4, 5, 6, 2, 6, 3, 4, 1, 16, 7, 7, 6, 6, 9, 18, 13, 42, 5, 17, 7, 24, 20, 27, 8, 6, 25, 11, 3, 9, 3, 14, 3, 17, 55, 23, 14, 10, 80, 2, 2, 39, 30, 21, 10, 22, 4, 11, 6, 11, 5, 14, 3, 5, 11, 3, 6, 80, 9, 2, 24, 6, 3, 30, 5, 12, 2, 8, 24, 4, 5, 45, 5, 10, 17, 38, 11, 8, 116, 6, 12, 1, 8, 47, 2, 12, 73, 11, 67, 14, 9, 15, 8, 15, 8, 33, 15, 98, 34, 3, 7, 10, 86, 56, 38, 16, 2, 6, 6, 3, 610, 20, 12, 5, 42, 1, 38, 21, 11, 9, 1, 38, 2, 39, 5, 13, 42, 8, 36, 74, 15, 9, 17, 20, 25, 46, 15, 13, 5, 11, 8, 99, 5, 52, 6, 4, 10, 6, 6, 12, 13, 42, 90, 56, 68, 4, 18, 4, 25, 10, 14, 14, 13, 9, 13, 30, 19, 8, 17, 16, 208, 270, 18, 10, 18, 25, 13, 11, 5, 8, 57, 62, 44, 42, 28, 11, 293, 41, 9, 133, 89, 10, 48, 5, 7, 21, 18, 20, 39, 16, 137, 43, 8, 4, 35, 96, 7, 11, 19, 55, 66, 34, 5, 150, 46, 50, 17, 103, 16, 302, 110, 25, 14, 9, 488, 38, 42, 11, 16, 6, 7, 21, 96, 3, 8, 11, 22, 21, 11, 4, 44, 27, 213, 57, 5, 7, 41, 8, 98, 27, 94, 26, 14, 17, 50, 10, 64, 11, 8, 68, 6, 4, 166, 8, 113, 3, 16, 18, 29, 82, 50, 55, 16, 15, 10, 5, 15, 33, 9, 22, 27, 13, 31, 39, 16, 16, 38, 6, 172, 1]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6360000000000001, speedup = 0.391241605150691, eval_ratio = 0.07126299999999999)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.36436011904761906,"recall":0.36197916666666663,"f1":null,"seconds":0.00018911249935626984,"exhaustive_search_seconds":0.0003864765167236328,"evaluations":459.578125,"distances_sum":1711.4991991757574}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5303819444444445,"recall":0.5303819444444445,"f1":null,"seconds":0.0004289969801902771,"exhaustive_search_seconds":0.0003864765167236328,"evaluations":591.5234375,"distances_sum":1615.9077357588608}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6527777777777773,"recall":0.6527777777777773,"f1":null,"seconds":0.0004978049546480179,"exhaustive_search_seconds":0.0003864765167236328,"evaluations":721.8046875,"distances_sum":1553.5985244037006}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7100694444444439,"recall":0.7100694444444439,"f1":0.7100694444444439,"seconds":0.0007930099964141846,"exhaustive_search_seconds":0.0003864765167236328,"evaluations":839.4140625,"distances_sum":1528.60147134611}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7604166666666659,"recall":0.7604166666666659,"f1":0.7604166666666659,"seconds":0.0007628034800291061,"exhaustive_search_seconds":0.0003864765167236328,"evaluations":958.1484375,"distances_sum":1512.9211396139342}
KCenters.DeloneInvIndex> reached performance {"precision":0.8055555555555548,"recall":0.8055555555555548,"f1":0.8055555555555548,"seconds":0.0008834786713123322,"exhaustive_search_seconds":0.0003864765167236328,"evaluations":1071.375,"distances_sum":1500.2959777509864}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.8079999999999999, speedup = 0.6471743585539799, eval_ratio = 0.100218)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
