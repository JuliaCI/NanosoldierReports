Julia Version 1.5.0-DEV.740
Commit 3637c9e6f6 (2020-04-30 17:40 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed InvertedIndices ────────────── v1.0.0
  Installed DataValueInterfaces ────────── v1.0.0
  Installed NamedArrays ────────────────── v0.9.4
  Installed StatsFuns ──────────────────── v0.9.4
  Installed FillArrays ─────────────────── v0.8.8
  Installed SpecialFunctions ───────────── v0.10.0
  Installed Polynomials ────────────────── v0.8.0
  Installed MixedModels ────────────────── v2.3.0
  Installed BinDeps ────────────────────── v1.0.1
  Installed StaticArrays ───────────────── v0.12.2
  Installed CMake ──────────────────────── v1.2.0
  Installed BlockArrays ────────────────── v0.11.2
  Installed Rmath_jll ──────────────────── v0.2.2+0
  Installed PDMats ─────────────────────── v0.9.12
  Installed SplitApplyCombine ──────────── v1.0.0
  Installed Reexport ───────────────────── v0.2.0
  Installed Zlib_jll ───────────────────── v1.2.11+9
  Installed Rmath ──────────────────────── v0.6.1
  Installed ShiftedArrays ──────────────── v1.0.0
  Installed Showoff ────────────────────── v0.3.1
  Installed Dictionaries ───────────────── v0.2.1
  Installed ProgressMeter ──────────────── v1.2.0
  Installed CMakeWrapper ───────────────── v0.2.3
  Installed Distributions ──────────────── v0.23.2
  Installed XML2_jll ───────────────────── v2.9.9+4
  Installed GLM ────────────────────────── v1.3.9
  Installed SortingAlgorithms ──────────── v0.3.1
  Installed Combinatorics ──────────────── v1.0.1
  Installed Libiconv_jll ───────────────── v1.16.0+2
  Installed Missings ───────────────────── v0.4.3
  Installed RecipesBase ────────────────── v1.0.1
  Installed Mocking ────────────────────── v0.7.1
  Installed Indexing ───────────────────── v1.1.0
  Installed Arpack_jll ─────────────────── v3.5.0+3
  Installed TableTraits ────────────────── v1.0.0
  Installed QuadGK ─────────────────────── v2.3.1
  Installed Arpack ─────────────────────── v0.4.0
  Installed TimeZones ──────────────────── v1.1.1
  Installed BlockDiagonals ─────────────── v0.1.6
  Installed CompilerSupportLibraries_jll ─ v0.3.3+0
  Installed OpenSpecFun_jll ────────────── v0.5.3+3
  Installed Requires ───────────────────── v1.0.1
  Installed IteratorInterfaceExtensions ── v1.0.0
  Installed Tables ─────────────────────── v1.0.4
  Installed ExprTools ──────────────────── v0.1.1
  Installed Intervals ──────────────────── v1.1.0
  Installed EzXML ──────────────────────── v1.1.0
  Installed DataStructures ─────────────── v0.17.15
  Installed Parameters ─────────────────── v0.12.0
  Installed StatsModels ────────────────── v0.6.11
  Installed NLopt ──────────────────────── v0.5.1
  Installed MathProgBase ───────────────── v0.7.8
  Installed OrderedCollections ─────────── v1.1.0
  Installed StatsBase ──────────────────── v0.32.2
  Installed BinaryProvider ─────────────── v0.5.9
  Installed OpenBLAS_jll ───────────────── v0.3.9+2
  Installed DataAPI ────────────────────── v1.3.0
  Installed URIParser ──────────────────── v0.4.1
  Installed TypedTables ────────────────── v1.2.0
Updating `~/.julia/environments/v1.5/Project.toml`
  [ff71e718] + MixedModels v2.3.0
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [7d9fca2a] + Arpack v0.4.0
  [68821587] + Arpack_jll v3.5.0+3
  [9e28174c] + BinDeps v1.0.1
  [b99e7846] + BinaryProvider v0.5.9
  [8e7c35d0] + BlockArrays v0.11.2
  [0a1fb500] + BlockDiagonals v0.1.6
  [631607c0] + CMake v1.2.0
  [d5fb7624] + CMakeWrapper v0.2.3
  [861a8166] + Combinatorics v1.0.1
  [e66e0078] + CompilerSupportLibraries_jll v0.3.3+0
  [9a962f9c] + DataAPI v1.3.0
  [864edb3b] + DataStructures v0.17.15
  [e2d170a0] + DataValueInterfaces v1.0.0
  [85a47980] + Dictionaries v0.2.1
  [31c24e10] + Distributions v0.23.2
  [e2ba6199] + ExprTools v0.1.1
  [8f5d6c58] + EzXML v1.1.0
  [1a297f60] + FillArrays v0.8.8
  [38e38edf] + GLM v1.3.9
  [313cdc1a] + Indexing v1.1.0
  [d8418881] + Intervals v1.1.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [94ce4f54] + Libiconv_jll v1.16.0+2
  [fdba3010] + MathProgBase v0.7.8
  [e1d29d7a] + Missings v0.4.3
  [ff71e718] + MixedModels v2.3.0
  [78c3b35d] + Mocking v0.7.1
  [76087f3c] + NLopt v0.5.1
  [86f7a689] + NamedArrays v0.9.4
  [4536629a] + OpenBLAS_jll v0.3.9+2
  [efe28fd5] + OpenSpecFun_jll v0.5.3+3
  [bac558e1] + OrderedCollections v1.1.0
  [90014a1f] + PDMats v0.9.12
  [d96e819e] + Parameters v0.12.0
  [f27b6e38] + Polynomials v0.8.0
  [92933f4c] + ProgressMeter v1.2.0
  [1fd47b50] + QuadGK v2.3.1
  [3cdcf5f2] + RecipesBase v1.0.1
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v1.0.1
  [79098fc4] + Rmath v0.6.1
  [f50d1b31] + Rmath_jll v0.2.2+0
  [1277b4bf] + ShiftedArrays v1.0.0
  [992d4aef] + Showoff v0.3.1
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.10.0
  [03a91e81] + SplitApplyCombine v1.0.0
  [90137ffa] + StaticArrays v0.12.2
  [2913bbd2] + StatsBase v0.32.2
  [4c63d2b9] + StatsFuns v0.9.4
  [3eaba693] + StatsModels v0.6.11
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [f269a46b] + TimeZones v1.1.1
  [9d95f2ec] + TypedTables v1.2.0
  [30578b45] + URIParser v0.4.1
  [02c8fc9c] + XML2_jll v2.9.9+4
  [83775a58] + Zlib_jll v1.2.11+9
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [4607b0f0] + SuiteSparse
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building CMake ────→ `~/.julia/packages/CMake/ULbyn/deps/build.log`
   Building TimeZones → `~/.julia/packages/TimeZones/X323b/deps/build.log`
   Building NLopt ────→ `~/.julia/packages/NLopt/eqN9a/deps/build.log`
    Testing MixedModels
Status `/tmp/jl_RlIZiQ/Project.toml`
  [8e7c35d0] BlockArrays v0.11.2
  [a93c6f00] DataFrames v0.20.2
  [ff71e718] MixedModels v2.3.0
  [86f7a689] NamedArrays v0.9.4
  [df47a6cb] RData v0.6.3
  [3eaba693] StatsModels v0.6.11
  [bd369af6] Tables v1.0.4
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
Status `/tmp/jl_RlIZiQ/Manifest.toml`
  [7d9fca2a] Arpack v0.4.0
  [68821587] Arpack_jll v3.5.0+3
  [9e28174c] BinDeps v1.0.1
  [b99e7846] BinaryProvider v0.5.9
  [8e7c35d0] BlockArrays v0.11.2
  [0a1fb500] BlockDiagonals v0.1.6
  [631607c0] CMake v1.2.0
  [d5fb7624] CMakeWrapper v0.2.3
  [324d7699] CategoricalArrays v0.7.7
  [944b1d66] CodecZlib v0.7.0
  [861a8166] Combinatorics v1.0.1
  [34da2185] Compat v3.9.0
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.15
  [e2d170a0] DataValueInterfaces v1.0.0
  [85a47980] Dictionaries v0.2.1
  [31c24e10] Distributions v0.23.2
  [e2ba6199] ExprTools v0.1.1
  [8f5d6c58] EzXML v1.1.0
  [5789e2e9] FileIO v1.3.0
  [1a297f60] FillArrays v0.8.8
  [38e38edf] GLM v1.3.9
  [313cdc1a] Indexing v1.1.0
  [d8418881] Intervals v1.1.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [94ce4f54] Libiconv_jll v1.16.0+2
  [fdba3010] MathProgBase v0.7.8
  [e1d29d7a] Missings v0.4.3
  [ff71e718] MixedModels v2.3.0
  [78c3b35d] Mocking v0.7.1
  [76087f3c] NLopt v0.5.1
  [86f7a689] NamedArrays v0.9.4
  [4536629a] OpenBLAS_jll v0.3.9+2
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [bac558e1] OrderedCollections v1.1.0
  [90014a1f] PDMats v0.9.12
  [d96e819e] Parameters v0.12.0
  [69de0a69] Parsers v1.0.2
  [f27b6e38] Polynomials v0.8.0
  [2dfb63ee] PooledArrays v0.5.3
  [92933f4c] ProgressMeter v1.2.0
  [1fd47b50] QuadGK v2.3.1
  [df47a6cb] RData v0.6.3
  [3cdcf5f2] RecipesBase v1.0.1
  [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.0.1
  [79098fc4] Rmath v0.6.1
  [f50d1b31] Rmath_jll v0.2.2+0
  [1277b4bf] ShiftedArrays v1.0.0
  [992d4aef] Showoff v0.3.1
  [a2af1166] SortingAlgorithms v0.3.1
  [276daf66] SpecialFunctions v0.10.0
  [03a91e81] SplitApplyCombine v1.0.0
  [90137ffa] StaticArrays v0.12.2
  [2913bbd2] StatsBase v0.32.2
  [4c63d2b9] StatsFuns v0.9.4
  [3eaba693] StatsModels v0.6.11
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [f269a46b] TimeZones v1.1.1
  [3bb67fe8] TranscodingStreams v0.9.5
  [9d95f2ec] TypedTables v1.2.0
  [30578b45] URIParser v0.4.1
  [02c8fc9c] XML2_jll v2.9.9+4
  [83775a58] Zlib_jll v1.2.11+9
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [4607b0f0] SuiteSparse
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary:   | Pass  Total
fullranknumeric |    4      4
Test Summary:       | Pass  Total
fullrankcategorical |    4      4
Test Summary:   | Pass  Total
dependentcolumn |    3      3
Test Summary: | Pass  Total
missingcells  |    3      3
Test Summary: | Pass  Total
UBlk          |   23     23
Test Summary: | Pass  Total
mulαβ!        |   36     36
Internal error: encountered unexpected error in runtime:
TypeError(func=:Tuple, context="parameter", expected=Type, got=NLopt.Opt(opt=0x0000000008aed590, cb=Array{NLopt.Callback_Data, (1,)}[NLopt.Callback_Data(f=getfield(MixedModels, Symbol("#obj#41")){Bool, MixedModels.LinearMixedModel{Float64}, MixedModels.OptSummary{Float64}}(verbose=false, m=MixedModels.LinearMixedModel{Float64}(formula=StatsModels.FormulaTerm{StatsModels.ContinuousTerm{Float64}, Tuple{StatsModels.MatrixTerm{Tuple{StatsModels.InterceptTerm{true}, StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}}}, MixedModels.RandomEffectsTerm, MixedModels.RandomEffectsTerm}}(lhs=StatsModels.ContinuousTerm{Float64}(sym=:Y, mean=-0.0408263, var=1.06921, min=-2.74966, max=3.3424), rhs=(StatsModels.MatrixTerm{Tuple{StatsModels.InterceptTerm{true}, StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}}}(terms=(StatsModels.InterceptTerm{true}(), StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}(sym=:A, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (2, 1)}[0, 1], termnames=Array{Char, (1,)}[Char(0x59000000)], levels=Array{Char, (2,)}[Char(0x4e000000), Char(0x59000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (16,)}[0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00], keys=Array{Char, (16,)}[Char(0x8a3b62d0), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x59000000), Char(0x8b319250), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x00007f07), Char(0x8a4417a0), Char(0x00007f07), Char(0x4e000000), Char(0x00000000)], vals=Array{Int64, (16,)}[139669475227536, 139669475228752, 139669475290032, 139670361216560, 139669439890352, 2, 139669439890624, 139669439890848, 139669475280944, 139669475280976, 139669439893888, 0, 0, 0, 1, 139669535486688], ndel=0, count=2, age=0x0000000000000002, idxfloor=1, maxprobe=0))))), MixedModels.RandomEffectsTerm(lhs=StatsModels.MatrixTerm{Tuple{StatsModels.InterceptTerm{true}, StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}}}(terms=(StatsModels.InterceptTerm{true}(), StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}(sym=:A, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (2, 1)}[0, 1], termnames=Array{Char, (1,)}[Char(0x59000000)], levels=Array{Char, (2,)}[Char(0x4e000000), Char(0x59000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (16,)}[0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00], keys=Array{Char, (16,)}[Char(0x8a3b62d0), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x59000000), Char(0x8b319250), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x00007f07), Char(0x8a4417a0), Char(0x00007f07), Char(0x4e000000), Char(0x00000000)], vals=Array{Int64, (16,)}[139669475227536, 139669475228752, 139669475290032, 139670361216560, 139669439890352, 2, 139669439890624, 139669439890848, 139669475280944, 139669475280976, 139669439893888, 0, 0, 0, 1, 139669535486688], ndel=0, count=2, age=0x0000000000000002, idxfloor=1, maxprobe=0))))), rhs=StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 19}(sym=:G, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (20, 19)}[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], termnames=Array{Char, (19,)}[Char(0x42000000), Char(0x43000000), Char(0x44000000), Char(0x45000000), Char(0x46000000), Char(0x47000000), Char(0x48000000), Char(0x49000000), Char(0x4a000000), Char(0x4b000000), Char(0x4c000000), Char(0x4d000000), Char(0x4e000000), Char(0x4f000000), Char(0x50000000), Char(0x51000000), Char(0x52000000), Char(0x53000000), Char(0x54000000)], levels=Array{Char, (20,)}[Char(0x41000000), Char(0x42000000), Char(0x43000000), Char(0x44000000), Char(0x45000000), Char(0x46000000), Char(0x47000000), Char(0x48000000), Char(0x49000000), Char(0x4a000000), Char(0x4b000000), Char(0x4c000000), Char(0x4d000000), Char(0x4e000000), Char(0x4f000000), Char(0x50000000), Char(0x51000000), Char(0x52000000), Char(0x53000000), Char(0x54000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (64,)}[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], keys=Array{Char, (64,)}[Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x45000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x43000000), Char(0x42000000), Char(0x00000000), Char(0x44000000), Char(0x41000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x52000000), Char(0x47000000), Char(0x00000000), Char(0x46000000), Char(0x4e000000), Char(0x4d000000), Char(0x4b000000), Char(0x4a000000), Char(0x4f000000), Char(0x49000000), Char(0x50000000), Char(0x48000000), Char(0x51000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x53000000), Char(0x54000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x4c000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000)], vals=Array{Int64, (64,)}[12, 16, 19, 22, 25, 26, 43, 45, 5, 50, 62, 68, 71, 72, 74, 3, 2, 86, 4, 1, 98, 101, 102, 104, 110, 113, 118, 18, 7, 125, 6, 14, 13, 11, 10, 15, 9, 16, 8, 17, 150, 151, 154, 156, 157, 19, 20, 166, 167, 169, 170, 171, 12, 174, 177, 178, 180, 183, 186, 188, 191, 197, 198, 0], ndel=0, count=20, age=0x0000000000000015, idxfloor=1, maxprobe=9)))), MixedModels.RandomEffectsTerm(lhs=StatsModels.MatrixTerm{Tuple{StatsModels.InterceptTerm{true}, StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}}}(terms=(StatsModels.InterceptTerm{true}(), StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}(sym=:A, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (2, 1)}[0, 1], termnames=Array{Char, (1,)}[Char(0x59000000)], levels=Array{Char, (2,)}[Char(0x4e000000), Char(0x59000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (16,)}[0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00], keys=Array{Char, (16,)}[Char(0x8a3b62d0), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x59000000), Char(0x8b319250), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x00007f07), Char(0x8a4417a0), Char(0x00007f07), Char(0x4e000000), Char(0x00000000)], vals=Array{Int64, (16,)}[139669475227536, 139669475228752, 139669475290032, 139670361216560, 139669439890352, 2, 139669439890624, 139669439890848, 139669475280944, 139669475280976, 139669439893888, 0, 0, 0, 1, 139669535486688], ndel=0, count=2, age=0x0000000000000002, idxfloor=1, maxprobe=0))))), rhs=StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 9}(sym=:H, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (10, 9)}[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], termnames=Array{Char, (9,)}[Char(0x62000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x66000000), Char(0x67000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000)], levels=Array{Char, (10,)}[Char(0x61000000), Char(0x62000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x66000000), Char(0x67000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (16,)}[0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00], keys=Array{Char, (16,)}[Char(0x8a3b62d0), Char(0x00007f07), Char(0x66000000), Char(0x00000000), Char(0x8a3e9680), Char(0x00007f07), Char(0x67000000), Char(0x61000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000), Char(0x62000000), Char(0x00000000)], vals=Array{Int64, (16,)}[1, 1, 6, 0, 0, 1, 7, 1, 3, 4, 5, 8, 9, 10, 2, 139670360646352], ndel=0, count=10, age=0x000000000000000a, idxfloor=1, maxprobe=7)))))), allterms=Array{Union{MixedModels.FeMat{Float64, S} where S<:(AbstractArray{T, 2} where T), MixedModels.ReMat{Float64, S} where S}, (4,)}[
  MixedModels.ReMat{Float64, 2}(trm=StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 19}(sym=:G, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (20, 19)}[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], termnames=Array{Char, (19,)}[Char(0x42000000), Char(0x43000000), Char(0x44000000), Char(0x45000000), Char(0x46000000), Char(0x47000000), Char(0x48000000), Char(0x49000000), Char(0x4a000000), Char(0x4b000000), Char(0x4c000000), Char(0x4d000000), Char(0x4e000000), Char(0x4f000000), Char(0x50000000), Char(0x51000000), Char(0x52000000), Char(0x53000000), Char(0x54000000)], levels=Array{Char, (20,)}[Char(0x41000000), Char(0x42000000), Char(0x43000000), Char(0x44000000), Char(0x45000000), Char(0x46000000), Char(0x47000000), Char(0x48000000), Char(0x49000000), Char(0x4a000000), Char(0x4b000000), Char(0x4c000000), Char(0x4d000000), Char(0x4e000000), Char(0x4f000000), Char(0x50000000), Char(0x51000000), Char(0x52000000), Char(0x53000000), Char(0x54000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (64,)}[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], keys=Array{Char, (64,)}[Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x45000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x43000000), Char(0x42000000), Char(0x00000000), Char(0x44000000), Char(0x41000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x52000000), Char(0x47000000), Char(0x00000000), Char(0x46000000), Char(0x4e000000), Char(0x4d000000), Char(0x4b000000), Char(0x4a000000), Char(0x4f000000), Char(0x49000000), Char(0x50000000), Char(0x48000000), Char(0x51000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x53000000), Char(0x54000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x4c000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000)], vals=Array{Int64, (64,)}[12, 16, 19, 22, 25, 26, 43, 45, 5, 50, 62, 68, 71, 72, 74, 3, 2, 86, 4, 1, 98, 101, 102, 104, 110, 113, 118, 18, 7, 125, 6, 14, 13, 11, 10, 15, 9, 16, 8, 17, 150, 151, 154, 156, 157, 19, 20, 166, 167, 169, 170, 171, 12, 174, 177, 178, 180, 183, 186, 188, 191, 197, 198, 0], ndel=0, count=20, age=0x0000000000000015, idxfloor=1, maxprobe=9))), refs=Array{Int32, (400,)}[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20], levels=Array{Char, (20,)}[Char(0x41000000), Char(0x42000000), Char(0x43000000), Char(0x44000000), Char(0x45000000), Char(0x46000000), Char(0x47000000), Char(0x48000000), Char(0x49000000), Char(0x4a000000), Char(0x4b000000), Char(0x4c000000), Char(0x4d000000), Char(0x4e000000), Char(0x4f000000), Char(0x50000000), Char(0x51000000), Char(0x52000000), Char(0x53000000), Char(0x54000000)], cnames=Array{String, (2,)}[
  "(Intercept)",
  "A: Y"], z=Array{Float64, (2, 400)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], wtz=Array{Float64, (2, 400)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], λ=LinearAlgebra.LowerTriangular{Float64, Array{Float64, 2}}(data=Array{Float64, (2, 2)}[1, 0, 0, 1]), inds=Array{Int64, (3,)}[1, 2, 4], adjA=SparseArrays.SparseMatrixCSC{Float64, Int32}(m=40, n=400, colptr=Array{Int32, (401,)}[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 583, 585, 587, 589, 591, 593, 595, 597, 599, 601, 603, 605, 607, 609, 611, 613, 615, 617, 619, 621, 623, 625, 627, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 739, 741, 743, 745, 747, 749, 751, 753, 755, 757, 759, 761, 763, 765, 767, 769, 771, 773, 775, 777, 779, 781, 783, 785, 787, 789, 791, 793, 795, 797, 799, 801], rowval=Array{Int32, (800,)}[1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40], nzval=Array{Float64, (800,)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1]), scratch=Array{Float64, (2, 20)}[-9.6208, -5.64077, -7.50578, -3.1027, 4.67897, 1.64442, 0.960858, 0.416538, -8.28347, -4.77454, 5.56938, 1.62464, 2.81237, 0.515815, 5.45085, 3.86912, 6.33354, 4.09872, 3.36702, 0.289416, -0.0105093, -0.0781911, 2.50619, -0.753268, 3.38372, 2.43935, -6.32297, -4.10723, 0.0442797, 2.34735, -1.22954, -1.76855, -1.32917, -1.25293, -9.48085, -7.3464, -2.9033, -6.03751, -4.75131, -3.38146]),
  MixedModels.ReMat{Float64, 2}(trm=StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 9}(sym=:H, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (10, 9)}[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], termnames=Array{Char, (9,)}[Char(0x62000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x66000000), Char(0x67000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000)], levels=Array{Char, (10,)}[Char(0x61000000), Char(0x62000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x66000000), Char(0x67000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (16,)}[0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00], keys=Array{Char, (16,)}[Char(0x8a3b62d0), Char(0x00007f07), Char(0x66000000), Char(0x00000000), Char(0x8a3e9680), Char(0x00007f07), Char(0x67000000), Char(0x61000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000), Char(0x62000000), Char(0x00000000)], vals=Array{Int64, (16,)}[1, 1, 6, 0, 0, 1, 7, 1, 3, 4, 5, 8, 9, 10, 2, 139670360646352], ndel=0, count=10, age=0x000000000000000a, idxfloor=1, maxprobe=7))), refs=Array{Int32, (400,)}[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], levels=Array{Char, (10,)}[Char(0x61000000), Char(0x62000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x66000000), Char(0x67000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000)], cnames=Array{String, (2,)}[
  "(Intercept)",
  "A: Y"], z=Array{Float64, (2, 400)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], wtz=Array{Float64, (2, 400)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], λ=LinearAlgebra.LowerTriangular{Float64, Array{Float64, 2}}(data=Array{Float64, (2, 2)}[1, 0, 0, 1]), inds=Array{Int64, (3,)}[1, 2, 4], adjA=SparseArrays.SparseMatrixCSC{Float64, Int32}(m=20, n=400, colptr=Array{Int32, (401,)}[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 583, 585, 587, 589, 591, 593, 595, 597, 599, 601, 603, 605, 607, 609, 611, 613, 615, 617, 619, 621, 623, 625, 627, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 739, 741, 743, 745, 747, 749, 751, 753, 755, 757, 759, 761, 763, 765, 767, 769, 771, 773, 775, 777, 779, 781, 783, 785, 787, 789, 791, 793, 795, 797, 799, 801], rowval=Array{Int32, (800,)}[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20], nzval=Array{Float64, (800,)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1]), scratch=Array{Float64, (2, 10)}[-3.10821, -3.89852, 2.1575, 4.03791, -3.61872, -3.2097, -9.05002, -1.43327, 0.102481, -3.23715, -2.13812, -5.71112, -6.04748, -1.68031, 6.05859, -1.90192, -13.2111, -7.53379, 12.5245, 3.56969]),
  MixedModels.FeMat{Float64, Array{Float64, 2}}(x=Array{Float64, (400, 2)}[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], wtx=Array{Float64, (400, 2)}[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], piv=Array{Int64, (2,)}[1, 2], rank=2, cnames=Array{String, (2,)}[
  "(Intercept)",
  "A: Y"]),
  MixedModels.FeMat{Float64, Array{Float64, 2}}(x=Array{Float64, (400, 1)}[-0.160767, -1.48275, -0.384419, -1.3541, 1.03842, -1.16268, -0.0202548, -0.747563, 1.32394, -1.26479, -1.1589, 0.228077, -1.26447, -0.0305313, -1.73483, 1.10785, -0.0966725, 3.3424, 1.70391, -1.17272, -2.05007, -0.536018, 0.920166, -2.08457, 2.85367, 0.298823, 0.30227, -0.823113, 1.65939, 0.893986, -0.491064, 0.628746, -0.446673, -0.816463, -0.522648, 0.455216, -0.643395, 0.13782, -0.0372687, 0.483869, -1.46539, 1.32186, -0.0376635, 0.951807, 0.595687, -0.166958, 1.43169, -0.811143, -0.427218, 0.263116, 0.537191, 0.376229, 0.381638, 0.231701, 1.96601, 1.25224, -0.584862, 1.29871, 0.607602, 0.417953, -0.0156447, 0.953986, 0.537903, 1.59606, -2.68816, 0.207514, -0.737157, -1.52248, -0.376472, 1.0603, 0.124493, 0.151912, -0.0137903, 0.415566, -0.89659, -1.33803, 0.0404713, -0.78972, -0.860152, -1.83271, -1.35263, -1.56942, 0.0819071, -0.890231, -0.989597, 2.7382, -2.21318, 0.275371, -0.363027, -0.377948, 0.255572, -0.0199111, -0.0102739, 1.90416, -0.982226, -0.724709, 0.876104, 0.577596, 0.739668, 0.57291, 0.566372, 0.0479212, 0.644455, -1.17632, 1.42828, -0.355559, 0.685665, -1.72952, -0.534498, 0.637149, 2.17758, -0.364661, -1.00121, 0.367557, -1.02091, -1.4776, 0.725126, -1.76422, -0.122198, 0.119518, -1.54856, -1.1012, -2.29664, 0.204291, -0.195299, -0.446781, -1.26199, 2.14003, -0.825896, -0.595367, 1.12235, -0.471528, 0.131953, -1.59619, 0.416828, 0.713689, -0.587769, -1.05023, 0.00980475, 1.76599, 0.0745339, 0.450325, 1.12436, 1.67582, -0.942351, -0.491541, 0.709525, -0.487695, -0.291505, -0.48815, -1.34943, 0.303068, 0.807472, -0.825592, -0.0444731, -0.176398, -1.00344, -0.165851, -1.66623, -0.789973, 0.507125, 1.01446, -2.12619, 0.874163, 0.971515, 0.977665, 0.0938577, -0.686041, -0.644779, 0.943301, 1.46686, -0.964762, -0.00447505, -1.23897, 0.15367, -1.02906, -0.0273253, 0.308131, 0.225627, 0.756117, -0.11236, 0.835155, -0.856331, -0.886937, -0.339958, 0.0355568, 1.22602, -0.612489, 1.68121, 0.706232, 1.85257, -0.75296, -1.12535, -0.910917, 0.551874, -1.46327, 0.00865985, -1.12411, -0.162599, -0.0184118, -0.197287, -0.86977, -1.55077, -0.379717, 0.0316421, -1.20812, 1.13736, 0.619865, -0.939715, 0.0667614, 0.00686165, 0.616259, 1.63133, -0.54383, 0.351478, 0.272913, 0.42533, -0.0899168, 0.586253, -0.870667, 0.907813, 0.677455, 0.708735, -1.92561, 0.401518, -0.179322, 0.250642, -0.850702, -2.48624, 0.426637, -1.03109, 1.21379, -0.844781, -0.928402, 0.926769, -0.52497, 2.14789, -0.222116, 1.10925, -1.01165, -0.0366401, -1.97484, 0.488016, -0.321355, 0.202876, 0.0247562, 1.17442, 1.05137, -1.34831, -0.47383, 0.474645, 0.692987, -1.95512, 0.403126, -1.08174, 0.587523, 0.224685, 0.113976, 0.392671, -0.0299585, -0.524412, -0.0033372, -0.54307, -0.311649, 1.33328, 0.512145, -1.60303, -0.8221, -2.56427, 1.25369, -1.55067, -0.878728, 0.221357, -0.0904412, 1.52859, -1.18804, 0.402625, -1.16083, 0.39691, 0.935227, 0.444264, 0.741051, 0.536484, -0.0791178, 0.806068, -0.0830614, -0.257476, -0.765558, 1.7128, -1.03352, 0.433021, 1.00674, 1.58481, 1.59005, 0.601257, -0.274755, 1.06977, -0.562692, -1.07332, -1.14198, -0.601941, -0.925925, 0.80767, 0.489058, 0.57053, -0.897764, 1.9586, 0.868494, 0.740601, -1.03758, -0.372745, 0.164664, 0.0811351, -0.817212, -1.12896, 0.594151, -0.0329436, -0.122773, 0.0808823, 0.385804, 0.639648, -0.912169, 0.307732, -1.38003, -0.397612, -0.133082, -1.43322, -0.831425, -1.28417, -1.05794, 0.273638, -0.161187, 0.795844, -0.746132, -0.179889, 1.81498, 0.128769, -0.519487, -0.87802, -0.900833, 0.404327, -0.66114, -0.447534, -0.595867, -0.681356, 2.24375, -2.5913, 1.97815, -0.549085, -1.20728, -0.0859498, -2.48846, 1.58944, 0.991977, -1.08182, 0.52219, 0.923906, -1.4336, -1.13062, -2.05621, -0.809792, -0.807982, 0.578457, -0.728412, 0.970844, 1.10448, 1.89311, 0.171628, -0.712558, -1.24433, 0.533498, 0.321742, 1.00532, 0.542418, 2.07117, 0.14846, 0.806795, 0.680226, 0.763414, 0.892606, 1.41907, -0.916613, 0.363102, 2.46675, -0.991078, 1.06574, -2.41697, -0.105771, 0.417803, 0.102356, 1.26532, 0.254081, 0.656156, 1.361, -0.446288, -2.74966, 0.565307, 0.60789, 1.02218, 0.403079], wtx=Array{Float64, (400, 1)}[-0.160767, -1.48275, -0.384419, -1.3541, 1.03842, -1.16268, -0.0202548, -0.747563, 1.32394, -1.26479, -1.1589, 0.228077, -1.26447, -0.0305313, -1.73483, 1.10785, -0.0966725, 3.3424, 1.70391, -1.17272, -2.05007, -0.536018, 0.920166, -2.08457, 2.85367, 0.298823, 0.30227, -0.823113, 1.65939, 0.893986, -0.491064, 0.628746, -0.446673, -0.816463, -0.522648, 0.455216, -0.643395, 0.13782, -0.0372687, 0.483869, -1.46539, 1.32186, -0.0376635, 0.951807, 0.595687, -0.166958, 1.43169, -0.811143, -0.427218, 0.263116, 0.537191, 0.376229, 0.381638, 0.231701, 1.96601, 1.25224, -0.584862, 1.29871, 0.607602, 0.417953, -0.0156447, 0.953986, 0.537903, 1.59606, -2.68816, 0.207514, -0.737157, -1.52248, -0.376472, 1.0603, 0.124493, 0.151912, -0.0137903, 0.415566, -0.89659, -1.33803, 0.0404713, -0.78972, -0.860152, -1.83271, -1.35263, -1.56942, 0.0819071, -0.890231, -0.989597, 2.7382, -2.21318, 0.275371, -0.363027, -0.377948, 0.255572, -0.0199111, -0.0102739, 1.90416, -0.982226, -0.724709, 0.876104, 0.577596, 0.739668, 0.57291, 0.566372, 0.0479212, 0.644455, -1.17632, 1.42828, -0.355559, 0.685665, -1.72952, -0.534498, 0.637149, 2.17758, -0.364661, -1.00121, 0.367557, -1.02091, -1.4776, 0.725126, -1.76422, -0.122198, 0.119518, -1.54856, -1.1012, -2.29664, 0.204291, -0.195299, -0.446781, -1.26199, 2.14003, -0.825896, -0.595367, 1.12235, -0.471528, 0.131953, -1.59619, 0.416828, 0.713689, -0.587769, -1.05023, 0.00980475, 1.76599, 0.0745339, 0.450325, 1.12436, 1.67582, -0.942351, -0.491541, 0.709525, -0.487695, -0.291505, -0.48815, -1.34943, 0.303068, 0.807472, -0.825592, -0.0444731, -0.176398, -1.00344, -0.165851, -1.66623, -0.789973, 0.507125, 1.01446, -2.12619, 0.874163, 0.971515, 0.977665, 0.0938577, -0.686041, -0.644779, 0.943301, 1.46686, -0.964762, -0.00447505, -1.23897, 0.15367, -1.02906, -0.0273253, 0.308131, 0.225627, 0.756117, -0.11236, 0.835155, -0.856331, -0.886937, -0.339958, 0.0355568, 1.22602, -0.612489, 1.68121, 0.706232, 1.85257, -0.75296, -1.12535, -0.910917, 0.551874, -1.46327, 0.00865985, -1.12411, -0.162599, -0.0184118, -0.197287, -0.86977, -1.55077, -0.379717, 0.0316421, -1.20812, 1.13736, 0.619865, -0.939715, 0.0667614, 0.00686165, 0.616259, 1.63133, -0.54383, 0.351478, 0.272913, 0.42533, -0.0899168, 0.586253, -0.870667, 0.907813, 0.677455, 0.708735, -1.92561, 0.401518, -0.179322, 0.250642, -0.850702, -2.48624, 0.426637, -1.03109, 1.21379, -0.844781, -0.928402, 0.926769, -0.52497, 2.14789, -0.222116, 1.10925, -1.01165, -0.0366401, -1.97484, 0.488016, -0.321355, 0.202876, 0.0247562, 1.17442, 1.05137, -1.34831, -0.47383, 0.474645, 0.692987, -1.95512, 0.403126, -1.08174, 0.587523, 0.224685, 0.113976, 0.392671, -0.0299585, -0.524412, -0.0033372, -0.54307, -0.311649, 1.33328, 0.512145, -1.60303, -0.8221, -2.56427, 1.25369, -1.55067, -0.878728, 0.221357, -0.0904412, 1.52859, -1.18804, 0.402625, -1.16083, 0.39691, 0.935227, 0.444264, 0.741051, 0.536484, -0.0791178, 0.806068, -0.0830614, -0.257476, -0.765558, 1.7128, -1.03352, 0.433021, 1.00674, 1.58481, 1.59005, 0.601257, -0.274755, 1.06977, -0.562692, -1.07332, -1.14198, -0.601941, -0.925925, 0.80767, 0.489058, 0.57053, -0.897764, 1.9586, 0.868494, 0.740601, -1.03758, -0.372745, 0.164664, 0.0811351, -0.817212, -1.12896, 0.594151, -0.0329436, -0.122773, 0.0808823, 0.385804, 0.639648, -0.912169, 0.307732, -1.38003, -0.397612, -0.133082, -1.43322, -0.831425, -1.28417, -1.05794, 0.273638, -0.161187, 0.795844, -0.746132, -0.179889, 1.81498, 0.128769, -0.519487, -0.87802, -0.900833, 0.404327, -0.66114, -0.447534, -0.595867, -0.681356, 2.24375, -2.5913, 1.97815, -0.549085, -1.20728, -0.0859498, -2.48846, 1.58944, 0.991977, -1.08182, 0.52219, 0.923906, -1.4336, -1.13062, -2.05621, -0.809792, -0.807982, 0.578457, -0.728412, 0.970844, 1.10448, 1.89311, 0.171628, -0.712558, -1.24433, 0.533498, 0.321742, 1.00532, 0.542418, 2.07117, 0.14846, 0.806795, 0.680226, 0.763414, 0.892606, 1.41907, -0.916613, 0.363102, 2.46675, -0.991078, 1.06574, -2.41697, -0.105771, 0.417803, 0.102356, 1.26532, 0.254081, 0.656156, 1.361, -0.446288, -2.74966, 0.565307, 0.60789, 1.02218, 0.403079], piv=Array{Int64, (1,)}[1], rank=1, cnames=Array{String, (1,)}[""])], sqrtwts=Array{Float64, (400,)}[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], A=BlockArrays.BlockArray{Float64, 2, Array{AbstractArray{Float64, 2}, 2}, Tuple{BlockArrays.BlockedUnitRange{Array{Int64, 1}}, BlockArrays.BlockedUnitRange{Array{Int64, 1}}}}(blocks=Array{AbstractArray{Float64, 2}, (4, 4)}[
  MixedModels.UniformBlockDiagonal{Float64}(data=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], facevec=Array{Base.SubArray{Float64, 2, Array{Float64, 3}, I, L} where L where I, (20,)}[
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 1), offset1=0, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 2), offset1=4, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 3), offset1=8, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 4), offset1=12, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 5), offset1=16, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 6), offset1=20, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 7), offset1=24, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 8), offset1=28, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 9), offset1=32, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 10), offset1=36, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 11), offset1=40, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 12), offset1=44, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 13), offset1=48, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 14), offset1=52, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 15), offset1=56, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 16), offset1=60, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 17), offset1=64, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 18), offset1=68, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 19), offset1=72, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 20), offset1=76, stride1=1)]),
  Array{Float64, (20, 40)}[2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
  Array{Float64, (2, 40)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10],
  Array{Float64, (1, 40)}[-9.6208, -5.64077, -7.50578, -3.1027, 4.67897, 1.64442, 0.960858, 0.416538, -8.28347, -4.77454, 5.56938, 1.62464, 2.81237, 0.515815, 5.45085, 3.86912, 6.33354, 4.09872, 3.36702, 0.289416, -0.0105093, -0.0781911, 2.50619, -0.753268, 3.38372, 2.43935, -6.32297, -4.10723, 0.0442797, 2.34735, -1.22954, -1.76855, -1.32917, -1.25293, -9.48085, -7.3464, -2.9033, -6.03751, -4.75131, -3.38146],
  #<null>,
  MixedModels.UniformBlockDiagonal{Float64}(data=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], facevec=Array{Base.SubArray{Float64, 2, Array{Float64, 3}, I, L} where L where I, (10,)}[
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 1), offset1=0, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 2), offset1=4, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 3), offset1=8, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 4), offset1=12, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 5), offset1=16, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 6), offset1=20, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 7), offset1=24, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 8), offset1=28, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 9), offset1=32, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 10), offset1=36, stride1=1)]),
  Array{Float64, (2, 20)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20],
  Array{Float64, (1, 20)}[-3.10821, -3.89852, 2.1575, 4.03791, -3.61872, -3.2097, -9.05002, -1.43327, 0.102481, -3.23715, -2.13812, -5.71112, -6.04748, -1.68031, 6.05859, -1.90192, -13.2111, -7.53379, 12.5245, 3.56969],
  #<null>,
  #<null>,
  Array{Float64, (2, 2)}[400, 200, 200, 200],
  Array{Float64, (1, 2)}[-16.3305, -20.9982],
  #<null>,
  #<null>,
  #<null>,
  Array{Float64, (1, 1)}[427.28]], axes=(BlockArrays.BlockedUnitRange{Array{Int64, 1}}(first=1, lasts=Array{Int64, (4,)}[40, 60, 62, 63]), BlockArrays.BlockedUnitRange{Array{Int64, 1}}(first=1, lasts=Array{Int64, (4,)}[40, 60, 62, 63]))), L=BlockArrays.BlockArray{Float64, 2, Array{AbstractArray{Float64, 2}, 2}, Tuple{BlockArrays.BlockedUnitRange{Array{Int64, 1}}, BlockArrays.BlockedUnitRange{Array{Int64, 1}}}}(blocks=Array{AbstractArray{Float64, 2}, (4, 4)}[
  MixedModels.UniformBlockDiagonal{Float64}(data=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], facevec=Array{Base.SubArray{Float64, 2, Array{Float64, 3}, I, L} where L where I, (20,)}[
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 1), offset1=0, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 2), offset1=4, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 3), offset1=8, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 4), offset1=12, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 5), offset1=16, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 6), offset1=20, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 7), offset1=24, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 8), offset1=28, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 9), offset1=32, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 10), offset1=36, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 11), offset1=40, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 12), offset1=44, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 13), offset1=48, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 14), offset1=52, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 15), offset1=56, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 16), offset1=60, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 17), offset1=64, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 18), offset1=68, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 19), offset1=72, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 20), offset1=76, stride1=1)]),
  Array{Float64, (20, 40)}[0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724],
  Array{Float64, (2, 40)}[4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724],
  Array{Float64, (1, 40)}[-2.09943, -0.424179, -1.6379, 0.188771, 1.02103, -0.233685, 0.209676, -0.016421, -1.8076, -0.332328, 1.21534, -0.411369, 0.61371, -0.329678, 1.18947, 0.509878, 1.38209, 0.433512, 0.734745, -0.526072, -0.00229331, -0.0293026, 0.546896, -0.779419, 0.738388, 0.331538, -1.37978, -0.438935, 0.00966262, 0.931391, -0.268307, -0.473675, -0.290049, -0.248232, -2.06889, -1.13376, -0.633552, -1.86377, -1.03682, -0.447999],
  #<null>,
  Array{Float64, (20, 20)}[6.0978, 2.95439, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, 20, 3.23103, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, 0, 0, 6.06545, 2.93469, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, 0, 0, 20, 3.22133, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, 0, 0, 0, 0, 6.02539, 2.90997, -0.779159, -0.409325, -0.779159, -0.409325, -0.779159, -0.409325, -0.779159, -0.409325, -0.779159, -0.409325, -0.779159, -0.409325, -0.779159, -0.409325, 0, 0, 0, 0, 20, 3.20994, -0.0619988, -0.323145, -0.0619988, -0.323145, -0.0619988, -0.323145, -0.0619988, -0.323145, -0.0619988, -0.323145, -0.0619988, -0.323145, -0.0619988, -0.323145, 0, 0, 0, 0, 0, 0, 5.97447, 2.87803, -0.888056, -0.469548, -0.888056, -0.469548, -0.888056, -0.469548, -0.888056, -0.469548, -0.888056, -0.469548, -0.888056, -0.469548, 0, 0, 0, 0, 0, 0, 20, 3.19634, -0.0780432, -0.359472, -0.0780432, -0.359472, -0.0780432, -0.359472, -0.0780432, -0.359472, -0.0780432, -0.359472, -0.0780432, -0.359472, 0, 0, 0, 0, 0, 0, 0, 0, 5.90759, 2.83528, -1.03264, -0.550198, -1.03264, -0.550198, -1.03264, -0.550198, -1.03264, -0.550198, -1.03264, -0.550198, 0, 0, 0, 0, 0, 0, 0, 0, 20, 3.1798, -0.101429, -0.405716, -0.101429, -0.405716, -0.101429, -0.405716, -0.101429, -0.405716, -0.101429, -0.405716, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.81575, 2.77528, -1.23407, -0.663654, -1.23407, -0.663654, -1.23407, -0.663654, -1.23407, -0.663654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 3.15918, -0.137619, -0.467069, -0.137619, -0.467069, -0.137619, -0.467069, -0.137619, -0.467069, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.68165, 2.68533, -1.53457, -0.834779, -1.53457, -0.834779, -1.53457, -0.834779, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 3.13258, -0.198588, -0.55364, -0.198588, -0.55364, -0.198588, -0.55364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.46688, 2.53638, -2.03283, -1.12201, -2.03283, -1.12201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 3.09635, -0.315808, -0.689036, -0.315808, -0.689036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.06504, 2.24433, -3.02967, -1.7043, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 3.04137, -0.602613, -0.949572, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.01405, 1.40306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2.91754],
  Array{Float64, (2, 20)}[0.300446, 0.0250372, -0.22747, 0.496876, 0.331481, 0.0311898, -0.243258, 0.537004, 0.369835, 0.03949, -0.261146, 0.584291, 0.418508, 0.05104, -0.281428, 0.6409, 0.482441, 0.0677571, -0.304287, 0.710003, 0.570414, 0.0932407, -0.329451, 0.79652, 0.699793, 0.134987, -0.355052, 0.908691, 0.910821, 0.21119, -0.373228, 1.06226, 1.32537, 0.378937, -0.346959, 1.29653, 2.62064, 0.958806, 0.0588808, 1.82531],
  Array{Float64, (1, 20)}[-0.238117, -0.404567, 0.60139, 1.23377, -0.273637, -0.040977, -1.22117, 1.32587, 0.148233, -0.502411, -0.217132, -1.00372, -0.9818, 0.728097, 0.944922, -1.09497, -2.47359, -0.25262, 1.38524, -0.553744],
  #<null>,
  #<null>,
  Array{Float64, (2, 2)}[2.54128, 0.0794151, 200, 2.5],
  Array{Float64, (1, 2)}[0.049118, -0.320823],
  #<null>,
  #<null>,
  #<null>,
  Array{Float64, (1, 1)}[19.344]], axes=(BlockArrays.BlockedUnitRange{Array{Int64, 1}}(first=1, lasts=Array{Int64, (4,)}[40, 60, 62, 63]), BlockArrays.BlockedUnitRange{Array{Int64, 1}}(first=1, lasts=Array{Int64, (4,)}[40, 60, 62, 63]))), optsum=MixedModels.OptSummary{Float64}(initial=Array{Float64, (6,)}[1, 0, 1, 1, 0, 1], lowerbd=Array{Float64, (6,)}[0, -inf, 0, 0, -inf, 0], finitial=1263.2, ftol_rel=1e-12, ftol_abs=1e-08, xtol_rel=0, xtol_abs=Array{Float64, (6,)}[1e-10, 1e-10, 1e-10, 1e-10, 1e-10, 1e-10], initial_step=Array{Float64, (6,)}[0.75, 1, 0.75, 0.75, 1, 0.75], maxfeval=-1, final=Array{Float64, (6,)}[1.75, 0, 1, 1, 0, 1], fmin=inf, feval=-1, optimizer=:LN_BOBYQA, returnvalue=:FAILURE, nAGQ=1, REML=false)), optsum=MixedModels.OptSummary{Float64}(initial=Array{Float64, (6,)}[1, 0, 1, 1, 0, 1], lowerbd=Array{Float64, (6,)}[0, -inf, 0, 0, -inf, 0], finitial=1263.2, ftol_rel=1e-12, ftol_abs=1e-08, xtol_rel=0, xtol_abs=Array{Float64, (6,)}[1e-10, 1e-10, 1e-10, 1e-10, 1e-10, 1e-10], initial_step=Array{Float64, (6,)}[0.75, 1, 0.75, 0.75, 1, 0.75], maxfeval=-1, final=Array{Float64, (6,)}[1.75, 0, 1, 1, 0, 1], fmin=inf, feval=-1, optimizer=:LN_BOBYQA, returnvalue=:FAILURE, nAGQ=1, REML=false), feval=Core.Box(contents=1)), o=<circular reference @-2>)]))
jl_type_error_rt at /workspace/srcdir/src/rtutils.c:118
jl_f_apply_type at /workspace/srcdir/src/builtins.c:970
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/src/julia.h:1692 [inlined]
do_apply at /workspace/srcdir/src/builtins.c:650
argtypes_to_type at ./compiler/typeutils.jl:46 [inlined]
abstract_call_known at ./compiler/abstractinterpretation.jl:886
abstract_call at ./compiler/abstractinterpretation.jl:909
abstract_call at ./compiler/abstractinterpretation.jl:894
abstract_eval at ./compiler/abstractinterpretation.jl:988
typeinf_local at ./compiler/abstractinterpretation.jl:1242
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1298
typeinf at ./compiler/typeinfer.jl:12
typeinf_ext at ./compiler/typeinfer.jl:570
typeinf_ext at ./compiler/typeinfer.jl:601
jfptr_typeinf_ext_20212.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/src/julia.h:1692 [inlined]
jl_type_infer at /workspace/srcdir/src/gf.c:300
jl_generate_fptr at /workspace/srcdir/src/jitlayers.cpp:265
jl_compile_method_internal at /workspace/srcdir/src/gf.c:1968
jl_compile_method_internal at /workspace/srcdir/src/gf.c:1923 [inlined]
_jl_invoke at /workspace/srcdir/src/gf.c:2228 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
print_to_string at ./strings/io.jl:135
string at ./strings/io.jl:174 [inlined]
showerror at ./errorshow.jl:154
#685 at ./errorshow.jl:171
unknown function (ip: 0x7f075e4be961)
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
#with_output_color#741 at ./util.jl:72
unknown function (ip: 0x7f075e4bd022)
with_output_color at ./util.jl:70 [inlined]
#showerror#684 at ./errorshow.jl:170
showerror##kw at ./errorshow.jl:169
unknown function (ip: 0x7f075e4bcd48)
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
show_exception_stack at ./errorshow.jl:818
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
#sprint#352 at ./strings/io.jl:105
sprint at ./strings/io.jl:101
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
Error at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:158
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/src/julia.h:1692 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:117
eval_value at /workspace/srcdir/src/interpreter.c:206
eval_stmt_value at /workspace/srcdir/src/interpreter.c:157 [inlined]
eval_body at /workspace/srcdir/src/interpreter.c:566
eval_body at /workspace/srcdir/src/interpreter.c:492
jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:660
macro expansion at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1120 [inlined]
top-level scope at /home/pkgeval/.julia/packages/MixedModels/ALNok/test/linalg.jl:35
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:827
jl_parse_eval_all at /workspace/srcdir/src/ast.c:913
jl_load_rewrite at /workspace/srcdir/src/toplevel.c:898
include at ./client.jl:457
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/src/julia.h:1692 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:117
eval_value at /workspace/srcdir/src/interpreter.c:206
eval_stmt_value at /workspace/srcdir/src/interpreter.c:157 [inlined]
eval_body at /workspace/srcdir/src/interpreter.c:566
jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:660
top-level scope at /home/pkgeval/.julia/packages/MixedModels/ALNok/test/runtests.jl:7
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:827
jl_parse_eval_all at /workspace/srcdir/src/ast.c:913
jl_load_rewrite at /workspace/srcdir/src/toplevel.c:898
include at ./client.jl:457
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/src/julia.h:1692 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:117
eval_value at /workspace/srcdir/src/interpreter.c:206
eval_stmt_value at /workspace/srcdir/src/interpreter.c:157 [inlined]
eval_body at /workspace/srcdir/src/interpreter.c:566
jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:660
top-level scope at none:6
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:827
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:777
jl_toplevel_eval_in at /workspace/srcdir/src/toplevel.c:867
eval at ./boot.jl:331
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
exec_options at ./client.jl:272
_start at ./client.jl:506
jfptr__start_57981.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/ui/../src/julia.h:1692 [inlined]
true_main at /workspace/srcdir/ui/repl.c:96
main at /workspace/srcdir/ui/repl.c:217
__libc_start_main at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)
unknown function (ip: 0x4015e4)
Internal error: encountered unexpected error in runtime:
TypeError(func=:Tuple, context="parameter", expected=Type, got=NLopt.Opt(opt=0x0000000008aed590, cb=Array{NLopt.Callback_Data, (1,)}[NLopt.Callback_Data(f=getfield(MixedModels, Symbol("#obj#41")){Bool, MixedModels.LinearMixedModel{Float64}, MixedModels.OptSummary{Float64}}(verbose=false, m=MixedModels.LinearMixedModel{Float64}(formula=StatsModels.FormulaTerm{StatsModels.ContinuousTerm{Float64}, Tuple{StatsModels.MatrixTerm{Tuple{StatsModels.InterceptTerm{true}, StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}}}, MixedModels.RandomEffectsTerm, MixedModels.RandomEffectsTerm}}(lhs=StatsModels.ContinuousTerm{Float64}(sym=:Y, mean=-0.0408263, var=1.06921, min=-2.74966, max=3.3424), rhs=(StatsModels.MatrixTerm{Tuple{StatsModels.InterceptTerm{true}, StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}}}(terms=(StatsModels.InterceptTerm{true}(), StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}(sym=:A, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (2, 1)}[0, 1], termnames=Array{Char, (1,)}[Char(0x59000000)], levels=Array{Char, (2,)}[Char(0x4e000000), Char(0x59000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (16,)}[0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00], keys=Array{Char, (16,)}[Char(0x8a3b62d0), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x59000000), Char(0x8b319250), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x00007f07), Char(0x8a4417a0), Char(0x00007f07), Char(0x4e000000), Char(0x00000000)], vals=Array{Int64, (16,)}[139669475227536, 139669475228752, 139669475290032, 139670361216560, 139669439890352, 2, 139669439890624, 139669439890848, 139669475280944, 139669475280976, 139669439893888, 0, 0, 0, 1, 139669535486688], ndel=0, count=2, age=0x0000000000000002, idxfloor=1, maxprobe=0))))), MixedModels.RandomEffectsTerm(lhs=StatsModels.MatrixTerm{Tuple{StatsModels.InterceptTerm{true}, StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}}}(terms=(StatsModels.InterceptTerm{true}(), StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}(sym=:A, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (2, 1)}[0, 1], termnames=Array{Char, (1,)}[Char(0x59000000)], levels=Array{Char, (2,)}[Char(0x4e000000), Char(0x59000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (16,)}[0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00], keys=Array{Char, (16,)}[Char(0x8a3b62d0), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x59000000), Char(0x8b319250), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x00007f07), Char(0x8a4417a0), Char(0x00007f07), Char(0x4e000000), Char(0x00000000)], vals=Array{Int64, (16,)}[139669475227536, 139669475228752, 139669475290032, 139670361216560, 139669439890352, 2, 139669439890624, 139669439890848, 139669475280944, 139669475280976, 139669439893888, 0, 0, 0, 1, 139669535486688], ndel=0, count=2, age=0x0000000000000002, idxfloor=1, maxprobe=0))))), rhs=StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 19}(sym=:G, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (20, 19)}[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], termnames=Array{Char, (19,)}[Char(0x42000000), Char(0x43000000), Char(0x44000000), Char(0x45000000), Char(0x46000000), Char(0x47000000), Char(0x48000000), Char(0x49000000), Char(0x4a000000), Char(0x4b000000), Char(0x4c000000), Char(0x4d000000), Char(0x4e000000), Char(0x4f000000), Char(0x50000000), Char(0x51000000), Char(0x52000000), Char(0x53000000), Char(0x54000000)], levels=Array{Char, (20,)}[Char(0x41000000), Char(0x42000000), Char(0x43000000), Char(0x44000000), Char(0x45000000), Char(0x46000000), Char(0x47000000), Char(0x48000000), Char(0x49000000), Char(0x4a000000), Char(0x4b000000), Char(0x4c000000), Char(0x4d000000), Char(0x4e000000), Char(0x4f000000), Char(0x50000000), Char(0x51000000), Char(0x52000000), Char(0x53000000), Char(0x54000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (64,)}[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], keys=Array{Char, (64,)}[Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x45000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x43000000), Char(0x42000000), Char(0x00000000), Char(0x44000000), Char(0x41000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x52000000), Char(0x47000000), Char(0x00000000), Char(0x46000000), Char(0x4e000000), Char(0x4d000000), Char(0x4b000000), Char(0x4a000000), Char(0x4f000000), Char(0x49000000), Char(0x50000000), Char(0x48000000), Char(0x51000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x53000000), Char(0x54000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x4c000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000)], vals=Array{Int64, (64,)}[12, 16, 19, 22, 25, 26, 43, 45, 5, 50, 62, 68, 71, 72, 74, 3, 2, 86, 4, 1, 98, 101, 102, 104, 110, 113, 118, 18, 7, 125, 6, 14, 13, 11, 10, 15, 9, 16, 8, 17, 150, 151, 154, 156, 157, 19, 20, 166, 167, 169, 170, 171, 12, 174, 177, 178, 180, 183, 186, 188, 191, 197, 198, 0], ndel=0, count=20, age=0x0000000000000015, idxfloor=1, maxprobe=9)))), MixedModels.RandomEffectsTerm(lhs=StatsModels.MatrixTerm{Tuple{StatsModels.InterceptTerm{true}, StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}}}(terms=(StatsModels.InterceptTerm{true}(), StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}(sym=:A, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (2, 1)}[0, 1], termnames=Array{Char, (1,)}[Char(0x59000000)], levels=Array{Char, (2,)}[Char(0x4e000000), Char(0x59000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (16,)}[0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00], keys=Array{Char, (16,)}[Char(0x8a3b62d0), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x59000000), Char(0x8b319250), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x00007f07), Char(0x8a4417a0), Char(0x00007f07), Char(0x4e000000), Char(0x00000000)], vals=Array{Int64, (16,)}[139669475227536, 139669475228752, 139669475290032, 139670361216560, 139669439890352, 2, 139669439890624, 139669439890848, 139669475280944, 139669475280976, 139669439893888, 0, 0, 0, 1, 139669535486688], ndel=0, count=2, age=0x0000000000000002, idxfloor=1, maxprobe=0))))), rhs=StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 9}(sym=:H, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (10, 9)}[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], termnames=Array{Char, (9,)}[Char(0x62000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x66000000), Char(0x67000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000)], levels=Array{Char, (10,)}[Char(0x61000000), Char(0x62000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x66000000), Char(0x67000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (16,)}[0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00], keys=Array{Char, (16,)}[Char(0x8a3b62d0), Char(0x00007f07), Char(0x66000000), Char(0x00000000), Char(0x8a3e9680), Char(0x00007f07), Char(0x67000000), Char(0x61000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000), Char(0x62000000), Char(0x00000000)], vals=Array{Int64, (16,)}[1, 1, 6, 0, 0, 1, 7, 1, 3, 4, 5, 8, 9, 10, 2, 139670360646352], ndel=0, count=10, age=0x000000000000000a, idxfloor=1, maxprobe=7)))))), allterms=Array{Union{MixedModels.FeMat{Float64, S} where S<:(AbstractArray{T, 2} where T), MixedModels.ReMat{Float64, S} where S}, (4,)}[
  MixedModels.ReMat{Float64, 2}(trm=StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 19}(sym=:G, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (20, 19)}[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], termnames=Array{Char, (19,)}[Char(0x42000000), Char(0x43000000), Char(0x44000000), Char(0x45000000), Char(0x46000000), Char(0x47000000), Char(0x48000000), Char(0x49000000), Char(0x4a000000), Char(0x4b000000), Char(0x4c000000), Char(0x4d000000), Char(0x4e000000), Char(0x4f000000), Char(0x50000000), Char(0x51000000), Char(0x52000000), Char(0x53000000), Char(0x54000000)], levels=Array{Char, (20,)}[Char(0x41000000), Char(0x42000000), Char(0x43000000), Char(0x44000000), Char(0x45000000), Char(0x46000000), Char(0x47000000), Char(0x48000000), Char(0x49000000), Char(0x4a000000), Char(0x4b000000), Char(0x4c000000), Char(0x4d000000), Char(0x4e000000), Char(0x4f000000), Char(0x50000000), Char(0x51000000), Char(0x52000000), Char(0x53000000), Char(0x54000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (64,)}[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], keys=Array{Char, (64,)}[Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x45000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x43000000), Char(0x42000000), Char(0x00000000), Char(0x44000000), Char(0x41000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x52000000), Char(0x47000000), Char(0x00000000), Char(0x46000000), Char(0x4e000000), Char(0x4d000000), Char(0x4b000000), Char(0x4a000000), Char(0x4f000000), Char(0x49000000), Char(0x50000000), Char(0x48000000), Char(0x51000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x53000000), Char(0x54000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x4c000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000)], vals=Array{Int64, (64,)}[12, 16, 19, 22, 25, 26, 43, 45, 5, 50, 62, 68, 71, 72, 74, 3, 2, 86, 4, 1, 98, 101, 102, 104, 110, 113, 118, 18, 7, 125, 6, 14, 13, 11, 10, 15, 9, 16, 8, 17, 150, 151, 154, 156, 157, 19, 20, 166, 167, 169, 170, 171, 12, 174, 177, 178, 180, 183, 186, 188, 191, 197, 198, 0], ndel=0, count=20, age=0x0000000000000015, idxfloor=1, maxprobe=9))), refs=Array{Int32, (400,)}[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20], levels=Array{Char, (20,)}[Char(0x41000000), Char(0x42000000), Char(0x43000000), Char(0x44000000), Char(0x45000000), Char(0x46000000), Char(0x47000000), Char(0x48000000), Char(0x49000000), Char(0x4a000000), Char(0x4b000000), Char(0x4c000000), Char(0x4d000000), Char(0x4e000000), Char(0x4f000000), Char(0x50000000), Char(0x51000000), Char(0x52000000), Char(0x53000000), Char(0x54000000)], cnames=Array{String, (2,)}[
  "(Intercept)",
  "A: Y"], z=Array{Float64, (2, 400)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], wtz=Array{Float64, (2, 400)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], λ=LinearAlgebra.LowerTriangular{Float64, Array{Float64, 2}}(data=Array{Float64, (2, 2)}[1, 0, 0, 1]), inds=Array{Int64, (3,)}[1, 2, 4], adjA=SparseArrays.SparseMatrixCSC{Float64, Int32}(m=40, n=400, colptr=Array{Int32, (401,)}[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 583, 585, 587, 589, 591, 593, 595, 597, 599, 601, 603, 605, 607, 609, 611, 613, 615, 617, 619, 621, 623, 625, 627, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 739, 741, 743, 745, 747, 749, 751, 753, 755, 757, 759, 761, 763, 765, 767, 769, 771, 773, 775, 777, 779, 781, 783, 785, 787, 789, 791, 793, 795, 797, 799, 801], rowval=Array{Int32, (800,)}[1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40], nzval=Array{Float64, (800,)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1]), scratch=Array{Float64, (2, 20)}[-9.6208, -5.64077, -7.50578, -3.1027, 4.67897, 1.64442, 0.960858, 0.416538, -8.28347, -4.77454, 5.56938, 1.62464, 2.81237, 0.515815, 5.45085, 3.86912, 6.33354, 4.09872, 3.36702, 0.289416, -0.0105093, -0.0781911, 2.50619, -0.753268, 3.38372, 2.43935, -6.32297, -4.10723, 0.0442797, 2.34735, -1.22954, -1.76855, -1.32917, -1.25293, -9.48085, -7.3464, -2.9033, -6.03751, -4.75131, -3.38146]),
  MixedModels.ReMat{Float64, 2}(trm=StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 9}(sym=:H, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (10, 9)}[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], termnames=Array{Char, (9,)}[Char(0x62000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x66000000), Char(0x67000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000)], levels=Array{Char, (10,)}[Char(0x61000000), Char(0x62000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x66000000), Char(0x67000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (16,)}[0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00], keys=Array{Char, (16,)}[Char(0x8a3b62d0), Char(0x00007f07), Char(0x66000000), Char(0x00000000), Char(0x8a3e9680), Char(0x00007f07), Char(0x67000000), Char(0x61000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000), Char(0x62000000), Char(0x00000000)], vals=Array{Int64, (16,)}[1, 1, 6, 0, 0, 1, 7, 1, 3, 4, 5, 8, 9, 10, 2, 139670360646352], ndel=0, count=10, age=0x000000000000000a, idxfloor=1, maxprobe=7))), refs=Array{Int32, (400,)}[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], levels=Array{Char, (10,)}[Char(0x61000000), Char(0x62000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x66000000), Char(0x67000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000)], cnames=Array{String, (2,)}[
  "(Intercept)",
  "A: Y"], z=Array{Float64, (2, 400)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], wtz=Array{Float64, (2, 400)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], λ=LinearAlgebra.LowerTriangular{Float64, Array{Float64, 2}}(data=Array{Float64, (2, 2)}[1, 0, 0, 1]), inds=Array{Int64, (3,)}[1, 2, 4], adjA=SparseArrays.SparseMatrixCSC{Float64, Int32}(m=20, n=400, colptr=Array{Int32, (401,)}[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 583, 585, 587, 589, 591, 593, 595, 597, 599, 601, 603, 605, 607, 609, 611, 613, 615, 617, 619, 621, 623, 625, 627, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 739, 741, 743, 745, 747, 749, 751, 753, 755, 757, 759, 761, 763, 765, 767, 769, 771, 773, 775, 777, 779, 781, 783, 785, 787, 789, 791, 793, 795, 797, 799, 801], rowval=Array{Int32, (800,)}[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20], nzval=Array{Float64, (800,)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1]), scratch=Array{Float64, (2, 10)}[-3.10821, -3.89852, 2.1575, 4.03791, -3.61872, -3.2097, -9.05002, -1.43327, 0.102481, -3.23715, -2.13812, -5.71112, -6.04748, -1.68031, 6.05859, -1.90192, -13.2111, -7.53379, 12.5245, 3.56969]),
  MixedModels.FeMat{Float64, Array{Float64, 2}}(x=Array{Float64, (400, 2)}[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], wtx=Array{Float64, (400, 2)}[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], piv=Array{Int64, (2,)}[1, 2], rank=2, cnames=Array{String, (2,)}[
  "(Intercept)",
  "A: Y"]),
  MixedModels.FeMat{Float64, Array{Float64, 2}}(x=Array{Float64, (400, 1)}[-0.160767, -1.48275, -0.384419, -1.3541, 1.03842, -1.16268, -0.0202548, -0.747563, 1.32394, -1.26479, -1.1589, 0.228077, -1.26447, -0.0305313, -1.73483, 1.10785, -0.0966725, 3.3424, 1.70391, -1.17272, -2.05007, -0.536018, 0.920166, -2.08457, 2.85367, 0.298823, 0.30227, -0.823113, 1.65939, 0.893986, -0.491064, 0.628746, -0.446673, -0.816463, -0.522648, 0.455216, -0.643395, 0.13782, -0.0372687, 0.483869, -1.46539, 1.32186, -0.0376635, 0.951807, 0.595687, -0.166958, 1.43169, -0.811143, -0.427218, 0.263116, 0.537191, 0.376229, 0.381638, 0.231701, 1.96601, 1.25224, -0.584862, 1.29871, 0.607602, 0.417953, -0.0156447, 0.953986, 0.537903, 1.59606, -2.68816, 0.207514, -0.737157, -1.52248, -0.376472, 1.0603, 0.124493, 0.151912, -0.0137903, 0.415566, -0.89659, -1.33803, 0.0404713, -0.78972, -0.860152, -1.83271, -1.35263, -1.56942, 0.0819071, -0.890231, -0.989597, 2.7382, -2.21318, 0.275371, -0.363027, -0.377948, 0.255572, -0.0199111, -0.0102739, 1.90416, -0.982226, -0.724709, 0.876104, 0.577596, 0.739668, 0.57291, 0.566372, 0.0479212, 0.644455, -1.17632, 1.42828, -0.355559, 0.685665, -1.72952, -0.534498, 0.637149, 2.17758, -0.364661, -1.00121, 0.367557, -1.02091, -1.4776, 0.725126, -1.76422, -0.122198, 0.119518, -1.54856, -1.1012, -2.29664, 0.204291, -0.195299, -0.446781, -1.26199, 2.14003, -0.825896, -0.595367, 1.12235, -0.471528, 0.131953, -1.59619, 0.416828, 0.713689, -0.587769, -1.05023, 0.00980475, 1.76599, 0.0745339, 0.450325, 1.12436, 1.67582, -0.942351, -0.491541, 0.709525, -0.487695, -0.291505, -0.48815, -1.34943, 0.303068, 0.807472, -0.825592, -0.0444731, -0.176398, -1.00344, -0.165851, -1.66623, -0.789973, 0.507125, 1.01446, -2.12619, 0.874163, 0.971515, 0.977665, 0.0938577, -0.686041, -0.644779, 0.943301, 1.46686, -0.964762, -0.00447505, -1.23897, 0.15367, -1.02906, -0.0273253, 0.308131, 0.225627, 0.756117, -0.11236, 0.835155, -0.856331, -0.886937, -0.339958, 0.0355568, 1.22602, -0.612489, 1.68121, 0.706232, 1.85257, -0.75296, -1.12535, -0.910917, 0.551874, -1.46327, 0.00865985, -1.12411, -0.162599, -0.0184118, -0.197287, -0.86977, -1.55077, -0.379717, 0.0316421, -1.20812, 1.13736, 0.619865, -0.939715, 0.0667614, 0.00686165, 0.616259, 1.63133, -0.54383, 0.351478, 0.272913, 0.42533, -0.0899168, 0.586253, -0.870667, 0.907813, 0.677455, 0.708735, -1.92561, 0.401518, -0.179322, 0.250642, -0.850702, -2.48624, 0.426637, -1.03109, 1.21379, -0.844781, -0.928402, 0.926769, -0.52497, 2.14789, -0.222116, 1.10925, -1.01165, -0.0366401, -1.97484, 0.488016, -0.321355, 0.202876, 0.0247562, 1.17442, 1.05137, -1.34831, -0.47383, 0.474645, 0.692987, -1.95512, 0.403126, -1.08174, 0.587523, 0.224685, 0.113976, 0.392671, -0.0299585, -0.524412, -0.0033372, -0.54307, -0.311649, 1.33328, 0.512145, -1.60303, -0.8221, -2.56427, 1.25369, -1.55067, -0.878728, 0.221357, -0.0904412, 1.52859, -1.18804, 0.402625, -1.16083, 0.39691, 0.935227, 0.444264, 0.741051, 0.536484, -0.0791178, 0.806068, -0.0830614, -0.257476, -0.765558, 1.7128, -1.03352, 0.433021, 1.00674, 1.58481, 1.59005, 0.601257, -0.274755, 1.06977, -0.562692, -1.07332, -1.14198, -0.601941, -0.925925, 0.80767, 0.489058, 0.57053, -0.897764, 1.9586, 0.868494, 0.740601, -1.03758, -0.372745, 0.164664, 0.0811351, -0.817212, -1.12896, 0.594151, -0.0329436, -0.122773, 0.0808823, 0.385804, 0.639648, -0.912169, 0.307732, -1.38003, -0.397612, -0.133082, -1.43322, -0.831425, -1.28417, -1.05794, 0.273638, -0.161187, 0.795844, -0.746132, -0.179889, 1.81498, 0.128769, -0.519487, -0.87802, -0.900833, 0.404327, -0.66114, -0.447534, -0.595867, -0.681356, 2.24375, -2.5913, 1.97815, -0.549085, -1.20728, -0.0859498, -2.48846, 1.58944, 0.991977, -1.08182, 0.52219, 0.923906, -1.4336, -1.13062, -2.05621, -0.809792, -0.807982, 0.578457, -0.728412, 0.970844, 1.10448, 1.89311, 0.171628, -0.712558, -1.24433, 0.533498, 0.321742, 1.00532, 0.542418, 2.07117, 0.14846, 0.806795, 0.680226, 0.763414, 0.892606, 1.41907, -0.916613, 0.363102, 2.46675, -0.991078, 1.06574, -2.41697, -0.105771, 0.417803, 0.102356, 1.26532, 0.254081, 0.656156, 1.361, -0.446288, -2.74966, 0.565307, 0.60789, 1.02218, 0.403079], wtx=Array{Float64, (400, 1)}[-0.160767, -1.48275, -0.384419, -1.3541, 1.03842, -1.16268, -0.0202548, -0.747563, 1.32394, -1.26479, -1.1589, 0.228077, -1.26447, -0.0305313, -1.73483, 1.10785, -0.0966725, 3.3424, 1.70391, -1.17272, -2.05007, -0.536018, 0.920166, -2.08457, 2.85367, 0.298823, 0.30227, -0.823113, 1.65939, 0.893986, -0.491064, 0.628746, -0.446673, -0.816463, -0.522648, 0.455216, -0.643395, 0.13782, -0.0372687, 0.483869, -1.46539, 1.32186, -0.0376635, 0.951807, 0.595687, -0.166958, 1.43169, -0.811143, -0.427218, 0.263116, 0.537191, 0.376229, 0.381638, 0.231701, 1.96601, 1.25224, -0.584862, 1.29871, 0.607602, 0.417953, -0.0156447, 0.953986, 0.537903, 1.59606, -2.68816, 0.207514, -0.737157, -1.52248, -0.376472, 1.0603, 0.124493, 0.151912, -0.0137903, 0.415566, -0.89659, -1.33803, 0.0404713, -0.78972, -0.860152, -1.83271, -1.35263, -1.56942, 0.0819071, -0.890231, -0.989597, 2.7382, -2.21318, 0.275371, -0.363027, -0.377948, 0.255572, -0.0199111, -0.0102739, 1.90416, -0.982226, -0.724709, 0.876104, 0.577596, 0.739668, 0.57291, 0.566372, 0.0479212, 0.644455, -1.17632, 1.42828, -0.355559, 0.685665, -1.72952, -0.534498, 0.637149, 2.17758, -0.364661, -1.00121, 0.367557, -1.02091, -1.4776, 0.725126, -1.76422, -0.122198, 0.119518, -1.54856, -1.1012, -2.29664, 0.204291, -0.195299, -0.446781, -1.26199, 2.14003, -0.825896, -0.595367, 1.12235, -0.471528, 0.131953, -1.59619, 0.416828, 0.713689, -0.587769, -1.05023, 0.00980475, 1.76599, 0.0745339, 0.450325, 1.12436, 1.67582, -0.942351, -0.491541, 0.709525, -0.487695, -0.291505, -0.48815, -1.34943, 0.303068, 0.807472, -0.825592, -0.0444731, -0.176398, -1.00344, -0.165851, -1.66623, -0.789973, 0.507125, 1.01446, -2.12619, 0.874163, 0.971515, 0.977665, 0.0938577, -0.686041, -0.644779, 0.943301, 1.46686, -0.964762, -0.00447505, -1.23897, 0.15367, -1.02906, -0.0273253, 0.308131, 0.225627, 0.756117, -0.11236, 0.835155, -0.856331, -0.886937, -0.339958, 0.0355568, 1.22602, -0.612489, 1.68121, 0.706232, 1.85257, -0.75296, -1.12535, -0.910917, 0.551874, -1.46327, 0.00865985, -1.12411, -0.162599, -0.0184118, -0.197287, -0.86977, -1.55077, -0.379717, 0.0316421, -1.20812, 1.13736, 0.619865, -0.939715, 0.0667614, 0.00686165, 0.616259, 1.63133, -0.54383, 0.351478, 0.272913, 0.42533, -0.0899168, 0.586253, -0.870667, 0.907813, 0.677455, 0.708735, -1.92561, 0.401518, -0.179322, 0.250642, -0.850702, -2.48624, 0.426637, -1.03109, 1.21379, -0.844781, -0.928402, 0.926769, -0.52497, 2.14789, -0.222116, 1.10925, -1.01165, -0.0366401, -1.97484, 0.488016, -0.321355, 0.202876, 0.0247562, 1.17442, 1.05137, -1.34831, -0.47383, 0.474645, 0.692987, -1.95512, 0.403126, -1.08174, 0.587523, 0.224685, 0.113976, 0.392671, -0.0299585, -0.524412, -0.0033372, -0.54307, -0.311649, 1.33328, 0.512145, -1.60303, -0.8221, -2.56427, 1.25369, -1.55067, -0.878728, 0.221357, -0.0904412, 1.52859, -1.18804, 0.402625, -1.16083, 0.39691, 0.935227, 0.444264, 0.741051, 0.536484, -0.0791178, 0.806068, -0.0830614, -0.257476, -0.765558, 1.7128, -1.03352, 0.433021, 1.00674, 1.58481, 1.59005, 0.601257, -0.274755, 1.06977, -0.562692, -1.07332, -1.14198, -0.601941, -0.925925, 0.80767, 0.489058, 0.57053, -0.897764, 1.9586, 0.868494, 0.740601, -1.03758, -0.372745, 0.164664, 0.0811351, -0.817212, -1.12896, 0.594151, -0.0329436, -0.122773, 0.0808823, 0.385804, 0.639648, -0.912169, 0.307732, -1.38003, -0.397612, -0.133082, -1.43322, -0.831425, -1.28417, -1.05794, 0.273638, -0.161187, 0.795844, -0.746132, -0.179889, 1.81498, 0.128769, -0.519487, -0.87802, -0.900833, 0.404327, -0.66114, -0.447534, -0.595867, -0.681356, 2.24375, -2.5913, 1.97815, -0.549085, -1.20728, -0.0859498, -2.48846, 1.58944, 0.991977, -1.08182, 0.52219, 0.923906, -1.4336, -1.13062, -2.05621, -0.809792, -0.807982, 0.578457, -0.728412, 0.970844, 1.10448, 1.89311, 0.171628, -0.712558, -1.24433, 0.533498, 0.321742, 1.00532, 0.542418, 2.07117, 0.14846, 0.806795, 0.680226, 0.763414, 0.892606, 1.41907, -0.916613, 0.363102, 2.46675, -0.991078, 1.06574, -2.41697, -0.105771, 0.417803, 0.102356, 1.26532, 0.254081, 0.656156, 1.361, -0.446288, -2.74966, 0.565307, 0.60789, 1.02218, 0.403079], piv=Array{Int64, (1,)}[1], rank=1, cnames=Array{String, (1,)}[""])], sqrtwts=Array{Float64, (400,)}[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], A=BlockArrays.BlockArray{Float64, 2, Array{AbstractArray{Float64, 2}, 2}, Tuple{BlockArrays.BlockedUnitRange{Array{Int64, 1}}, BlockArrays.BlockedUnitRange{Array{Int64, 1}}}}(blocks=Array{AbstractArray{Float64, 2}, (4, 4)}[
  MixedModels.UniformBlockDiagonal{Float64}(data=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], facevec=Array{Base.SubArray{Float64, 2, Array{Float64, 3}, I, L} where L where I, (20,)}[
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 1), offset1=0, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 2), offset1=4, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 3), offset1=8, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 4), offset1=12, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 5), offset1=16, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 6), offset1=20, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 7), offset1=24, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 8), offset1=28, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 9), offset1=32, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 10), offset1=36, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 11), offset1=40, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 12), offset1=44, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 13), offset1=48, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 14), offset1=52, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 15), offset1=56, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 16), offset1=60, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 17), offset1=64, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 18), offset1=68, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 19), offset1=72, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 20), offset1=76, stride1=1)]),
  Array{Float64, (20, 40)}[2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
  Array{Float64, (2, 40)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10],
  Array{Float64, (1, 40)}[-9.6208, -5.64077, -7.50578, -3.1027, 4.67897, 1.64442, 0.960858, 0.416538, -8.28347, -4.77454, 5.56938, 1.62464, 2.81237, 0.515815, 5.45085, 3.86912, 6.33354, 4.09872, 3.36702, 0.289416, -0.0105093, -0.0781911, 2.50619, -0.753268, 3.38372, 2.43935, -6.32297, -4.10723, 0.0442797, 2.34735, -1.22954, -1.76855, -1.32917, -1.25293, -9.48085, -7.3464, -2.9033, -6.03751, -4.75131, -3.38146],
  #<null>,
  MixedModels.UniformBlockDiagonal{Float64}(data=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], facevec=Array{Base.SubArray{Float64, 2, Array{Float64, 3}, I, L} where L where I, (10,)}[
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 1), offset1=0, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 2), offset1=4, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 3), offset1=8, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 4), offset1=12, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 5), offset1=16, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 6), offset1=20, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 7), offset1=24, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 8), offset1=28, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 9), offset1=32, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 10), offset1=36, stride1=1)]),
  Array{Float64, (2, 20)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20],
  Array{Float64, (1, 20)}[-3.10821, -3.89852, 2.1575, 4.03791, -3.61872, -3.2097, -9.05002, -1.43327, 0.102481, -3.23715, -2.13812, -5.71112, -6.04748, -1.68031, 6.05859, -1.90192, -13.2111, -7.53379, 12.5245, 3.56969],
  #<null>,
  #<null>,
  Array{Float64, (2, 2)}[400, 200, 200, 200],
  Array{Float64, (1, 2)}[-16.3305, -20.9982],
  #<null>,
  #<null>,
  #<null>,
  Array{Float64, (1, 1)}[427.28]], axes=(BlockArrays.BlockedUnitRange{Array{Int64, 1}}(first=1, lasts=Array{Int64, (4,)}[40, 60, 62, 63]), BlockArrays.BlockedUnitRange{Array{Int64, 1}}(first=1, lasts=Array{Int64, (4,)}[40, 60, 62, 63]))), L=BlockArrays.BlockArray{Float64, 2, Array{AbstractArray{Float64, 2}, 2}, Tuple{BlockArrays.BlockedUnitRange{Array{Int64, 1}}, BlockArrays.BlockedUnitRange{Array{Int64, 1}}}}(blocks=Array{AbstractArray{Float64, 2}, (4, 4)}[
  MixedModels.UniformBlockDiagonal{Float64}(data=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], facevec=Array{Base.SubArray{Float64, 2, Array{Float64, 3}, I, L} where L where I, (20,)}[
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 1), offset1=0, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 2), offset1=4, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 3), offset1=8, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 4), offset1=12, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 5), offset1=16, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 6), offset1=20, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 7), offset1=24, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 8), offset1=28, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 9), offset1=32, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 10), offset1=36, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 11), offset1=40, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 12), offset1=44, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 13), offset1=48, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 14), offset1=52, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 15), offset1=56, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 16), offset1=60, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 17), offset1=64, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 18), offset1=68, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 19), offset1=72, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 20), offset1=76, stride1=1)]),
  Array{Float64, (20, 40)}[0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724],
  Array{Float64, (2, 40)}[4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724],
  Array{Float64, (1, 40)}[-2.09943, -0.424179, -1.6379, 0.188771, 1.02103, -0.233685, 0.209676, -0.016421, -1.8076, -0.332328, 1.21534, -0.411369, 0.61371, -0.329678, 1.18947, 0.509878, 1.38209, 0.433512, 0.734745, -0.526072, -0.00229331, -0.0293026, 0.546896, -0.779419, 0.738388, 0.331538, -1.37978, -0.438935, 0.00966262, 0.931391, -0.268307, -0.473675, -0.290049, -0.248232, -2.06889, -1.13376, -0.633552, -1.86377, -1.03682, -0.447999],
  #<null>,
  Array{Float64, (20, 20)}[6.0978, 2.95439, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, 20, 3.23103, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, 0, 0, 6.06545, 2.93469, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, 0, 0, 20, 3.22133, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, 0, 0, 0, 0, 6.02539, 2.90997, -0.779159, -0.409325, -0.779159, -0.409325, -0.779159, -0.409325, -0.779159, -0.409325, -0.779159, -0.409325, -0.779159, -0.409325, -0.779159, -0.409325, 0, 0, 0, 0, 20, 3.20994, -0.0619988, -0.323145, -0.0619988, -0.323145, -0.0619988, -0.323145, -0.0619988, -0.323145, -0.0619988, -0.323145, -0.0619988, -0.323145, -0.0619988, -0.323145, 0, 0, 0, 0, 0, 0, 5.97447, 2.87803, -0.888056, -0.469548, -0.888056, -0.469548, -0.888056, -0.469548, -0.888056, -0.469548, -0.888056, -0.469548, -0.888056, -0.469548, 0, 0, 0, 0, 0, 0, 20, 3.19634, -0.0780432, -0.359472, -0.0780432, -0.359472, -0.0780432, -0.359472, -0.0780432, -0.359472, -0.0780432, -0.359472, -0.0780432, -0.359472, 0, 0, 0, 0, 0, 0, 0, 0, 5.90759, 2.83528, -1.03264, -0.550198, -1.03264, -0.550198, -1.03264, -0.550198, -1.03264, -0.550198, -1.03264, -0.550198, 0, 0, 0, 0, 0, 0, 0, 0, 20, 3.1798, -0.101429, -0.405716, -0.101429, -0.405716, -0.101429, -0.405716, -0.101429, -0.405716, -0.101429, -0.405716, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.81575, 2.77528, -1.23407, -0.663654, -1.23407, -0.663654, -1.23407, -0.663654, -1.23407, -0.663654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 3.15918, -0.137619, -0.467069, -0.137619, -0.467069, -0.137619, -0.467069, -0.137619, -0.467069, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.68165, 2.68533, -1.53457, -0.834779, -1.53457, -0.834779, -1.53457, -0.834779, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 3.13258, -0.198588, -0.55364, -0.198588, -0.55364, -0.198588, -0.55364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.46688, 2.53638, -2.03283, -1.12201, -2.03283, -1.12201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 3.09635, -0.315808, -0.689036, -0.315808, -0.689036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.06504, 2.24433, -3.02967, -1.7043, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 3.04137, -0.602613, -0.949572, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.01405, 1.40306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2.91754],
  Array{Float64, (2, 20)}[0.300446, 0.0250372, -0.22747, 0.496876, 0.331481, 0.0311898, -0.243258, 0.537004, 0.369835, 0.03949, -0.261146, 0.584291, 0.418508, 0.05104, -0.281428, 0.6409, 0.482441, 0.0677571, -0.304287, 0.710003, 0.570414, 0.0932407, -0.329451, 0.79652, 0.699793, 0.134987, -0.355052, 0.908691, 0.910821, 0.21119, -0.373228, 1.06226, 1.32537, 0.378937, -0.346959, 1.29653, 2.62064, 0.958806, 0.0588808, 1.82531],
  Array{Float64, (1, 20)}[-0.238117, -0.404567, 0.60139, 1.23377, -0.273637, -0.040977, -1.22117, 1.32587, 0.148233, -0.502411, -0.217132, -1.00372, -0.9818, 0.728097, 0.944922, -1.09497, -2.47359, -0.25262, 1.38524, -0.553744],
  #<null>,
  #<null>,
  Array{Float64, (2, 2)}[2.54128, 0.0794151, 200, 2.5],
  Array{Float64, (1, 2)}[0.049118, -0.320823],
  #<null>,
  #<null>,
  #<null>,
  Array{Float64, (1, 1)}[19.344]], axes=(BlockArrays.BlockedUnitRange{Array{Int64, 1}}(first=1, lasts=Array{Int64, (4,)}[40, 60, 62, 63]), BlockArrays.BlockedUnitRange{Array{Int64, 1}}(first=1, lasts=Array{Int64, (4,)}[40, 60, 62, 63]))), optsum=MixedModels.OptSummary{Float64}(initial=Array{Float64, (6,)}[1, 0, 1, 1, 0, 1], lowerbd=Array{Float64, (6,)}[0, -inf, 0, 0, -inf, 0], finitial=1263.2, ftol_rel=1e-12, ftol_abs=1e-08, xtol_rel=0, xtol_abs=Array{Float64, (6,)}[1e-10, 1e-10, 1e-10, 1e-10, 1e-10, 1e-10], initial_step=Array{Float64, (6,)}[0.75, 1, 0.75, 0.75, 1, 0.75], maxfeval=-1, final=Array{Float64, (6,)}[1.75, 0, 1, 1, 0, 1], fmin=inf, feval=-1, optimizer=:LN_BOBYQA, returnvalue=:FAILURE, nAGQ=1, REML=false)), optsum=MixedModels.OptSummary{Float64}(initial=Array{Float64, (6,)}[1, 0, 1, 1, 0, 1], lowerbd=Array{Float64, (6,)}[0, -inf, 0, 0, -inf, 0], finitial=1263.2, ftol_rel=1e-12, ftol_abs=1e-08, xtol_rel=0, xtol_abs=Array{Float64, (6,)}[1e-10, 1e-10, 1e-10, 1e-10, 1e-10, 1e-10], initial_step=Array{Float64, (6,)}[0.75, 1, 0.75, 0.75, 1, 0.75], maxfeval=-1, final=Array{Float64, (6,)}[1.75, 0, 1, 1, 0, 1], fmin=inf, feval=-1, optimizer=:LN_BOBYQA, returnvalue=:FAILURE, nAGQ=1, REML=false), feval=Core.Box(contents=1)), o=<circular reference @-2>)]))
jl_type_error_rt at /workspace/srcdir/src/rtutils.c:118
jl_f_apply_type at /workspace/srcdir/src/builtins.c:970
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/src/julia.h:1692 [inlined]
do_apply at /workspace/srcdir/src/builtins.c:650
argtypes_to_type at ./compiler/typeutils.jl:46 [inlined]
abstract_call_known at ./compiler/abstractinterpretation.jl:886
abstract_call at ./compiler/abstractinterpretation.jl:909
abstract_call at ./compiler/abstractinterpretation.jl:894
abstract_eval at ./compiler/abstractinterpretation.jl:988
typeinf_local at ./compiler/abstractinterpretation.jl:1242
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1298
typeinf at ./compiler/typeinfer.jl:12
typeinf_ext at ./compiler/typeinfer.jl:570
typeinf_ext at ./compiler/typeinfer.jl:601
jfptr_typeinf_ext_20212.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/src/julia.h:1692 [inlined]
jl_type_infer at /workspace/srcdir/src/gf.c:300
jl_generate_fptr at /workspace/srcdir/src/jitlayers.cpp:265
jl_compile_method_internal at /workspace/srcdir/src/gf.c:1968
jl_compile_method_internal at /workspace/srcdir/src/gf.c:1923 [inlined]
_jl_invoke at /workspace/srcdir/src/gf.c:2228 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
inferencebarrier at ./essentials.jl:718
show_default at ./show.jl:382 [inlined]
show at ./show.jl:379
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
print at ./strings/io.jl:35
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
print_to_string at ./strings/io.jl:135
string at ./strings/io.jl:174 [inlined]
showerror at ./errorshow.jl:154
#685 at ./errorshow.jl:171
unknown function (ip: 0x7f075e4be961)
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
#with_output_color#741 at ./util.jl:72
unknown function (ip: 0x7f075e4bd022)
with_output_color at ./util.jl:70 [inlined]
#showerror#684 at ./errorshow.jl:170
showerror##kw at ./errorshow.jl:169
unknown function (ip: 0x7f075e4bcd48)
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
show_exception_stack at ./errorshow.jl:818
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
#sprint#352 at ./strings/io.jl:105
sprint at ./strings/io.jl:101
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
Error at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:158
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/src/julia.h:1692 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:117
eval_value at /workspace/srcdir/src/interpreter.c:206
eval_stmt_value at /workspace/srcdir/src/interpreter.c:157 [inlined]
eval_body at /workspace/srcdir/src/interpreter.c:566
eval_body at /workspace/srcdir/src/interpreter.c:492
jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:660
macro expansion at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1120 [inlined]
top-level scope at /home/pkgeval/.julia/packages/MixedModels/ALNok/test/linalg.jl:35
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:827
jl_parse_eval_all at /workspace/srcdir/src/ast.c:913
jl_load_rewrite at /workspace/srcdir/src/toplevel.c:898
include at ./client.jl:457
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/src/julia.h:1692 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:117
eval_value at /workspace/srcdir/src/interpreter.c:206
eval_stmt_value at /workspace/srcdir/src/interpreter.c:157 [inlined]
eval_body at /workspace/srcdir/src/interpreter.c:566
jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:660
top-level scope at /home/pkgeval/.julia/packages/MixedModels/ALNok/test/runtests.jl:7
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:827
jl_parse_eval_all at /workspace/srcdir/src/ast.c:913
jl_load_rewrite at /workspace/srcdir/src/toplevel.c:898
include at ./client.jl:457
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/src/julia.h:1692 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:117
eval_value at /workspace/srcdir/src/interpreter.c:206
eval_stmt_value at /workspace/srcdir/src/interpreter.c:157 [inlined]
eval_body at /workspace/srcdir/src/interpreter.c:566
jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:660
top-level scope at none:6
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:827
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:777
jl_toplevel_eval_in at /workspace/srcdir/src/toplevel.c:867
eval at ./boot.jl:331
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
exec_options at ./client.jl:272
_start at ./client.jl:506
jfptr__start_57981.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/ui/../src/julia.h:1692 [inlined]
true_main at /workspace/srcdir/ui/repl.c:96
main at /workspace/srcdir/ui/repl.c:217
__libc_start_main at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)
unknown function (ip: 0x4015e4)
Internal error: encountered unexpected error in runtime:
TypeError(func=:Tuple, context="parameter", expected=Type, got=NLopt.Opt(opt=0x0000000008aed590, cb=Array{NLopt.Callback_Data, (1,)}[NLopt.Callback_Data(f=getfield(MixedModels, Symbol("#obj#41")){Bool, MixedModels.LinearMixedModel{Float64}, MixedModels.OptSummary{Float64}}(verbose=false, m=MixedModels.LinearMixedModel{Float64}(formula=StatsModels.FormulaTerm{StatsModels.ContinuousTerm{Float64}, Tuple{StatsModels.MatrixTerm{Tuple{StatsModels.InterceptTerm{true}, StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}}}, MixedModels.RandomEffectsTerm, MixedModels.RandomEffectsTerm}}(lhs=StatsModels.ContinuousTerm{Float64}(sym=:Y, mean=-0.0408263, var=1.06921, min=-2.74966, max=3.3424), rhs=(StatsModels.MatrixTerm{Tuple{StatsModels.InterceptTerm{true}, StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}}}(terms=(StatsModels.InterceptTerm{true}(), StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}(sym=:A, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (2, 1)}[0, 1], termnames=Array{Char, (1,)}[Char(0x59000000)], levels=Array{Char, (2,)}[Char(0x4e000000), Char(0x59000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (16,)}[0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00], keys=Array{Char, (16,)}[Char(0x8a3b62d0), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x59000000), Char(0x8b319250), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x00007f07), Char(0x8a4417a0), Char(0x00007f07), Char(0x4e000000), Char(0x00000000)], vals=Array{Int64, (16,)}[139669475227536, 139669475228752, 139669475290032, 139670361216560, 139669439890352, 2, 139669439890624, 139669439890848, 139669475280944, 139669475280976, 139669439893888, 0, 0, 0, 1, 139669535486688], ndel=0, count=2, age=0x0000000000000002, idxfloor=1, maxprobe=0))))), MixedModels.RandomEffectsTerm(lhs=StatsModels.MatrixTerm{Tuple{StatsModels.InterceptTerm{true}, StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}}}(terms=(StatsModels.InterceptTerm{true}(), StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}(sym=:A, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (2, 1)}[0, 1], termnames=Array{Char, (1,)}[Char(0x59000000)], levels=Array{Char, (2,)}[Char(0x4e000000), Char(0x59000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (16,)}[0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00], keys=Array{Char, (16,)}[Char(0x8a3b62d0), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x59000000), Char(0x8b319250), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x00007f07), Char(0x8a4417a0), Char(0x00007f07), Char(0x4e000000), Char(0x00000000)], vals=Array{Int64, (16,)}[139669475227536, 139669475228752, 139669475290032, 139670361216560, 139669439890352, 2, 139669439890624, 139669439890848, 139669475280944, 139669475280976, 139669439893888, 0, 0, 0, 1, 139669535486688], ndel=0, count=2, age=0x0000000000000002, idxfloor=1, maxprobe=0))))), rhs=StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 19}(sym=:G, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (20, 19)}[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], termnames=Array{Char, (19,)}[Char(0x42000000), Char(0x43000000), Char(0x44000000), Char(0x45000000), Char(0x46000000), Char(0x47000000), Char(0x48000000), Char(0x49000000), Char(0x4a000000), Char(0x4b000000), Char(0x4c000000), Char(0x4d000000), Char(0x4e000000), Char(0x4f000000), Char(0x50000000), Char(0x51000000), Char(0x52000000), Char(0x53000000), Char(0x54000000)], levels=Array{Char, (20,)}[Char(0x41000000), Char(0x42000000), Char(0x43000000), Char(0x44000000), Char(0x45000000), Char(0x46000000), Char(0x47000000), Char(0x48000000), Char(0x49000000), Char(0x4a000000), Char(0x4b000000), Char(0x4c000000), Char(0x4d000000), Char(0x4e000000), Char(0x4f000000), Char(0x50000000), Char(0x51000000), Char(0x52000000), Char(0x53000000), Char(0x54000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (64,)}[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], keys=Array{Char, (64,)}[Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x45000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x43000000), Char(0x42000000), Char(0x00000000), Char(0x44000000), Char(0x41000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x52000000), Char(0x47000000), Char(0x00000000), Char(0x46000000), Char(0x4e000000), Char(0x4d000000), Char(0x4b000000), Char(0x4a000000), Char(0x4f000000), Char(0x49000000), Char(0x50000000), Char(0x48000000), Char(0x51000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x53000000), Char(0x54000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x4c000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000)], vals=Array{Int64, (64,)}[12, 16, 19, 22, 25, 26, 43, 45, 5, 50, 62, 68, 71, 72, 74, 3, 2, 86, 4, 1, 98, 101, 102, 104, 110, 113, 118, 18, 7, 125, 6, 14, 13, 11, 10, 15, 9, 16, 8, 17, 150, 151, 154, 156, 157, 19, 20, 166, 167, 169, 170, 171, 12, 174, 177, 178, 180, 183, 186, 188, 191, 197, 198, 0], ndel=0, count=20, age=0x0000000000000015, idxfloor=1, maxprobe=9)))), MixedModels.RandomEffectsTerm(lhs=StatsModels.MatrixTerm{Tuple{StatsModels.InterceptTerm{true}, StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}}}(terms=(StatsModels.InterceptTerm{true}(), StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}(sym=:A, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (2, 1)}[0, 1], termnames=Array{Char, (1,)}[Char(0x59000000)], levels=Array{Char, (2,)}[Char(0x4e000000), Char(0x59000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (16,)}[0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00], keys=Array{Char, (16,)}[Char(0x8a3b62d0), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x59000000), Char(0x8b319250), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x00007f07), Char(0x8a4417a0), Char(0x00007f07), Char(0x4e000000), Char(0x00000000)], vals=Array{Int64, (16,)}[139669475227536, 139669475228752, 139669475290032, 139670361216560, 139669439890352, 2, 139669439890624, 139669439890848, 139669475280944, 139669475280976, 139669439893888, 0, 0, 0, 1, 139669535486688], ndel=0, count=2, age=0x0000000000000002, idxfloor=1, maxprobe=0))))), rhs=StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 9}(sym=:H, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (10, 9)}[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], termnames=Array{Char, (9,)}[Char(0x62000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x66000000), Char(0x67000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000)], levels=Array{Char, (10,)}[Char(0x61000000), Char(0x62000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x66000000), Char(0x67000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (16,)}[0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00], keys=Array{Char, (16,)}[Char(0x8a3b62d0), Char(0x00007f07), Char(0x66000000), Char(0x00000000), Char(0x8a3e9680), Char(0x00007f07), Char(0x67000000), Char(0x61000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000), Char(0x62000000), Char(0x00000000)], vals=Array{Int64, (16,)}[1, 1, 6, 0, 0, 1, 7, 1, 3, 4, 5, 8, 9, 10, 2, 139670360646352], ndel=0, count=10, age=0x000000000000000a, idxfloor=1, maxprobe=7)))))), allterms=Array{Union{MixedModels.FeMat{Float64, S} where S<:(AbstractArray{T, 2} where T), MixedModels.ReMat{Float64, S} where S}, (4,)}[
  MixedModels.ReMat{Float64, 2}(trm=StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 19}(sym=:G, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (20, 19)}[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], termnames=Array{Char, (19,)}[Char(0x42000000), Char(0x43000000), Char(0x44000000), Char(0x45000000), Char(0x46000000), Char(0x47000000), Char(0x48000000), Char(0x49000000), Char(0x4a000000), Char(0x4b000000), Char(0x4c000000), Char(0x4d000000), Char(0x4e000000), Char(0x4f000000), Char(0x50000000), Char(0x51000000), Char(0x52000000), Char(0x53000000), Char(0x54000000)], levels=Array{Char, (20,)}[Char(0x41000000), Char(0x42000000), Char(0x43000000), Char(0x44000000), Char(0x45000000), Char(0x46000000), Char(0x47000000), Char(0x48000000), Char(0x49000000), Char(0x4a000000), Char(0x4b000000), Char(0x4c000000), Char(0x4d000000), Char(0x4e000000), Char(0x4f000000), Char(0x50000000), Char(0x51000000), Char(0x52000000), Char(0x53000000), Char(0x54000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (64,)}[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], keys=Array{Char, (64,)}[Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x45000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x43000000), Char(0x42000000), Char(0x00000000), Char(0x44000000), Char(0x41000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x52000000), Char(0x47000000), Char(0x00000000), Char(0x46000000), Char(0x4e000000), Char(0x4d000000), Char(0x4b000000), Char(0x4a000000), Char(0x4f000000), Char(0x49000000), Char(0x50000000), Char(0x48000000), Char(0x51000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x53000000), Char(0x54000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x4c000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000)], vals=Array{Int64, (64,)}[12, 16, 19, 22, 25, 26, 43, 45, 5, 50, 62, 68, 71, 72, 74, 3, 2, 86, 4, 1, 98, 101, 102, 104, 110, 113, 118, 18, 7, 125, 6, 14, 13, 11, 10, 15, 9, 16, 8, 17, 150, 151, 154, 156, 157, 19, 20, 166, 167, 169, 170, 171, 12, 174, 177, 178, 180, 183, 186, 188, 191, 197, 198, 0], ndel=0, count=20, age=0x0000000000000015, idxfloor=1, maxprobe=9))), refs=Array{Int32, (400,)}[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20], levels=Array{Char, (20,)}[Char(0x41000000), Char(0x42000000), Char(0x43000000), Char(0x44000000), Char(0x45000000), Char(0x46000000), Char(0x47000000), Char(0x48000000), Char(0x49000000), Char(0x4a000000), Char(0x4b000000), Char(0x4c000000), Char(0x4d000000), Char(0x4e000000), Char(0x4f000000), Char(0x50000000), Char(0x51000000), Char(0x52000000), Char(0x53000000), Char(0x54000000)], cnames=Array{String, (2,)}[
  "(Intercept)",
  "A: Y"], z=Array{Float64, (2, 400)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], wtz=Array{Float64, (2, 400)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], λ=LinearAlgebra.LowerTriangular{Float64, Array{Float64, 2}}(data=Array{Float64, (2, 2)}[1, 0, 0, 1]), inds=Array{Int64, (3,)}[1, 2, 4], adjA=SparseArrays.SparseMatrixCSC{Float64, Int32}(m=40, n=400, colptr=Array{Int32, (401,)}[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 583, 585, 587, 589, 591, 593, 595, 597, 599, 601, 603, 605, 607, 609, 611, 613, 615, 617, 619, 621, 623, 625, 627, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 739, 741, 743, 745, 747, 749, 751, 753, 755, 757, 759, 761, 763, 765, 767, 769, 771, 773, 775, 777, 779, 781, 783, 785, 787, 789, 791, 793, 795, 797, 799, 801], rowval=Array{Int32, (800,)}[1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40], nzval=Array{Float64, (800,)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1]), scratch=Array{Float64, (2, 20)}[-9.6208, -5.64077, -7.50578, -3.1027, 4.67897, 1.64442, 0.960858, 0.416538, -8.28347, -4.77454, 5.56938, 1.62464, 2.81237, 0.515815, 5.45085, 3.86912, 6.33354, 4.09872, 3.36702, 0.289416, -0.0105093, -0.0781911, 2.50619, -0.753268, 3.38372, 2.43935, -6.32297, -4.10723, 0.0442797, 2.34735, -1.22954, -1.76855, -1.32917, -1.25293, -9.48085, -7.3464, -2.9033, -6.03751, -4.75131, -3.38146]),
  MixedModels.ReMat{Float64, 2}(trm=StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 9}(sym=:H, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (10, 9)}[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], termnames=Array{Char, (9,)}[Char(0x62000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x66000000), Char(0x67000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000)], levels=Array{Char, (10,)}[Char(0x61000000), Char(0x62000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x66000000), Char(0x67000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (16,)}[0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00], keys=Array{Char, (16,)}[Char(0x8a3b62d0), Char(0x00007f07), Char(0x66000000), Char(0x00000000), Char(0x8a3e9680), Char(0x00007f07), Char(0x67000000), Char(0x61000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000), Char(0x62000000), Char(0x00000000)], vals=Array{Int64, (16,)}[1, 1, 6, 0, 0, 1, 7, 1, 3, 4, 5, 8, 9, 10, 2, 139670360646352], ndel=0, count=10, age=0x000000000000000a, idxfloor=1, maxprobe=7))), refs=Array{Int32, (400,)}[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], levels=Array{Char, (10,)}[Char(0x61000000), Char(0x62000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x66000000), Char(0x67000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000)], cnames=Array{String, (2,)}[
  "(Intercept)",
  "A: Y"], z=Array{Float64, (2, 400)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], wtz=Array{Float64, (2, 400)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], λ=LinearAlgebra.LowerTriangular{Float64, Array{Float64, 2}}(data=Array{Float64, (2, 2)}[1, 0, 0, 1]), inds=Array{Int64, (3,)}[1, 2, 4], adjA=SparseArrays.SparseMatrixCSC{Float64, Int32}(m=20, n=400, colptr=Array{Int32, (401,)}[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 583, 585, 587, 589, 591, 593, 595, 597, 599, 601, 603, 605, 607, 609, 611, 613, 615, 617, 619, 621, 623, 625, 627, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 739, 741, 743, 745, 747, 749, 751, 753, 755, 757, 759, 761, 763, 765, 767, 769, 771, 773, 775, 777, 779, 781, 783, 785, 787, 789, 791, 793, 795, 797, 799, 801], rowval=Array{Int32, (800,)}[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20], nzval=Array{Float64, (800,)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1]), scratch=Array{Float64, (2, 10)}[-3.10821, -3.89852, 2.1575, 4.03791, -3.61872, -3.2097, -9.05002, -1.43327, 0.102481, -3.23715, -2.13812, -5.71112, -6.04748, -1.68031, 6.05859, -1.90192, -13.2111, -7.53379, 12.5245, 3.56969]),
  MixedModels.FeMat{Float64, Array{Float64, 2}}(x=Array{Float64, (400, 2)}[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], wtx=Array{Float64, (400, 2)}[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], piv=Array{Int64, (2,)}[1, 2], rank=2, cnames=Array{String, (2,)}[
  "(Intercept)",
  "A: Y"]),
  MixedModels.FeMat{Float64, Array{Float64, 2}}(x=Array{Float64, (400, 1)}[-0.160767, -1.48275, -0.384419, -1.3541, 1.03842, -1.16268, -0.0202548, -0.747563, 1.32394, -1.26479, -1.1589, 0.228077, -1.26447, -0.0305313, -1.73483, 1.10785, -0.0966725, 3.3424, 1.70391, -1.17272, -2.05007, -0.536018, 0.920166, -2.08457, 2.85367, 0.298823, 0.30227, -0.823113, 1.65939, 0.893986, -0.491064, 0.628746, -0.446673, -0.816463, -0.522648, 0.455216, -0.643395, 0.13782, -0.0372687, 0.483869, -1.46539, 1.32186, -0.0376635, 0.951807, 0.595687, -0.166958, 1.43169, -0.811143, -0.427218, 0.263116, 0.537191, 0.376229, 0.381638, 0.231701, 1.96601, 1.25224, -0.584862, 1.29871, 0.607602, 0.417953, -0.0156447, 0.953986, 0.537903, 1.59606, -2.68816, 0.207514, -0.737157, -1.52248, -0.376472, 1.0603, 0.124493, 0.151912, -0.0137903, 0.415566, -0.89659, -1.33803, 0.0404713, -0.78972, -0.860152, -1.83271, -1.35263, -1.56942, 0.0819071, -0.890231, -0.989597, 2.7382, -2.21318, 0.275371, -0.363027, -0.377948, 0.255572, -0.0199111, -0.0102739, 1.90416, -0.982226, -0.724709, 0.876104, 0.577596, 0.739668, 0.57291, 0.566372, 0.0479212, 0.644455, -1.17632, 1.42828, -0.355559, 0.685665, -1.72952, -0.534498, 0.637149, 2.17758, -0.364661, -1.00121, 0.367557, -1.02091, -1.4776, 0.725126, -1.76422, -0.122198, 0.119518, -1.54856, -1.1012, -2.29664, 0.204291, -0.195299, -0.446781, -1.26199, 2.14003, -0.825896, -0.595367, 1.12235, -0.471528, 0.131953, -1.59619, 0.416828, 0.713689, -0.587769, -1.05023, 0.00980475, 1.76599, 0.0745339, 0.450325, 1.12436, 1.67582, -0.942351, -0.491541, 0.709525, -0.487695, -0.291505, -0.48815, -1.34943, 0.303068, 0.807472, -0.825592, -0.0444731, -0.176398, -1.00344, -0.165851, -1.66623, -0.789973, 0.507125, 1.01446, -2.12619, 0.874163, 0.971515, 0.977665, 0.0938577, -0.686041, -0.644779, 0.943301, 1.46686, -0.964762, -0.00447505, -1.23897, 0.15367, -1.02906, -0.0273253, 0.308131, 0.225627, 0.756117, -0.11236, 0.835155, -0.856331, -0.886937, -0.339958, 0.0355568, 1.22602, -0.612489, 1.68121, 0.706232, 1.85257, -0.75296, -1.12535, -0.910917, 0.551874, -1.46327, 0.00865985, -1.12411, -0.162599, -0.0184118, -0.197287, -0.86977, -1.55077, -0.379717, 0.0316421, -1.20812, 1.13736, 0.619865, -0.939715, 0.0667614, 0.00686165, 0.616259, 1.63133, -0.54383, 0.351478, 0.272913, 0.42533, -0.0899168, 0.586253, -0.870667, 0.907813, 0.677455, 0.708735, -1.92561, 0.401518, -0.179322, 0.250642, -0.850702, -2.48624, 0.426637, -1.03109, 1.21379, -0.844781, -0.928402, 0.926769, -0.52497, 2.14789, -0.222116, 1.10925, -1.01165, -0.0366401, -1.97484, 0.488016, -0.321355, 0.202876, 0.0247562, 1.17442, 1.05137, -1.34831, -0.47383, 0.474645, 0.692987, -1.95512, 0.403126, -1.08174, 0.587523, 0.224685, 0.113976, 0.392671, -0.0299585, -0.524412, -0.0033372, -0.54307, -0.311649, 1.33328, 0.512145, -1.60303, -0.8221, -2.56427, 1.25369, -1.55067, -0.878728, 0.221357, -0.0904412, 1.52859, -1.18804, 0.402625, -1.16083, 0.39691, 0.935227, 0.444264, 0.741051, 0.536484, -0.0791178, 0.806068, -0.0830614, -0.257476, -0.765558, 1.7128, -1.03352, 0.433021, 1.00674, 1.58481, 1.59005, 0.601257, -0.274755, 1.06977, -0.562692, -1.07332, -1.14198, -0.601941, -0.925925, 0.80767, 0.489058, 0.57053, -0.897764, 1.9586, 0.868494, 0.740601, -1.03758, -0.372745, 0.164664, 0.0811351, -0.817212, -1.12896, 0.594151, -0.0329436, -0.122773, 0.0808823, 0.385804, 0.639648, -0.912169, 0.307732, -1.38003, -0.397612, -0.133082, -1.43322, -0.831425, -1.28417, -1.05794, 0.273638, -0.161187, 0.795844, -0.746132, -0.179889, 1.81498, 0.128769, -0.519487, -0.87802, -0.900833, 0.404327, -0.66114, -0.447534, -0.595867, -0.681356, 2.24375, -2.5913, 1.97815, -0.549085, -1.20728, -0.0859498, -2.48846, 1.58944, 0.991977, -1.08182, 0.52219, 0.923906, -1.4336, -1.13062, -2.05621, -0.809792, -0.807982, 0.578457, -0.728412, 0.970844, 1.10448, 1.89311, 0.171628, -0.712558, -1.24433, 0.533498, 0.321742, 1.00532, 0.542418, 2.07117, 0.14846, 0.806795, 0.680226, 0.763414, 0.892606, 1.41907, -0.916613, 0.363102, 2.46675, -0.991078, 1.06574, -2.41697, -0.105771, 0.417803, 0.102356, 1.26532, 0.254081, 0.656156, 1.361, -0.446288, -2.74966, 0.565307, 0.60789, 1.02218, 0.403079], wtx=Array{Float64, (400, 1)}[-0.160767, -1.48275, -0.384419, -1.3541, 1.03842, -1.16268, -0.0202548, -0.747563, 1.32394, -1.26479, -1.1589, 0.228077, -1.26447, -0.0305313, -1.73483, 1.10785, -0.0966725, 3.3424, 1.70391, -1.17272, -2.05007, -0.536018, 0.920166, -2.08457, 2.85367, 0.298823, 0.30227, -0.823113, 1.65939, 0.893986, -0.491064, 0.628746, -0.446673, -0.816463, -0.522648, 0.455216, -0.643395, 0.13782, -0.0372687, 0.483869, -1.46539, 1.32186, -0.0376635, 0.951807, 0.595687, -0.166958, 1.43169, -0.811143, -0.427218, 0.263116, 0.537191, 0.376229, 0.381638, 0.231701, 1.96601, 1.25224, -0.584862, 1.29871, 0.607602, 0.417953, -0.0156447, 0.953986, 0.537903, 1.59606, -2.68816, 0.207514, -0.737157, -1.52248, -0.376472, 1.0603, 0.124493, 0.151912, -0.0137903, 0.415566, -0.89659, -1.33803, 0.0404713, -0.78972, -0.860152, -1.83271, -1.35263, -1.56942, 0.0819071, -0.890231, -0.989597, 2.7382, -2.21318, 0.275371, -0.363027, -0.377948, 0.255572, -0.0199111, -0.0102739, 1.90416, -0.982226, -0.724709, 0.876104, 0.577596, 0.739668, 0.57291, 0.566372, 0.0479212, 0.644455, -1.17632, 1.42828, -0.355559, 0.685665, -1.72952, -0.534498, 0.637149, 2.17758, -0.364661, -1.00121, 0.367557, -1.02091, -1.4776, 0.725126, -1.76422, -0.122198, 0.119518, -1.54856, -1.1012, -2.29664, 0.204291, -0.195299, -0.446781, -1.26199, 2.14003, -0.825896, -0.595367, 1.12235, -0.471528, 0.131953, -1.59619, 0.416828, 0.713689, -0.587769, -1.05023, 0.00980475, 1.76599, 0.0745339, 0.450325, 1.12436, 1.67582, -0.942351, -0.491541, 0.709525, -0.487695, -0.291505, -0.48815, -1.34943, 0.303068, 0.807472, -0.825592, -0.0444731, -0.176398, -1.00344, -0.165851, -1.66623, -0.789973, 0.507125, 1.01446, -2.12619, 0.874163, 0.971515, 0.977665, 0.0938577, -0.686041, -0.644779, 0.943301, 1.46686, -0.964762, -0.00447505, -1.23897, 0.15367, -1.02906, -0.0273253, 0.308131, 0.225627, 0.756117, -0.11236, 0.835155, -0.856331, -0.886937, -0.339958, 0.0355568, 1.22602, -0.612489, 1.68121, 0.706232, 1.85257, -0.75296, -1.12535, -0.910917, 0.551874, -1.46327, 0.00865985, -1.12411, -0.162599, -0.0184118, -0.197287, -0.86977, -1.55077, -0.379717, 0.0316421, -1.20812, 1.13736, 0.619865, -0.939715, 0.0667614, 0.00686165, 0.616259, 1.63133, -0.54383, 0.351478, 0.272913, 0.42533, -0.0899168, 0.586253, -0.870667, 0.907813, 0.677455, 0.708735, -1.92561, 0.401518, -0.179322, 0.250642, -0.850702, -2.48624, 0.426637, -1.03109, 1.21379, -0.844781, -0.928402, 0.926769, -0.52497, 2.14789, -0.222116, 1.10925, -1.01165, -0.0366401, -1.97484, 0.488016, -0.321355, 0.202876, 0.0247562, 1.17442, 1.05137, -1.34831, -0.47383, 0.474645, 0.692987, -1.95512, 0.403126, -1.08174, 0.587523, 0.224685, 0.113976, 0.392671, -0.0299585, -0.524412, -0.0033372, -0.54307, -0.311649, 1.33328, 0.512145, -1.60303, -0.8221, -2.56427, 1.25369, -1.55067, -0.878728, 0.221357, -0.0904412, 1.52859, -1.18804, 0.402625, -1.16083, 0.39691, 0.935227, 0.444264, 0.741051, 0.536484, -0.0791178, 0.806068, -0.0830614, -0.257476, -0.765558, 1.7128, -1.03352, 0.433021, 1.00674, 1.58481, 1.59005, 0.601257, -0.274755, 1.06977, -0.562692, -1.07332, -1.14198, -0.601941, -0.925925, 0.80767, 0.489058, 0.57053, -0.897764, 1.9586, 0.868494, 0.740601, -1.03758, -0.372745, 0.164664, 0.0811351, -0.817212, -1.12896, 0.594151, -0.0329436, -0.122773, 0.0808823, 0.385804, 0.639648, -0.912169, 0.307732, -1.38003, -0.397612, -0.133082, -1.43322, -0.831425, -1.28417, -1.05794, 0.273638, -0.161187, 0.795844, -0.746132, -0.179889, 1.81498, 0.128769, -0.519487, -0.87802, -0.900833, 0.404327, -0.66114, -0.447534, -0.595867, -0.681356, 2.24375, -2.5913, 1.97815, -0.549085, -1.20728, -0.0859498, -2.48846, 1.58944, 0.991977, -1.08182, 0.52219, 0.923906, -1.4336, -1.13062, -2.05621, -0.809792, -0.807982, 0.578457, -0.728412, 0.970844, 1.10448, 1.89311, 0.171628, -0.712558, -1.24433, 0.533498, 0.321742, 1.00532, 0.542418, 2.07117, 0.14846, 0.806795, 0.680226, 0.763414, 0.892606, 1.41907, -0.916613, 0.363102, 2.46675, -0.991078, 1.06574, -2.41697, -0.105771, 0.417803, 0.102356, 1.26532, 0.254081, 0.656156, 1.361, -0.446288, -2.74966, 0.565307, 0.60789, 1.02218, 0.403079], piv=Array{Int64, (1,)}[1], rank=1, cnames=Array{String, (1,)}[""])], sqrtwts=Array{Float64, (400,)}[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], A=BlockArrays.BlockArray{Float64, 2, Array{AbstractArray{Float64, 2}, 2}, Tuple{BlockArrays.BlockedUnitRange{Array{Int64, 1}}, BlockArrays.BlockedUnitRange{Array{Int64, 1}}}}(blocks=Array{AbstractArray{Float64, 2}, (4, 4)}[
  MixedModels.UniformBlockDiagonal{Float64}(data=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], facevec=Array{Base.SubArray{Float64, 2, Array{Float64, 3}, I, L} where L where I, (20,)}[
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 1), offset1=0, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 2), offset1=4, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 3), offset1=8, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 4), offset1=12, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 5), offset1=16, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 6), offset1=20, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 7), offset1=24, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 8), offset1=28, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 9), offset1=32, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 10), offset1=36, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 11), offset1=40, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 12), offset1=44, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 13), offset1=48, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 14), offset1=52, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 15), offset1=56, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 16), offset1=60, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 17), offset1=64, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 18), offset1=68, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 19), offset1=72, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 20), offset1=76, stride1=1)]),
  Array{Float64, (20, 40)}[2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
  Array{Float64, (2, 40)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10],
  Array{Float64, (1, 40)}[-9.6208, -5.64077, -7.50578, -3.1027, 4.67897, 1.64442, 0.960858, 0.416538, -8.28347, -4.77454, 5.56938, 1.62464, 2.81237, 0.515815, 5.45085, 3.86912, 6.33354, 4.09872, 3.36702, 0.289416, -0.0105093, -0.0781911, 2.50619, -0.753268, 3.38372, 2.43935, -6.32297, -4.10723, 0.0442797, 2.34735, -1.22954, -1.76855, -1.32917, -1.25293, -9.48085, -7.3464, -2.9033, -6.03751, -4.75131, -3.38146],
  #<null>,
  MixedModels.UniformBlockDiagonal{Float64}(data=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], facevec=Array{Base.SubArray{Float64, 2, Array{Float64, 3}, I, L} where L where I, (10,)}[
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 1), offset1=0, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 2), offset1=4, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 3), offset1=8, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 4), offset1=12, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 5), offset1=16, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 6), offset1=20, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 7), offset1=24, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 8), offset1=28, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 9), offset1=32, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 10), offset1=36, stride1=1)]),
  Array{Float64, (2, 20)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20],
  Array{Float64, (1, 20)}[-3.10821, -3.89852, 2.1575, 4.03791, -3.61872, -3.2097, -9.05002, -1.43327, 0.102481, -3.23715, -2.13812, -5.71112, -6.04748, -1.68031, 6.05859, -1.90192, -13.2111, -7.53379, 12.5245, 3.56969],
  #<null>,
  #<null>,
  Array{Float64, (2, 2)}[400, 200, 200, 200],
  Array{Float64, (1, 2)}[-16.3305, -20.9982],
  #<null>,
  #<null>,
  #<null>,
  Array{Float64, (1, 1)}[427.28]], axes=(BlockArrays.BlockedUnitRange{Array{Int64, 1}}(first=1, lasts=Array{Int64, (4,)}[40, 60, 62, 63]), BlockArrays.BlockedUnitRange{Array{Int64, 1}}(first=1, lasts=Array{Int64, (4,)}[40, 60, 62, 63]))), L=BlockArrays.BlockArray{Float64, 2, Array{AbstractArray{Float64, 2}, 2}, Tuple{BlockArrays.BlockedUnitRange{Array{Int64, 1}}, BlockArrays.BlockedUnitRange{Array{Int64, 1}}}}(blocks=Array{AbstractArray{Float64, 2}, (4, 4)}[
  MixedModels.UniformBlockDiagonal{Float64}(data=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], facevec=Array{Base.SubArray{Float64, 2, Array{Float64, 3}, I, L} where L where I, (20,)}[
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 1), offset1=0, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 2), offset1=4, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 3), offset1=8, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 4), offset1=12, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 5), offset1=16, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 6), offset1=20, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 7), offset1=24, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 8), offset1=28, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 9), offset1=32, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 10), offset1=36, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 11), offset1=40, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 12), offset1=44, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 13), offset1=48, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 14), offset1=52, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 15), offset1=56, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 16), offset1=60, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 17), offset1=64, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 18), offset1=68, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 19), offset1=72, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 20), offset1=76, stride1=1)]),
  Array{Float64, (20, 40)}[0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724],
  Array{Float64, (2, 40)}[4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724],
  Array{Float64, (1, 40)}[-2.09943, -0.424179, -1.6379, 0.188771, 1.02103, -0.233685, 0.209676, -0.016421, -1.8076, -0.332328, 1.21534, -0.411369, 0.61371, -0.329678, 1.18947, 0.509878, 1.38209, 0.433512, 0.734745, -0.526072, -0.00229331, -0.0293026, 0.546896, -0.779419, 0.738388, 0.331538, -1.37978, -0.438935, 0.00966262, 0.931391, -0.268307, -0.473675, -0.290049, -0.248232, -2.06889, -1.13376, -0.633552, -1.86377, -1.03682, -0.447999],
  #<null>,
  Array{Float64, (20, 20)}[6.0978, 2.95439, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, 20, 3.23103, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, 0, 0, 6.06545, 2.93469, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, 0, 0, 20, 3.22133, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, 0, 0, 0, 0, 6.02539, 2.90997, -0.779159, -0.409325, -0.779159, -0.409325, -0.779159, -0.409325, -0.779159, -0.409325, -0.779159, -0.409325, -0.779159, -0.409325, -0.779159, -0.409325, 0, 0, 0, 0, 20, 3.20994, -0.0619988, -0.323145, -0.0619988, -0.323145, -0.0619988, -0.323145, -0.0619988, -0.323145, -0.0619988, -0.323145, -0.0619988, -0.323145, -0.0619988, -0.323145, 0, 0, 0, 0, 0, 0, 5.97447, 2.87803, -0.888056, -0.469548, -0.888056, -0.469548, -0.888056, -0.469548, -0.888056, -0.469548, -0.888056, -0.469548, -0.888056, -0.469548, 0, 0, 0, 0, 0, 0, 20, 3.19634, -0.0780432, -0.359472, -0.0780432, -0.359472, -0.0780432, -0.359472, -0.0780432, -0.359472, -0.0780432, -0.359472, -0.0780432, -0.359472, 0, 0, 0, 0, 0, 0, 0, 0, 5.90759, 2.83528, -1.03264, -0.550198, -1.03264, -0.550198, -1.03264, -0.550198, -1.03264, -0.550198, -1.03264, -0.550198, 0, 0, 0, 0, 0, 0, 0, 0, 20, 3.1798, -0.101429, -0.405716, -0.101429, -0.405716, -0.101429, -0.405716, -0.101429, -0.405716, -0.101429, -0.405716, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.81575, 2.77528, -1.23407, -0.663654, -1.23407, -0.663654, -1.23407, -0.663654, -1.23407, -0.663654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 3.15918, -0.137619, -0.467069, -0.137619, -0.467069, -0.137619, -0.467069, -0.137619, -0.467069, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.68165, 2.68533, -1.53457, -0.834779, -1.53457, -0.834779, -1.53457, -0.834779, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 3.13258, -0.198588, -0.55364, -0.198588, -0.55364, -0.198588, -0.55364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.46688, 2.53638, -2.03283, -1.12201, -2.03283, -1.12201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 3.09635, -0.315808, -0.689036, -0.315808, -0.689036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.06504, 2.24433, -3.02967, -1.7043, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 3.04137, -0.602613, -0.949572, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.01405, 1.40306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2.91754],
  Array{Float64, (2, 20)}[0.300446, 0.0250372, -0.22747, 0.496876, 0.331481, 0.0311898, -0.243258, 0.537004, 0.369835, 0.03949, -0.261146, 0.584291, 0.418508, 0.05104, -0.281428, 0.6409, 0.482441, 0.0677571, -0.304287, 0.710003, 0.570414, 0.0932407, -0.329451, 0.79652, 0.699793, 0.134987, -0.355052, 0.908691, 0.910821, 0.21119, -0.373228, 1.06226, 1.32537, 0.378937, -0.346959, 1.29653, 2.62064, 0.958806, 0.0588808, 1.82531],
  Array{Float64, (1, 20)}[-0.238117, -0.404567, 0.60139, 1.23377, -0.273637, -0.040977, -1.22117, 1.32587, 0.148233, -0.502411, -0.217132, -1.00372, -0.9818, 0.728097, 0.944922, -1.09497, -2.47359, -0.25262, 1.38524, -0.553744],
  #<null>,
  #<null>,
  Array{Float64, (2, 2)}[2.54128, 0.0794151, 200, 2.5],
  Array{Float64, (1, 2)}[0.049118, -0.320823],
  #<null>,
  #<null>,
  #<null>,
  Array{Float64, (1, 1)}[19.344]], axes=(BlockArrays.BlockedUnitRange{Array{Int64, 1}}(first=1, lasts=Array{Int64, (4,)}[40, 60, 62, 63]), BlockArrays.BlockedUnitRange{Array{Int64, 1}}(first=1, lasts=Array{Int64, (4,)}[40, 60, 62, 63]))), optsum=MixedModels.OptSummary{Float64}(initial=Array{Float64, (6,)}[1, 0, 1, 1, 0, 1], lowerbd=Array{Float64, (6,)}[0, -inf, 0, 0, -inf, 0], finitial=1263.2, ftol_rel=1e-12, ftol_abs=1e-08, xtol_rel=0, xtol_abs=Array{Float64, (6,)}[1e-10, 1e-10, 1e-10, 1e-10, 1e-10, 1e-10], initial_step=Array{Float64, (6,)}[0.75, 1, 0.75, 0.75, 1, 0.75], maxfeval=-1, final=Array{Float64, (6,)}[1.75, 0, 1, 1, 0, 1], fmin=inf, feval=-1, optimizer=:LN_BOBYQA, returnvalue=:FAILURE, nAGQ=1, REML=false)), optsum=MixedModels.OptSummary{Float64}(initial=Array{Float64, (6,)}[1, 0, 1, 1, 0, 1], lowerbd=Array{Float64, (6,)}[0, -inf, 0, 0, -inf, 0], finitial=1263.2, ftol_rel=1e-12, ftol_abs=1e-08, xtol_rel=0, xtol_abs=Array{Float64, (6,)}[1e-10, 1e-10, 1e-10, 1e-10, 1e-10, 1e-10], initial_step=Array{Float64, (6,)}[0.75, 1, 0.75, 0.75, 1, 0.75], maxfeval=-1, final=Array{Float64, (6,)}[1.75, 0, 1, 1, 0, 1], fmin=inf, feval=-1, optimizer=:LN_BOBYQA, returnvalue=:FAILURE, nAGQ=1, REML=false), feval=Core.Box(contents=1)), o=<circular reference @-2>)]))
jl_type_error_rt at /workspace/srcdir/src/rtutils.c:118
jl_f_apply_type at /workspace/srcdir/src/builtins.c:970
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/src/julia.h:1692 [inlined]
do_apply at /workspace/srcdir/src/builtins.c:650
argtypes_to_type at ./compiler/typeutils.jl:46 [inlined]
abstract_call_known at ./compiler/abstractinterpretation.jl:886
abstract_call at ./compiler/abstractinterpretation.jl:909
abstract_call at ./compiler/abstractinterpretation.jl:894
abstract_eval at ./compiler/abstractinterpretation.jl:988
typeinf_local at ./compiler/abstractinterpretation.jl:1242
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1298
typeinf at ./compiler/typeinfer.jl:12
typeinf_ext at ./compiler/typeinfer.jl:570
typeinf_ext at ./compiler/typeinfer.jl:601
jfptr_typeinf_ext_20212.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/src/julia.h:1692 [inlined]
jl_type_infer at /workspace/srcdir/src/gf.c:300
jl_generate_fptr at /workspace/srcdir/src/jitlayers.cpp:265
jl_compile_method_internal at /workspace/srcdir/src/gf.c:1968
jl_compile_method_internal at /workspace/srcdir/src/gf.c:1923 [inlined]
_jl_invoke at /workspace/srcdir/src/gf.c:2228 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
Ref at ./refpointer.jl:96
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
inferencebarrier at ./essentials.jl:718
show_default at ./show.jl:382 [inlined]
show at ./show.jl:379
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
print at ./strings/io.jl:35
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
print_to_string at ./strings/io.jl:135
string at ./strings/io.jl:174 [inlined]
showerror at ./errorshow.jl:154
#685 at ./errorshow.jl:171
unknown function (ip: 0x7f075e4be961)
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
#with_output_color#741 at ./util.jl:72
unknown function (ip: 0x7f075e4bd022)
with_output_color at ./util.jl:70 [inlined]
#showerror#684 at ./errorshow.jl:170
showerror##kw at ./errorshow.jl:169
unknown function (ip: 0x7f075e4bcd48)
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
show_exception_stack at ./errorshow.jl:818
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
#sprint#352 at ./strings/io.jl:105
sprint at ./strings/io.jl:101
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
Error at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:158
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/src/julia.h:1692 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:117
eval_value at /workspace/srcdir/src/interpreter.c:206
eval_stmt_value at /workspace/srcdir/src/interpreter.c:157 [inlined]
eval_body at /workspace/srcdir/src/interpreter.c:566
eval_body at /workspace/srcdir/src/interpreter.c:492
jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:660
macro expansion at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1120 [inlined]
top-level scope at /home/pkgeval/.julia/packages/MixedModels/ALNok/test/linalg.jl:35
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:827
jl_parse_eval_all at /workspace/srcdir/src/ast.c:913
jl_load_rewrite at /workspace/srcdir/src/toplevel.c:898
include at ./client.jl:457
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/src/julia.h:1692 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:117
eval_value at /workspace/srcdir/src/interpreter.c:206
eval_stmt_value at /workspace/srcdir/src/interpreter.c:157 [inlined]
eval_body at /workspace/srcdir/src/interpreter.c:566
jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:660
top-level scope at /home/pkgeval/.julia/packages/MixedModels/ALNok/test/runtests.jl:7
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:827
jl_parse_eval_all at /workspace/srcdir/src/ast.c:913
jl_load_rewrite at /workspace/srcdir/src/toplevel.c:898
include at ./client.jl:457
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/src/julia.h:1692 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:117
eval_value at /workspace/srcdir/src/interpreter.c:206
eval_stmt_value at /workspace/srcdir/src/interpreter.c:157 [inlined]
eval_body at /workspace/srcdir/src/interpreter.c:566
jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:660
top-level scope at none:6
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:827
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:777
jl_toplevel_eval_in at /workspace/srcdir/src/toplevel.c:867
eval at ./boot.jl:331
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
exec_options at ./client.jl:272
_start at ./client.jl:506
jfptr__start_57981.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/ui/../src/julia.h:1692 [inlined]
true_main at /workspace/srcdir/ui/repl.c:96
main at /workspace/srcdir/ui/repl.c:217
__libc_start_main at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)
unknown function (ip: 0x4015e4)
Internal error: encountered unexpected error in runtime:
MethodError(f=typeof(Core.Compiler.isprimitivetype)(), args=(NLopt.Opt(opt=0x0000000008aed590, cb=Array{NLopt.Callback_Data, (1,)}[NLopt.Callback_Data(f=getfield(MixedModels, Symbol("#obj#41")){Bool, MixedModels.LinearMixedModel{Float64}, MixedModels.OptSummary{Float64}}(verbose=false, m=MixedModels.LinearMixedModel{Float64}(formula=StatsModels.FormulaTerm{StatsModels.ContinuousTerm{Float64}, Tuple{StatsModels.MatrixTerm{Tuple{StatsModels.InterceptTerm{true}, StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}}}, MixedModels.RandomEffectsTerm, MixedModels.RandomEffectsTerm}}(lhs=StatsModels.ContinuousTerm{Float64}(sym=:Y, mean=-0.0408263, var=1.06921, min=-2.74966, max=3.3424), rhs=(StatsModels.MatrixTerm{Tuple{StatsModels.InterceptTerm{true}, StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}}}(terms=(StatsModels.InterceptTerm{true}(), StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}(sym=:A, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (2, 1)}[0, 1], termnames=Array{Char, (1,)}[Char(0x59000000)], levels=Array{Char, (2,)}[Char(0x4e000000), Char(0x59000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (16,)}[0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00], keys=Array{Char, (16,)}[Char(0x8a3b62d0), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x59000000), Char(0x8b319250), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x00007f07), Char(0x8a4417a0), Char(0x00007f07), Char(0x4e000000), Char(0x00000000)], vals=Array{Int64, (16,)}[139669475227536, 139669475228752, 139669475290032, 139670361216560, 139669439890352, 2, 139669439890624, 139669439890848, 139669475280944, 139669475280976, 139669439893888, 0, 0, 0, 1, 139669535486688], ndel=0, count=2, age=0x0000000000000002, idxfloor=1, maxprobe=0))))), MixedModels.RandomEffectsTerm(lhs=StatsModels.MatrixTerm{Tuple{StatsModels.InterceptTerm{true}, StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}}}(terms=(StatsModels.InterceptTerm{true}(), StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}(sym=:A, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (2, 1)}[0, 1], termnames=Array{Char, (1,)}[Char(0x59000000)], levels=Array{Char, (2,)}[Char(0x4e000000), Char(0x59000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (16,)}[0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00], keys=Array{Char, (16,)}[Char(0x8a3b62d0), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x59000000), Char(0x8b319250), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x00007f07), Char(0x8a4417a0), Char(0x00007f07), Char(0x4e000000), Char(0x00000000)], vals=Array{Int64, (16,)}[139669475227536, 139669475228752, 139669475290032, 139670361216560, 139669439890352, 2, 139669439890624, 139669439890848, 139669475280944, 139669475280976, 139669439893888, 0, 0, 0, 1, 139669535486688], ndel=0, count=2, age=0x0000000000000002, idxfloor=1, maxprobe=0))))), rhs=StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 19}(sym=:G, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (20, 19)}[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], termnames=Array{Char, (19,)}[Char(0x42000000), Char(0x43000000), Char(0x44000000), Char(0x45000000), Char(0x46000000), Char(0x47000000), Char(0x48000000), Char(0x49000000), Char(0x4a000000), Char(0x4b000000), Char(0x4c000000), Char(0x4d000000), Char(0x4e000000), Char(0x4f000000), Char(0x50000000), Char(0x51000000), Char(0x52000000), Char(0x53000000), Char(0x54000000)], levels=Array{Char, (20,)}[Char(0x41000000), Char(0x42000000), Char(0x43000000), Char(0x44000000), Char(0x45000000), Char(0x46000000), Char(0x47000000), Char(0x48000000), Char(0x49000000), Char(0x4a000000), Char(0x4b000000), Char(0x4c000000), Char(0x4d000000), Char(0x4e000000), Char(0x4f000000), Char(0x50000000), Char(0x51000000), Char(0x52000000), Char(0x53000000), Char(0x54000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (64,)}[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], keys=Array{Char, (64,)}[Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x45000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x43000000), Char(0x42000000), Char(0x00000000), Char(0x44000000), Char(0x41000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x52000000), Char(0x47000000), Char(0x00000000), Char(0x46000000), Char(0x4e000000), Char(0x4d000000), Char(0x4b000000), Char(0x4a000000), Char(0x4f000000), Char(0x49000000), Char(0x50000000), Char(0x48000000), Char(0x51000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x53000000), Char(0x54000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x4c000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000)], vals=Array{Int64, (64,)}[12, 16, 19, 22, 25, 26, 43, 45, 5, 50, 62, 68, 71, 72, 74, 3, 2, 86, 4, 1, 98, 101, 102, 104, 110, 113, 118, 18, 7, 125, 6, 14, 13, 11, 10, 15, 9, 16, 8, 17, 150, 151, 154, 156, 157, 19, 20, 166, 167, 169, 170, 171, 12, 174, 177, 178, 180, 183, 186, 188, 191, 197, 198, 0], ndel=0, count=20, age=0x0000000000000015, idxfloor=1, maxprobe=9)))), MixedModels.RandomEffectsTerm(lhs=StatsModels.MatrixTerm{Tuple{StatsModels.InterceptTerm{true}, StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}}}(terms=(StatsModels.InterceptTerm{true}(), StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}(sym=:A, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (2, 1)}[0, 1], termnames=Array{Char, (1,)}[Char(0x59000000)], levels=Array{Char, (2,)}[Char(0x4e000000), Char(0x59000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (16,)}[0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00], keys=Array{Char, (16,)}[Char(0x8a3b62d0), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x59000000), Char(0x8b319250), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x00007f07), Char(0x8a4417a0), Char(0x00007f07), Char(0x4e000000), Char(0x00000000)], vals=Array{Int64, (16,)}[139669475227536, 139669475228752, 139669475290032, 139670361216560, 139669439890352, 2, 139669439890624, 139669439890848, 139669475280944, 139669475280976, 139669439893888, 0, 0, 0, 1, 139669535486688], ndel=0, count=2, age=0x0000000000000002, idxfloor=1, maxprobe=0))))), rhs=StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 9}(sym=:H, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (10, 9)}[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], termnames=Array{Char, (9,)}[Char(0x62000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x66000000), Char(0x67000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000)], levels=Array{Char, (10,)}[Char(0x61000000), Char(0x62000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x66000000), Char(0x67000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (16,)}[0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00], keys=Array{Char, (16,)}[Char(0x8a3b62d0), Char(0x00007f07), Char(0x66000000), Char(0x00000000), Char(0x8a3e9680), Char(0x00007f07), Char(0x67000000), Char(0x61000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000), Char(0x62000000), Char(0x00000000)], vals=Array{Int64, (16,)}[1, 1, 6, 0, 0, 1, 7, 1, 3, 4, 5, 8, 9, 10, 2, 139670360646352], ndel=0, count=10, age=0x000000000000000a, idxfloor=1, maxprobe=7)))))), allterms=Array{Union{MixedModels.FeMat{Float64, S} where S<:(AbstractArray{T, 2} where T), MixedModels.ReMat{Float64, S} where S}, (4,)}[
  MixedModels.ReMat{Float64, 2}(trm=StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 19}(sym=:G, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (20, 19)}[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], termnames=Array{Char, (19,)}[Char(0x42000000), Char(0x43000000), Char(0x44000000), Char(0x45000000), Char(0x46000000), Char(0x47000000), Char(0x48000000), Char(0x49000000), Char(0x4a000000), Char(0x4b000000), Char(0x4c000000), Char(0x4d000000), Char(0x4e000000), Char(0x4f000000), Char(0x50000000), Char(0x51000000), Char(0x52000000), Char(0x53000000), Char(0x54000000)], levels=Array{Char, (20,)}[Char(0x41000000), Char(0x42000000), Char(0x43000000), Char(0x44000000), Char(0x45000000), Char(0x46000000), Char(0x47000000), Char(0x48000000), Char(0x49000000), Char(0x4a000000), Char(0x4b000000), Char(0x4c000000), Char(0x4d000000), Char(0x4e000000), Char(0x4f000000), Char(0x50000000), Char(0x51000000), Char(0x52000000), Char(0x53000000), Char(0x54000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (64,)}[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], keys=Array{Char, (64,)}[Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x45000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x43000000), Char(0x42000000), Char(0x00000000), Char(0x44000000), Char(0x41000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x52000000), Char(0x47000000), Char(0x00000000), Char(0x46000000), Char(0x4e000000), Char(0x4d000000), Char(0x4b000000), Char(0x4a000000), Char(0x4f000000), Char(0x49000000), Char(0x50000000), Char(0x48000000), Char(0x51000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x53000000), Char(0x54000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x4c000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000)], vals=Array{Int64, (64,)}[12, 16, 19, 22, 25, 26, 43, 45, 5, 50, 62, 68, 71, 72, 74, 3, 2, 86, 4, 1, 98, 101, 102, 104, 110, 113, 118, 18, 7, 125, 6, 14, 13, 11, 10, 15, 9, 16, 8, 17, 150, 151, 154, 156, 157, 19, 20, 166, 167, 169, 170, 171, 12, 174, 177, 178, 180, 183, 186, 188, 191, 197, 198, 0], ndel=0, count=20, age=0x0000000000000015, idxfloor=1, maxprobe=9))), refs=Array{Int32, (400,)}[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20], levels=Array{Char, (20,)}[Char(0x41000000), Char(0x42000000), Char(0x43000000), Char(0x44000000), Char(0x45000000), Char(0x46000000), Char(0x47000000), Char(0x48000000), Char(0x49000000), Char(0x4a000000), Char(0x4b000000), Char(0x4c000000), Char(0x4d000000), Char(0x4e000000), Char(0x4f000000), Char(0x50000000), Char(0x51000000), Char(0x52000000), Char(0x53000000), Char(0x54000000)], cnames=Array{String, (2,)}[
  "(Intercept)",
  "A: Y"], z=Array{Float64, (2, 400)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], wtz=Array{Float64, (2, 400)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], λ=LinearAlgebra.LowerTriangular{Float64, Array{Float64, 2}}(data=Array{Float64, (2, 2)}[1, 0, 0, 1]), inds=Array{Int64, (3,)}[1, 2, 4], adjA=SparseArrays.SparseMatrixCSC{Float64, Int32}(m=40, n=400, colptr=Array{Int32, (401,)}[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 583, 585, 587, 589, 591, 593, 595, 597, 599, 601, 603, 605, 607, 609, 611, 613, 615, 617, 619, 621, 623, 625, 627, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 739, 741, 743, 745, 747, 749, 751, 753, 755, 757, 759, 761, 763, 765, 767, 769, 771, 773, 775, 777, 779, 781, 783, 785, 787, 789, 791, 793, 795, 797, 799, 801], rowval=Array{Int32, (800,)}[1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40], nzval=Array{Float64, (800,)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1]), scratch=Array{Float64, (2, 20)}[-9.6208, -5.64077, -7.50578, -3.1027, 4.67897, 1.64442, 0.960858, 0.416538, -8.28347, -4.77454, 5.56938, 1.62464, 2.81237, 0.515815, 5.45085, 3.86912, 6.33354, 4.09872, 3.36702, 0.289416, -0.0105093, -0.0781911, 2.50619, -0.753268, 3.38372, 2.43935, -6.32297, -4.10723, 0.0442797, 2.34735, -1.22954, -1.76855, -1.32917, -1.25293, -9.48085, -7.3464, -2.9033, -6.03751, -4.75131, -3.38146]),
  MixedModels.ReMat{Float64, 2}(trm=StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 9}(sym=:H, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (10, 9)}[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], termnames=Array{Char, (9,)}[Char(0x62000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x66000000), Char(0x67000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000)], levels=Array{Char, (10,)}[Char(0x61000000), Char(0x62000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x66000000), Char(0x67000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (16,)}[0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00], keys=Array{Char, (16,)}[Char(0x8a3b62d0), Char(0x00007f07), Char(0x66000000), Char(0x00000000), Char(0x8a3e9680), Char(0x00007f07), Char(0x67000000), Char(0x61000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000), Char(0x62000000), Char(0x00000000)], vals=Array{Int64, (16,)}[1, 1, 6, 0, 0, 1, 7, 1, 3, 4, 5, 8, 9, 10, 2, 139670360646352], ndel=0, count=10, age=0x000000000000000a, idxfloor=1, maxprobe=7))), refs=Array{Int32, (400,)}[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], levels=Array{Char, (10,)}[Char(0x61000000), Char(0x62000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x66000000), Char(0x67000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000)], cnames=Array{String, (2,)}[
  "(Intercept)",
  "A: Y"], z=Array{Float64, (2, 400)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], wtz=Array{Float64, (2, 400)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], λ=LinearAlgebra.LowerTriangular{Float64, Array{Float64, 2}}(data=Array{Float64, (2, 2)}[1, 0, 0, 1]), inds=Array{Int64, (3,)}[1, 2, 4], adjA=SparseArrays.SparseMatrixCSC{Float64, Int32}(m=20, n=400, colptr=Array{Int32, (401,)}[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 583, 585, 587, 589, 591, 593, 595, 597, 599, 601, 603, 605, 607, 609, 611, 613, 615, 617, 619, 621, 623, 625, 627, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 739, 741, 743, 745, 747, 749, 751, 753, 755, 757, 759, 761, 763, 765, 767, 769, 771, 773, 775, 777, 779, 781, 783, 785, 787, 789, 791, 793, 795, 797, 799, 801], rowval=Array{Int32, (800,)}[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20], nzval=Array{Float64, (800,)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1]), scratch=Array{Float64, (2, 10)}[-3.10821, -3.89852, 2.1575, 4.03791, -3.61872, -3.2097, -9.05002, -1.43327, 0.102481, -3.23715, -2.13812, -5.71112, -6.04748, -1.68031, 6.05859, -1.90192, -13.2111, -7.53379, 12.5245, 3.56969]),
  MixedModels.FeMat{Float64, Array{Float64, 2}}(x=Array{Float64, (400, 2)}[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], wtx=Array{Float64, (400, 2)}[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], piv=Array{Int64, (2,)}[1, 2], rank=2, cnames=Array{String, (2,)}[
  "(Intercept)",
  "A: Y"]),
  MixedModels.FeMat{Float64, Array{Float64, 2}}(x=Array{Float64, (400, 1)}[-0.160767, -1.48275, -0.384419, -1.3541, 1.03842, -1.16268, -0.0202548, -0.747563, 1.32394, -1.26479, -1.1589, 0.228077, -1.26447, -0.0305313, -1.73483, 1.10785, -0.0966725, 3.3424, 1.70391, -1.17272, -2.05007, -0.536018, 0.920166, -2.08457, 2.85367, 0.298823, 0.30227, -0.823113, 1.65939, 0.893986, -0.491064, 0.628746, -0.446673, -0.816463, -0.522648, 0.455216, -0.643395, 0.13782, -0.0372687, 0.483869, -1.46539, 1.32186, -0.0376635, 0.951807, 0.595687, -0.166958, 1.43169, -0.811143, -0.427218, 0.263116, 0.537191, 0.376229, 0.381638, 0.231701, 1.96601, 1.25224, -0.584862, 1.29871, 0.607602, 0.417953, -0.0156447, 0.953986, 0.537903, 1.59606, -2.68816, 0.207514, -0.737157, -1.52248, -0.376472, 1.0603, 0.124493, 0.151912, -0.0137903, 0.415566, -0.89659, -1.33803, 0.0404713, -0.78972, -0.860152, -1.83271, -1.35263, -1.56942, 0.0819071, -0.890231, -0.989597, 2.7382, -2.21318, 0.275371, -0.363027, -0.377948, 0.255572, -0.0199111, -0.0102739, 1.90416, -0.982226, -0.724709, 0.876104, 0.577596, 0.739668, 0.57291, 0.566372, 0.0479212, 0.644455, -1.17632, 1.42828, -0.355559, 0.685665, -1.72952, -0.534498, 0.637149, 2.17758, -0.364661, -1.00121, 0.367557, -1.02091, -1.4776, 0.725126, -1.76422, -0.122198, 0.119518, -1.54856, -1.1012, -2.29664, 0.204291, -0.195299, -0.446781, -1.26199, 2.14003, -0.825896, -0.595367, 1.12235, -0.471528, 0.131953, -1.59619, 0.416828, 0.713689, -0.587769, -1.05023, 0.00980475, 1.76599, 0.0745339, 0.450325, 1.12436, 1.67582, -0.942351, -0.491541, 0.709525, -0.487695, -0.291505, -0.48815, -1.34943, 0.303068, 0.807472, -0.825592, -0.0444731, -0.176398, -1.00344, -0.165851, -1.66623, -0.789973, 0.507125, 1.01446, -2.12619, 0.874163, 0.971515, 0.977665, 0.0938577, -0.686041, -0.644779, 0.943301, 1.46686, -0.964762, -0.00447505, -1.23897, 0.15367, -1.02906, -0.0273253, 0.308131, 0.225627, 0.756117, -0.11236, 0.835155, -0.856331, -0.886937, -0.339958, 0.0355568, 1.22602, -0.612489, 1.68121, 0.706232, 1.85257, -0.75296, -1.12535, -0.910917, 0.551874, -1.46327, 0.00865985, -1.12411, -0.162599, -0.0184118, -0.197287, -0.86977, -1.55077, -0.379717, 0.0316421, -1.20812, 1.13736, 0.619865, -0.939715, 0.0667614, 0.00686165, 0.616259, 1.63133, -0.54383, 0.351478, 0.272913, 0.42533, -0.0899168, 0.586253, -0.870667, 0.907813, 0.677455, 0.708735, -1.92561, 0.401518, -0.179322, 0.250642, -0.850702, -2.48624, 0.426637, -1.03109, 1.21379, -0.844781, -0.928402, 0.926769, -0.52497, 2.14789, -0.222116, 1.10925, -1.01165, -0.0366401, -1.97484, 0.488016, -0.321355, 0.202876, 0.0247562, 1.17442, 1.05137, -1.34831, -0.47383, 0.474645, 0.692987, -1.95512, 0.403126, -1.08174, 0.587523, 0.224685, 0.113976, 0.392671, -0.0299585, -0.524412, -0.0033372, -0.54307, -0.311649, 1.33328, 0.512145, -1.60303, -0.8221, -2.56427, 1.25369, -1.55067, -0.878728, 0.221357, -0.0904412, 1.52859, -1.18804, 0.402625, -1.16083, 0.39691, 0.935227, 0.444264, 0.741051, 0.536484, -0.0791178, 0.806068, -0.0830614, -0.257476, -0.765558, 1.7128, -1.03352, 0.433021, 1.00674, 1.58481, 1.59005, 0.601257, -0.274755, 1.06977, -0.562692, -1.07332, -1.14198, -0.601941, -0.925925, 0.80767, 0.489058, 0.57053, -0.897764, 1.9586, 0.868494, 0.740601, -1.03758, -0.372745, 0.164664, 0.0811351, -0.817212, -1.12896, 0.594151, -0.0329436, -0.122773, 0.0808823, 0.385804, 0.639648, -0.912169, 0.307732, -1.38003, -0.397612, -0.133082, -1.43322, -0.831425, -1.28417, -1.05794, 0.273638, -0.161187, 0.795844, -0.746132, -0.179889, 1.81498, 0.128769, -0.519487, -0.87802, -0.900833, 0.404327, -0.66114, -0.447534, -0.595867, -0.681356, 2.24375, -2.5913, 1.97815, -0.549085, -1.20728, -0.0859498, -2.48846, 1.58944, 0.991977, -1.08182, 0.52219, 0.923906, -1.4336, -1.13062, -2.05621, -0.809792, -0.807982, 0.578457, -0.728412, 0.970844, 1.10448, 1.89311, 0.171628, -0.712558, -1.24433, 0.533498, 0.321742, 1.00532, 0.542418, 2.07117, 0.14846, 0.806795, 0.680226, 0.763414, 0.892606, 1.41907, -0.916613, 0.363102, 2.46675, -0.991078, 1.06574, -2.41697, -0.105771, 0.417803, 0.102356, 1.26532, 0.254081, 0.656156, 1.361, -0.446288, -2.74966, 0.565307, 0.60789, 1.02218, 0.403079], wtx=Array{Float64, (400, 1)}[-0.160767, -1.48275, -0.384419, -1.3541, 1.03842, -1.16268, -0.0202548, -0.747563, 1.32394, -1.26479, -1.1589, 0.228077, -1.26447, -0.0305313, -1.73483, 1.10785, -0.0966725, 3.3424, 1.70391, -1.17272, -2.05007, -0.536018, 0.920166, -2.08457, 2.85367, 0.298823, 0.30227, -0.823113, 1.65939, 0.893986, -0.491064, 0.628746, -0.446673, -0.816463, -0.522648, 0.455216, -0.643395, 0.13782, -0.0372687, 0.483869, -1.46539, 1.32186, -0.0376635, 0.951807, 0.595687, -0.166958, 1.43169, -0.811143, -0.427218, 0.263116, 0.537191, 0.376229, 0.381638, 0.231701, 1.96601, 1.25224, -0.584862, 1.29871, 0.607602, 0.417953, -0.0156447, 0.953986, 0.537903, 1.59606, -2.68816, 0.207514, -0.737157, -1.52248, -0.376472, 1.0603, 0.124493, 0.151912, -0.0137903, 0.415566, -0.89659, -1.33803, 0.0404713, -0.78972, -0.860152, -1.83271, -1.35263, -1.56942, 0.0819071, -0.890231, -0.989597, 2.7382, -2.21318, 0.275371, -0.363027, -0.377948, 0.255572, -0.0199111, -0.0102739, 1.90416, -0.982226, -0.724709, 0.876104, 0.577596, 0.739668, 0.57291, 0.566372, 0.0479212, 0.644455, -1.17632, 1.42828, -0.355559, 0.685665, -1.72952, -0.534498, 0.637149, 2.17758, -0.364661, -1.00121, 0.367557, -1.02091, -1.4776, 0.725126, -1.76422, -0.122198, 0.119518, -1.54856, -1.1012, -2.29664, 0.204291, -0.195299, -0.446781, -1.26199, 2.14003, -0.825896, -0.595367, 1.12235, -0.471528, 0.131953, -1.59619, 0.416828, 0.713689, -0.587769, -1.05023, 0.00980475, 1.76599, 0.0745339, 0.450325, 1.12436, 1.67582, -0.942351, -0.491541, 0.709525, -0.487695, -0.291505, -0.48815, -1.34943, 0.303068, 0.807472, -0.825592, -0.0444731, -0.176398, -1.00344, -0.165851, -1.66623, -0.789973, 0.507125, 1.01446, -2.12619, 0.874163, 0.971515, 0.977665, 0.0938577, -0.686041, -0.644779, 0.943301, 1.46686, -0.964762, -0.00447505, -1.23897, 0.15367, -1.02906, -0.0273253, 0.308131, 0.225627, 0.756117, -0.11236, 0.835155, -0.856331, -0.886937, -0.339958, 0.0355568, 1.22602, -0.612489, 1.68121, 0.706232, 1.85257, -0.75296, -1.12535, -0.910917, 0.551874, -1.46327, 0.00865985, -1.12411, -0.162599, -0.0184118, -0.197287, -0.86977, -1.55077, -0.379717, 0.0316421, -1.20812, 1.13736, 0.619865, -0.939715, 0.0667614, 0.00686165, 0.616259, 1.63133, -0.54383, 0.351478, 0.272913, 0.42533, -0.0899168, 0.586253, -0.870667, 0.907813, 0.677455, 0.708735, -1.92561, 0.401518, -0.179322, 0.250642, -0.850702, -2.48624, 0.426637, -1.03109, 1.21379, -0.844781, -0.928402, 0.926769, -0.52497, 2.14789, -0.222116, 1.10925, -1.01165, -0.0366401, -1.97484, 0.488016, -0.321355, 0.202876, 0.0247562, 1.17442, 1.05137, -1.34831, -0.47383, 0.474645, 0.692987, -1.95512, 0.403126, -1.08174, 0.587523, 0.224685, 0.113976, 0.392671, -0.0299585, -0.524412, -0.0033372, -0.54307, -0.311649, 1.33328, 0.512145, -1.60303, -0.8221, -2.56427, 1.25369, -1.55067, -0.878728, 0.221357, -0.0904412, 1.52859, -1.18804, 0.402625, -1.16083, 0.39691, 0.935227, 0.444264, 0.741051, 0.536484, -0.0791178, 0.806068, -0.0830614, -0.257476, -0.765558, 1.7128, -1.03352, 0.433021, 1.00674, 1.58481, 1.59005, 0.601257, -0.274755, 1.06977, -0.562692, -1.07332, -1.14198, -0.601941, -0.925925, 0.80767, 0.489058, 0.57053, -0.897764, 1.9586, 0.868494, 0.740601, -1.03758, -0.372745, 0.164664, 0.0811351, -0.817212, -1.12896, 0.594151, -0.0329436, -0.122773, 0.0808823, 0.385804, 0.639648, -0.912169, 0.307732, -1.38003, -0.397612, -0.133082, -1.43322, -0.831425, -1.28417, -1.05794, 0.273638, -0.161187, 0.795844, -0.746132, -0.179889, 1.81498, 0.128769, -0.519487, -0.87802, -0.900833, 0.404327, -0.66114, -0.447534, -0.595867, -0.681356, 2.24375, -2.5913, 1.97815, -0.549085, -1.20728, -0.0859498, -2.48846, 1.58944, 0.991977, -1.08182, 0.52219, 0.923906, -1.4336, -1.13062, -2.05621, -0.809792, -0.807982, 0.578457, -0.728412, 0.970844, 1.10448, 1.89311, 0.171628, -0.712558, -1.24433, 0.533498, 0.321742, 1.00532, 0.542418, 2.07117, 0.14846, 0.806795, 0.680226, 0.763414, 0.892606, 1.41907, -0.916613, 0.363102, 2.46675, -0.991078, 1.06574, -2.41697, -0.105771, 0.417803, 0.102356, 1.26532, 0.254081, 0.656156, 1.361, -0.446288, -2.74966, 0.565307, 0.60789, 1.02218, 0.403079], piv=Array{Int64, (1,)}[1], rank=1, cnames=Array{String, (1,)}[""])], sqrtwts=Array{Float64, (400,)}[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], A=BlockArrays.BlockArray{Float64, 2, Array{AbstractArray{Float64, 2}, 2}, Tuple{BlockArrays.BlockedUnitRange{Array{Int64, 1}}, BlockArrays.BlockedUnitRange{Array{Int64, 1}}}}(blocks=Array{AbstractArray{Float64, 2}, (4, 4)}[
  MixedModels.UniformBlockDiagonal{Float64}(data=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], facevec=Array{Base.SubArray{Float64, 2, Array{Float64, 3}, I, L} where L where I, (20,)}[
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 1), offset1=0, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 2), offset1=4, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 3), offset1=8, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 4), offset1=12, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 5), offset1=16, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 6), offset1=20, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 7), offset1=24, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 8), offset1=28, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 9), offset1=32, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 10), offset1=36, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 11), offset1=40, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 12), offset1=44, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 13), offset1=48, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 14), offset1=52, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 15), offset1=56, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 16), offset1=60, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 17), offset1=64, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 18), offset1=68, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 19), offset1=72, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 20), offset1=76, stride1=1)]),
  Array{Float64, (20, 40)}[2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
  Array{Float64, (2, 40)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10],
  Array{Float64, (1, 40)}[-9.6208, -5.64077, -7.50578, -3.1027, 4.67897, 1.64442, 0.960858, 0.416538, -8.28347, -4.77454, 5.56938, 1.62464, 2.81237, 0.515815, 5.45085, 3.86912, 6.33354, 4.09872, 3.36702, 0.289416, -0.0105093, -0.0781911, 2.50619, -0.753268, 3.38372, 2.43935, -6.32297, -4.10723, 0.0442797, 2.34735, -1.22954, -1.76855, -1.32917, -1.25293, -9.48085, -7.3464, -2.9033, -6.03751, -4.75131, -3.38146],
  #<null>,
  MixedModels.UniformBlockDiagonal{Float64}(data=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], facevec=Array{Base.SubArray{Float64, 2, Array{Float64, 3}, I, L} where L where I, (10,)}[
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 1), offset1=0, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 2), offset1=4, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 3), offset1=8, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 4), offset1=12, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 5), offset1=16, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 6), offset1=20, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 7), offset1=24, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 8), offset1=28, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 9), offset1=32, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 10), offset1=36, stride1=1)]),
  Array{Float64, (2, 20)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20],
  Array{Float64, (1, 20)}[-3.10821, -3.89852, 2.1575, 4.03791, -3.61872, -3.2097, -9.05002, -1.43327, 0.102481, -3.23715, -2.13812, -5.71112, -6.04748, -1.68031, 6.05859, -1.90192, -13.2111, -7.53379, 12.5245, 3.56969],
  #<null>,
  #<null>,
  Array{Float64, (2, 2)}[400, 200, 200, 200],
  Array{Float64, (1, 2)}[-16.3305, -20.9982],
  #<null>,
  #<null>,
  #<null>,
  Array{Float64, (1, 1)}[427.28]], axes=(BlockArrays.BlockedUnitRange{Array{Int64, 1}}(first=1, lasts=Array{Int64, (4,)}[40, 60, 62, 63]), BlockArrays.BlockedUnitRange{Array{Int64, 1}}(first=1, lasts=Array{Int64, (4,)}[40, 60, 62, 63]))), L=BlockArrays.BlockArray{Float64, 2, Array{AbstractArray{Float64, 2}, 2}, Tuple{BlockArrays.BlockedUnitRange{Array{Int64, 1}}, BlockArrays.BlockedUnitRange{Array{Int64, 1}}}}(blocks=Array{AbstractArray{Float64, 2}, (4, 4)}[
  MixedModels.UniformBlockDiagonal{Float64}(data=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], facevec=Array{Base.SubArray{Float64, 2, Array{Float64, 3}, I, L} where L where I, (20,)}[
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 1), offset1=0, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 2), offset1=4, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 3), offset1=8, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 4), offset1=12, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 5), offset1=16, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 6), offset1=20, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 7), offset1=24, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 8), offset1=28, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 9), offset1=32, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 10), offset1=36, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 11), offset1=40, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 12), offset1=44, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 13), offset1=48, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 14), offset1=52, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 15), offset1=56, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 16), offset1=60, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 17), offset1=64, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 18), offset1=68, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 19), offset1=72, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 20), offset1=76, stride1=1)]),
  Array{Float64, (20, 40)}[0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724],
  Array{Float64, (2, 40)}[4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724],
  Array{Float64, (1, 40)}[-2.09943, -0.424179, -1.6379, 0.188771, 1.02103, -0.233685, 0.209676, -0.016421, -1.8076, -0.332328, 1.21534, -0.411369, 0.61371, -0.329678, 1.18947, 0.509878, 1.38209, 0.433512, 0.734745, -0.526072, -0.00229331, -0.0293026, 0.546896, -0.779419, 0.738388, 0.331538, -1.37978, -0.438935, 0.00966262, 0.931391, -0.268307, -0.473675, -0.290049, -0.248232, -2.06889, -1.13376, -0.633552, -1.86377, -1.03682, -0.447999],
  #<null>,
  Array{Float64, (20, 20)}[6.0978, 2.95439, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, 20, 3.23103, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, 0, 0, 6.06545, 2.93469, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, 0, 0, 20, 3.22133, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, 0, 0, 0, 0, 6.02539, 2.90997, -0.779159, -0.409325, -0.779159, -0.409325, -0.779159, -0.409325, -0.779159, -0.409325, -0.779159, -0.409325, -0.779159, -0.409325, -0.779159, -0.409325, 0, 0, 0, 0, 20, 3.20994, -0.0619988, -0.323145, -0.0619988, -0.323145, -0.0619988, -0.323145, -0.0619988, -0.323145, -0.0619988, -0.323145, -0.0619988, -0.323145, -0.0619988, -0.323145, 0, 0, 0, 0, 0, 0, 5.97447, 2.87803, -0.888056, -0.469548, -0.888056, -0.469548, -0.888056, -0.469548, -0.888056, -0.469548, -0.888056, -0.469548, -0.888056, -0.469548, 0, 0, 0, 0, 0, 0, 20, 3.19634, -0.0780432, -0.359472, -0.0780432, -0.359472, -0.0780432, -0.359472, -0.0780432, -0.359472, -0.0780432, -0.359472, -0.0780432, -0.359472, 0, 0, 0, 0, 0, 0, 0, 0, 5.90759, 2.83528, -1.03264, -0.550198, -1.03264, -0.550198, -1.03264, -0.550198, -1.03264, -0.550198, -1.03264, -0.550198, 0, 0, 0, 0, 0, 0, 0, 0, 20, 3.1798, -0.101429, -0.405716, -0.101429, -0.405716, -0.101429, -0.405716, -0.101429, -0.405716, -0.101429, -0.405716, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.81575, 2.77528, -1.23407, -0.663654, -1.23407, -0.663654, -1.23407, -0.663654, -1.23407, -0.663654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 3.15918, -0.137619, -0.467069, -0.137619, -0.467069, -0.137619, -0.467069, -0.137619, -0.467069, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.68165, 2.68533, -1.53457, -0.834779, -1.53457, -0.834779, -1.53457, -0.834779, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 3.13258, -0.198588, -0.55364, -0.198588, -0.55364, -0.198588, -0.55364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.46688, 2.53638, -2.03283, -1.12201, -2.03283, -1.12201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 3.09635, -0.315808, -0.689036, -0.315808, -0.689036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.06504, 2.24433, -3.02967, -1.7043, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 3.04137, -0.602613, -0.949572, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.01405, 1.40306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2.91754],
  Array{Float64, (2, 20)}[0.300446, 0.0250372, -0.22747, 0.496876, 0.331481, 0.0311898, -0.243258, 0.537004, 0.369835, 0.03949, -0.261146, 0.584291, 0.418508, 0.05104, -0.281428, 0.6409, 0.482441, 0.0677571, -0.304287, 0.710003, 0.570414, 0.0932407, -0.329451, 0.79652, 0.699793, 0.134987, -0.355052, 0.908691, 0.910821, 0.21119, -0.373228, 1.06226, 1.32537, 0.378937, -0.346959, 1.29653, 2.62064, 0.958806, 0.0588808, 1.82531],
  Array{Float64, (1, 20)}[-0.238117, -0.404567, 0.60139, 1.23377, -0.273637, -0.040977, -1.22117, 1.32587, 0.148233, -0.502411, -0.217132, -1.00372, -0.9818, 0.728097, 0.944922, -1.09497, -2.47359, -0.25262, 1.38524, -0.553744],
  #<null>,
  #<null>,
  Array{Float64, (2, 2)}[2.54128, 0.0794151, 200, 2.5],
  Array{Float64, (1, 2)}[0.049118, -0.320823],
  #<null>,
  #<null>,
  #<null>,
  Array{Float64, (1, 1)}[19.344]], axes=(BlockArrays.BlockedUnitRange{Array{Int64, 1}}(first=1, lasts=Array{Int64, (4,)}[40, 60, 62, 63]), BlockArrays.BlockedUnitRange{Array{Int64, 1}}(first=1, lasts=Array{Int64, (4,)}[40, 60, 62, 63]))), optsum=MixedModels.OptSummary{Float64}(initial=Array{Float64, (6,)}[1, 0, 1, 1, 0, 1], lowerbd=Array{Float64, (6,)}[0, -inf, 0, 0, -inf, 0], finitial=1263.2, ftol_rel=1e-12, ftol_abs=1e-08, xtol_rel=0, xtol_abs=Array{Float64, (6,)}[1e-10, 1e-10, 1e-10, 1e-10, 1e-10, 1e-10], initial_step=Array{Float64, (6,)}[0.75, 1, 0.75, 0.75, 1, 0.75], maxfeval=-1, final=Array{Float64, (6,)}[1.75, 0, 1, 1, 0, 1], fmin=inf, feval=-1, optimizer=:LN_BOBYQA, returnvalue=:FAILURE, nAGQ=1, REML=false)), optsum=MixedModels.OptSummary{Float64}(initial=Array{Float64, (6,)}[1, 0, 1, 1, 0, 1], lowerbd=Array{Float64, (6,)}[0, -inf, 0, 0, -inf, 0], finitial=1263.2, ftol_rel=1e-12, ftol_abs=1e-08, xtol_rel=0, xtol_abs=Array{Float64, (6,)}[1e-10, 1e-10, 1e-10, 1e-10, 1e-10, 1e-10], initial_step=Array{Float64, (6,)}[0.75, 1, 0.75, 0.75, 1, 0.75], maxfeval=-1, final=Array{Float64, (6,)}[1.75, 0, 1, 1, 0, 1], fmin=inf, feval=-1, optimizer=:LN_BOBYQA, returnvalue=:FAILURE, nAGQ=1, REML=false), feval=Core.Box(contents=1)), o=<circular reference @-2>)]),), world=0x0000000000000f56)
jl_method_error_bare at /workspace/srcdir/src/gf.c:1802
jl_method_error at /workspace/srcdir/src/gf.c:1820
jl_lookup_generic_ at /workspace/srcdir/src/gf.c:2377 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2398
sizeof_tfunc at ./compiler/tfuncs.jl:342
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/src/julia.h:1692 [inlined]
do_apply at /workspace/srcdir/src/builtins.c:650
builtin_tfunction at ./compiler/tfuncs.jl:1395
builtin_tfunction at ./compiler/tfuncs.jl:1309 [inlined]
abstract_call_known at ./compiler/abstractinterpretation.jl:703
abstract_call at ./compiler/abstractinterpretation.jl:909
abstract_call at ./compiler/abstractinterpretation.jl:894
abstract_eval at ./compiler/abstractinterpretation.jl:988
typeinf_local at ./compiler/abstractinterpretation.jl:1242
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1298
typeinf at ./compiler/typeinfer.jl:12
typeinf_ext at ./compiler/typeinfer.jl:570
typeinf_ext at ./compiler/typeinfer.jl:601
jfptr_typeinf_ext_20212.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/src/julia.h:1692 [inlined]
jl_type_infer at /workspace/srcdir/src/gf.c:300
jl_generate_fptr at /workspace/srcdir/src/jitlayers.cpp:265
jl_compile_method_internal at /workspace/srcdir/src/gf.c:1968
jl_compile_method_internal at /workspace/srcdir/src/gf.c:1923 [inlined]
_jl_invoke at /workspace/srcdir/src/gf.c:2228 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
_show_default at ./show.jl:389
show_default at ./show.jl:382 [inlined]
show at ./show.jl:379
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
print at ./strings/io.jl:35
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
print_to_string at ./strings/io.jl:135
string at ./strings/io.jl:174 [inlined]
showerror at ./errorshow.jl:154
#685 at ./errorshow.jl:171
unknown function (ip: 0x7f075e4be961)
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
#with_output_color#741 at ./util.jl:72
unknown function (ip: 0x7f075e4bd022)
with_output_color at ./util.jl:70 [inlined]
#showerror#684 at ./errorshow.jl:170
showerror##kw at ./errorshow.jl:169
unknown function (ip: 0x7f075e4bcd48)
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
show_exception_stack at ./errorshow.jl:818
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
#sprint#352 at ./strings/io.jl:105
sprint at ./strings/io.jl:101
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
Error at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:158
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/src/julia.h:1692 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:117
eval_value at /workspace/srcdir/src/interpreter.c:206
eval_stmt_value at /workspace/srcdir/src/interpreter.c:157 [inlined]
eval_body at /workspace/srcdir/src/interpreter.c:566
eval_body at /workspace/srcdir/src/interpreter.c:492
jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:660
macro expansion at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1120 [inlined]
top-level scope at /home/pkgeval/.julia/packages/MixedModels/ALNok/test/linalg.jl:35
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:827
jl_parse_eval_all at /workspace/srcdir/src/ast.c:913
jl_load_rewrite at /workspace/srcdir/src/toplevel.c:898
include at ./client.jl:457
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/src/julia.h:1692 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:117
eval_value at /workspace/srcdir/src/interpreter.c:206
eval_stmt_value at /workspace/srcdir/src/interpreter.c:157 [inlined]
eval_body at /workspace/srcdir/src/interpreter.c:566
jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:660
top-level scope at /home/pkgeval/.julia/packages/MixedModels/ALNok/test/runtests.jl:7
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:827
jl_parse_eval_all at /workspace/srcdir/src/ast.c:913
jl_load_rewrite at /workspace/srcdir/src/toplevel.c:898
include at ./client.jl:457
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/src/julia.h:1692 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:117
eval_value at /workspace/srcdir/src/interpreter.c:206
eval_stmt_value at /workspace/srcdir/src/interpreter.c:157 [inlined]
eval_body at /workspace/srcdir/src/interpreter.c:566
jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:660
top-level scope at none:6
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:827
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:777
jl_toplevel_eval_in at /workspace/srcdir/src/toplevel.c:867
eval at ./boot.jl:331
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
exec_options at ./client.jl:272
_start at ./client.jl:506
jfptr__start_57981.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/ui/../src/julia.h:1692 [inlined]
true_main at /workspace/srcdir/ui/repl.c:96
main at /workspace/srcdir/ui/repl.c:217
__libc_start_main at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)
unknown function (ip: 0x4015e4)
Internal error: encountered unexpected error in runtime:
TypeError(func=:Tuple, context="parameter", expected=Type, got=NLopt.Opt(opt=0x0000000008aed590, cb=Array{NLopt.Callback_Data, (1,)}[NLopt.Callback_Data(f=getfield(MixedModels, Symbol("#obj#41")){Bool, MixedModels.LinearMixedModel{Float64}, MixedModels.OptSummary{Float64}}(verbose=false, m=MixedModels.LinearMixedModel{Float64}(formula=StatsModels.FormulaTerm{StatsModels.ContinuousTerm{Float64}, Tuple{StatsModels.MatrixTerm{Tuple{StatsModels.InterceptTerm{true}, StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}}}, MixedModels.RandomEffectsTerm, MixedModels.RandomEffectsTerm}}(lhs=StatsModels.ContinuousTerm{Float64}(sym=:Y, mean=-0.0408263, var=1.06921, min=-2.74966, max=3.3424), rhs=(StatsModels.MatrixTerm{Tuple{StatsModels.InterceptTerm{true}, StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}}}(terms=(StatsModels.InterceptTerm{true}(), StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}(sym=:A, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (2, 1)}[0, 1], termnames=Array{Char, (1,)}[Char(0x59000000)], levels=Array{Char, (2,)}[Char(0x4e000000), Char(0x59000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (16,)}[0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00], keys=Array{Char, (16,)}[Char(0x8a3b62d0), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x59000000), Char(0x8b319250), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x00007f07), Char(0x8a4417a0), Char(0x00007f07), Char(0x4e000000), Char(0x00000000)], vals=Array{Int64, (16,)}[139669475227536, 139669475228752, 139669475290032, 139670361216560, 139669439890352, 2, 139669439890624, 139669439890848, 139669475280944, 139669475280976, 139669439893888, 0, 0, 0, 1, 139669535486688], ndel=0, count=2, age=0x0000000000000002, idxfloor=1, maxprobe=0))))), MixedModels.RandomEffectsTerm(lhs=StatsModels.MatrixTerm{Tuple{StatsModels.InterceptTerm{true}, StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}}}(terms=(StatsModels.InterceptTerm{true}(), StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}(sym=:A, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (2, 1)}[0, 1], termnames=Array{Char, (1,)}[Char(0x59000000)], levels=Array{Char, (2,)}[Char(0x4e000000), Char(0x59000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (16,)}[0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00], keys=Array{Char, (16,)}[Char(0x8a3b62d0), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x59000000), Char(0x8b319250), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x00007f07), Char(0x8a4417a0), Char(0x00007f07), Char(0x4e000000), Char(0x00000000)], vals=Array{Int64, (16,)}[139669475227536, 139669475228752, 139669475290032, 139670361216560, 139669439890352, 2, 139669439890624, 139669439890848, 139669475280944, 139669475280976, 139669439893888, 0, 0, 0, 1, 139669535486688], ndel=0, count=2, age=0x0000000000000002, idxfloor=1, maxprobe=0))))), rhs=StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 19}(sym=:G, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (20, 19)}[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], termnames=Array{Char, (19,)}[Char(0x42000000), Char(0x43000000), Char(0x44000000), Char(0x45000000), Char(0x46000000), Char(0x47000000), Char(0x48000000), Char(0x49000000), Char(0x4a000000), Char(0x4b000000), Char(0x4c000000), Char(0x4d000000), Char(0x4e000000), Char(0x4f000000), Char(0x50000000), Char(0x51000000), Char(0x52000000), Char(0x53000000), Char(0x54000000)], levels=Array{Char, (20,)}[Char(0x41000000), Char(0x42000000), Char(0x43000000), Char(0x44000000), Char(0x45000000), Char(0x46000000), Char(0x47000000), Char(0x48000000), Char(0x49000000), Char(0x4a000000), Char(0x4b000000), Char(0x4c000000), Char(0x4d000000), Char(0x4e000000), Char(0x4f000000), Char(0x50000000), Char(0x51000000), Char(0x52000000), Char(0x53000000), Char(0x54000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (64,)}[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], keys=Array{Char, (64,)}[Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x45000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x43000000), Char(0x42000000), Char(0x00000000), Char(0x44000000), Char(0x41000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x52000000), Char(0x47000000), Char(0x00000000), Char(0x46000000), Char(0x4e000000), Char(0x4d000000), Char(0x4b000000), Char(0x4a000000), Char(0x4f000000), Char(0x49000000), Char(0x50000000), Char(0x48000000), Char(0x51000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x53000000), Char(0x54000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x4c000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000)], vals=Array{Int64, (64,)}[12, 16, 19, 22, 25, 26, 43, 45, 5, 50, 62, 68, 71, 72, 74, 3, 2, 86, 4, 1, 98, 101, 102, 104, 110, 113, 118, 18, 7, 125, 6, 14, 13, 11, 10, 15, 9, 16, 8, 17, 150, 151, 154, 156, 157, 19, 20, 166, 167, 169, 170, 171, 12, 174, 177, 178, 180, 183, 186, 188, 191, 197, 198, 0], ndel=0, count=20, age=0x0000000000000015, idxfloor=1, maxprobe=9)))), MixedModels.RandomEffectsTerm(lhs=StatsModels.MatrixTerm{Tuple{StatsModels.InterceptTerm{true}, StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}}}(terms=(StatsModels.InterceptTerm{true}(), StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}(sym=:A, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (2, 1)}[0, 1], termnames=Array{Char, (1,)}[Char(0x59000000)], levels=Array{Char, (2,)}[Char(0x4e000000), Char(0x59000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (16,)}[0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00], keys=Array{Char, (16,)}[Char(0x8a3b62d0), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x59000000), Char(0x8b319250), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x00007f07), Char(0x8a4417a0), Char(0x00007f07), Char(0x4e000000), Char(0x00000000)], vals=Array{Int64, (16,)}[139669475227536, 139669475228752, 139669475290032, 139670361216560, 139669439890352, 2, 139669439890624, 139669439890848, 139669475280944, 139669475280976, 139669439893888, 0, 0, 0, 1, 139669535486688], ndel=0, count=2, age=0x0000000000000002, idxfloor=1, maxprobe=0))))), rhs=StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 9}(sym=:H, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (10, 9)}[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], termnames=Array{Char, (9,)}[Char(0x62000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x66000000), Char(0x67000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000)], levels=Array{Char, (10,)}[Char(0x61000000), Char(0x62000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x66000000), Char(0x67000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (16,)}[0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00], keys=Array{Char, (16,)}[Char(0x8a3b62d0), Char(0x00007f07), Char(0x66000000), Char(0x00000000), Char(0x8a3e9680), Char(0x00007f07), Char(0x67000000), Char(0x61000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000), Char(0x62000000), Char(0x00000000)], vals=Array{Int64, (16,)}[1, 1, 6, 0, 0, 1, 7, 1, 3, 4, 5, 8, 9, 10, 2, 139670360646352], ndel=0, count=10, age=0x000000000000000a, idxfloor=1, maxprobe=7)))))), allterms=Array{Union{MixedModels.FeMat{Float64, S} where S<:(AbstractArray{T, 2} where T), MixedModels.ReMat{Float64, S} where S}, (4,)}[
  MixedModels.ReMat{Float64, 2}(trm=StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 19}(sym=:G, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (20, 19)}[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], termnames=Array{Char, (19,)}[Char(0x42000000), Char(0x43000000), Char(0x44000000), Char(0x45000000), Char(0x46000000), Char(0x47000000), Char(0x48000000), Char(0x49000000), Char(0x4a000000), Char(0x4b000000), Char(0x4c000000), Char(0x4d000000), Char(0x4e000000), Char(0x4f000000), Char(0x50000000), Char(0x51000000), Char(0x52000000), Char(0x53000000), Char(0x54000000)], levels=Array{Char, (20,)}[Char(0x41000000), Char(0x42000000), Char(0x43000000), Char(0x44000000), Char(0x45000000), Char(0x46000000), Char(0x47000000), Char(0x48000000), Char(0x49000000), Char(0x4a000000), Char(0x4b000000), Char(0x4c000000), Char(0x4d000000), Char(0x4e000000), Char(0x4f000000), Char(0x50000000), Char(0x51000000), Char(0x52000000), Char(0x53000000), Char(0x54000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (64,)}[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], keys=Array{Char, (64,)}[Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x45000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x43000000), Char(0x42000000), Char(0x00000000), Char(0x44000000), Char(0x41000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x52000000), Char(0x47000000), Char(0x00000000), Char(0x46000000), Char(0x4e000000), Char(0x4d000000), Char(0x4b000000), Char(0x4a000000), Char(0x4f000000), Char(0x49000000), Char(0x50000000), Char(0x48000000), Char(0x51000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x53000000), Char(0x54000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x4c000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000)], vals=Array{Int64, (64,)}[12, 16, 19, 22, 25, 26, 43, 45, 5, 50, 62, 68, 71, 72, 74, 3, 2, 86, 4, 1, 98, 101, 102, 104, 110, 113, 118, 18, 7, 125, 6, 14, 13, 11, 10, 15, 9, 16, 8, 17, 150, 151, 154, 156, 157, 19, 20, 166, 167, 169, 170, 171, 12, 174, 177, 178, 180, 183, 186, 188, 191, 197, 198, 0], ndel=0, count=20, age=0x0000000000000015, idxfloor=1, maxprobe=9))), refs=Array{Int32, (400,)}[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20], levels=Array{Char, (20,)}[Char(0x41000000), Char(0x42000000), Char(0x43000000), Char(0x44000000), Char(0x45000000), Char(0x46000000), Char(0x47000000), Char(0x48000000), Char(0x49000000), Char(0x4a000000), Char(0x4b000000), Char(0x4c000000), Char(0x4d000000), Char(0x4e000000), Char(0x4f000000), Char(0x50000000), Char(0x51000000), Char(0x52000000), Char(0x53000000), Char(0x54000000)], cnames=Array{String, (2,)}[
  "(Intercept)",
  "A: Y"], z=Array{Float64, (2, 400)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], wtz=Array{Float64, (2, 400)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], λ=LinearAlgebra.LowerTriangular{Float64, Array{Float64, 2}}(data=Array{Float64, (2, 2)}[1, 0, 0, 1]), inds=Array{Int64, (3,)}[1, 2, 4], adjA=SparseArrays.SparseMatrixCSC{Float64, Int32}(m=40, n=400, colptr=Array{Int32, (401,)}[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 583, 585, 587, 589, 591, 593, 595, 597, 599, 601, 603, 605, 607, 609, 611, 613, 615, 617, 619, 621, 623, 625, 627, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 739, 741, 743, 745, 747, 749, 751, 753, 755, 757, 759, 761, 763, 765, 767, 769, 771, 773, 775, 777, 779, 781, 783, 785, 787, 789, 791, 793, 795, 797, 799, 801], rowval=Array{Int32, (800,)}[1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40], nzval=Array{Float64, (800,)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1]), scratch=Array{Float64, (2, 20)}[-9.6208, -5.64077, -7.50578, -3.1027, 4.67897, 1.64442, 0.960858, 0.416538, -8.28347, -4.77454, 5.56938, 1.62464, 2.81237, 0.515815, 5.45085, 3.86912, 6.33354, 4.09872, 3.36702, 0.289416, -0.0105093, -0.0781911, 2.50619, -0.753268, 3.38372, 2.43935, -6.32297, -4.10723, 0.0442797, 2.34735, -1.22954, -1.76855, -1.32917, -1.25293, -9.48085, -7.3464, -2.9033, -6.03751, -4.75131, -3.38146]),
  MixedModels.ReMat{Float64, 2}(trm=StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 9}(sym=:H, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (10, 9)}[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], termnames=Array{Char, (9,)}[Char(0x62000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x66000000), Char(0x67000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000)], levels=Array{Char, (10,)}[Char(0x61000000), Char(0x62000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x66000000), Char(0x67000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (16,)}[0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00], keys=Array{Char, (16,)}[Char(0x8a3b62d0), Char(0x00007f07), Char(0x66000000), Char(0x00000000), Char(0x8a3e9680), Char(0x00007f07), Char(0x67000000), Char(0x61000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000), Char(0x62000000), Char(0x00000000)], vals=Array{Int64, (16,)}[1, 1, 6, 0, 0, 1, 7, 1, 3, 4, 5, 8, 9, 10, 2, 139670360646352], ndel=0, count=10, age=0x000000000000000a, idxfloor=1, maxprobe=7))), refs=Array{Int32, (400,)}[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], levels=Array{Char, (10,)}[Char(0x61000000), Char(0x62000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x66000000), Char(0x67000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000)], cnames=Array{String, (2,)}[
  "(Intercept)",
  "A: Y"], z=Array{Float64, (2, 400)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], wtz=Array{Float64, (2, 400)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], λ=LinearAlgebra.LowerTriangular{Float64, Array{Float64, 2}}(data=Array{Float64, (2, 2)}[1, 0, 0, 1]), inds=Array{Int64, (3,)}[1, 2, 4], adjA=SparseArrays.SparseMatrixCSC{Float64, Int32}(m=20, n=400, colptr=Array{Int32, (401,)}[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 583, 585, 587, 589, 591, 593, 595, 597, 599, 601, 603, 605, 607, 609, 611, 613, 615, 617, 619, 621, 623, 625, 627, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 739, 741, 743, 745, 747, 749, 751, 753, 755, 757, 759, 761, 763, 765, 767, 769, 771, 773, 775, 777, 779, 781, 783, 785, 787, 789, 791, 793, 795, 797, 799, 801], rowval=Array{Int32, (800,)}[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20], nzval=Array{Float64, (800,)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1]), scratch=Array{Float64, (2, 10)}[-3.10821, -3.89852, 2.1575, 4.03791, -3.61872, -3.2097, -9.05002, -1.43327, 0.102481, -3.23715, -2.13812, -5.71112, -6.04748, -1.68031, 6.05859, -1.90192, -13.2111, -7.53379, 12.5245, 3.56969]),
  MixedModels.FeMat{Float64, Array{Float64, 2}}(x=Array{Float64, (400, 2)}[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], wtx=Array{Float64, (400, 2)}[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], piv=Array{Int64, (2,)}[1, 2], rank=2, cnames=Array{String, (2,)}[
  "(Intercept)",
  "A: Y"]),
  MixedModels.FeMat{Float64, Array{Float64, 2}}(x=Array{Float64, (400, 1)}[-0.160767, -1.48275, -0.384419, -1.3541, 1.03842, -1.16268, -0.0202548, -0.747563, 1.32394, -1.26479, -1.1589, 0.228077, -1.26447, -0.0305313, -1.73483, 1.10785, -0.0966725, 3.3424, 1.70391, -1.17272, -2.05007, -0.536018, 0.920166, -2.08457, 2.85367, 0.298823, 0.30227, -0.823113, 1.65939, 0.893986, -0.491064, 0.628746, -0.446673, -0.816463, -0.522648, 0.455216, -0.643395, 0.13782, -0.0372687, 0.483869, -1.46539, 1.32186, -0.0376635, 0.951807, 0.595687, -0.166958, 1.43169, -0.811143, -0.427218, 0.263116, 0.537191, 0.376229, 0.381638, 0.231701, 1.96601, 1.25224, -0.584862, 1.29871, 0.607602, 0.417953, -0.0156447, 0.953986, 0.537903, 1.59606, -2.68816, 0.207514, -0.737157, -1.52248, -0.376472, 1.0603, 0.124493, 0.151912, -0.0137903, 0.415566, -0.89659, -1.33803, 0.0404713, -0.78972, -0.860152, -1.83271, -1.35263, -1.56942, 0.0819071, -0.890231, -0.989597, 2.7382, -2.21318, 0.275371, -0.363027, -0.377948, 0.255572, -0.0199111, -0.0102739, 1.90416, -0.982226, -0.724709, 0.876104, 0.577596, 0.739668, 0.57291, 0.566372, 0.0479212, 0.644455, -1.17632, 1.42828, -0.355559, 0.685665, -1.72952, -0.534498, 0.637149, 2.17758, -0.364661, -1.00121, 0.367557, -1.02091, -1.4776, 0.725126, -1.76422, -0.122198, 0.119518, -1.54856, -1.1012, -2.29664, 0.204291, -0.195299, -0.446781, -1.26199, 2.14003, -0.825896, -0.595367, 1.12235, -0.471528, 0.131953, -1.59619, 0.416828, 0.713689, -0.587769, -1.05023, 0.00980475, 1.76599, 0.0745339, 0.450325, 1.12436, 1.67582, -0.942351, -0.491541, 0.709525, -0.487695, -0.291505, -0.48815, -1.34943, 0.303068, 0.807472, -0.825592, -0.0444731, -0.176398, -1.00344, -0.165851, -1.66623, -0.789973, 0.507125, 1.01446, -2.12619, 0.874163, 0.971515, 0.977665, 0.0938577, -0.686041, -0.644779, 0.943301, 1.46686, -0.964762, -0.00447505, -1.23897, 0.15367, -1.02906, -0.0273253, 0.308131, 0.225627, 0.756117, -0.11236, 0.835155, -0.856331, -0.886937, -0.339958, 0.0355568, 1.22602, -0.612489, 1.68121, 0.706232, 1.85257, -0.75296, -1.12535, -0.910917, 0.551874, -1.46327, 0.00865985, -1.12411, -0.162599, -0.0184118, -0.197287, -0.86977, -1.55077, -0.379717, 0.0316421, -1.20812, 1.13736, 0.619865, -0.939715, 0.0667614, 0.00686165, 0.616259, 1.63133, -0.54383, 0.351478, 0.272913, 0.42533, -0.0899168, 0.586253, -0.870667, 0.907813, 0.677455, 0.708735, -1.92561, 0.401518, -0.179322, 0.250642, -0.850702, -2.48624, 0.426637, -1.03109, 1.21379, -0.844781, -0.928402, 0.926769, -0.52497, 2.14789, -0.222116, 1.10925, -1.01165, -0.0366401, -1.97484, 0.488016, -0.321355, 0.202876, 0.0247562, 1.17442, 1.05137, -1.34831, -0.47383, 0.474645, 0.692987, -1.95512, 0.403126, -1.08174, 0.587523, 0.224685, 0.113976, 0.392671, -0.0299585, -0.524412, -0.0033372, -0.54307, -0.311649, 1.33328, 0.512145, -1.60303, -0.8221, -2.56427, 1.25369, -1.55067, -0.878728, 0.221357, -0.0904412, 1.52859, -1.18804, 0.402625, -1.16083, 0.39691, 0.935227, 0.444264, 0.741051, 0.536484, -0.0791178, 0.806068, -0.0830614, -0.257476, -0.765558, 1.7128, -1.03352, 0.433021, 1.00674, 1.58481, 1.59005, 0.601257, -0.274755, 1.06977, -0.562692, -1.07332, -1.14198, -0.601941, -0.925925, 0.80767, 0.489058, 0.57053, -0.897764, 1.9586, 0.868494, 0.740601, -1.03758, -0.372745, 0.164664, 0.0811351, -0.817212, -1.12896, 0.594151, -0.0329436, -0.122773, 0.0808823, 0.385804, 0.639648, -0.912169, 0.307732, -1.38003, -0.397612, -0.133082, -1.43322, -0.831425, -1.28417, -1.05794, 0.273638, -0.161187, 0.795844, -0.746132, -0.179889, 1.81498, 0.128769, -0.519487, -0.87802, -0.900833, 0.404327, -0.66114, -0.447534, -0.595867, -0.681356, 2.24375, -2.5913, 1.97815, -0.549085, -1.20728, -0.0859498, -2.48846, 1.58944, 0.991977, -1.08182, 0.52219, 0.923906, -1.4336, -1.13062, -2.05621, -0.809792, -0.807982, 0.578457, -0.728412, 0.970844, 1.10448, 1.89311, 0.171628, -0.712558, -1.24433, 0.533498, 0.321742, 1.00532, 0.542418, 2.07117, 0.14846, 0.806795, 0.680226, 0.763414, 0.892606, 1.41907, -0.916613, 0.363102, 2.46675, -0.991078, 1.06574, -2.41697, -0.105771, 0.417803, 0.102356, 1.26532, 0.254081, 0.656156, 1.361, -0.446288, -2.74966, 0.565307, 0.60789, 1.02218, 0.403079], wtx=Array{Float64, (400, 1)}[-0.160767, -1.48275, -0.384419, -1.3541, 1.03842, -1.16268, -0.0202548, -0.747563, 1.32394, -1.26479, -1.1589, 0.228077, -1.26447, -0.0305313, -1.73483, 1.10785, -0.0966725, 3.3424, 1.70391, -1.17272, -2.05007, -0.536018, 0.920166, -2.08457, 2.85367, 0.298823, 0.30227, -0.823113, 1.65939, 0.893986, -0.491064, 0.628746, -0.446673, -0.816463, -0.522648, 0.455216, -0.643395, 0.13782, -0.0372687, 0.483869, -1.46539, 1.32186, -0.0376635, 0.951807, 0.595687, -0.166958, 1.43169, -0.811143, -0.427218, 0.263116, 0.537191, 0.376229, 0.381638, 0.231701, 1.96601, 1.25224, -0.584862, 1.29871, 0.607602, 0.417953, -0.0156447, 0.953986, 0.537903, 1.59606, -2.68816, 0.207514, -0.737157, -1.52248, -0.376472, 1.0603, 0.124493, 0.151912, -0.0137903, 0.415566, -0.89659, -1.33803, 0.0404713, -0.78972, -0.860152, -1.83271, -1.35263, -1.56942, 0.0819071, -0.890231, -0.989597, 2.7382, -2.21318, 0.275371, -0.363027, -0.377948, 0.255572, -0.0199111, -0.0102739, 1.90416, -0.982226, -0.724709, 0.876104, 0.577596, 0.739668, 0.57291, 0.566372, 0.0479212, 0.644455, -1.17632, 1.42828, -0.355559, 0.685665, -1.72952, -0.534498, 0.637149, 2.17758, -0.364661, -1.00121, 0.367557, -1.02091, -1.4776, 0.725126, -1.76422, -0.122198, 0.119518, -1.54856, -1.1012, -2.29664, 0.204291, -0.195299, -0.446781, -1.26199, 2.14003, -0.825896, -0.595367, 1.12235, -0.471528, 0.131953, -1.59619, 0.416828, 0.713689, -0.587769, -1.05023, 0.00980475, 1.76599, 0.0745339, 0.450325, 1.12436, 1.67582, -0.942351, -0.491541, 0.709525, -0.487695, -0.291505, -0.48815, -1.34943, 0.303068, 0.807472, -0.825592, -0.0444731, -0.176398, -1.00344, -0.165851, -1.66623, -0.789973, 0.507125, 1.01446, -2.12619, 0.874163, 0.971515, 0.977665, 0.0938577, -0.686041, -0.644779, 0.943301, 1.46686, -0.964762, -0.00447505, -1.23897, 0.15367, -1.02906, -0.0273253, 0.308131, 0.225627, 0.756117, -0.11236, 0.835155, -0.856331, -0.886937, -0.339958, 0.0355568, 1.22602, -0.612489, 1.68121, 0.706232, 1.85257, -0.75296, -1.12535, -0.910917, 0.551874, -1.46327, 0.00865985, -1.12411, -0.162599, -0.0184118, -0.197287, -0.86977, -1.55077, -0.379717, 0.0316421, -1.20812, 1.13736, 0.619865, -0.939715, 0.0667614, 0.00686165, 0.616259, 1.63133, -0.54383, 0.351478, 0.272913, 0.42533, -0.0899168, 0.586253, -0.870667, 0.907813, 0.677455, 0.708735, -1.92561, 0.401518, -0.179322, 0.250642, -0.850702, -2.48624, 0.426637, -1.03109, 1.21379, -0.844781, -0.928402, 0.926769, -0.52497, 2.14789, -0.222116, 1.10925, -1.01165, -0.0366401, -1.97484, 0.488016, -0.321355, 0.202876, 0.0247562, 1.17442, 1.05137, -1.34831, -0.47383, 0.474645, 0.692987, -1.95512, 0.403126, -1.08174, 0.587523, 0.224685, 0.113976, 0.392671, -0.0299585, -0.524412, -0.0033372, -0.54307, -0.311649, 1.33328, 0.512145, -1.60303, -0.8221, -2.56427, 1.25369, -1.55067, -0.878728, 0.221357, -0.0904412, 1.52859, -1.18804, 0.402625, -1.16083, 0.39691, 0.935227, 0.444264, 0.741051, 0.536484, -0.0791178, 0.806068, -0.0830614, -0.257476, -0.765558, 1.7128, -1.03352, 0.433021, 1.00674, 1.58481, 1.59005, 0.601257, -0.274755, 1.06977, -0.562692, -1.07332, -1.14198, -0.601941, -0.925925, 0.80767, 0.489058, 0.57053, -0.897764, 1.9586, 0.868494, 0.740601, -1.03758, -0.372745, 0.164664, 0.0811351, -0.817212, -1.12896, 0.594151, -0.0329436, -0.122773, 0.0808823, 0.385804, 0.639648, -0.912169, 0.307732, -1.38003, -0.397612, -0.133082, -1.43322, -0.831425, -1.28417, -1.05794, 0.273638, -0.161187, 0.795844, -0.746132, -0.179889, 1.81498, 0.128769, -0.519487, -0.87802, -0.900833, 0.404327, -0.66114, -0.447534, -0.595867, -0.681356, 2.24375, -2.5913, 1.97815, -0.549085, -1.20728, -0.0859498, -2.48846, 1.58944, 0.991977, -1.08182, 0.52219, 0.923906, -1.4336, -1.13062, -2.05621, -0.809792, -0.807982, 0.578457, -0.728412, 0.970844, 1.10448, 1.89311, 0.171628, -0.712558, -1.24433, 0.533498, 0.321742, 1.00532, 0.542418, 2.07117, 0.14846, 0.806795, 0.680226, 0.763414, 0.892606, 1.41907, -0.916613, 0.363102, 2.46675, -0.991078, 1.06574, -2.41697, -0.105771, 0.417803, 0.102356, 1.26532, 0.254081, 0.656156, 1.361, -0.446288, -2.74966, 0.565307, 0.60789, 1.02218, 0.403079], piv=Array{Int64, (1,)}[1], rank=1, cnames=Array{String, (1,)}[""])], sqrtwts=Array{Float64, (400,)}[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], A=BlockArrays.BlockArray{Float64, 2, Array{AbstractArray{Float64, 2}, 2}, Tuple{BlockArrays.BlockedUnitRange{Array{Int64, 1}}, BlockArrays.BlockedUnitRange{Array{Int64, 1}}}}(blocks=Array{AbstractArray{Float64, 2}, (4, 4)}[
  MixedModels.UniformBlockDiagonal{Float64}(data=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], facevec=Array{Base.SubArray{Float64, 2, Array{Float64, 3}, I, L} where L where I, (20,)}[
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 1), offset1=0, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 2), offset1=4, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 3), offset1=8, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 4), offset1=12, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 5), offset1=16, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 6), offset1=20, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 7), offset1=24, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 8), offset1=28, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 9), offset1=32, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 10), offset1=36, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 11), offset1=40, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 12), offset1=44, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 13), offset1=48, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 14), offset1=52, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 15), offset1=56, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 16), offset1=60, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 17), offset1=64, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 18), offset1=68, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 19), offset1=72, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 20), offset1=76, stride1=1)]),
  Array{Float64, (20, 40)}[2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
  Array{Float64, (2, 40)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10],
  Array{Float64, (1, 40)}[-9.6208, -5.64077, -7.50578, -3.1027, 4.67897, 1.64442, 0.960858, 0.416538, -8.28347, -4.77454, 5.56938, 1.62464, 2.81237, 0.515815, 5.45085, 3.86912, 6.33354, 4.09872, 3.36702, 0.289416, -0.0105093, -0.0781911, 2.50619, -0.753268, 3.38372, 2.43935, -6.32297, -4.10723, 0.0442797, 2.34735, -1.22954, -1.76855, -1.32917, -1.25293, -9.48085, -7.3464, -2.9033, -6.03751, -4.75131, -3.38146],
  #<null>,
  MixedModels.UniformBlockDiagonal{Float64}(data=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], facevec=Array{Base.SubArray{Float64, 2, Array{Float64, 3}, I, L} where L where I, (10,)}[
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 1), offset1=0, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 2), offset1=4, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 3), offset1=8, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 4), offset1=12, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 5), offset1=16, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 6), offset1=20, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 7), offset1=24, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 8), offset1=28, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 9), offset1=32, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 10), offset1=36, stride1=1)]),
  Array{Float64, (2, 20)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20],
  Array{Float64, (1, 20)}[-3.10821, -3.89852, 2.1575, 4.03791, -3.61872, -3.2097, -9.05002, -1.43327, 0.102481, -3.23715, -2.13812, -5.71112, -6.04748, -1.68031, 6.05859, -1.90192, -13.2111, -7.53379, 12.5245, 3.56969],
  #<null>,
  #<null>,
  Array{Float64, (2, 2)}[400, 200, 200, 200],
  Array{Float64, (1, 2)}[-16.3305, -20.9982],
  #<null>,
  #<null>,
  #<null>,
  Array{Float64, (1, 1)}[427.28]], axes=(BlockArrays.BlockedUnitRange{Array{Int64, 1}}(first=1, lasts=Array{Int64, (4,)}[40, 60, 62, 63]), BlockArrays.BlockedUnitRange{Array{Int64, 1}}(first=1, lasts=Array{Int64, (4,)}[40, 60, 62, 63]))), L=BlockArrays.BlockArray{Float64, 2, Array{AbstractArray{Float64, 2}, 2}, Tuple{BlockArrays.BlockedUnitRange{Array{Int64, 1}}, BlockArrays.BlockedUnitRange{Array{Int64, 1}}}}(blocks=Array{AbstractArray{Float64, 2}, (4, 4)}[
  MixedModels.UniformBlockDiagonal{Float64}(data=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], facevec=Array{Base.SubArray{Float64, 2, Array{Float64, 3}, I, L} where L where I, (20,)}[
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 1), offset1=0, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 2), offset1=4, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 3), offset1=8, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 4), offset1=12, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 5), offset1=16, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 6), offset1=20, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 7), offset1=24, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 8), offset1=28, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 9), offset1=32, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 10), offset1=36, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 11), offset1=40, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 12), offset1=44, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 13), offset1=48, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 14), offset1=52, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 15), offset1=56, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 16), offset1=60, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 17), offset1=64, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 18), offset1=68, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 19), offset1=72, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 20), offset1=76, stride1=1)]),
  Array{Float64, (20, 40)}[0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724],
  Array{Float64, (2, 40)}[4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724],
  Array{Float64, (1, 40)}[-2.09943, -0.424179, -1.6379, 0.188771, 1.02103, -0.233685, 0.209676, -0.016421, -1.8076, -0.332328, 1.21534, -0.411369, 0.61371, -0.329678, 1.18947, 0.509878, 1.38209, 0.433512, 0.734745, -0.526072, -0.00229331, -0.0293026, 0.546896, -0.779419, 0.738388, 0.331538, -1.37978, -0.438935, 0.00966262, 0.931391, -0.268307, -0.473675, -0.290049, -0.248232, -2.06889, -1.13376, -0.633552, -1.86377, -1.03682, -0.447999],
  #<null>,
  Array{Float64, (20, 20)}[6.0978, 2.95439, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, 20, 3.23103, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, 0, 0, 6.06545, 2.93469, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, 0, 0, 20, 3.22133, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, 0, 0, 0, 0, 6.02539, 2.90997, -0.779159, -0.409325, -0.779159, -0.409325, -0.779159, -0.409325, -0.779159, -0.409325, -0.779159, -0.409325, -0.779159, -0.409325, -0.779159, -0.409325, 0, 0, 0, 0, 20, 3.20994, -0.0619988, -0.323145, -0.0619988, -0.323145, -0.0619988, -0.323145, -0.0619988, -0.323145, -0.0619988, -0.323145, -0.0619988, -0.323145, -0.0619988, -0.323145, 0, 0, 0, 0, 0, 0, 5.97447, 2.87803, -0.888056, -0.469548, -0.888056, -0.469548, -0.888056, -0.469548, -0.888056, -0.469548, -0.888056, -0.469548, -0.888056, -0.469548, 0, 0, 0, 0, 0, 0, 20, 3.19634, -0.0780432, -0.359472, -0.0780432, -0.359472, -0.0780432, -0.359472, -0.0780432, -0.359472, -0.0780432, -0.359472, -0.0780432, -0.359472, 0, 0, 0, 0, 0, 0, 0, 0, 5.90759, 2.83528, -1.03264, -0.550198, -1.03264, -0.550198, -1.03264, -0.550198, -1.03264, -0.550198, -1.03264, -0.550198, 0, 0, 0, 0, 0, 0, 0, 0, 20, 3.1798, -0.101429, -0.405716, -0.101429, -0.405716, -0.101429, -0.405716, -0.101429, -0.405716, -0.101429, -0.405716, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.81575, 2.77528, -1.23407, -0.663654, -1.23407, -0.663654, -1.23407, -0.663654, -1.23407, -0.663654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 3.15918, -0.137619, -0.467069, -0.137619, -0.467069, -0.137619, -0.467069, -0.137619, -0.467069, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.68165, 2.68533, -1.53457, -0.834779, -1.53457, -0.834779, -1.53457, -0.834779, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 3.13258, -0.198588, -0.55364, -0.198588, -0.55364, -0.198588, -0.55364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.46688, 2.53638, -2.03283, -1.12201, -2.03283, -1.12201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 3.09635, -0.315808, -0.689036, -0.315808, -0.689036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.06504, 2.24433, -3.02967, -1.7043, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 3.04137, -0.602613, -0.949572, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.01405, 1.40306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2.91754],
  Array{Float64, (2, 20)}[0.300446, 0.0250372, -0.22747, 0.496876, 0.331481, 0.0311898, -0.243258, 0.537004, 0.369835, 0.03949, -0.261146, 0.584291, 0.418508, 0.05104, -0.281428, 0.6409, 0.482441, 0.0677571, -0.304287, 0.710003, 0.570414, 0.0932407, -0.329451, 0.79652, 0.699793, 0.134987, -0.355052, 0.908691, 0.910821, 0.21119, -0.373228, 1.06226, 1.32537, 0.378937, -0.346959, 1.29653, 2.62064, 0.958806, 0.0588808, 1.82531],
  Array{Float64, (1, 20)}[-0.238117, -0.404567, 0.60139, 1.23377, -0.273637, -0.040977, -1.22117, 1.32587, 0.148233, -0.502411, -0.217132, -1.00372, -0.9818, 0.728097, 0.944922, -1.09497, -2.47359, -0.25262, 1.38524, -0.553744],
  #<null>,
  #<null>,
  Array{Float64, (2, 2)}[2.54128, 0.0794151, 200, 2.5],
  Array{Float64, (1, 2)}[0.049118, -0.320823],
  #<null>,
  #<null>,
  #<null>,
  Array{Float64, (1, 1)}[19.344]], axes=(BlockArrays.BlockedUnitRange{Array{Int64, 1}}(first=1, lasts=Array{Int64, (4,)}[40, 60, 62, 63]), BlockArrays.BlockedUnitRange{Array{Int64, 1}}(first=1, lasts=Array{Int64, (4,)}[40, 60, 62, 63]))), optsum=MixedModels.OptSummary{Float64}(initial=Array{Float64, (6,)}[1, 0, 1, 1, 0, 1], lowerbd=Array{Float64, (6,)}[0, -inf, 0, 0, -inf, 0], finitial=1263.2, ftol_rel=1e-12, ftol_abs=1e-08, xtol_rel=0, xtol_abs=Array{Float64, (6,)}[1e-10, 1e-10, 1e-10, 1e-10, 1e-10, 1e-10], initial_step=Array{Float64, (6,)}[0.75, 1, 0.75, 0.75, 1, 0.75], maxfeval=-1, final=Array{Float64, (6,)}[1.75, 0, 1, 1, 0, 1], fmin=inf, feval=-1, optimizer=:LN_BOBYQA, returnvalue=:FAILURE, nAGQ=1, REML=false)), optsum=MixedModels.OptSummary{Float64}(initial=Array{Float64, (6,)}[1, 0, 1, 1, 0, 1], lowerbd=Array{Float64, (6,)}[0, -inf, 0, 0, -inf, 0], finitial=1263.2, ftol_rel=1e-12, ftol_abs=1e-08, xtol_rel=0, xtol_abs=Array{Float64, (6,)}[1e-10, 1e-10, 1e-10, 1e-10, 1e-10, 1e-10], initial_step=Array{Float64, (6,)}[0.75, 1, 0.75, 0.75, 1, 0.75], maxfeval=-1, final=Array{Float64, (6,)}[1.75, 0, 1, 1, 0, 1], fmin=inf, feval=-1, optimizer=:LN_BOBYQA, returnvalue=:FAILURE, nAGQ=1, REML=false), feval=Core.Box(contents=1)), o=<circular reference @-2>)]))
jl_type_error_rt at /workspace/srcdir/src/rtutils.c:118
jl_f_apply_type at /workspace/srcdir/src/builtins.c:970
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/src/julia.h:1692 [inlined]
do_apply at /workspace/srcdir/src/builtins.c:650
argtypes_to_type at ./compiler/typeutils.jl:46 [inlined]
abstract_call_known at ./compiler/abstractinterpretation.jl:886
abstract_call at ./compiler/abstractinterpretation.jl:909
abstract_call at ./compiler/abstractinterpretation.jl:894
abstract_eval at ./compiler/abstractinterpretation.jl:988
typeinf_local at ./compiler/abstractinterpretation.jl:1242
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1298
typeinf at ./compiler/typeinfer.jl:12
typeinf_ext at ./compiler/typeinfer.jl:570
typeinf_ext at ./compiler/typeinfer.jl:601
jfptr_typeinf_ext_20212.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/src/julia.h:1692 [inlined]
jl_type_infer at /workspace/srcdir/src/gf.c:300
jl_generate_fptr at /workspace/srcdir/src/jitlayers.cpp:265
jl_compile_method_internal at /workspace/srcdir/src/gf.c:1968
jl_compile_method_internal at /workspace/srcdir/src/gf.c:1923 [inlined]
_jl_invoke at /workspace/srcdir/src/gf.c:2228 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
IOContext at ./show.jl:245
IOContext at ./show.jl:323 [inlined]
_show_default at ./show.jl:392
show_default at ./show.jl:382 [inlined]
show at ./show.jl:379
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
print at ./strings/io.jl:35
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
print_to_string at ./strings/io.jl:135
string at ./strings/io.jl:174 [inlined]
showerror at ./errorshow.jl:154
#685 at ./errorshow.jl:171
unknown function (ip: 0x7f075e4be961)
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
#with_output_color#741 at ./util.jl:72
unknown function (ip: 0x7f075e4bd022)
with_output_color at ./util.jl:70 [inlined]
#showerror#684 at ./errorshow.jl:170
showerror##kw at ./errorshow.jl:169
unknown function (ip: 0x7f075e4bcd48)
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
show_exception_stack at ./errorshow.jl:818
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
#sprint#352 at ./strings/io.jl:105
sprint at ./strings/io.jl:101
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
Error at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:158
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/src/julia.h:1692 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:117
eval_value at /workspace/srcdir/src/interpreter.c:206
eval_stmt_value at /workspace/srcdir/src/interpreter.c:157 [inlined]
eval_body at /workspace/srcdir/src/interpreter.c:566
eval_body at /workspace/srcdir/src/interpreter.c:492
jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:660
macro expansion at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1120 [inlined]
top-level scope at /home/pkgeval/.julia/packages/MixedModels/ALNok/test/linalg.jl:35
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:827
jl_parse_eval_all at /workspace/srcdir/src/ast.c:913
jl_load_rewrite at /workspace/srcdir/src/toplevel.c:898
include at ./client.jl:457
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/src/julia.h:1692 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:117
eval_value at /workspace/srcdir/src/interpreter.c:206
eval_stmt_value at /workspace/srcdir/src/interpreter.c:157 [inlined]
eval_body at /workspace/srcdir/src/interpreter.c:566
jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:660
top-level scope at /home/pkgeval/.julia/packages/MixedModels/ALNok/test/runtests.jl:7
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:827
jl_parse_eval_all at /workspace/srcdir/src/ast.c:913
jl_load_rewrite at /workspace/srcdir/src/toplevel.c:898
include at ./client.jl:457
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/src/julia.h:1692 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:117
eval_value at /workspace/srcdir/src/interpreter.c:206
eval_stmt_value at /workspace/srcdir/src/interpreter.c:157 [inlined]
eval_body at /workspace/srcdir/src/interpreter.c:566
jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:660
top-level scope at none:6
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:827
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:777
jl_toplevel_eval_in at /workspace/srcdir/src/toplevel.c:867
eval at ./boot.jl:331
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
exec_options at ./client.jl:272
_start at ./client.jl:506
jfptr__start_57981.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/ui/../src/julia.h:1692 [inlined]
true_main at /workspace/srcdir/ui/repl.c:96
main at /workspace/srcdir/ui/repl.c:217
__libc_start_main at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)
unknown function (ip: 0x4015e4)
GC error (probable corruption) :
Allocations: 116898931 (Pool: 116865534; Big: 33397); GC: 97
<?#0x7f0757889e60::NLopt.Opt(opt=0x0000000008aed590, cb=Array{NLopt.Callback_Data, (1,)}[NLopt.Callback_Data(f=getfield(MixedModels, Symbol("#obj#41")){Bool, MixedModels.LinearMixedModel{Float64}, MixedModels.OptSummary{Float64}}(verbose=false, m=MixedModels.LinearMixedModel{Float64}(formula=StatsModels.FormulaTerm{StatsModels.ContinuousTerm{Float64}, Tuple{StatsModels.MatrixTerm{Tuple{StatsModels.InterceptTerm{true}, StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}}}, MixedModels.RandomEffectsTerm, MixedModels.RandomEffectsTerm}}(lhs=StatsModels.ContinuousTerm{Float64}(sym=:Y, mean=-0.0408263, var=1.06921, min=-2.74966, max=3.3424), rhs=(StatsModels.MatrixTerm{Tuple{StatsModels.InterceptTerm{true}, StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}}}(terms=(StatsModels.InterceptTerm{true}(), StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}(sym=:A, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (2, 1)}[0, 1], termnames=Array{Char, (1,)}[Char(0x59000000)], levels=Array{Char, (2,)}[Char(0x4e000000), Char(0x59000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (16,)}[0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00], keys=Array{Char, (16,)}[Char(0x8a3b62d0), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x59000000), Char(0x8b319250), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x00007f07), Char(0x8a4417a0), Char(0x00007f07), Char(0x4e000000), Char(0x00000000)], vals=Array{Int64, (16,)}[139669475227536, 139669475228752, 139669475290032, 139670361216560, 139669439890352, 2, 139669439890624, 139669439890848, 139669475280944, 139669475280976, 139669439893888, 0, 0, 0, 1, 139669535486688], ndel=0, count=2, age=0x0000000000000002, idxfloor=1, maxprobe=0))))), MixedModels.RandomEffectsTerm(lhs=StatsModels.MatrixTerm{Tuple{StatsModels.InterceptTerm{true}, StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}}}(terms=(StatsModels.InterceptTerm{true}(), StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}(sym=:A, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (2, 1)}[0, 1], termnames=Array{Char, (1,)}[Char(0x59000000)], levels=Array{Char, (2,)}[Char(0x4e000000), Char(0x59000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (16,)}[0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00], keys=Array{Char, (16,)}[Char(0x8a3b62d0), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x59000000), Char(0x8b319250), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x00007f07), Char(0x8a4417a0), Char(0x00007f07), Char(0x4e000000), Char(0x00000000)], vals=Array{Int64, (16,)}[139669475227536, 139669475228752, 139669475290032, 139670361216560, 139669439890352, 2, 139669439890624, 139669439890848, 139669475280944, 139669475280976, 139669439893888, 0, 0, 0, 1, 139669535486688], ndel=0, count=2, age=0x0000000000000002, idxfloor=1, maxprobe=0))))), rhs=StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 19}(sym=:G, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (20, 19)}[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], termnames=Array{Char, (19,)}[Char(0x42000000), Char(0x43000000), Char(0x44000000), Char(0x45000000), Char(0x46000000), Char(0x47000000), Char(0x48000000), Char(0x49000000), Char(0x4a000000), Char(0x4b000000), Char(0x4c000000), Char(0x4d000000), Char(0x4e000000), Char(0x4f000000), Char(0x50000000), Char(0x51000000), Char(0x52000000), Char(0x53000000), Char(0x54000000)], levels=Array{Char, (20,)}[Char(0x41000000), Char(0x42000000), Char(0x43000000), Char(0x44000000), Char(0x45000000), Char(0x46000000), Char(0x47000000), Char(0x48000000), Char(0x49000000), Char(0x4a000000), Char(0x4b000000), Char(0x4c000000), Char(0x4d000000), Char(0x4e000000), Char(0x4f000000), Char(0x50000000), Char(0x51000000), Char(0x52000000), Char(0x53000000), Char(0x54000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (64,)}[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], keys=Array{Char, (64,)}[Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x45000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x43000000), Char(0x42000000), Char(0x00000000), Char(0x44000000), Char(0x41000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x52000000), Char(0x47000000), Char(0x00000000), Char(0x46000000), Char(0x4e000000), Char(0x4d000000), Char(0x4b000000), Char(0x4a000000), Char(0x4f000000), Char(0x49000000), Char(0x50000000), Char(0x48000000), Char(0x51000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x53000000), Char(0x54000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x4c000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000)], vals=Array{Int64, (64,)}[12, 16, 19, 22, 25, 26, 43, 45, 5, 50, 62, 68, 71, 72, 74, 3, 2, 86, 4, 1, 98, 101, 102, 104, 110, 113, 118, 18, 7, 125, 6, 14, 13, 11, 10, 15, 9, 16, 8, 17, 150, 151, 154, 156, 157, 19, 20, 166, 167, 169, 170, 171, 12, 174, 177, 178, 180, 183, 186, 188, 191, 197, 198, 0], ndel=0, count=20, age=0x0000000000000015, idxfloor=1, maxprobe=9)))), MixedModels.RandomEffectsTerm(lhs=StatsModels.MatrixTerm{Tuple{StatsModels.InterceptTerm{true}, StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}}}(terms=(StatsModels.InterceptTerm{true}(), StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 1}(sym=:A, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (2, 1)}[0, 1], termnames=Array{Char, (1,)}[Char(0x59000000)], levels=Array{Char, (2,)}[Char(0x4e000000), Char(0x59000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (16,)}[0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00], keys=Array{Char, (16,)}[Char(0x8a3b62d0), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x59000000), Char(0x8b319250), Char(0x00007f07), Char(0x00000000), Char(0x00000000), Char(0x8a3e9680), Char(0x00007f07), Char(0x8a4417a0), Char(0x00007f07), Char(0x4e000000), Char(0x00000000)], vals=Array{Int64, (16,)}[139669475227536, 139669475228752, 139669475290032, 139670361216560, 139669439890352, 2, 139669439890624, 139669439890848, 139669475280944, 139669475280976, 139669439893888, 0, 0, 0, 1, 139669535486688], ndel=0, count=2, age=0x0000000000000002, idxfloor=1, maxprobe=0))))), rhs=StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 9}(sym=:H, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (10, 9)}[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], termnames=Array{Char, (9,)}[Char(0x62000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x66000000), Char(0x67000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000)], levels=Array{Char, (10,)}[Char(0x61000000), Char(0x62000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x66000000), Char(0x67000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (16,)}[0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00], keys=Array{Char, (16,)}[Char(0x8a3b62d0), Char(0x00007f07), Char(0x66000000), Char(0x00000000), Char(0x8a3e9680), Char(0x00007f07), Char(0x67000000), Char(0x61000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000), Char(0x62000000), Char(0x00000000)], vals=Array{Int64, (16,)}[1, 1, 6, 0, 0, 1, 7, 1, 3, 4, 5, 8, 9, 10, 2, 139670360646352], ndel=0, count=10, age=0x000000000000000a, idxfloor=1, maxprobe=7)))))), allterms=Array{Union{MixedModels.FeMat{Float64, S} where S<:(AbstractArray{T, 2} where T), MixedModels.ReMat{Float64, S} where S}, (4,)}[
  MixedModels.ReMat{Float64, 2}(trm=StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 19}(sym=:G, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (20, 19)}[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], termnames=Array{Char, (19,)}[Char(0x42000000), Char(0x43000000), Char(0x44000000), Char(0x45000000), Char(0x46000000), Char(0x47000000), Char(0x48000000), Char(0x49000000), Char(0x4a000000), Char(0x4b000000), Char(0x4c000000), Char(0x4d000000), Char(0x4e000000), Char(0x4f000000), Char(0x50000000), Char(0x51000000), Char(0x52000000), Char(0x53000000), Char(0x54000000)], levels=Array{Char, (20,)}[Char(0x41000000), Char(0x42000000), Char(0x43000000), Char(0x44000000), Char(0x45000000), Char(0x46000000), Char(0x47000000), Char(0x48000000), Char(0x49000000), Char(0x4a000000), Char(0x4b000000), Char(0x4c000000), Char(0x4d000000), Char(0x4e000000), Char(0x4f000000), Char(0x50000000), Char(0x51000000), Char(0x52000000), Char(0x53000000), Char(0x54000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (64,)}[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], keys=Array{Char, (64,)}[Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x45000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x43000000), Char(0x42000000), Char(0x00000000), Char(0x44000000), Char(0x41000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x52000000), Char(0x47000000), Char(0x00000000), Char(0x46000000), Char(0x4e000000), Char(0x4d000000), Char(0x4b000000), Char(0x4a000000), Char(0x4f000000), Char(0x49000000), Char(0x50000000), Char(0x48000000), Char(0x51000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x53000000), Char(0x54000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x4c000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000), Char(0x00000000)], vals=Array{Int64, (64,)}[12, 16, 19, 22, 25, 26, 43, 45, 5, 50, 62, 68, 71, 72, 74, 3, 2, 86, 4, 1, 98, 101, 102, 104, 110, 113, 118, 18, 7, 125, 6, 14, 13, 11, 10, 15, 9, 16, 8, 17, 150, 151, 154, 156, 157, 19, 20, 166, 167, 169, 170, 171, 12, 174, 177, 178, 180, 183, 186, 188, 191, 197, 198, 0], ndel=0, count=20, age=0x0000000000000015, idxfloor=1, maxprobe=9))), refs=Array{Int32, (400,)}[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20], levels=Array{Char, (20,)}[Char(0x41000000), Char(0x42000000), Char(0x43000000), Char(0x44000000), Char(0x45000000), Char(0x46000000), Char(0x47000000), Char(0x48000000), Char(0x49000000), Char(0x4a000000), Char(0x4b000000), Char(0x4c000000), Char(0x4d000000), Char(0x4e000000), Char(0x4f000000), Char(0x50000000), Char(0x51000000), Char(0x52000000), Char(0x53000000), Char(0x54000000)], cnames=Array{String, (2,)}[
  "(Intercept)",
  "A: Y"], z=Array{Float64, (2, 400)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], wtz=Array{Float64, (2, 400)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], λ=LinearAlgebra.LowerTriangular{Float64, Array{Float64, 2}}(data=Array{Float64, (2, 2)}[1, 0, 0, 1]), inds=Array{Int64, (3,)}[1, 2, 4], adjA=SparseArrays.SparseMatrixCSC{Float64, Int32}(m=40, n=400, colptr=Array{Int32, (401,)}[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 583, 585, 587, 589, 591, 593, 595, 597, 599, 601, 603, 605, 607, 609, 611, 613, 615, 617, 619, 621, 623, 625, 627, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 739, 741, 743, 745, 747, 749, 751, 753, 755, 757, 759, 761, 763, 765, 767, 769, 771, 773, 775, 777, 779, 781, 783, 785, 787, 789, 791, 793, 795, 797, 799, 801], rowval=Array{Int32, (800,)}[1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 7, 8, 7, 8, 9, 10, 9, 10, 11, 12, 11, 12, 13, 14, 13, 14, 15, 16, 15, 16, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 26, 25, 26, 27, 28, 27, 28, 29, 30, 29, 30, 31, 32, 31, 32, 33, 34, 33, 34, 35, 36, 35, 36, 37, 38, 37, 38, 39, 40, 39, 40], nzval=Array{Float64, (800,)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1]), scratch=Array{Float64, (2, 20)}[-9.6208, -5.64077, -7.50578, -3.1027, 4.67897, 1.64442, 0.960858, 0.416538, -8.28347, -4.77454, 5.56938, 1.62464, 2.81237, 0.515815, 5.45085, 3.86912, 6.33354, 4.09872, 3.36702, 0.289416, -0.0105093, -0.0781911, 2.50619, -0.753268, 3.38372, 2.43935, -6.32297, -4.10723, 0.0442797, 2.34735, -1.22954, -1.76855, -1.32917, -1.25293, -9.48085, -7.3464, -2.9033, -6.03751, -4.75131, -3.38146]),
  MixedModels.ReMat{Float64, 2}(trm=StatsModels.CategoricalTerm{StatsModels.DummyCoding, Char, 9}(sym=:H, contrasts=StatsModels.ContrastsMatrix{StatsModels.DummyCoding, Char, Char}(matrix=Array{Float64, (10, 9)}[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], termnames=Array{Char, (9,)}[Char(0x62000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x66000000), Char(0x67000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000)], levels=Array{Char, (10,)}[Char(0x61000000), Char(0x62000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x66000000), Char(0x67000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000)], contrasts=StatsModels.DummyCoding(base=nothing, levels=nothing), invindex=Base.Dict{Char, Int64}(slots=Array{UInt8, (16,)}[0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00], keys=Array{Char, (16,)}[Char(0x8a3b62d0), Char(0x00007f07), Char(0x66000000), Char(0x00000000), Char(0x8a3e9680), Char(0x00007f07), Char(0x67000000), Char(0x61000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000), Char(0x62000000), Char(0x00000000)], vals=Array{Int64, (16,)}[1, 1, 6, 0, 0, 1, 7, 1, 3, 4, 5, 8, 9, 10, 2, 139670360646352], ndel=0, count=10, age=0x000000000000000a, idxfloor=1, maxprobe=7))), refs=Array{Int32, (400,)}[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], levels=Array{Char, (10,)}[Char(0x61000000), Char(0x62000000), Char(0x63000000), Char(0x64000000), Char(0x65000000), Char(0x66000000), Char(0x67000000), Char(0x68000000), Char(0x69000000), Char(0x6a000000)], cnames=Array{String, (2,)}[
  "(Intercept)",
  "A: Y"], z=Array{Float64, (2, 400)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], wtz=Array{Float64, (2, 400)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1], λ=LinearAlgebra.LowerTriangular{Float64, Array{Float64, 2}}(data=Array{Float64, (2, 2)}[1, 0, 0, 1]), inds=Array{Int64, (3,)}[1, 2, 4], adjA=SparseArrays.SparseMatrixCSC{Float64, Int32}(m=20, n=400, colptr=Array{Int32, (401,)}[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 583, 585, 587, 589, 591, 593, 595, 597, 599, 601, 603, 605, 607, 609, 611, 613, 615, 617, 619, 621, 623, 625, 627, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 739, 741, 743, 745, 747, 749, 751, 753, 755, 757, 759, 761, 763, 765, 767, 769, 771, 773, 775, 777, 779, 781, 783, 785, 787, 789, 791, 793, 795, 797, 799, 801], rowval=Array{Int32, (800,)}[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20], nzval=Array{Float64, (800,)}[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1]), scratch=Array{Float64, (2, 10)}[-3.10821, -3.89852, 2.1575, 4.03791, -3.61872, -3.2097, -9.05002, -1.43327, 0.102481, -3.23715, -2.13812, -5.71112, -6.04748, -1.68031, 6.05859, -1.90192, -13.2111, -7.53379, 12.5245, 3.56969]),
  MixedModels.FeMat{Float64, Array{Float64, 2}}(x=Array{Float64, (400, 2)}[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], wtx=Array{Float64, (400, 2)}[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], piv=Array{Int64, (2,)}[1, 2], rank=2, cnames=Array{String, (2,)}[
  "(Intercept)",
  "A: Y"]),
  MixedModels.FeMat{Float64, Array{Float64, 2}}(x=Array{Float64, (400, 1)}[-0.160767, -1.48275, -0.384419, -1.3541, 1.03842, -1.16268, -0.0202548, -0.747563, 1.32394, -1.26479, -1.1589, 0.228077, -1.26447, -0.0305313, -1.73483, 1.10785, -0.0966725, 3.3424, 1.70391, -1.17272, -2.05007, -0.536018, 0.920166, -2.08457, 2.85367, 0.298823, 0.30227, -0.823113, 1.65939, 0.893986, -0.491064, 0.628746, -0.446673, -0.816463, -0.522648, 0.455216, -0.643395, 0.13782, -0.0372687, 0.483869, -1.46539, 1.32186, -0.0376635, 0.951807, 0.595687, -0.166958, 1.43169, -0.811143, -0.427218, 0.263116, 0.537191, 0.376229, 0.381638, 0.231701, 1.96601, 1.25224, -0.584862, 1.29871, 0.607602, 0.417953, -0.0156447, 0.953986, 0.537903, 1.59606, -2.68816, 0.207514, -0.737157, -1.52248, -0.376472, 1.0603, 0.124493, 0.151912, -0.0137903, 0.415566, -0.89659, -1.33803, 0.0404713, -0.78972, -0.860152, -1.83271, -1.35263, -1.56942, 0.0819071, -0.890231, -0.989597, 2.7382, -2.21318, 0.275371, -0.363027, -0.377948, 0.255572, -0.0199111, -0.0102739, 1.90416, -0.982226, -0.724709, 0.876104, 0.577596, 0.739668, 0.57291, 0.566372, 0.0479212, 0.644455, -1.17632, 1.42828, -0.355559, 0.685665, -1.72952, -0.534498, 0.637149, 2.17758, -0.364661, -1.00121, 0.367557, -1.02091, -1.4776, 0.725126, -1.76422, -0.122198, 0.119518, -1.54856, -1.1012, -2.29664, 0.204291, -0.195299, -0.446781, -1.26199, 2.14003, -0.825896, -0.595367, 1.12235, -0.471528, 0.131953, -1.59619, 0.416828, 0.713689, -0.587769, -1.05023, 0.00980475, 1.76599, 0.0745339, 0.450325, 1.12436, 1.67582, -0.942351, -0.491541, 0.709525, -0.487695, -0.291505, -0.48815, -1.34943, 0.303068, 0.807472, -0.825592, -0.0444731, -0.176398, -1.00344, -0.165851, -1.66623, -0.789973, 0.507125, 1.01446, -2.12619, 0.874163, 0.971515, 0.977665, 0.0938577, -0.686041, -0.644779, 0.943301, 1.46686, -0.964762, -0.00447505, -1.23897, 0.15367, -1.02906, -0.0273253, 0.308131, 0.225627, 0.756117, -0.11236, 0.835155, -0.856331, -0.886937, -0.339958, 0.0355568, 1.22602, -0.612489, 1.68121, 0.706232, 1.85257, -0.75296, -1.12535, -0.910917, 0.551874, -1.46327, 0.00865985, -1.12411, -0.162599, -0.0184118, -0.197287, -0.86977, -1.55077, -0.379717, 0.0316421, -1.20812, 1.13736, 0.619865, -0.939715, 0.0667614, 0.00686165, 0.616259, 1.63133, -0.54383, 0.351478, 0.272913, 0.42533, -0.0899168, 0.586253, -0.870667, 0.907813, 0.677455, 0.708735, -1.92561, 0.401518, -0.179322, 0.250642, -0.850702, -2.48624, 0.426637, -1.03109, 1.21379, -0.844781, -0.928402, 0.926769, -0.52497, 2.14789, -0.222116, 1.10925, -1.01165, -0.0366401, -1.97484, 0.488016, -0.321355, 0.202876, 0.0247562, 1.17442, 1.05137, -1.34831, -0.47383, 0.474645, 0.692987, -1.95512, 0.403126, -1.08174, 0.587523, 0.224685, 0.113976, 0.392671, -0.0299585, -0.524412, -0.0033372, -0.54307, -0.311649, 1.33328, 0.512145, -1.60303, -0.8221, -2.56427, 1.25369, -1.55067, -0.878728, 0.221357, -0.0904412, 1.52859, -1.18804, 0.402625, -1.16083, 0.39691, 0.935227, 0.444264, 0.741051, 0.536484, -0.0791178, 0.806068, -0.0830614, -0.257476, -0.765558, 1.7128, -1.03352, 0.433021, 1.00674, 1.58481, 1.59005, 0.601257, -0.274755, 1.06977, -0.562692, -1.07332, -1.14198, -0.601941, -0.925925, 0.80767, 0.489058, 0.57053, -0.897764, 1.9586, 0.868494, 0.740601, -1.03758, -0.372745, 0.164664, 0.0811351, -0.817212, -1.12896, 0.594151, -0.0329436, -0.122773, 0.0808823, 0.385804, 0.639648, -0.912169, 0.307732, -1.38003, -0.397612, -0.133082, -1.43322, -0.831425, -1.28417, -1.05794, 0.273638, -0.161187, 0.795844, -0.746132, -0.179889, 1.81498, 0.128769, -0.519487, -0.87802, -0.900833, 0.404327, -0.66114, -0.447534, -0.595867, -0.681356, 2.24375, -2.5913, 1.97815, -0.549085, -1.20728, -0.0859498, -2.48846, 1.58944, 0.991977, -1.08182, 0.52219, 0.923906, -1.4336, -1.13062, -2.05621, -0.809792, -0.807982, 0.578457, -0.728412, 0.970844, 1.10448, 1.89311, 0.171628, -0.712558, -1.24433, 0.533498, 0.321742, 1.00532, 0.542418, 2.07117, 0.14846, 0.806795, 0.680226, 0.763414, 0.892606, 1.41907, -0.916613, 0.363102, 2.46675, -0.991078, 1.06574, -2.41697, -0.105771, 0.417803, 0.102356, 1.26532, 0.254081, 0.656156, 1.361, -0.446288, -2.74966, 0.565307, 0.60789, 1.02218, 0.403079], wtx=Array{Float64, (400, 1)}[-0.160767, -1.48275, -0.384419, -1.3541, 1.03842, -1.16268, -0.0202548, -0.747563, 1.32394, -1.26479, -1.1589, 0.228077, -1.26447, -0.0305313, -1.73483, 1.10785, -0.0966725, 3.3424, 1.70391, -1.17272, -2.05007, -0.536018, 0.920166, -2.08457, 2.85367, 0.298823, 0.30227, -0.823113, 1.65939, 0.893986, -0.491064, 0.628746, -0.446673, -0.816463, -0.522648, 0.455216, -0.643395, 0.13782, -0.0372687, 0.483869, -1.46539, 1.32186, -0.0376635, 0.951807, 0.595687, -0.166958, 1.43169, -0.811143, -0.427218, 0.263116, 0.537191, 0.376229, 0.381638, 0.231701, 1.96601, 1.25224, -0.584862, 1.29871, 0.607602, 0.417953, -0.0156447, 0.953986, 0.537903, 1.59606, -2.68816, 0.207514, -0.737157, -1.52248, -0.376472, 1.0603, 0.124493, 0.151912, -0.0137903, 0.415566, -0.89659, -1.33803, 0.0404713, -0.78972, -0.860152, -1.83271, -1.35263, -1.56942, 0.0819071, -0.890231, -0.989597, 2.7382, -2.21318, 0.275371, -0.363027, -0.377948, 0.255572, -0.0199111, -0.0102739, 1.90416, -0.982226, -0.724709, 0.876104, 0.577596, 0.739668, 0.57291, 0.566372, 0.0479212, 0.644455, -1.17632, 1.42828, -0.355559, 0.685665, -1.72952, -0.534498, 0.637149, 2.17758, -0.364661, -1.00121, 0.367557, -1.02091, -1.4776, 0.725126, -1.76422, -0.122198, 0.119518, -1.54856, -1.1012, -2.29664, 0.204291, -0.195299, -0.446781, -1.26199, 2.14003, -0.825896, -0.595367, 1.12235, -0.471528, 0.131953, -1.59619, 0.416828, 0.713689, -0.587769, -1.05023, 0.00980475, 1.76599, 0.0745339, 0.450325, 1.12436, 1.67582, -0.942351, -0.491541, 0.709525, -0.487695, -0.291505, -0.48815, -1.34943, 0.303068, 0.807472, -0.825592, -0.0444731, -0.176398, -1.00344, -0.165851, -1.66623, -0.789973, 0.507125, 1.01446, -2.12619, 0.874163, 0.971515, 0.977665, 0.0938577, -0.686041, -0.644779, 0.943301, 1.46686, -0.964762, -0.00447505, -1.23897, 0.15367, -1.02906, -0.0273253, 0.308131, 0.225627, 0.756117, -0.11236, 0.835155, -0.856331, -0.886937, -0.339958, 0.0355568, 1.22602, -0.612489, 1.68121, 0.706232, 1.85257, -0.75296, -1.12535, -0.910917, 0.551874, -1.46327, 0.00865985, -1.12411, -0.162599, -0.0184118, -0.197287, -0.86977, -1.55077, -0.379717, 0.0316421, -1.20812, 1.13736, 0.619865, -0.939715, 0.0667614, 0.00686165, 0.616259, 1.63133, -0.54383, 0.351478, 0.272913, 0.42533, -0.0899168, 0.586253, -0.870667, 0.907813, 0.677455, 0.708735, -1.92561, 0.401518, -0.179322, 0.250642, -0.850702, -2.48624, 0.426637, -1.03109, 1.21379, -0.844781, -0.928402, 0.926769, -0.52497, 2.14789, -0.222116, 1.10925, -1.01165, -0.0366401, -1.97484, 0.488016, -0.321355, 0.202876, 0.0247562, 1.17442, 1.05137, -1.34831, -0.47383, 0.474645, 0.692987, -1.95512, 0.403126, -1.08174, 0.587523, 0.224685, 0.113976, 0.392671, -0.0299585, -0.524412, -0.0033372, -0.54307, -0.311649, 1.33328, 0.512145, -1.60303, -0.8221, -2.56427, 1.25369, -1.55067, -0.878728, 0.221357, -0.0904412, 1.52859, -1.18804, 0.402625, -1.16083, 0.39691, 0.935227, 0.444264, 0.741051, 0.536484, -0.0791178, 0.806068, -0.0830614, -0.257476, -0.765558, 1.7128, -1.03352, 0.433021, 1.00674, 1.58481, 1.59005, 0.601257, -0.274755, 1.06977, -0.562692, -1.07332, -1.14198, -0.601941, -0.925925, 0.80767, 0.489058, 0.57053, -0.897764, 1.9586, 0.868494, 0.740601, -1.03758, -0.372745, 0.164664, 0.0811351, -0.817212, -1.12896, 0.594151, -0.0329436, -0.122773, 0.0808823, 0.385804, 0.639648, -0.912169, 0.307732, -1.38003, -0.397612, -0.133082, -1.43322, -0.831425, -1.28417, -1.05794, 0.273638, -0.161187, 0.795844, -0.746132, -0.179889, 1.81498, 0.128769, -0.519487, -0.87802, -0.900833, 0.404327, -0.66114, -0.447534, -0.595867, -0.681356, 2.24375, -2.5913, 1.97815, -0.549085, -1.20728, -0.0859498, -2.48846, 1.58944, 0.991977, -1.08182, 0.52219, 0.923906, -1.4336, -1.13062, -2.05621, -0.809792, -0.807982, 0.578457, -0.728412, 0.970844, 1.10448, 1.89311, 0.171628, -0.712558, -1.24433, 0.533498, 0.321742, 1.00532, 0.542418, 2.07117, 0.14846, 0.806795, 0.680226, 0.763414, 0.892606, 1.41907, -0.916613, 0.363102, 2.46675, -0.991078, 1.06574, -2.41697, -0.105771, 0.417803, 0.102356, 1.26532, 0.254081, 0.656156, 1.361, -0.446288, -2.74966, 0.565307, 0.60789, 1.02218, 0.403079], piv=Array{Int64, (1,)}[1], rank=1, cnames=Array{String, (1,)}[""])], sqrtwts=Array{Float64, (400,)}[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], A=BlockArrays.BlockArray{Float64, 2, Array{AbstractArray{Float64, 2}, 2}, Tuple{BlockArrays.BlockedUnitRange{Array{Int64, 1}}, BlockArrays.BlockedUnitRange{Array{Int64, 1}}}}(blocks=Array{AbstractArray{Float64, 2}, (4, 4)}[
  MixedModels.UniformBlockDiagonal{Float64}(data=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], facevec=Array{Base.SubArray{Float64, 2, Array{Float64, 3}, I, L} where L where I, (20,)}[
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 1), offset1=0, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 2), offset1=4, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 3), offset1=8, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 4), offset1=12, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 5), offset1=16, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 6), offset1=20, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 7), offset1=24, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 8), offset1=28, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 9), offset1=32, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 10), offset1=36, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 11), offset1=40, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 12), offset1=44, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 13), offset1=48, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 14), offset1=52, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 15), offset1=56, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 16), offset1=60, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 17), offset1=64, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 18), offset1=68, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 19), offset1=72, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 20), offset1=76, stride1=1)]),
  Array{Float64, (20, 40)}[2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
  Array{Float64, (2, 40)}[20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10, 20, 10, 10, 10],
  Array{Float64, (1, 40)}[-9.6208, -5.64077, -7.50578, -3.1027, 4.67897, 1.64442, 0.960858, 0.416538, -8.28347, -4.77454, 5.56938, 1.62464, 2.81237, 0.515815, 5.45085, 3.86912, 6.33354, 4.09872, 3.36702, 0.289416, -0.0105093, -0.0781911, 2.50619, -0.753268, 3.38372, 2.43935, -6.32297, -4.10723, 0.0442797, 2.34735, -1.22954, -1.76855, -1.32917, -1.25293, -9.48085, -7.3464, -2.9033, -6.03751, -4.75131, -3.38146],
  #<null>,
  MixedModels.UniformBlockDiagonal{Float64}(data=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], facevec=Array{Base.SubArray{Float64, 2, Array{Float64, 3}, I, L} where L where I, (10,)}[
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 1), offset1=0, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 2), offset1=4, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 3), offset1=8, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 4), offset1=12, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 5), offset1=16, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 6), offset1=20, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 7), offset1=24, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 8), offset1=28, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 9), offset1=32, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 10)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 10), offset1=36, stride1=1)]),
  Array{Float64, (2, 20)}[40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20, 40, 20, 20, 20],
  Array{Float64, (1, 20)}[-3.10821, -3.89852, 2.1575, 4.03791, -3.61872, -3.2097, -9.05002, -1.43327, 0.102481, -3.23715, -2.13812, -5.71112, -6.04748, -1.68031, 6.05859, -1.90192, -13.2111, -7.53379, 12.5245, 3.56969],
  #<null>,
  #<null>,
  Array{Float64, (2, 2)}[400, 200, 200, 200],
  Array{Float64, (1, 2)}[-16.3305, -20.9982],
  #<null>,
  #<null>,
  #<null>,
  Array{Float64, (1, 1)}[427.28]], axes=(BlockArrays.BlockedUnitRange{Array{Int64, 1}}(first=1, lasts=Array{Int64, (4,)}[40, 60, 62, 63]), BlockArrays.BlockedUnitRange{Array{Int64, 1}}(first=1, lasts=Array{Int64, (4,)}[40, 60, 62, 63]))), L=BlockArrays.BlockArray{Float64, 2, Array{AbstractArray{Float64, 2}, 2}, Tuple{BlockArrays.BlockedUnitRange{Array{Int64, 1}}, BlockArrays.BlockedUnitRange{Array{Int64, 1}}}}(blocks=Array{AbstractArray{Float64, 2}, (4, 4)}[
  MixedModels.UniformBlockDiagonal{Float64}(data=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], facevec=Array{Base.SubArray{Float64, 2, Array{Float64, 3}, I, L} where L where I, (20,)}[
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 1), offset1=0, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 2), offset1=4, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 3), offset1=8, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 4), offset1=12, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 5), offset1=16, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 6), offset1=20, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 7), offset1=24, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 8), offset1=28, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 9), offset1=32, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 10), offset1=36, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 11), offset1=40, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 12), offset1=44, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 13), offset1=48, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 14), offset1=52, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 15), offset1=56, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 16), offset1=60, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 17), offset1=64, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 18), offset1=68, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 19), offset1=72, stride1=1),
  Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}(parent=Array{Float64, (2, 2, 20)}[4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762, 4.58258, 2.18218, 10, 2.49762], indices=(Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), Base.Slice{Base.OneTo{Int64}}(indices=Base.OneTo{Int64}(stop=2)), 20), offset1=76, stride1=1)]),
  Array{Float64, (20, 40)}[0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.436436, 0.218218, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724, 0.0190658, 0.209724],
  Array{Float64, (2, 40)}[4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724, 4.36436, 2.18218, 0.190658, 2.09724],
  Array{Float64, (1, 40)}[-2.09943, -0.424179, -1.6379, 0.188771, 1.02103, -0.233685, 0.209676, -0.016421, -1.8076, -0.332328, 1.21534, -0.411369, 0.61371, -0.329678, 1.18947, 0.509878, 1.38209, 0.433512, 0.734745, -0.526072, -0.00229331, -0.0293026, 0.546896, -0.779419, 0.738388, 0.331538, -1.37978, -0.438935, 0.00966262, 0.931391, -0.268307, -0.473675, -0.290049, -0.248232, -2.06889, -1.13376, -0.633552, -1.86377, -1.03682, -0.447999],
  #<null>,
  Array{Float64, (20, 20)}[6.0978, 2.95439, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, -0.625929, -0.325483, 20, 3.23103, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, -0.0419358, -0.269406, 0, 0, 6.06545, 2.93469, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, -0.694152, -0.362671, 0, 0, 20, 3.22133, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, -0.0504875, -0.293746, 0, 0, 0, 0, 6.02539, 2.90997, -0.779159, -0.409325, -0.779159, -0.409325, -0.779159, -0.409325, -0.779159, -0.409325, -0.779159, -0.409325, -0.779159, -0.409325, -0.779159, -0.409325, 0, 0, 0, 0, 20, 3.20994, -0.0619988, -0.323145, -0.0619988, -0.323145, -0.0619988, -0.323145, -0.0619988, -0.323145, -0.0619988, -0.323145, -0.0619988, -0.323145, -0.0619988, -0.323145, 0, 0, 0, 0, 0, 0, 5.97447, 2.87803, -0.888056, -0.469548, -0.888056, -0.469548, -0.888056, -0.469548, -0.888056, -0.469548, -0.888056, -0.469548, -0.888056, -0.469548, 0, 0, 0, 0, 0, 0, 20, 3.19634, -0.0780432, -0.359472, -0.0780432, -0.359472, -0.0780432, -0.359472, -0.0780432, -0.359472, -0.0780432, -0.359472, -0.0780432, -0.359472, 0, 0, 0, 0, 0, 0, 0, 0, 5.90759, 2.83528, -1.03264, -0.550198, -1.03264, -0.550198, -1.03264, -0.550198, -1.03264, -0.550198, -1.03264, -0.550198, 0, 0, 0, 0, 0, 0, 0, 0, 20, 3.1798, -0.101429, -0.405716, -0.101429, -0.405716, -0.101429, -0.405716, -0.101429, -0.405716, -0.101429, -0.405716, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.81575, 2.77528, -1.23407, -0.663654, -1.23407, -0.663654, -1.23407, -0.663654, -1.23407, -0.663654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 3.15918, -0.137619, -0.467069, -0.137619, -0.467069, -0.137619, -0.467069, -0.137619, -0.467069, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.68165, 2.68533, -1.53457, -0.834779, -1.53457, -0.834779, -1.53457, -0.834779, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 3.13258, -0.198588, -0.55364, -0.198588, -0.55364, -0.198588, -0.55364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.46688, 2.53638, -2.03283, -1.12201, -2.03283, -1.12201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 3.09635, -0.315808, -0.689036, -0.315808, -0.689036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.06504, 2.24433, -3.02967, -1.7043, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 3.04137, -0.602613, -0.949572, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.01405, 1.40306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2.91754],
  Array{Float64, (2, 20)}[0.300446, 0.0250372, -0.22747, 0.496876, 0.331481, 0.0311898, -0.243258, 0.537004, 0.369835, 0.03949, -0.261146, 0.584291, 0.418508, 0.05104, -0.281428, 0.6409, 0.482441, 0.0677571, -0.304287, 0.710003, 0.570414, 0.0932407, -0.329451, 0.79652, 0.699793, 0.134987, -0.355052, 0.908691, 0.910821, 0.21119, -0.373228, 1.06226, 1.32537, 0.378937, -0.346959, 1.29653, 2.62064, 0.958806, 0.0588808, 1.82531],
  Array{Float64, (1, 20)}[-0.238117, -0.404567, 0.60139, 1.23377, -0.273637, -0.040977, -1.22117, 1.32587, 0.148233, -0.502411, -0.217132, -1.00372, -0.9818, 0.728097, 0.944922, -1.09497, -2.47359, -0.25262, 1.38524, -0.553744],
  #<null>,
  #<null>,
  Array{Float64, (2, 2)}[2.54128, 0.0794151, 200, 2.5],
  Array{Float64, (1, 2)}[0.049118, -0.320823],
  #<null>,
  #<null>,
  #<null>,
  Array{Float64, (1, 1)}[19.344]], axes=(BlockArrays.BlockedUnitRange{Array{Int64, 1}}(first=1, lasts=Array{Int64, (4,)}[40, 60, 62, 63]), BlockArrays.BlockedUnitRange{Array{Int64, 1}}(first=1, lasts=Array{Int64, (4,)}[40, 60, 62, 63]))), optsum=MixedModels.OptSummary{Float64}(initial=Array{Float64, (6,)}[1, 0, 1, 1, 0, 1], lowerbd=Array{Float64, (6,)}[0, -inf, 0, 0, -inf, 0], finitial=1263.2, ftol_rel=1e-12, ftol_abs=1e-08, xtol_rel=0, xtol_abs=Array{Float64, (6,)}[1e-10, 1e-10, 1e-10, 1e-10, 1e-10, 1e-10], initial_step=Array{Float64, (6,)}[0.75, 1, 0.75, 0.75, 1, 0.75], maxfeval=-1, final=Array{Float64, (6,)}[1.75, 0, 1, 1, 0, 1], fmin=inf, feval=-1, optimizer=:LN_BOBYQA, returnvalue=:FAILURE, nAGQ=1, REML=false)), optsum=MixedModels.OptSummary{Float64}(initial=Array{Float64, (6,)}[1, 0, 1, 1, 0, 1], lowerbd=Array{Float64, (6,)}[0, -inf, 0, 0, -inf, 0], finitial=1263.2, ftol_rel=1e-12, ftol_abs=1e-08, xtol_rel=0, xtol_abs=Array{Float64, (6,)}[1e-10, 1e-10, 1e-10, 1e-10, 1e-10, 1e-10], initial_step=Array{Float64, (6,)}[0.75, 1, 0.75, 0.75, 1, 0.75], maxfeval=-1, final=Array{Float64, (6,)}[1.75, 0, 1, 1, 0, 1], fmin=inf, feval=-1, optimizer=:LN_BOBYQA, returnvalue=:FAILURE, nAGQ=1, REML=false), feval=Core.Box(contents=1)), o=<circular reference @-2>)])>
0x7f075f14e010: Queued root: 0x7f078dea7fc0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e028: Queued root: 0x7f076018c8d0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14e040: Queued root: 0x7f078bff2d50 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e058: Queued root: 0x7f078e129c90 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e070: Queued root: 0x7f078b887b40 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e088: Queued root: 0x7f078c00c2f0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e0a0: Queued root: 0x7f078c00dfa0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e0b8: Queued root: 0x7f07637a4b50 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e0d0: Queued root: 0x7f078b8840c0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e0e8: Queued root: 0x7f078b90e2d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e100: Queued root: 0x7f078bc1a1d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e118: Queued root: 0x7f078ada9ee0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e130: Queued root: 0x7f078bc5f530 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e148: Queued root: 0x7f078b71a310 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e160: Queued root: 0x7f073c828010 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14e178: Queued root: 0x7f073c312590 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14e190: Queued root: 0x7f073c6614b0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14e1a8: Queued root: 0x7f073d244200 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14e1c0: Queued root: 0x7f078e0b6c50 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e1d8: Queued root: 0x7f0753a48010 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14e1f0: Queued root: 0x7f078bfe19d0 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f14e208: Queued root: 0x7f078bff09b0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e220: Queued root: 0x7f07635ee290 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e238: Queued root: 0x7f078bfe1e30 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f14e250: Queued root: 0x7f078567e4d0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14e268: Queued root: 0x7f07533c5a50 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14e280: Queued root: 0x7f073ef7fc70 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14e298: Queued root: 0x7f075413a230 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14e2b0: Queued root: 0x7f078b884680 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f14e2c8: Queued root: 0x7f073efceea0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14e2e0: Queued root: 0x7f0754c84740 :: 0x7f078a4412b0 (bits: 3)
        of type Core.TypeMapEntry
0x7f075f14e2f8: Queued root: 0x7f073efcebd0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14e310: Queued root: 0x7f078cfa38b0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e328: Queued root: 0x7f078abbf8a0 :: 0x7f078a3b9f20 (bits: 3)
        of type Core.MethodTable
0x7f075f14e340: Queued root: 0x7f078ae00d20 :: 0x7f078a3b9f20 (bits: 3)
        of type Core.MethodTable
0x7f075f14e358: Queued root: 0x7f078afbcbe0 :: 0x7f078a3b9f20 (bits: 3)
        of type Core.MethodTable
0x7f075f14e370: Queued root: 0x7f078b9d4ef0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e388: Queued root: 0x7f0763bafcb0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14e3a0: Queued root: 0x7f078a9d06b0 :: 0x7f078a3b9f20 (bits: 3)
        of type Core.MethodTable
0x7f075f14e3b8: Queued root: 0x7f078cc34b70 :: 0x7f078a3ba700 (bits: 3)
        of type Core.TypeMapLevel
0x7f075f14e3d0: Queued root: 0x7f078b887480 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e3e8: Queued root: 0x7f078afbc8d0 :: 0x7f078a3b9f20 (bits: 3)
        of type Core.MethodTable
0x7f075f14e400: Queued root: 0x7f078c7ffdb0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e418: Queued root: 0x7f078c5df550 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e430: Queued root: 0x7f078c7f4630 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e448: Queued root: 0x7f078a836750 :: 0x7f078a3b9f20 (bits: 3)
        of type Core.MethodTable
0x7f075f14e460: Queued root: 0x7f078a836540 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f14e478: Queued root: 0x7f078bd3d160 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e490: Queued root: 0x7f078a82c590 :: 0x7f078a3b9f20 (bits: 3)
        of type Core.MethodTable
0x7f075f14e4a8: Queued root: 0x7f07593f7010 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e4c0: Queued root: 0x7f0786887dd0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e4d8: Queued root: 0x7f078cf58910 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e4f0: Queued root: 0x7f078cf59930 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e508: Queued root: 0x7f078b77c2e0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e520: Queued root: 0x7f078b77b2f0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e538: Queued root: 0x7f078bcf8590 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e550: Queued root: 0x7f078bd3f850 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e568: Queued root: 0x7f078c8075a0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e580: Queued root: 0x7f078c80ef00 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e598: Queued root: 0x7f078c80aa60 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e5b0: Queued root: 0x7f076003ceb0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e5c8: Queued root: 0x7f078c807f80 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e5e0: Queued root: 0x7f07613dd940 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14e5f8: Queued root: 0x7f073ead96e0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14e610: Queued root: 0x7f078b3978f0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e628: Queued root: 0x7f078c146dc0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e640: Queued root: 0x7f078bd3fb10 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e658: Queued root: 0x7f078a82f1f0 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f14e670: Queued root: 0x7f07547505e0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14e688: Queued root: 0x7f078d7af2e0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e6a0: Queued root: 0x7f075ac93190 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e6b8: Queued root: 0x7f078c149fa0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e6d0: Queued root: 0x7f078b65d6e0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e6e8: Queued root: 0x7f073d6c5cf0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14e700: Queued root: 0x7f073e7888b0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14e718: Queued root: 0x7f075456db30 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14e730: Queued root: 0x7f0753eff490 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14e748: Queued root: 0x7f07622b04f0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e760: Queued root: 0x7f073da24010 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14e778: Queued root: 0x7f078c337c00 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e790: Queued root: 0x7f075a2bed70 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e7a8: Queued root: 0x7f078a755b20 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f14e7c0: Queued root: 0x7f078cb29100 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e7d8: Queued root: 0x7f078b7e6170 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e7f0: Queued root: 0x7f078d8589b0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e808: Queued root: 0x7f0761f73730 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e820: Queued root: 0x7f073edb9f90 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14e838: Queued root: 0x7f073e5ca710 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e850: Queued root: 0x7f078c8a71e0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e868: Queued root: 0x7f078c8ba4b0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e880: Queued root: 0x7f0762232410 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e898: Queued root: 0x7f078c8dadc0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e8b0: Queued root: 0x6691080 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14e8c8: Queued root: 0x7f078e6505a0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e8e0: Queued root: 0x7f078b390cd0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e8f8: Queued root: 0x7f0759da0f70 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e910: Queued root: 0x7f078c1fb760 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e928: Queued root: 0x7f078defd030 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e940: Queued root: 0x7f078c203670 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e958: Queued root: 0x7f078c1fdcb0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e970: Queued root: 0x7f0759c3ea10 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e988: Queued root: 0x7f0754569320 :: 0x7f078a4412b0 (bits: 3)
        of type Core.TypeMapEntry
0x7f075f14e9a0: Queued root: 0x7f0759435d50 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14e9b8: Queued root: 0x7f078b427980 :: 0x7f078a3b9f20 (bits: 3)
        of type Core.MethodTable
0x7f075f14e9d0: Queued root: 0x7f0788bd0790 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f14e9e8: Queued root: 0x7f0762277970 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ea00: Queued root: 0x7f0761f95390 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ea18: Queued root: 0x7f078b528f20 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14ea30: Queued root: 0x7f078a59d1c0 :: 0x7f078a3b9f20 (bits: 3)
        of type Core.MethodTable
0x7f075f14ea48: Queued root: 0x7f073c652e00 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ea60: Queued root: 0x7f078cc34ba0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ea78: Queued root: 0x7f0762b24130 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ea90: Queued root: 0x7f0788b0c5c0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14eaa8: Queued root: 0x7f078898f3d0 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f14eac0: Queued root: 0x7f078c4aff80 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ead8: Queued root: 0x7f0788b0c630 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14eaf0: Queued root: 0x7f0788b23970 :: 0x7f078a3b9f20 (bits: 3)
        of type Core.MethodTable
0x7f075f14eb08: Queued root: 0x7f078898f490 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f14eb20: Queued root: 0x7f078e6554c0 :: 0x7f078a4412b0 (bits: 3)
        of type Core.TypeMapEntry
0x7f075f14eb38: Queued root: 0x7f078cea0980 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14eb50: Queued root: 0x7f0788b488d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14eb68: Queued root: 0x7f0788baa380 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14eb80: Queued root: 0x7f0788ba93c0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14eb98: Queued root: 0x7f0788b4a630 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ebb0: Queued root: 0x7f07620c7690 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ebc8: Queued root: 0x7f0760871a30 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ebe0: Queued root: 0x7f07608702d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ebf8: Queued root: 0x7f0788bb8760 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ec10: Queued root: 0x7f0788bb8d00 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ec28: Queued root: 0x7f0788bb8eb0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ec40: Queued root: 0x7f07608700c0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ec58: Queued root: 0x7f0788b30fd0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ec70: Queued root: 0x7f078d247310 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ec88: Queued root: 0x7f0763687790 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14eca0: Queued root: 0x7f078d247120 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f14ecb8: Queued root: 0x7f07623a3730 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ecd0: Queued root: 0x7f07622af610 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ece8: Queued root: 0x7f0788b6dff0 :: 0x7f078a3b9f20 (bits: 3)
        of type Core.MethodTable
0x7f075f14ed00: Queued root: 0x7f0788b76050 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f14ed18: Queued root: 0x7f0760870590 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ed30: Queued root: 0x7f078c277e80 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ed48: Queued root: 0x7f078c244530 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ed60: Queued root: 0x7f078b29d2f0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ed78: Queued root: 0x7f078da03450 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ed90: Queued root: 0x7f078ae03480 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14eda8: Queued root: 0x7f0762eab070 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14edc0: Queued root: 0x7f0758a7b990 :: 0x7f078a4412b0 (bits: 3)
        of type Core.TypeMapEntry
0x7f075f14edd8: Queued root: 0x7f0788bc2410 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14edf0: Queued root: 0x7f07634b36d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ee08: Queued root: 0x7f0762f06470 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ee20: Queued root: 0x7f07636f83d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ee38: Queued root: 0x7f0788bb49d0 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f14ee50: Queued root: 0x7f0788ba1e10 :: 0x7f078a3b9f20 (bits: 3)
        of type Core.MethodTable
0x7f075f14ee68: Queued root: 0x7f0788bb4a90 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f14ee80: Queued root: 0x7f073ebdc3d0 :: 0x7f078a4412b0 (bits: 3)
        of type Core.TypeMapEntry
0x7f075f14ee98: Queued root: 0x7f0761984670 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14eeb0: Queued root: 0x7f0761417910 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14eec8: Queued root: 0x7f0761984610 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14eee0: Queued root: 0x7f07619845b0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14eef8: Queued root: 0x7f0758c84610 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ef10: Queued root: 0x7f078a6afd90 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ef28: Queued root: 0x7f078bbfd150 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ef40: Queued root: 0x7f07612da4d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ef58: Queued root: 0x7f078c4809f0 :: 0x7f078a3b9f20 (bits: 3)
        of type Core.MethodTable
0x7f075f14ef70: Queued root: 0x7f075987dcf0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ef88: Queued root: 0x7f078bc3b560 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14efa0: Queued root: 0x7f0760872320 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14efb8: Queued root: 0x7f0754dd9050 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14efd0: Queued root: 0x7f078b7384d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14efe8: Queued root: 0x7f075a83c240 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14f000: Queued root: 0x7f078b736370 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f14f018: Queued root: 0x7f078b7392f0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f030: Queued root: 0x7f078c15dc40 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f048: Queued root: 0x7f073dcf2890 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f060: Queued root: 0x7f07612c5030 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f078: Queued root: 0x7f073c6dbb20 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14f090: Queued root: 0x7f078c015ac0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f0a8: Queued root: 0x7f078c0170f0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f0c0: Queued root: 0x7f0787670e10 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14f0d8: Queued root: 0x7f078af6b190 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f0f0: Queued root: 0x7f078af6b090 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f108: Queued root: 0x7f076369d030 :: 0x7f078a3b6330 (bits: 3)
        of type DataType
0x7f075f14f120: Queued root: 0x7f078c481580 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f14f138: Queued root: 0x7f073cb981f0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f150: Queued root: 0x7f073cb9b430 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f168: Queued root: 0x7f078d338d10 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f180: Queued root: 0x7f078c010a70 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f198: Queued root: 0x7f078c970bf0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f1b0: Queued root: 0x7f078c010e80 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f1c8: Queued root: 0x7f07621dc7f0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f1e0: Queued root: 0x7f078c0112d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f1f8: Queued root: 0x7f078b8183d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f210: Queued root: 0x7f078cb288f0 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f14f228: Queued root: 0x7f07546001f0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f240: Queued root: 0x7f078b803210 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f14f258: Queued root: 0x7f073c19d120 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14f270: Queued root: 0x7f078b963690 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f288: Queued root: 0x7f078a4bbdf0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14f2a0: Queued root: 0x7f078b92f7c0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14f2b8: Queued root: 0x7f075438dff0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14f2d0: Queued root: 0x7f078c6dbee0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f2e8: Queued root: 0x7f078c6dcfb0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f300: Queued root: 0x7f0763883b90 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14f318: Queued root: 0x7f078b3780d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f330: Queued root: 0x7f073ca4ca30 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f348: Queued root: 0x7f076377ecb0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14f360: Queued root: 0x7f078dfc9c70 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f14f378: Queued root: 0x7f078648b670 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14f390: Queued root: 0x7f075438de10 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14f3a8: Queued root: 0x7f078c6d7db0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f3c0: Queued root: 0x7f0763b5e8b0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14f3d8: Queued root: 0x7f0754324370 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f3f0: Queued root: 0x7f07637ac610 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f408: Queued root: 0x7f073ca4c9d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f420: Queued root: 0x7f0763dfea70 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f438: Queued root: 0x7f078d2322a0 :: 0x7f078a3b9f20 (bits: 3)
        of type Core.MethodTable
0x7f075f14f450: Queued root: 0x7f0788bddd50 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f14f468: Queued root: 0x7f078dfd29e0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f480: Queued root: 0x7f07622100d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f498: Queued root: 0x7f078c865d80 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f4b0: Queued root: 0x7f076221a950 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f4c8: Queued root: 0x7f078c8665a0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f4e0: Queued root: 0x7f078dfcc300 :: 0x7f078a3b9f20 (bits: 3)
        of type Core.MethodTable
0x7f075f14f4f8: Queued root: 0x7f078be85650 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f510: Queued root: 0x7f078c863a60 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f528: Queued root: 0x7f073cb2ca50 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f14f540: Queued root: 0x7f073cb2cb90 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f14f558: Queued root: 0x7f073cc48b50 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f14f570: Queued root: 0x7f078c863930 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f14f588: Queued root: 0x7f0754c5f420 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14f5a0: Queued root: 0x7f0762652cb0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14f5b8: Queued root: 0x7f0753338b50 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14f5d0: Queued root: 0x7f078be7a190 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f5e8: Queued root: 0x7f078c84f9a0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f600: Queued root: 0x7f0763ba1270 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f618: Queued root: 0x7f078abc1b30 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14f630: Queued root: 0x7f078baae3f0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f648: Queued root: 0x7f073e450920 :: 0x7f078a4412b0 (bits: 3)
        of type Core.TypeMapEntry
0x7f075f14f660: Queued root: 0x7f0762c7a890 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f678: Queued root: 0x7f0763c5ca30 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f690: Queued root: 0x7f07614a08b0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f6a8: Queued root: 0x7f0788b6c430 :: 0x7f078a3b9f20 (bits: 3)
        of type Core.MethodTable
0x7f075f14f6c0: Queued root: 0x7f075a291190 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14f6d8: Queued root: 0x7f0757249d50 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f6f0: Queued root: 0x7f078888f850 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f708: Queued root: 0x7f078d0c6a50 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f720: Queued root: 0x7f0756004a10 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14f738: Queued root: 0x7f078d319d80 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f750: Queued root: 0x7f078c45ae70 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f768: Queued root: 0x7f078bbe0630 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f780: Queued root: 0x7f078d981890 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f798: Queued root: 0x7f0763d40d90 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f7b0: Queued root: 0x7f078b648ea0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f7c8: Queued root: 0x7f078b2d2da0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f7e0: Queued root: 0x7f078cabfaf0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f7f8: Queued root: 0x7f0765e98f60 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14f810: Queued root: 0x7f0765e98880 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14f828: Queued root: 0x7f0765e984c0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14f840: Queued root: 0x7f0763ca7af0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f858: Queued root: 0x7f0765d7dc80 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14f870: Queued root: 0x7f0763c70370 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f888: Queued root: 0x7f0765b7e860 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14f8a0: Queued root: 0x7f0765b7e400 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14f8b8: Queued root: 0x7f0763b626b0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f8d0: Queued root: 0x7f078b931490 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14f8e8: Queued root: 0x7f075438e450 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14f900: Queued root: 0x7f078cd3baf0 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f14f918: Queued root: 0x7f07603d35d0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14f930: Queued root: 0x7f078e1c21b0 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f14f948: Queued root: 0x7f0754e68560 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14f960: Queued root: 0x7f0754dabd00 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14f978: Queued root: 0x7f078b7376a0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f990: Queued root: 0x7f078c159bf0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f9a8: Queued root: 0x7f07612cc670 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f9c0: Queued root: 0x7f073cfc9c30 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f9d8: Queued root: 0x7f075987d270 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14f9f0: Queued root: 0x7f073d53ae90 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fa08: Queued root: 0x7f078d981ba0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fa20: Queued root: 0x7f078d764c10 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fa38: Queued root: 0x7f07613a7310 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fa50: Queued root: 0x7f078bbdc0a0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fa68: Queued root: 0x7f078b92e8f0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fa80: Queued root: 0x7f078d983c80 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fa98: Queued root: 0x7f073c0e4310 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fab0: Queued root: 0x7f078e0a8f10 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f14fac8: Queued root: 0x7f078cf4ea90 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fae0: Queued root: 0x7f078c6ddb00 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14faf8: Queued root: 0x7f07611aa8b0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14fb10: Queued root: 0x7f075335ee90 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14fb28: Queued root: 0x7f078b734890 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f14fb40: Queued root: 0x7f0760bf7a30 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14fb58: Queued root: 0x7f07631e9000 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f14fb70: Queued root: 0x7f078b737990 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f14fb88: Queued root: 0x7f078b934cb0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fba0: Queued root: 0x7f0759ba7c70 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fbb8: Queued root: 0x7f078b934d50 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f14fbd0: Queued root: 0x7f0788b223b0 :: 0x7f078a3b9f20 (bits: 3)
        of type Core.MethodTable
0x7f075f14fbe8: Queued root: 0x7f07640da3d0 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f14fc00: Queued root: 0x7f0763e22830 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fc18: Queued root: 0x7f075acdcfd0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fc30: Queued root: 0x7f078c348040 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fc48: Queued root: 0x7f078b0d4130 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fc60: Queued root: 0x7f0788b26ad0 :: 0x7f078a3b9f20 (bits: 3)
        of type Core.MethodTable
0x7f075f14fc78: Queued root: 0x7f0788b2cfd0 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f14fc90: Queued root: 0x7f078ca23b70 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fca8: Queued root: 0x7f078bb71470 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fcc0: Queued root: 0x7f0763721990 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fcd8: Queued root: 0x7f0788bd0e50 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f14fcf0: Queued root: 0x7f0753400d30 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fd08: Queued root: 0x7f078d9621c0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fd20: Queued root: 0x7f0754c6c7f0 :: 0x7f078a3b9f20 (bits: 3)
        of type Core.MethodTable
0x7f075f14fd38: Queued root: 0x7f07601690f0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fd50: Queued root: 0x7f0788b0c390 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fd68: Queued root: 0x7f0788b23010 :: 0x7f078a3b9f20 (bits: 3)
        of type Core.MethodTable
0x7f075f14fd80: Queued root: 0x7f0788b37f70 :: 0x7f078a3b9f20 (bits: 3)
        of type Core.MethodTable
0x7f075f14fd98: Queued root: 0x7f073db9e1d0 :: 0x7f075873d750 (bits: 3)
        of type MixedModels.OptSummary{Float64}
0x7f075f14fdb0: Queued root: 0x7f073da68c90 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f14fdc8: Queued root: 0x7f07599a9510 :: 0x7f078a59fd10 (bits: 3)
        of type Core.CodeInfo
0x7f075f14fde0: Queued root: 0x7f07599a9590 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fdf8: Queued root: 0x7f075967f0d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fe10: Queued root: 0x7f075967f070 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fe28: Queued root: 0x7f073da68d10 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f14fe40: Queued root: 0x7f0788b301d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fe58: Queued root: 0x7f07599a9910 :: 0x7f078a59fd10 (bits: 3)
        of type Core.CodeInfo
0x7f075f14fe70: Queued root: 0x7f075968d930 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fe88: Queued root: 0x7f073cedfc10 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fea0: Queued root: 0x7f073cedfb70 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14feb8: Queued root: 0x7f073d56a000 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fed0: Queued root: 0x7f07599a9d10 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fee8: Queued root: 0x7f073d569f90 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ff00: Queued root: 0x7f073d569f20 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ff18: Queued root: 0x7f073d569e40 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ff30: Queued root: 0x7f073cedfad0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ff48: Queued root: 0x7f073cedfa30 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ff60: Queued root: 0x7f07599a9c10 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ff78: Queued root: 0x7f073d569cf0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ff90: Queued root: 0x7f073d569c80 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ffa8: Queued root: 0x7f073d569ba0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ffc0: Queued root: 0x7f073d569b30 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14ffd8: Queued root: 0x7f073d569ac0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f14fff0: Queued root: 0x7f073d569a50 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150008: Queued root: 0x7f073d5699e0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150020: Queued root: 0x7f073d569900 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150038: Queued root: 0x7f073d569890 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150050: Queued root: 0x7f073d569820 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150068: Queued root: 0x7f073d5697b0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150080: Queued root: 0x7f075968c7f0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150098: Queued root: 0x7f073d5696d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1500b0: Queued root: 0x7f073d569660 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1500c8: Queued root: 0x7f073d5695f0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1500e0: Queued root: 0x7f073d569580 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1500f8: Queued root: 0x7f073d5694a0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150110: Queued root: 0x7f075968c3d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150128: Queued root: 0x7f075968c310 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150140: Queued root: 0x7f073d569350 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150158: Queued root: 0x7f073d5692e0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150170: Queued root: 0x7f073d569190 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150188: Queued root: 0x7f075967fd30 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1501a0: Queued root: 0x7f073d569120 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1501b8: Queued root: 0x7f075967fc70 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1501d0: Queued root: 0x7f073d568fd0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1501e8: Queued root: 0x7f073d568e80 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150200: Queued root: 0x7f073d568b70 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150218: Queued root: 0x7f073d568b00 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150230: Queued root: 0x7f073d568a90 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150248: Queued root: 0x7f07599a9b90 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150260: Queued root: 0x7f0761bcb460 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150278: Queued root: 0x7f075967f910 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150290: Queued root: 0x7f075967f8b0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1502a8: Queued root: 0x7f075967f6d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1502c0: Queued root: 0x7f073d5689b0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1502d8: Queued root: 0x7f073d568940 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1502f0: Queued root: 0x7f075967f670 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150308: Queued root: 0x7f073d568860 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150320: Queued root: 0x7f078c9f6a30 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150338: Queued root: 0x7f078d96e610 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150350: Queued root: 0x7f078b928bf0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150368: Queued root: 0x7f078b986bc0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150380: Queued root: 0x7f078c6914e0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150398: Queued root: 0x7f078ce51ba0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1503b0: Queued root: 0x7f078a7ca240 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1503c8: Queued root: 0x7f0784e81d20 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1503e0: Queued root: 0x7f078be03230 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1503f8: Queued root: 0x7f078887de20 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150410: Queued root: 0x7f078a4babc0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f150428: Queued root: 0x7f078cf541c0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f150440: Queued root: 0x7f07600894b0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f150458: Queued root: 0x7f078bf14080 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f150470: Queued root: 0x7f078e1da000 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f150488: Queued root: 0x7f078be0ed10 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1504a0: Queued root: 0x7f078bf142b0 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f1504b8: Queued root: 0x7f078bf14520 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f1504d0: Queued root: 0x7f078b8dd100 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1504e8: Queued root: 0x7f07585c2e30 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150500: Queued root: 0x7f07585c2f50 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150518: Queued root: 0x7f078cf7f0a0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150530: Queued root: 0x7f078bff3f90 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150548: Queued root: 0x7f07612ee050 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150560: Queued root: 0x7f07612c47f0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150578: Queued root: 0x7f078e083b40 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f150590: Queued root: 0x7f078b282d80 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1505a8: Queued root: 0x7f078bb8f330 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1505c0: Queued root: 0x7f078d8be140 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1505d8: Queued root: 0x7f078bf0a110 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1505f0: Queued root: 0x7f078bf09aa0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f150608: Queued root: 0x7f078b2b8060 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f150620: Queued root: 0x7f078b2cfa90 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f150638: Queued root: 0x7f078b2d0140 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f150650: Queued root: 0x7f078bf14d30 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f150668: Queued root: 0x7f078e234950 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f150680: Queued root: 0x7f078bf14750 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f150698: Queued root: 0x7f078bf14990 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f1506b0: Queued root: 0x7f078bf14ba0 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f1506c8: Queued root: 0x7f0763b79630 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1506e0: Queued root: 0x7f075933b850 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1506f8: Queued root: 0x7f075933b730 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150710: Queued root: 0x7f07622778b0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150728: Queued root: 0x7f076302c010 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150740: Queued root: 0x7f07624d5ed0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150758: Queued root: 0x7f0763b20490 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150770: Queued root: 0x7f0763b203d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150788: Queued root: 0x7f07598545b0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1507a0: Queued root: 0x7f078ba94270 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1507b8: Queued root: 0x7f078b7f5340 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1507d0: Queued root: 0x7f0786d81c30 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1507e8: Queued root: 0x7f0757fd43d0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f150800: Queued root: 0x7f0756b75510 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f150818: Queued root: 0x7f078a6879e0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150830: Queued root: 0x7f078d965960 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150848: Queued root: 0x7f078bfa32d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150860: Queued root: 0x7f078c08a770 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150878: Queued root: 0x7f078d8354d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150890: Queued root: 0x7f07590bd030 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1508a8: Queued root: 0x5935480 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1508c0: Queued root: 0x2380700 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1508d8: Queued root: 0x7f0753872ca0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1508f0: Queued root: 0x7f075456c3f0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f150908: Queued root: 0x7f07532f6a10 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f150920: Queued root: 0x7f07532f6770 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f150938: Queued root: 0x7f0753b44b00 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f150950: Queued root: 0x7f0758a34f70 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150968: Queued root: 0x7f0758a34f10 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150980: Queued root: 0x7f075382eae0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f150998: Queued root: 0x7f075382e180 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1509b0: Queued root: 0x7f07569839d0 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f1509c8: Queued root: 0x7f073f7f7c60 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1509e0: Queued root: 0x7f073f7f7710 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1509f8: Queued root: 0x7f07569f1090 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f150a10: Queued root: 0x7f078b0ab910 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150a28: Queued root: 0x7f078b7c40a0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150a40: Queued root: 0x7f078db1a900 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150a58: Queued root: 0x7f078db1d170 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150a70: Queued root: 0x7f078db1ca80 :: 0x7f078a3b9f20 (bits: 3)
        of type Core.MethodTable
0x7f075f150a88: Queued root: 0x7f078cf83160 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150aa0: Queued root: 0x7f078af9c160 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150ab8: Queued root: 0x7f078db1d450 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150ad0: Queued root: 0x7f078ca66dd0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150ae8: Queued root: 0x7f078db5b150 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150b00: Queued root: 0x7f078ad497a0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150b18: Queued root: 0x7f078b48b0e0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150b30: Queued root: 0x7f078b170ea0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150b48: Queued root: 0x7f078ccc4e20 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150b60: Queued root: 0x7f078a613d70 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150b78: Queued root: 0x7f078ad3fe70 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150b90: Queued root: 0x7f078d5764d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150ba8: Queued root: 0x7f078bc62350 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150bc0: Queued root: 0x7f078b781840 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f150bd8: Queued root: 0x7f078b41d3f0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f150bf0: Queued root: 0x7f078d5763a0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f150c08: Queued root: 0x7f078ad40c10 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f150c20: Queued root: 0x7f078cb43960 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150c38: Queued root: 0x7f078b5b8700 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f150c50: Queued root: 0x7f078e5efe60 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150c68: Queued root: 0x7f078e5efd30 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f150c80: Queued root: 0x7f078db5b000 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f150c98: Queued root: 0x7f078db1d310 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f150cb0: Queued root: 0x7f078db1d730 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150cc8: Queued root: 0x7f078db46e70 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150ce0: Queued root: 0x7f078a644640 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150cf8: Queued root: 0x7f078db20e70 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150d10: Queued root: 0x7f078c3698a0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150d28: Queued root: 0x7f078b7238d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150d40: Queued root: 0x7f078cc3d8b0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150d58: Queued root: 0x7f078ccb63f0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150d70: Queued root: 0x7f078ba519c0 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f150d88: Queued root: 0x7f078ad43fd0 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f150da0: Queued root: 0x7f078ba505d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150db8: Queued root: 0x7f078df14a30 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f150dd0: Queued root: 0x7f078ba53cc0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f150de8: Queued root: 0x7f078ba54150 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f150e00: Queued root: 0x7f078b4522a0 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f150e18: Queued root: 0x7f078b697d20 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f150e30: Queued root: 0x7f078b697c00 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f150e48: Queued root: 0x7f078b697ae0 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f150e60: Queued root: 0x7f078b6979b0 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f150e78: Queued root: 0x7f078b697880 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f150e90: Queued root: 0x7f078b697760 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f150ea8: Queued root: 0x7f078b697640 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f150ec0: Queued root: 0x7f078db4eb10 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f150ed8: Queued root: 0x7f078db20d30 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f150ef0: Queued root: 0x7f078b77fdc0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150f08: Queued root: 0x7f078cf7cea0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150f20: Queued root: 0x7f078b7a8980 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f150f38: Queued root: 0x7f078e5f0070 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150f50: Queued root: 0x7f078c413520 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150f68: Queued root: 0x7f078e5f0280 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150f80: Queued root: 0x7f078e5f09a0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150f98: Queued root: 0x7f078ccc3b50 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150fb0: Queued root: 0x7f078e5f0770 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150fc8: Queued root: 0x7f078e5a9ce0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150fe0: Queued root: 0x7f078ccbf690 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f150ff8: Queued root: 0x7f078a63dc00 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151010: Queued root: 0x7f078b3edca0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151028: Queued root: 0x7f078b3f0060 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151040: Queued root: 0x7f078e022bb0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151058: Queued root: 0x7f078e0c3270 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151070: Queued root: 0x7f078e022e10 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f151088: Queued root: 0x7f078b3ee4d0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1510a0: Queued root: 0x7f078b3ee050 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1510b8: Queued root: 0x7f078b3ed460 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1510d0: Queued root: 0x7f078ad3ca40 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1510e8: Queued root: 0x7f078cb1f5c0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151100: Queued root: 0x7f078d4a03f0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151118: Queued root: 0x7f078cc38c20 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151130: Queued root: 0x7f078c412a60 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151148: Queued root: 0x7f078a62cea0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151160: Queued root: 0x7f078bf98f90 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151178: Queued root: 0x7f078c412fa0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151190: Queued root: 0x7f078a642a30 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f1511a8: Queued root: 0x7f078a642500 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f1511c0: Queued root: 0x7f078a6423e0 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f1511d8: Queued root: 0x7f078a6422c0 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f1511f0: Queued root: 0x7f078a6421b0 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f151208: Queued root: 0x7f078b9dcb30 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f151220: Queued root: 0x7f078b9dc9e0 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f151238: Queued root: 0x7f078b9dc890 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f151250: Queued root: 0x7f078d3dc610 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151268: Queued root: 0x7f078cc664d0 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f151280: Queued root: 0x7f078cb01880 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151298: Queued root: 0x7f078cb01c30 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1512b0: Queued root: 0x7f078a642cd0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1512c8: Queued root: 0x7f078a641930 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1512e0: Queued root: 0x7f078d532020 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1512f8: Queued root: 0x7f078d541d20 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151310: Queued root: 0x7f078d52c570 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151328: Queued root: 0x7f078d543350 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151340: Queued root: 0x7f078d541430 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151358: Queued root: 0x7f078ccc4340 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151370: Queued root: 0x7f078ccbe7d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151388: Queued root: 0x7f078d532550 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1513a0: Queued root: 0x7f078a63f160 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1513b8: Queued root: 0x7f078c2ec790 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1513d0: Queued root: 0x7f078c2c7fe0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1513e8: Queued root: 0x7f078c2b92f0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151400: Queued root: 0x7f078c327fc0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151418: Queued root: 0x7f078cca9860 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151430: Queued root: 0x7f078d8df660 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151448: Queued root: 0x7f078d3db090 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151460: Queued root: 0x7f078cc60410 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151478: Queued root: 0x7f0753871370 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f151490: Queued root: 0x7f073f3fd3c0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1514a8: Queued root: 0x7f073eeb6e00 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1514c0: Queued root: 0x7f0753871180 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1514d8: Queued root: 0x7f078d47f800 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1514f0: Queued root: 0x68fe100 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f151508: Queued root: 0x7f078c994450 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151520: Queued root: 0x7f078c425490 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151538: Queued root: 0x7f078b9da610 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151550: Queued root: 0x7f078c425b90 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151568: Queued root: 0x7f078afc2d40 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151580: Queued root: 0x7f078bfecae0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f151598: Queued root: 0x7f073eaae850 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1515b0: Queued root: 0x7f07630cf990 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1515c8: Queued root: 0x7f078a63ee30 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1515e0: Queued root: 0x7f078a63e420 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1515f8: Queued root: 0x7f078a6271f0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f151610: Queued root: 0x7f078a626510 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f151628: Queued root: 0x7f078a63dff0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f151640: Queued root: 0x7f078d531f00 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f151658: Queued root: 0x7f078a4a0710 :: 0x7f078a3b9d30 (bits: 3)
        of type Module
0x7f075f151670: Queued root: 0x7f078a63dae0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f151688: Queued root: 0x7f078ca9eda0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1516a0: Queued root: 0x7f078e5f0630 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f1516b8: Queued root: 0x7f078e5f0870 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f1516d0: Queued root: 0x7f078e5f0150 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f1516e8: Queued root: 0x7f078e5eff40 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f151700: Queued root: 0x7f078db46d20 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f151718: Queued root: 0x7f078db1d5f0 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f151730: Queued root: 0x7f078db52b20 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f151748: Queued root: 0x7f078db1d030 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f151760: Queued root: 0x7f078db1a7d0 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f151778: Queued root: 0x7f078acfac40 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151790: Queued root: 0x7f078c1955a0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1517a8: Queued root: 0x7f078acfc600 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1517c0: Queued root: 0x7f078bc27d60 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1517d8: Queued root: 0x7f078acfc4c0 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f1517f0: Queued root: 0x7f078acfab10 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f151808: Queued root: 0x7f078b82a060 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151820: Queued root: 0x7f078ad319e0 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f151838: Queued root: 0x7f078c746200 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f151850: Queued root: 0x7f078b361730 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151868: Queued root: 0x7f078b3fc5f0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151880: Queued root: 0x7f078b30bd80 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151898: Queued root: 0x7f078c93d190 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1518b0: Queued root: 0x7f078b333350 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1518c8: Queued root: 0x7f0764fcb6d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1518e0: Queued root: 0x7f073c6c6cb0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1518f8: Queued root: 0x7f078b3290f0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f151910: Queued root: 0x7f078b3393c0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f151928: Queued root: 0x7f0758a14730 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151940: Queued root: 0x7f078d89f9d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151958: Queued root: 0x7f078b2c9590 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151970: Queued root: 0x7f078d89fde0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151988: Queued root: 0x7f078c350a00 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1519a0: Queued root: 0x7f078b316630 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1519b8: Queued root: 0x7f078b312930 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1519d0: Queued root: 0x7f078bb015c0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1519e8: Queued root: 0x7f0762a13970 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f151a00: Queued root: 0x7f073dee1990 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f151a18: Queued root: 0x7f078b31a320 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f151a30: Queued root: 0x7f0758a14190 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151a48: Queued root: 0x7f078adbcab0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151a60: Queued root: 0x7f078bdbaf60 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151a78: Queued root: 0x7f078bdbad90 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151a90: Queued root: 0x7f078d4e7ca0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151aa8: Queued root: 0x7f078c3489d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151ac0: Queued root: 0x7f078b693480 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151ad8: Queued root: 0x7f07642674f0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151af0: Queued root: 0x7f078b2c8df0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151b08: Queued root: 0x7f078d4e9d60 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151b20: Queued root: 0x7f078c348ff0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151b38: Queued root: 0x7f078b2ce3d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151b50: Queued root: 0x7f078a6f5810 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151b68: Queued root: 0x7f078b5d8e30 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151b80: Queued root: 0x7f078adbc430 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151b98: Queued root: 0x7f078adbc7d0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f151bb0: Queued root: 0x7f0785bdf440 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f151bc8: Queued root: 0x7f07641e7c90 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f151be0: Queued root: 0x7f078e562370 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151bf8: Queued root: 0x7f07641e7750 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f151c10: Queued root: 0x7f078b2c8cc0 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f151c28: Queued root: 0x7f078b32d2b0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f151c40: Queued root: 0x7f078b333b10 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f151c58: Queued root: 0x7f078b314fb0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f151c70: Queued root: 0x7f078b31a6c0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151c88: Queued root: 0x7f078b319ea0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f151ca0: Queued root: 0x7f078b31ac60 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f151cb8: Queued root: 0x7f078b3135a0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f151cd0: Queued root: 0x7f078b3260a0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f151ce8: Queued root: 0x7f078b327380 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f151d00: Queued root: 0x7f078b324ad0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151d18: Queued root: 0x7f078b66ba60 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151d30: Queued root: 0x7f078b30bed0 :: 0x7f078a3b9d30 (bits: 3)
        of type Module
0x7f075f151d48: Queued root: 0x7f078b3250e0 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f151d60: Queued root: 0x7f078b3249a0 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f151d78: Queued root: 0x7f078c7465d0 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f151d90: Queued root: 0x7f0788b36350 :: 0x7f078a3b6330 (bits: 3)
        of type DataType
0x7f075f151da8: Queued root: 0x7f0788b2e950 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f151dc0: Queued root: 0x7f073e1c7250 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151dd8: Queued root: 0x7f073cbf63b0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151df0: Queued root: 0x7f078cabf450 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151e08: Queued root: 0x7f0761840ec0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f151e20: Queued root: 0x7f078d0cefa0 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f151e38: Queued root: 0x7f078d0cf540 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151e50: Queued root: 0x7f078d0cf3a0 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f151e68: Queued root: 0x7f078d0cf950 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151e80: Queued root: 0x7f0761836c70 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f151e98: Queued root: 0x7f0755e83ab0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151eb0: Queued root: 0x7f0756a60c10 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f151ec8: Queued root: 0x7f0761836810 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f151ee0: Queued root: 0x7f078a7011e0 :: 0x7f078a3b9d30 (bits: 3)
        of type Module
0x7f075f151ef8: Queued root: 0x7f078be7a4a0 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f151f10: Queued root: 0x7f07624f58d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151f28: Queued root: 0x7f073cc789d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151f40: Queued root: 0x7f073ca53eb0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151f58: Queued root: 0x7f073cb82d10 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151f70: Queued root: 0x7f073cbecb50 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151f88: Queued root: 0x7f073cbecaf0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151fa0: Queued root: 0x7f078bbfe610 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151fb8: Queued root: 0x7f073ca95c90 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151fd0: Queued root: 0x7f073cb4a170 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f151fe8: Queued root: 0x7f073cb4a110 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152000: Queued root: 0x7f078be7aa10 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f152018: Queued root: 0x7f078bbc4a20 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152030: Queued root: 0x7f078ae4de90 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152048: Queued root: 0x7f0788b2d150 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f152060: Queued root: 0x7f078b101b60 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152078: Queued root: 0x7f078b103fb0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152090: Queued root: 0x7f078b101880 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1520a8: Queued root: 0x7f07602e3a30 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1520c0: Queued root: 0x7f078c3190f0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1520d8: Queued root: 0x7f078b596f00 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f1520f0: Queued root: 0x7f078b937280 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152108: Queued root: 0x7f078b937bb0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152120: Queued root: 0x7f078b93c5c0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152138: Queued root: 0x7f0764f5fa30 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152150: Queued root: 0x7f0764f5f9d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152168: Queued root: 0x7f0760301690 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152180: Queued root: 0x7f0755cb8b50 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152198: Queued root: 0x7f078bbfaba0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1521b0: Queued root: 0x7f078b61e1a0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1521c8: Queued root: 0x7f078bbf9690 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1521e0: Queued root: 0x7f078bbfb000 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1521f8: Queued root: 0x7f078c6447e0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152210: Queued root: 0x7f078b9854b0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152228: Queued root: 0x7f078d856ac0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152240: Queued root: 0x7f0759d386d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152258: Queued root: 0x7f078c015f00 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152270: Queued root: 0x7f0759d09210 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152288: Queued root: 0x7f078c015930 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1522a0: Queued root: 0x7f07581b87f0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1522b8: Queued root: 0x7f078b7463f0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1522d0: Queued root: 0x7f078b935200 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f1522e8: Queued root: 0x7f0755a106a0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152300: Queued root: 0x7f078b934220 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f152318: Queued root: 0x7f078abf68e0 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f152330: Queued root: 0x7f078d0ca2d0 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f152348: Queued root: 0x7f0764277b50 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152360: Queued root: 0x7f0764277af0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152378: Queued root: 0x7f0760269e10 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152390: Queued root: 0x7f078c03ea90 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1523a8: Queued root: 0x7f078b6a7120 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1523c0: Queued root: 0x7f078592f970 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1523d8: Queued root: 0x7f0763338d90 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1523f0: Queued root: 0x7f0759e70a30 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152408: Queued root: 0x7f078bfd8d30 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152420: Queued root: 0x7f0764277a90 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152438: Queued root: 0x7f0764277a30 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152450: Queued root: 0x7f07611ffd90 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152468: Queued root: 0x7f078bbfe420 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152480: Queued root: 0x7f0766a6add0 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f152498: Queued root: 0x7f0766a6b7d0 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f1524b0: Queued root: 0x7f0766c05310 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f1524c8: Queued root: 0x7f073cdcc290 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1524e0: Queued root: 0x7f0785247610 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1524f8: Queued root: 0x7f078defcca0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152510: Queued root: 0x7f0784d83610 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152528: Queued root: 0x7f073d17ae90 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152540: Queued root: 0x7f078ba7afd0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152558: Queued root: 0x7f078bf47dd0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152570: Queued root: 0x7f078bf48c80 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152588: Queued root: 0x7f078bb40060 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1525a0: Queued root: 0x7f078bb585c0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1525b8: Queued root: 0x7f07875c33d0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1525d0: Queued root: 0x7f0763e5dcf0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1525e8: Queued root: 0x7f07547507d0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152600: Queued root: 0x7f07547503f0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152618: Queued root: 0x7f0754750200 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152630: Queued root: 0x7f078ba7bf40 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152648: Queued root: 0x7f078ba7efd0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152660: Queued root: 0x7f078bb6d670 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152678: Queued root: 0x7f07649b2150 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f152690: Queued root: 0x7f07616584a0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1526a8: Queued root: 0x7f07611d5110 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1526c0: Queued root: 0x7f0761c20c40 :: 0x7f078a3b9d30 (bits: 3)
        of type Module
0x7f075f1526d8: Queued root: 0x7f07851c74f0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1526f0: Queued root: 0x7f078d349100 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152708: Queued root: 0x7f0784faff70 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152720: Queued root: 0x7f0784faff10 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152738: Queued root: 0x7f0763621810 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152750: Queued root: 0x7f0784f47550 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152768: Queued root: 0x7f0767cee590 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152780: Queued root: 0x7f0767cee4a0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152798: Queued root: 0x7f0784e42590 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1527b0: Queued root: 0x7f0760eada50 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1527c8: Queued root: 0x7f0755814330 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1527e0: Queued root: 0x7f075b23bf10 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f1527f8: Queued root: 0x7f078b4d0d60 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152810: Queued root: 0x7f073d809ed0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152828: Queued root: 0x7f078b4cd8f0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152840: Queued root: 0x7f0754184f10 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152858: Queued root: 0x7f075ae362d0 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f152870: Queued root: 0x7f0754256e50 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152888: Queued root: 0x7f0756632990 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f1528a0: Queued root: 0x7f078c26b160 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1528b8: Queued root: 0x7f078c236aa0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1528d0: Queued root: 0x7f0754adaef0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1528e8: Queued root: 0x7f073ee51750 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f152900: Queued root: 0x7f078898dd50 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f152918: Queued root: 0x7f0754187350 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152930: Queued root: 0x7f078c186690 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152948: Queued root: 0x7f078c7ad300 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152960: Queued root: 0x7f078da24f50 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152978: Queued root: 0x7f078dff7c00 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152990: Queued root: 0x7f073e844010 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1529a8: Queued root: 0x7f0753400be0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1529c0: Queued root: 0x7f0784f46710 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1529d8: Queued root: 0x7f078c262220 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1529f0: Queued root: 0x7f078c22c120 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152a08: Queued root: 0x7f073ead8010 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152a20: Queued root: 0x7f073ee51e50 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f152a38: Queued root: 0x7f073efa8010 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f152a50: Queued root: 0x7f078d96ab40 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152a68: Queued root: 0x7f078a97c5c0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152a80: Queued root: 0x7f078c623610 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152a98: Queued root: 0x7f078b932440 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152ab0: Queued root: 0x7f078c304160 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152ac8: Queued root: 0x7f078d026b70 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152ae0: Queued root: 0x7f078b93e000 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152af8: Queued root: 0x7f07560bf970 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152b10: Queued root: 0x7f078bf39fa0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152b28: Queued root: 0x7f078bc5d5d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152b40: Queued root: 0x7f078bc28b80 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152b58: Queued root: 0x7f0753db28c0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152b70: Queued root: 0x7f078c341890 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152b88: Queued root: 0x7f078b896670 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152ba0: Queued root: 0x7f078d01fd00 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152bb8: Queued root: 0x7f078d01f890 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152bd0: Queued root: 0x7f078b896210 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152be8: Queued root: 0x7f078b93cc50 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152c00: Queued root: 0x7f078d582880 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152c18: Queued root: 0x7f0759d04e80 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152c30: Queued root: 0x7f073c310f10 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152c48: Queued root: 0x7f078bfce0a0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152c60: Queued root: 0x7f078e5b57f0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152c78: Queued root: 0x7f078c011ec0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152c90: Queued root: 0x7f0763d2c670 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152ca8: Queued root: 0x7f078b4e20a0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152cc0: Queued root: 0x6f31280 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152cd8: Queued root: 0x7f078a7d2920 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152cf0: Queued root: 0x7f078db8f450 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152d08: Queued root: 0x7f078e0dce60 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152d20: Queued root: 0x7f07545c20e0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152d38: Queued root: 0x463f9c0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152d50: Queued root: 0x7f078c160400 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152d68: Queued root: 0x2a64500 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152d80: Queued root: 0x7f078bc05eb0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152d98: Queued root: 0x7f078b61f260 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152db0: Queued root: 0x7f078b61f930 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152dc8: Queued root: 0x7f073cb2cd50 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f152de0: Queued root: 0x7f073cb30b90 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f152df8: Queued root: 0x7f078c291750 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152e10: Queued root: 0x7f078c25ff40 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152e28: Queued root: 0x7f078c265e50 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152e40: Queued root: 0x7f078c2311c0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152e58: Queued root: 0x7f078b61edf0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152e70: Queued root: 0x7f078dfeb420 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152e88: Queued root: 0x7f073cc38550 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152ea0: Queued root: 0x7f075a93f3d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152eb8: Queued root: 0x7f075384ea70 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152ed0: Queued root: 0x7f075384ea10 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f152ee8: Queued root: 0x7f076062fc10 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152f00: Queued root: 0x7f073c99abd0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152f18: Queued root: 0x7f073c99a8b0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152f30: Queued root: 0x7f078695d050 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152f48: Queued root: 0x7f073cc0a610 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f152f60: Queued root: 0x7f078a9d0fd0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152f78: Queued root: 0x7f073d8dacc0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152f90: Queued root: 0x7f073cb71590 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f152fa8: Queued root: 0x7f0788b2d450 :: 0x7f078a449680 (bits: 3)
        of type Method
0x7f075f152fc0: Queued root: 0x7f073d8da9f0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f152fd8: Queued root: 0x7f073cb308d0 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f152ff0: Queued root: 0x7f073cb2cdd0 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f153008: Queued root: 0x7f073cb71a10 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f153020: Queued root: 0x7f078c3f57a0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153038: Queued root: 0x7f078b0584d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153050: Queued root: 0x7f078c035940 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153068: Queued root: 0x7f078592f910 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153080: Queued root: 0x7f0763338af0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153098: Queued root: 0x7f073ed66010 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f1530b0: Queued root: 0x7f073e28ae10 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1530c8: Queued root: 0x7f073ea38dc0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1530e0: Queued root: 0x7f07562c45e0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1530f8: Queued root: 0x7f078c2e74c0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153110: Queued root: 0x7f078df1a070 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153128: Queued root: 0x7f078c22aa20 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153140: Queued root: 0x7f078c261940 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153158: Queued root: 0x7f078cc4cec0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153170: Queued root: 0x6d9d8c0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f153188: Queued root: 0x7f078b984e40 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1531a0: Queued root: 0x2414680 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1531b8: Queued root: 0x6deec40 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1531d0: Queued root: 0x7f078c7f6430 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1531e8: Queued root: 0x7f078c4b21a0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153200: Queued root: 0x6c3aec0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f153218: Queued root: 0x6f4c040 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f153230: Queued root: 0x7f078b932dc0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153248: Queued root: 0x7f078b669f20 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153260: Queued root: 0x7f078a7c4be0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153278: Queued root: 0x7f078b6cb9e0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153290: Queued root: 0x7f0766a685d0 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f1532a8: Queued root: 0x7f07668c7990 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f1532c0: Queued root: 0x7f07535c25d0 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f1532d8: Queued root: 0x7f073efa9950 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f1532f0: Queued root: 0x7f073ee51790 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f153308: Queued root: 0x7f073cb30c50 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f153320: Queued root: 0x297be40 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f153338: Queued root: 0x20467c0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f153350: Queued root: 0x7f078b752530 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153368: Queued root: 0x7f078b984a90 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153380: Queued root: 0x7f078b9fc3f0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153398: Queued root: 0x7f078b9fc190 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1533b0: Queued root: 0x7f078c31b710 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1533c8: Queued root: 0x7f078c342c20 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1533e0: Queued root: 0x7f0761659b70 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1533f8: Queued root: 0x7f07874c5fb0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f153410: Queued root: 0x7f07608e5250 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f153428: Queued root: 0x7f078bb026b0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153440: Queued root: 0x4503fc0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f153458: Queued root: 0x7f078adb6520 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f153470: Queued root: 0x7f078da20400 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153488: Queued root: 0x7f078c22b090 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1534a0: Queued root: 0x7f078c260cc0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1534b8: Queued root: 0x7f078c229b10 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1534d0: Queued root: 0x7f078c292580 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1534e8: Queued root: 0x7f078b106680 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153500: Queued root: 0x7f078bf81f20 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153518: Queued root: 0x7f078bfb17f0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153530: Queued root: 0x7f078bfb2660 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153548: Queued root: 0x7f078be10f10 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153560: Queued root: 0x7f078bfbb190 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153578: Queued root: 0x7f0763d1e650 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f153590: Queued root: 0x7f078c803290 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1535a8: Queued root: 0x7f078d4f2100 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1535c0: Queued root: 0x7f078c1f9930 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1535d8: Queued root: 0x70540c0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1535f0: Queued root: 0x63b2fc0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f153608: Queued root: 0x6b02a00 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f153620: Queued root: 0x7f078ca9f2e0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153638: Queued root: 0x7f078caf10b0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153650: Queued root: 0x7f07621e66b0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153668: Queued root: 0x7f078b41af40 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153680: Queued root: 0x7f0753dea490 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f153698: Queued root: 0x2ade700 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1536b0: Queued root: 0x7f07864236d0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1536c8: Queued root: 0x7f078a7a4120 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1536e0: Queued root: 0x6edcf40 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1536f8: Queued root: 0x7f0766c04150 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f153710: Queued root: 0x52c3880 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f153728: Queued root: 0x7f073ced10f0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153740: Queued root: 0x7f078cd5a370 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153758: Queued root: 0x7f078a7c11d0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153770: Queued root: 0x7f078cbe20e0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153788: Queued root: 0x2784840 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1537a0: Queued root: 0x7f078cd7a600 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1537b8: Queued root: 0x7f078cdfc580 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1537d0: Queued root: 0x7f078cd78290 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1537e8: Queued root: 0x7f078ce4f360 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153800: Queued root: 0x63387c0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f153818: Queued root: 0x7f078cf4b560 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153830: Queued root: 0x7f07616644a0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f153848: Queued root: 0x7f0784c96920 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f153860: Queued root: 0x7f0761948670 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f153878: Queued root: 0x7f078d437da0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153890: Queued root: 0x7f0785124010 :: 0x7f078a4abad0 (bits: 3)
        of type Task
0x7f075f1538a8: Queued root: 0x7f078b6c4c40 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1538c0: Queued root: 0x7f078d861170 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1538d8: Queued root: 0x7f078d4732c0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f1538f0: Queued root: 0x3f142c0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f153908: Queued root: 0x7f078d96b5a0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153920: Queued root: 0x6369380 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f153938: Queued root: 0x7f078d9fc720 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153950: Queued root: 0x2753300 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f153968: Queued root: 0x5d64800 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f153980: Queued root: 0x7f078e0e1080 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153998: Queued root: 0x5942940 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1539b0: Queued root: 0x7f078a3e98b0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1539c8: Queued root: 0x29d4300 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f1539e0: Queued root: 0x7f078a3ca960 :: 0x7f078a3b9d30 (bits: 3)
        of type Module
0x7f075f1539f8: Queued root: 0x7f078e609e00 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153a10: Queued root: 0x7f078e61d1a0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153a28: Queued root: 0x7f07641df450 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f153a40: Queued root: 0x7f073cb0db10 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f153a58: Queued root: 0x7f073cb0dc10 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f153a70: Queued root: 0x7f078e675340 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153a88: Queued root: 0x2fdf180 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f153aa0: Queued root: 0x7f078dda55b0 :: 0x7f078a3b9e00 (bits: 3)
        of type Core.SimpleVector
0x7f075f153ab8: Queued root: 0x7f0784d60010 :: 0x7f078a4abad0 (bits: 3)
        of type Task
0x7f075f153ad0: Queued root: 0x7f073cb0fdd0 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f153ae8: Queued root: 0x7f073cb2c910 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f153b00: Queued root: 0x7f073cb71850 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f153b18: Queued root: 0x7f0760073870 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153b30: Queued root: 0x7f076299ad10 :: 0x7f078a59fd10 (bits: 3)
        of type Core.CodeInfo
0x7f075f153b48: Queued root: 0x7f073e077570 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153b60: Queued root: 0x7f076299ae10 :: 0x7f078a59fd10 (bits: 3)
        of type Core.CodeInfo
0x7f075f153b78: Queued root: 0x7f075505b3f0 :: 0x7f078a5ad080 (bits: 3)
        of type Array{Core.Compiler.InferenceResult, 1}
0x7f075f153b90: Queued root: 0x7f073e8d2790 :: 0x7f078a449ae0 (bits: 3)
        of type Core.MethodInstance
0x7f075f153ba8: Queued root: 0x7f0753ef2d10 :: 0x7f078a5ad330 (bits: 3)
        of type Core.Compiler.IdDict{Any, Tuple{Any, UInt64, UInt64}}
0x7f075f153bc0: Queued root: 0x7f0761f77a30 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153bd8: Queued root: 0x7f0784e80bb0 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153bf0: Queued root: 0x7f0761f75d20 :: 0x7f078a3ba4d0 (bits: 3)
        of type Array{Any, 1}
0x7f075f153c08:  r-- Stack frame 0x7ffd562a7660 -- 0 of 2 (indirect)
Unknown pc 0x7f0797533d08 --- ABORTING !!!

signal (6): Aborted
in expression starting at /home/pkgeval/.julia/packages/MixedModels/ALNok/test/linalg.jl:34
gsignal at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)
abort at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)
gc_assert_datatype_fail at /workspace/srcdir/src/gc.c:1588
gc_mark_loop at /workspace/srcdir/src/gc.c:2578
_jl_gc_collect at /workspace/srcdir/src/gc.c:2903
jl_gc_collect at /workspace/srcdir/src/gc.c:3109
maybe_collect at /workspace/srcdir/src/gc.c:827 [inlined]
jl_gc_pool_alloc at /workspace/srcdir/src/gc.c:1142
jl_gc_alloc_ at /workspace/srcdir/src/julia_internal.h:277 [inlined]
jl_f__expr at /workspace/srcdir/src/builtins.c:1088
Expr at ./boot.jl:224 [inlined]
replace_code_newstyle! at ./compiler/ssair/legacy.jl:81
optimize at ./compiler/optimize.jl:220
typeinf at ./compiler/typeinfer.jl:33
typeinf_edge at ./compiler/typeinfer.jl:484
abstract_call_method at ./compiler/abstractinterpretation.jl:418
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:111
abstract_call_known at ./compiler/abstractinterpretation.jl:887
abstract_call at ./compiler/abstractinterpretation.jl:909
abstract_call at ./compiler/abstractinterpretation.jl:894
abstract_eval at ./compiler/abstractinterpretation.jl:988
typeinf_local at ./compiler/abstractinterpretation.jl:1242
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1298
typeinf at ./compiler/typeinfer.jl:12
typeinf_edge at ./compiler/typeinfer.jl:484
abstract_call_method at ./compiler/abstractinterpretation.jl:418
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:111
abstract_call_known at ./compiler/abstractinterpretation.jl:887
abstract_call at ./compiler/abstractinterpretation.jl:909
abstract_call at ./compiler/abstractinterpretation.jl:894
abstract_eval at ./compiler/abstractinterpretation.jl:988
typeinf_local at ./compiler/abstractinterpretation.jl:1242
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1298
typeinf at ./compiler/typeinfer.jl:12
typeinf_edge at ./compiler/typeinfer.jl:484
abstract_call_method at ./compiler/abstractinterpretation.jl:418
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:111
abstract_call_known at ./compiler/abstractinterpretation.jl:887
abstract_call at ./compiler/abstractinterpretation.jl:909
abstract_call at ./compiler/abstractinterpretation.jl:894
abstract_eval at ./compiler/abstractinterpretation.jl:988
typeinf_local at ./compiler/abstractinterpretation.jl:1242
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1298
typeinf at ./compiler/typeinfer.jl:12
typeinf_edge at ./compiler/typeinfer.jl:484
abstract_call_method at ./compiler/abstractinterpretation.jl:418
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:111
abstract_call_known at ./compiler/abstractinterpretation.jl:887
abstract_call at ./compiler/abstractinterpretation.jl:909
abstract_call at ./compiler/abstractinterpretation.jl:894
abstract_eval at ./compiler/abstractinterpretation.jl:988
typeinf_local at ./compiler/abstractinterpretation.jl:1242
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1298
typeinf at ./compiler/typeinfer.jl:12
typeinf_edge at ./compiler/typeinfer.jl:484
abstract_call_method at ./compiler/abstractinterpretation.jl:418
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:111
abstract_call_known at ./compiler/abstractinterpretation.jl:887
abstract_call at ./compiler/abstractinterpretation.jl:909
abstract_call at ./compiler/abstractinterpretation.jl:894
abstract_eval at ./compiler/abstractinterpretation.jl:988
typeinf_local at ./compiler/abstractinterpretation.jl:1242
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1298
typeinf at ./compiler/typeinfer.jl:12
typeinf_edge at ./compiler/typeinfer.jl:484
abstract_call_method at ./compiler/abstractinterpretation.jl:418
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:111
abstract_call_known at ./compiler/abstractinterpretation.jl:887
abstract_call at ./compiler/abstractinterpretation.jl:909
abstract_call at ./compiler/abstractinterpretation.jl:894
abstract_eval at ./compiler/abstractinterpretation.jl:988
typeinf_local at ./compiler/abstractinterpretation.jl:1242
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1298
typeinf at ./compiler/typeinfer.jl:12
typeinf_edge at ./compiler/typeinfer.jl:484
abstract_call_method at ./compiler/abstractinterpretation.jl:418
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:111
abstract_call_known at ./compiler/abstractinterpretation.jl:887
abstract_call at ./compiler/abstractinterpretation.jl:909
abstract_call at ./compiler/abstractinterpretation.jl:894
abstract_eval at ./compiler/abstractinterpretation.jl:988
typeinf_local at ./compiler/abstractinterpretation.jl:1242
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1298
typeinf at ./compiler/typeinfer.jl:12
typeinf_edge at ./compiler/typeinfer.jl:484
abstract_call_method at ./compiler/abstractinterpretation.jl:418
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:111
abstract_call_known at ./compiler/abstractinterpretation.jl:887
abstract_call at ./compiler/abstractinterpretation.jl:909
abstract_call at ./compiler/abstractinterpretation.jl:894
abstract_eval at ./compiler/abstractinterpretation.jl:988
typeinf_local at ./compiler/abstractinterpretation.jl:1242
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1298
typeinf at ./compiler/typeinfer.jl:12
typeinf_edge at ./compiler/typeinfer.jl:484
abstract_call_method at ./compiler/abstractinterpretation.jl:418
abstract_call_gf_by_type at ./compiler/abstractinterpretation.jl:111
abstract_call_known at ./compiler/abstractinterpretation.jl:887
abstract_call at ./compiler/abstractinterpretation.jl:909
abstract_call at ./compiler/abstractinterpretation.jl:894
abstract_eval at ./compiler/abstractinterpretation.jl:988
typeinf_local at ./compiler/abstractinterpretation.jl:1242
typeinf_nocycle at ./compiler/abstractinterpretation.jl:1298
typeinf at ./compiler/typeinfer.jl:12
typeinf_ext at ./compiler/typeinfer.jl:570
typeinf_ext at ./compiler/typeinfer.jl:601
jfptr_typeinf_ext_20212.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/src/julia.h:1692 [inlined]
jl_type_infer at /workspace/srcdir/src/gf.c:300
jl_generate_fptr at /workspace/srcdir/src/jitlayers.cpp:265
jl_compile_method_internal at /workspace/srcdir/src/gf.c:1968
jl_compile_method_internal at /workspace/srcdir/src/gf.c:1923 [inlined]
_jl_invoke at /workspace/srcdir/src/gf.c:2228 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
show_backtrace at ./errorshow.jl:740
#showerror#684 at ./errorshow.jl:174
showerror##kw at ./errorshow.jl:169
unknown function (ip: 0x7f075e4bcd48)
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
show_exception_stack at ./errorshow.jl:818
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
#sprint#352 at ./strings/io.jl:105
sprint at ./strings/io.jl:101
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
Error at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:158
_jl_invoke at /workspace/srcdir/src/gf.c:2235 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/src/julia.h:1692 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:117
eval_value at /workspace/srcdir/src/interpreter.c:206
eval_stmt_value at /workspace/srcdir/src/interpreter.c:157 [inlined]
eval_body at /workspace/srcdir/src/interpreter.c:566
eval_body at /workspace/srcdir/src/interpreter.c:492
jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:660
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:827
jl_parse_eval_all at /workspace/srcdir/src/ast.c:913
jl_load_rewrite at /workspace/srcdir/src/toplevel.c:898
include at ./client.jl:457
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/src/julia.h:1692 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:117
eval_value at /workspace/srcdir/src/interpreter.c:206
eval_stmt_value at /workspace/srcdir/src/interpreter.c:157 [inlined]
eval_body at /workspace/srcdir/src/interpreter.c:566
jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:660
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:827
jl_parse_eval_all at /workspace/srcdir/src/ast.c:913
jl_load_rewrite at /workspace/srcdir/src/toplevel.c:898
include at ./client.jl:457
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/src/julia.h:1692 [inlined]
do_call at /workspace/srcdir/src/interpreter.c:117
eval_value at /workspace/srcdir/src/interpreter.c:206
eval_stmt_value at /workspace/srcdir/src/interpreter.c:157 [inlined]
eval_body at /workspace/srcdir/src/interpreter.c:566
jl_interpret_toplevel_thunk at /workspace/srcdir/src/interpreter.c:660
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:827
jl_toplevel_eval_flex at /workspace/srcdir/src/toplevel.c:777
jl_toplevel_eval_in at /workspace/srcdir/src/toplevel.c:867
eval at ./boot.jl:331
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
exec_options at ./client.jl:272
_start at ./client.jl:506
jfptr__start_57981.clone_1 at /opt/julia/lib/julia/sys.so (unknown line)
_jl_invoke at /workspace/srcdir/src/gf.c:2218 [inlined]
jl_apply_generic at /workspace/srcdir/src/gf.c:2402
jl_apply at /workspace/srcdir/ui/../src/julia.h:1692 [inlined]
true_main at /workspace/srcdir/ui/repl.c:96
main at /workspace/srcdir/ui/repl.c:217
__libc_start_main at /lib/x86_64-linux-gnu/libc.so.6 (unknown line)
unknown function (ip: 0x4015e4)
Allocations: 116898931 (Pool: 116865534; Big: 33397); GC: 97
ERROR: Package MixedModels errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:52
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1515
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:316
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:303
 [5] #test#68 at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [6] test at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:297 [inlined]
 [7] #test#67 at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [8] test at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:296 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [10] test(::String) at /workspace/srcdir/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:295
 [11] top-level scope at none:16
