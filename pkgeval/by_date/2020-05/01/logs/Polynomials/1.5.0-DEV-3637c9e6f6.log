Julia Version 1.5.0-DEV.740
Commit 3637c9e6f6 (2020-04-30 17:40 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed XML2_jll ───── v2.9.9+4
  Installed Mocking ────── v0.7.1
  Installed Zlib_jll ───── v1.2.11+9
  Installed RecipesBase ── v1.0.1
  Installed ExprTools ──── v0.1.1
  Installed Intervals ──── v1.1.0
  Installed Polynomials ── v0.8.0
  Installed TimeZones ──── v1.1.1
  Installed Libiconv_jll ─ v1.16.0+2
  Installed EzXML ──────── v1.1.0
Updating `~/.julia/environments/v1.5/Project.toml`
  [f27b6e38] + Polynomials v0.8.0
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [e2ba6199] + ExprTools v0.1.1
  [8f5d6c58] + EzXML v1.1.0
  [d8418881] + Intervals v1.1.0
  [94ce4f54] + Libiconv_jll v1.16.0+2
  [78c3b35d] + Mocking v0.7.1
  [f27b6e38] + Polynomials v0.8.0
  [3cdcf5f2] + RecipesBase v1.0.1
  [f269a46b] + TimeZones v1.1.1
  [02c8fc9c] + XML2_jll v2.9.9+4
  [83775a58] + Zlib_jll v1.2.11+9
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [6462fe0b] + Sockets
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
   Building TimeZones → `~/.julia/packages/TimeZones/X323b/deps/build.log`
    Testing Polynomials
Status `/tmp/jl_pI6G5D/Project.toml`
  [d8418881] Intervals v1.1.0
  [f27b6e38] Polynomials v0.8.0
  [3cdcf5f2] RecipesBase v1.0.1
  [276daf66] SpecialFunctions v0.10.0
  [37e2e46d] LinearAlgebra
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_pI6G5D/Manifest.toml`
  [e66e0078] CompilerSupportLibraries_jll v0.3.3+0
  [e2ba6199] ExprTools v0.1.1
  [8f5d6c58] EzXML v1.1.0
  [d8418881] Intervals v1.1.0
  [94ce4f54] Libiconv_jll v1.16.0+2
  [78c3b35d] Mocking v0.7.1
  [efe28fd5] OpenSpecFun_jll v0.5.3+3
  [f27b6e38] Polynomials v0.8.0
  [3cdcf5f2] RecipesBase v1.0.1
  [276daf66] SpecialFunctions v0.10.0
  [f269a46b] TimeZones v1.1.1
  [02c8fc9c] XML2_jll v2.9.9+4
  [83775a58] Zlib_jll v1.2.11+9
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8ba89e20] Distributed
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Polynomial    |  238    238
Test Summary: | Pass  Total
ChebyshevT    |  212    212
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly(::Array{Float32,1}) at Poly.jl:26
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly(::Array{Int64,1}) at Poly.jl:26
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly(::Array{Rational{Int64},1}) at Poly.jl:26
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly(::Array{Float64,1}) at Poly.jl:26
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly{Float64}(::Array{Float64,1}, ::Symbol) at abstract.jl:45
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/abstract.jl:45
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = + at Poly.jl:125 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:125
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = fromroots(::Type{Poly}, ::Array{Float64,1}; var::Symbol) at Poly.jl:64
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:64
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly{Int64}(::Array{Int64,1}, ::Symbol) at abstract.jl:45
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/abstract.jl:45
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly{Float32}(::Array{Float32,1}, ::Symbol) at abstract.jl:45
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/abstract.jl:45
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = +(::Poly{Float32}, ::Poly{Int64}) at Poly.jl:125
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:125
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = +(::Poly{Int64}, ::Poly{Int64}) at Poly.jl:125
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:125
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = + at Poly.jl:125 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:125
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = + at Poly.jl:125 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:125
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = *(::Poly{Int64}, ::Poly{Int64}) at Poly.jl:137
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:137
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = *(::Poly{Float32}, ::Poly{Float32}) at Poly.jl:137
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:137
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly{Float64}(::Array{Float32,1}, ::Symbol) at abstract.jl:45
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/abstract.jl:45
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly{Float64}(::Array{Int64,1}, ::Symbol) at abstract.jl:45
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/abstract.jl:45
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly{Float64}(::Array{Rational{Int64},1}, ::Symbol) at abstract.jl:45
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/abstract.jl:45
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = fromroots(::Type{Poly}, ::Array{Int64,1}; var::Symbol) at Poly.jl:64
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:64
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = fromroots(::Type{Poly}, ::Array{Rational{Int64},1}; var::Symbol) at Poly.jl:64
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:64
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = integrate(::Poly{Int64}, ::Int64) at Poly.jl:89
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:89
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = derivative(::Poly{Float64}, ::Int64) at Poly.jl:104
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:104
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = derivative(::Poly{Rational{Int64}}, ::Int64) at Poly.jl:104
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:104
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = derivative(::Poly{Int64}, ::Int64) at Poly.jl:104
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:104
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = derivative(::Poly{Float32}, ::Int64) at Poly.jl:104
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:104
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = integrate(::Poly{Float32}, ::Int64) at Poly.jl:89
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:89
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly(::Array{Rational,1}) at Poly.jl:26
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = integrate(::Poly{Rational}, ::Int64) at Poly.jl:89
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:89
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at abstract.jl:47 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/abstract.jl:47
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = + at Poly.jl:125 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:125
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at abstract.jl:47 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/abstract.jl:47
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = + at Poly.jl:125 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:125
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly{Int64}(::Array{Float64,1}, ::Symbol) at abstract.jl:45
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/abstract.jl:45
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly{Rational{Int64}}(::Array{Rational{Int64},1}, ::Symbol) at abstract.jl:45
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/abstract.jl:45
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly{Rational{Int64}}(::Array{Float64,1}, ::Symbol) at abstract.jl:45
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/abstract.jl:45
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = top-level scope at Poly.jl:108
└ @ Core ~/.julia/packages/Polynomials/ghqdF/test/Poly.jl:108
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = top-level scope at Poly.jl:109
└ @ Core ~/.julia/packages/Polynomials/ghqdF/test/Poly.jl:109
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = top-level scope at Poly.jl:110
└ @ Core ~/.julia/packages/Polynomials/ghqdF/test/Poly.jl:110
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = top-level scope at Poly.jl:121
└ @ Core ~/.julia/packages/Polynomials/ghqdF/test/Poly.jl:121
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = top-level scope at Poly.jl:127
└ @ Core ~/.julia/packages/Polynomials/ghqdF/test/Poly.jl:127
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Pade(::Poly{Rational{BigInt}}, ::Int64, ::Int64) at pade.jl:65
└ @ Polynomials.PolyCompat.PadeApproximation ~/.julia/packages/Polynomials/ghqdF/src/pade.jl:65
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Pade(::Poly{Rational{BigInt}}, ::Int64, ::Int64) at pade.jl:66
└ @ Polynomials.PolyCompat.PadeApproximation ~/.julia/packages/Polynomials/ghqdF/src/pade.jl:66
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Pade(::Poly{Rational{BigInt}}, ::Int64, ::Int64) at pade.jl:67
└ @ Polynomials.PolyCompat.PadeApproximation ~/.julia/packages/Polynomials/ghqdF/src/pade.jl:67
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Pade(::Poly{Rational{BigInt}}, ::Int64, ::Int64) at pade.jl:68
└ @ Polynomials.PolyCompat.PadeApproximation ~/.julia/packages/Polynomials/ghqdF/src/pade.jl:68
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly{Rational{BigInt}}(::Array{Rational{BigInt},1}, ::Symbol) at abstract.jl:45
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/abstract.jl:45
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = *(::Poly{Rational{BigInt}}, ::Poly{Rational{BigInt}}) at Poly.jl:137
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:137
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = + at Poly.jl:125 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:125
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = + at Poly.jl:125 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:125
┌ Warning: Use of `Pade` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Pade at pade.jl:61 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/pade.jl:61
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = top-level scope at Poly.jl:132
└ @ Core ~/.julia/packages/Polynomials/ghqdF/test/Poly.jl:132
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = top-level scope at Poly.jl:137
└ @ Core ~/.julia/packages/Polynomials/ghqdF/test/Poly.jl:137
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = top-level scope at Poly.jl:144
└ @ Core ~/.julia/packages/Polynomials/ghqdF/test/Poly.jl:144
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = fit(::Type{Poly}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Array{Float64,1}, ::Int64; weights::Nothing, var::Symbol) at common.jl:84
└ @ Polynomials ~/.julia/packages/Polynomials/ghqdF/src/common.jl:84
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = fit(::Type{Poly}, ::Array{Number,1}, ::Array{Number,1}, ::Int64; weights::Nothing, var::Symbol) at common.jl:84
└ @ Polynomials ~/.julia/packages/Polynomials/ghqdF/src/common.jl:84
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = +(::Poly{Float64}, ::Poly{Float64}) at Poly.jl:125
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:125
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at abstract.jl:47 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/abstract.jl:47
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at abstract.jl:47 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/abstract.jl:47
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = + at Poly.jl:125 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:125
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly(::Array{Complex{Int64},1}) at Poly.jl:26
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly{Complex{Int64}}(::Array{Complex{Int64},1}, ::Symbol) at abstract.jl:45
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/abstract.jl:45
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly(::Array{Mod2,1}) at Poly.jl:26
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly(::Array{Complex{Float64},1}) at Poly.jl:26
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = top-level scope at Poly.jl:271
└ @ Core ~/.julia/packages/Polynomials/ghqdF/test/Poly.jl:271
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = top-level scope at Poly.jl:272
└ @ Core ~/.julia/packages/Polynomials/ghqdF/test/Poly.jl:272
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = top-level scope at Poly.jl:273
└ @ Core ~/.julia/packages/Polynomials/ghqdF/test/Poly.jl:273
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = top-level scope at Poly.jl:274
└ @ Core ~/.julia/packages/Polynomials/ghqdF/test/Poly.jl:274
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = derivative(::Poly{Float64}, ::Int64) at Poly.jl:96
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:96
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at Poly.jl:26 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at Poly.jl:26 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly{Complex{Float64}}(::Array{Float64,1}, ::Symbol) at abstract.jl:45
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/abstract.jl:45
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at abstract.jl:47 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/abstract.jl:47
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = + at Poly.jl:125 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:125
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly{Complex{Float64}}(::Array{Complex{Float64},1}, ::Symbol) at abstract.jl:45
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/abstract.jl:45
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = top-level scope at Poly.jl:317
└ @ Core ~/.julia/packages/Polynomials/ghqdF/test/Poly.jl:317
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = top-level scope at Poly.jl:318
└ @ Core ~/.julia/packages/Polynomials/ghqdF/test/Poly.jl:318
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = top-level scope at Poly.jl:319
└ @ Core ~/.julia/packages/Polynomials/ghqdF/test/Poly.jl:319
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = top-level scope at Poly.jl:327
└ @ Core ~/.julia/packages/Polynomials/ghqdF/test/Poly.jl:327
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at abstract.jl:47 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/abstract.jl:47
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at abstract.jl:47 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/abstract.jl:47
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at abstract.jl:47 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/abstract.jl:47
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly at abstract.jl:47 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/abstract.jl:47
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = fit(::Type{Poly}, ::Array{Real,1}, ::Array{Real,1}, ::Int64; weights::Nothing, var::Symbol) at common.jl:84
└ @ Polynomials ~/.julia/packages/Polynomials/ghqdF/src/common.jl:84
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Poly(::Array{BigInt,1}) at Poly.jl:26
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:26
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = *(::Poly{BigInt}, ::Poly{BigInt}) at Poly.jl:137
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:137
┌ Warning: Use of `Poly` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = derivative(::Poly{BigInt}, ::Int64) at Poly.jl:104
└ @ Polynomials.PolyCompat ~/.julia/packages/Polynomials/ghqdF/src/polynomials/Poly.jl:104
┌ Warning: Use of `Pade` from v1.0 forward will require `using Polynomials.PolyCompat`
│   caller = Pade at pade.jl:36 [inlined]
└ @ Core ~/.julia/packages/Polynomials/ghqdF/src/pade.jl:36
Test Summary:              | Pass  Total
Poly, Pade (compatability) |  166    166
    Testing Polynomials tests passed 
