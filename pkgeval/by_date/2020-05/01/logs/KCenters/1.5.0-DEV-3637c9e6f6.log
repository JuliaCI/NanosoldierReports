Julia Version 1.5.0-DEV.740
Commit 3637c9e6f6 (2020-04-30 17:40 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed InvertedIndices ───────────── v1.0.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed Reexport ──────────────────── v0.2.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed KCenters ──────────────────── v0.2.2
  Installed JSON ──────────────────────── v0.21.0
  Installed SimilaritySearch ──────────── v0.3.19
  Installed Missings ──────────────────── v0.4.3
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Compat ────────────────────── v3.9.0
  Installed TableTraits ───────────────── v1.0.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed Tables ────────────────────── v1.0.4
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed DataFrames ────────────────── v0.20.2
  Installed OrderedCollections ────────── v1.1.0
  Installed DataAPI ───────────────────── v1.3.0
  Installed Parsers ───────────────────── v1.0.2
  Installed DataStructures ────────────── v0.17.15
  Installed CategoricalArrays ─────────── v0.7.7
  Installed MLDataPattern ─────────────── v0.5.3
  Installed MLDataUtils ───────────────── v0.5.1
  Installed StatsBase ─────────────────── v0.32.2
  Installed MappedArrays ──────────────── v0.2.2
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.9.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.15
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v1.0.2
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_ycYR2R/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_ycYR2R/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.9.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.15
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v1.0.2
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9360659371813138
[ Info: 0.8321307849884033
[ Info: 0.553681271125873
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33292161889374255
mean(cdnet.distances) = 0.3566757944971323
mean(crand.distances) = 0.335458791082104
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.177734375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.177734375,"f1":null,"seconds":4.624947905540466e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.03125,"distances_sum":514.4779537370744}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.177734375,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.177734375,"f1":null,"seconds":4.624947905540466e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.03125,"distances_sum":514.4779537370744}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.177734375,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.177734375,"f1":null,"seconds":4.624947905540466e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.03125,"distances_sum":514.4779537370744}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.650390625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.650390625,"f1":0.770891434953936,"seconds":5.68293035030365e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":7.90625,"distances_sum":1750.1340121802507}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5517578125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5517578125,"f1":null,"seconds":5.124136805534363e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":7.421875,"distances_sum":1417.0594963550884}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.537109375, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.537109375,"f1":0.6807504995005002,"seconds":5.207955837249756e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":7.0546875,"distances_sum":1369.4137794611024}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.650390625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.650390625,"f1":0.770891434953936,"seconds":5.68293035030365e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":7.90625,"distances_sum":1750.1340121802507}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9323775183150189,"seconds":6.3963234424591064e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.8125,"distances_sum":2624.4063479623746}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.75, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.75,"f1":0.8489448051948061,"seconds":5.887821316719055e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.3515625,"distances_sum":2098.4284489118463}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.8994848901098907,"seconds":6.206333637237549e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.359375,"distances_sum":2494.967487017403}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8173828125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8173828125,"f1":0.8913950632700643,"seconds":6.32554292678833e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.3828125,"distances_sum":2414.4903331429014}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8828125,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8828125,"f1":0.9323775183150189,"seconds":6.3963234424591064e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.8125,"distances_sum":2624.4063479623746}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9650328837828843,"seconds":7.038936018943787e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.9296875,"distances_sum":2874.9938289898732}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9460882867132875,"seconds":6.737187504768372e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.8125,"distances_sum":2735.9670572421155}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9553972069597075,"seconds":6.716698408126831e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.875,"distances_sum":2788.0528800152483}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9533341658341663,"seconds":7.372349500656128e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.8125,"distances_sum":2808.851703388917}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9673191391941395,"seconds":6.891787052154541e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.84375,"distances_sum":2924.5121667432395}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9673191391941395,"seconds":6.891787052154541e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.84375,"distances_sum":2924.5121667432395}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9673191391941395,"seconds":6.891787052154541e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":8.84375,"distances_sum":2924.5121667432395}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.208984375,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.208984375,"f1":null,"seconds":4.230067133903503e-6,"exhaustive_search_seconds":1.6652047634124756e-6,"evaluations":7.6328125,"distances_sum":601.1073305861453}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.208984375,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.208984375,"f1":null,"seconds":4.230067133903503e-6,"exhaustive_search_seconds":1.6652047634124756e-6,"evaluations":7.6328125,"distances_sum":601.1073305861453}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":4,"bsize":4}, perf: {"precision":null,"recall":0.6650390625,"f1":null,"seconds":4.883855581283569e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.515625,"distances_sum":1395.2143472698915}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1943359375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1943359375,"f1":null,"seconds":3.2372772693634033e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":5.421875,"distances_sum":397.95794442370567}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.751953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":0.9874255952380953,"recall":0.751953125,"f1":0.8473131035631042,"seconds":5.3942203521728516e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.0625,"distances_sum":1603.02785319322}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.751953125,"state":{"ssize":1,"bsize":5},"perf":{"precision":0.9874255952380953,"recall":0.751953125,"f1":0.8473131035631042,"seconds":5.3942203521728516e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.0625,"distances_sum":1603.02785319322}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.818359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":0.9849237351190475,"recall":0.818359375,"f1":0.8863751482892113,"seconds":4.859641194343567e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.25,"distances_sum":1807.2556026879427}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.849609375, conf: {"ssize":5,"bsize":6}, perf: {"precision":0.990513392857143,"recall":0.849609375,"f1":0.909718406593407,"seconds":5.552545189857483e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.3203125,"distances_sum":1912.0898880928098}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":8,"bsize":6}, perf: {"precision":0.9888392857142857,"recall":0.8466796875,"f1":0.9073031135531143,"seconds":5.0533562898635864e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.3046875,"distances_sum":1902.5796798656709}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.849609375,"state":{"ssize":5,"bsize":6},"perf":{"precision":0.990513392857143,"recall":0.849609375,"f1":0.909718406593407,"seconds":5.552545189857483e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.3203125,"distances_sum":1912.0898880928098}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":5,"bsize":10}, perf: {"precision":0.9928850446428571,"recall":0.9208984375,"f1":0.9528781765109893,"seconds":6.027519702911377e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8671875,"distances_sum":2162.4250698036712}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":4,"bsize":8}, perf: {"precision":0.9846540178571429,"recall":0.9111328125,"f1":0.9436054830586085,"seconds":5.634501576423645e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8359375,"distances_sum":2169.0627485420887}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":1,"bsize":10}, perf: {"precision":0.991489955357143,"recall":0.9287109375,"f1":0.9564109718406598,"seconds":5.725771188735962e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8515625,"distances_sum":2212.7921113546026}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":3,"bsize":9}, perf: {"precision":0.9916015625,"recall":0.908203125,"f1":0.9444060496794875,"seconds":5.5246055126190186e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8125,"distances_sum":2130.6738479121327}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":1,"bsize":10},"perf":{"precision":0.991489955357143,"recall":0.9287109375,"f1":0.9564109718406598,"seconds":5.725771188735962e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8515625,"distances_sum":2212.7921113546026}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9287109375,"state":{"ssize":1,"bsize":10},"perf":{"precision":0.991489955357143,"recall":0.9287109375,"f1":0.9564109718406598,"seconds":5.725771188735962e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.8515625,"distances_sum":2212.7921113546026}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2421875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2421875,"f1":null,"seconds":3.3471733331680298e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":6.1015625,"distances_sum":492.49064545482054}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6865234375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6865234375,"f1":0.8022095959595968,"seconds":4.712492227554321e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":7.640625,"distances_sum":1433.927490151903}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.40625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.40625,"f1":null,"seconds":3.7886202335357666e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":6.296875,"distances_sum":733.8491991585372}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6865234375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6865234375,"f1":0.8022095959595968,"seconds":4.712492227554321e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":7.640625,"distances_sum":1433.927490151903}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78515625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.78515625,"f1":0.8723333957708969,"seconds":5.889683961868286e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":7.8515625,"distances_sum":1686.372578333023}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7861328125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7861328125,"f1":0.8722100815850823,"seconds":5.5246055126190186e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":7.8203125,"distances_sum":1679.8982743826523}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7861328125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7861328125,"f1":0.8705247877122885,"seconds":5.476176738739014e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":7.984375,"distances_sum":1708.344812261849}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7861328125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7861328125,"f1":0.8722100815850823,"seconds":5.5246055126190186e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":7.8203125,"distances_sum":1679.8982743826523}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87109375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87109375,"f1":0.9270547161172169,"seconds":6.673857569694519e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.7578125,"distances_sum":2011.3508316138486}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9527930402930406,"seconds":6.746500730514526e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.875,"distances_sum":2178.2739971810615}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.859375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.859375,"f1":0.9195112179487187,"seconds":6.20819628238678e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.171875,"distances_sum":1932.0971610101528}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9616643772893778,"seconds":6.945803761482239e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.8671875,"distances_sum":2238.3770956746325}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9513106684981688,"seconds":6.750226020812988e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.8203125,"distances_sum":2171.737308476809}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9306640625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9616643772893778,"seconds":6.945803761482239e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.8671875,"distances_sum":2238.3770956746325}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9306640625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9306640625,"f1":0.9616643772893778,"seconds":6.945803761482239e-6,"exhaustive_search_seconds":1.2256205081939697e-6,"evaluations":8.8671875,"distances_sum":2238.3770956746325}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.8621003996004005,"seconds":5.979090929031372e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":7.703125,"distances_sum":1716.6184227510953}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8017578125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.8017578125,"f1":0.8817801989676998,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":7.875,"distances_sum":1816.033582393477}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6630859375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6630859375,"f1":0.7844471500721508,"seconds":5.420297384262085e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":7.3203125,"distances_sum":1373.8574010648224}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8017578125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.8017578125,"f1":0.8817801989676998,"seconds":5.807727575302124e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":7.875,"distances_sum":1816.033582393477}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9208905677655684,"seconds":6.243586540222168e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.671875,"distances_sum":2066.646605342863}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9517342032967037,"seconds":6.550922989845276e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.7734375,"distances_sum":2281.161965589441}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9558836996337,"seconds":6.7390501499176025e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.8515625,"distances_sum":2267.2408197017735}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8271484375, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8271484375,"f1":0.8997627372627379,"seconds":6.336718797683716e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.125,"distances_sum":1892.9483036794234}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.9558836996337,"seconds":6.7390501499176025e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.8515625,"distances_sum":2267.2408197017735}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.962890625, conf: {"ssize":5,"bsize":13}, perf: {"precision":1.0,"recall":0.962890625,"f1":0.9794471153846158,"seconds":7.009133696556091e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.9609375,"distances_sum":2416.5787554866415}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.97265625, conf: {"ssize":4,"bsize":13}, perf: {"precision":1.0,"recall":0.97265625,"f1":0.985342261904762,"seconds":6.966292858123779e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.9609375,"distances_sum":2465.3082446604294}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9670215201465207,"seconds":6.938353180885315e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.8828125,"distances_sum":2347.9147114900065}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9752632783882788,"seconds":7.363036274909973e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.921875,"distances_sum":2392.4258071663094}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":2,"bsize":12}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9716346153846156,"seconds":7.722526788711548e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.8984375,"distances_sum":2383.31739196679}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9652014652014658,"seconds":7.10412859916687e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.8671875,"distances_sum":2352.2693253394286}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9633070054945061,"seconds":6.8731606006622314e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.828125,"distances_sum":2339.3530217960383}, best_list's length: 14, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9651671245421248,"seconds":7.037073373794556e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.84375,"distances_sum":2348.065934301569}, best_list's length: 15, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.97265625,"state":{"ssize":4,"bsize":13},"perf":{"precision":1.0,"recall":0.97265625,"f1":0.985342261904762,"seconds":6.966292858123779e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.9609375,"distances_sum":2465.3082446604294}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.97265625,"state":{"ssize":4,"bsize":13},"perf":{"precision":1.0,"recall":0.97265625,"f1":0.985342261904762,"seconds":6.966292858123779e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.9609375,"distances_sum":2465.3082446604294}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.681640625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.681640625,"f1":0.7980992965367975,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.5703125,"distances_sum":1420.349080623121}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.365234375, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.365234375,"f1":null,"seconds":3.995373845100403e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":5.5859375,"distances_sum":708.9845800953026}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.681640625,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.681640625,"f1":0.7980992965367975,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.5703125,"distances_sum":1420.349080623121}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9288633241758245,"seconds":6.8303197622299194e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.6796875,"distances_sum":2054.2063082588493}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9054180194805203,"seconds":6.154179573059082e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.203125,"distances_sum":1927.7117099157977}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.8673144563769574,"seconds":6.863847374916077e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":7.9296875,"distances_sum":1710.3152117506943}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.87890625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.87890625,"f1":0.9288633241758245,"seconds":6.8303197622299194e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.6796875,"distances_sum":2054.2063082588493}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9661858974358977,"seconds":6.759539246559143e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.8828125,"distances_sum":2279.65238651022}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9661858974358977,"seconds":6.759539246559143e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.8828125,"distances_sum":2279.65238651022}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9661858974358977,"seconds":6.759539246559143e-6,"exhaustive_search_seconds":1.5702098608016968e-6,"evaluations":8.8828125,"distances_sum":2279.65238651022}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2119140625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2119140625,"f1":null,"seconds":4.038214683532715e-6,"exhaustive_search_seconds":1.9762665033340454e-6,"evaluations":5.453125,"distances_sum":441.3510560180576}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2119140625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2119140625,"f1":null,"seconds":4.038214683532715e-6,"exhaustive_search_seconds":1.9762665033340454e-6,"evaluations":5.453125,"distances_sum":441.3510560180576}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7470703125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7470703125,"f1":0.8481398809523816,"seconds":6.632879376411438e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.1875,"distances_sum":1874.8369186683722}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7470703125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7470703125,"f1":0.8481398809523816,"seconds":6.632879376411438e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.1875,"distances_sum":1874.8369186683722}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7470703125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7470703125,"f1":0.8481398809523816,"seconds":6.632879376411438e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.1875,"distances_sum":1874.8369186683722}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.7470703125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7470703125,"f1":0.8481398809523816,"seconds":6.632879376411438e-6,"exhaustive_search_seconds":1.6409903764724731e-6,"evaluations":8.1875,"distances_sum":1874.8369186683722}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6396484375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6396484375,"f1":0.7653398684648691,"seconds":6.256625056266785e-6,"exhaustive_search_seconds":1.8998980522155762e-6,"evaluations":7.328125,"distances_sum":1604.6861259452528}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.322265625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.322265625,"f1":null,"seconds":4.604458808898926e-6,"exhaustive_search_seconds":1.8998980522155762e-6,"evaluations":5.1484375,"distances_sum":841.7715063302905}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6396484375,"state":{"ssize":4,"bsize":4},"perf":{"precision":1.0,"recall":0.6396484375,"f1":0.7653398684648691,"seconds":6.256625056266785e-6,"exhaustive_search_seconds":1.8998980522155762e-6,"evaluations":7.328125,"distances_sum":1604.6861259452528}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.9037545787545797,"seconds":7.729977369308472e-6,"exhaustive_search_seconds":1.8998980522155762e-6,"evaluations":8.4375,"distances_sum":2350.732408611814}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8447265625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8447265625,"f1":0.9047145562770571,"seconds":6.020069122314453e-6,"exhaustive_search_seconds":1.8998980522155762e-6,"evaluations":8.3828125,"distances_sum":2344.2783692394355}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8447265625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8447265625,"f1":0.9047145562770571,"seconds":6.020069122314453e-6,"exhaustive_search_seconds":1.8998980522155762e-6,"evaluations":8.3828125,"distances_sum":2344.2783692394355}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9731971153846157,"seconds":6.239861249923706e-6,"exhaustive_search_seconds":1.8998980522155762e-6,"evaluations":8.875,"distances_sum":2815.1289510703646}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9596554487179492,"seconds":6.457790732383728e-6,"exhaustive_search_seconds":1.8998980522155762e-6,"evaluations":8.8046875,"distances_sum":2711.638023020023}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9664835164835168,"seconds":6.327405571937561e-6,"exhaustive_search_seconds":1.8998980522155762e-6,"evaluations":8.8203125,"distances_sum":2753.2886869152094}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9731971153846157,"seconds":6.239861249923706e-6,"exhaustive_search_seconds":1.8998980522155762e-6,"evaluations":8.875,"distances_sum":2815.1289510703646}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9731971153846157,"seconds":6.239861249923706e-6,"exhaustive_search_seconds":1.8998980522155762e-6,"evaluations":8.875,"distances_sum":2815.1289510703646}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3720703125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3720703125,"f1":null,"seconds":3.729015588760376e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":5.53125,"distances_sum":845.8654881410432}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.646484375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.646484375,"f1":0.7667429792429801,"seconds":4.9639493227005005e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.4453125,"distances_sum":1614.9099048559035}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.646484375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.646484375,"f1":0.7667429792429801,"seconds":4.9639493227005005e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.4453125,"distances_sum":1614.9099048559035}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83203125, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.83203125,"f1":0.901090576090577,"seconds":5.420297384262085e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.4453125,"distances_sum":2198.3988935730736}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9123511904761913,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.4609375,"distances_sum":2346.8205259343067}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8505859375,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8505859375,"f1":0.9123511904761913,"seconds":5.522742867469788e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.4609375,"distances_sum":2346.8205259343067}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9587110805860808,"seconds":5.388632416725159e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8125,"distances_sum":2665.181601202263}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9622424450549454,"seconds":5.472451448440552e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8125,"distances_sum":2676.891229347032}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.875,"f1":0.9285828754578763,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.609375,"distances_sum":2469.9745532363095}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.9236206501831509,"seconds":5.133450031280518e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.4921875,"distances_sum":2430.769659445619}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.945968094405595,"seconds":5.6996941566467285e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.75,"distances_sum":2566.426665450821}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9622424450549454,"seconds":5.472451448440552e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8125,"distances_sum":2676.891229347032}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9326171875,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9622424450549454,"seconds":5.472451448440552e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8125,"distances_sum":2676.891229347032}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.53125, conf: {"ssize":2,"bsize":3}, perf: {"precision":null,"recall":0.53125,"f1":null,"seconds":4.55416738986969e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":6.5390625,"distances_sum":1217.2359297857813}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.53125,"state":{"ssize":2,"bsize":3},"perf":{"precision":null,"recall":0.53125,"f1":null,"seconds":4.55416738986969e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":6.5390625,"distances_sum":1217.2359297857813}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9349645146520152,"seconds":6.010755896568298e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.4609375,"distances_sum":2517.0844003480133}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.88671875,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.88671875,"f1":0.9349645146520152,"seconds":6.010755896568298e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.4609375,"distances_sum":2517.0844003480133}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.88671875,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.88671875,"f1":0.9349645146520152,"seconds":6.010755896568298e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.4609375,"distances_sum":2517.0844003480133}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.88671875,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.88671875,"f1":0.9349645146520152,"seconds":6.010755896568298e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.4609375,"distances_sum":2517.0844003480133}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6572265625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6572265625,"f1":0.7814366189366198,"seconds":5.3998082876205444e-6,"exhaustive_search_seconds":1.6186386346817017e-6,"evaluations":7.875,"distances_sum":1422.1317665603578}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7333984375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7333984375,"f1":0.8352007367632374,"seconds":6.100162863731384e-6,"exhaustive_search_seconds":1.6186386346817017e-6,"evaluations":8.375,"distances_sum":1741.0783610401506}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.375, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.375,"f1":null,"seconds":4.6603381633758545e-6,"exhaustive_search_seconds":1.6186386346817017e-6,"evaluations":6.125,"distances_sum":749.7602813727517}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7333984375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7333984375,"f1":0.8352007367632374,"seconds":6.100162863731384e-6,"exhaustive_search_seconds":1.6186386346817017e-6,"evaluations":8.375,"distances_sum":1741.0783610401506}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9465862262737267,"seconds":6.536021828651428e-6,"exhaustive_search_seconds":1.6186386346817017e-6,"evaluations":8.765625,"distances_sum":2462.244466559706}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.83984375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.83984375,"f1":0.9074435980685988,"seconds":6.295740604400635e-6,"exhaustive_search_seconds":1.6186386346817017e-6,"evaluations":8.546875,"distances_sum":2077.846847685173}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.9317052738927745,"seconds":6.416812539100647e-6,"exhaustive_search_seconds":1.6186386346817017e-6,"evaluations":8.7890625,"distances_sum":2294.2028944884596}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7958984375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.7958984375,"f1":0.8788471944721954,"seconds":5.729496479034424e-6,"exhaustive_search_seconds":1.6186386346817017e-6,"evaluations":8.375,"distances_sum":1925.7707083620237}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90625,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.90625,"f1":0.9465862262737267,"seconds":6.536021828651428e-6,"exhaustive_search_seconds":1.6186386346817017e-6,"evaluations":8.765625,"distances_sum":2462.244466559706}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9750744047619051,"seconds":7.640570402145386e-6,"exhaustive_search_seconds":1.6186386346817017e-6,"evaluations":8.921875,"distances_sum":2650.2043563126613}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9698489010989013,"seconds":7.236376404762268e-6,"exhaustive_search_seconds":1.6186386346817017e-6,"evaluations":8.9453125,"distances_sum":2585.926215046657}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9760416666666669,"seconds":6.9122761487960815e-6,"exhaustive_search_seconds":1.6186386346817017e-6,"evaluations":8.9140625,"distances_sum":2653.706433122866}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9365234375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9365234375,"f1":0.9644230769230773,"seconds":7.487833499908447e-6,"exhaustive_search_seconds":1.6186386346817017e-6,"evaluations":8.8984375,"distances_sum":2553.247437264448}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9634901556776561,"seconds":6.765127182006836e-6,"exhaustive_search_seconds":1.6186386346817017e-6,"evaluations":8.875,"distances_sum":2542.832756222874}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9760416666666669,"seconds":6.9122761487960815e-6,"exhaustive_search_seconds":1.6186386346817017e-6,"evaluations":8.9140625,"distances_sum":2653.706433122866}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9760416666666669,"seconds":6.9122761487960815e-6,"exhaustive_search_seconds":1.6186386346817017e-6,"evaluations":8.9140625,"distances_sum":2653.706433122866}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6533203125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6533203125,"f1":0.7768578643578652,"seconds":5.496665835380554e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.453125,"distances_sum":1409.1108801723835}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7373046875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7373046875,"f1":0.8383517524142532,"seconds":5.383044481277466e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.7421875,"distances_sum":1734.8089308415165}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7373046875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.7373046875,"f1":0.8383517524142532,"seconds":5.383044481277466e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.7421875,"distances_sum":1734.8089308415165}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.794921875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.794921875,"f1":0.8778362262737271,"seconds":5.988404154777527e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.90625,"distances_sum":1915.4765721435654}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7861328125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.7861328125,"f1":0.8714441808191814,"seconds":6.366521120071411e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":7.8828125,"distances_sum":1930.040804672135}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9277529761904767,"seconds":6.1802566051483154e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.3984375,"distances_sum":2399.1104978440526}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8759765625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8759765625,"f1":0.9277529761904767,"seconds":6.1802566051483154e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.3984375,"distances_sum":2399.1104978440526}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9660542582417584,"seconds":6.619840860366821e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.7890625,"distances_sum":2603.416929243776}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9408940018315025,"seconds":6.20819628238678e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.515625,"distances_sum":2504.614176959407}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9401156135531142,"seconds":5.362555384635925e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.5703125,"distances_sum":2449.181234165889}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9660542582417584,"seconds":6.619840860366821e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.7890625,"distances_sum":2603.416929243776}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9660542582417584,"seconds":6.619840860366821e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":8.7890625,"distances_sum":2603.416929243776}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6484375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6484375,"f1":0.7759519993895002,"seconds":4.522502422332764e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.7578125,"distances_sum":1508.5440241897165}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4033203125, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.4033203125,"f1":null,"seconds":3.6638230085372925e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":6.234375,"distances_sum":869.5976499883863}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.662109375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.662109375,"f1":0.786229222166723,"seconds":4.645437002182007e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.7578125,"distances_sum":1521.6628247721717}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.662109375,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.662109375,"f1":0.786229222166723,"seconds":4.645437002182007e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.7578125,"distances_sum":1521.6628247721717}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8524444305694315,"seconds":5.258247256278992e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.421875,"distances_sum":1886.286881045611}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.71484375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.71484375,"f1":0.8248865717615725,"seconds":5.055218935012817e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.234375,"distances_sum":1727.4276437602905}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.828125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.828125,"f1":0.9008527930402939,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.4453125,"distances_sum":2118.6128344672416}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.673828125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.673828125,"f1":0.7934888028638036,"seconds":4.621222615242004e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":7.8671875,"distances_sum":1597.5579789870364}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.944107975357976,"seconds":5.6438148021698e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.734375,"distances_sum":2522.642624688208}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90234375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.944107975357976,"seconds":5.6438148021698e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.734375,"distances_sum":2522.642624688208}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9611836080586084,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.859375,"distances_sum":2634.4621479239017}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9715430402930406,"seconds":4.636123776435852e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.9140625,"distances_sum":2697.262132455838}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":3,"bsize":12}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.9781994047619049,"seconds":4.895031452178955e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.953125,"distances_sum":2752.255637739453}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9610519688644694,"seconds":6.0070306062698364e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.859375,"distances_sum":2620.762647488302}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9599609375,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9781994047619049,"seconds":4.895031452178955e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.953125,"distances_sum":2752.255637739453}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9599609375,"state":{"ssize":3,"bsize":12},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9781994047619049,"seconds":4.895031452178955e-6,"exhaustive_search_seconds":1.3597309589385986e-6,"evaluations":8.953125,"distances_sum":2752.255637739453}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4912109375, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.4912109375,"f1":null,"seconds":4.159286618232727e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":6.546875,"distances_sum":1161.6820271740307}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8507476898101906,"seconds":5.597248673439026e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.2734375,"distances_sum":1972.912035941273}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.755859375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.755859375,"f1":0.8507476898101906,"seconds":5.597248673439026e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.2734375,"distances_sum":1972.912035941273}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8125, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8125,"f1":0.8869973776223782,"seconds":5.54695725440979e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.390625,"distances_sum":2209.1956480440963}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9562328296703301,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.8046875,"distances_sum":2719.317993830141}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9228515625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9228515625,"f1":0.9562328296703301,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.8046875,"distances_sum":2719.317993830141}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9694940476190481,"seconds":6.1355531215667725e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.8515625,"distances_sum":2820.256043986894}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9619140625, conf: {"ssize":1,"bsize":13}, perf: {"precision":1.0,"recall":0.9619140625,"f1":0.9791494963369967,"seconds":6.50063157081604e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.9296875,"distances_sum":2883.56852449768}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":3,"bsize":13}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9738495879120882,"seconds":6.388872861862183e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.8984375,"distances_sum":2833.153463349843}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9568738553113558,"seconds":5.992129445075989e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.7265625,"distances_sum":2739.278276271879}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9619140625,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9791494963369967,"seconds":6.50063157081604e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.9296875,"distances_sum":2883.56852449768}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9619140625,"state":{"ssize":1,"bsize":13},"perf":{"precision":1.0,"recall":0.9619140625,"f1":0.9791494963369967,"seconds":6.50063157081604e-6,"exhaustive_search_seconds":1.3504177331924438e-6,"evaluations":8.9296875,"distances_sum":2883.56852449768}}, n: 9
mean(cfft.distances) = 0.6592600126014041
mean(cdnet.distances) = 0.9932668824335684
mean(crand.distances) = 0.3481082538044525
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8866666666666667
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.9022222222222221
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8777777777777778
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.9444444444444443
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9199999999999999
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9444444444444443
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9444444444444445
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8711111111111111
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8911111111111111
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8977777777777778
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9288888888888889
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9377777777777778
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9288888888888889
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9266666666666667
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9266666666666667
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9377777777777778
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8733333333333334
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8755555555555555
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9133333333333334
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8533333333333334
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8666666666666666
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9377777777777778
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8844444444444445
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.888888888888889
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8911111111111111
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8933333333333334
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9022222222222221
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8711111111111111
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9022222222222224
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 9, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 11]]
** centroid: 11, normalized-entropy: 0.6193821946787638, [(2, 2), (3, 11)]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 15 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 3, 2, 3, 2, 3, 3, 2, 3, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 9, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 11]]
** centroid: 11, normalized-entropy: 0.6193821946787638, [(2, 2), (3, 11)]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 15 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 3, 2, 3, 2, 3, 3, 2, 3, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 9, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 11]]
** centroid: 11, normalized-entropy: 0.6193821946787638, [(2, 2), (3, 11)]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 15 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 3, 2, 3, 2, 3, 3, 2, 3, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 9, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 11]]
** centroid: 11, normalized-entropy: 0.6193821946787638, [(2, 2), (3, 11)]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 15 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 3, 2, 3, 2, 3, 3, 2, 3, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 9, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 11]]
** centroid: 11, normalized-entropy: 0.6193821946787638, [(2, 2), (3, 11)]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 15 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 3, 2, 3, 2, 3, 3, 2, 3, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 9, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 11]]
** centroid: 11, normalized-entropy: 0.6193821946787638, [(2, 2), (3, 11)]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 15 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 3, 2, 3, 2, 3, 3, 2, 3, 2]
acc = 0.9266666666666666
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 16]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, [(2, 5), (3, 1)]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 9]]
** centroid: 9, normalized-entropy: 0.6840384356390419, [(2, 2), (3, 9)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 2, 11]]
** centroid: 11, normalized-entropy: 0.6193821946787638, [(2, 2), (3, 11)]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 15 centroids; started with 12
nc.class_map = [2, 1, 3, 2, 1, 3, 3, 2, 3, 2, 3, 3, 2, 3, 2]
acc = 0.96
*** finished computation of 12 references, err: [Inf, 0.611511659125487] ***
*** center 1: selecting labels [1] (freq >= 1) [from [35, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 6: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 7]]
** centroid: 9, normalized-entropy: 0.8812908992306927, [(2, 3), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
finished with 15 centroids; started with 12
acc = 0.9333333333333333
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.1959761751629692] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1959761751629692, 0.15861959370446052] ***
*** starting iteration: 2; err: [Inf, 0.1959761751629692, 0.15861959370446052] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1959761751629692, 0.15861959370446052, 0.15230285668152724] ***
*** starting iteration: 3; err: [Inf, 0.1959761751629692, 0.15861959370446052, 0.15230285668152724] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1959761751629692, 0.15861959370446052, 0.15230285668152724, 0.15008122672944949] ***
*** finished computation of 7 references, err: [Inf, 0.1959761751629692, 0.15861959370446052, 0.15230285668152724, 0.15008122672944949] ***
*** center 1: selecting labels [1] (freq >= 1) [from [148, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [98, 36, 0]]
** centroid: 2, normalized-entropy: 0.8395304981054318, [(1, 98), (2, 36)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [39, 59, 0]]
** centroid: 3, normalized-entropy: 0.9697442681154499, [(1, 39), (2, 59)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 69, 16]]
** centroid: 4, normalized-entropy: 0.6977652006354232, [(2, 69), (3, 16)]
*** center 5: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 36, 7]]
** centroid: 6, normalized-entropy: 0.6409441847875289, [(2, 36), (3, 7)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [10, 49, 0]]
** centroid: 7, normalized-entropy: 0.656540281386946, [(1, 10), (2, 49)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22641492763523002] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22641492763523002, 0.18813023878983012] ***
*** starting iteration: 2; err: [Inf, 0.22641492763523002, 0.18813023878983012] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22641492763523002, 0.18813023878983012, 0.18470448080181806] ***
*** starting iteration: 3; err: [Inf, 0.22641492763523002, 0.18813023878983012, 0.18470448080181806] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22641492763523002, 0.18813023878983012, 0.18470448080181806, 0.18355609401962622] ***
*** finished computation of 7 references, err: [Inf, 0.22641492763523002, 0.18813023878983012, 0.18470448080181806, 0.18355609401962622] ***
*** center 1: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [91, 9, 0]]
** centroid: 2, normalized-entropy: 0.4364698170641031, [(1, 91), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 73, 21]]
** centroid: 3, normalized-entropy: 0.7663350359691776, [(2, 73), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [104, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [52, 48, 0]]
** centroid: 5, normalized-entropy: 0.998845535995202, [(1, 52), (2, 48)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [67, 52, 0]]
** centroid: 6, normalized-entropy: 0.9885081741986365, [(1, 67), (2, 52)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 67, 2]]
** centroid: 7, normalized-entropy: 0.18927843126120178, [(2, 67), (3, 2)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22806440477121226] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22806440477121226, 0.1906093001153426] ***
*** starting iteration: 2; err: [Inf, 0.22806440477121226, 0.1906093001153426] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22806440477121226, 0.1906093001153426, 0.18925074734787892] ***
*** starting iteration: 3; err: [Inf, 0.22806440477121226, 0.1906093001153426, 0.18925074734787892] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22806440477121226, 0.1906093001153426, 0.18925074734787892, 0.1886457982968757] ***
*** finished computation of 7 references, err: [Inf, 0.22806440477121226, 0.1906093001153426, 0.18925074734787892, 0.1886457982968757] ***
*** center 1: selecting labels [1] (freq >= 2) [from [88, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [81, 11, 0]]
** centroid: 2, normalized-entropy: 0.5281098034628294, [(1, 81), (2, 11)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 63, 20]]
** centroid: 3, normalized-entropy: 0.7966394665488286, [(2, 63), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [115, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [70, 39, 0]]
** centroid: 5, normalized-entropy: 0.9408403089808224, [(1, 70), (2, 39)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [70, 42, 0]]
** centroid: 6, normalized-entropy: 0.954434002924965, [(1, 70), (2, 42)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 67, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2368701487846639] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2368701487846639, 0.1891883470158538] ***
*** starting iteration: 2; err: [Inf, 0.2368701487846639, 0.1891883470158538] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2368701487846639, 0.1891883470158538, 0.1871488098302267] ***
*** starting iteration: 3; err: [Inf, 0.2368701487846639, 0.1891883470158538, 0.1871488098302267] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2368701487846639, 0.1891883470158538, 0.1871488098302267, 0.18708724720680017] ***
*** finished computation of 7 references, err: [Inf, 0.2368701487846639, 0.1891883470158538, 0.1871488098302267, 0.18708724720680017] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [47, 69, 0]]
** centroid: 1, normalized-entropy: 0.9738959645539289, [(1, 47), (2, 69)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [66, 16, 0]]
** centroid: 2, normalized-entropy: 0.7120640548905481, [(1, 66), (2, 16)]
*** center 3: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [17, 103, 0]]
** centroid: 4, normalized-entropy: 0.5885870739324579, [(1, 17), (2, 103)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 56, 21]]
** centroid: 5, normalized-entropy: 0.8453509366224364, [(2, 56), (3, 21)]
*** center 6: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [83, 4, 0]]
** centroid: 7, normalized-entropy: 0.2690553027246505, [(1, 83), (2, 4)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21643273499298624] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21643273499298624, 0.1628161886486335] ***
*** starting iteration: 2; err: [Inf, 0.21643273499298624, 0.1628161886486335] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21643273499298624, 0.1628161886486335, 0.15675716355130231] ***
*** starting iteration: 3; err: [Inf, 0.21643273499298624, 0.1628161886486335, 0.15675716355130231] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21643273499298624, 0.1628161886486335, 0.15675716355130231, 0.151948234754736] ***
*** finished computation of 7 references, err: [Inf, 0.21643273499298624, 0.1628161886486335, 0.15675716355130231, 0.151948234754736] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [22, 80, 0]]
** centroid: 1, normalized-entropy: 0.7522121733341471, [(1, 22), (2, 80)]
*** center 2: selecting labels [2] (freq >= 1) [from [0, 56, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [137, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [113, 49, 0]]
** centroid: 5, normalized-entropy: 0.8842882429181962, [(1, 113), (2, 49)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 15, 20]]
** centroid: 6, normalized-entropy: 0.9852281360342514, [(2, 15), (3, 20)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [64, 23, 0]]
** centroid: 7, normalized-entropy: 0.8332661971210122, [(1, 64), (2, 23)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25068439456118996] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25068439456118996, 0.1738432623823683] ***
*** starting iteration: 2; err: [Inf, 0.25068439456118996, 0.1738432623823683] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25068439456118996, 0.1738432623823683, 0.15942180676475123] ***
*** starting iteration: 3; err: [Inf, 0.25068439456118996, 0.1738432623823683, 0.15942180676475123] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25068439456118996, 0.1738432623823683, 0.15942180676475123, 0.15375347062875552] ***
*** finished computation of 7 references, err: [Inf, 0.25068439456118996, 0.1738432623823683, 0.15942180676475123, 0.15375347062875552] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [102, 44, 0]]
** centroid: 1, normalized-entropy: 0.8829589691462253, [(1, 102), (2, 44)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 88, 21]]
** centroid: 2, normalized-entropy: 0.70700406497476, [(2, 88), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [45, 55, 0]]
** centroid: 3, normalized-entropy: 0.9927744539878083, [(1, 45), (2, 55)]
*** center 4: selecting labels [1] (freq >= 1) [from [85, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [25, 61, 0]]
** centroid: 5, normalized-entropy: 0.869620774054375, [(1, 25), (2, 61)]
*** center 6: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3767647870925364] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3767647870925364, 0.3442179233495806] ***
*** starting iteration: 2; err: [Inf, 0.3767647870925364, 0.3442179233495806] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3767647870925364, 0.3442179233495806, 0.33836722290339144] ***
*** starting iteration: 3; err: [Inf, 0.3767647870925364, 0.3442179233495806, 0.33836722290339144] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3767647870925364, 0.3442179233495806, 0.33836722290339144, 0.33222153169059615] ***
*** finished computation of 3 references, err: [Inf, 0.3767647870925364, 0.3442179233495806, 0.33836722290339144, 0.33222153169059615] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [68, 146, 2]]
** centroid: 1, normalized-entropy: 0.6116333561184548, [(1, 68), (2, 146), (3, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [262, 22, 0]]
** centroid: 2, normalized-entropy: 0.39318260537499017, [(1, 262), (2, 22)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [64, 81, 21]]
** centroid: 3, normalized-entropy: 0.8912454007354635, [(1, 64), (2, 81), (3, 21)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.36327429912423065] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36327429912423065, 0.32979553602663786] ***
*** starting iteration: 2; err: [Inf, 0.36327429912423065, 0.32979553602663786] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36327429912423065, 0.32979553602663786, 0.3268311794070915] ***
*** starting iteration: 3; err: [Inf, 0.36327429912423065, 0.32979553602663786, 0.3268311794070915] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.36327429912423065, 0.32979553602663786, 0.3268311794070915, 0.3239324963169879] ***
*** finished computation of 3 references, err: [Inf, 0.36327429912423065, 0.32979553602663786, 0.3268311794070915, 0.3239324963169879] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [62, 135, 0]]
** centroid: 1, normalized-entropy: 0.8985478760764349, [(1, 62), (2, 135)]
*** center 2: selecting labels [1] (freq >= 1) [from [248, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [114, 88, 20]]
** centroid: 3, normalized-entropy: 0.8427809486275739, [(1, 114), (2, 88), (3, 20)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3688820111921345] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3688820111921345, 0.30345145544711627] ***
*** starting iteration: 2; err: [Inf, 0.3688820111921345, 0.30345145544711627] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3688820111921345, 0.30345145544711627, 0.2974670089130615] ***
*** starting iteration: 3; err: [Inf, 0.3688820111921345, 0.30345145544711627, 0.2974670089130615] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3688820111921345, 0.30345145544711627, 0.2974670089130615, 0.29307913270847374] ***
*** finished computation of 3 references, err: [Inf, 0.3688820111921345, 0.30345145544711627, 0.2974670089130615, 0.29307913270847374] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [55, 152, 21]]
** centroid: 1, normalized-entropy: 0.7582239574799169, [(1, 55), (2, 152), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [206, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [137, 96, 0]]
** centroid: 3, normalized-entropy: 0.9775475376378719, [(1, 137), (2, 96)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3987907142302877] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3987907142302877, 0.30419990680720266] ***
*** starting iteration: 2; err: [Inf, 0.3987907142302877, 0.30419990680720266] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3987907142302877, 0.30419990680720266, 0.30027839240503384] ***
*** starting iteration: 3; err: [Inf, 0.3987907142302877, 0.30419990680720266, 0.30027839240503384] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3987907142302877, 0.30419990680720266, 0.30027839240503384, 0.2999541328565494] ***
*** finished computation of 3 references, err: [Inf, 0.3987907142302877, 0.30419990680720266, 0.30027839240503384, 0.2999541328565494] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [257, 15, 0]]
** centroid: 1, normalized-entropy: 0.30787141449683036, [(1, 257), (2, 15)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [1, 168, 23]]
** centroid: 2, normalized-entropy: 0.5305636342339527, [(2, 168), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [136, 66, 0]]
** centroid: 3, normalized-entropy: 0.9115532734067251, [(1, 136), (2, 66)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4035168107155001] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4035168107155001, 0.3087888307741325] ***
*** starting iteration: 2; err: [Inf, 0.4035168107155001, 0.3087888307741325] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4035168107155001, 0.3087888307741325, 0.30286294502112593] ***
*** starting iteration: 3; err: [Inf, 0.4035168107155001, 0.3087888307741325, 0.30286294502112593] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4035168107155001, 0.3087888307741325, 0.30286294502112593, 0.30102589045619144] ***
*** finished computation of 3 references, err: [Inf, 0.4035168107155001, 0.3087888307741325, 0.30286294502112593, 0.30102589045619144] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [267, 14, 0]]
** centroid: 1, normalized-entropy: 0.28564061677116315, [(1, 267), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [155, 57, 0]]
** centroid: 2, normalized-entropy: 0.8398354846344392, [(1, 155), (2, 57)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [2, 152, 20]]
** centroid: 3, normalized-entropy: 0.38054718212813493, [(1, 2), (2, 152), (3, 20)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4918587628858111] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4918587628858111, 0.28378272186154907] ***
*** starting iteration: 2; err: [Inf, 0.4918587628858111, 0.28378272186154907] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4918587628858111, 0.28378272186154907, 0.28234858299162924] ***
*** starting iteration: 3; err: [Inf, 0.4918587628858111, 0.28378272186154907, 0.28234858299162924] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4918587628858111, 0.28378272186154907, 0.28234858299162924, 0.28195409605110616] ***
*** finished computation of 3 references, err: [Inf, 0.4918587628858111, 0.28378272186154907, 0.28234858299162924, 0.28195409605110616] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [83, 136, 21]]
** centroid: 1, normalized-entropy: 0.8212388245613371, [(1, 83), (2, 136), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [97, 112, 0]]
** centroid: 2, normalized-entropy: 0.9962811561832605, [(1, 97), (2, 112)]
*** center 3: selecting labels [1] (freq >= 2) [from [218, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33821995301988794] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33821995301988794, 0.23879140781800826] ***
*** starting iteration: 2; err: [Inf, 0.33821995301988794, 0.23879140781800826] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33821995301988794, 0.23879140781800826, 0.23545612186171092] ***
*** starting iteration: 3; err: [Inf, 0.33821995301988794, 0.23879140781800826, 0.23545612186171092] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33821995301988794, 0.23879140781800826, 0.23545612186171092, 0.23396227668198916] ***
*** finished computation of 3 references, err: [Inf, 0.33821995301988794, 0.23879140781800826, 0.23545612186171092, 0.23396227668198916] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [260, 10, 0]]
** centroid: 1, normalized-entropy: 0.22853814395352806, [(1, 260), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [131, 55, 0]]
** centroid: 2, normalized-entropy: 0.8759695775313526, [(1, 131), (2, 55)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [3, 184, 23]]
** centroid: 3, normalized-entropy: 0.38113969572270856, [(1, 3), (2, 184), (3, 23)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3562448728114724] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3562448728114724, 0.24325299569834274] ***
*** starting iteration: 2; err: [Inf, 0.3562448728114724, 0.24325299569834274] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3562448728114724, 0.24325299569834274, 0.2410511719021036] ***
*** starting iteration: 3; err: [Inf, 0.3562448728114724, 0.24325299569834274, 0.2410511719021036] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3562448728114724, 0.24325299569834274, 0.2410511719021036, 0.24060630977064415] ***
*** finished computation of 3 references, err: [Inf, 0.3562448728114724, 0.24325299569834274, 0.2410511719021036, 0.24060630977064415] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [261, 30, 0]]
** centroid: 1, normalized-entropy: 0.478723511385963, [(1, 261), (2, 30)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [163, 44, 0]]
** centroid: 2, normalized-entropy: 0.7463484050369739, [(1, 163), (2, 44)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 149, 20]]
** centroid: 3, normalized-entropy: 0.5245796052371587, [(2, 149), (3, 20)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3740853556086947] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3740853556086947, 0.2275624267835131] ***
*** starting iteration: 2; err: [Inf, 0.3740853556086947, 0.2275624267835131] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3740853556086947, 0.2275624267835131, 0.22592017934217803] ***
*** starting iteration: 3; err: [Inf, 0.3740853556086947, 0.2275624267835131, 0.22592017934217803] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3740853556086947, 0.2275624267835131, 0.22592017934217803, 0.2255787138786653] ***
*** finished computation of 3 references, err: [Inf, 0.3740853556086947, 0.2275624267835131, 0.22592017934217803, 0.2255787138786653] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [62, 158, 21]]
** centroid: 1, normalized-entropy: 0.7634253544538576, [(1, 62), (2, 158), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [218, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [118, 90, 0]]
** centroid: 3, normalized-entropy: 0.9868884753797076, [(1, 118), (2, 90)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33740062053614595] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33740062053614595, 0.22712935790120325] ***
*** finished computation of 3 references, err: [Inf, 0.33740062053614595, 0.22712935790120325] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [98, 174, 23]]
** centroid: 1, normalized-entropy: 0.7977365221703466, [(1, 98), (2, 174), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [116, 75, 0]]
** centroid: 2, normalized-entropy: 0.9665010938892072, [(1, 116), (2, 75)]
*** center 3: selecting labels [1] (freq >= 2) [from [180, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.391415951811224] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.391415951811224, 0.2361251369399344] ***
*** finished computation of 3 references, err: [Inf, 0.391415951811224, 0.2361251369399344] ***
*** center 1: selecting labels [1] (freq >= 2) [from [263, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [25, 156, 20]]
** centroid: 2, normalized-entropy: 0.6240355971567922, [(1, 25), (2, 156), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [136, 67, 0]]
** centroid: 3, normalized-entropy: 0.9149766946693293, [(1, 136), (2, 67)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.35719094622246306] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35719094622246306, 0.24223343070004433] ***
*** finished computation of 3 references, err: [Inf, 0.35719094622246306, 0.24223343070004433] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [228, 51, 0]]
** centroid: 1, normalized-entropy: 0.6861549474202007, [(1, 228), (2, 51)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [170, 41, 0]]
** centroid: 2, normalized-entropy: 0.7104068127225847, [(1, 170), (2, 41)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 156, 21]]
** centroid: 3, normalized-entropy: 0.5254506799086205, [(2, 156), (3, 21)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 8)
[0.9070207932483382, 0.901994809180438, 0.8899708091324858, 0.8869797941654229, 0.8669537801274328, 0.8639297980615347, 0.8540096983210755, 0.7669795544047041]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.9, 2) => 0.9070207932483382
finished with 9
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.19793580718724443] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19793580718724443, 0.150575057353458] ***
*** starting iteration: 2; err: [Inf, 0.19793580718724443, 0.150575057353458] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19793580718724443, 0.150575057353458, 0.14521667910404168] ***
*** starting iteration: 3; err: [Inf, 0.19793580718724443, 0.150575057353458, 0.14521667910404168] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19793580718724443, 0.150575057353458, 0.14521667910404168, 0.1444697658462847] ***
*** finished computation of 7 references, err: [Inf, 0.19793580718724443, 0.150575057353458, 0.14521667910404168, 0.1444697658462847] ***
*** center 1: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [99, 19, 0]]
** centroid: 2, normalized-entropy: 0.6367368786558286, [(1, 99), (2, 19)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 61, 23]]
** centroid: 3, normalized-entropy: 0.8468781063424823, [(2, 61), (3, 23)]
*** center 4: selecting labels [1] (freq >= 2) [from [117, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [33, 74, 0]]
** centroid: 5, normalized-entropy: 0.891330958407023, [(1, 33), (2, 74)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [6, 90, 0]]
** centroid: 6, normalized-entropy: 0.3372900666170139, [(1, 6), (2, 90)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [60, 5, 0]]
** centroid: 7, normalized-entropy: 0.3912435636292556, [(1, 60), (2, 5)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19004825988681107] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19004825988681107, 0.15418723074035479] ***
*** starting iteration: 2; err: [Inf, 0.19004825988681107, 0.15418723074035479] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19004825988681107, 0.15418723074035479, 0.1506344980114828] ***
*** starting iteration: 3; err: [Inf, 0.19004825988681107, 0.15418723074035479, 0.1506344980114828] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19004825988681107, 0.15418723074035479, 0.1506344980114828, 0.14985159425849634] ***
*** finished computation of 7 references, err: [Inf, 0.19004825988681107, 0.15418723074035479, 0.1506344980114828, 0.14985159425849634] ***
*** center 1: selecting labels [1] (freq >= 2) [from [133, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 54, 20]]
** centroid: 2, normalized-entropy: 0.8418521897563208, [(2, 54), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [71, 25, 0]]
** centroid: 3, normalized-entropy: 0.8273744775003173, [(1, 71), (2, 25)]
*** center 4: selecting labels [1] (freq >= 2) [from [97, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [24, 62, 0]]
** centroid: 5, normalized-entropy: 0.8541802051521676, [(1, 24), (2, 62)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [18, 81, 0]]
** centroid: 6, normalized-entropy: 0.6840384356390419, [(1, 18), (2, 81)]
*** center 7: selecting labels [1] (freq >= 2) [from [81, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19481246714302894] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19481246714302894, 0.1497489287820959] ***
*** starting iteration: 2; err: [Inf, 0.19481246714302894, 0.1497489287820959] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19481246714302894, 0.1497489287820959, 0.1467885606080249] ***
*** starting iteration: 3; err: [Inf, 0.19481246714302894, 0.1497489287820959, 0.1467885606080249] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19481246714302894, 0.1497489287820959, 0.1467885606080249, 0.14641525883107506] ***
*** finished computation of 7 references, err: [Inf, 0.19481246714302894, 0.1497489287820959, 0.1467885606080249, 0.14641525883107506] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [108, 10, 0]]
** centroid: 1, normalized-entropy: 0.4186843105268563, [(1, 108), (2, 10)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [62, 31, 0]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(1, 62), (2, 31)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 62, 21]]
** centroid: 3, normalized-entropy: 0.8160172973428256, [(2, 62), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [31, 60, 0]]
** centroid: 5, normalized-entropy: 0.9254482516437047, [(1, 31), (2, 60)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 85, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [87, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 9)
[0.9070207932483382, 0.901994809180438, 0.8899708091324858, 0.8869797941654229, 0.8820317323311335, 0.8669537801274328, 0.8639297980615347, 0.8540096983210755, 0.7669795544047041]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.9, 2) => 0.9070207932483382
finished with 10
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.30920594335217644] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30920594335217644, 0.23468618042901293] ***
*** starting iteration: 2; err: [Inf, 0.30920594335217644, 0.23468618042901293] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30920594335217644, 0.23468618042901293, 0.23235310036577173] ***
*** starting iteration: 3; err: [Inf, 0.30920594335217644, 0.23468618042901293, 0.23235310036577173] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30920594335217644, 0.23468618042901293, 0.23235310036577173, 0.23131867140732906] ***
*** finished computation of 3 references, err: [Inf, 0.30920594335217644, 0.23468618042901293, 0.23235310036577173, 0.23131867140732906] ***
*** center 1: selecting labels [1] (freq >= 1) [from [205, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [98, 119, 4]]
** centroid: 2, normalized-entropy: 0.697738611319667, [(1, 98), (2, 119), (3, 4)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [91, 130, 19]]
** centroid: 3, normalized-entropy: 0.8197512351684328, [(1, 91), (2, 130), (3, 19)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3626403343721364] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3626403343721364, 0.28702421169700115] ***
*** starting iteration: 2; err: [Inf, 0.3626403343721364, 0.28702421169700115] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3626403343721364, 0.28702421169700115, 0.2730642544633445] ***
*** starting iteration: 3; err: [Inf, 0.3626403343721364, 0.28702421169700115, 0.2730642544633445] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3626403343721364, 0.28702421169700115, 0.2730642544633445, 0.23915884868455478] ***
*** finished computation of 3 references, err: [Inf, 0.3626403343721364, 0.28702421169700115, 0.2730642544633445, 0.23915884868455478] ***
*** center 1: selecting labels [1] (freq >= 1) [from [169, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [115, 138, 20]]
** centroid: 2, normalized-entropy: 0.819691933567152, [(1, 115), (2, 138), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [140, 85, 0]]
** centroid: 3, normalized-entropy: 0.9564574047992596, [(1, 140), (2, 85)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.29544860268405443] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29544860268405443, 0.2367652204904197] ***
*** starting iteration: 2; err: [Inf, 0.29544860268405443, 0.2367652204904197] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29544860268405443, 0.2367652204904197, 0.22765904446404756] ***
*** starting iteration: 3; err: [Inf, 0.29544860268405443, 0.2367652204904197, 0.22765904446404756] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29544860268405443, 0.2367652204904197, 0.22765904446404756, 0.22566638793517044] ***
*** finished computation of 3 references, err: [Inf, 0.29544860268405443, 0.2367652204904197, 0.22765904446404756, 0.22566638793517044] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [120, 87, 0]]
** centroid: 1, normalized-entropy: 0.9815886212101388, [(1, 120), (2, 87)]
*** center 2: selecting labels [1] (freq >= 1) [from [215, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [63, 161, 21]]
** centroid: 3, normalized-entropy: 0.7606988100334571, [(1, 63), (2, 161), (3, 21)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 10)
[0.9140008271744798, 0.9070207932483382, 0.901994809180438, 0.8899708091324858, 0.8869797941654229, 0.8820317323311335, 0.8669537801274328, 0.8639297980615347, 0.8540096983210755, 0.7669795544047041]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :rand, 0.6, 1) => 0.9140008271744798
finished with 10
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 10)
[0.9140008271744798, 0.9070207932483382, 0.901994809180438, 0.8899708091324858, 0.8869797941654229, 0.8820317323311335, 0.8669537801274328, 0.8639297980615347, 0.8540096983210755, 0.7669795544047041]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :rand, 0.6, 1) => 0.9140008271744798
finished with 10
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 10)
[0.9140008271744798, 0.9070207932483382, 0.901994809180438, 0.8899708091324858, 0.8869797941654229, 0.8820317323311335, 0.8669537801274328, 0.8639297980615347, 0.8540096983210755, 0.7669795544047041]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :rand, 0.6, 1) => 0.9140008271744798
finished with 10
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 10)
[0.9140008271744798, 0.9070207932483382, 0.901994809180438, 0.8899708091324858, 0.8869797941654229, 0.8820317323311335, 0.8669537801274328, 0.8639297980615347, 0.8540096983210755, 0.7669795544047041]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :rand, 0.6, 1) => 0.9140008271744798
finished with 11
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.3452185138055982] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3452185138055982, 0.241466452602532] ***
*** starting iteration: 2; err: [Inf, 0.3452185138055982, 0.241466452602532] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3452185138055982, 0.241466452602532, 0.23866045526186894] ***
*** starting iteration: 3; err: [Inf, 0.3452185138055982, 0.241466452602532, 0.23866045526186894] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3452185138055982, 0.241466452602532, 0.23866045526186894, 0.23821899576767072] ***
*** finished computation of 3 references, err: [Inf, 0.3452185138055982, 0.241466452602532, 0.23866045526186894, 0.23821899576767072] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [260, 3, 0]]
** centroid: 1, normalized-entropy: 0.08998165511145956, [(1, 260), (2, 3)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [1, 180, 23]]
** centroid: 2, normalized-entropy: 0.5097916692607785, [(2, 180), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [133, 66, 0]]
** centroid: 3, normalized-entropy: 0.9166116768284924, [(1, 133), (2, 66)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.364494140833795] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.364494140833795, 0.22844475732677835] ***
*** starting iteration: 2; err: [Inf, 0.364494140833795, 0.22844475732677835] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.364494140833795, 0.22844475732677835, 0.22872191087400046] ***
*** finished computation of 3 references, err: [Inf, 0.364494140833795, 0.22844475732677835, 0.22872191087400046] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [109, 124, 18]]
** centroid: 1, normalized-entropy: 0.8188169846636887, [(1, 109), (2, 124), (3, 18)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [118, 99, 2]]
** centroid: 2, normalized-entropy: 0.6690165364006844, [(1, 118), (2, 99), (3, 2)]
*** center 3: selecting labels [1] (freq >= 2) [from [197, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3108869296173262] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3108869296173262, 0.2408124382560165] ***
*** starting iteration: 2; err: [Inf, 0.3108869296173262, 0.2408124382560165] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3108869296173262, 0.2408124382560165, 0.22735995415045224] ***
*** starting iteration: 3; err: [Inf, 0.3108869296173262, 0.2408124382560165, 0.22735995415045224] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3108869296173262, 0.2408124382560165, 0.22735995415045224, 0.22500275090375896] ***
*** finished computation of 3 references, err: [Inf, 0.3108869296173262, 0.2408124382560165, 0.22735995415045224, 0.22500275090375896] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [88, 142, 20]]
** centroid: 1, normalized-entropy: 0.8109048276204143, [(1, 88), (2, 142), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [102, 106, 1]]
** centroid: 2, normalized-entropy: 0.9997332130219014, [(1, 102), (2, 106)]
*** center 3: selecting labels [1] (freq >= 2) [from [208, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 11)
[0.9140008271744798, 0.9070207932483382, 0.901994809180438, 0.8899708091324858, 0.8869797941654229, 0.8820317323311335, 0.8669537801274328, 0.8639297980615347, 0.8540096983210755, 0.7908627190064316, 0.7669795544047041]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :rand, 0.6, 1) => 0.9140008271744798
finished with 11
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 11)
[0.9140008271744798, 0.9070207932483382, 0.901994809180438, 0.8899708091324858, 0.8869797941654229, 0.8820317323311335, 0.8669537801274328, 0.8639297980615347, 0.8540096983210755, 0.7908627190064316, 0.7669795544047041]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 3, 3, 1.0, :rand, 0.6, 1) => 0.9140008271744798
finished with 11
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.29800492504052817] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29800492504052817, 0.24254239729885013] ***
*** starting iteration: 2; err: [Inf, 0.29800492504052817, 0.24254239729885013] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29800492504052817, 0.24254239729885013, 0.23791331416275352] ***
*** starting iteration: 3; err: [Inf, 0.29800492504052817, 0.24254239729885013, 0.23791331416275352] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29800492504052817, 0.24254239729885013, 0.23791331416275352, 0.2358413584351074] ***
*** finished computation of 3 references, err: [Inf, 0.29800492504052817, 0.24254239729885013, 0.23791331416275352, 0.2358413584351074] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [12, 275, 32]]
** centroid: 1, normalized-entropy: 0.4387452406634336, [(1, 12), (2, 275), (3, 32)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [239, 85, 0]]
** centroid: 2, normalized-entropy: 0.8302654452330704, [(1, 239), (2, 85)]
*** center 3: selecting labels [1] (freq >= 1) [from [357, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2698941735462286] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2698941735462286, 0.2363967012623325] ***
*** starting iteration: 2; err: [Inf, 0.2698941735462286, 0.2363967012623325] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2698941735462286, 0.2363967012623325, 0.230974251229316] ***
*** starting iteration: 3; err: [Inf, 0.2698941735462286, 0.2363967012623325, 0.230974251229316] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2698941735462286, 0.2363967012623325, 0.230974251229316, 0.23047162503097207] ***
*** finished computation of 3 references, err: [Inf, 0.2698941735462286, 0.2363967012623325, 0.230974251229316, 0.23047162503097207] ***
*** center 1: selecting labels [1] (freq >= 1) [from [169, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [34, 126, 18]]
** centroid: 2, normalized-entropy: 0.7213543709296596, [(1, 34), (2, 126), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [98, 55, 0]]
** centroid: 3, normalized-entropy: 0.9422483069596669, [(1, 98), (2, 55)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.29294369962066413] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29294369962066413, 0.23635061318054795] ***
*** starting iteration: 2; err: [Inf, 0.29294369962066413, 0.23635061318054795] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29294369962066413, 0.23635061318054795, 0.23503436816111206] ***
*** starting iteration: 3; err: [Inf, 0.29294369962066413, 0.23635061318054795, 0.23503436816111206] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29294369962066413, 0.23635061318054795, 0.23503436816111206, 0.2344448622930795] ***
*** finished computation of 3 references, err: [Inf, 0.29294369962066413, 0.23635061318054795, 0.23503436816111206, 0.2344448622930795] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [121, 47, 0]]
** centroid: 1, normalized-entropy: 0.8551261862366479, [(1, 121), (2, 47)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [2, 133, 19]]
** centroid: 2, normalized-entropy: 0.4015906416948027, [(1, 2), (2, 133), (3, 19)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [172, 6, 0]]
** centroid: 3, normalized-entropy: 0.21265863988163503, [(1, 172), (2, 6)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.23682994769420473] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.23682994769420473, 0.2244164726063609] ***
*** starting iteration: 2; err: [Inf, 0.23682994769420473, 0.2244164726063609] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.23682994769420473, 0.2244164726063609, 0.2226497611515224] ***
*** starting iteration: 3; err: [Inf, 0.23682994769420473, 0.2244164726063609, 0.2226497611515224] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.23682994769420473, 0.2244164726063609, 0.2226497611515224, 0.22212448927480727] ***
*** finished computation of 3 references, err: [Inf, 0.23682994769420473, 0.2244164726063609, 0.2226497611515224, 0.22212448927480727] ***
*** center 1: selecting labels [1] (freq >= 1) [from [151, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [69, 104, 13]]
** centroid: 2, normalized-entropy: 0.8000050346111057, [(1, 69), (2, 104), (3, 13)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [76, 83, 4]]
** centroid: 3, normalized-entropy: 0.7194609081937187, [(1, 76), (2, 83), (3, 4)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2803854013029486] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2803854013029486, 0.2454132503485307] ***
*** starting iteration: 2; err: [Inf, 0.2803854013029486, 0.2454132503485307] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2803854013029486, 0.2454132503485307, 0.2393479842916131] ***
*** starting iteration: 3; err: [Inf, 0.2803854013029486, 0.2454132503485307, 0.2393479842916131] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2803854013029486, 0.2454132503485307, 0.2393479842916131, 0.23814392210915686] ***
*** finished computation of 3 references, err: [Inf, 0.2803854013029486, 0.2454132503485307, 0.2393479842916131, 0.23814392210915686] ***
*** center 1: selecting labels [1] (freq >= 1) [from [191, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [91, 52, 0]]
** centroid: 2, normalized-entropy: 0.9456603046006401, [(1, 91), (2, 52)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [27, 120, 19]]
** centroid: 3, normalized-entropy: 0.7082265875202373, [(1, 27), (2, 120), (3, 19)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.35278185094706715] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35278185094706715, 0.2437823626473546] ***
*** starting iteration: 2; err: [Inf, 0.35278185094706715, 0.2437823626473546] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35278185094706715, 0.2437823626473546, 0.23568293876759708] ***
*** starting iteration: 3; err: [Inf, 0.35278185094706715, 0.2437823626473546, 0.23568293876759708] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35278185094706715, 0.2437823626473546, 0.23568293876759708, 0.23380870717018842] ***
*** finished computation of 3 references, err: [Inf, 0.35278185094706715, 0.2437823626473546, 0.23568293876759708, 0.23380870717018842] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [56, 111, 21]]
** centroid: 1, normalized-entropy: 0.8344113159393394, [(1, 56), (2, 111), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [157, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [95, 60, 0]]
** centroid: 3, normalized-entropy: 0.9629004147713269, [(1, 95), (2, 60)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.31816709010349586] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31816709010349586, 0.2387094370611012] ***
*** starting iteration: 2; err: [Inf, 0.31816709010349586, 0.2387094370611012] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31816709010349586, 0.2387094370611012, 0.231541061475873] ***
*** starting iteration: 3; err: [Inf, 0.31816709010349586, 0.2387094370611012, 0.231541061475873] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31816709010349586, 0.2387094370611012, 0.231541061475873, 0.22961309976689517] ***
*** finished computation of 3 references, err: [Inf, 0.31816709010349586, 0.2387094370611012, 0.231541061475873, 0.22961309976689517] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [89, 64, 0]]
** centroid: 1, normalized-entropy: 0.9806540168363813, [(1, 89), (2, 64)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [46, 130, 16]]
** centroid: 2, normalized-entropy: 0.7404260825164747, [(1, 46), (2, 130), (3, 16)]
*** center 3: selecting labels [1] (freq >= 1) [from [155, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2653920638356358] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2653920638356358, 0.2475207040142268] ***
*** starting iteration: 2; err: [Inf, 0.2653920638356358, 0.2475207040142268] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2653920638356358, 0.2475207040142268, 0.24431872728653253] ***
*** starting iteration: 3; err: [Inf, 0.2653920638356358, 0.2475207040142268, 0.24431872728653253] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2653920638356358, 0.2475207040142268, 0.24431872728653253, 0.24324070258811117] ***
*** finished computation of 3 references, err: [Inf, 0.2653920638356358, 0.2475207040142268, 0.24431872728653253, 0.24324070258811117] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 128, 15]]
** centroid: 1, normalized-entropy: 0.48432337220406935, [(2, 128), (3, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [169, 15, 0]]
** centroid: 2, normalized-entropy: 0.40751856656887747, [(1, 169), (2, 15)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [134, 39, 0]]
** centroid: 3, normalized-entropy: 0.769965579908579, [(1, 134), (2, 39)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2883260837122798] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2883260837122798, 0.23515281420666725] ***
*** starting iteration: 2; err: [Inf, 0.2883260837122798, 0.23515281420666725] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2883260837122798, 0.23515281420666725, 0.2303810970792547] ***
*** starting iteration: 3; err: [Inf, 0.2883260837122798, 0.23515281420666725, 0.2303810970792547] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2883260837122798, 0.23515281420666725, 0.2303810970792547, 0.2298789936453104] ***
*** finished computation of 3 references, err: [Inf, 0.2883260837122798, 0.23515281420666725, 0.2303810970792547, 0.2298789936453104] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [68, 114, 17]]
** centroid: 1, normalized-entropy: 0.8157842335966794, [(1, 68), (2, 114), (3, 17)]
*** center 2: selecting labels [1] (freq >= 1) [from [147, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [85, 69, 0]]
** centroid: 3, normalized-entropy: 0.9921994167377696, [(1, 85), (2, 69)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3080004679523408] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3080004679523408, 0.24254461054317653] ***
*** starting iteration: 2; err: [Inf, 0.3080004679523408, 0.24254461054317653] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3080004679523408, 0.24254461054317653, 0.24043291743285955] ***
*** starting iteration: 3; err: [Inf, 0.3080004679523408, 0.24254461054317653, 0.24043291743285955] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3080004679523408, 0.24254461054317653, 0.24043291743285955, 0.24002324250899254] ***
*** finished computation of 3 references, err: [Inf, 0.3080004679523408, 0.24254461054317653, 0.24043291743285955, 0.24002324250899254] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 130, 16]]
** centroid: 1, normalized-entropy: 0.4986751363204345, [(2, 130), (3, 16)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [191, 18, 0]]
** centroid: 2, normalized-entropy: 0.42339953312973627, [(1, 191), (2, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [120, 25, 0]]
** centroid: 3, normalized-entropy: 0.6631968402398286, [(1, 120), (2, 25)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.31033759103529157] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31033759103529157, 0.2511045634932816] ***
*** starting iteration: 2; err: [Inf, 0.31033759103529157, 0.2511045634932816] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31033759103529157, 0.2511045634932816, 0.22698215700499713] ***
*** starting iteration: 3; err: [Inf, 0.31033759103529157, 0.2511045634932816, 0.22698215700499713] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31033759103529157, 0.2511045634932816, 0.22698215700499713, 0.22430110602639616] ***
*** finished computation of 3 references, err: [Inf, 0.31033759103529157, 0.2511045634932816, 0.22698215700499713, 0.22430110602639616] ***
*** center 1: selecting labels [1] (freq >= 1) [from [166, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [92, 60, 0]]
** centroid: 2, normalized-entropy: 0.9677884628267678, [(1, 92), (2, 60)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [31, 137, 14]]
** centroid: 3, normalized-entropy: 0.6486275918395417, [(1, 31), (2, 137), (3, 14)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.42910838210210206] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42910838210210206, 0.2787685364088975] ***
*** starting iteration: 2; err: [Inf, 0.42910838210210206, 0.2787685364088975] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42910838210210206, 0.2787685364088975, 0.2532198402509093] ***
*** starting iteration: 3; err: [Inf, 0.42910838210210206, 0.2787685364088975, 0.2532198402509093] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42910838210210206, 0.2787685364088975, 0.2532198402509093, 0.2417099244222045] ***
*** finished computation of 3 references, err: [Inf, 0.42910838210210206, 0.2787685364088975, 0.2532198402509093, 0.2417099244222045] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 121, 17]]
** centroid: 1, normalized-entropy: 0.5384569204630841, [(2, 121), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [115, 27, 0]]
** centroid: 2, normalized-entropy: 0.7017660038918877, [(1, 115), (2, 27)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [193, 27, 0]]
** centroid: 3, normalized-entropy: 0.5371498464739634, [(1, 193), (2, 27)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3457843929566443] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3457843929566443, 0.2403219005316496] ***
*** starting iteration: 2; err: [Inf, 0.3457843929566443, 0.2403219005316496] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3457843929566443, 0.2403219005316496, 0.23808837490156293] ***
*** starting iteration: 3; err: [Inf, 0.3457843929566443, 0.2403219005316496, 0.23808837490156293] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3457843929566443, 0.2403219005316496, 0.23808837490156293, 0.23762295818328857] ***
*** finished computation of 3 references, err: [Inf, 0.3457843929566443, 0.2403219005316496, 0.23808837490156293, 0.23762295818328857] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [138, 35, 0]]
** centroid: 1, normalized-entropy: 0.7265283396109378, [(1, 138), (2, 35)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 129, 14]]
** centroid: 2, normalized-entropy: 0.462309904202122, [(2, 129), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [172, 12, 0]]
** centroid: 3, normalized-entropy: 0.3478169135710632, [(1, 172), (2, 12)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.33064786726608875] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33064786726608875, 0.2459152364246547] ***
*** starting iteration: 2; err: [Inf, 0.33064786726608875, 0.2459152364246547] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33064786726608875, 0.2459152364246547, 0.23753238152712583] ***
*** starting iteration: 3; err: [Inf, 0.33064786726608875, 0.2459152364246547, 0.23753238152712583] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33064786726608875, 0.2459152364246547, 0.23753238152712583, 0.23606451746821402] ***
*** finished computation of 3 references, err: [Inf, 0.33064786726608875, 0.2459152364246547, 0.23753238152712583, 0.23606451746821402] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [98, 62, 0]]
** centroid: 1, normalized-entropy: 0.9631672450918831, [(1, 98), (2, 62)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [15, 128, 14]]
** centroid: 2, normalized-entropy: 0.5519595705460391, [(1, 15), (2, 128), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [182, 1, 0]]
** centroid: 3, normalized-entropy: 0.04893139830501118, [(1, 182), (2, 1)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2881029675398022] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2881029675398022, 0.23822116458415984] ***
*** starting iteration: 2; err: [Inf, 0.2881029675398022, 0.23822116458415984] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2881029675398022, 0.23822116458415984, 0.23325112578086554] ***
*** starting iteration: 3; err: [Inf, 0.2881029675398022, 0.23822116458415984, 0.23325112578086554] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2881029675398022, 0.23822116458415984, 0.23325112578086554, 0.23221891001984477] ***
*** finished computation of 3 references, err: [Inf, 0.2881029675398022, 0.23822116458415984, 0.23325112578086554, 0.23221891001984477] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [98, 46, 0]]
** centroid: 1, normalized-entropy: 0.9037762882345833, [(1, 98), (2, 46)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [207, 18, 0]]
** centroid: 2, normalized-entropy: 0.4021791902022729, [(1, 207), (2, 18)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 113, 18]]
** centroid: 3, normalized-entropy: 0.577401071927696, [(2, 113), (3, 18)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.37040078921243547] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37040078921243547, 0.24316972504253498] ***
*** starting iteration: 2; err: [Inf, 0.37040078921243547, 0.24316972504253498] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37040078921243547, 0.24316972504253498, 0.2253660361673683] ***
*** starting iteration: 3; err: [Inf, 0.37040078921243547, 0.24316972504253498, 0.2253660361673683] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37040078921243547, 0.24316972504253498, 0.2253660361673683, 0.2208741459324956] ***
*** finished computation of 3 references, err: [Inf, 0.37040078921243547, 0.24316972504253498, 0.2253660361673683, 0.2208741459324956] ***
*** center 1: selecting labels [1] (freq >= 1) [from [163, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [69, 88, 3]]
** centroid: 2, normalized-entropy: 0.6973171196541668, [(1, 69), (2, 88), (3, 3)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [74, 91, 12]]
** centroid: 3, normalized-entropy: 0.8092931352235688, [(1, 74), (2, 91), (3, 12)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.31647845124825835] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31647845124825835, 0.2937678047306836] ***
*** starting iteration: 2; err: [Inf, 0.31647845124825835, 0.2937678047306836] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31647845124825835, 0.2937678047306836, 0.28509103529900315] ***
*** starting iteration: 3; err: [Inf, 0.31647845124825835, 0.2937678047306836, 0.28509103529900315] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31647845124825835, 0.2937678047306836, 0.28509103529900315, 0.2790348120108247] ***
*** finished computation of 3 references, err: [Inf, 0.31647845124825835, 0.2937678047306836, 0.28509103529900315, 0.2790348120108247] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [123, 65, 6]]
** centroid: 1, normalized-entropy: 0.6943158327976375, [(1, 123), (2, 65), (3, 6)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [53, 17, 0]]
** centroid: 2, normalized-entropy: 0.7997594113291759, [(1, 53), (2, 17)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [123, 100, 13]]
** centroid: 3, normalized-entropy: 0.7856763441193667, [(1, 123), (2, 100), (3, 13)]
finished with 8 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.258613869599998] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.258613869599998, 0.23867191837914287] ***
*** starting iteration: 2; err: [Inf, 0.258613869599998, 0.23867191837914287] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.258613869599998, 0.23867191837914287, 0.23573694237694146] ***
*** starting iteration: 3; err: [Inf, 0.258613869599998, 0.23867191837914287, 0.23573694237694146] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.258613869599998, 0.23867191837914287, 0.23573694237694146, 0.23488344371691347] ***
*** finished computation of 3 references, err: [Inf, 0.258613869599998, 0.23867191837914287, 0.23573694237694146, 0.23488344371691347] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [101, 39, 0]]
** centroid: 1, normalized-entropy: 0.8534969719909741, [(1, 101), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [203, 15, 0]]
** centroid: 2, normalized-entropy: 0.36145703063601564, [(1, 203), (2, 15)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 124, 18]]
** centroid: 3, normalized-entropy: 0.5484866088431741, [(2, 124), (3, 18)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3740448891213164] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3740448891213164, 0.26957240496762097] ***
*** starting iteration: 2; err: [Inf, 0.3740448891213164, 0.26957240496762097] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3740448891213164, 0.26957240496762097, 0.2400355965420604] ***
*** starting iteration: 3; err: [Inf, 0.3740448891213164, 0.26957240496762097, 0.2400355965420604] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3740448891213164, 0.26957240496762097, 0.2400355965420604, 0.23187545620836317] ***
*** finished computation of 3 references, err: [Inf, 0.3740448891213164, 0.26957240496762097, 0.2400355965420604, 0.23187545620836317] ***
*** center 1: selecting labels [1] (freq >= 1) [from [136, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [88, 76, 0]]
** centroid: 2, normalized-entropy: 0.9961344835095798, [(1, 88), (2, 76)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [79, 105, 16]]
** centroid: 3, normalized-entropy: 0.8258137948844303, [(1, 79), (2, 105), (3, 16)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3343704166878015] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3343704166878015, 0.24933625428564846] ***
*** starting iteration: 2; err: [Inf, 0.3343704166878015, 0.24933625428564846] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3343704166878015, 0.24933625428564846, 0.23801602679677308] ***
*** starting iteration: 3; err: [Inf, 0.3343704166878015, 0.24933625428564846, 0.23801602679677308] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3343704166878015, 0.24933625428564846, 0.23801602679677308, 0.2359151816777885] ***
*** finished computation of 3 references, err: [Inf, 0.3343704166878015, 0.24933625428564846, 0.23801602679677308, 0.2359151816777885] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [166, 7, 0]]
** centroid: 1, normalized-entropy: 0.24440840071191128, [(1, 166), (2, 7)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [135, 49, 0]]
** centroid: 2, normalized-entropy: 0.8361114779944728, [(1, 135), (2, 49)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 127, 16]]
** centroid: 3, normalized-entropy: 0.5055849366380744, [(2, 127), (3, 16)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.31112867505848407] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31112867505848407, 0.2645678673395887] ***
*** starting iteration: 2; err: [Inf, 0.31112867505848407, 0.2645678673395887] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31112867505848407, 0.2645678673395887, 0.2301754792658612] ***
*** starting iteration: 3; err: [Inf, 0.31112867505848407, 0.2645678673395887, 0.2301754792658612] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.31112867505848407, 0.2645678673395887, 0.2301754792658612, 0.223714390671812] ***
*** finished computation of 3 references, err: [Inf, 0.31112867505848407, 0.2645678673395887, 0.2301754792658612, 0.223714390671812] ***
*** center 1: selecting labels [1] (freq >= 1) [from [154, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [73, 69, 6]]
** centroid: 2, normalized-entropy: 0.7594345535575908, [(1, 73), (2, 69), (3, 6)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [71, 116, 11]]
** centroid: 3, normalized-entropy: 0.7660412000052557, [(1, 71), (2, 116), (3, 11)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.29645047429483384] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29645047429483384, 0.2531442459896207] ***
*** starting iteration: 2; err: [Inf, 0.29645047429483384, 0.2531442459896207] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29645047429483384, 0.2531442459896207, 0.24906149781122805] ***
*** starting iteration: 3; err: [Inf, 0.29645047429483384, 0.2531442459896207, 0.24906149781122805] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29645047429483384, 0.2531442459896207, 0.24906149781122805, 0.2480492266304791] ***
*** finished computation of 3 references, err: [Inf, 0.29645047429483384, 0.2531442459896207, 0.24906149781122805, 0.2480492266304791] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [110, 53, 0]]
** centroid: 1, normalized-entropy: 0.9098977703073838, [(1, 110), (2, 53)]
*** center 2: selecting labels [1] (freq >= 1) [from [166, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [24, 133, 14]]
** centroid: 3, normalized-entropy: 0.6152788112133792, [(1, 24), (2, 133), (3, 14)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3849025846682489] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3849025846682489, 0.24765330102294683] ***
*** starting iteration: 2; err: [Inf, 0.3849025846682489, 0.24765330102294683] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3849025846682489, 0.24765330102294683, 0.23664237952791153] ***
*** starting iteration: 3; err: [Inf, 0.3849025846682489, 0.24765330102294683, 0.23664237952791153] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3849025846682489, 0.24765330102294683, 0.23664237952791153, 0.23467232811450958] ***
*** finished computation of 3 references, err: [Inf, 0.3849025846682489, 0.24765330102294683, 0.23664237952791153, 0.23467232811450958] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [185, 10, 0]]
** centroid: 1, normalized-entropy: 0.29181825659888555, [(1, 185), (2, 10)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 138, 24]]
** centroid: 2, normalized-entropy: 0.6051865766334207, [(2, 138), (3, 24)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [121, 22, 0]]
** centroid: 3, normalized-entropy: 0.6193821946787638, [(1, 121), (2, 22)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30851435554400086] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30851435554400086, 0.24718849870935083] ***
*** starting iteration: 2; err: [Inf, 0.30851435554400086, 0.24718849870935083] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30851435554400086, 0.24718849870935083, 0.24071007553767412] ***
*** starting iteration: 3; err: [Inf, 0.30851435554400086, 0.24718849870935083, 0.24071007553767412] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30851435554400086, 0.24718849870935083, 0.24071007553767412, 0.23910754292830824] ***
*** finished computation of 3 references, err: [Inf, 0.30851435554400086, 0.24718849870935083, 0.24071007553767412, 0.23910754292830824] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [158, 9, 0]]
** centroid: 1, normalized-entropy: 0.30270618933056087, [(1, 158), (2, 9)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [144, 25, 0]]
** centroid: 2, normalized-entropy: 0.6046332531338939, [(1, 144), (2, 25)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 143, 21]]
** centroid: 3, normalized-entropy: 0.5520625714615981, [(2, 143), (3, 21)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3292978214472532] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3292978214472532, 0.2512572466172278] ***
*** starting iteration: 2; err: [Inf, 0.3292978214472532, 0.2512572466172278] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3292978214472532, 0.2512572466172278, 0.23823353897966446] ***
*** starting iteration: 3; err: [Inf, 0.3292978214472532, 0.2512572466172278, 0.23823353897966446] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3292978214472532, 0.2512572466172278, 0.23823353897966446, 0.23531145393103362] ***
*** finished computation of 3 references, err: [Inf, 0.3292978214472532, 0.2512572466172278, 0.23823353897966446, 0.23531145393103362] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [193, 5, 0]]
** centroid: 1, normalized-entropy: 0.1699937480231636, [(1, 193), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [101, 54, 0]]
** centroid: 2, normalized-entropy: 0.9326193415661177, [(1, 101), (2, 54)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [8, 122, 17]]
** centroid: 3, normalized-entropy: 0.5121046980831248, [(1, 8), (2, 122), (3, 17)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.37287577614746986] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37287577614746986, 0.2476509240437299] ***
*** starting iteration: 2; err: [Inf, 0.37287577614746986, 0.2476509240437299] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37287577614746986, 0.2476509240437299, 0.2343585686739534] ***
*** starting iteration: 3; err: [Inf, 0.37287577614746986, 0.2476509240437299, 0.2343585686739534] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37287577614746986, 0.2476509240437299, 0.2343585686739534, 0.23192823537811638] ***
*** finished computation of 3 references, err: [Inf, 0.37287577614746986, 0.2476509240437299, 0.2343585686739534, 0.23192823537811638] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [69, 112, 12]]
** centroid: 1, normalized-entropy: 0.7793869341802159, [(1, 69), (2, 112), (3, 12)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [80, 81, 2]]
** centroid: 2, normalized-entropy: 0.6834192047166728, [(1, 80), (2, 81), (3, 2)]
*** center 3: selecting labels [1] (freq >= 1) [from [144, 0, 0]]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30779814246017484] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30779814246017484, 0.2303108024187386] ***
*** starting iteration: 2; err: [Inf, 0.30779814246017484, 0.2303108024187386] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30779814246017484, 0.2303108024187386, 0.2290458466662094] ***
*** starting iteration: 3; err: [Inf, 0.30779814246017484, 0.2303108024187386, 0.2290458466662094] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30779814246017484, 0.2303108024187386, 0.2290458466662094, 0.2282735574543476] ***
*** finished computation of 3 references, err: [Inf, 0.30779814246017484, 0.2303108024187386, 0.2290458466662094, 0.2282735574543476] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [81, 103, 13]]
** centroid: 1, normalized-entropy: 0.8045189861591374, [(1, 81), (2, 103), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [143, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [78, 79, 3]]
** centroid: 3, normalized-entropy: 0.7038555936708032, [(1, 78), (2, 79), (3, 3)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.262013679407537] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.262013679407537, 0.24288715734146535] ***
*** starting iteration: 2; err: [Inf, 0.262013679407537, 0.24288715734146535] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.262013679407537, 0.24288715734146535, 0.24148324708500876] ***
*** starting iteration: 3; err: [Inf, 0.262013679407537, 0.24288715734146535, 0.24148324708500876] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.262013679407537, 0.24288715734146535, 0.24148324708500876, 0.2413885952970013] ***
*** finished computation of 3 references, err: [Inf, 0.262013679407537, 0.24288715734146535, 0.24148324708500876, 0.2413885952970013] ***
*** center 1: selecting labels [1] (freq >= 1) [from [186, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [10, 124, 15]]
** centroid: 2, normalized-entropy: 0.5145385730606855, [(1, 10), (2, 124), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [114, 51, 0]]
** centroid: 3, normalized-entropy: 0.8921212805771683, [(1, 114), (2, 51)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3609701252952218] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3609701252952218, 0.2656169506795704] ***
*** starting iteration: 2; err: [Inf, 0.3609701252952218, 0.2656169506795704] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3609701252952218, 0.2656169506795704, 0.23707107035443187] ***
*** starting iteration: 3; err: [Inf, 0.3609701252952218, 0.2656169506795704, 0.23707107035443187] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3609701252952218, 0.2656169506795704, 0.23707107035443187, 0.2305995414033532] ***
*** finished computation of 3 references, err: [Inf, 0.3609701252952218, 0.2656169506795704, 0.23707107035443187, 0.2305995414033532] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [80, 110, 18]]
** centroid: 1, normalized-entropy: 0.8339465540121115, [(1, 80), (2, 110), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [155, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [67, 69, 1]]
** centroid: 3, normalized-entropy: 0.6655352469953504, [(1, 67), (2, 69), (3, 1)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30407988000661135] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30407988000661135, 0.28059605198912324] ***
*** starting iteration: 2; err: [Inf, 0.30407988000661135, 0.28059605198912324] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30407988000661135, 0.28059605198912324, 0.2694915987923741] ***
*** starting iteration: 3; err: [Inf, 0.30407988000661135, 0.28059605198912324, 0.2694915987923741] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30407988000661135, 0.28059605198912324, 0.2694915987923741, 0.24568741106241943] ***
*** finished computation of 3 references, err: [Inf, 0.30407988000661135, 0.28059605198912324, 0.2694915987923741, 0.24568741106241943] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [207, 7, 0]]
** centroid: 1, normalized-entropy: 0.20780677772468165, [(1, 207), (2, 7)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [1, 95, 18]]
** centroid: 2, normalized-entropy: 0.44139916842401716, [(1, 1), (2, 95), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [98, 74, 0]]
** centroid: 3, normalized-entropy: 0.985909442028652, [(1, 98), (2, 74)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.35406687211431564] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35406687211431564, 0.23981831040792168] ***
*** starting iteration: 2; err: [Inf, 0.35406687211431564, 0.23981831040792168] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35406687211431564, 0.23981831040792168, 0.23325472297891975] ***
*** starting iteration: 3; err: [Inf, 0.35406687211431564, 0.23981831040792168, 0.23325472297891975] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35406687211431564, 0.23981831040792168, 0.23325472297891975, 0.23247246111184358] ***
*** finished computation of 3 references, err: [Inf, 0.35406687211431564, 0.23981831040792168, 0.23325472297891975, 0.23247246111184358] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [131, 44, 0]]
** centroid: 1, normalized-entropy: 0.8135345151383454, [(1, 131), (2, 44)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [160, 5, 0]]
** centroid: 2, normalized-entropy: 0.19590927087360496, [(1, 160), (2, 5)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [2, 141, 17]]
** centroid: 3, normalized-entropy: 0.36808791276615577, [(1, 2), (2, 141), (3, 17)]
finished with 4 centroids; started with 3
[ Info: ("class distribution: ", Dict(2 => 360,3 => 32,1 => 608), Dict(2 => 375,3 => 42,1 => 583))
[ Info: ===== scores for single classifier: {"micro_f1":0.911,"precision":0.911,"recall":0.911,"macro_recall":0.6397941680960549,"macro_f1":0.6173065158708095,"accuracy":0.911,"class_f1":{"2":0.8939213349225269,"3":0.0,"1":0.9579982126899017},"class_precision":{"2":0.8081896551724138,"3":0.0,"1":1.0},"class_recall":{"2":1.0,"3":0.0,"1":0.9193825042881647}}
[ Info: ===== scores for 1: {"micro_f1":0.937,"precision":0.937,"recall":0.937,"macro_recall":0.9493912712025919,"macro_f1":0.8582623142722844,"accuracy":0.937,"class_f1":{"2":0.912621359223301,"3":0.6829268292682926,"1":0.9792387543252595},"class_precision":{"2":0.9508670520231214,"3":0.5185185185185185,"1":0.987783595113438},"class_recall":{"2":0.8773333333333333,"3":1.0,"1":0.9708404802744426}}
[ Info: ===== scores for 5: {"micro_f1":0.935,"precision":0.935,"recall":0.935,"macro_recall":0.9472963598246616,"macro_f1":0.8491375575842103,"accuracy":0.935,"class_f1":{"2":0.9093444909344491,"3":0.65625,"1":0.9818181818181818},"class_precision":{"2":0.9532163742690059,"3":0.4883720930232558,"1":0.9912587412587412},"class_recall":{"2":0.8693333333333333,"3":1.0,"1":0.9725557461406518}}
[ Info: ===== scores for 7: {"micro_f1":0.938,"precision":0.938,"recall":0.938,"macro_recall":0.949645892891176,"macro_f1":0.8528720438180223,"accuracy":0.938,"class_f1":{"2":0.913649025069638,"3":0.6614173228346457,"1":0.9835497835497835},"class_precision":{"2":0.956268221574344,"3":0.49411764705882355,"1":0.993006993006993},"class_recall":{"2":0.8746666666666667,"3":1.0,"1":0.9742710120068611}}
[ Info: ===== scores for 9: {"micro_f1":0.951,"precision":0.951,"recall":0.951,"macro_recall":0.960250047646274,"macro_f1":0.8720766852061028,"accuracy":0.951,"class_f1":{"2":0.9324137931034483,"3":0.6942148760330578,"1":0.9896013864818024},"class_precision":{"2":0.9657142857142857,"3":0.5316455696202531,"1":1.0},"class_recall":{"2":0.9013333333333333,"3":1.0,"1":0.9794168096054888}}
[ Info: ===== scores for 11: {"micro_f1":0.951,"precision":0.951,"recall":0.951,"macro_recall":0.960250047646274,"macro_f1":0.8720766852061028,"accuracy":0.951,"class_f1":{"2":0.9324137931034483,"3":0.6942148760330578,"1":0.9896013864818024},"class_precision":{"2":0.9657142857142857,"3":0.5316455696202531,"1":1.0},"class_recall":{"2":0.9013333333333333,"3":1.0,"1":0.9794168096054888}}
(score = 0.944, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.944, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.937, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.937, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.933, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.933, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.934, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.934, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.933, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.933, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.935, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.935, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.939, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.939, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.938, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.938, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.944,"k":1,"kernel":"direct_kernel","dist":"l1_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.944,"precision":0.944,"recall":0.944,"macro_recall":0.9546620926243566,"macro_f1":0.8683888386542212,"accuracy":0.944,"class_f1":{"2":0.9224376731301939,"3":0.7000000000000001,"1":0.9827288428324698},"class_precision":{"2":0.9596541786743515,"3":0.5384615384615384,"1":0.9895652173913043},"class_recall":{"2":0.888,"3":1.0,"1":0.9759862778730704}}
Test Summary: | Pass  Total
AKNC          |    8      8
[284, 1, 1, 2, 4, 5, 2, 22, 4, 7, 2, 6, 4, 3, 3, 2, 1, 2, 4, 2, 12, 16, 23, 3, 5, 3, 1, 6, 1, 27, 11, 8, 5, 8, 11, 6, 5, 9, 7, 8, 2, 25, 10, 60, 7, 10, 44, 46, 2, 8, 7, 41, 7, 3, 41, 4, 22, 15, 1, 50, 71, 2, 17, 9, 11, 8, 19, 8, 9, 28, 64, 14, 7, 2, 10, 7, 31, 14, 11, 5, 1, 6, 19, 19, 101, 4, 513, 9, 12, 5, 53, 20, 25, 17, 18, 29, 25, 4, 14, 15, 1, 25, 165, 18, 139, 22, 11, 42, 30, 4, 11, 4, 169, 16, 62, 14, 42, 25, 28, 5, 20, 188, 11, 7, 6, 1, 2, 60, 20, 45, 16, 12, 17, 30, 10, 20, 2, 4, 4, 10, 6, 6, 25, 2, 8, 34, 11, 12, 692, 44, 17, 50, 4, 62, 14, 21, 8, 44, 8, 20, 26, 15, 39, 84, 8, 23, 3, 49, 2, 17, 7, 9, 6, 26, 10, 5, 17, 47, 160, 12, 117, 1, 39, 61, 21, 35, 8, 22, 57, 31, 11, 10, 4, 21, 23, 15, 4, 6, 9, 5, 4, 19, 1, 1, 36, 169, 2, 31, 12, 2, 31, 67, 29, 6, 51, 19, 65, 14, 3, 1, 8, 36, 3, 23, 21, 11, 52, 12, 84, 3, 250, 26, 45, 17, 5, 53, 27, 36, 175, 20, 24, 28, 123, 136, 5, 31, 120, 17, 9, 17, 27, 145, 6, 23, 4, 5, 24, 13, 17, 63, 61, 27, 23, 9, 16, 9, 15, 3, 52, 53, 713, 91, 36, 47, 36, 4, 21, 8, 4, 24, 6, 21, 49, 15, 17, 13, 4, 33, 34, 28, 202, 5, 65, 19, 187, 36, 3, 7, 9, 20]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.65, speedup = 0.29921441326975295, eval_ratio = 0.077139)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.3833333333333334,"recall":0.38194444444444453,"f1":null,"seconds":0.00012501515448093414,"exhaustive_search_seconds":0.00040321238338947296,"evaluations":484.8515625,"distances_sum":1689.8671776135125}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5477430555555555,"recall":0.5477430555555555,"f1":null,"seconds":0.00026754289865493774,"exhaustive_search_seconds":0.00040321238338947296,"evaluations":643.0703125,"distances_sum":1581.5363841052313}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6657986111111109,"recall":0.6657986111111109,"f1":null,"seconds":0.0004475954920053482,"exhaustive_search_seconds":0.00040321238338947296,"evaluations":775.09375,"distances_sum":1529.6470472007727}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.743055555555555,"recall":0.743055555555555,"f1":0.743055555555555,"seconds":0.0005270782858133316,"exhaustive_search_seconds":0.00040321238338947296,"evaluations":927.4296875,"distances_sum":1503.2486750889898}
KCenters.DeloneInvIndex> reached performance {"precision":0.8038194444444438,"recall":0.8038194444444438,"f1":0.8038194444444438,"seconds":0.0006015393882989883,"exhaustive_search_seconds":0.00040321238338947296,"evaluations":1048.8515625,"distances_sum":1486.712767063878}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7630000000000001, speedup = 0.6233833837065254, eval_ratio = 0.10419400000000001)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
