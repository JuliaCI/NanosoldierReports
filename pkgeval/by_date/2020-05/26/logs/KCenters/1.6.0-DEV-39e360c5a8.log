Julia Version 1.6.0-DEV.106
Commit 39e360c5a8 (2020-05-26 17:21 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed PooledArrays ──────────────── v0.5.3
  Installed InvertedIndices ───────────── v1.0.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed KCenters ──────────────────── v0.2.2
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed LearnBase ─────────────────── v0.2.2
  Installed Missings ──────────────────── v0.4.3
  Installed Reexport ──────────────────── v0.2.0
  Installed Compat ────────────────────── v3.10.0
  Installed Parsers ───────────────────── v1.0.4
  Installed Tables ────────────────────── v1.0.4
  Installed MLDataUtils ───────────────── v0.5.1
  Installed StatsBase ─────────────────── v0.32.2
  Installed TableTraits ───────────────── v1.0.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed DataAPI ───────────────────── v1.3.0
  Installed OrderedCollections ────────── v1.2.0
  Installed JSON ──────────────────────── v0.21.0
  Installed DataStructures ────────────── v0.17.17
  Installed DataFrames ────────────────── v0.20.2
  Installed SimilaritySearch ──────────── v0.3.19
  Installed MLDataPattern ─────────────── v0.5.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.10.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.17
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.4
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_EJNHbh/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_EJNHbh/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.10.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.17
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.4
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.9360659371813138
[ Info: 0.8307796732584636
[ Info: 0.5561528046429157
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3297804680218299
mean(cdnet.distances) = 0.36027311652898786
mean(crand.distances) = 0.32733052944143615
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8433082542457551,"seconds":4.058703780174255e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.84375,"distances_sum":2163.000969930226}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.849674804362305,"seconds":5.705282092094421e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.9453125,"distances_sum":2172.3389902642316}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1669921875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.1669921875,"f1":null,"seconds":6.148591637611389e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":4.53125,"distances_sum":459.5643234946226}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7529296875,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.7529296875,"f1":0.849674804362305,"seconds":5.705282092094421e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.9453125,"distances_sum":2172.3389902642316}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9327495421245426,"seconds":5.444511771202087e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.515625,"distances_sum":2766.106964687057}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.95177738927739,"seconds":6.1355531215667725e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.703125,"distances_sum":2886.5099771380274}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7841796875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.7841796875,"f1":0.8703504828504836,"seconds":5.230307579040527e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.3203125,"distances_sum":2263.544921915455}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9534226190476196,"seconds":5.448237061500549e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.78125,"distances_sum":2864.0167654470133}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9305376914751922,"seconds":5.479902029037476e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.515625,"distances_sum":2692.7910040427087}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8574035339660347,"seconds":5.019828677177429e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.015625,"distances_sum":2223.0482532235624}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.916015625,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.916015625,"f1":0.95177738927739,"seconds":6.1355531215667725e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.703125,"distances_sum":2886.5099771380274}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9761904761904765,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.9140625,"distances_sum":3043.60806366457}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9611836080586084,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8125,"distances_sum":2913.587176340298}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9744047619047624,"seconds":5.93625009059906e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.9375,"distances_sum":3013.621973804282}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9630608974358978,"seconds":5.645677447319031e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8671875,"distances_sum":2927.2084305295525}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9650354853479854,"seconds":5.891546607017517e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.828125,"distances_sum":2959.6316442138273}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9761904761904765,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.9140625,"distances_sum":3043.60806366457}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9761904761904765,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.9140625,"distances_sum":3043.60806366457}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.341796875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.341796875,"f1":null,"seconds":3.1962990760803223e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":5.6484375,"distances_sum":850.6405370630247}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.341796875,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.341796875,"f1":null,"seconds":3.1962990760803223e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":5.6484375,"distances_sum":850.6405370630247}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6806640625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6806640625,"f1":0.7997101856476864,"seconds":4.427507519721985e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":7.703125,"distances_sum":1662.3230022620394}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.894368652181153,"seconds":5.120411515235901e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.4609375,"distances_sum":2131.5517312618354}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.822265625,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.822265625,"f1":0.894368652181153,"seconds":5.120411515235901e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.4609375,"distances_sum":2131.5517312618354}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9629693223443226,"seconds":5.504116415977478e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.8125,"distances_sum":2571.750325228074}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9655963827838832,"seconds":5.465000867843628e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.828125,"distances_sum":2582.9240803839043}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.944743277555778,"seconds":5.3942203521728516e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.7421875,"distances_sum":2447.7048400493613}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8505859375, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8505859375,"f1":0.9141655219780229,"seconds":5.232170224189758e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.5859375,"distances_sum":2204.6753531976324}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9655963827838832,"seconds":5.465000867843628e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.828125,"distances_sum":2582.9240803839043}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":5,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9655963827838832,"seconds":5.465000867843628e-6,"exhaustive_search_seconds":1.3113021850585938e-6,"evaluations":8.828125,"distances_sum":2582.9240803839043}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7119140625, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.7119140625,"f1":0.8236560314685323,"seconds":4.621222615242004e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.046875,"distances_sum":1809.8150451093989}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4384765625, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.4384765625,"f1":null,"seconds":3.7029385566711426e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":7.09375,"distances_sum":982.8393621350075}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7119140625,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.7119140625,"f1":0.8236560314685323,"seconds":4.621222615242004e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.046875,"distances_sum":1809.8150451093989}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.9011446886446894,"seconds":6.515532732009888e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.796875,"distances_sum":2193.1199249229894}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8349609375, conf: {"ssize":9,"bsize":6}, perf: {"precision":1.0,"recall":0.8349609375,"f1":0.9049825174825182,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.8515625,"distances_sum":2215.946688633547}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8601481851481859,"seconds":5.206093192100525e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.453125,"distances_sum":1970.6220427672117}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8212890625, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8212890625,"f1":0.8955877455877467,"seconds":5.630776286125183e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.8125,"distances_sum":2172.37705494768}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7548828125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7548828125,"f1":0.8545392107892117,"seconds":5.416572093963623e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.46875,"distances_sum":1915.3366455673488}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8349609375,"state":{"ssize":9,"bsize":6},"perf":{"precision":1.0,"recall":0.8349609375,"f1":0.9049825174825182,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.8515625,"distances_sum":2215.946688633547}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84375, conf: {"ssize":11,"bsize":6}, perf: {"precision":1.0,"recall":0.84375,"f1":0.910431235431236,"seconds":9.76957380771637e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.8203125,"distances_sum":2250.2238192584814}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9703869047619049,"seconds":6.143003702163696e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":9.0,"distances_sum":2690.69222528203}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9693853021978025,"seconds":9.708106517791748e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.9765625,"distances_sum":2699.137437226163}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9654819139194145,"seconds":6.059184670448303e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.953125,"distances_sum":2644.049752539851}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9287660256410267,"seconds":5.880370736122131e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.90625,"distances_sum":2341.933531948463}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9464686355311359,"seconds":5.798414349555969e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":8.9375,"distances_sum":2540.3719713517485}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9462890625,"state":{"ssize":9,"bsize":9},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9703869047619049,"seconds":6.143003702163696e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":9.0,"distances_sum":2690.69222528203}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9462890625,"state":{"ssize":9,"bsize":9},"perf":{"precision":1.0,"recall":0.9462890625,"f1":0.9703869047619049,"seconds":6.143003702163696e-6,"exhaustive_search_seconds":1.2721866369247437e-6,"evaluations":9.0,"distances_sum":2690.69222528203}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.858576146076147,"seconds":5.381181836128235e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.734375,"distances_sum":1933.671543247813}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.763671875,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.763671875,"f1":0.858576146076147,"seconds":5.381181836128235e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.734375,"distances_sum":1933.671543247813}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.80078125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.80078125,"f1":0.88397435897436,"seconds":5.517154932022095e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.6875,"distances_sum":2082.2547160174736}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9421588827838834,"seconds":9.605661034584045e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9765625,"distances_sum":2463.941642119729}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9378090659340668,"seconds":6.0461461544036865e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9609375,"distances_sum":2415.5897989701034}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.8663836163836173,"seconds":9.041279554367065e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.6640625,"distances_sum":1981.1245719823155}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.900390625,"state":{"ssize":6,"bsize":7},"perf":{"precision":1.0,"recall":0.900390625,"f1":0.9421588827838834,"seconds":9.605661034584045e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9765625,"distances_sum":2463.941642119729}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9730483058608064,"seconds":9.739771485328674e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9765625,"distances_sum":2688.6432371942874}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.975280448717949,"seconds":1.0097399353981018e-5,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.984375,"distances_sum":2699.5058326754847}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9553228021978029,"seconds":9.665265679359436e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9453125,"distances_sum":2583.575864646405}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9713572885447889,"seconds":6.213784217834473e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9609375,"distances_sum":2703.5763724432054}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.96484375, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.96484375,"f1":0.9808779761904765,"seconds":6.46151602268219e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.96875,"distances_sum":2760.8664875777804}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9699633699633703,"seconds":6.172806024551392e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9921875,"distances_sum":2651.2921637199734}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9623168498168503,"seconds":6.297603249549866e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9765625,"distances_sum":2612.178494403242}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.96484375,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9808779761904765,"seconds":6.46151602268219e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.96875,"distances_sum":2760.8664875777804}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.96484375,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.96484375,"f1":0.9808779761904765,"seconds":6.46151602268219e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.96875,"distances_sum":2760.8664875777804}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.552734375, conf: {"ssize":3,"bsize":3}, perf: {"precision":null,"recall":0.552734375,"f1":null,"seconds":8.644536137580872e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.2890625,"distances_sum":1314.8096317340028}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.568359375, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.568359375,"f1":0.708824335386836,"seconds":4.451721906661987e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.5078125,"distances_sum":1326.2291740863316}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.568359375,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.568359375,"f1":0.708824335386836,"seconds":4.451721906661987e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.5078125,"distances_sum":1326.2291740863316}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.798828125, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.798828125,"f1":0.8825408966033975,"seconds":5.5693089962005615e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.59375,"distances_sum":2034.2281725490013}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6806640625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6806640625,"f1":0.7978870088245097,"seconds":9.130686521530151e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.046875,"distances_sum":1654.7352977112432}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7421875, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7421875,"f1":0.8446485805860815,"seconds":5.207955837249756e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.2421875,"distances_sum":1831.279886099135}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.80859375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.80859375,"f1":0.888971445221446,"seconds":9.499490261077881e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.6171875,"distances_sum":2065.3067735500517}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7666015625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7666015625,"f1":0.8618792665667674,"seconds":5.1800161600112915e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.3359375,"distances_sum":1933.1352493223808}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.658203125, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.658203125,"f1":0.7862304362304371,"seconds":4.971399903297424e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.9609375,"distances_sum":1557.9192740797555}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6650390625,"f1":0.783894404206905,"seconds":4.9192458391189575e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":7.90625,"distances_sum":1617.8519619641422}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.80859375,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.80859375,"f1":0.888971445221446,"seconds":9.499490261077881e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.6171875,"distances_sum":2065.3067735500517}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9485977564102569,"seconds":6.122514605522156e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.875,"distances_sum":2412.285096636978}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9428685897435906,"seconds":5.969777703285217e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.90625,"distances_sum":2344.9032843236155}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9443374333999339,"seconds":6.103888154029846e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.828125,"distances_sum":2391.116149884442}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9650869963369969,"seconds":6.098300218582153e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8984375,"distances_sum":2528.3872943734045}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9576121794871801,"seconds":6.202608346939087e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8359375,"distances_sum":2497.300192809455}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9482600732600736,"seconds":6.18956983089447e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.859375,"distances_sum":2401.594611506021}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":9,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9364468864468872,"seconds":5.984678864479065e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8359375,"distances_sum":2336.9126783335346}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9464400183150188,"seconds":6.062909960746765e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8125,"distances_sum":2437.023991635062}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9375,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9650869963369969,"seconds":6.098300218582153e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8984375,"distances_sum":2528.3872943734045}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9375,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9375,"f1":0.9650869963369969,"seconds":6.098300218582153e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8984375,"distances_sum":2528.3872943734045}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2080078125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2080078125,"f1":null,"seconds":3.641471266746521e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":6.4609375,"distances_sum":448.7082545018909}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2080078125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2080078125,"f1":null,"seconds":3.641471266746521e-6,"exhaustive_search_seconds":1.5869736671447754e-6,"evaluations":6.4609375,"distances_sum":448.7082545018909}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3408203125, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.3408203125,"f1":null,"seconds":8.804537355899811e-5,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":4.7578125,"distances_sum":776.9483411801432}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3408203125,"state":{"ssize":4,"bsize":2},"perf":{"precision":null,"recall":0.3408203125,"f1":null,"seconds":8.804537355899811e-5,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":4.7578125,"distances_sum":776.9483411801432}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6474609375, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.6474609375,"f1":0.7664999930624938,"seconds":5.278736352920532e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.21875,"distances_sum":1554.0093664622113}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8552081598956608,"seconds":5.304813385009766e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.9453125,"distances_sum":1917.7263981705523}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.763671875,"state":{"ssize":7,"bsize":5},"perf":{"precision":1.0,"recall":0.763671875,"f1":0.8552081598956608,"seconds":5.304813385009766e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":7.9453125,"distances_sum":1917.7263981705523}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9500260156510162,"seconds":6.12996518611908e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.7578125,"distances_sum":2450.1729028502987}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.876953125, conf: {"ssize":10,"bsize":7}, perf: {"precision":1.0,"recall":0.876953125,"f1":0.9292696886446893,"seconds":5.688518285751343e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.578125,"distances_sum":2321.352040679482}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9443910256410264,"seconds":5.863606929779053e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.7109375,"distances_sum":2426.2600479339926}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9500260156510162,"seconds":6.12996518611908e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.7578125,"distances_sum":2450.1729028502987}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9130859375,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9500260156510162,"seconds":6.12996518611908e-6,"exhaustive_search_seconds":1.5385448932647705e-6,"evaluations":8.7578125,"distances_sum":2450.1729028502987}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.443359375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.443359375,"f1":null,"seconds":3.905966877937317e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":6.734375,"distances_sum":927.7875735368466}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5888671875, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5888671875,"f1":0.7232285076035083,"seconds":4.500150680541992e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.203125,"distances_sum":1320.1582113128306}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5888671875,"state":{"ssize":2,"bsize":3},"perf":{"precision":1.0,"recall":0.5888671875,"f1":0.7232285076035083,"seconds":4.500150680541992e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":7.203125,"distances_sum":1320.1582113128306}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9346356768231774,"seconds":6.0498714447021484e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.65625,"distances_sum":2343.3686258507046}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.90625,"f1":0.9473099816849825,"seconds":5.904585123062134e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.765625,"distances_sum":2423.47800180148}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90625,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.90625,"f1":0.9473099816849825,"seconds":5.904585123062134e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.765625,"distances_sum":2423.47800180148}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9663347069597074,"seconds":6.198883056640625e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9140625,"distances_sum":2584.850637622805}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9583192848817854,"seconds":6.2193721532821655e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.875,"distances_sum":2530.239540314645}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9739239926739933,"seconds":6.187707185745239e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9296875,"distances_sum":2652.1810311864447}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9739239926739933,"seconds":6.187707185745239e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9296875,"distances_sum":2652.1810311864447}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9739239926739933,"seconds":6.187707185745239e-6,"exhaustive_search_seconds":1.4845281839370728e-6,"evaluations":8.9296875,"distances_sum":2652.1810311864447}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8559256715506725,"seconds":6.234273314476013e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.3515625,"distances_sum":1826.1219419560882}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6669921875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6669921875,"f1":0.7909444721944731,"seconds":5.031004548072815e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":7.734375,"distances_sum":1548.4383057752473}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.763671875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.763671875,"f1":0.8559256715506725,"seconds":6.234273314476013e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.3515625,"distances_sum":1826.1219419560882}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9544700091575097,"seconds":6.087124347686768e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.90625,"distances_sum":2466.5536168903445}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9544700091575097,"seconds":6.087124347686768e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.90625,"distances_sum":2466.5536168903445}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9722298534798539,"seconds":7.292255759239197e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.9453125,"distances_sum":2593.2522552274877}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.966796875, conf: {"ssize":4,"bsize":13}, perf: {"precision":1.0,"recall":0.966796875,"f1":0.9818452380952385,"seconds":6.787478923797607e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.9765625,"distances_sum":2652.7138726769117}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9570570054945058,"seconds":6.11133873462677e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.859375,"distances_sum":2487.417347381543}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":3,"bsize":13}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9767685439560442,"seconds":7.586553692817688e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.953125,"distances_sum":2627.700360468155}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.966796875,"state":{"ssize":4,"bsize":13},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9818452380952385,"seconds":6.787478923797607e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.9765625,"distances_sum":2652.7138726769117}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.966796875,"state":{"ssize":4,"bsize":13},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9818452380952385,"seconds":6.787478923797607e-6,"exhaustive_search_seconds":1.5404075384140015e-6,"evaluations":8.9765625,"distances_sum":2652.7138726769117}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1884765625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1884765625,"f1":null,"seconds":3.4812837839126587e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":5.3359375,"distances_sum":417.47356382195574}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8572203837828846,"seconds":5.781650543212891e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.5625,"distances_sum":1874.035112877963}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.763671875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.763671875,"f1":0.8572203837828846,"seconds":5.781650543212891e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.5625,"distances_sum":1874.035112877963}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9413981851481855,"seconds":6.170943379402161e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.8515625,"distances_sum":2414.787991438002}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.900390625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.900390625,"f1":0.9413981851481855,"seconds":6.170943379402161e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.8515625,"distances_sum":2414.787991438002}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9732886904761908,"seconds":6.7390501499176025e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.9296875,"distances_sum":2628.303383040836}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.950652472527473,"seconds":6.2230974435806274e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.8359375,"distances_sum":2458.6727171104417}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9577609890109893,"seconds":6.3534826040267944e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.921875,"distances_sum":2499.015210237706}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9672847985347991,"seconds":6.59748911857605e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.921875,"distances_sum":2577.4888398023386}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9547161172161177,"seconds":6.260350346565247e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.8984375,"distances_sum":2475.762645908597}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9522722069597075,"seconds":6.303191184997559e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.8515625,"distances_sum":2493.82025292376}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":9,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9593807234432238,"seconds":6.05359673500061e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.859375,"distances_sum":2547.9236800115164}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9521484375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9732886904761908,"seconds":6.7390501499176025e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.9296875,"distances_sum":2628.303383040836}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9521484375,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.9521484375,"f1":0.9732886904761908,"seconds":6.7390501499176025e-6,"exhaustive_search_seconds":1.4994293451309204e-6,"evaluations":8.9296875,"distances_sum":2628.303383040836}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2080078125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2080078125,"f1":null,"seconds":3.4123659133911133e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":4.5625,"distances_sum":492.1621687489432}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2080078125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2080078125,"f1":null,"seconds":3.4123659133911133e-6,"exhaustive_search_seconds":1.4211982488632202e-6,"evaluations":4.5625,"distances_sum":492.1621687489432}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2177734375, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2177734375,"f1":null,"seconds":3.825873136520386e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":5.6953125,"distances_sum":491.51099257690163}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.46484375, conf: {"ssize":1,"bsize":2}, perf: {"precision":1.0,"recall":0.46484375,"f1":0.6089996808746809,"seconds":3.995373845100403e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":6.265625,"distances_sum":1035.8929242556817}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6943359375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6943359375,"f1":0.809719447219448,"seconds":4.986301064491272e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.6953125,"distances_sum":1703.7388208648895}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6943359375,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6943359375,"f1":0.809719447219448,"seconds":4.986301064491272e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.6953125,"distances_sum":1703.7388208648895}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9241185897435904,"seconds":6.232410669326782e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.7890625,"distances_sum":2364.8600767998114}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9354426823176828,"seconds":6.098300218582153e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.84375,"distances_sum":2427.86352843412}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9034403096903107,"seconds":5.902722477912903e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.5546875,"distances_sum":2219.676437066231}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8271484375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8271484375,"f1":0.8999802281052289,"seconds":6.016343832015991e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.4375,"distances_sum":2174.0201709848097}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7919921875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7919921875,"f1":0.8757305194805205,"seconds":5.561858415603638e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.03125,"distances_sum":2021.3053313236885}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7001953125, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.7001953125,"f1":0.8120301573426579,"seconds":5.09992241859436e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.5078125,"distances_sum":1723.1346203884236}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.88671875,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.88671875,"f1":0.9354426823176828,"seconds":6.098300218582153e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.84375,"distances_sum":2427.86352843412}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":6,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9659626831501833,"seconds":6.416812539100647e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.921875,"distances_sum":2668.709180304219}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9375832500832505,"seconds":6.0014426708221436e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.7890625,"distances_sum":2485.839980135414}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9581330128205134,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.875,"distances_sum":2617.144058229685}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9388679029304037,"seconds":6.115064024925232e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.7578125,"distances_sum":2487.9647474592784}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9631353021978027,"seconds":6.387010216712952e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.875,"distances_sum":2660.740210531536}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9404296875,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9659626831501833,"seconds":6.416812539100647e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.921875,"distances_sum":2668.709180304219}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9404296875,"state":{"ssize":6,"bsize":10},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9659626831501833,"seconds":6.416812539100647e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.921875,"distances_sum":2668.709180304219}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4365234375, conf: {"ssize":1,"bsize":2}, perf: {"precision":1.0,"recall":0.4365234375,"f1":0.5836337273837275,"seconds":3.976747393608093e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":6.03125,"distances_sum":985.2831726777862}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.56640625, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.56640625,"f1":null,"seconds":4.552304744720459e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":6.796875,"distances_sum":1377.0521430988654}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.56640625,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.56640625,"f1":null,"seconds":4.552304744720459e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":6.796875,"distances_sum":1377.0521430988654}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.833984375, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.833984375,"f1":0.9014542748917757,"seconds":5.688518285751343e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.3203125,"distances_sum":2297.720820924322}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9294585622710629,"seconds":6.11133873462677e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.78125,"distances_sum":2526.2339588477876}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8134765625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8134765625,"f1":0.8886800699300708,"seconds":6.165355443954468e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.25,"distances_sum":2223.3819822264504}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5791015625, conf: {"ssize":8,"bsize":3}, perf: {"precision":null,"recall":0.5791015625,"f1":null,"seconds":4.542991518974304e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":6.875,"distances_sum":1415.9584723833902}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8759765625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.8759765625,"f1":0.9294585622710629,"seconds":6.11133873462677e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.78125,"distances_sum":2526.2339588477876}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.94632554945055,"seconds":5.5283308029174805e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.828125,"distances_sum":2621.5668479093347}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9650500541125545,"seconds":5.636364221572876e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.921875,"distances_sum":2756.262110730947}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9474931318681324,"seconds":5.5655837059021e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.78125,"distances_sum":2670.936292083642}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8779296875, conf: {"ssize":11,"bsize":7}, perf: {"precision":1.0,"recall":0.8779296875,"f1":0.9295131951381959,"seconds":5.470588803291321e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.7109375,"distances_sum":2545.502472216267}, best_list's length: 15, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9384765625,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9650500541125545,"seconds":5.636364221572876e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.921875,"distances_sum":2756.262110730947}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9384765625,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9384765625,"f1":0.9650500541125545,"seconds":5.636364221572876e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.921875,"distances_sum":2756.262110730947}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3798828125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3798828125,"f1":null,"seconds":3.4030526876449585e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":5.3515625,"distances_sum":864.6518118106287}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3798828125,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.3798828125,"f1":null,"seconds":3.4030526876449585e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":5.3515625,"distances_sum":864.6518118106287}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8431157384282391,"seconds":4.926696419715881e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":7.7421875,"distances_sum":2014.943341508134}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8634542540792551,"seconds":4.990026354789734e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":7.921875,"distances_sum":2074.1223873645226}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7763671875,"state":{"ssize":6,"bsize":5},"perf":{"precision":1.0,"recall":0.7763671875,"f1":0.8634542540792551,"seconds":4.990026354789734e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":7.921875,"distances_sum":2074.1223873645226}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.818359375, conf: {"ssize":10,"bsize":6}, perf: {"precision":1.0,"recall":0.818359375,"f1":0.8911005661005666,"seconds":5.213543772697449e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.2421875,"distances_sum":2258.335920637021}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.875,"f1":0.9278788919413927,"seconds":5.276873707771301e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.6796875,"distances_sum":2464.590295039539}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.875,"f1":0.9278788919413927,"seconds":5.276873707771301e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.6796875,"distances_sum":2464.590295039539}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.875,"f1":0.9278788919413927,"seconds":5.276873707771301e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.6796875,"distances_sum":2464.590295039539}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4345703125, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.4345703125,"f1":null,"seconds":3.680586814880371e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":6.109375,"distances_sum":1000.4812155923179}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.412109375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.412109375,"f1":null,"seconds":3.645196557044983e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":5.9765625,"distances_sum":938.9925020776749}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.787109375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.787109375,"f1":0.8735155469530479,"seconds":5.0906091928482056e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":7.96875,"distances_sum":2109.6062544430115}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.787109375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.787109375,"f1":0.8735155469530479,"seconds":5.0906091928482056e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":7.96875,"distances_sum":2109.6062544430115}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8369140625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8369140625,"f1":0.905826465201466,"seconds":5.4426491260528564e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.5859375,"distances_sum":2327.35695904456}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8095703125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.8095703125,"f1":0.8853651556776564,"seconds":5.166977643966675e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.15625,"distances_sum":2221.788162498225}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8369140625,"state":{"ssize":5,"bsize":6},"perf":{"precision":1.0,"recall":0.8369140625,"f1":0.905826465201466,"seconds":5.4426491260528564e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.5859375,"distances_sum":2327.35695904456}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9557723526473533,"seconds":5.798414349555969e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.875,"distances_sum":2714.2288917880933}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.957932692307693,"seconds":6.068497896194458e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.8828125,"distances_sum":2744.5325083671546}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9667639652014655,"seconds":6.1765313148498535e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.90625,"distances_sum":2780.45198192335}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9404296875,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9667639652014655,"seconds":6.1765313148498535e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.90625,"distances_sum":2780.45198192335}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9404296875,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9667639652014655,"seconds":6.1765313148498535e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":8.90625,"distances_sum":2780.45198192335}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2158203125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2158203125,"f1":null,"seconds":3.3192336559295654e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":5.4453125,"distances_sum":579.8024833837021}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.37109375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.37109375,"f1":null,"seconds":3.6172568798065186e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":5.40625,"distances_sum":946.6330988686458}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.37109375,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.37109375,"f1":null,"seconds":3.6172568798065186e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":5.40625,"distances_sum":946.6330988686458}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7939453125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7939453125,"f1":0.8763314810189818,"seconds":5.297362804412842e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.046875,"distances_sum":2148.455456939259}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7939453125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7939453125,"f1":0.8763314810189818,"seconds":5.297362804412842e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.046875,"distances_sum":2148.455456939259}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9410599816849822,"seconds":5.844980478286743e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.75,"distances_sum":2630.2223154290245}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.814453125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.814453125,"f1":0.8913263819513829,"seconds":5.451962351799011e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.296875,"distances_sum":2213.6213381017096}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.896484375,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.896484375,"f1":0.9410599816849822,"seconds":5.844980478286743e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.75,"distances_sum":2630.2223154290245}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.896484375,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.896484375,"f1":0.9410599816849822,"seconds":5.844980478286743e-6,"exhaustive_search_seconds":1.2665987014770508e-6,"evaluations":8.75,"distances_sum":2630.2223154290245}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4296875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4296875,"f1":null,"seconds":3.7942081689834595e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":6.03125,"distances_sum":948.8215328543608}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5498046875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5498046875,"f1":null,"seconds":4.265457391738892e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":6.6640625,"distances_sum":1265.2239764977846}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8651535964035973,"seconds":5.066394805908203e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":7.8203125,"distances_sum":2002.2299998727178}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.775390625,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.775390625,"f1":0.8651535964035973,"seconds":5.066394805908203e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":7.8203125,"distances_sum":2002.2299998727178}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":8,"bsize":7}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9214374167499175,"seconds":5.679205060005188e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.625,"distances_sum":2426.4075793885368}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9215206668331676,"seconds":5.505979061126709e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.625,"distances_sum":2386.5781018399402}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8837890625,"f1":0.9333250083250091,"seconds":5.6140124797821045e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.6484375,"distances_sum":2464.41252360988}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.86328125, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.86328125,"f1":0.9198088369963378,"seconds":5.416572093963623e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.609375,"distances_sum":2424.9723357236358}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7880859375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7880859375,"f1":0.8731632950382959,"seconds":5.057081580162048e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":7.9140625,"distances_sum":2068.285266051891}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8837890625,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8837890625,"f1":0.9333250083250091,"seconds":5.6140124797821045e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.6484375,"distances_sum":2464.41252360988}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9686069139194144,"seconds":6.029382348060608e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.859375,"distances_sum":2746.354676728393}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9720467032967034,"seconds":6.0498714447021484e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.875,"distances_sum":2787.3743583082714}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":10,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9670043498168502,"seconds":5.833804607391357e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8515625,"distances_sum":2739.912357110731}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9459706959706965,"seconds":6.074085831642151e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.7421875,"distances_sum":2587.5280121551327}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9482421875, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.9482421875,"f1":0.9712454212454216,"seconds":6.28642737865448e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8828125,"distances_sum":2758.0776303393723}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9679143772893777,"seconds":5.97536563873291e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.84375,"distances_sum":2763.8513994162886}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9581330128205133,"seconds":5.953013896942139e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8359375,"distances_sum":2674.229713599676}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9501953125,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9720467032967034,"seconds":6.0498714447021484e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.875,"distances_sum":2787.3743583082714}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9501953125,"state":{"ssize":7,"bsize":10},"perf":{"precision":1.0,"recall":0.9501953125,"f1":0.9720467032967034,"seconds":6.0498714447021484e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.875,"distances_sum":2787.3743583082714}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6689453125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6689453125,"f1":0.790833125208126,"seconds":4.721805453300476e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.2109375,"distances_sum":1723.8340705578448}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3974609375, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.3974609375,"f1":null,"seconds":3.689900040626526e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":5.5625,"distances_sum":894.135715162657}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6494140625, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6494140625,"f1":0.7756089396714406,"seconds":4.665926098823547e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.234375,"distances_sum":1579.8134902256638}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6689453125,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.6689453125,"f1":0.790833125208126,"seconds":4.721805453300476e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":7.2109375,"distances_sum":1723.8340705578448}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.84375, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.84375,"f1":0.9090576090576098,"seconds":5.81890344619751e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.5234375,"distances_sum":2326.3795073110905}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.84375,"state":{"ssize":8,"bsize":6},"perf":{"precision":1.0,"recall":0.84375,"f1":0.9090576090576098,"seconds":5.81890344619751e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.5234375,"distances_sum":2326.3795073110905}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":11,"bsize":10}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9603823260073263,"seconds":5.7891011238098145e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.875,"distances_sum":2738.7676399428296}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9460851648351655,"seconds":5.757436156272888e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.765625,"distances_sum":2656.1568773973045}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9384386446886452,"seconds":5.813315510749817e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.7109375,"distances_sum":2604.359947963909}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9287109375,"state":{"ssize":11,"bsize":10},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9603823260073263,"seconds":5.7891011238098145e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.875,"distances_sum":2738.7676399428296}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9287109375,"state":{"ssize":11,"bsize":10},"perf":{"precision":1.0,"recall":0.9287109375,"f1":0.9603823260073263,"seconds":5.7891011238098145e-6,"exhaustive_search_seconds":1.2423843145370483e-6,"evaluations":8.875,"distances_sum":2738.7676399428296}}, n: 9
mean(cfft.distances) = 0.3352616401017213
mean(cdnet.distances) = 1.2425204685710498
mean(crand.distances) = 0.3373265421576294
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8999999999999999
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8933333333333334
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8755555555555556
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8888888888888888
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8733333333333334
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8866666666666667
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.8533333333333334
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9422222222222222
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.851111111111111
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9311111111111111
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9466666666666667
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.9044444444444445
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8866666666666667
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9088888888888889
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9022222222222224
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9333333333333332
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.928888888888889
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8844444444444445
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8888888888888888
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.9111111111111111
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.851111111111111
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9355555555555556
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.8822222222222224
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8933333333333334
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9066666666666667
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.8955555555555555
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9177777777777778
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8488888888888889
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.8955555555555555
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9177777777777778
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.888888888888889
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8488888888888889
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.98
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.92
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 2, 8]]
** centroid: 9, normalized-entropy: 0.7219280948873623, [(2, 2), (3, 8)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 9]]
** centroid: 12, normalized-entropy: 0.46899559358928133, [(2, 1), (3, 9)]
finished with 14 centroids; started with 12
nc.class_map = [1, 3, 2, 3, 2, 1, 3, 2, 2, 2, 3, 3, 3, 3]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.5768482171495756] ***
*** center 1: selecting labels [1] (freq >= 1) [from [38, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 1]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 3), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 4, normalized-entropy: 0.5225593745369407, [(2, 15), (3, 2)]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 6: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 23, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 3, 7]]
** centroid: 9, normalized-entropy: 0.8812908992306927, [(2, 3), (3, 7)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 12: selecting labels [2, 3] (freq >= 1) [from [0, 1, 13]]
** centroid: 12, normalized-entropy: 0.3712323266408756, [(2, 1), (3, 13)]
finished with 15 centroids; started with 12
acc = 0.9333333333333333
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.18885315863856825] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18885315863856825, 0.15352189520616893] ***
*** finished computation of 7 references, err: [Inf, 0.18885315863856825, 0.15352189520616893] ***
*** center 1: selecting labels [1] (freq >= 1) [from [119, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 57, 22]]
** centroid: 2, normalized-entropy: 0.8533728188427888, [(2, 57), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [58, 15, 0]]
** centroid: 3, normalized-entropy: 0.7327525499549903, [(1, 58), (2, 15)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [54, 80, 0]]
** centroid: 4, normalized-entropy: 0.9726699911457106, [(1, 54), (2, 80)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [27, 98, 0]]
** centroid: 5, normalized-entropy: 0.7527960664084546, [(1, 27), (2, 98)]
*** center 6: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18677182249289223] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18677182249289223, 0.15169332824602746] ***
*** finished computation of 7 references, err: [Inf, 0.18677182249289223, 0.15169332824602746] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [134, 3, 0]]
** centroid: 1, normalized-entropy: 0.1519675645407823, [(1, 134), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [87, 1, 0]]
** centroid: 2, normalized-entropy: 0.08970338978685011, [(1, 87), (2, 1)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 47, 13]]
** centroid: 3, normalized-entropy: 0.7540340561971327, [(2, 47), (3, 13)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [64, 3, 0]]
** centroid: 4, normalized-entropy: 0.26377743669413856, [(1, 64), (2, 3)]
*** center 5: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [4, 94, 0]]
** centroid: 6, normalized-entropy: 0.2460225782203316, [(1, 4), (2, 94)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [29, 105, 0]]
** centroid: 7, normalized-entropy: 0.753572561997754, [(1, 29), (2, 105)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23885478170004087] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23885478170004087, 0.17070794822340524] ***
*** starting iteration: 2; err: [Inf, 0.23885478170004087, 0.17070794822340524] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23885478170004087, 0.17070794822340524, 0.16079079701394602] ***
*** starting iteration: 3; err: [Inf, 0.23885478170004087, 0.17070794822340524, 0.16079079701394602] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23885478170004087, 0.17070794822340524, 0.16079079701394602, 0.15717994862140994] ***
*** starting iteration: 4; err: [Inf, 0.23885478170004087, 0.17070794822340524, 0.16079079701394602, 0.15717994862140994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23885478170004087, 0.17070794822340524, 0.16079079701394602, 0.15717994862140994, 0.15530626392327584] ***
*** starting iteration: 5; err: [Inf, 0.23885478170004087, 0.17070794822340524, 0.16079079701394602, 0.15717994862140994, 0.15530626392327584] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23885478170004087, 0.17070794822340524, 0.16079079701394602, 0.15717994862140994, 0.15530626392327584, 0.1537392526548971] ***
*** starting iteration: 6; err: [Inf, 0.23885478170004087, 0.17070794822340524, 0.16079079701394602, 0.15717994862140994, 0.15530626392327584, 0.1537392526548971] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23885478170004087, 0.17070794822340524, 0.16079079701394602, 0.15717994862140994, 0.15530626392327584, 0.1537392526548971, 0.15275018305067453] ***
*** finished computation of 7 references, err: [Inf, 0.23885478170004087, 0.17070794822340524, 0.16079079701394602, 0.15717994862140994, 0.15530626392327584, 0.1537392526548971, 0.15275018305067453] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [49, 37, 0]]
** centroid: 1, normalized-entropy: 0.985909442028652, [(1, 49), (2, 37)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [59, 29, 0]]
** centroid: 2, normalized-entropy: 0.9144612916935675, [(1, 59), (2, 29)]
*** center 3: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [10, 89, 0]]
** centroid: 4, normalized-entropy: 0.47218938467675087, [(1, 10), (2, 89)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [83, 4, 0]]
** centroid: 5, normalized-entropy: 0.2690553027246505, [(1, 83), (2, 4)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 88, 21]]
** centroid: 6, normalized-entropy: 0.70700406497476, [(2, 88), (3, 21)]
*** center 7: selecting labels [1] (freq >= 1) [from [126, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20201434061347298] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20201434061347298, 0.16443588008414367] ***
*** starting iteration: 2; err: [Inf, 0.20201434061347298, 0.16443588008414367] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20201434061347298, 0.16443588008414367, 0.16164706847204574] ***
*** starting iteration: 3; err: [Inf, 0.20201434061347298, 0.16443588008414367, 0.16164706847204574] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20201434061347298, 0.16443588008414367, 0.16164706847204574, 0.16036904384305273] ***
*** starting iteration: 4; err: [Inf, 0.20201434061347298, 0.16443588008414367, 0.16164706847204574, 0.16036904384305273] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20201434061347298, 0.16443588008414367, 0.16164706847204574, 0.16036904384305273, 0.15961446461157464] ***
*** finished computation of 7 references, err: [Inf, 0.20201434061347298, 0.16443588008414367, 0.16164706847204574, 0.16036904384305273, 0.15961446461157464] ***
*** center 1: selecting labels [1] (freq >= 1) [from [128, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 39, 3]]
** centroid: 2, normalized-entropy: 0.3712323266408756, [(2, 39), (3, 3)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [35, 76, 0]]
** centroid: 3, normalized-entropy: 0.8992140950457247, [(1, 35), (2, 76)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [11, 78, 0]]
** centroid: 4, normalized-entropy: 0.5396084773004918, [(1, 11), (2, 78)]
*** center 5: selecting labels [1] (freq >= 1) [from [119, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [102, 1, 0]]
** centroid: 6, normalized-entropy: 0.0788560137745528, [(1, 102), (2, 1)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 56, 19]]
** centroid: 7, normalized-entropy: 0.8165187119538281, [(2, 56), (3, 19)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2170928087674718] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2170928087674718, 0.1678833873702333] ***
*** starting iteration: 2; err: [Inf, 0.2170928087674718, 0.1678833873702333] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2170928087674718, 0.1678833873702333, 0.1531584797904588] ***
*** starting iteration: 3; err: [Inf, 0.2170928087674718, 0.1678833873702333, 0.1531584797904588] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2170928087674718, 0.1678833873702333, 0.1531584797904588, 0.1476282089546524] ***
*** starting iteration: 4; err: [Inf, 0.2170928087674718, 0.1678833873702333, 0.1531584797904588, 0.1476282089546524] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2170928087674718, 0.1678833873702333, 0.1531584797904588, 0.1476282089546524, 0.14587725757452277] ***
*** starting iteration: 5; err: [Inf, 0.2170928087674718, 0.1678833873702333, 0.1531584797904588, 0.1476282089546524, 0.14587725757452277] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2170928087674718, 0.1678833873702333, 0.1531584797904588, 0.1476282089546524, 0.14587725757452277, 0.1450637844464472] ***
*** finished computation of 7 references, err: [Inf, 0.2170928087674718, 0.1678833873702333, 0.1531584797904588, 0.1476282089546524, 0.14587725757452277, 0.1450637844464472] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [84, 14, 0]]
** centroid: 1, normalized-entropy: 0.5916727785823274, [(1, 84), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [90, 17, 0]]
** centroid: 2, normalized-entropy: 0.6316198184485629, [(1, 90), (2, 17)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 85, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 93, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 32, 13]]
** centroid: 6, normalized-entropy: 0.8672816222000259, [(2, 32), (3, 13)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [121, 12, 0]]
** centroid: 7, normalized-entropy: 0.4372222722013413, [(1, 121), (2, 12)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.35306669940176355] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35306669940176355, 0.23774335261535] ***
*** starting iteration: 2; err: [Inf, 0.35306669940176355, 0.23774335261535] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35306669940176355, 0.23774335261535, 0.2362038914670793] ***
*** starting iteration: 3; err: [Inf, 0.35306669940176355, 0.23774335261535, 0.2362038914670793] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.35306669940176355, 0.23774335261535, 0.2362038914670793, 0.23574599337011753] ***
*** finished computation of 3 references, err: [Inf, 0.35306669940176355, 0.23774335261535, 0.2362038914670793, 0.23574599337011753] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [82, 149, 21]]
** centroid: 1, normalized-entropy: 0.8038358044623455, [(1, 82), (2, 149), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [104, 98, 0]]
** centroid: 2, normalized-entropy: 0.999363485672765, [(1, 104), (2, 98)]
*** center 3: selecting labels [1] (freq >= 2) [from [212, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3410606541219859] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3410606541219859, 0.24072702334302923] ***
*** starting iteration: 2; err: [Inf, 0.3410606541219859, 0.24072702334302923] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3410606541219859, 0.24072702334302923, 0.23925175791469472] ***
*** starting iteration: 3; err: [Inf, 0.3410606541219859, 0.24072702334302923, 0.23925175791469472] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3410606541219859, 0.24072702334302923, 0.23925175791469472, 0.23913487499912103] ***
*** finished computation of 3 references, err: [Inf, 0.3410606541219859, 0.24072702334302923, 0.23925175791469472, 0.23913487499912103] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [246, 37, 0]]
** centroid: 1, normalized-entropy: 0.5594697522250832, [(1, 246), (2, 37)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [149, 41, 0]]
** centroid: 2, normalized-entropy: 0.7524043360246135, [(1, 149), (2, 41)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 172, 22]]
** centroid: 3, normalized-entropy: 0.5100930822965021, [(2, 172), (3, 22)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.334324671650889] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.334324671650889, 0.22626151943040348] ***
*** starting iteration: 2; err: [Inf, 0.334324671650889, 0.22626151943040348] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.334324671650889, 0.22626151943040348, 0.2237699206156106] ***
*** starting iteration: 3; err: [Inf, 0.334324671650889, 0.22626151943040348, 0.2237699206156106] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.334324671650889, 0.22626151943040348, 0.2237699206156106, 0.22317733569978282] ***
*** finished computation of 3 references, err: [Inf, 0.334324671650889, 0.22626151943040348, 0.2237699206156106, 0.22317733569978282] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [77, 144, 13]]
** centroid: 1, normalized-entropy: 0.7510433133376947, [(1, 77), (2, 144), (3, 13)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [113, 109, 0]]
** centroid: 2, normalized-entropy: 0.9997658025951457, [(1, 113), (2, 109)]
*** center 3: selecting labels [1] (freq >= 2) [from [211, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.1823318775116771] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1823318775116771, 0.16009600595403295] ***
*** finished computation of 7 references, err: [Inf, 0.1823318775116771, 0.16009600595403295] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [80, 49, 0]]
** centroid: 1, normalized-entropy: 0.9579324495888805, [(1, 80), (2, 49)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 77, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [93, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 46, 21]]
** centroid: 4, normalized-entropy: 0.8970964164730478, [(2, 46), (3, 21)]
*** center 5: selecting labels [1] (freq >= 2) [from [76, 1, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [131, 13, 0]]
** centroid: 6, normalized-entropy: 0.4373963241003668, [(1, 131), (2, 13)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [18, 61, 0]]
** centroid: 7, normalized-entropy: 0.7742411580847273, [(1, 18), (2, 61)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2051458297425817] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2051458297425817, 0.16556408695214758] ***
*** finished computation of 7 references, err: [Inf, 0.2051458297425817, 0.16556408695214758] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [43, 4, 0]]
** centroid: 1, normalized-entropy: 0.4199210973757179, [(1, 43), (2, 4)]
*** center 2: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [26, 44, 0]]
** centroid: 3, normalized-entropy: 0.9517626756348312, [(1, 26), (2, 44)]
*** center 4: selecting labels [1] (freq >= 2) [from [133, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 79, 19]]
** centroid: 5, normalized-entropy: 0.7095128863456239, [(2, 79), (3, 19)]
*** center 6: selecting labels [1] (freq >= 2) [from [125, 0, 0]]
*** center 7: selecting labels [1, 2, 3] (freq >= 2) [from [8, 123, 3]]
** centroid: 7, normalized-entropy: 0.302148397424316, [(1, 8), (2, 123), (3, 3)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.16468080931840215] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.16468080931840215, 0.14839118007134863] ***
*** finished computation of 7 references, err: [Inf, 0.16468080931840215, 0.14839118007134863] ***
*** center 1: selecting labels [1] (freq >= 2) [from [112, 1, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [69, 23, 0]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(1, 69), (2, 23)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 66, 13]]
** centroid: 3, normalized-entropy: 0.6451006442088483, [(2, 66), (3, 13)]
*** center 4: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [27, 53, 0]]
** centroid: 5, normalized-entropy: 0.9224062617590724, [(1, 27), (2, 53)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 82, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [102, 28, 0]]
** centroid: 7, normalized-entropy: 0.7516499461153354, [(1, 102), (2, 28)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2562448752557372] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2562448752557372, 0.20112615688522165] ***
*** starting iteration: 2; err: [Inf, 0.2562448752557372, 0.20112615688522165] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2562448752557372, 0.20112615688522165, 0.19291619079462993] ***
*** starting iteration: 3; err: [Inf, 0.2562448752557372, 0.20112615688522165, 0.19291619079462993] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2562448752557372, 0.20112615688522165, 0.19291619079462993, 0.19268583931104355] ***
*** finished computation of 7 references, err: [Inf, 0.2562448752557372, 0.20112615688522165, 0.19291619079462993, 0.19268583931104355] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [104, 1, 0]]
** centroid: 1, normalized-entropy: 0.07761951112637416, [(1, 104), (2, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [9, 82, 0]]
** centroid: 3, normalized-entropy: 0.4655024490815131, [(1, 9), (2, 82)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [57, 67, 0]]
** centroid: 4, normalized-entropy: 0.9953035154831571, [(1, 57), (2, 67)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 62, 21]]
** centroid: 5, normalized-entropy: 0.8160172973428256, [(2, 62), (3, 21)]
*** center 6: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [62, 35, 0]]
** centroid: 7, normalized-entropy: 0.94336565829991, [(1, 62), (2, 35)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.24957549861859882] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24957549861859882, 0.2045801001931841] ***
*** starting iteration: 2; err: [Inf, 0.24957549861859882, 0.2045801001931841] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24957549861859882, 0.2045801001931841, 0.19596123118428277] ***
*** starting iteration: 3; err: [Inf, 0.24957549861859882, 0.2045801001931841, 0.19596123118428277] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24957549861859882, 0.2045801001931841, 0.19596123118428277, 0.19267071068836333] ***
*** starting iteration: 4; err: [Inf, 0.24957549861859882, 0.2045801001931841, 0.19596123118428277, 0.19267071068836333] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24957549861859882, 0.2045801001931841, 0.19596123118428277, 0.19267071068836333, 0.19145757275196476] ***
*** starting iteration: 5; err: [Inf, 0.24957549861859882, 0.2045801001931841, 0.19596123118428277, 0.19267071068836333, 0.19145757275196476] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24957549861859882, 0.2045801001931841, 0.19596123118428277, 0.19267071068836333, 0.19145757275196476, 0.19013845777583085] ***
*** starting iteration: 6; err: [Inf, 0.24957549861859882, 0.2045801001931841, 0.19596123118428277, 0.19267071068836333, 0.19145757275196476, 0.19013845777583085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24957549861859882, 0.2045801001931841, 0.19596123118428277, 0.19267071068836333, 0.19145757275196476, 0.19013845777583085, 0.1890180341918943] ***
*** starting iteration: 7; err: [Inf, 0.24957549861859882, 0.2045801001931841, 0.19596123118428277, 0.19267071068836333, 0.19145757275196476, 0.19013845777583085, 0.1890180341918943] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24957549861859882, 0.2045801001931841, 0.19596123118428277, 0.19267071068836333, 0.19145757275196476, 0.19013845777583085, 0.1890180341918943, 0.18873913778128965] ***
*** finished computation of 7 references, err: [Inf, 0.24957549861859882, 0.2045801001931841, 0.19596123118428277, 0.19267071068836333, 0.19145757275196476, 0.19013845777583085, 0.1890180341918943, 0.18873913778128965] ***
*** center 1: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [9, 89, 0]]
** centroid: 3, normalized-entropy: 0.442571064839798, [(1, 9), (2, 89)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [98, 2, 0]]
** centroid: 4, normalized-entropy: 0.14144054254182067, [(1, 98), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [59, 25, 0]]
** centroid: 5, normalized-entropy: 0.8783609387702275, [(1, 59), (2, 25)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [54, 56, 0]]
** centroid: 6, normalized-entropy: 0.9997615248696311, [(1, 54), (2, 56)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 78, 22]]
** centroid: 7, normalized-entropy: 0.7601675029619658, [(2, 78), (3, 22)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22220508941355674] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22220508941355674, 0.19117708916523155] ***
*** starting iteration: 2; err: [Inf, 0.22220508941355674, 0.19117708916523155] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22220508941355674, 0.19117708916523155, 0.1891723109389665] ***
*** starting iteration: 3; err: [Inf, 0.22220508941355674, 0.19117708916523155, 0.1891723109389665] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22220508941355674, 0.19117708916523155, 0.1891723109389665, 0.18827414547262164] ***
*** finished computation of 7 references, err: [Inf, 0.22220508941355674, 0.19117708916523155, 0.1891723109389665, 0.18827414547262164] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [87, 39, 0]]
** centroid: 1, normalized-entropy: 0.8926230133850988, [(1, 87), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [38, 63, 0]]
** centroid: 2, normalized-entropy: 0.9553413768968346, [(1, 38), (2, 63)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 65, 13]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(2, 65), (3, 13)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [11, 84, 0]]
** centroid: 4, normalized-entropy: 0.5171354891896202, [(1, 11), (2, 84)]
*** center 5: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [84, 2, 0]]
** centroid: 7, normalized-entropy: 0.15935006268563429, [(1, 84), (2, 2)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3135016810067848] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3135016810067848, 0.27493621423063025] ***
*** finished computation of 3 references, err: [Inf, 0.3135016810067848, 0.27493621423063025] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [6, 145, 21]]
** centroid: 1, normalized-entropy: 0.4712982124896402, [(1, 6), (2, 145), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [187, 102, 0]]
** centroid: 2, normalized-entropy: 0.9366673818775627, [(1, 187), (2, 102)]
*** center 3: selecting labels [1] (freq >= 1) [from [205, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4733260679763855] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4733260679763855, 0.25139389392910066] ***
*** finished computation of 3 references, err: [Inf, 0.4733260679763855, 0.25139389392910066] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [142, 115, 0]]
** centroid: 1, normalized-entropy: 0.992023588772602, [(1, 142), (2, 115)]
*** center 2: selecting labels [1] (freq >= 1) [from [194, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [59, 135, 22]]
** centroid: 3, normalized-entropy: 0.8018128692090789, [(1, 59), (2, 135), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.28085354240324956] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28085354240324956, 0.2257793810528548] ***
*** finished computation of 3 references, err: [Inf, 0.28085354240324956, 0.2257793810528548] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [98, 140, 11]]
** centroid: 1, normalized-entropy: 0.7541904863684245, [(1, 98), (2, 140), (3, 11)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [222, 1, 0]]
** centroid: 2, normalized-entropy: 0.04143657108746376, [(1, 222), (2, 1)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [81, 112, 2]]
** centroid: 3, normalized-entropy: 0.6648310965331038, [(1, 81), (2, 112), (3, 2)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.32633093391564694] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32633093391564694, 0.24989517429401656] ***
*** starting iteration: 2; err: [Inf, 0.32633093391564694, 0.24989517429401656] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32633093391564694, 0.24989517429401656, 0.24535835995800323] ***
*** starting iteration: 3; err: [Inf, 0.32633093391564694, 0.24989517429401656, 0.24535835995800323] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32633093391564694, 0.24989517429401656, 0.24535835995800323, 0.24482793444851497] ***
*** finished computation of 3 references, err: [Inf, 0.32633093391564694, 0.24989517429401656, 0.24535835995800323, 0.24482793444851497] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [248, 22, 0]]
** centroid: 1, normalized-entropy: 0.40737789117688417, [(1, 248), (2, 22)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 171, 21]]
** centroid: 2, normalized-entropy: 0.49802788653447644, [(2, 171), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [150, 54, 0]]
** centroid: 3, normalized-entropy: 0.8337649072106652, [(1, 150), (2, 54)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3104274049708466] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3104274049708466, 0.2505521276886149] ***
*** starting iteration: 2; err: [Inf, 0.3104274049708466, 0.2505521276886149] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3104274049708466, 0.2505521276886149, 0.24092953318501006] ***
*** starting iteration: 3; err: [Inf, 0.3104274049708466, 0.2505521276886149, 0.24092953318501006] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3104274049708466, 0.2505521276886149, 0.24092953318501006, 0.23940018359627546] ***
*** finished computation of 3 references, err: [Inf, 0.3104274049708466, 0.2505521276886149, 0.24092953318501006, 0.23940018359627546] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [255, 30, 0]]
** centroid: 1, normalized-entropy: 0.48546076074591343, [(1, 255), (2, 30)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 178, 22]]
** centroid: 2, normalized-entropy: 0.49991595816452816, [(2, 178), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [140, 42, 0]]
** centroid: 3, normalized-entropy: 0.7793498372920851, [(1, 140), (2, 42)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3115637625694677] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3115637625694677, 0.24976559714840046] ***
*** starting iteration: 2; err: [Inf, 0.3115637625694677, 0.24976559714840046] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3115637625694677, 0.24976559714840046, 0.2309587933109149] ***
*** starting iteration: 3; err: [Inf, 0.3115637625694677, 0.24976559714840046, 0.2309587933109149] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3115637625694677, 0.24976559714840046, 0.2309587933109149, 0.22524746040069404] ***
*** finished computation of 3 references, err: [Inf, 0.3115637625694677, 0.24976559714840046, 0.2309587933109149, 0.22524746040069404] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [101, 151, 13]]
** centroid: 1, normalized-entropy: 0.7609862175528933, [(1, 101), (2, 151), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [182, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [118, 102, 0]]
** centroid: 3, normalized-entropy: 0.9961812375892514, [(1, 118), (2, 102)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23333827468955345] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23333827468955345, 0.1762241814670072] ***
*** finished computation of 7 references, err: [Inf, 0.23333827468955345, 0.1762241814670072] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [40, 14, 0]]
** centroid: 1, normalized-entropy: 0.8256265261578954, [(1, 40), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [66, 24, 0]]
** centroid: 2, normalized-entropy: 0.8366407419411671, [(1, 66), (2, 24)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [115, 17, 0]]
** centroid: 3, normalized-entropy: 0.5541045423898253, [(1, 115), (2, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [120, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [30, 97, 1]]
** centroid: 5, normalized-entropy: 0.7886983595248671, [(1, 30), (2, 97)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 95, 20]]
** centroid: 6, normalized-entropy: 0.6665783579949205, [(2, 95), (3, 20)]
*** center 7: selecting labels [1] (freq >= 2) [from [27, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.26406906225831656] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26406906225831656, 0.169159725541598] ***
*** finished computation of 7 references, err: [Inf, 0.26406906225831656, 0.169159725541598] ***
*** center 1: selecting labels [1] (freq >= 2) [from [174, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [110, 53, 0]]
** centroid: 2, normalized-entropy: 0.9098977703073838, [(1, 110), (2, 53)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [18, 36, 0]]
** centroid: 3, normalized-entropy: 0.9182958340544894, [(1, 18), (2, 36)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [20, 76, 0]]
** centroid: 4, normalized-entropy: 0.7382848661434506, [(1, 20), (2, 76)]
*** center 5: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [19, 1, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 84, 22]]
** centroid: 7, normalized-entropy: 0.7367680100024784, [(2, 84), (3, 22)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19148363955207226] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19148363955207226, 0.15949979886856638] ***
*** finished computation of 7 references, err: [Inf, 0.19148363955207226, 0.15949979886856638] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [116, 4, 0]]
** centroid: 1, normalized-entropy: 0.2108423003185322, [(1, 116), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [44, 113, 0]]
** centroid: 2, normalized-entropy: 0.8557977299555932, [(1, 44), (2, 113)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [38, 10, 0]]
** centroid: 3, normalized-entropy: 0.7382848661434506, [(1, 38), (2, 10)]
*** center 4: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [14, 49, 0]]
** centroid: 5, normalized-entropy: 0.7642045065086204, [(1, 14), (2, 49)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 77, 13]]
** centroid: 6, normalized-entropy: 0.5957610966703235, [(2, 77), (3, 13)]
*** center 7: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19542277150146953] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19542277150146953, 0.1545923254277848] ***
*** starting iteration: 2; err: [Inf, 0.19542277150146953, 0.1545923254277848] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19542277150146953, 0.1545923254277848, 0.1517669371365606] ***
*** starting iteration: 3; err: [Inf, 0.19542277150146953, 0.1545923254277848, 0.1517669371365606] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19542277150146953, 0.1545923254277848, 0.1517669371365606, 0.15137874038803303] ***
*** finished computation of 7 references, err: [Inf, 0.19542277150146953, 0.1545923254277848, 0.1517669371365606, 0.15137874038803303] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [122, 5, 0]]
** centroid: 1, normalized-entropy: 0.2393965319917804, [(1, 122), (2, 5)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 46, 21]]
** centroid: 2, normalized-entropy: 0.8970964164730478, [(2, 46), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [99, 5, 0]]
** centroid: 3, normalized-entropy: 0.2781710079264946, [(1, 99), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [69, 3, 0]]
** centroid: 4, normalized-entropy: 0.24988229283318547, [(1, 69), (2, 3)]
*** center 5: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [7, 88, 0]]
** centroid: 6, normalized-entropy: 0.3795243778626806, [(1, 7), (2, 88)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [4, 100, 0]]
** centroid: 7, normalized-entropy: 0.23519338181924157, [(1, 4), (2, 100)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20157303521479444] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20157303521479444, 0.1567949389667436] ***
*** starting iteration: 2; err: [Inf, 0.20157303521479444, 0.1567949389667436] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20157303521479444, 0.1567949389667436, 0.15069427834041807] ***
*** starting iteration: 3; err: [Inf, 0.20157303521479444, 0.1567949389667436, 0.15069427834041807] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20157303521479444, 0.1567949389667436, 0.15069427834041807, 0.1491920392250997] ***
*** finished computation of 7 references, err: [Inf, 0.20157303521479444, 0.1567949389667436, 0.15069427834041807, 0.1491920392250997] ***
*** center 1: selecting labels [1] (freq >= 1) [from [105, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [92, 3, 0]]
** centroid: 2, normalized-entropy: 0.2022494245476988, [(1, 92), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 54, 22]]
** centroid: 3, normalized-entropy: 0.8680403986166402, [(2, 54), (3, 22)]
*** center 4: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [74, 29, 0]]
** centroid: 5, normalized-entropy: 0.857558799850773, [(1, 74), (2, 29)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [16, 85, 0]]
** centroid: 6, normalized-entropy: 0.6305062394675903, [(1, 16), (2, 85)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 79, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18615384147023556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18615384147023556, 0.1473864059025391] ***
*** starting iteration: 2; err: [Inf, 0.18615384147023556, 0.1473864059025391] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18615384147023556, 0.1473864059025391, 0.1437979806019091] ***
*** starting iteration: 3; err: [Inf, 0.18615384147023556, 0.1473864059025391, 0.1437979806019091] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18615384147023556, 0.1473864059025391, 0.1437979806019091, 0.14271412152556823] ***
*** finished computation of 7 references, err: [Inf, 0.18615384147023556, 0.1473864059025391, 0.1437979806019091, 0.14271412152556823] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 87, 13]]
** centroid: 1, normalized-entropy: 0.557438185027989, [(2, 87), (3, 13)]
*** center 2: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [84, 12, 0]]
** centroid: 3, normalized-entropy: 0.5435644431995963, [(1, 84), (2, 12)]
*** center 4: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [94, 19, 0]]
** centroid: 5, normalized-entropy: 0.6534358224760193, [(1, 94), (2, 19)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 90, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [52, 45, 0]]
** centroid: 7, normalized-entropy: 0.9962401135461777, [(1, 52), (2, 45)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.40476803675394607] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40476803675394607, 0.32129524807884796] ***
*** finished computation of 3 references, err: [Inf, 0.40476803675394607, 0.32129524807884796] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 161, 21]]
** centroid: 1, normalized-entropy: 0.5159469300074472, [(2, 161), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [115, 39, 0]]
** centroid: 2, normalized-entropy: 0.8163836680050908, [(1, 115), (2, 39)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [283, 47, 0]]
** centroid: 3, normalized-entropy: 0.5905526422752957, [(1, 283), (2, 47)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5874177822731491] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5874177822731491, 0.35590439788980416] ***
*** finished computation of 3 references, err: [Inf, 0.5874177822731491, 0.35590439788980416] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [148, 27, 0]]
** centroid: 1, normalized-entropy: 0.6204621937094819, [(1, 148), (2, 27)]
*** center 2: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [156, 223, 22]]
** centroid: 3, normalized-entropy: 0.77631093107105, [(1, 156), (2, 223), (3, 22)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4367120414050757] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4367120414050757, 0.29424073931382694] ***
*** finished computation of 3 references, err: [Inf, 0.4367120414050757, 0.29424073931382694] ***
*** center 1: selecting labels [1] (freq >= 1) [from [222, 0, 0]]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [73, 183, 13]]
** centroid: 2, normalized-entropy: 0.6939931666743683, [(1, 73), (2, 183), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [106, 70, 0]]
** centroid: 3, normalized-entropy: 0.9696055994904408, [(1, 106), (2, 70)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39410056478648753] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39410056478648753, 0.3310366011261045] ***
*** starting iteration: 2; err: [Inf, 0.39410056478648753, 0.3310366011261045] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39410056478648753, 0.3310366011261045, 0.31446573994046934] ***
*** starting iteration: 3; err: [Inf, 0.39410056478648753, 0.3310366011261045, 0.31446573994046934] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39410056478648753, 0.3310366011261045, 0.31446573994046934, 0.31015479864200224] ***
*** starting iteration: 4; err: [Inf, 0.39410056478648753, 0.3310366011261045, 0.31446573994046934, 0.31015479864200224] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39410056478648753, 0.3310366011261045, 0.31446573994046934, 0.31015479864200224, 0.3096064984848773] ***
*** finished computation of 3 references, err: [Inf, 0.39410056478648753, 0.3310366011261045, 0.31446573994046934, 0.31015479864200224, 0.3096064984848773] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [251, 13, 0]]
** centroid: 1, normalized-entropy: 0.2831700724740671, [(1, 251), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [146, 73, 0]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(1, 146), (2, 73)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [1, 161, 21]]
** centroid: 3, normalized-entropy: 0.5159469300074472, [(2, 161), (3, 21)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3537988264806222] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3537988264806222, 0.3185588299314948] ***
*** starting iteration: 2; err: [Inf, 0.3537988264806222, 0.3185588299314948] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3537988264806222, 0.3185588299314948, 0.30158176572471185] ***
*** starting iteration: 3; err: [Inf, 0.3537988264806222, 0.3185588299314948, 0.30158176572471185] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3537988264806222, 0.3185588299314948, 0.30158176572471185, 0.2972902945051531] ***
*** starting iteration: 4; err: [Inf, 0.3537988264806222, 0.3185588299314948, 0.30158176572471185, 0.2972902945051531] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3537988264806222, 0.3185588299314948, 0.30158176572471185, 0.2972902945051531, 0.29536921329687404] ***
*** starting iteration: 5; err: [Inf, 0.3537988264806222, 0.3185588299314948, 0.30158176572471185, 0.2972902945051531, 0.29536921329687404] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3537988264806222, 0.3185588299314948, 0.30158176572471185, 0.2972902945051531, 0.29536921329687404, 0.29500814123048463] ***
*** finished computation of 3 references, err: [Inf, 0.3537988264806222, 0.3185588299314948, 0.30158176572471185, 0.2972902945051531, 0.29536921329687404, 0.29500814123048463] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [99, 117, 0]]
** centroid: 1, normalized-entropy: 0.9949848281859699, [(1, 99), (2, 117)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [79, 133, 22]]
** centroid: 2, normalized-entropy: 0.8283153335817096, [(1, 79), (2, 133), (3, 22)]
*** center 3: selecting labels [1] (freq >= 2) [from [217, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3935515273703092] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3935515273703092, 0.29175195197059567] ***
*** starting iteration: 2; err: [Inf, 0.3935515273703092, 0.29175195197059567] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3935515273703092, 0.29175195197059567, 0.28274373754557375] ***
*** starting iteration: 3; err: [Inf, 0.3935515273703092, 0.29175195197059567, 0.28274373754557375] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3935515273703092, 0.29175195197059567, 0.28274373754557375, 0.28156253016334604] ***
*** starting iteration: 4; err: [Inf, 0.3935515273703092, 0.29175195197059567, 0.28274373754557375, 0.28156253016334604] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3935515273703092, 0.29175195197059567, 0.28274373754557375, 0.28156253016334604, 0.2812546948054763] ***
*** finished computation of 3 references, err: [Inf, 0.3935515273703092, 0.29175195197059567, 0.28274373754557375, 0.28156253016334604, 0.2812546948054763] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [113, 110, 0]]
** centroid: 1, normalized-entropy: 0.9998694459264538, [(1, 113), (2, 110)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [80, 143, 13]]
** centroid: 2, normalized-entropy: 0.7554640439808489, [(1, 80), (2, 143), (3, 13)]
*** center 3: selecting labels [1] (freq >= 2) [from [208, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.19906726829055976] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19906726829055976, 0.15516152559966967] ***
*** finished computation of 7 references, err: [Inf, 0.19906726829055976, 0.15516152559966967] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 74, 21]]
** centroid: 1, normalized-entropy: 0.762084924805724, [(2, 74), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [70, 38, 0]]
** centroid: 4, normalized-entropy: 0.9357110512652843, [(1, 70), (2, 38)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [95, 38, 0]]
** centroid: 5, normalized-entropy: 0.8631205685666311, [(1, 95), (2, 38)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [4, 97, 0]]
** centroid: 6, normalized-entropy: 0.24047340659188013, [(1, 4), (2, 97)]
*** center 7: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 13)
[0.9469919020817223, 0.9169888451325576, 0.9149718580856305, 0.9149688610766455, 0.9109678540816265, 0.9079888271505038, 0.902998807190424, 0.9019858181534829, 0.876975778173383, 0.8730377083670496, 0.8549837262412113, 0.8430166693639748, 0.7859925794057531]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 1) => 0.9469919020817223
finished with 14
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.22525133305079845] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22525133305079845, 0.19086128522605653] ***
*** starting iteration: 2; err: [Inf, 0.22525133305079845, 0.19086128522605653] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22525133305079845, 0.19086128522605653, 0.18824900363221475] ***
*** starting iteration: 3; err: [Inf, 0.22525133305079845, 0.19086128522605653, 0.18824900363221475] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22525133305079845, 0.19086128522605653, 0.18824900363221475, 0.18827964676993675] ***
*** finished computation of 7 references, err: [Inf, 0.22525133305079845, 0.19086128522605653, 0.18824900363221475, 0.18827964676993675] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [62, 74, 0]]
** centroid: 1, normalized-entropy: 0.9943766625699823, [(1, 62), (2, 74)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [72, 15, 0]]
** centroid: 2, normalized-entropy: 0.6631968402398286, [(1, 72), (2, 15)]
*** center 3: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 50, 22]]
** centroid: 4, normalized-entropy: 0.887976319515135, [(2, 50), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [104, 7, 0]]
** centroid: 5, normalized-entropy: 0.33948600021427877, [(1, 104), (2, 7)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 104, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23869863365267827] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23869863365267827, 0.19838139046173733] ***
*** starting iteration: 2; err: [Inf, 0.23869863365267827, 0.19838139046173733] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23869863365267827, 0.19838139046173733, 0.19494424566316107] ***
*** starting iteration: 3; err: [Inf, 0.23869863365267827, 0.19838139046173733, 0.19494424566316107] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23869863365267827, 0.19838139046173733, 0.19494424566316107, 0.19301075044202734] ***
*** finished computation of 7 references, err: [Inf, 0.23869863365267827, 0.19838139046173733, 0.19494424566316107, 0.19301075044202734] ***
*** center 1: selecting labels [1] (freq >= 1) [from [129, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 55, 21]]
** centroid: 2, normalized-entropy: 0.8503821170987139, [(2, 55), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [70, 23, 0]]
** centroid: 3, normalized-entropy: 0.8069896049203007, [(1, 70), (2, 23)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [52, 7, 0]]
** centroid: 4, normalized-entropy: 0.5254506799086205, [(1, 52), (2, 7)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [45, 69, 0]]
** centroid: 5, normalized-entropy: 0.9677884628267678, [(1, 45), (2, 69)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 91, 0]]
** centroid: 6, normalized-entropy: 0.08650421412134586, [(1, 1), (2, 91)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [101, 2, 0]]
** centroid: 7, normalized-entropy: 0.13815722856252646, [(1, 101), (2, 2)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23599252846640725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23599252846640725, 0.1884760840599058] ***
*** starting iteration: 2; err: [Inf, 0.23599252846640725, 0.1884760840599058] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23599252846640725, 0.1884760840599058, 0.18248453027410977] ***
*** starting iteration: 3; err: [Inf, 0.23599252846640725, 0.1884760840599058, 0.18248453027410977] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23599252846640725, 0.1884760840599058, 0.18248453027410977, 0.18192761037023975] ***
*** finished computation of 7 references, err: [Inf, 0.23599252846640725, 0.1884760840599058, 0.18248453027410977, 0.18192761037023975] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [70, 39, 0]]
** centroid: 1, normalized-entropy: 0.9408403089808224, [(1, 70), (2, 39)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [79, 27, 0]]
** centroid: 2, normalized-entropy: 0.8186691181065503, [(1, 79), (2, 27)]
*** center 3: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 72, 13]]
** centroid: 4, normalized-entropy: 0.617151919200282, [(2, 72), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [65, 42, 0]]
** centroid: 5, normalized-entropy: 0.9664086723492078, [(1, 65), (2, 42)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 73, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 14)
[0.9469919020817223, 0.9169888451325576, 0.9149718580856305, 0.9149688610766455, 0.9109678540816265, 0.9079888271505038, 0.902998807190424, 0.9019858181534829, 0.8949878021734309, 0.876975778173383, 0.8730377083670496, 0.8549837262412113, 0.8430166693639748, 0.7859925794057531]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 1) => 0.9469919020817223
finished with 15
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.42222887596014785] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.42222887596014785, 0.32185476041726163] ***
*** finished computation of 3 references, err: [Inf, 0.42222887596014785, 0.32185476041726163] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [291, 22, 0]]
** centroid: 1, normalized-entropy: 0.3669957785737328, [(1, 291), (2, 22)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [51, 125, 5]]
** centroid: 2, normalized-entropy: 0.6478210225872646, [(1, 51), (2, 125), (3, 5)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [56, 100, 16]]
** centroid: 3, normalized-entropy: 0.8206490216435323, [(1, 56), (2, 100), (3, 16)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3385697118658712] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3385697118658712, 0.3065519401136188] ***
*** finished computation of 3 references, err: [Inf, 0.3385697118658712, 0.3065519401136188] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [107, 170, 22]]
** centroid: 1, normalized-entropy: 0.8017145845537489, [(1, 107), (2, 170), (3, 22)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [87, 80, 0]]
** centroid: 2, normalized-entropy: 0.9987322461876549, [(1, 87), (2, 80)]
*** center 3: selecting labels [1] (freq >= 1) [from [201, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.6324835800044964] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.6324835800044964, 0.343308979741017] ***
*** finished computation of 3 references, err: [Inf, 0.6324835800044964, 0.343308979741017] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [97, 18, 0]]
** centroid: 1, normalized-entropy: 0.6259231316564361, [(1, 97), (2, 18)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 129, 13]]
** centroid: 2, normalized-entropy: 0.44162013157909064, [(2, 129), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [304, 106, 0]]
** centroid: 3, normalized-entropy: 0.8245300207967897, [(1, 304), (2, 106)]
finished with 5 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 15)
[0.9469919020817223, 0.9169888451325576, 0.9149718580856305, 0.9149688610766455, 0.9109678540816265, 0.9079888271505038, 0.902998807190424, 0.9019858181534829, 0.8949878021734309, 0.876975778173383, 0.8730377083670496, 0.861963760167353, 0.8549837262412113, 0.8430166693639748, 0.7859925794057531]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 1) => 0.9469919020817223
finished with 15
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9469919020817223, 0.9169888451325576, 0.9149718580856305, 0.9149688610766455, 0.9109678540816265, 0.9079888271505038, 0.902998807190424, 0.9019858181534829, 0.8949878021734309, 0.876975778173383, 0.8730377083670496, 0.861963760167353, 0.8549837262412113, 0.8430166693639748, 0.7859925794057531]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 1) => 0.9469919020817223
finished with 15
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9469919020817223, 0.9169888451325576, 0.9149718580856305, 0.9149688610766455, 0.9109678540816265, 0.9079888271505038, 0.902998807190424, 0.9019858181534829, 0.8949878021734309, 0.876975778173383, 0.8730377083670496, 0.861963760167353, 0.8549837262412113, 0.8430166693639748, 0.7859925794057531]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 1) => 0.9469919020817223
finished with 17
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.1958874538261583] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1958874538261583, 0.15444396745072847] ***
*** finished computation of 7 references, err: [Inf, 0.1958874538261583, 0.15444396745072847] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [26, 103, 0]]
** centroid: 1, normalized-entropy: 0.7250180540934875, [(1, 26), (2, 103)]
*** center 2: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [62, 1, 0]]
** centroid: 3, normalized-entropy: 0.11759466565886466, [(1, 62), (2, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 46, 22]]
** centroid: 4, normalized-entropy: 0.9081783472997053, [(2, 46), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [85, 2, 0]]
** centroid: 5, normalized-entropy: 0.15790637433488164, [(1, 85), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [140, 6, 0]]
** centroid: 6, normalized-entropy: 0.24729443986205674, [(1, 140), (2, 6)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [5, 92, 0]]
** centroid: 7, normalized-entropy: 0.29292995113885967, [(1, 5), (2, 92)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2018060725519305] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2018060725519305, 0.1583922409072138] ***
*** finished computation of 7 references, err: [Inf, 0.2018060725519305, 0.1583922409072138] ***
*** center 1: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 58, 21]]
** centroid: 2, normalized-entropy: 0.8354065254460503, [(2, 58), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [59, 21, 0]]
** centroid: 3, normalized-entropy: 0.8304955225035798, [(1, 59), (2, 21)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [66, 67, 0]]
** centroid: 4, normalized-entropy: 0.9999592201754102, [(1, 66), (2, 67)]
*** center 5: selecting labels [1] (freq >= 1) [from [94, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [34, 101, 0]]
** centroid: 6, normalized-entropy: 0.8142000684549584, [(1, 34), (2, 101)]
*** center 7: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.1932164653989094] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1932164653989094, 0.15117762190034276] ***
*** finished computation of 7 references, err: [Inf, 0.1932164653989094, 0.15117762190034276] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 107, 2]]
** centroid: 1, normalized-entropy: 0.13206535647488304, [(2, 107), (3, 2)]
*** center 2: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [56, 24, 0]]
** centroid: 3, normalized-entropy: 0.8812908992306927, [(1, 56), (2, 24)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [115, 2, 0]]
** centroid: 4, normalized-entropy: 0.1247975754927792, [(1, 115), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [91, 32, 0]]
** centroid: 5, normalized-entropy: 0.8269916414523998, [(1, 91), (2, 32)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 88, 11]]
** centroid: 6, normalized-entropy: 0.5032583347756457, [(2, 88), (3, 11)]
*** center 7: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2309649775473138] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2309649775473138, 0.19492371602287353] ***
*** finished computation of 7 references, err: [Inf, 0.2309649775473138, 0.19492371602287353] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [96, 21, 0]]
** centroid: 1, normalized-entropy: 0.6789538995185759, [(1, 96), (2, 21)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [58, 10, 0]]
** centroid: 2, normalized-entropy: 0.6024308020404452, [(1, 58), (2, 10)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 94, 21]]
** centroid: 3, normalized-entropy: 0.685750764543924, [(2, 94), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [31, 91, 0]]
** centroid: 5, normalized-entropy: 0.8177094860868659, [(1, 31), (2, 91)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [47, 31, 0]]
** centroid: 6, normalized-entropy: 0.9694309156463241, [(1, 47), (2, 31)]
*** center 7: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2611313716130055] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2611313716130055, 0.19285440777960433] ***
*** finished computation of 7 references, err: [Inf, 0.2611313716130055, 0.19285440777960433] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 87, 22]]
** centroid: 1, normalized-entropy: 0.725582675704817, [(2, 87), (3, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [51, 38, 0]]
** centroid: 4, normalized-entropy: 0.9845543528607513, [(1, 51), (2, 38)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [82, 41, 0]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(1, 82), (2, 41)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 84, 0]]
** centroid: 6, normalized-entropy: 0.15935006268563429, [(1, 2), (2, 84)]
*** center 7: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22555471765857632] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22555471765857632, 0.19252734641492858] ***
*** finished computation of 7 references, err: [Inf, 0.22555471765857632, 0.19252734641492858] ***
*** center 1: selecting labels [1] (freq >= 1) [from [132, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 51, 13]]
** centroid: 2, normalized-entropy: 0.7281342378690551, [(2, 51), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [89, 2, 0]]
** centroid: 3, normalized-entropy: 0.15240699892386778, [(1, 89), (2, 2)]
*** center 4: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [18, 108, 0]]
** centroid: 6, normalized-entropy: 0.5916727785823274, [(1, 18), (2, 108)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [18, 92, 0]]
** centroid: 7, normalized-entropy: 0.6429383500409613, [(1, 18), (2, 92)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 17)
[0.9469919020817223, 0.9169888451325576, 0.9149718580856305, 0.9149688610766455, 0.912019804235373, 0.9109678540816265, 0.9079888271505038, 0.902998807190424, 0.9019858181534829, 0.897004789220358, 0.8949878021734309, 0.876975778173383, 0.8730377083670496, 0.861963760167353, 0.8549837262412113, 0.8430166693639748, 0.7859925794057531]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 1) => 0.9469919020817223
finished with 17
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.9469919020817223, 0.9169888451325576, 0.9149718580856305, 0.9149688610766455, 0.912019804235373, 0.9109678540816265, 0.9079888271505038, 0.902998807190424, 0.9019858181534829, 0.897004789220358, 0.8949878021734309, 0.876975778173383, 0.8730377083670496, 0.861963760167353, 0.8549837262412113, 0.8430166693639748, 0.7859925794057531]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 1) => 0.9469919020817223
finished with 17
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.9469919020817223, 0.9169888451325576, 0.9149718580856305, 0.9149688610766455, 0.912019804235373, 0.9109678540816265, 0.9079888271505038, 0.902998807190424, 0.9019858181534829, 0.897004789220358, 0.8949878021734309, 0.876975778173383, 0.8730377083670496, 0.861963760167353, 0.8549837262412113, 0.8430166693639748, 0.7859925794057531]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 1, 1.0, :fft, 0.6, 1) => 0.9469919020817223
finished with 17
iteration 9 finished
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.18417522823438048] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18417522823438048, 0.152886126648169] ***
*** finished computation of 7 references, err: [Inf, 0.18417522823438048, 0.152886126648169] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [74, 124, 0]]
** centroid: 1, normalized-entropy: 0.9534985819759996, [(1, 74), (2, 124)]
*** center 2: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 112, 28]]
** centroid: 4, normalized-entropy: 0.7219280948873623, [(2, 112), (3, 28)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [167, 24, 0]]
** centroid: 5, normalized-entropy: 0.545398896829076, [(1, 167), (2, 24)]
*** center 6: selecting labels [1] (freq >= 1) [from [135, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [28, 115, 0]]
** centroid: 7, normalized-entropy: 0.7134566956859694, [(1, 28), (2, 115)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19717538884095848] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19717538884095848, 0.15549455229053274] ***
*** finished computation of 7 references, err: [Inf, 0.19717538884095848, 0.15549455229053274] ***
*** center 1: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 39, 17]]
** centroid: 2, normalized-entropy: 0.8856128713989709, [(2, 39), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [44, 17, 0]]
** centroid: 3, normalized-entropy: 0.8536576732793314, [(1, 44), (2, 17)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [19, 71, 0]]
** centroid: 4, normalized-entropy: 0.7436012269934466, [(1, 19), (2, 71)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [39, 62, 0]]
** centroid: 5, normalized-entropy: 0.9622623958249239, [(1, 39), (2, 62)]
*** center 6: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [37, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20102486217021942] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20102486217021942, 0.15219848759658636] ***
*** finished computation of 7 references, err: [Inf, 0.20102486217021942, 0.15219848759658636] ***
*** center 1: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [61, 3, 0]]
** centroid: 2, normalized-entropy: 0.2729708579140699, [(1, 61), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 31, 13]]
** centroid: 3, normalized-entropy: 0.8756633923230399, [(2, 31), (3, 13)]
*** center 4: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [48, 30, 0]]
** centroid: 5, normalized-entropy: 0.961236604722876, [(1, 48), (2, 30)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [34, 65, 0]]
** centroid: 6, normalized-entropy: 0.9280672822072753, [(1, 34), (2, 65)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 63, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1835138396145776] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1835138396145776, 0.15309182085236533] ***
*** finished computation of 7 references, err: [Inf, 0.1835138396145776, 0.15309182085236533] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [115, 3, 0]]
** centroid: 1, normalized-entropy: 0.17089522427059886, [(1, 115), (2, 3)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 23, 17]]
** centroid: 2, normalized-entropy: 0.9837082626231858, [(2, 23), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [60, 4, 0]]
** centroid: 3, normalized-entropy: 0.3372900666170139, [(1, 60), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [51, 3, 0]]
** centroid: 4, normalized-entropy: 0.3095434291503252, [(1, 51), (2, 3)]
*** center 5: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [6, 83, 0]]
** centroid: 6, normalized-entropy: 0.35620480393132253, [(1, 6), (2, 83)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [6, 78, 0]]
** centroid: 7, normalized-entropy: 0.3712323266408756, [(1, 6), (2, 78)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18761729124095292] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18761729124095292, 0.15220804756879808] ***
*** finished computation of 7 references, err: [Inf, 0.18761729124095292, 0.15220804756879808] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [49, 49, 0]]
** centroid: 1, normalized-entropy: 1.0, [(1, 49), (2, 49)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [50, 2, 0]]
** centroid: 2, normalized-entropy: 0.23519338181924157, [(1, 50), (2, 2)]
*** center 3: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 43, 12]]
** centroid: 4, normalized-entropy: 0.7568336324184036, [(2, 43), (3, 12)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [50, 16, 0]]
** centroid: 5, normalized-entropy: 0.7990485210442682, [(1, 50), (2, 16)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 79, 0]]
** centroid: 6, normalized-entropy: 0.16702680404522793, [(1, 2), (2, 79)]
*** center 7: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19285582148842514] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19285582148842514, 0.1529900852367282] ***
*** finished computation of 7 references, err: [Inf, 0.19285582148842514, 0.1529900852367282] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [106, 2, 0]]
** centroid: 1, normalized-entropy: 0.13303964861069897, [(1, 106), (2, 2)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 32, 14]]
** centroid: 2, normalized-entropy: 0.8865408928220899, [(2, 32), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [68, 3, 0]]
** centroid: 3, normalized-entropy: 0.25253077151613923, [(1, 68), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [49, 1, 0]]
** centroid: 4, normalized-entropy: 0.14144054254182067, [(1, 49), (2, 1)]
*** center 5: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [10, 74, 0]]
** centroid: 6, normalized-entropy: 0.5266170655714281, [(1, 10), (2, 74)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [2, 78, 0]]
** centroid: 7, normalized-entropy: 0.1686609314966701, [(1, 2), (2, 78)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19093876429693774] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19093876429693774, 0.1527621318968013] ***
*** finished computation of 7 references, err: [Inf, 0.19093876429693774, 0.1527621318968013] ***
*** center 1: selecting labels [1] (freq >= 1) [from [114, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 44, 13]]
** centroid: 2, normalized-entropy: 0.7746319868686841, [(2, 44), (3, 13)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [37, 13, 0]]
** centroid: 3, normalized-entropy: 0.8267463724926181, [(1, 37), (2, 13)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [49, 3, 0]]
** centroid: 4, normalized-entropy: 0.3182152976832332, [(1, 49), (2, 3)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [19, 67, 0]]
** centroid: 5, normalized-entropy: 0.7618624463753669, [(1, 19), (2, 67)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [6, 72, 0]]
** centroid: 6, normalized-entropy: 0.3912435636292556, [(1, 6), (2, 72)]
*** center 7: selecting labels [1] (freq >= 1) [from [63, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18503059471026062] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18503059471026062, 0.15292949250433593] ***
*** finished computation of 7 references, err: [Inf, 0.18503059471026062, 0.15292949250433593] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [9, 83, 0]]
** centroid: 1, normalized-entropy: 0.4620663276355394, [(1, 9), (2, 83)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [46, 12, 0]]
** centroid: 2, normalized-entropy: 0.7355085815538399, [(1, 46), (2, 12)]
*** center 3: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 71, 15]]
** centroid: 4, normalized-entropy: 0.6677135405281421, [(2, 71), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [94, 13, 0]]
** centroid: 5, normalized-entropy: 0.5336439173027161, [(1, 94), (2, 13)]
*** center 6: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [40, 3, 0]]
** centroid: 7, normalized-entropy: 0.3650551896402848, [(1, 40), (2, 3)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17613871030882] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17613871030882, 0.15132122696749867] ***
*** finished computation of 7 references, err: [Inf, 0.17613871030882, 0.15132122696749867] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [92, 15, 0]]
** centroid: 1, normalized-entropy: 0.5847281182574745, [(1, 92), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [49, 3, 0]]
** centroid: 2, normalized-entropy: 0.3182152976832332, [(1, 49), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 32, 12]]
** centroid: 3, normalized-entropy: 0.8453509366224364, [(2, 32), (3, 12)]
*** center 4: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [98, 1, 0]]
** centroid: 5, normalized-entropy: 0.08146202691505994, [(1, 98), (2, 1)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [4, 75, 0]]
** centroid: 6, normalized-entropy: 0.2890794597316462, [(1, 4), (2, 75)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 58, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19291057884227483] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19291057884227483, 0.1502234577992931] ***
*** finished computation of 7 references, err: [Inf, 0.19291057884227483, 0.1502234577992931] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 72, 14]]
** centroid: 1, normalized-entropy: 0.6409441847875289, [(2, 72), (3, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [63, 2, 0]]
** centroid: 3, normalized-entropy: 0.19823496409776642, [(1, 63), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [58, 19, 0]]
** centroid: 4, normalized-entropy: 0.8060914696192223, [(1, 58), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [73, 13, 0]]
** centroid: 5, normalized-entropy: 0.6127425554686624, [(1, 73), (2, 13)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 70, 0]]
** centroid: 6, normalized-entropy: 0.10679203237584184, [(1, 1), (2, 70)]
*** center 7: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19475276471907274] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19475276471907274, 0.15345452943444252] ***
*** finished computation of 7 references, err: [Inf, 0.19475276471907274, 0.15345452943444252] ***
*** center 1: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 46, 11]]
** centroid: 2, normalized-entropy: 0.7076690004167966, [(2, 46), (3, 11)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [51, 5, 0]]
** centroid: 3, normalized-entropy: 0.4340811200043348, [(1, 51), (2, 5)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [50, 31, 0]]
** centroid: 4, normalized-entropy: 0.9599377175669783, [(1, 50), (2, 31)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [47, 35, 0]]
** centroid: 5, normalized-entropy: 0.9844961311800012, [(1, 47), (2, 35)]
*** center 6: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 60, 0]]
** centroid: 7, normalized-entropy: 0.12068101401352371, [(1, 1), (2, 60)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19955239034444094] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19955239034444094, 0.15851643237657845] ***
*** finished computation of 7 references, err: [Inf, 0.19955239034444094, 0.15851643237657845] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 59, 15]]
** centroid: 1, normalized-entropy: 0.7273006785144036, [(2, 59), (3, 15)]
*** center 2: selecting labels [1] (freq >= 1) [from [62, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [43, 7, 0]]
** centroid: 3, normalized-entropy: 0.5842388116428561, [(1, 43), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [75, 16, 0]]
** centroid: 4, normalized-entropy: 0.6708561590207726, [(1, 75), (2, 16)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [66, 28, 0]]
** centroid: 5, normalized-entropy: 0.8786744932173094, [(1, 66), (2, 28)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 76, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19118534512072802] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19118534512072802, 0.15589337357878685] ***
*** finished computation of 7 references, err: [Inf, 0.19118534512072802, 0.15589337357878685] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [85, 8, 0]]
** centroid: 1, normalized-entropy: 0.42304881571335795, [(1, 85), (2, 8)]
*** center 2: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 23, 12]]
** centroid: 3, normalized-entropy: 0.927526588431676, [(2, 23), (3, 12)]
*** center 4: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [93, 12, 0]]
** centroid: 5, normalized-entropy: 0.5127091420308771, [(1, 93), (2, 12)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [2, 60, 0]]
** centroid: 6, normalized-entropy: 0.2055925081850832, [(1, 2), (2, 60)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 80, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18999397078948096] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18999397078948096, 0.15483473603054881] ***
*** finished computation of 7 references, err: [Inf, 0.18999397078948096, 0.15483473603054881] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [47, 48, 0]]
** centroid: 1, normalized-entropy: 0.9999200708207958, [(1, 47), (2, 48)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [35, 4, 0]]
** centroid: 2, normalized-entropy: 0.4770713062193298, [(1, 35), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 50, 13]]
** centroid: 3, normalized-entropy: 0.7344461802527668, [(2, 50), (3, 13)]
*** center 4: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [46, 9, 0]]
** centroid: 5, normalized-entropy: 0.6429383500409613, [(1, 46), (2, 9)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [10, 79, 0]]
** centroid: 6, normalized-entropy: 0.5069923067544342, [(1, 10), (2, 79)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [82, 1, 0]]
** centroid: 7, normalized-entropy: 0.09408443883267342, [(1, 82), (2, 1)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18435773889441043] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18435773889441043, 0.15077918128296733] ***
*** finished computation of 7 references, err: [Inf, 0.18435773889441043, 0.15077918128296733] ***
*** center 1: selecting labels [1] (freq >= 1) [from [98, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 31, 11]]
** centroid: 2, normalized-entropy: 0.8296071030882032, [(2, 31), (3, 11)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [50, 10, 0]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(1, 50), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [56, 2, 0]]
** centroid: 4, normalized-entropy: 0.21639693245126485, [(1, 56), (2, 2)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [13, 73, 0]]
** centroid: 5, normalized-entropy: 0.6127425554686624, [(1, 13), (2, 73)]
*** center 6: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [9, 79, 0]]
** centroid: 7, normalized-entropy: 0.4761588445580706, [(1, 9), (2, 79)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19177174944244324] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19177174944244324, 0.15685057821124793] ***
*** finished computation of 7 references, err: [Inf, 0.19177174944244324, 0.15685057821124793] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [86, 2, 0]]
** centroid: 1, normalized-entropy: 0.1564910629057016, [(1, 86), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [41, 17, 0]]
** centroid: 2, normalized-entropy: 0.8726965039103788, [(1, 41), (2, 17)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 39, 14]]
** centroid: 3, normalized-entropy: 0.8329458235361399, [(2, 39), (3, 14)]
*** center 4: selecting labels [1] (freq >= 1) [from [51, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [17, 77, 0]]
** centroid: 5, normalized-entropy: 0.6819353204567525, [(1, 17), (2, 77)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [8, 60, 0]]
** centroid: 6, normalized-entropy: 0.5225593745369407, [(1, 8), (2, 60)]
*** center 7: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18432114121690393] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18432114121690393, 0.15018266860675067] ***
*** finished computation of 7 references, err: [Inf, 0.18432114121690393, 0.15018266860675067] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [94, 1, 0]]
** centroid: 1, normalized-entropy: 0.08426242877623306, [(1, 94), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [45, 14, 0]]
** centroid: 2, normalized-entropy: 0.7905013842153699, [(1, 45), (2, 14)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 39, 16]]
** centroid: 3, normalized-entropy: 0.8698926856041562, [(2, 39), (3, 16)]
*** center 4: selecting labels [1] (freq >= 1) [from [81, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [32, 59, 0]]
** centroid: 5, normalized-entropy: 0.9355315642388212, [(1, 32), (2, 59)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [3, 76, 0]]
** centroid: 6, normalized-entropy: 0.23292785546981223, [(1, 3), (2, 76)]
*** center 7: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19377370991557835] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19377370991557835, 0.1568605447486043] ***
*** finished computation of 7 references, err: [Inf, 0.19377370991557835, 0.1568605447486043] ***
*** center 1: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 42, 14]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(2, 42), (3, 14)]
*** center 3: selecting labels [1] (freq >= 1) [from [45, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [52, 47, 0]]
** centroid: 4, normalized-entropy: 0.9981592324817737, [(1, 52), (2, 47)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [41, 40, 0]]
** centroid: 5, normalized-entropy: 0.9998900524545515, [(1, 41), (2, 40)]
*** center 6: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [4, 60, 0]]
** centroid: 7, normalized-entropy: 0.3372900666170139, [(1, 4), (2, 60)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19919383687200024] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19919383687200024, 0.15432975736632942] ***
*** finished computation of 7 references, err: [Inf, 0.19919383687200024, 0.15432975736632942] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 72, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [60, 4, 0]]
** centroid: 3, normalized-entropy: 0.3372900666170139, [(1, 60), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [91, 1, 0]]
** centroid: 4, normalized-entropy: 0.08650421412134586, [(1, 91), (2, 1)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [80, 13, 0]]
** centroid: 5, normalized-entropy: 0.5836753280239112, [(1, 80), (2, 13)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 74, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 22, 13]]
** centroid: 7, normalized-entropy: 0.9517626756348312, [(2, 22), (3, 13)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18020449458062648] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18020449458062648, 0.15397270633466542] ***
*** finished computation of 7 references, err: [Inf, 0.18020449458062648, 0.15397270633466542] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [108, 8, 0]]
** centroid: 1, normalized-entropy: 0.36205125173399805, [(1, 108), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [49, 8, 0]]
** centroid: 2, normalized-entropy: 0.5851569902762294, [(1, 49), (2, 8)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 23, 12]]
** centroid: 3, normalized-entropy: 0.927526588431676, [(2, 23), (3, 12)]
*** center 4: selecting labels [1] (freq >= 1) [from [45, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [20, 80, 0]]
** centroid: 5, normalized-entropy: 0.7219280948873623, [(1, 20), (2, 80)]
*** center 6: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [3, 65, 0]]
** centroid: 7, normalized-entropy: 0.260862909647207, [(1, 3), (2, 65)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.183653351777466] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.183653351777466, 0.15370592094957827] ***
*** finished computation of 7 references, err: [Inf, 0.183653351777466, 0.15370592094957827] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [54, 54, 0]]
** centroid: 1, normalized-entropy: 1.0, [(1, 54), (2, 54)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [50, 4, 0]]
** centroid: 2, normalized-entropy: 0.38094658570539014, [(1, 50), (2, 4)]
*** center 3: selecting labels [1] (freq >= 1) [from [42, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 45, 18]]
** centroid: 4, normalized-entropy: 0.8631205685666311, [(2, 45), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [85, 8, 0]]
** centroid: 5, normalized-entropy: 0.42304881571335795, [(1, 85), (2, 8)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 75, 0]]
** centroid: 6, normalized-entropy: 0.10106696361212422, [(1, 1), (2, 75)]
*** center 7: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19450994046218692] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19450994046218692, 0.14762954709120094] ***
*** finished computation of 7 references, err: [Inf, 0.19450994046218692, 0.14762954709120094] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 74, 18]]
** centroid: 1, normalized-entropy: 0.7131467486384921, [(2, 74), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [58, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [43, 31, 0]]
** centroid: 4, normalized-entropy: 0.9809470132751208, [(1, 43), (2, 31)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [69, 16, 0]]
** centroid: 5, normalized-entropy: 0.6977652006354232, [(1, 69), (2, 16)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 68, 0]]
** centroid: 6, normalized-entropy: 0.10928571467638523, [(1, 1), (2, 68)]
*** center 7: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20795537398185115] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20795537398185115, 0.15412562188878656] ***
*** finished computation of 7 references, err: [Inf, 0.20795537398185115, 0.15412562188878656] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [57, 44, 0]]
** centroid: 1, normalized-entropy: 0.9880162151534644, [(1, 57), (2, 44)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [64, 5, 0]]
** centroid: 2, normalized-entropy: 0.3750514064240124, [(1, 64), (2, 5)]
*** center 3: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 46, 12]]
** centroid: 4, normalized-entropy: 0.7355085815538399, [(2, 46), (3, 12)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [49, 32, 0]]
** centroid: 5, normalized-entropy: 0.9679884922470298, [(1, 49), (2, 32)]
*** center 6: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 75, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19062498031556607] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19062498031556607, 0.1567454752884805] ***
*** finished computation of 7 references, err: [Inf, 0.19062498031556607, 0.1567454752884805] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [58, 53, 0]]
** centroid: 1, normalized-entropy: 0.9985358500505679, [(1, 58), (2, 53)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [51, 3, 0]]
** centroid: 2, normalized-entropy: 0.3095434291503252, [(1, 51), (2, 3)]
*** center 3: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 41, 15]]
** centroid: 4, normalized-entropy: 0.8383729377099398, [(2, 41), (3, 15)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [80, 9, 0]]
** centroid: 5, normalized-entropy: 0.4725472219330293, [(1, 80), (2, 9)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 78, 0]]
** centroid: 6, normalized-entropy: 0.09794058271817412, [(1, 1), (2, 78)]
*** center 7: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1971280247848481] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1971280247848481, 0.15342224045936018] ***
*** finished computation of 7 references, err: [Inf, 0.1971280247848481, 0.15342224045936018] ***
*** center 1: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 43, 13]]
** centroid: 2, normalized-entropy: 0.7817281222714539, [(2, 43), (3, 13)]
*** center 3: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [63, 41, 0]]
** centroid: 4, normalized-entropy: 0.9674756088157442, [(1, 63), (2, 41)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [33, 37, 0]]
** centroid: 5, normalized-entropy: 0.9976432959863935, [(1, 33), (2, 37)]
*** center 6: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [4, 60, 0]]
** centroid: 7, normalized-entropy: 0.3372900666170139, [(1, 4), (2, 60)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19062077737040817] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19062077737040817, 0.15303028462361545] ***
*** finished computation of 7 references, err: [Inf, 0.19062077737040817, 0.15303028462361545] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [41, 60, 0]]
** centroid: 1, normalized-entropy: 0.9743197211096905, [(1, 41), (2, 60)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [49, 23, 0]]
** centroid: 2, normalized-entropy: 0.9037762882345833, [(1, 49), (2, 23)]
*** center 3: selecting labels [1] (freq >= 1) [from [39, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 70, 14]]
** centroid: 4, normalized-entropy: 0.6500224216483541, [(2, 70), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [64, 28, 0]]
** centroid: 5, normalized-entropy: 0.8865408928220899, [(1, 64), (2, 28)]
*** center 6: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [46, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19251930388621985] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19251930388621985, 0.15384135822206735] ***
*** finished computation of 7 references, err: [Inf, 0.19251930388621985, 0.15384135822206735] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [44, 47, 0]]
** centroid: 1, normalized-entropy: 0.9992158792218827, [(1, 44), (2, 47)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [49, 6, 0]]
** centroid: 2, normalized-entropy: 0.4971677614160751, [(1, 49), (2, 6)]
*** center 3: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 49, 14]]
** centroid: 4, normalized-entropy: 0.7642045065086204, [(2, 49), (3, 14)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [77, 18, 0]]
** centroid: 5, normalized-entropy: 0.7003691487575897, [(1, 77), (2, 18)]
*** center 6: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 71, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18614017599914223] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18614017599914223, 0.15194767406396567] ***
*** finished computation of 7 references, err: [Inf, 0.18614017599914223, 0.15194767406396567] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [111, 1, 0]]
** centroid: 1, normalized-entropy: 0.07360348308562395, [(1, 111), (2, 1)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 29, 14]]
** centroid: 2, normalized-entropy: 0.9103480624345157, [(2, 29), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [71, 4, 0]]
** centroid: 3, normalized-entropy: 0.3003914173647818, [(1, 71), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [57, 5, 0]]
** centroid: 4, normalized-entropy: 0.4044483864864384, [(1, 57), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [7, 85, 0]]
** centroid: 5, normalized-entropy: 0.3882389775123619, [(1, 7), (2, 85)]
*** center 6: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [1, 62, 0]]
** centroid: 7, normalized-entropy: 0.11759466565886466, [(1, 1), (2, 62)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20644567430205643] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20644567430205643, 0.1529059165660292] ***
*** finished computation of 7 references, err: [Inf, 0.20644567430205643, 0.1529059165660292] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [75, 1, 0]]
** centroid: 1, normalized-entropy: 0.10106696361212422, [(1, 75), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [64, 4, 0]]
** centroid: 2, normalized-entropy: 0.32275695889739825, [(1, 64), (2, 4)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 34, 14]]
** centroid: 3, normalized-entropy: 0.8708644692353648, [(2, 34), (3, 14)]
*** center 4: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [71, 21, 0]]
** centroid: 5, normalized-entropy: 0.7749672673267259, [(1, 71), (2, 21)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 68, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 76, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18924483110615983] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18924483110615983, 0.1536044840607792] ***
*** finished computation of 7 references, err: [Inf, 0.18924483110615983, 0.1536044840607792] ***
*** center 1: selecting labels [1] (freq >= 1) [from [126, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 34, 7]]
** centroid: 2, normalized-entropy: 0.6593758812786991, [(2, 34), (3, 7)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [35, 6, 0]]
** centroid: 3, normalized-entropy: 0.6006085754131871, [(1, 35), (2, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [65, 4, 0]]
** centroid: 4, normalized-entropy: 0.3193373865339728, [(1, 65), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [12, 73, 0]]
** centroid: 5, normalized-entropy: 0.5873116089977589, [(1, 12), (2, 73)]
*** center 6: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [4, 73, 0]]
** centroid: 7, normalized-entropy: 0.29461520565280713, [(1, 4), (2, 73)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18756140519306064] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18756140519306064, 0.1545200712829828] ***
*** finished computation of 7 references, err: [Inf, 0.18756140519306064, 0.1545200712829828] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [6, 88, 1]]
** centroid: 1, normalized-entropy: 0.26695982980664296, [(1, 6), (2, 88), (3, 1)]
*** center 2: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [52, 11, 0]]
** centroid: 3, normalized-entropy: 0.6681273338436138, [(1, 52), (2, 11)]
*** center 4: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 73, 13]]
** centroid: 5, normalized-entropy: 0.6127425554686624, [(2, 73), (3, 13)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [77, 9, 0]]
** centroid: 6, normalized-entropy: 0.48356837509176975, [(1, 77), (2, 9)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [35, 8, 0]]
** centroid: 7, normalized-entropy: 0.6931274153282881, [(1, 35), (2, 8)]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 375,3 => 28,1 => 597), Dict(2 => 346,3 => 35,1 => 619))
[ Info: ===== scores for single classifier: {"micro_f1":0.937,"precision":0.937,"recall":0.937,"macro_recall":0.9422805756067496,"macro_f1":0.9152814003932249,"accuracy":0.937,"class_f1":{"2":0.9020217729393467,"3":0.8860759493670886,"1":0.9577464788732395},"class_precision":{"2":0.9764309764309764,"3":0.7954545454545454,"1":0.928679817905918},"class_recall":{"2":0.838150289017341,"3":1.0,"1":0.9886914378029079}}
[ Info: ===== scores for 1: {"micro_f1":0.96,"precision":0.96,"recall":0.96,"macro_recall":0.9519915049045569,"macro_f1":0.9607132019319008,"accuracy":0.96,"class_f1":{"2":0.9421965317919075,"3":0.9705882352941176,"1":0.9693548387096773},"class_precision":{"2":0.9421965317919075,"3":1.0,"1":0.9677938808373591},"class_recall":{"2":0.9421965317919075,"3":0.9428571428571428,"1":0.9709208400646203}}
[ Info: ===== scores for 5: {"micro_f1":0.965,"precision":0.965,"recall":0.965,"macro_recall":0.9572333487635999,"macro_f1":0.9645842380894173,"accuracy":0.965,"class_f1":{"2":0.9499284692417739,"3":0.9705882352941176,"1":0.9732360097323601},"class_precision":{"2":0.9405099150141643,"3":1.0,"1":0.9771986970684039},"class_recall":{"2":0.9595375722543352,"3":0.9428571428571428,"1":0.9693053311793215}}
[ Info: ===== scores for 7: {"micro_f1":0.97,"precision":0.97,"recall":0.97,"macro_recall":0.9616254162725723,"macro_f1":0.9683629883055994,"accuracy":0.97,"class_f1":{"2":0.9572649572649572,"3":0.9705882352941176,"1":0.9772357723577236},"class_precision":{"2":0.9438202247191011,"3":1.0,"1":0.983633387888707},"class_recall":{"2":0.9710982658959537,"3":0.9428571428571428,"1":0.9709208400646203}}
[ Info: ===== scores for 9: {"micro_f1":0.97,"precision":0.97,"recall":0.97,"macro_recall":0.9629000807976781,"macro_f1":0.9684465123149072,"accuracy":0.97,"class_f1":{"2":0.9576271186440679,"3":0.9705882352941176,"1":0.977124183006536},"class_precision":{"2":0.93646408839779,"3":1.0,"1":0.9884297520661157},"class_recall":{"2":0.9797687861271677,"3":0.9428571428571428,"1":0.9660743134087237}}
[ Info: ===== scores for 11: {"micro_f1":0.972,"precision":0.972,"recall":0.972,"macro_recall":0.9639770867212106,"macro_f1":0.9699070002742882,"accuracy":0.972,"class_f1":{"2":0.9603399433427763,"3":0.9705882352941176,"1":0.9787928221859706},"class_precision":{"2":0.9416666666666667,"3":1.0,"1":0.9884678747940692},"class_recall":{"2":0.9797687861271677,"3":0.9428571428571428,"1":0.9693053311793215}}
(score = 0.957, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.957, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.96, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.96, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.961, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.959, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.959, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.954, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.954, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.97,"k":7,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.97,"precision":0.97,"recall":0.97,"macro_recall":0.9616254162725723,"macro_f1":0.9683629883055994,"accuracy":0.97,"class_f1":{"2":0.9572649572649572,"3":0.9705882352941176,"1":0.9772357723577236},"class_precision":{"2":0.9438202247191011,"3":1.0,"1":0.983633387888707},"class_recall":{"2":0.9710982658959537,"3":0.9428571428571428,"1":0.9709208400646203}}
Test Summary: | Pass  Total
AKNC          |    8      8
[186, 2, 1, 4, 5, 3, 1, 1, 8, 1, 14, 5, 2, 11, 1, 1, 4, 4, 34, 7, 2, 3, 1, 13, 8, 7, 3, 39, 2, 5, 3, 11, 12, 9, 9, 8, 11, 22, 19, 7, 10, 4, 10, 8, 6, 18, 36, 35, 34, 33, 10, 4, 13, 4, 6, 11, 60, 29, 73, 4, 25, 14, 15, 6, 8, 6, 4, 11, 15, 14, 2, 9, 24, 15, 1, 3, 44, 17, 4, 5, 4, 9, 80, 12, 2, 63, 12, 5, 7, 89, 36, 2, 19, 2, 85, 11, 164, 3, 2, 7, 10, 32, 16, 9, 30, 6, 9, 30, 51, 8, 67, 10, 14, 3, 17, 19, 28, 2, 65, 19, 68, 12, 15, 29, 1549, 37, 19, 10, 3, 203, 39, 10, 7, 3, 41, 10, 18, 14, 14, 6, 20, 155, 21, 6, 1, 51, 112, 3, 26, 6, 3, 72, 36, 10, 67, 33, 61, 11, 85, 24, 217, 17, 6, 20, 4, 14, 8, 15, 40, 94, 32, 5, 15, 2, 24, 49, 71, 1, 62, 33, 55, 4, 38, 7, 28, 64, 71, 18, 2, 5, 21, 3, 14, 8, 21, 7, 23, 17, 38, 43, 9, 4, 51, 74, 15, 16, 8, 19, 36, 9, 25, 35, 1, 4, 15, 49, 8, 23, 14, 97, 4, 83, 5, 9, 11, 63, 19, 16, 11, 26, 23, 6, 6, 6, 17, 2, 21, 25, 21, 44, 5, 3, 33, 42, 19, 58, 13, 73, 7, 298, 14, 13, 34, 5, 6, 63, 14, 32, 35, 54, 85, 74, 26, 32, 25, 50, 38, 8, 59, 11, 3, 20, 168, 32, 77, 2, 13, 6, 2, 25, 26, 13, 33, 95, 22, 43, 3, 79, 19, 30, 29, 12, 263, 102, 174, 17, 105, 5, 73, 26]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6539999999999996, speedup = 0.2700670979644418, eval_ratio = 0.09794299999999999)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":null,"recall":0.4218749999999999,"f1":null,"seconds":0.00027593784034252167,"exhaustive_search_seconds":0.00034072622656822205,"evaluations":672.6171875,"distances_sum":1677.2042709910759}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.6024305555555551,"recall":0.6024305555555551,"f1":null,"seconds":0.0003847070038318634,"exhaustive_search_seconds":0.00034072622656822205,"evaluations":832.03125,"distances_sum":1675.1087148395234}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6961805555555552,"recall":0.6961805555555552,"f1":0.6961805555555552,"seconds":0.00048427097499370575,"exhaustive_search_seconds":0.00034072622656822205,"evaluations":960.484375,"distances_sum":1627.0185060270687}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7673611111111103,"recall":0.7673611111111103,"f1":0.7673611111111103,"seconds":0.0005634613335132599,"exhaustive_search_seconds":0.00034072622656822205,"evaluations":1049.2109375,"distances_sum":1599.5670959373767}
KCenters.DeloneInvIndex> reached performance {"precision":0.8142361111111102,"recall":0.8142361111111102,"f1":0.8142361111111102,"seconds":0.0008014943450689316,"exhaustive_search_seconds":0.00034072622656822205,"evaluations":1199.8515625,"distances_sum":1581.6991907595163}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.7629999999999997, speedup = 0.5859879449701692, eval_ratio = 0.11725799999999999)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
