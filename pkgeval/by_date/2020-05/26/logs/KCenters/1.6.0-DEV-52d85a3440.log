Julia Version 1.6.0-DEV.92
Commit 52d85a3440 (2020-05-25 14:54 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed PooledArrays ──────────────── v0.5.3
  Installed MappedArrays ──────────────── v0.2.2
  Installed TableTraits ───────────────── v1.0.0
  Installed Parsers ───────────────────── v1.0.4
  Installed KCenters ──────────────────── v0.2.2
  Installed OrderedCollections ────────── v1.2.0
  Installed MLDataUtils ───────────────── v0.5.1
  Installed SimilaritySearch ──────────── v0.3.19
  Installed Reexport ──────────────────── v0.2.0
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed JSON ──────────────────────── v0.21.0
  Installed DataStructures ────────────── v0.17.17
  Installed StatsBase ─────────────────── v0.32.2
  Installed DataFrames ────────────────── v0.20.2
  Installed DataAPI ───────────────────── v1.3.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed LearnBase ─────────────────── v0.2.2
  Installed InvertedIndices ───────────── v1.0.0
  Installed Missings ──────────────────── v0.4.3
  Installed Compat ────────────────────── v3.10.0
  Installed Tables ────────────────────── v1.0.4
  Installed CategoricalArrays ─────────── v0.7.7
  Installed MLDataPattern ─────────────── v0.5.3
Updating `~/.julia/environments/v1.6/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.6/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.10.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.17
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.4
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_gTpkoU/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_gTpkoU/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.10.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.17
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.4
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0723782532413801
[ Info: 0.9316620069742203
[ Info: 0.8321307849884033
[ Info: 0.5546774150431156
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.33258443139493465
mean(cdnet.distances) = 0.3738624750326077
mean(crand.distances) = 0.34750144014755885
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5546875, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5546875,"f1":0.7004984598734604,"seconds":3.95067036151886e-6,"exhaustive_search_seconds":1.7024576663970947e-6,"evaluations":6.3984375,"distances_sum":1637.835422949804}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5546875,"state":{"ssize":2,"bsize":3},"perf":{"precision":1.0,"recall":0.5546875,"f1":0.7004984598734604,"seconds":3.95067036151886e-6,"exhaustive_search_seconds":1.7024576663970947e-6,"evaluations":6.3984375,"distances_sum":1637.835422949804}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9385874542124549,"seconds":5.185604095458984e-6,"exhaustive_search_seconds":1.7024576663970947e-6,"evaluations":8.7734375,"distances_sum":2972.2319702498517}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.890625,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.890625,"f1":0.9385874542124549,"seconds":5.185604095458984e-6,"exhaustive_search_seconds":1.7024576663970947e-6,"evaluations":8.7734375,"distances_sum":2972.2319702498517}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9609375, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9609375,"f1":0.9783138736263738,"seconds":5.606561899185181e-6,"exhaustive_search_seconds":1.7024576663970947e-6,"evaluations":8.984375,"distances_sum":3333.2237634685303}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9609375,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9783138736263738,"seconds":5.606561899185181e-6,"exhaustive_search_seconds":1.7024576663970947e-6,"evaluations":8.984375,"distances_sum":3333.2237634685303}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9609375,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.9609375,"f1":0.9783138736263738,"seconds":5.606561899185181e-6,"exhaustive_search_seconds":1.7024576663970947e-6,"evaluations":8.984375,"distances_sum":3333.2237634685303}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2158203125, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.2158203125,"f1":null,"seconds":2.7641654014587402e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":5.1953125,"distances_sum":610.3598430928992}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.77734375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.77734375,"f1":0.866881555944057,"seconds":5.627050995826721e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.6640625,"distances_sum":2345.0770357048636}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.77734375,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.77734375,"f1":0.866881555944057,"seconds":5.627050995826721e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.6640625,"distances_sum":2345.0770357048636}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.787109375, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.787109375,"f1":0.8706824425574433,"seconds":4.958361387252808e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.65625,"distances_sum":2373.4129514493625}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":6,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9616529304029307,"seconds":5.329027771949768e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.828125,"distances_sum":3108.196970912869}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9378090659340665,"seconds":5.301088094711304e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.8671875,"distances_sum":2858.992008923864}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9326171875,"state":{"ssize":6,"bsize":9},"perf":{"precision":1.0,"recall":0.9326171875,"f1":0.9616529304029307,"seconds":5.329027771949768e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.828125,"distances_sum":3108.196970912869}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":8,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9720810439560443,"seconds":5.444511771202087e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.9609375,"distances_sum":3145.5121447670485}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":10,"bsize":12}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9747596153846156,"seconds":7.875263690948486e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.96875,"distances_sum":3172.6273375834976}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.9771577380952383,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.8984375,"distances_sum":3224.3951431801206}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9580078125,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9771577380952383,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.8984375,"distances_sum":3224.3951431801206}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9580078125,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9580078125,"f1":0.9771577380952383,"seconds":5.686655640602112e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.8984375,"distances_sum":3224.3951431801206}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6591796875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6591796875,"f1":0.7840191058941067,"seconds":4.04752790927887e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":7.6171875,"distances_sum":1903.5860643915407}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.201171875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.201171875,"f1":null,"seconds":2.434477210044861e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":4.6171875,"distances_sum":578.602577178303}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4990234375, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.4990234375,"f1":null,"seconds":3.3061951398849487e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":6.046875,"distances_sum":1448.2489898927192}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6591796875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6591796875,"f1":0.7840191058941067,"seconds":4.04752790927887e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":7.6171875,"distances_sum":1903.5860643915407}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.873046875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.873046875,"f1":0.9251665001665008,"seconds":4.732981324195862e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.4453125,"distances_sum":2850.049385022312}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66796875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.66796875,"f1":0.7910787129537138,"seconds":4.08664345741272e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":7.5546875,"distances_sum":1977.4145684781424}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.86328125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.86328125,"f1":0.921892170329671,"seconds":4.721805453300476e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.3359375,"distances_sum":2728.4258237209237}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.873046875,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.873046875,"f1":0.9251665001665008,"seconds":4.732981324195862e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.4453125,"distances_sum":2850.049385022312}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9502117673992678,"seconds":4.898756742477417e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.6875,"distances_sum":3002.0730970596082}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9686011904761909,"seconds":5.111098289489746e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.8125,"distances_sum":3130.394144759683}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9686011904761909,"seconds":5.111098289489746e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.8125,"distances_sum":3130.394144759683}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9686011904761909,"seconds":5.111098289489746e-6,"exhaustive_search_seconds":1.1939555406570435e-6,"evaluations":8.8125,"distances_sum":3130.394144759683}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2568359375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2568359375,"f1":null,"seconds":3.0230730772018433e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":6.2421875,"distances_sum":656.7804633901713}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.259765625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.259765625,"f1":null,"seconds":3.0919909477233887e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":6.296875,"distances_sum":700.02930914037}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4375,"f1":null,"seconds":3.5353004932403564e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":6.4765625,"distances_sum":1134.61861111886}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.58984375, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.58984375,"f1":0.7247606560106565,"seconds":4.038214683532715e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.3046875,"distances_sum":1599.2245659001235}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.58984375,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.58984375,"f1":0.7247606560106565,"seconds":4.038214683532715e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":7.3046875,"distances_sum":1599.2245659001235}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.689453125, conf: {"ssize":9,"bsize":4}, perf: {"precision":1.0,"recall":0.689453125,"f1":0.8066829004329013,"seconds":4.51505184173584e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.125,"distances_sum":1942.9429616398852}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.8637456293706303,"seconds":4.8074871301651e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.3828125,"distances_sum":2262.587825067142}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6865234375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6865234375,"f1":0.8028252997003005,"seconds":4.479661583900452e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.1171875,"distances_sum":1947.852626809596}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6806640625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6806640625,"f1":0.7997913544788553,"seconds":4.336237907409668e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.0078125,"distances_sum":1913.3628399420918}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7744140625,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7744140625,"f1":0.8637456293706303,"seconds":4.8074871301651e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.3828125,"distances_sum":2262.587825067142}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9343125624375632,"seconds":5.444511771202087e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.671875,"distances_sum":2793.869097401937}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9586169039294042,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8515625,"distances_sum":3035.256001203094}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9316334706959712,"seconds":5.304813385009766e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7734375,"distances_sum":2751.262309423868}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":11,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9389995421245427,"seconds":5.401670932769775e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.6875,"distances_sum":2833.3750216646413}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9473672161172169,"seconds":3.71783971786499e-5,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.7890625,"distances_sum":2934.886775074276}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9373569139194142,"seconds":5.491077899932861e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.609375,"distances_sum":2838.483720958895}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8984375, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8984375,"f1":0.9429945054945063,"seconds":5.302950739860535e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.671875,"distances_sum":2844.0803044290724}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8671875, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8671875,"f1":0.9226107226107232,"seconds":5.854293704032898e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.6953125,"distances_sum":2691.800503209103}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7861328125, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7861328125,"f1":0.8711505508380516,"seconds":4.8745423555374146e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.3828125,"distances_sum":2314.68475647454}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9586169039294042,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8515625,"distances_sum":3035.256001203094}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9267578125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9586169039294042,"seconds":5.714595317840576e-6,"exhaustive_search_seconds":1.3355165719985962e-6,"evaluations":8.8515625,"distances_sum":3035.256001203094}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7734375,"f1":0.866160402097903,"seconds":4.926696419715881e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.140625,"distances_sum":2246.7041610356337}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7734375,"f1":0.866160402097903,"seconds":4.926696419715881e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.140625,"distances_sum":2246.7041610356337}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8623046875, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8623046875,"f1":0.9200466200466206,"seconds":5.478039383888245e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.4921875,"distances_sum":2690.828301453121}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9589374167499173,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.7734375,"distances_sum":3057.185911326305}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9296875,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.9296875,"f1":0.9589374167499173,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.7734375,"distances_sum":3057.185911326305}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":7,"bsize":10}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9679544413919418,"seconds":3.388896584510803e-5,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8671875,"distances_sum":3124.4104148464166}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9688072344322349,"seconds":6.593763828277588e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.90625,"distances_sum":3098.96399944581}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9733630952380953,"seconds":5.891546607017517e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9140625,"distances_sum":3151.610319911538}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9671188186813188,"seconds":5.9586018323898315e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.828125,"distances_sum":3151.2381811183454}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9733630952380953,"seconds":5.891546607017517e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9140625,"distances_sum":3151.610319911538}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9733630952380953,"seconds":5.891546607017517e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.9140625,"distances_sum":3151.610319911538}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8597053987678996,"seconds":5.286186933517456e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.65625,"distances_sum":2238.3430580777567}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76953125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.76953125,"f1":0.8597053987678996,"seconds":5.286186933517456e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.65625,"distances_sum":2238.3430580777567}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9626545329670333,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.90625,"distances_sum":2961.315369406591}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.93359375,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.93359375,"f1":0.9626545329670333,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.90625,"distances_sum":2961.315369406591}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9652045870795873,"seconds":5.977228283882141e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.8984375,"distances_sum":3031.528354375223}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9541015625, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.9541015625,"f1":0.9736466658341661,"seconds":6.249174475669861e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.9375,"distances_sum":3116.5510531084974}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9462890625, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9462890625,"f1":0.9700549450549454,"seconds":6.036832928657532e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.9296875,"distances_sum":3049.8236904350374}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9638671875, conf: {"ssize":4,"bsize":13}, perf: {"precision":1.0,"recall":0.9638671875,"f1":0.9800423534798537,"seconds":6.096437573432922e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.9453125,"distances_sum":3134.9453896365444}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9638671875,"state":{"ssize":4,"bsize":13},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.9800423534798537,"seconds":6.096437573432922e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.9453125,"distances_sum":3134.9453896365444}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9638671875,"state":{"ssize":4,"bsize":13},"perf":{"precision":1.0,"recall":0.9638671875,"f1":0.9800423534798537,"seconds":6.096437573432922e-6,"exhaustive_search_seconds":1.4621764421463013e-6,"evaluations":8.9453125,"distances_sum":3134.9453896365444}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.748046875, conf: {"ssize":1,"bsize":5}, perf: {"precision":0.9888299851190475,"recall":0.748046875,"f1":0.844777162941226,"seconds":4.913657903671265e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.25,"distances_sum":1471.3088217401098}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1787109375, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.1787109375,"f1":null,"seconds":3.166496753692627e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":5.34375,"distances_sum":316.2379938858711}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.748046875,"state":{"ssize":1,"bsize":5},"perf":{"precision":0.9888299851190475,"recall":0.748046875,"f1":0.844777162941226,"seconds":4.913657903671265e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.25,"distances_sum":1471.3088217401098}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8837890625, conf: {"ssize":2,"bsize":7}, perf: {"precision":0.9902529761904763,"recall":0.8837890625,"f1":0.9289606227106227,"seconds":5.409121513366699e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.7421875,"distances_sum":1874.4989333684898}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8837890625,"state":{"ssize":2,"bsize":7},"perf":{"precision":0.9902529761904763,"recall":0.8837890625,"f1":0.9289606227106227,"seconds":5.409121513366699e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.7421875,"distances_sum":1874.4989333684898}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":1,"bsize":10}, perf: {"precision":0.9830450148809524,"recall":0.9140625,"f1":0.944029733287546,"seconds":5.62518835067749e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.90625,"distances_sum":1980.052693042566}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":5,"bsize":10}, perf: {"precision":0.9925595238095237,"recall":0.91796875,"f1":0.9510273580586085,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.8515625,"distances_sum":1988.6455620778672}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":1,"bsize":11}, perf: {"precision":0.9908854166666667,"recall":0.9443359375,"f1":0.9650869963369966,"seconds":5.932524800300598e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.953125,"distances_sum":2068.870156254884}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":1,"bsize":11},"perf":{"precision":0.9908854166666667,"recall":0.9443359375,"f1":0.9650869963369966,"seconds":5.932524800300598e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.953125,"distances_sum":2068.870156254884}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":1,"bsize":11},"perf":{"precision":0.9908854166666667,"recall":0.9443359375,"f1":0.9650869963369966,"seconds":5.932524800300598e-6,"exhaustive_search_seconds":1.6093254089355469e-6,"evaluations":8.953125,"distances_sum":2068.870156254884}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.791015625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.791015625,"f1":0.876010968198469,"seconds":5.070120096206665e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.4140625,"distances_sum":1606.248291119588}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1796875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.1796875,"f1":null,"seconds":3.335997462272644e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":5.4765625,"distances_sum":341.86652007032495}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.181640625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.181640625,"f1":null,"seconds":3.1888484954833984e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":5.4453125,"distances_sum":332.3801468446636}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.791015625,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.791015625,"f1":0.876010968198469,"seconds":5.070120096206665e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.4140625,"distances_sum":1606.248291119588}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8603515625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8603515625,"f1":0.918770292207793,"seconds":5.5711716413497925e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.5546875,"distances_sum":1819.4086119507185}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9451694139194146,"seconds":5.636364221572876e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.734375,"distances_sum":1978.8720318203661}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8681640625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8681640625,"f1":0.9236320970695978,"seconds":5.649402737617493e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.53125,"distances_sum":1857.9079080600306}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.904296875,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.9451694139194146,"seconds":5.636364221572876e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.734375,"distances_sum":1978.8720318203661}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9641025641025646,"seconds":5.06080687046051e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8203125,"distances_sum":2076.366466914595}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9492616758241764,"seconds":4.990026354789734e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.6953125,"distances_sum":1985.4563433156052}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9625228937728944,"seconds":4.92483377456665e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.8359375,"distances_sum":2061.7126521806917}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9716746794871798,"seconds":5.071982741355896e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.90625,"distances_sum":2108.627185880104}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9716746794871798,"seconds":5.071982741355896e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.90625,"distances_sum":2108.627185880104}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9716746794871798,"seconds":5.071982741355896e-6,"exhaustive_search_seconds":1.4454126358032227e-6,"evaluations":8.90625,"distances_sum":2108.627185880104}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6494140625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6494140625,"f1":0.7781494547119555,"seconds":4.135072231292725e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":7.6015625,"distances_sum":1216.8361956672145}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2294921875, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2294921875,"f1":null,"seconds":2.7604401111602783e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":5.421875,"distances_sum":426.40236794596706}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6630859375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6630859375,"f1":0.7867070429570436,"seconds":4.0978193283081055e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":7.7421875,"distances_sum":1248.7434828727346}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7451171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7451171875,"f1":0.8452880452880462,"seconds":4.602596163749695e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.375,"distances_sum":1490.8177262826491}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7451171875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7451171875,"f1":0.8452880452880462,"seconds":4.602596163749695e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.375,"distances_sum":1490.8177262826491}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9481513278388284,"seconds":4.999339580535889e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.765625,"distances_sum":2019.2255751703567}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9268034049284055,"seconds":4.98257577419281e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.6875,"distances_sum":1870.0150625792978}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.861328125, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.861328125,"f1":0.9180262445887452,"seconds":5.0067901611328125e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.6875,"distances_sum":1828.4612199153546}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.814453125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.814453125,"f1":0.8913893398268407,"seconds":4.675239324569702e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.5703125,"distances_sum":1665.5632479175085}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.8507273976023983,"seconds":4.556030035018921e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.3984375,"distances_sum":1509.1681788659248}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9091796875,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9091796875,"f1":0.9481513278388284,"seconds":4.999339580535889e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.765625,"distances_sum":2019.2255751703567}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9556979478854483,"seconds":5.055218935012817e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.8046875,"distances_sum":2057.7204381507518}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9666151556776559,"seconds":5.1390379667282104e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.8828125,"distances_sum":2111.649352189796}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9599015567765575,"seconds":5.124136805534363e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.84375,"distances_sum":2069.8552321841385}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9692536630036633,"seconds":5.211681127548218e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.9296875,"distances_sum":2116.8376250646024}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9287109375, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.9287109375,"f1":0.9598099816849819,"seconds":5.189329385757446e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.8671875,"distances_sum":2086.7008248230873}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":5,"bsize":10}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9598099816849821,"seconds":5.200505256652832e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.8984375,"distances_sum":2058.9371334768202}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9692536630036633,"seconds":5.211681127548218e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.9296875,"distances_sum":2116.8376250646024}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9692536630036633,"seconds":5.211681127548218e-6,"exhaustive_search_seconds":1.1958181858062744e-6,"evaluations":8.9296875,"distances_sum":2116.8376250646024}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2099609375,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2099609375,"f1":null,"seconds":2.553686499595642e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":4.828125,"distances_sum":381.45270075164933}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2099609375,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2099609375,"f1":null,"seconds":2.553686499595642e-6,"exhaustive_search_seconds":1.1809170246124268e-6,"evaluations":4.828125,"distances_sum":381.45270075164933}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7109375, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.7109375,"f1":0.8238157675657684,"seconds":5.014240741729736e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.21875,"distances_sum":1056.5722968856655}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.787109375, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.787109375,"f1":0.8755125083250092,"seconds":4.688277840614319e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.5078125,"distances_sum":1190.69085715285}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.572265625, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.572265625,"f1":0.7126262626262634,"seconds":3.959983587265015e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.5,"distances_sum":810.9350947673838}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.787109375,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.787109375,"f1":0.8755125083250092,"seconds":4.688277840614319e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.5078125,"distances_sum":1190.69085715285}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9283539377289384,"seconds":5.075708031654358e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.921875,"distances_sum":1383.226955486402}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.853515625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.853515625,"f1":0.916458021145522,"seconds":5.04031777381897e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7890625,"distances_sum":1337.903798034585}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8759765625,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.8759765625,"f1":0.9283539377289384,"seconds":5.075708031654358e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.921875,"distances_sum":1383.226955486402}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":7,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9727506868131871,"seconds":5.379319190979004e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.96875,"distances_sum":1592.6220474444103}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9383871336996342,"seconds":5.684792995452881e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.890625,"distances_sum":1435.8225185884403}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9375,"f1":0.9649954212454217,"seconds":5.159527063369751e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8984375,"distances_sum":1567.3475981947593}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9362809065934073,"seconds":5.17629086971283e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8984375,"distances_sum":1421.4407639446213}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91015625, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.91015625,"f1":0.9491701007326012,"seconds":5.243346095085144e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8359375,"distances_sum":1484.0374856731858}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9727506868131871,"seconds":5.379319190979004e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.96875,"distances_sum":1592.6220474444103}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":7,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9727506868131871,"seconds":5.379319190979004e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.96875,"distances_sum":1592.6220474444103}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.76171875,"f1":0.8527840215340223,"seconds":4.677101969718933e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.28125,"distances_sum":1234.530112644917}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.76171875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.76171875,"f1":0.8527840215340223,"seconds":4.677101969718933e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.28125,"distances_sum":1234.530112644917}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9550480769230774,"seconds":5.031004548072815e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7265625,"distances_sum":1617.4714327778875}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.919921875,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.919921875,"f1":0.9550480769230774,"seconds":5.031004548072815e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.7265625,"distances_sum":1617.4714327778875}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":4,"bsize":13}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.9781994047619051,"seconds":5.4407864809036255e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.890625,"distances_sum":1734.2493889411523}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9553972069597074,"seconds":5.185604095458984e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.828125,"distances_sum":1596.8172150749901}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9599609375,"state":{"ssize":4,"bsize":13},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9781994047619051,"seconds":5.4407864809036255e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.890625,"distances_sum":1734.2493889411523}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9599609375,"state":{"ssize":4,"bsize":13},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9781994047619051,"seconds":5.4407864809036255e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.890625,"distances_sum":1734.2493889411523}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2158203125, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2158203125,"f1":null,"seconds":2.7902424335479736e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":5.2578125,"distances_sum":372.5461780675618}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2158203125,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.2158203125,"f1":null,"seconds":2.7902424335479736e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":5.2578125,"distances_sum":372.5461780675618}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.858133533133534,"seconds":4.665926098823547e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.4765625,"distances_sum":1285.4299272162566}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7626953125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7626953125,"f1":0.858133533133534,"seconds":4.665926098823547e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.4765625,"distances_sum":1285.4299272162566}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.90234375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.90234375,"f1":0.9437385531135536,"seconds":5.342066287994385e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.75,"distances_sum":1657.4437295389862}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8701171875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8701171875,"f1":0.9235093031968038,"seconds":5.258247256278992e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.7265625,"distances_sum":1553.4003451698188}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.90234375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.9437385531135536,"seconds":5.342066287994385e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.75,"distances_sum":1657.4437295389862}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.90234375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.90234375,"f1":0.9437385531135536,"seconds":5.342066287994385e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.75,"distances_sum":1657.4437295389862}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2314453125, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2314453125,"f1":null,"seconds":2.8442591428756714e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":5.359375,"distances_sum":414.53210090214645}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.866496524309025,"seconds":4.772096872329712e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.3203125,"distances_sum":1376.0550705444455}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78125,"state":{"ssize":5,"bsize":5},"perf":{"precision":1.0,"recall":0.78125,"f1":0.866496524309025,"seconds":4.772096872329712e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.3203125,"distances_sum":1376.0550705444455}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8662109375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8662109375,"f1":0.9196173618048624,"seconds":5.06080687046051e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.515625,"distances_sum":1586.0568789076056}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8662109375,"state":{"ssize":3,"bsize":7},"perf":{"precision":1.0,"recall":0.8662109375,"f1":0.9196173618048624,"seconds":5.06080687046051e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.515625,"distances_sum":1586.0568789076056}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9423828125, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9423828125,"f1":0.9680460164835172,"seconds":5.200505256652832e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8671875,"distances_sum":1799.7498107107122}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9656478937728941,"seconds":4.978850483894348e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.90625,"distances_sum":1788.6622690479453}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.869140625, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.869140625,"f1":0.9210544663669671,"seconds":4.902482032775879e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.5390625,"distances_sum":1618.0104916206983}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.93359375, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.93359375,"f1":0.9627804487179491,"seconds":5.124136805534363e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.828125,"distances_sum":1788.6090131705714}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9423828125,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9680460164835172,"seconds":5.200505256652832e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8671875,"distances_sum":1799.7498107107122}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9423828125,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.9423828125,"f1":0.9680460164835172,"seconds":5.200505256652832e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8671875,"distances_sum":1799.7498107107122}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2275390625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2275390625,"f1":null,"seconds":2.6319175958633423e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":5.0390625,"distances_sum":395.7549259742946}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.2275390625,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.2275390625,"f1":null,"seconds":2.6319175958633423e-6,"exhaustive_search_seconds":1.2032687664031982e-6,"evaluations":5.0390625,"distances_sum":395.7549259742946}}, n: 9
mean(cfft.distances) = 0.3354085625352274
mean(cdnet.distances) = 1.2657579361264588
mean(crand.distances) = 0.5682460720564204
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.9199999999999999
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8733333333333334
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8911111111111111
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8911111111111111
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.84
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.888888888888889
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8888888888888888
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.86
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9466666666666667
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.94
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8666666666666666
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9155555555555557
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9133333333333334
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8555555555555556
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.9333333333333332
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8888888888888888
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9022222222222224
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9288888888888889
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9266666666666667
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.888888888888889
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9244444444444445
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8888888888888888
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.8733333333333334
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9355555555555556
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9333333333333335
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8955555555555555
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9066666666666667
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.88
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9066666666666667
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9022222222222221
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8844444444444445
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.8955555555555555
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 8, 14]]
** centroid: 5, normalized-entropy: 0.9456603046006401, [(2, 8), (3, 14)]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 10, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 1)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 3, 1, 2, 3, 1, 2, 3, 3, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 8, 14]]
** centroid: 5, normalized-entropy: 0.9456603046006401, [(2, 8), (3, 14)]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 10, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 1)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 3, 1, 2, 3, 1, 2, 3, 3, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 8, 14]]
** centroid: 5, normalized-entropy: 0.9456603046006401, [(2, 8), (3, 14)]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 10, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 1)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 3, 1, 2, 3, 1, 2, 3, 3, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 8, 14]]
** centroid: 5, normalized-entropy: 0.9456603046006401, [(2, 8), (3, 14)]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 10, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 1)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 3, 1, 2, 3, 1, 2, 3, 3, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 8, 14]]
** centroid: 5, normalized-entropy: 0.9456603046006401, [(2, 8), (3, 14)]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 10, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 1)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 3, 1, 2, 3, 1, 2, 3, 3, 2]
acc = 0.9866666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 8, 14]]
** centroid: 5, normalized-entropy: 0.9456603046006401, [(2, 8), (3, 14)]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 10, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 1)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 3, 1, 2, 3, 1, 2, 3, 3, 2]
acc = 0.94
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 3: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 22]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 8, 14]]
** centroid: 5, normalized-entropy: 0.9456603046006401, [(2, 8), (3, 14)]
*** center 6: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 15, 0]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 9: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 4, 1]]
** centroid: 10, normalized-entropy: 0.7219280948873623, [(2, 4), (3, 1)]
*** center 11: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 3, 1, 2, 3, 1, 2, 3, 3, 2]
acc = 0.9733333333333334
*** finished computation of 12 references, err: [Inf, 0.5288709985216459] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 13, 16]]
** centroid: 1, normalized-entropy: 0.9922666387194963, [(2, 13), (3, 16)]
*** center 2: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 5: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 16, 1]]
** centroid: 6, normalized-entropy: 0.32275695889739825, [(2, 16), (3, 1)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 8: selecting labels [3] (freq >= 1) [from [0, 0, 11]]
*** center 9: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 10: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 4, 3]]
** centroid: 11, normalized-entropy: 0.9852281360342514, [(2, 4), (3, 3)]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
finished with 14 centroids; started with 12
acc = 0.9666666666666667
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.23147150403031078] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23147150403031078, 0.1910584597287049] ***
*** starting iteration: 2; err: [Inf, 0.23147150403031078, 0.1910584597287049] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23147150403031078, 0.1910584597287049, 0.18861028474840758] ***
*** starting iteration: 3; err: [Inf, 0.23147150403031078, 0.1910584597287049, 0.18861028474840758] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23147150403031078, 0.1910584597287049, 0.18861028474840758, 0.18806205732074902] ***
*** finished computation of 7 references, err: [Inf, 0.23147150403031078, 0.1910584597287049, 0.18861028474840758, 0.18806205732074902] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [77, 27, 0]]
** centroid: 1, normalized-entropy: 0.826165427834159, [(1, 77), (2, 27)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [74, 13, 0]]
** centroid: 2, normalized-entropy: 0.6084002154765848, [(1, 74), (2, 13)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 88, 37]]
** centroid: 3, normalized-entropy: 0.8763462289152606, [(2, 88), (3, 37)]
*** center 4: selecting labels [1] (freq >= 2) [from [86, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [53, 19, 0]]
** centroid: 6, normalized-entropy: 0.8325582396745668, [(1, 53), (2, 19)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [7, 80, 0]]
** centroid: 7, normalized-entropy: 0.40379715049939235, [(1, 7), (2, 80)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23388346842862107] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23388346842862107, 0.19390508768291356] ***
*** starting iteration: 2; err: [Inf, 0.23388346842862107, 0.19390508768291356] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23388346842862107, 0.19390508768291356, 0.18753269926138647] ***
*** starting iteration: 3; err: [Inf, 0.23388346842862107, 0.19390508768291356, 0.18753269926138647] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23388346842862107, 0.19390508768291356, 0.18753269926138647, 0.18615874191382537] ***
*** starting iteration: 4; err: [Inf, 0.23388346842862107, 0.19390508768291356, 0.18753269926138647, 0.18615874191382537] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23388346842862107, 0.19390508768291356, 0.18753269926138647, 0.18615874191382537, 0.18510226365011018] ***
*** starting iteration: 5; err: [Inf, 0.23388346842862107, 0.19390508768291356, 0.18753269926138647, 0.18615874191382537, 0.18510226365011018] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23388346842862107, 0.19390508768291356, 0.18753269926138647, 0.18615874191382537, 0.18510226365011018, 0.18405789807061287] ***
*** starting iteration: 6; err: [Inf, 0.23388346842862107, 0.19390508768291356, 0.18753269926138647, 0.18615874191382537, 0.18510226365011018, 0.18405789807061287] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23388346842862107, 0.19390508768291356, 0.18753269926138647, 0.18615874191382537, 0.18510226365011018, 0.18405789807061287, 0.18378870603390732] ***
*** finished computation of 7 references, err: [Inf, 0.23388346842862107, 0.19390508768291356, 0.18753269926138647, 0.18615874191382537, 0.18510226365011018, 0.18405789807061287, 0.18378870603390732] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [99, 3, 0]]
** centroid: 1, normalized-entropy: 0.1914332548141934, [(1, 99), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [84, 9, 0]]
** centroid: 2, normalized-entropy: 0.45868581620054033, [(1, 84), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 79, 20]]
** centroid: 3, normalized-entropy: 0.7259501452943735, [(2, 79), (3, 20)]
*** center 4: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [17, 82, 0]]
** centroid: 5, normalized-entropy: 0.6616179061408356, [(1, 17), (2, 82)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [19, 58, 0]]
** centroid: 6, normalized-entropy: 0.8060914696192223, [(1, 19), (2, 58)]
*** center 7: selecting labels [1] (freq >= 2) [from [111, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2169693720902594] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2169693720902594, 0.19867121574023497] ***
*** starting iteration: 2; err: [Inf, 0.2169693720902594, 0.19867121574023497] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2169693720902594, 0.19867121574023497, 0.19575279260143594] ***
*** starting iteration: 3; err: [Inf, 0.2169693720902594, 0.19867121574023497, 0.19575279260143594] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2169693720902594, 0.19867121574023497, 0.19575279260143594, 0.19294571600480193] ***
*** starting iteration: 4; err: [Inf, 0.2169693720902594, 0.19867121574023497, 0.19575279260143594, 0.19294571600480193] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2169693720902594, 0.19867121574023497, 0.19575279260143594, 0.19294571600480193, 0.19049496217170028] ***
*** starting iteration: 5; err: [Inf, 0.2169693720902594, 0.19867121574023497, 0.19575279260143594, 0.19294571600480193, 0.19049496217170028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2169693720902594, 0.19867121574023497, 0.19575279260143594, 0.19294571600480193, 0.19049496217170028, 0.1895210749087115] ***
*** finished computation of 7 references, err: [Inf, 0.2169693720902594, 0.19867121574023497, 0.19575279260143594, 0.19294571600480193, 0.19049496217170028, 0.1895210749087115] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [51, 58, 0]]
** centroid: 1, normalized-entropy: 0.9970229471810967, [(1, 51), (2, 58)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [48, 23, 0]]
** centroid: 2, normalized-entropy: 0.9086185980409245, [(1, 48), (2, 23)]
*** center 3: selecting labels [1] (freq >= 2) [from [70, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 104, 29]]
** centroid: 4, normalized-entropy: 0.7565818374156769, [(2, 104), (3, 29)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [39, 55, 0]]
** centroid: 5, normalized-entropy: 0.978998737002276, [(1, 39), (2, 55)]
*** center 6: selecting labels [1] (freq >= 2) [from [115, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.37275294414875254] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37275294414875254, 0.31102414093715874] ***
*** starting iteration: 2; err: [Inf, 0.37275294414875254, 0.31102414093715874] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37275294414875254, 0.31102414093715874, 0.3036669491756674] ***
*** starting iteration: 3; err: [Inf, 0.37275294414875254, 0.31102414093715874, 0.3036669491756674] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37275294414875254, 0.31102414093715874, 0.3036669491756674, 0.30264416220667845] ***
*** starting iteration: 4; err: [Inf, 0.37275294414875254, 0.31102414093715874, 0.3036669491756674, 0.30264416220667845] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.37275294414875254, 0.31102414093715874, 0.3036669491756674, 0.30264416220667845, 0.3023848090007588] ***
*** finished computation of 3 references, err: [Inf, 0.37275294414875254, 0.31102414093715874, 0.3036669491756674, 0.30264416220667845, 0.3023848090007588] ***
*** center 1: selecting labels [1] (freq >= 1) [from [204, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [133, 93, 0]]
** centroid: 2, normalized-entropy: 0.9772836820846341, [(1, 133), (2, 93)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [78, 138, 20]]
** centroid: 3, normalized-entropy: 0.8090536535105144, [(1, 78), (2, 138), (3, 20)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.474791731792914] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.474791731792914, 0.3044861758705871] ***
*** starting iteration: 2; err: [Inf, 0.474791731792914, 0.3044861758705871] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.474791731792914, 0.3044861758705871, 0.2924764669029743] ***
*** starting iteration: 3; err: [Inf, 0.474791731792914, 0.3044861758705871, 0.2924764669029743] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.474791731792914, 0.3044861758705871, 0.2924764669029743, 0.289505899582209] ***
*** starting iteration: 4; err: [Inf, 0.474791731792914, 0.3044861758705871, 0.2924764669029743, 0.289505899582209] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.474791731792914, 0.3044861758705871, 0.2924764669029743, 0.289505899582209, 0.28925911981523084] ***
*** finished computation of 3 references, err: [Inf, 0.474791731792914, 0.3044861758705871, 0.2924764669029743, 0.289505899582209, 0.28925911981523084] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [247, 25, 0]]
** centroid: 1, normalized-entropy: 0.44281905100848834, [(1, 247), (2, 25)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [156, 36, 0]]
** centroid: 2, normalized-entropy: 0.6962122601251459, [(1, 156), (2, 36)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 166, 37]]
** centroid: 3, normalized-entropy: 0.6850092170282274, [(2, 166), (3, 37)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3557082614742744] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3557082614742744, 0.32865968369774107] ***
*** starting iteration: 2; err: [Inf, 0.3557082614742744, 0.32865968369774107] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3557082614742744, 0.32865968369774107, 0.3282133090286062] ***
*** finished computation of 3 references, err: [Inf, 0.3557082614742744, 0.32865968369774107, 0.3282133090286062] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [106, 96, 0]]
** centroid: 1, normalized-entropy: 0.9982314418957051, [(1, 106), (2, 96)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [58, 143, 29]]
** centroid: 2, normalized-entropy: 0.8228332486135979, [(1, 58), (2, 143), (3, 29)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [234, 1, 0]]
** centroid: 3, normalized-entropy: 0.03964314068195009, [(1, 234), (2, 1)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3221105718845362] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3221105718845362, 0.23708632705570967] ***
*** starting iteration: 2; err: [Inf, 0.3221105718845362, 0.23708632705570967] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3221105718845362, 0.23708632705570967, 0.2357504633003594] ***
*** starting iteration: 3; err: [Inf, 0.3221105718845362, 0.23708632705570967, 0.2357504633003594] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3221105718845362, 0.23708632705570967, 0.2357504633003594, 0.2354583165163661] ***
*** finished computation of 3 references, err: [Inf, 0.3221105718845362, 0.23708632705570967, 0.2357504633003594, 0.2354583165163661] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [207, 24, 0]]
** centroid: 1, normalized-entropy: 0.481225663841737, [(1, 207), (2, 24)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 168, 20]]
** centroid: 2, normalized-entropy: 0.48890859144051524, [(2, 168), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [208, 39, 0]]
** centroid: 3, normalized-entropy: 0.6292492238560344, [(1, 208), (2, 39)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.28226374510558383] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28226374510558383, 0.23148850632504722] ***
*** starting iteration: 2; err: [Inf, 0.28226374510558383, 0.23148850632504722] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28226374510558383, 0.23148850632504722, 0.23047994240571087] ***
*** starting iteration: 3; err: [Inf, 0.28226374510558383, 0.23148850632504722, 0.23047994240571087] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.28226374510558383, 0.23148850632504722, 0.23047994240571087, 0.23038989505165072] ***
*** finished computation of 3 references, err: [Inf, 0.28226374510558383, 0.23148850632504722, 0.23047994240571087, 0.23038989505165072] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 166, 37]]
** centroid: 1, normalized-entropy: 0.6850092170282274, [(2, 166), (3, 37)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [212, 32, 0]]
** centroid: 2, normalized-entropy: 0.5605769426145328, [(1, 212), (2, 32)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [191, 29, 0]]
** centroid: 3, normalized-entropy: 0.5624035543722615, [(1, 191), (2, 29)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2678892801961173] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2678892801961173, 0.23001219296473255] ***
*** starting iteration: 2; err: [Inf, 0.2678892801961173, 0.23001219296473255] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2678892801961173, 0.23001219296473255, 0.22819623746036521] ***
*** starting iteration: 3; err: [Inf, 0.2678892801961173, 0.23001219296473255, 0.22819623746036521] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2678892801961173, 0.23001219296473255, 0.22819623746036521, 0.22797599537305066] ***
*** finished computation of 3 references, err: [Inf, 0.2678892801961173, 0.23001219296473255, 0.22819623746036521, 0.22797599537305066] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [163, 40, 0]]
** centroid: 1, normalized-entropy: 0.7159772327755203, [(1, 163), (2, 40)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [235, 24, 0]]
** centroid: 2, normalized-entropy: 0.4453002473001341, [(1, 235), (2, 24)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 176, 29]]
** centroid: 3, normalized-entropy: 0.5880585690719635, [(2, 176), (3, 29)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.5345466905874802] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5345466905874802, 0.34260460974329765] ***
*** finished computation of 3 references, err: [Inf, 0.5345466905874802, 0.34260460974329765] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [73, 132, 20]]
** centroid: 1, normalized-entropy: 0.8130440925345533, [(1, 73), (2, 132), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [132, 95, 0]]
** centroid: 2, normalized-entropy: 0.9807497800364837, [(1, 132), (2, 95)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [210, 4, 0]]
** centroid: 3, normalized-entropy: 0.13402979616803584, [(1, 210), (2, 4)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.44437561472081977] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.44437561472081977, 0.3105689650303733] ***
*** finished computation of 3 references, err: [Inf, 0.44437561472081977, 0.3105689650303733] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 172, 37]]
** centroid: 1, normalized-entropy: 0.6735442405161364, [(2, 172), (3, 37)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [286, 42, 0]]
** centroid: 2, normalized-entropy: 0.5520625714615981, [(1, 286), (2, 42)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [117, 13, 0]]
** centroid: 3, normalized-entropy: 0.46899559358928133, [(1, 117), (2, 13)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.345767613452883] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.345767613452883, 0.2977136465116241] ***
*** finished computation of 3 references, err: [Inf, 0.345767613452883, 0.2977136465116241] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [159, 49, 0]]
** centroid: 1, normalized-entropy: 0.78760715923793, [(1, 159), (2, 49)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [239, 16, 0]]
** centroid: 2, normalized-entropy: 0.3382468991827838, [(1, 239), (2, 16)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 175, 29]]
** centroid: 3, normalized-entropy: 0.5898596879060195, [(2, 175), (3, 29)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.40138231183181294] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40138231183181294, 0.310816865132607] ***
*** starting iteration: 2; err: [Inf, 0.40138231183181294, 0.310816865132607] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40138231183181294, 0.310816865132607, 0.3038401629512867] ***
*** starting iteration: 3; err: [Inf, 0.40138231183181294, 0.310816865132607, 0.3038401629512867] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40138231183181294, 0.310816865132607, 0.3038401629512867, 0.3019571939078453] ***
*** starting iteration: 4; err: [Inf, 0.40138231183181294, 0.310816865132607, 0.3038401629512867, 0.3019571939078453] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40138231183181294, 0.310816865132607, 0.3038401629512867, 0.3019571939078453, 0.30174774428208667] ***
*** finished computation of 3 references, err: [Inf, 0.40138231183181294, 0.310816865132607, 0.3038401629512867, 0.3019571939078453, 0.30174774428208667] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [86, 139, 20]]
** centroid: 1, normalized-entropy: 0.81337443604933, [(1, 86), (2, 139), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [122, 92, 0]]
** centroid: 2, normalized-entropy: 0.9857770091118137, [(1, 122), (2, 92)]
*** center 3: selecting labels [1] (freq >= 2) [from [207, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3769885674258624] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3769885674258624, 0.3070815952743105] ***
*** starting iteration: 2; err: [Inf, 0.3769885674258624, 0.3070815952743105] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3769885674258624, 0.3070815952743105, 0.2937775548921711] ***
*** starting iteration: 3; err: [Inf, 0.3769885674258624, 0.3070815952743105, 0.2937775548921711] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3769885674258624, 0.3070815952743105, 0.2937775548921711, 0.290110622680672] ***
*** starting iteration: 4; err: [Inf, 0.3769885674258624, 0.3070815952743105, 0.2937775548921711, 0.290110622680672] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3769885674258624, 0.3070815952743105, 0.2937775548921711, 0.290110622680672, 0.2891584791220736] ***
*** finished computation of 3 references, err: [Inf, 0.3769885674258624, 0.3070815952743105, 0.2937775548921711, 0.290110622680672, 0.2891584791220736] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [256, 27, 0]]
** centroid: 1, normalized-entropy: 0.4542626154169931, [(1, 256), (2, 27)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 161, 37]]
** centroid: 2, normalized-entropy: 0.6948748427830216, [(2, 161), (3, 37)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [147, 39, 0]]
** centroid: 3, normalized-entropy: 0.7408656862339816, [(1, 147), (2, 39)]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.4735361719196816] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4735361719196816, 0.3015394940681901] ***
*** starting iteration: 2; err: [Inf, 0.4735361719196816, 0.3015394940681901] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4735361719196816, 0.3015394940681901, 0.2999886137767062] ***
*** starting iteration: 3; err: [Inf, 0.4735361719196816, 0.3015394940681901, 0.2999886137767062] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4735361719196816, 0.3015394940681901, 0.2999886137767062, 0.29949290306458176] ***
*** finished computation of 3 references, err: [Inf, 0.4735361719196816, 0.3015394940681901, 0.2999886137767062, 0.29949290306458176] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [59, 173, 29]]
** centroid: 1, normalized-entropy: 0.7762983691134793, [(1, 59), (2, 173), (3, 29)]
*** center 2: selecting labels [1] (freq >= 2) [from [220, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [119, 67, 0]]
** centroid: 3, normalized-entropy: 0.9428615552246119, [(1, 119), (2, 67)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.33075797834151144] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33075797834151144, 0.24191784063233873] ***
*** starting iteration: 2; err: [Inf, 0.33075797834151144, 0.24191784063233873] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33075797834151144, 0.24191784063233873, 0.2375918137819951] ***
*** starting iteration: 3; err: [Inf, 0.33075797834151144, 0.24191784063233873, 0.2375918137819951] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33075797834151144, 0.24191784063233873, 0.2375918137819951, 0.23632933680868676] ***
*** finished computation of 3 references, err: [Inf, 0.33075797834151144, 0.24191784063233873, 0.2375918137819951, 0.23632933680868676] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [239, 5, 0]]
** centroid: 1, normalized-entropy: 0.14419304419470713, [(1, 239), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [175, 56, 0]]
** centroid: 2, normalized-entropy: 0.7990485210442682, [(1, 175), (2, 56)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [1, 170, 20]]
** centroid: 3, normalized-entropy: 0.48546076074591343, [(2, 170), (3, 20)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2984829179469965] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2984829179469965, 0.23442087661142627] ***
*** starting iteration: 2; err: [Inf, 0.2984829179469965, 0.23442087661142627] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2984829179469965, 0.23442087661142627, 0.23067627730325557] ***
*** starting iteration: 3; err: [Inf, 0.2984829179469965, 0.23442087661142627, 0.23067627730325557] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2984829179469965, 0.23442087661142627, 0.23067627730325557, 0.23031231151220724] ***
*** finished computation of 3 references, err: [Inf, 0.2984829179469965, 0.23442087661142627, 0.23067627730325557, 0.23031231151220724] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 161, 37]]
** centroid: 1, normalized-entropy: 0.6948748427830216, [(2, 161), (3, 37)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [256, 23, 0]]
** centroid: 2, normalized-entropy: 0.4107093943047743, [(1, 256), (2, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [147, 43, 0]]
** centroid: 3, normalized-entropy: 0.7715334023144439, [(1, 147), (2, 43)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.310680139634613] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.310680139634613, 0.24364489001379735] ***
*** starting iteration: 2; err: [Inf, 0.310680139634613, 0.24364489001379735] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.310680139634613, 0.24364489001379735, 0.23971175633348535] ***
*** starting iteration: 3; err: [Inf, 0.310680139634613, 0.24364489001379735, 0.23971175633348535] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.310680139634613, 0.24364489001379735, 0.23971175633348535, 0.23829694990643943] ***
*** finished computation of 3 references, err: [Inf, 0.310680139634613, 0.24364489001379735, 0.23971175633348535, 0.23829694990643943] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [130, 72, 0]]
** centroid: 1, normalized-entropy: 0.9396846718728562, [(1, 130), (2, 72)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [45, 167, 29]]
** centroid: 2, normalized-entropy: 0.7485101234992738, [(1, 45), (2, 167), (3, 29)]
*** center 3: selecting labels [1] (freq >= 2) [from [223, 1, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.27826269927599634] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27826269927599634, 0.2065953866287775] ***
*** starting iteration: 2; err: [Inf, 0.27826269927599634, 0.2065953866287775] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27826269927599634, 0.2065953866287775, 0.19069887969961707] ***
*** starting iteration: 3; err: [Inf, 0.27826269927599634, 0.2065953866287775, 0.19069887969961707] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27826269927599634, 0.2065953866287775, 0.19069887969961707, 0.18917877735449812] ***
*** starting iteration: 4; err: [Inf, 0.27826269927599634, 0.2065953866287775, 0.19069887969961707, 0.18917877735449812] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27826269927599634, 0.2065953866287775, 0.19069887969961707, 0.18917877735449812, 0.18929820769961486] ***
*** finished computation of 7 references, err: [Inf, 0.27826269927599634, 0.2065953866287775, 0.19069887969961707, 0.18917877735449812, 0.18929820769961486] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [90, 24, 0]]
** centroid: 1, normalized-entropy: 0.7424875695421234, [(1, 90), (2, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [100, 3, 0]]
** centroid: 2, normalized-entropy: 0.18999075553626757, [(1, 100), (2, 3)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 87, 20]]
** centroid: 3, normalized-entropy: 0.6949749673676271, [(2, 87), (3, 20)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [9, 81, 0]]
** centroid: 4, normalized-entropy: 0.46899559358928133, [(1, 9), (2, 81)]
*** center 5: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [48, 36, 0]]
** centroid: 7, normalized-entropy: 0.9852281360342514, [(1, 48), (2, 36)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2600477343548028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2600477343548028, 0.21349698016029048] ***
*** starting iteration: 2; err: [Inf, 0.2600477343548028, 0.21349698016029048] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2600477343548028, 0.21349698016029048, 0.20366976875951442] ***
*** starting iteration: 3; err: [Inf, 0.2600477343548028, 0.21349698016029048, 0.20366976875951442] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2600477343548028, 0.21349698016029048, 0.20366976875951442, 0.20007259689405493] ***
*** starting iteration: 4; err: [Inf, 0.2600477343548028, 0.21349698016029048, 0.20366976875951442, 0.20007259689405493] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2600477343548028, 0.21349698016029048, 0.20366976875951442, 0.20007259689405493, 0.19733626979809518] ***
*** starting iteration: 5; err: [Inf, 0.2600477343548028, 0.21349698016029048, 0.20366976875951442, 0.20007259689405493, 0.19733626979809518] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2600477343548028, 0.21349698016029048, 0.20366976875951442, 0.20007259689405493, 0.19733626979809518, 0.19589699569508723] ***
*** starting iteration: 6; err: [Inf, 0.2600477343548028, 0.21349698016029048, 0.20366976875951442, 0.20007259689405493, 0.19733626979809518, 0.19589699569508723] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2600477343548028, 0.21349698016029048, 0.20366976875951442, 0.20007259689405493, 0.19733626979809518, 0.19589699569508723, 0.1949570725394086] ***
*** finished computation of 7 references, err: [Inf, 0.2600477343548028, 0.21349698016029048, 0.20366976875951442, 0.20007259689405493, 0.19733626979809518, 0.19589699569508723, 0.1949570725394086] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 94, 4]]
** centroid: 1, normalized-entropy: 0.2460225782203316, [(2, 94), (3, 4)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [103, 32, 0]]
** centroid: 2, normalized-entropy: 0.7900781577925237, [(1, 103), (2, 32)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [39, 22, 0]]
** centroid: 3, normalized-entropy: 0.9432261548473416, [(1, 39), (2, 22)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [100, 5, 0]]
** centroid: 4, normalized-entropy: 0.2761954276479391, [(1, 100), (2, 5)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [64, 13, 0]]
** centroid: 5, normalized-entropy: 0.6550239908788728, [(1, 64), (2, 13)]
*** center 6: selecting labels [1] (freq >= 1) [from [97, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 61, 33]]
** centroid: 7, normalized-entropy: 0.9350145588035413, [(2, 61), (3, 33)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.46707613345911386] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.46707613345911386, 0.2548207968593515] ***
*** starting iteration: 2; err: [Inf, 0.46707613345911386, 0.2548207968593515] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.46707613345911386, 0.2548207968593515, 0.2128529310913413] ***
*** starting iteration: 3; err: [Inf, 0.46707613345911386, 0.2548207968593515, 0.2128529310913413] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.46707613345911386, 0.2548207968593515, 0.2128529310913413, 0.20352071164541694] ***
*** starting iteration: 4; err: [Inf, 0.46707613345911386, 0.2548207968593515, 0.2128529310913413, 0.20352071164541694] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.46707613345911386, 0.2548207968593515, 0.2128529310913413, 0.20352071164541694, 0.19851355144483174] ***
*** starting iteration: 5; err: [Inf, 0.46707613345911386, 0.2548207968593515, 0.2128529310913413, 0.20352071164541694, 0.19851355144483174] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.46707613345911386, 0.2548207968593515, 0.2128529310913413, 0.20352071164541694, 0.19851355144483174, 0.194173375912558] ***
*** starting iteration: 6; err: [Inf, 0.46707613345911386, 0.2548207968593515, 0.2128529310913413, 0.20352071164541694, 0.19851355144483174, 0.194173375912558] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.46707613345911386, 0.2548207968593515, 0.2128529310913413, 0.20352071164541694, 0.19851355144483174, 0.194173375912558, 0.19291858711228266] ***
*** starting iteration: 7; err: [Inf, 0.46707613345911386, 0.2548207968593515, 0.2128529310913413, 0.20352071164541694, 0.19851355144483174, 0.194173375912558, 0.19291858711228266] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.46707613345911386, 0.2548207968593515, 0.2128529310913413, 0.20352071164541694, 0.19851355144483174, 0.194173375912558, 0.19291858711228266, 0.19242211388049835] ***
*** finished computation of 7 references, err: [Inf, 0.46707613345911386, 0.2548207968593515, 0.2128529310913413, 0.20352071164541694, 0.19851355144483174, 0.194173375912558, 0.19291858711228266, 0.19242211388049835] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [65, 51, 0]]
** centroid: 1, normalized-entropy: 0.9894671995465737, [(1, 65), (2, 51)]
*** center 2: selecting labels [1] (freq >= 1) [from [66, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [22, 83, 0]]
** centroid: 3, normalized-entropy: 0.7405715327916912, [(1, 22), (2, 83)]
*** center 4: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [47, 18, 0]]
** centroid: 5, normalized-entropy: 0.8512243352621381, [(1, 47), (2, 18)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 87, 29]]
** centroid: 6, normalized-entropy: 0.8112781244591328, [(2, 87), (3, 29)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [120, 1, 0]]
** centroid: 7, normalized-entropy: 0.06905438212565047, [(1, 120), (2, 1)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22441052310532322] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22441052310532322, 0.20270455501450635] ***
*** starting iteration: 2; err: [Inf, 0.22441052310532322, 0.20270455501450635] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22441052310532322, 0.20270455501450635, 0.19633667518988857] ***
*** starting iteration: 3; err: [Inf, 0.22441052310532322, 0.20270455501450635, 0.19633667518988857] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22441052310532322, 0.20270455501450635, 0.19633667518988857, 0.1951226691125302] ***
*** finished computation of 7 references, err: [Inf, 0.22441052310532322, 0.20270455501450635, 0.19633667518988857, 0.1951226691125302] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [46, 49, 0]]
** centroid: 1, normalized-entropy: 0.999280531064971, [(1, 46), (2, 49)]
*** center 2: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [97, 36, 0]]
** centroid: 4, normalized-entropy: 0.842433971260027, [(1, 97), (2, 36)]
*** center 5: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [77, 32, 0]]
** centroid: 6, normalized-entropy: 0.8732984198823629, [(1, 77), (2, 32)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 114, 20]]
** centroid: 7, normalized-entropy: 0.6079696120060726, [(2, 114), (3, 20)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.29620706541338065] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29620706541338065, 0.20647567738513595] ***
*** starting iteration: 2; err: [Inf, 0.29620706541338065, 0.20647567738513595] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29620706541338065, 0.20647567738513595, 0.19563631677366178] ***
*** starting iteration: 3; err: [Inf, 0.29620706541338065, 0.20647567738513595, 0.19563631677366178] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29620706541338065, 0.20647567738513595, 0.19563631677366178, 0.191291113437825] ***
*** finished computation of 7 references, err: [Inf, 0.29620706541338065, 0.20647567738513595, 0.19563631677366178, 0.191291113437825] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [86, 19, 0]]
** centroid: 1, normalized-entropy: 0.6821560732869936, [(1, 86), (2, 19)]
*** center 2: selecting labels [1] (freq >= 1) [from [117, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [70, 21, 0]]
** centroid: 3, normalized-entropy: 0.7793498372920851, [(1, 70), (2, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 74, 37]]
** centroid: 5, normalized-entropy: 0.9182958340544894, [(2, 74), (3, 37)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 68, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [48, 45, 0]]
** centroid: 7, normalized-entropy: 0.9992492479956566, [(1, 48), (2, 45)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20989162645147724] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20989162645147724, 0.2015233270019695] ***
*** starting iteration: 2; err: [Inf, 0.20989162645147724, 0.2015233270019695] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20989162645147724, 0.2015233270019695, 0.2001447958279697] ***
*** starting iteration: 3; err: [Inf, 0.20989162645147724, 0.2015233270019695, 0.2001447958279697] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20989162645147724, 0.2015233270019695, 0.2001447958279697, 0.19890725127151837] ***
*** finished computation of 7 references, err: [Inf, 0.20989162645147724, 0.2015233270019695, 0.2001447958279697, 0.19890725127151837] ***
*** center 1: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [27, 48, 0]]
** centroid: 2, normalized-entropy: 0.9426831892554921, [(1, 27), (2, 48)]
*** center 3: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [37, 69, 0]]
** centroid: 4, normalized-entropy: 0.9332226994125877, [(1, 37), (2, 69)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [64, 29, 0]]
** centroid: 5, normalized-entropy: 0.8952722642402938, [(1, 64), (2, 29)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 94, 29]]
** centroid: 6, normalized-entropy: 0.7879388881327561, [(2, 94), (3, 29)]
*** center 7: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28209576655533053] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28209576655533053, 0.2267733261844999] ***
*** starting iteration: 2; err: [Inf, 0.28209576655533053, 0.2267733261844999] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28209576655533053, 0.2267733261844999, 0.2118142381668449] ***
*** starting iteration: 3; err: [Inf, 0.28209576655533053, 0.2267733261844999, 0.2118142381668449] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28209576655533053, 0.2267733261844999, 0.2118142381668449, 0.19952245024955823] ***
*** finished computation of 7 references, err: [Inf, 0.28209576655533053, 0.2267733261844999, 0.2118142381668449, 0.19952245024955823] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [107, 47, 0]]
** centroid: 1, normalized-entropy: 0.8875485954106697, [(1, 107), (2, 47)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 122, 20]]
** centroid: 2, normalized-entropy: 0.5864477034453907, [(2, 122), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [91, 20, 0]]
** centroid: 3, normalized-entropy: 0.680471054135434, [(1, 91), (2, 20)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [49, 42, 0]]
** centroid: 4, normalized-entropy: 0.9957274520849256, [(1, 49), (2, 42)]
*** center 5: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.25159346533875016] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25159346533875016, 0.21115131219053107] ***
*** starting iteration: 2; err: [Inf, 0.25159346533875016, 0.21115131219053107] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25159346533875016, 0.21115131219053107, 0.19731119096647765] ***
*** starting iteration: 3; err: [Inf, 0.25159346533875016, 0.21115131219053107, 0.19731119096647765] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25159346533875016, 0.21115131219053107, 0.19731119096647765, 0.1921319088750593] ***
*** finished computation of 7 references, err: [Inf, 0.25159346533875016, 0.21115131219053107, 0.19731119096647765, 0.1921319088750593] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [46, 47, 0]]
** centroid: 1, normalized-entropy: 0.9999165959739288, [(1, 46), (2, 47)]
*** center 2: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [99, 25, 0]]
** centroid: 4, normalized-entropy: 0.7251421964171215, [(1, 99), (2, 25)]
*** center 5: selecting labels [1] (freq >= 1) [from [60, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 107, 37]]
** centroid: 6, normalized-entropy: 0.8221004037117993, [(2, 107), (3, 37)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [38, 48, 0]]
** centroid: 7, normalized-entropy: 0.9902246902198684, [(1, 38), (2, 48)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25838484652507965] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25838484652507965, 0.22832147162994076] ***
*** starting iteration: 2; err: [Inf, 0.25838484652507965, 0.22832147162994076] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25838484652507965, 0.22832147162994076, 0.21593600408784275] ***
*** starting iteration: 3; err: [Inf, 0.25838484652507965, 0.22832147162994076, 0.21593600408784275] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25838484652507965, 0.22832147162994076, 0.21593600408784275, 0.2022397893933353] ***
*** finished computation of 7 references, err: [Inf, 0.25838484652507965, 0.22832147162994076, 0.21593600408784275, 0.2022397893933353] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [36, 53, 0]]
** centroid: 1, normalized-entropy: 0.9735190023846809, [(1, 36), (2, 53)]
*** center 2: selecting labels [1] (freq >= 1) [from [154, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [112, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [82, 30, 0]]
** centroid: 4, normalized-entropy: 0.8383729377099398, [(1, 82), (2, 30)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [14, 60, 0]]
** centroid: 5, normalized-entropy: 0.699772221773307, [(1, 14), (2, 60)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 51, 13]]
** centroid: 6, normalized-entropy: 0.7281342378690551, [(2, 51), (3, 13)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 46, 16]]
** centroid: 7, normalized-entropy: 0.8238116333123173, [(2, 46), (3, 16)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25291312747990136] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25291312747990136, 0.20493425788251576] ***
*** finished computation of 7 references, err: [Inf, 0.25291312747990136, 0.20493425788251576] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 87, 20]]
** centroid: 1, normalized-entropy: 0.6949749673676271, [(2, 87), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [15, 90, 0]]
** centroid: 2, normalized-entropy: 0.5916727785823274, [(1, 15), (2, 90)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [89, 38, 0]]
** centroid: 3, normalized-entropy: 0.8803262547496017, [(1, 89), (2, 38)]
*** center 4: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [116, 16, 0]]
** centroid: 5, normalized-entropy: 0.5328350630342235, [(1, 116), (2, 16)]
*** center 6: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.37271462160272933] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37271462160272933, 0.24076471266838007] ***
*** finished computation of 7 references, err: [Inf, 0.37271462160272933, 0.24076471266838007] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 55, 31]]
** centroid: 1, normalized-entropy: 0.9430685934712909, [(2, 55), (3, 31)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 50, 6]]
** centroid: 2, normalized-entropy: 0.4912373418243334, [(2, 50), (3, 6)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [35, 69, 0]]
** centroid: 3, normalized-entropy: 0.9214676689990972, [(1, 35), (2, 69)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [100, 29, 0]]
** centroid: 4, normalized-entropy: 0.7688468846002149, [(1, 100), (2, 29)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [27, 21, 0]]
** centroid: 5, normalized-entropy: 0.9886994082884974, [(1, 27), (2, 21)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [114, 3, 0]]
** centroid: 6, normalized-entropy: 0.17203694935311387, [(1, 114), (2, 3)]
*** center 7: selecting labels [1] (freq >= 1) [from [127, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2993575606880517] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2993575606880517, 0.23984327396891755] ***
*** finished computation of 7 references, err: [Inf, 0.2993575606880517, 0.23984327396891755] ***
*** center 1: selecting labels [1] (freq >= 1) [from [132, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [215, 25, 0]]
** centroid: 2, normalized-entropy: 0.4820661480830933, [(1, 215), (2, 25)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 53, 6]]
** centroid: 3, normalized-entropy: 0.4743454375622396, [(2, 53), (3, 6)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [51, 68, 0]]
** centroid: 4, normalized-entropy: 0.9852281360342514, [(1, 51), (2, 68)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 69, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 25, 23]]
** centroid: 6, normalized-entropy: 0.9987472979361685, [(2, 25), (3, 23)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5231711703461704] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5231711703461704, 0.34527934646910735] ***
*** starting iteration: 2; err: [Inf, 0.5231711703461704, 0.34527934646910735] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.5231711703461704, 0.34527934646910735, 0.34457866215166655] ***
*** finished computation of 3 references, err: [Inf, 0.5231711703461704, 0.34527934646910735, 0.34457866215166655] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [102, 106, 0]]
** centroid: 1, normalized-entropy: 0.9997332130219014, [(1, 102), (2, 106)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [240, 12, 0]]
** centroid: 2, normalized-entropy: 0.2761954276479391, [(1, 240), (2, 12)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [73, 113, 20]]
** centroid: 3, normalized-entropy: 0.8405550344969784, [(1, 73), (2, 113), (3, 20)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3471877399435465] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3471877399435465, 0.31467978792569445] ***
*** starting iteration: 2; err: [Inf, 0.3471877399435465, 0.31467978792569445] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3471877399435465, 0.31467978792569445, 0.30986127646073053] ***
*** starting iteration: 3; err: [Inf, 0.3471877399435465, 0.31467978792569445, 0.30986127646073053] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3471877399435465, 0.31467978792569445, 0.30986127646073053, 0.3071107955194306] ***
*** starting iteration: 4; err: [Inf, 0.3471877399435465, 0.31467978792569445, 0.30986127646073053, 0.3071107955194306] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3471877399435465, 0.31467978792569445, 0.30986127646073053, 0.3071107955194306, 0.3047518093624841] ***
*** starting iteration: 5; err: [Inf, 0.3471877399435465, 0.31467978792569445, 0.30986127646073053, 0.3071107955194306, 0.3047518093624841] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3471877399435465, 0.31467978792569445, 0.30986127646073053, 0.3071107955194306, 0.3047518093624841, 0.30348128609839586] ***
*** starting iteration: 6; err: [Inf, 0.3471877399435465, 0.31467978792569445, 0.30986127646073053, 0.3071107955194306, 0.3047518093624841, 0.30348128609839586] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3471877399435465, 0.31467978792569445, 0.30986127646073053, 0.3071107955194306, 0.3047518093624841, 0.30348128609839586, 0.3031189915691984] ***
*** finished computation of 3 references, err: [Inf, 0.3471877399435465, 0.31467978792569445, 0.30986127646073053, 0.3071107955194306, 0.3047518093624841, 0.30348128609839586, 0.3031189915691984] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [58, 157, 37]]
** centroid: 1, normalized-entropy: 0.8324928090883758, [(1, 58), (2, 157), (3, 37)]
*** center 2: selecting labels [1] (freq >= 2) [from [225, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [120, 70, 0]]
** centroid: 3, normalized-entropy: 0.9494520153879484, [(1, 120), (2, 70)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.39965601697860137] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39965601697860137, 0.30534265536641786] ***
*** starting iteration: 2; err: [Inf, 0.39965601697860137, 0.30534265536641786] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39965601697860137, 0.30534265536641786, 0.3037362150272642] ***
*** starting iteration: 3; err: [Inf, 0.39965601697860137, 0.30534265536641786, 0.3037362150272642] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39965601697860137, 0.30534265536641786, 0.3037362150272642, 0.30261335477255275] ***
*** starting iteration: 4; err: [Inf, 0.39965601697860137, 0.30534265536641786, 0.3037362150272642, 0.30261335477255275] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39965601697860137, 0.30534265536641786, 0.3037362150272642, 0.30261335477255275, 0.30135804232254604] ***
*** starting iteration: 5; err: [Inf, 0.39965601697860137, 0.30534265536641786, 0.3037362150272642, 0.30261335477255275, 0.30135804232254604] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39965601697860137, 0.30534265536641786, 0.3037362150272642, 0.30261335477255275, 0.30135804232254604, 0.301025218370816] ***
*** finished computation of 3 references, err: [Inf, 0.39965601697860137, 0.30534265536641786, 0.3037362150272642, 0.30261335477255275, 0.30135804232254604, 0.301025218370816] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [142, 70, 0]]
** centroid: 1, normalized-entropy: 0.9151190292999326, [(1, 142), (2, 70)]
*** center 2: selecting labels [1] (freq >= 2) [from [209, 0, 0]]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [47, 170, 29]]
** centroid: 3, normalized-entropy: 0.7497163455227607, [(1, 47), (2, 170), (3, 29)]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 13)
[0.9250298202394011, 0.923009836183489, 0.9120078161994329, 0.9070147992303682, 0.8999928071784359, 0.8910856964749181, 0.8879807951664239, 0.8859817901734068, 0.8809947672223122, 0.8750367133600666, 0.8500356644069219, 0.8099836363309416, 0.7779845713977451]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9250298202394011
finished with 13
iteration 2 finished
generating 4 configurations using top 12 configurations, starting with 13)
[0.9250298202394011, 0.923009836183489, 0.9120078161994329, 0.9070147992303682, 0.8999928071784359, 0.8910856964749181, 0.8879807951664239, 0.8859817901734068, 0.8809947672223122, 0.8750367133600666, 0.8500356644069219, 0.8099836363309416, 0.7779845713977451]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9250298202394011
finished with 14
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.2796335097698791] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2796335097698791, 0.18868471058952557] ***
*** starting iteration: 2; err: [Inf, 0.2796335097698791, 0.18868471058952557] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2796335097698791, 0.18868471058952557, 0.16509718162653683] ***
*** starting iteration: 3; err: [Inf, 0.2796335097698791, 0.18868471058952557, 0.16509718162653683] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2796335097698791, 0.18868471058952557, 0.16509718162653683, 0.1558844546092445] ***
*** starting iteration: 4; err: [Inf, 0.2796335097698791, 0.18868471058952557, 0.16509718162653683, 0.1558844546092445] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2796335097698791, 0.18868471058952557, 0.16509718162653683, 0.1558844546092445, 0.15024231229111687] ***
*** starting iteration: 5; err: [Inf, 0.2796335097698791, 0.18868471058952557, 0.16509718162653683, 0.1558844546092445, 0.15024231229111687] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2796335097698791, 0.18868471058952557, 0.16509718162653683, 0.1558844546092445, 0.15024231229111687, 0.1474255663496596] ***
*** starting iteration: 6; err: [Inf, 0.2796335097698791, 0.18868471058952557, 0.16509718162653683, 0.1558844546092445, 0.15024231229111687, 0.1474255663496596] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2796335097698791, 0.18868471058952557, 0.16509718162653683, 0.1558844546092445, 0.15024231229111687, 0.1474255663496596, 0.14640123647981668] ***
*** starting iteration: 7; err: [Inf, 0.2796335097698791, 0.18868471058952557, 0.16509718162653683, 0.1558844546092445, 0.15024231229111687, 0.1474255663496596, 0.14640123647981668] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2796335097698791, 0.18868471058952557, 0.16509718162653683, 0.1558844546092445, 0.15024231229111687, 0.1474255663496596, 0.14640123647981668, 0.14623957244796795] ***
*** finished computation of 7 references, err: [Inf, 0.2796335097698791, 0.18868471058952557, 0.16509718162653683, 0.1558844546092445, 0.15024231229111687, 0.1474255663496596, 0.14640123647981668, 0.14623957244796795] ***
*** center 1: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [7, 100, 0]]
** centroid: 2, normalized-entropy: 0.34859686086959846, [(1, 7), (2, 100)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [73, 32, 0]]
** centroid: 3, normalized-entropy: 0.8870341576828725, [(1, 73), (2, 32)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [96, 13, 0]]
** centroid: 4, normalized-entropy: 0.527247477024035, [(1, 96), (2, 13)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 81, 20]]
** centroid: 5, normalized-entropy: 0.7179499765002912, [(2, 81), (3, 20)]
*** center 6: selecting labels [1] (freq >= 1) [from [68, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [85, 5, 0]]
** centroid: 7, normalized-entropy: 0.3095434291503252, [(1, 85), (2, 5)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3166331869739944] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3166331869739944, 0.17911667702649756] ***
*** starting iteration: 2; err: [Inf, 0.3166331869739944, 0.17911667702649756] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3166331869739944, 0.17911667702649756, 0.15804432545868174] ***
*** starting iteration: 3; err: [Inf, 0.3166331869739944, 0.17911667702649756, 0.15804432545868174] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3166331869739944, 0.17911667702649756, 0.15804432545868174, 0.15326244019619797] ***
*** starting iteration: 4; err: [Inf, 0.3166331869739944, 0.17911667702649756, 0.15804432545868174, 0.15326244019619797] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3166331869739944, 0.17911667702649756, 0.15804432545868174, 0.15326244019619797, 0.15113855787026492] ***
*** starting iteration: 5; err: [Inf, 0.3166331869739944, 0.17911667702649756, 0.15804432545868174, 0.15326244019619797, 0.15113855787026492] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3166331869739944, 0.17911667702649756, 0.15804432545868174, 0.15326244019619797, 0.15113855787026492, 0.14990595130758105] ***
*** starting iteration: 6; err: [Inf, 0.3166331869739944, 0.17911667702649756, 0.15804432545868174, 0.15326244019619797, 0.15113855787026492, 0.14990595130758105] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3166331869739944, 0.17911667702649756, 0.15804432545868174, 0.15326244019619797, 0.15113855787026492, 0.14990595130758105, 0.14920601902133052] ***
*** finished computation of 7 references, err: [Inf, 0.3166331869739944, 0.17911667702649756, 0.15804432545868174, 0.15326244019619797, 0.15113855787026492, 0.14990595130758105, 0.14920601902133052] ***
*** center 1: selecting labels [1] (freq >= 1) [from [111, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [57, 14, 0]]
** centroid: 2, normalized-entropy: 0.7162583911075451, [(1, 57), (2, 14)]
*** center 3: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [88, 17, 0]]
** centroid: 4, normalized-entropy: 0.6388469391771899, [(1, 88), (2, 17)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [32, 47, 0]]
** centroid: 5, normalized-entropy: 0.9738354819891416, [(1, 32), (2, 47)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 105, 37]]
** centroid: 6, normalized-entropy: 0.8275953315947242, [(2, 105), (3, 37)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [46, 44, 0]]
** centroid: 7, normalized-entropy: 0.9996437496778561, [(1, 46), (2, 44)]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.48253565639323054] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.48253565639323054, 0.21589212888513862] ***
*** starting iteration: 2; err: [Inf, 0.48253565639323054, 0.21589212888513862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.48253565639323054, 0.21589212888513862, 0.17956803762109608] ***
*** starting iteration: 3; err: [Inf, 0.48253565639323054, 0.21589212888513862, 0.17956803762109608] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.48253565639323054, 0.21589212888513862, 0.17956803762109608, 0.16502887097981828] ***
*** starting iteration: 4; err: [Inf, 0.48253565639323054, 0.21589212888513862, 0.17956803762109608, 0.16502887097981828] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.48253565639323054, 0.21589212888513862, 0.17956803762109608, 0.16502887097981828, 0.1564261919179669] ***
*** starting iteration: 5; err: [Inf, 0.48253565639323054, 0.21589212888513862, 0.17956803762109608, 0.16502887097981828, 0.1564261919179669] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.48253565639323054, 0.21589212888513862, 0.17956803762109608, 0.16502887097981828, 0.1564261919179669, 0.15075376407889793] ***
*** starting iteration: 6; err: [Inf, 0.48253565639323054, 0.21589212888513862, 0.17956803762109608, 0.16502887097981828, 0.1564261919179669, 0.15075376407889793] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.48253565639323054, 0.21589212888513862, 0.17956803762109608, 0.16502887097981828, 0.1564261919179669, 0.15075376407889793, 0.14781838550820187] ***
*** starting iteration: 7; err: [Inf, 0.48253565639323054, 0.21589212888513862, 0.17956803762109608, 0.16502887097981828, 0.1564261919179669, 0.15075376407889793, 0.14781838550820187] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.48253565639323054, 0.21589212888513862, 0.17956803762109608, 0.16502887097981828, 0.1564261919179669, 0.15075376407889793, 0.14781838550820187, 0.14661598815882895] ***
*** starting iteration: 8; err: [Inf, 0.48253565639323054, 0.21589212888513862, 0.17956803762109608, 0.16502887097981828, 0.1564261919179669, 0.15075376407889793, 0.14781838550820187, 0.14661598815882895] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.48253565639323054, 0.21589212888513862, 0.17956803762109608, 0.16502887097981828, 0.1564261919179669, 0.15075376407889793, 0.14781838550820187, 0.14661598815882895, 0.14620483601521672] ***
*** finished computation of 7 references, err: [Inf, 0.48253565639323054, 0.21589212888513862, 0.17956803762109608, 0.16502887097981828, 0.1564261919179669, 0.15075376407889793, 0.14781838550820187, 0.14661598815882895, 0.14620483601521672] ***
*** center 1: selecting labels [1] (freq >= 1) [from [114, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [90, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 78, 7]]
** centroid: 3, normalized-entropy: 0.4104161417181887, [(2, 78), (3, 7)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [89, 20, 0]]
** centroid: 4, normalized-entropy: 0.6876445334580582, [(1, 89), (2, 20)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [72, 26, 0]]
** centroid: 5, normalized-entropy: 0.834648285181383, [(1, 72), (2, 26)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [33, 49, 0]]
** centroid: 6, normalized-entropy: 0.9723594643683989, [(1, 33), (2, 49)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 67, 22]]
** centroid: 7, normalized-entropy: 0.8067955503968327, [(2, 67), (3, 22)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 14)
[0.9250298202394011, 0.923009836183489, 0.9120078161994329, 0.9070147992303682, 0.8999928071784359, 0.8910856964749181, 0.8879807951664239, 0.8870457283630936, 0.8859817901734068, 0.8809947672223122, 0.8750367133600666, 0.8500356644069219, 0.8099836363309416, 0.7779845713977451]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9250298202394011
finished with 14
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 14)
[0.9250298202394011, 0.923009836183489, 0.9120078161994329, 0.9070147992303682, 0.8999928071784359, 0.8910856964749181, 0.8879807951664239, 0.8870457283630936, 0.8859817901734068, 0.8809947672223122, 0.8750367133600666, 0.8500356644069219, 0.8099836363309416, 0.7779845713977451]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9250298202394011
finished with 14
iteration 5 finished
generating 4 configurations using top 12 configurations, starting with 14)
[0.9250298202394011, 0.923009836183489, 0.9120078161994329, 0.9070147992303682, 0.8999928071784359, 0.8910856964749181, 0.8879807951664239, 0.8870457283630936, 0.8859817901734068, 0.8809947672223122, 0.8750367133600666, 0.8500356644069219, 0.8099836363309416, 0.7779845713977451]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9250298202394011
finished with 14
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 14)
[0.9250298202394011, 0.923009836183489, 0.9120078161994329, 0.9070147992303682, 0.8999928071784359, 0.8910856964749181, 0.8879807951664239, 0.8870457283630936, 0.8859817901734068, 0.8809947672223122, 0.8750367133600666, 0.8500356644069219, 0.8099836363309416, 0.7779845713977451]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9250298202394011
finished with 15
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.3291944607130221] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3291944607130221, 0.2366411786620133] ***
*** finished computation of 3 references, err: [Inf, 0.3291944607130221, 0.2366411786620133] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 172, 20]]
** centroid: 1, normalized-entropy: 0.4820661480830933, [(2, 172), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [174, 55, 0]]
** centroid: 2, normalized-entropy: 0.7953306329810707, [(1, 174), (2, 55)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [241, 4, 0]]
** centroid: 3, normalized-entropy: 0.12028557152738378, [(1, 241), (2, 4)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3492509357441312] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3492509357441312, 0.24817530432858434] ***
*** finished computation of 3 references, err: [Inf, 0.3492509357441312, 0.24817530432858434] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 1) [from [9, 136, 37]]
** centroid: 1, normalized-entropy: 0.6283109741213884, [(1, 9), (2, 136), (3, 37)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [283, 7, 0]]
** centroid: 2, normalized-entropy: 0.16408230665001744, [(1, 283), (2, 7)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [111, 84, 0]]
** centroid: 3, normalized-entropy: 0.9861260846302384, [(1, 111), (2, 84)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2829153344979038] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2829153344979038, 0.22857921518946717] ***
*** finished computation of 3 references, err: [Inf, 0.2829153344979038, 0.22857921518946717] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [159, 40, 0]]
** centroid: 1, normalized-entropy: 0.7239335969973826, [(1, 159), (2, 40)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 177, 29]]
** centroid: 2, normalized-entropy: 0.5862693076521982, [(2, 177), (3, 29)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [239, 23, 0]]
** centroid: 3, normalized-entropy: 0.4290371538400833, [(1, 239), (2, 23)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
generating 4 configurations using top 12 configurations, starting with 15)
[0.9250298202394011, 0.923009836183489, 0.9120078161994329, 0.9070147992303682, 0.8999928071784359, 0.8910856964749181, 0.8879807951664239, 0.8870457283630936, 0.8859817901734068, 0.8809947672223122, 0.8750367133600666, 0.8659857462252671, 0.8500356644069219, 0.8099836363309416, 0.7779845713977451]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9250298202394011
finished with 15
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 15)
[0.9250298202394011, 0.923009836183489, 0.9120078161994329, 0.9070147992303682, 0.8999928071784359, 0.8910856964749181, 0.8879807951664239, 0.8870457283630936, 0.8859817901734068, 0.8809947672223122, 0.8750367133600666, 0.8659857462252671, 0.8500356644069219, 0.8099836363309416, 0.7779845713977451]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l1_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :dnet, 0.6, 1) => 0.9250298202394011
finished with 16
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.33293500992220576] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33293500992220576, 0.30409828534310646] ***
*** starting iteration: 2; err: [Inf, 0.33293500992220576, 0.30409828534310646] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33293500992220576, 0.30409828534310646, 0.2971682299471072] ***
*** starting iteration: 3; err: [Inf, 0.33293500992220576, 0.30409828534310646, 0.2971682299471072] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.33293500992220576, 0.30409828534310646, 0.2971682299471072, 0.295887812672815] ***
*** finished computation of 3 references, err: [Inf, 0.33293500992220576, 0.30409828534310646, 0.2971682299471072, 0.295887812672815] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [3, 188, 20]]
** centroid: 1, normalized-entropy: 0.3519325426902151, [(1, 3), (2, 188), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [252, 4, 0]]
** centroid: 2, normalized-entropy: 0.11611507530476962, [(1, 252), (2, 4)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [160, 39, 0]]
** centroid: 3, normalized-entropy: 0.7138146621637209, [(1, 160), (2, 39)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.41142554232233514] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41142554232233514, 0.31268553760997403] ***
*** starting iteration: 2; err: [Inf, 0.41142554232233514, 0.31268553760997403] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41142554232233514, 0.31268553760997403, 0.3042767479753253] ***
*** starting iteration: 3; err: [Inf, 0.41142554232233514, 0.31268553760997403, 0.3042767479753253] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.41142554232233514, 0.31268553760997403, 0.3042767479753253, 0.3033021467094166] ***
*** finished computation of 3 references, err: [Inf, 0.41142554232233514, 0.31268553760997403, 0.3042767479753253, 0.3033021467094166] ***
*** center 1: selecting labels [1] (freq >= 2) [from [187, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [143, 65, 0]]
** centroid: 2, normalized-entropy: 0.8960382325345574, [(1, 143), (2, 65)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [73, 162, 37]]
** centroid: 3, normalized-entropy: 0.8492667641971562, [(1, 73), (2, 162), (3, 37)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.40755424511512794] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40755424511512794, 0.30607530642635955] ***
*** starting iteration: 2; err: [Inf, 0.40755424511512794, 0.30607530642635955] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40755424511512794, 0.30607530642635955, 0.2961289759102589] ***
*** starting iteration: 3; err: [Inf, 0.40755424511512794, 0.30607530642635955, 0.2961289759102589] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40755424511512794, 0.30607530642635955, 0.2961289759102589, 0.29358372131063754] ***
*** finished computation of 3 references, err: [Inf, 0.40755424511512794, 0.30607530642635955, 0.2961289759102589, 0.29358372131063754] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [202, 15, 0]]
** centroid: 1, normalized-entropy: 0.3626476451173351, [(1, 202), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [196, 49, 0]]
** centroid: 2, normalized-entropy: 0.7219280948873623, [(1, 196), (2, 49)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 176, 29]]
** centroid: 3, normalized-entropy: 0.5880585690719635, [(2, 176), (3, 29)]
finished with 6 centroids; started with 3
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.23405609728954732] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23405609728954732, 0.20418340239301325] ***
*** starting iteration: 2; err: [Inf, 0.23405609728954732, 0.20418340239301325] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23405609728954732, 0.20418340239301325, 0.20121217136643826] ***
*** starting iteration: 3; err: [Inf, 0.23405609728954732, 0.20418340239301325, 0.20121217136643826] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23405609728954732, 0.20418340239301325, 0.20121217136643826, 0.2004274701620452] ***
*** finished computation of 7 references, err: [Inf, 0.23405609728954732, 0.20418340239301325, 0.20121217136643826, 0.2004274701620452] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [54, 41, 0]]
** centroid: 1, normalized-entropy: 0.9864497419502243, [(1, 54), (2, 41)]
*** center 2: selecting labels [1] (freq >= 1) [from [155, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [3, 149, 0]]
** centroid: 3, normalized-entropy: 0.13996042758157545, [(1, 3), (2, 149)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 115, 43]]
** centroid: 4, normalized-entropy: 0.8445355563366387, [(2, 115), (3, 43)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [167, 44, 0]]
** centroid: 5, normalized-entropy: 0.7386650272701816, [(1, 167), (2, 44)]
*** center 6: selecting labels [1] (freq >= 1) [from [115, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [114, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3152247266829945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3152247266829945, 0.2213536815084517] ***
*** starting iteration: 2; err: [Inf, 0.3152247266829945, 0.2213536815084517] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3152247266829945, 0.2213536815084517, 0.2065150777231902] ***
*** starting iteration: 3; err: [Inf, 0.3152247266829945, 0.2213536815084517, 0.2065150777231902] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3152247266829945, 0.2213536815084517, 0.2065150777231902, 0.19643697067536414] ***
*** finished computation of 7 references, err: [Inf, 0.3152247266829945, 0.2213536815084517, 0.2065150777231902, 0.19643697067536414] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [27, 26, 0]]
** centroid: 1, normalized-entropy: 0.9997431860710851, [(1, 27), (2, 26)]
*** center 2: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [59, 44, 0]]
** centroid: 3, normalized-entropy: 0.984646826868755, [(1, 59), (2, 44)]
*** center 4: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 41, 20]]
** centroid: 5, normalized-entropy: 0.9127341558073343, [(2, 41), (3, 20)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 61, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [39, 10, 0]]
** centroid: 7, normalized-entropy: 0.7300166301457938, [(1, 39), (2, 10)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.33460758839175103] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33460758839175103, 0.22358467230387033] ***
*** starting iteration: 2; err: [Inf, 0.33460758839175103, 0.22358467230387033] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33460758839175103, 0.22358467230387033, 0.20549016039632262] ***
*** starting iteration: 3; err: [Inf, 0.33460758839175103, 0.22358467230387033, 0.20549016039632262] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.33460758839175103, 0.22358467230387033, 0.20549016039632262, 0.1953502195053734] ***
*** finished computation of 7 references, err: [Inf, 0.33460758839175103, 0.22358467230387033, 0.20549016039632262, 0.1953502195053734] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 73, 24]]
** centroid: 1, normalized-entropy: 0.8071675554288905, [(2, 73), (3, 24)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [19, 41, 0]]
** centroid: 2, normalized-entropy: 0.9007196798623592, [(1, 19), (2, 41)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [79, 7, 0]]
** centroid: 3, normalized-entropy: 0.40707680632541937, [(1, 79), (2, 7)]
*** center 4: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [5, 64, 0]]
** centroid: 6, normalized-entropy: 0.3750514064240124, [(1, 5), (2, 64)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [38, 1, 0]]
** centroid: 7, normalized-entropy: 0.17203694935311387, [(1, 38), (2, 1)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24420463010296226] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24420463010296226, 0.21173183824308217] ***
*** starting iteration: 2; err: [Inf, 0.24420463010296226, 0.21173183824308217] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24420463010296226, 0.21173183824308217, 0.19929685870371758] ***
*** starting iteration: 3; err: [Inf, 0.24420463010296226, 0.21173183824308217, 0.19929685870371758] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24420463010296226, 0.21173183824308217, 0.19929685870371758, 0.19195350779686124] ***
*** finished computation of 7 references, err: [Inf, 0.24420463010296226, 0.21173183824308217, 0.19929685870371758, 0.19195350779686124] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [4, 63, 0]]
** centroid: 1, normalized-entropy: 0.32625881462949274, [(1, 4), (2, 63)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [122, 1, 0]]
** centroid: 2, normalized-entropy: 0.06812462580532001, [(1, 122), (2, 1)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [15, 20, 0]]
** centroid: 3, normalized-entropy: 0.9852281360342514, [(1, 15), (2, 20)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [28, 33, 0]]
** centroid: 4, normalized-entropy: 0.995148095654003, [(1, 28), (2, 33)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 65, 22]]
** centroid: 5, normalized-entropy: 0.8158009273789572, [(2, 65), (3, 22)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [52, 3, 0]]
** centroid: 6, normalized-entropy: 0.30540057087920036, [(1, 52), (2, 3)]
*** center 7: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3415574440546334] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3415574440546334, 0.23309470940008759] ***
*** starting iteration: 2; err: [Inf, 0.3415574440546334, 0.23309470940008759] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3415574440546334, 0.23309470940008759, 0.20555901911947877] ***
*** starting iteration: 3; err: [Inf, 0.3415574440546334, 0.23309470940008759, 0.20555901911947877] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3415574440546334, 0.23309470940008759, 0.20555901911947877, 0.19560456824675201] ***
*** finished computation of 7 references, err: [Inf, 0.3415574440546334, 0.23309470940008759, 0.20555901911947877, 0.19560456824675201] ***
*** center 1: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [55, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [23, 59, 0]]
** centroid: 3, normalized-entropy: 0.8561146277685725, [(1, 23), (2, 59)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 54, 21]]
** centroid: 4, normalized-entropy: 0.8554508105601307, [(2, 54), (3, 21)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 36, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [28, 24, 0]]
** centroid: 6, normalized-entropy: 0.9957274520849256, [(1, 28), (2, 24)]
*** center 7: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27682773532904686] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27682773532904686, 0.22049539817497135] ***
*** starting iteration: 2; err: [Inf, 0.27682773532904686, 0.22049539817497135] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27682773532904686, 0.22049539817497135, 0.20953175112558528] ***
*** starting iteration: 3; err: [Inf, 0.27682773532904686, 0.22049539817497135, 0.20953175112558528] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27682773532904686, 0.22049539817497135, 0.20953175112558528, 0.2020587535984814] ***
*** finished computation of 7 references, err: [Inf, 0.27682773532904686, 0.22049539817497135, 0.20953175112558528, 0.2020587535984814] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [50, 14, 0]]
** centroid: 1, normalized-entropy: 0.7578784625383954, [(1, 50), (2, 14)]
*** center 2: selecting labels [1] (freq >= 1) [from [54, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [42, 25, 0]]
** centroid: 3, normalized-entropy: 0.9530483471581301, [(1, 42), (2, 25)]
*** center 4: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 77, 22]]
** centroid: 5, normalized-entropy: 0.7642045065086204, [(2, 77), (3, 22)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [47, 56, 0]]
** centroid: 6, normalized-entropy: 0.994485462483463, [(1, 47), (2, 56)]
*** center 7: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.28230167378298937] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28230167378298937, 0.22336632289364933] ***
*** starting iteration: 2; err: [Inf, 0.28230167378298937, 0.22336632289364933] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28230167378298937, 0.22336632289364933, 0.20823111991025509] ***
*** starting iteration: 3; err: [Inf, 0.28230167378298937, 0.22336632289364933, 0.20823111991025509] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28230167378298937, 0.22336632289364933, 0.20823111991025509, 0.1932956165689975] ***
*** finished computation of 7 references, err: [Inf, 0.28230167378298937, 0.22336632289364933, 0.20823111991025509, 0.1932956165689975] ***
*** center 1: selecting labels [1] (freq >= 1) [from [91, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 63, 23]]
** centroid: 2, normalized-entropy: 0.8377698690066789, [(2, 63), (3, 23)]
*** center 3: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [74, 1, 0]]
** centroid: 4, normalized-entropy: 0.10215803640865054, [(1, 74), (2, 1)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [49, 4, 0]]
** centroid: 5, normalized-entropy: 0.3860189005698936, [(1, 49), (2, 4)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [11, 51, 0]]
** centroid: 6, normalized-entropy: 0.674398887071447, [(1, 11), (2, 51)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [5, 46, 0]]
** centroid: 7, normalized-entropy: 0.462749058578174, [(1, 5), (2, 46)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2779607703592628] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2779607703592628, 0.21708363455720245] ***
*** starting iteration: 2; err: [Inf, 0.2779607703592628, 0.21708363455720245] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2779607703592628, 0.21708363455720245, 0.2011331391520798] ***
*** starting iteration: 3; err: [Inf, 0.2779607703592628, 0.21708363455720245, 0.2011331391520798] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2779607703592628, 0.21708363455720245, 0.2011331391520798, 0.19609198106452821] ***
*** finished computation of 7 references, err: [Inf, 0.2779607703592628, 0.21708363455720245, 0.2011331391520798, 0.19609198106452821] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [90, 1, 0]]
** centroid: 1, normalized-entropy: 0.08728058888363333, [(1, 90), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [3, 54, 0]]
** centroid: 2, normalized-entropy: 0.2974722489192896, [(1, 3), (2, 54)]
*** center 3: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [39, 21, 0]]
** centroid: 4, normalized-entropy: 0.9340680553754911, [(1, 39), (2, 21)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 56, 19]]
** centroid: 5, normalized-entropy: 0.8165187119538281, [(2, 56), (3, 19)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [70, 3, 0]]
** centroid: 6, normalized-entropy: 0.24729443986205674, [(1, 70), (2, 3)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [30, 39, 0]]
** centroid: 7, normalized-entropy: 0.9876925088958032, [(1, 30), (2, 39)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22283911790512503] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22283911790512503, 0.18985379260778426] ***
*** starting iteration: 2; err: [Inf, 0.22283911790512503, 0.18985379260778426] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22283911790512503, 0.18985379260778426, 0.18894634304195643] ***
*** finished computation of 7 references, err: [Inf, 0.22283911790512503, 0.18985379260778426, 0.18894634304195643] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 58, 20]]
** centroid: 1, normalized-entropy: 0.8212809417449864, [(2, 58), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [74, 17, 0]]
** centroid: 2, normalized-entropy: 0.6947570868163001, [(1, 74), (2, 17)]
*** center 3: selecting labels [1] (freq >= 1) [from [101, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [26, 49, 0]]
** centroid: 5, normalized-entropy: 0.9310558233850329, [(1, 26), (2, 49)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [4, 47, 0]]
** centroid: 6, normalized-entropy: 0.3966277727783787, [(1, 4), (2, 47)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [37, 2, 0]]
** centroid: 7, normalized-entropy: 0.29181825659888555, [(1, 37), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.30848312559816987] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30848312559816987, 0.23354515160433947] ***
*** starting iteration: 2; err: [Inf, 0.30848312559816987, 0.23354515160433947] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30848312559816987, 0.23354515160433947, 0.22141801407933234] ***
*** starting iteration: 3; err: [Inf, 0.30848312559816987, 0.23354515160433947, 0.22141801407933234] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.30848312559816987, 0.23354515160433947, 0.22141801407933234, 0.20776423563808202] ***
*** finished computation of 7 references, err: [Inf, 0.30848312559816987, 0.23354515160433947, 0.22141801407933234, 0.20776423563808202] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [41, 37, 0]]
** centroid: 1, normalized-entropy: 0.9981021327390103, [(1, 41), (2, 37)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [44, 15, 0]]
** centroid: 2, normalized-entropy: 0.8179252501386403, [(1, 44), (2, 15)]
*** center 3: selecting labels [1] (freq >= 1) [from [71, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 90, 22]]
** centroid: 4, normalized-entropy: 0.7147274731317893, [(2, 90), (3, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [40, 31, 0]]
** centroid: 5, normalized-entropy: 0.9883779727795042, [(1, 40), (2, 31)]
*** center 6: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [45, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.31632829540222884] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31632829540222884, 0.2106234580744058] ***
*** starting iteration: 2; err: [Inf, 0.31632829540222884, 0.2106234580744058] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31632829540222884, 0.2106234580744058, 0.20246378855034708] ***
*** starting iteration: 3; err: [Inf, 0.31632829540222884, 0.2106234580744058, 0.20246378855034708] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.31632829540222884, 0.2106234580744058, 0.20246378855034708, 0.1976641425639391] ***
*** finished computation of 7 references, err: [Inf, 0.31632829540222884, 0.2106234580744058, 0.20246378855034708, 0.1976641425639391] ***
*** center 1: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [37, 18, 0]]
** centroid: 2, normalized-entropy: 0.9121156307204275, [(1, 37), (2, 18)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [15, 41, 0]]
** centroid: 3, normalized-entropy: 0.8383729377099398, [(1, 15), (2, 41)]
*** center 4: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 42, 3]]
** centroid: 5, normalized-entropy: 0.3533593350214213, [(2, 42), (3, 3)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [78, 28, 0]]
** centroid: 6, normalized-entropy: 0.8329458235361399, [(1, 78), (2, 28)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 35, 17]]
** centroid: 7, normalized-entropy: 0.9117517586347538, [(2, 35), (3, 17)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3037550451653078] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3037550451653078, 0.20284035355597735] ***
*** starting iteration: 2; err: [Inf, 0.3037550451653078, 0.20284035355597735] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3037550451653078, 0.20284035355597735, 0.1953490878045559] ***
*** starting iteration: 3; err: [Inf, 0.3037550451653078, 0.20284035355597735, 0.1953490878045559] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3037550451653078, 0.20284035355597735, 0.1953490878045559, 0.19426266729831695] ***
*** finished computation of 7 references, err: [Inf, 0.3037550451653078, 0.20284035355597735, 0.1953490878045559, 0.19426266729831695] ***
*** center 1: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 64, 20]]
** centroid: 2, normalized-entropy: 0.7918583525674836, [(2, 64), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [25, 58, 0]]
** centroid: 3, normalized-entropy: 0.8827586787955116, [(1, 25), (2, 58)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [50, 6, 0]]
** centroid: 4, normalized-entropy: 0.4912373418243334, [(1, 50), (2, 6)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [50, 48, 0]]
** centroid: 5, normalized-entropy: 0.9996995428565171, [(1, 50), (2, 48)]
*** center 6: selecting labels [1] (freq >= 1) [from [52, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [70, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.27454250018764287] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27454250018764287, 0.21415219144150616] ***
*** starting iteration: 2; err: [Inf, 0.27454250018764287, 0.21415219144150616] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27454250018764287, 0.21415219144150616, 0.19570870830118656] ***
*** starting iteration: 3; err: [Inf, 0.27454250018764287, 0.21415219144150616, 0.19570870830118656] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.27454250018764287, 0.21415219144150616, 0.19570870830118656, 0.19099983483366667] ***
*** finished computation of 7 references, err: [Inf, 0.27454250018764287, 0.21415219144150616, 0.19570870830118656, 0.19099983483366667] ***
*** center 1: selecting labels [1] (freq >= 1) [from [112, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [24, 40, 0]]
** centroid: 2, normalized-entropy: 0.954434002924965, [(1, 24), (2, 40)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [56, 43, 0]]
** centroid: 3, normalized-entropy: 0.9875257101057102, [(1, 56), (2, 43)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 42, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 50, 18]]
** centroid: 5, normalized-entropy: 0.8337649072106652, [(2, 50), (3, 18)]
*** center 6: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [49, 7, 0]]
** centroid: 7, normalized-entropy: 0.5435644431995963, [(1, 49), (2, 7)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23005333575606346] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23005333575606346, 0.20858438786678016] ***
*** starting iteration: 2; err: [Inf, 0.23005333575606346, 0.20858438786678016] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23005333575606346, 0.20858438786678016, 0.19889654114749283] ***
*** starting iteration: 3; err: [Inf, 0.23005333575606346, 0.20858438786678016, 0.19889654114749283] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23005333575606346, 0.20858438786678016, 0.19889654114749283, 0.19308300281502305] ***
*** finished computation of 7 references, err: [Inf, 0.23005333575606346, 0.20858438786678016, 0.19889654114749283, 0.19308300281502305] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [48, 8, 0]]
** centroid: 1, normalized-entropy: 0.5916727785823274, [(1, 48), (2, 8)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [87, 1, 0]]
** centroid: 2, normalized-entropy: 0.08970338978685011, [(1, 87), (2, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [80, 0, 0]]
*** center 4: selecting labels [1, 2, 3] (freq >= 1) [from [1, 57, 6]]
** centroid: 4, normalized-entropy: 0.35505073239011736, [(1, 1), (2, 57), (3, 6)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 58, 19]]
** centroid: 5, normalized-entropy: 0.8060914696192223, [(2, 58), (3, 19)]
*** center 6: selecting labels [1] (freq >= 1) [from [76, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 59, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.283651198701933] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.283651198701933, 0.2026195405339822] ***
*** starting iteration: 2; err: [Inf, 0.283651198701933, 0.2026195405339822] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.283651198701933, 0.2026195405339822, 0.19455789416842162] ***
*** starting iteration: 3; err: [Inf, 0.283651198701933, 0.2026195405339822, 0.19455789416842162] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.283651198701933, 0.2026195405339822, 0.19455789416842162, 0.19181370492000133] ***
*** finished computation of 7 references, err: [Inf, 0.283651198701933, 0.2026195405339822, 0.19455789416842162, 0.19181370492000133] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [92, 25, 0]]
** centroid: 1, normalized-entropy: 0.7484492947832908, [(1, 92), (2, 25)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 52, 1]]
** centroid: 2, normalized-entropy: 0.13503620280212753, [(2, 52), (3, 1)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [30, 23, 0]]
** centroid: 3, normalized-entropy: 0.987380023288353, [(1, 30), (2, 23)]
*** center 4: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [23, 22, 0]]
** centroid: 6, normalized-entropy: 0.9996437496778561, [(1, 23), (2, 22)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 55, 20]]
** centroid: 7, normalized-entropy: 0.8366407419411671, [(2, 55), (3, 20)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.26874899479188025] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26874899479188025, 0.2046442683627829] ***
*** starting iteration: 2; err: [Inf, 0.26874899479188025, 0.2046442683627829] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26874899479188025, 0.2046442683627829, 0.19420498748123646] ***
*** starting iteration: 3; err: [Inf, 0.26874899479188025, 0.2046442683627829, 0.19420498748123646] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.26874899479188025, 0.2046442683627829, 0.19420498748123646, 0.1918631868250668] ***
*** finished computation of 7 references, err: [Inf, 0.26874899479188025, 0.2046442683627829, 0.19420498748123646, 0.1918631868250668] ***
*** center 1: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [12, 73, 0]]
** centroid: 2, normalized-entropy: 0.5873116089977589, [(1, 12), (2, 73)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [37, 4, 0]]
** centroid: 3, normalized-entropy: 0.4612160405139095, [(1, 37), (2, 4)]
*** center 4: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [67, 22, 0]]
** centroid: 6, normalized-entropy: 0.8067955503968327, [(1, 67), (2, 22)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 81, 20]]
** centroid: 7, normalized-entropy: 0.7179499765002912, [(2, 81), (3, 20)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.25224326667562125] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25224326667562125, 0.20541589286364614] ***
*** starting iteration: 2; err: [Inf, 0.25224326667562125, 0.20541589286364614] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25224326667562125, 0.20541589286364614, 0.19690883083269] ***
*** starting iteration: 3; err: [Inf, 0.25224326667562125, 0.20541589286364614, 0.19690883083269] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.25224326667562125, 0.20541589286364614, 0.19690883083269, 0.19548658105544747] ***
*** finished computation of 7 references, err: [Inf, 0.25224326667562125, 0.20541589286364614, 0.19690883083269, 0.19548658105544747] ***
*** center 1: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [48, 44, 0]]
** centroid: 2, normalized-entropy: 0.9986359641585719, [(1, 48), (2, 44)]
*** center 3: selecting labels [1] (freq >= 1) [from [86, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [53, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 61, 20]]
** centroid: 5, normalized-entropy: 0.8063495153650776, [(2, 61), (3, 20)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [25, 18, 0]]
** centroid: 6, normalized-entropy: 0.9807983646944296, [(1, 25), (2, 18)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [6, 51, 0]]
** centroid: 7, normalized-entropy: 0.48546076074591343, [(1, 6), (2, 51)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3191375348456204] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3191375348456204, 0.20900474542565645] ***
*** starting iteration: 2; err: [Inf, 0.3191375348456204, 0.20900474542565645] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3191375348456204, 0.20900474542565645, 0.19350822455435993] ***
*** starting iteration: 3; err: [Inf, 0.3191375348456204, 0.20900474542565645, 0.19350822455435993] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3191375348456204, 0.20900474542565645, 0.19350822455435993, 0.18793468647263945] ***
*** finished computation of 7 references, err: [Inf, 0.3191375348456204, 0.20900474542565645, 0.19350822455435993, 0.18793468647263945] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [51, 13, 0]]
** centroid: 1, normalized-entropy: 0.7281342378690551, [(1, 51), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [57, 15, 0]]
** centroid: 2, normalized-entropy: 0.7382848661434506, [(1, 57), (2, 15)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [61, 3, 0]]
** centroid: 3, normalized-entropy: 0.2729708579140699, [(1, 61), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [5, 68, 0]]
** centroid: 4, normalized-entropy: 0.3602750564216625, [(1, 5), (2, 68)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 78, 20]]
** centroid: 5, normalized-entropy: 0.7300166301457938, [(2, 78), (3, 20)]
*** center 6: selecting labels [1] (freq >= 1) [from [50, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3394404982179403] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3394404982179403, 0.24533252162672578] ***
*** starting iteration: 2; err: [Inf, 0.3394404982179403, 0.24533252162672578] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3394404982179403, 0.24533252162672578, 0.2184999747714028] ***
*** starting iteration: 3; err: [Inf, 0.3394404982179403, 0.24533252162672578, 0.2184999747714028] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3394404982179403, 0.24533252162672578, 0.2184999747714028, 0.2067897828500718] ***
*** finished computation of 7 references, err: [Inf, 0.3394404982179403, 0.24533252162672578, 0.2184999747714028, 0.2067897828500718] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 94, 27]]
** centroid: 1, normalized-entropy: 0.765860637141441, [(2, 94), (3, 27)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [85, 1, 0]]
** centroid: 2, normalized-entropy: 0.09140162014739266, [(1, 85), (2, 1)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [8, 65, 0]]
** centroid: 3, normalized-entropy: 0.4986751363204345, [(1, 8), (2, 65)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [86, 25, 0]]
** centroid: 4, normalized-entropy: 0.7695944821271463, [(1, 86), (2, 25)]
*** center 5: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22147130658477546] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22147130658477546, 0.19495249474607407] ***
*** starting iteration: 2; err: [Inf, 0.22147130658477546, 0.19495249474607407] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22147130658477546, 0.19495249474607407, 0.19074540463485756] ***
*** starting iteration: 3; err: [Inf, 0.22147130658477546, 0.19495249474607407, 0.19074540463485756] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22147130658477546, 0.19495249474607407, 0.19074540463485756, 0.1894156399546191] ***
*** finished computation of 7 references, err: [Inf, 0.22147130658477546, 0.19495249474607407, 0.19074540463485756, 0.1894156399546191] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [67, 5, 0]]
** centroid: 1, normalized-entropy: 0.3638469981769295, [(1, 67), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [75, 7, 0]]
** centroid: 2, normalized-entropy: 0.42080948947668984, [(1, 75), (2, 7)]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 73, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [61, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [47, 29, 0]]
** centroid: 6, normalized-entropy: 0.9591495543968941, [(1, 47), (2, 29)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 58, 22]]
** centroid: 7, normalized-entropy: 0.8485481782946159, [(2, 58), (3, 22)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3122630590070039] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3122630590070039, 0.24609540066309274] ***
*** starting iteration: 2; err: [Inf, 0.3122630590070039, 0.24609540066309274] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3122630590070039, 0.24609540066309274, 0.22034129632962868] ***
*** starting iteration: 3; err: [Inf, 0.3122630590070039, 0.24609540066309274, 0.22034129632962868] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3122630590070039, 0.24609540066309274, 0.22034129632962868, 0.2126821648105979] ***
*** finished computation of 7 references, err: [Inf, 0.3122630590070039, 0.24609540066309274, 0.22034129632962868, 0.2126821648105979] ***
*** center 1: selecting labels [1] (freq >= 1) [from [25, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [56, 42, 0]]
** centroid: 2, normalized-entropy: 0.9852281360342514, [(1, 56), (2, 42)]
*** center 3: selecting labels [1] (freq >= 1) [from [32, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [72, 8, 0]]
** centroid: 4, normalized-entropy: 0.46899559358928133, [(1, 72), (2, 8)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [65, 27, 0]]
** centroid: 5, normalized-entropy: 0.8731720603476306, [(1, 65), (2, 27)]
*** center 6: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 102, 22]]
** centroid: 7, normalized-entropy: 0.674398887071447, [(2, 102), (3, 22)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22382056439481676] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22382056439481676, 0.19790659804455937] ***
*** starting iteration: 2; err: [Inf, 0.22382056439481676, 0.19790659804455937] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22382056439481676, 0.19790659804455937, 0.18980033130198717] ***
*** starting iteration: 3; err: [Inf, 0.22382056439481676, 0.19790659804455937, 0.18980033130198717] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22382056439481676, 0.19790659804455937, 0.18980033130198717, 0.18730387808382512] ***
*** finished computation of 7 references, err: [Inf, 0.22382056439481676, 0.19790659804455937, 0.18980033130198717, 0.18730387808382512] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [5, 21, 0]]
** centroid: 1, normalized-entropy: 0.7062740891876008, [(1, 5), (2, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [31, 38, 0]]
** centroid: 3, normalized-entropy: 0.992563136012236, [(1, 31), (2, 38)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [19, 54, 0]]
** centroid: 4, normalized-entropy: 0.8271595195340525, [(1, 19), (2, 54)]
*** center 5: selecting labels [1] (freq >= 1) [from [104, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 61, 19]]
** centroid: 6, normalized-entropy: 0.79085809055281, [(2, 61), (3, 19)]
*** center 7: selecting labels [1] (freq >= 1) [from [59, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.35949631485529243] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.35949631485529243, 0.22591001046448947] ***
*** starting iteration: 2; err: [Inf, 0.35949631485529243, 0.22591001046448947] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.35949631485529243, 0.22591001046448947, 0.20081469790730624] ***
*** starting iteration: 3; err: [Inf, 0.35949631485529243, 0.22591001046448947, 0.20081469790730624] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.35949631485529243, 0.22591001046448947, 0.20081469790730624, 0.1947121172454208] ***
*** finished computation of 7 references, err: [Inf, 0.35949631485529243, 0.22591001046448947, 0.20081469790730624, 0.1947121172454208] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [61, 4, 0]]
** centroid: 1, normalized-entropy: 0.33352200393097675, [(1, 61), (2, 4)]
*** center 2: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [37, 27, 0]]
** centroid: 3, normalized-entropy: 0.9823166080205502, [(1, 37), (2, 27)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 63, 23]]
** centroid: 4, normalized-entropy: 0.8377698690066789, [(2, 63), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [94, 1, 0]]
** centroid: 5, normalized-entropy: 0.08426242877623306, [(1, 94), (2, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [40, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [3, 72, 0]]
** centroid: 7, normalized-entropy: 0.24229218908241482, [(1, 3), (2, 72)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2572782578505576] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2572782578505576, 0.19265434642881155] ***
*** starting iteration: 2; err: [Inf, 0.2572782578505576, 0.19265434642881155] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2572782578505576, 0.19265434642881155, 0.1890531528517604] ***
*** starting iteration: 3; err: [Inf, 0.2572782578505576, 0.19265434642881155, 0.1890531528517604] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2572782578505576, 0.19265434642881155, 0.1890531528517604, 0.18810876087192446] ***
*** finished computation of 7 references, err: [Inf, 0.2572782578505576, 0.19265434642881155, 0.1890531528517604, 0.18810876087192446] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 47, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [35, 39, 0]]
** centroid: 2, normalized-entropy: 0.9978913098356861, [(1, 35), (2, 39)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [5, 47, 0]]
** centroid: 3, normalized-entropy: 0.45668363153944286, [(1, 5), (2, 47)]
*** center 4: selecting labels [1] (freq >= 1) [from [102, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 58, 16]]
** centroid: 5, normalized-entropy: 0.7531979910695015, [(2, 58), (3, 16)]
*** center 6: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [79, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.289436477876734] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.289436477876734, 0.21292110287584365] ***
*** starting iteration: 2; err: [Inf, 0.289436477876734, 0.21292110287584365] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.289436477876734, 0.21292110287584365, 0.20382674974901602] ***
*** starting iteration: 3; err: [Inf, 0.289436477876734, 0.21292110287584365, 0.20382674974901602] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.289436477876734, 0.21292110287584365, 0.20382674974901602, 0.20155829269345849] ***
*** finished computation of 7 references, err: [Inf, 0.289436477876734, 0.21292110287584365, 0.20382674974901602, 0.20155829269345849] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 98, 25]]
** centroid: 1, normalized-entropy: 0.7283846722688453, [(2, 98), (3, 25)]
*** center 2: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [27, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [71, 19, 0]]
** centroid: 4, normalized-entropy: 0.7436012269934466, [(1, 71), (2, 19)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [76, 22, 0]]
** centroid: 5, normalized-entropy: 0.7682814090975241, [(1, 76), (2, 22)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [16, 41, 0]]
** centroid: 6, normalized-entropy: 0.8564052389131375, [(1, 16), (2, 41)]
*** center 7: selecting labels [1] (freq >= 1) [from [49, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4137104586660862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4137104586660862, 0.24440228801593183] ***
*** starting iteration: 2; err: [Inf, 0.4137104586660862, 0.24440228801593183] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4137104586660862, 0.24440228801593183, 0.20765040305443108] ***
*** starting iteration: 3; err: [Inf, 0.4137104586660862, 0.24440228801593183, 0.20765040305443108] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4137104586660862, 0.24440228801593183, 0.20765040305443108, 0.19465145298466086] ***
*** finished computation of 7 references, err: [Inf, 0.4137104586660862, 0.24440228801593183, 0.20765040305443108, 0.19465145298466086] ***
*** center 1: selecting labels [1] (freq >= 1) [from [83, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [17, 42, 0]]
** centroid: 2, normalized-entropy: 0.8663006754980497, [(1, 17), (2, 42)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [39, 24, 0]]
** centroid: 3, normalized-entropy: 0.9587118829771317, [(1, 39), (2, 24)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 62, 10]]
** centroid: 4, normalized-entropy: 0.581321498763703, [(2, 62), (3, 10)]
*** center 5: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 27, 13]]
** centroid: 6, normalized-entropy: 0.9097361225311661, [(2, 27), (3, 13)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [68, 23, 0]]
** centroid: 7, normalized-entropy: 0.8156034512499668, [(1, 68), (2, 23)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.29427845750004056] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29427845750004056, 0.24487895776703955] ***
*** starting iteration: 2; err: [Inf, 0.29427845750004056, 0.24487895776703955] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29427845750004056, 0.24487895776703955, 0.20118941865302623] ***
*** starting iteration: 3; err: [Inf, 0.29427845750004056, 0.24487895776703955, 0.20118941865302623] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.29427845750004056, 0.24487895776703955, 0.20118941865302623, 0.18932096322253347] ***
*** finished computation of 7 references, err: [Inf, 0.29427845750004056, 0.24487895776703955, 0.20118941865302623, 0.18932096322253347] ***
*** center 1: selecting labels [1] (freq >= 1) [from [57, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 82, 22]]
** centroid: 2, normalized-entropy: 0.7444131797881749, [(2, 82), (3, 22)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [22, 43, 0]]
** centroid: 3, normalized-entropy: 0.9233388889944429, [(1, 22), (2, 43)]
*** center 4: selecting labels [1] (freq >= 1) [from [42, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [33, 35, 0]]
** centroid: 5, normalized-entropy: 0.9993759069576513, [(1, 33), (2, 35)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [74, 21, 0]]
** centroid: 6, normalized-entropy: 0.762084924805724, [(1, 74), (2, 21)]
*** center 7: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2406515957713127] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2406515957713127, 0.20426895866449923] ***
*** starting iteration: 2; err: [Inf, 0.2406515957713127, 0.20426895866449923] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2406515957713127, 0.20426895866449923, 0.19045262201037258] ***
*** starting iteration: 3; err: [Inf, 0.2406515957713127, 0.20426895866449923, 0.19045262201037258] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2406515957713127, 0.20426895866449923, 0.19045262201037258, 0.18785949161089957] ***
*** finished computation of 7 references, err: [Inf, 0.2406515957713127, 0.20426895866449923, 0.19045262201037258, 0.18785949161089957] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 85, 17]]
** centroid: 1, normalized-entropy: 0.6500224216483541, [(2, 85), (3, 17)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [44, 10, 0]]
** centroid: 2, normalized-entropy: 0.6912898694057888, [(1, 44), (2, 10)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [59, 11, 0]]
** centroid: 3, normalized-entropy: 0.6274303352684106, [(1, 59), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [16, 67, 0]]
** centroid: 4, normalized-entropy: 0.7072324944713736, [(1, 16), (2, 67)]
*** center 5: selecting labels [1] (freq >= 1) [from [69, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [47, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.37500064879283307] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37500064879283307, 0.23453683933988215] ***
*** starting iteration: 2; err: [Inf, 0.37500064879283307, 0.23453683933988215] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37500064879283307, 0.23453683933988215, 0.20392406235449015] ***
*** starting iteration: 3; err: [Inf, 0.37500064879283307, 0.23453683933988215, 0.20392406235449015] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.37500064879283307, 0.23453683933988215, 0.20392406235449015, 0.19662955967523157] ***
*** finished computation of 7 references, err: [Inf, 0.37500064879283307, 0.23453683933988215, 0.20392406235449015, 0.19662955967523157] ***
*** center 1: selecting labels [1] (freq >= 1) [from [82, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 35, 14]]
** centroid: 2, normalized-entropy: 0.8631205685666311, [(2, 35), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [96, 3, 0]]
** centroid: 3, normalized-entropy: 0.19590927087360496, [(1, 96), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [4, 62, 0]]
** centroid: 4, normalized-entropy: 0.32984607020714635, [(1, 4), (2, 62)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [66, 16, 0]]
** centroid: 5, normalized-entropy: 0.7120640548905481, [(1, 66), (2, 16)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 38, 6]]
** centroid: 6, normalized-entropy: 0.5746356978376794, [(2, 38), (3, 6)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [57, 21, 0]]
** centroid: 7, normalized-entropy: 0.8403586716091169, [(1, 57), (2, 21)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23025839921459557] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23025839921459557, 0.21176138656027615] ***
*** starting iteration: 2; err: [Inf, 0.23025839921459557, 0.21176138656027615] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23025839921459557, 0.21176138656027615, 0.19531977088749408] ***
*** starting iteration: 3; err: [Inf, 0.23025839921459557, 0.21176138656027615, 0.19531977088749408] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23025839921459557, 0.21176138656027615, 0.19531977088749408, 0.1927600200502202] ***
*** finished computation of 7 references, err: [Inf, 0.23025839921459557, 0.21176138656027615, 0.19531977088749408, 0.1927600200502202] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 41, 22]]
** centroid: 1, normalized-entropy: 0.9333572600179806, [(2, 41), (3, 22)]
*** center 2: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [4, 73, 0]]
** centroid: 3, normalized-entropy: 0.29461520565280713, [(1, 4), (2, 73)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [47, 22, 0]]
** centroid: 4, normalized-entropy: 0.903116172156872, [(1, 47), (2, 22)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [63, 28, 0]]
** centroid: 5, normalized-entropy: 0.8904916402194913, [(1, 63), (2, 28)]
*** center 6: selecting labels [1] (freq >= 1) [from [44, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [72, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22610596325388177] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22610596325388177, 0.20346435820125044] ***
*** starting iteration: 2; err: [Inf, 0.22610596325388177, 0.20346435820125044] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22610596325388177, 0.20346435820125044, 0.1962705966802314] ***
*** starting iteration: 3; err: [Inf, 0.22610596325388177, 0.20346435820125044, 0.1962705966802314] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22610596325388177, 0.20346435820125044, 0.1962705966802314, 0.19400244510732592] ***
*** finished computation of 7 references, err: [Inf, 0.22610596325388177, 0.20346435820125044, 0.1962705966802314, 0.19400244510732592] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [67, 20, 0]]
** centroid: 1, normalized-entropy: 0.7778108790853029, [(1, 67), (2, 20)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [72, 19, 0]]
** centroid: 2, normalized-entropy: 0.7391658175693049, [(1, 72), (2, 19)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 27, 20]]
** centroid: 3, normalized-entropy: 0.9839393951635759, [(2, 27), (3, 20)]
*** center 4: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [64, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [6, 58, 0]]
** centroid: 6, normalized-entropy: 0.44886448872302936, [(1, 6), (2, 58)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 53, 2]]
** centroid: 7, normalized-entropy: 0.22536363912739493, [(2, 53), (3, 2)]
finished with 10 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 349,3 => 43,1 => 608), Dict(2 => 342,3 => 40,1 => 618))
[ Info: ===== scores for single classifier: {"micro_f1":0.9209999999999999,"precision":0.921,"recall":0.921,"macro_recall":0.9369310547133747,"macro_f1":0.8387917268914702,"accuracy":0.921,"class_f1":{"2":0.8819133034379671,"3":0.6666666666666666,"1":0.967795210569777},"class_precision":{"2":0.9021406727828746,"3":0.5,"1":0.9881956155143339},"class_recall":{"2":0.8625730994152047,"3":1.0,"1":0.948220064724919}}
[ Info: ===== scores for 1: {"micro_f1":0.968,"precision":0.968,"recall":0.968,"macro_recall":0.9653698026079223,"macro_f1":0.9434664119151046,"accuracy":0.968,"class_f1":{"2":0.9523809523809523,"3":0.896551724137931,"1":0.9814665592264303},"class_precision":{"2":0.9696969696969697,"3":0.8297872340425532,"1":0.9775280898876404},"class_recall":{"2":0.935672514619883,"3":0.975,"1":0.9854368932038835}}
[ Info: ===== scores for 5: {"micro_f1":0.965,"precision":0.965,"recall":0.965,"macro_recall":0.955522436079411,"macro_f1":0.931022354184517,"accuracy":0.965,"class_f1":{"2":0.9479940564635958,"3":0.8636363636363635,"1":0.9814366424535916},"class_precision":{"2":0.9637462235649547,"3":0.7916666666666666,"1":0.9790660225442834},"class_recall":{"2":0.9327485380116959,"3":0.95,"1":0.9838187702265372}}
[ Info: ===== scores for 7: {"micro_f1":0.965,"precision":0.965,"recall":0.965,"macro_recall":0.9572635742538655,"macro_f1":0.9282171326885768,"accuracy":0.965,"class_f1":{"2":0.948604992657856,"3":0.8539325842696629,"1":0.9821138211382113},"class_precision":{"2":0.9528023598820059,"3":0.7755102040816326,"1":0.9869281045751634},"class_recall":{"2":0.9444444444444444,"3":0.95,"1":0.9773462783171522}}
[ Info: ===== scores for 9: {"micro_f1":0.968,"precision":0.968,"recall":0.968,"macro_recall":0.967981509869604,"macro_f1":0.934523275744191,"accuracy":0.968,"class_f1":{"2":0.9532163742690059,"3":0.8666666666666667,"1":0.9836867862969005},"class_precision":{"2":0.9532163742690059,"3":0.78,"1":0.9917763157894737},"class_recall":{"2":0.9532163742690059,"3":0.975,"1":0.9757281553398058}}
[ Info: ===== scores for 11: {"micro_f1":0.967,"precision":0.967,"recall":0.967,"macro_recall":0.9678774200874355,"macro_f1":0.9338202803059427,"accuracy":0.967,"class_f1":{"2":0.9519650655021834,"3":0.8666666666666667,"1":0.9828291087489779},"class_precision":{"2":0.9478260869565217,"3":0.78,"1":0.9933884297520661},"class_recall":{"2":0.956140350877193,"3":0.975,"1":0.9724919093851133}}
(score = 0.968, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.968, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.97, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.97, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.972, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.972, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.975, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.975, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.966, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.965, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.965, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.966, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.966, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.975,"k":3,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.975,"precision":0.975,"recall":0.975,"macro_recall":0.9708865610628513,"macro_f1":0.9457033321024557,"accuracy":0.975,"class_f1":{"2":0.962852897473997,"3":0.8863636363636362,"1":0.9878934624697338},"class_precision":{"2":0.9788519637462235,"3":0.8125,"1":0.9855072463768116},"class_recall":{"2":0.9473684210526315,"3":0.975,"1":0.9902912621359223}}
Test Summary: | Pass  Total
AKNC          |    8      8
[162, 1, 2, 3, 1, 4, 2, 8, 7, 2, 8, 11, 7, 13, 6, 19, 6, 19, 43, 8, 13, 6, 3, 2, 8, 3, 11, 10, 2, 1, 5, 1, 4, 28, 2, 358, 3, 8, 6, 4, 9, 9, 22, 38, 12, 5, 23, 13, 6, 3, 14, 13, 5, 11, 100, 3, 3, 24, 10, 3, 40, 4, 7, 6, 7, 3, 3, 4, 17, 23, 15, 30, 52, 31, 5, 51, 16, 10, 26, 5, 6, 1, 9, 3, 6, 5, 10, 5, 58, 19, 30, 18, 7, 8, 15, 12, 47, 64, 58, 15, 58, 19, 9, 43, 209, 14, 10, 39, 25, 32, 26, 52, 32, 38, 12, 14, 6, 2, 3, 2, 63, 10, 161, 11, 19, 5, 22, 30, 3, 6, 4, 6, 2, 6, 66, 203, 21, 14, 6, 30, 4, 7, 7, 10, 17, 21, 85, 27, 2, 11, 12, 235, 21, 3, 34, 6, 3, 118, 7, 7, 28, 103, 30, 17, 29, 76, 7, 13, 1, 18, 6, 49, 19, 94, 5, 19, 33, 12, 9, 10, 94, 5, 20, 2, 12, 3, 7, 6, 2, 10, 5, 27, 3, 51, 4, 13, 20, 26, 28, 14, 57, 44, 47, 13, 10, 40, 122, 5, 7, 34, 30, 8, 1, 27, 159, 26, 20, 16, 27, 241, 4, 8, 97, 24, 50, 3, 21, 22, 198, 54, 33, 789, 47, 17, 19, 114, 16, 4, 44, 1, 12, 13, 1, 92, 104, 8, 1, 11, 20, 23, 21, 9, 112, 24, 97, 43, 85, 65, 16, 38, 30, 41, 34, 550, 19, 25, 28, 14, 19, 4, 15, 54, 8, 17, 15, 23, 7, 35, 2, 83, 179, 30, 20, 45, 7, 21, 296, 1, 29, 25, 12, 20, 44, 42, 42, 8, 30, 7, 21, 17]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6680000000000001, speedup = 0.31311405549321875, eval_ratio = 0.07633)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.4311600942460319,"recall":0.4079861111111113,"f1":null,"seconds":0.00016762129962444305,"exhaustive_search_seconds":0.00038436800241470337,"evaluations":484.3359375,"distances_sum":1709.0521267510298}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5697916666666667,"recall":0.5677083333333334,"f1":null,"seconds":0.00026261620223522186,"exhaustive_search_seconds":0.00038436800241470337,"evaluations":617.3046875,"distances_sum":1666.4540126579639}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6631944444444439,"recall":0.6631944444444439,"f1":0.6631944444444439,"seconds":0.00034221820533275604,"exhaustive_search_seconds":0.00038436800241470337,"evaluations":734.7890625,"distances_sum":1627.7870892813694}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7317708333333328,"recall":0.7317708333333328,"f1":0.7317708333333328,"seconds":0.00042241625487804413,"exhaustive_search_seconds":0.00038436800241470337,"evaluations":833.1328125,"distances_sum":1596.350974382702}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7986111111111104,"recall":0.7986111111111104,"f1":0.7986111111111104,"seconds":0.0005334429442882538,"exhaustive_search_seconds":0.00038436800241470337,"evaluations":963.84375,"distances_sum":1575.1997235279312}
KCenters.DeloneInvIndex> reached performance {"precision":0.8463541666666662,"recall":0.8463541666666662,"f1":0.8463541666666662,"seconds":0.0006139297038316727,"exhaustive_search_seconds":0.00038436800241470337,"evaluations":1075.71875,"distances_sum":1562.2741630165322}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.839, speedup = 0.6144285763605188, eval_ratio = 0.11260899999999999)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
