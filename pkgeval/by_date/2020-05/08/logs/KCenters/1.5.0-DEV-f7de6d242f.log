Julia Version 1.5.0-DEV.875
Commit f7de6d242f (2020-05-07 14:36 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia
  JULIA_NUM_THREADS = 2

  Resolving package versions...
  Installed InvertedIndices ───────────── v1.0.0
  Installed DataValueInterfaces ───────── v1.0.0
  Installed MappedArrays ──────────────── v0.2.2
  Installed DataAPI ───────────────────── v1.3.0
  Installed KCenters ──────────────────── v0.2.2
  Installed Parsers ───────────────────── v1.0.3
  Installed MLDataUtils ───────────────── v0.5.1
  Installed SimilaritySearch ──────────── v0.3.19
  Installed LearnBase ─────────────────── v0.2.2
  Installed OrderedCollections ────────── v1.2.0
  Installed TableTraits ───────────────── v1.0.0
  Installed PooledArrays ──────────────── v0.5.3
  Installed JSON ──────────────────────── v0.21.0
  Installed Compat ────────────────────── v3.9.0
  Installed Tables ────────────────────── v1.0.4
  Installed MLLabelUtils ──────────────── v0.5.2
  Installed CategoricalArrays ─────────── v0.7.7
  Installed StatsBase ─────────────────── v0.32.2
  Installed Missings ──────────────────── v0.4.3
  Installed SortingAlgorithms ─────────── v0.3.1
  Installed Reexport ──────────────────── v0.2.0
  Installed IteratorInterfaceExtensions ─ v1.0.0
  Installed DataStructures ────────────── v0.17.15
  Installed MLDataPattern ─────────────── v0.5.3
  Installed DataFrames ────────────────── v0.20.2
Updating `~/.julia/environments/v1.5/Project.toml`
  [5d8de97f] + KCenters v0.2.2
Updating `~/.julia/environments/v1.5/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.7
  [34da2185] + Compat v3.9.0
  [9a962f9c] + DataAPI v1.3.0
  [a93c6f00] + DataFrames v0.20.2
  [864edb3b] + DataStructures v0.17.15
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.2.2
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.3
  [cc2ba9b6] + MLDataUtils v0.5.1
  [66a33bbf] + MLLabelUtils v0.5.2
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.2.0
  [69de0a69] + Parsers v1.0.3
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.19
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.2
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v1.0.4
  [2a0f44e3] + Base64
  [ade2ca70] + Dates
  [8bb1440f] + DelimitedFiles
  [8ba89e20] + Distributed
  [9fa8497b] + Future
  [b77e0a4c] + InteractiveUtils
  [76f85450] + LibGit2
  [8f399da3] + Libdl
  [37e2e46d] + LinearAlgebra
  [56ddb016] + Logging
  [d6f4376e] + Markdown
  [a63ad114] + Mmap
  [44cfe95a] + Pkg
  [de0858da] + Printf
  [3fa0cd96] + REPL
  [9a3f8284] + Random
  [ea8e919c] + SHA
  [9e88b42a] + Serialization
  [1a1011a3] + SharedArrays
  [6462fe0b] + Sockets
  [2f01184e] + SparseArrays
  [10745b16] + Statistics
  [8dfed614] + Test
  [cf7118a7] + UUIDs
  [4ec0a83e] + Unicode
    Testing KCenters
Status `/tmp/jl_G5g8p5/Project.toml`
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [cc2ba9b6] MLDataUtils v0.5.1
  [053f045d] SimilaritySearch v0.3.19
  [2913bbd2] StatsBase v0.32.2
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [37e2e46d] LinearAlgebra
  [9a3f8284] Random
  [2f01184e] SparseArrays
  [8dfed614] Test
Status `/tmp/jl_G5g8p5/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.7
  [34da2185] Compat v3.9.0
  [9a962f9c] DataAPI v1.3.0
  [a93c6f00] DataFrames v0.20.2
  [864edb3b] DataStructures v0.17.15
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.2.2
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.3
  [cc2ba9b6] MLDataUtils v0.5.1
  [66a33bbf] MLLabelUtils v0.5.2
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.2.0
  [69de0a69] Parsers v1.0.3
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.19
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.2
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v1.0.4
  [2a0f44e3] Base64
  [ade2ca70] Dates
  [8bb1440f] DelimitedFiles
  [8ba89e20] Distributed
  [9fa8497b] Future
  [b77e0a4c] InteractiveUtils
  [76f85450] LibGit2
  [8f399da3] Libdl
  [37e2e46d] LinearAlgebra
  [56ddb016] Logging
  [d6f4376e] Markdown
  [a63ad114] Mmap
  [44cfe95a] Pkg
  [de0858da] Printf
  [3fa0cd96] REPL
  [9a3f8284] Random
  [ea8e919c] SHA
  [9e88b42a] Serialization
  [1a1011a3] SharedArrays
  [6462fe0b] Sockets
  [2f01184e] SparseArrays
  [10745b16] Statistics
  [8dfed614] Test
  [cf7118a7] UUIDs
  [4ec0a83e] Unicode
Test Summary: | Pass  Total
Scores        |    9      9
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 1.0716527590155602
[ Info: 0.932025450070699
[ Info: 0.8302954188982645
[ Info: 0.5541281573474407
Test Summary:        |
Clustering with dnet | No tests
mean(cfft.distances) = 0.3226904027412335
mean(cdnet.distances) = 0.38816318795084953
mean(crand.distances) = 0.33873575913409393
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2177734375, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2177734375,"f1":null,"seconds":4.144385457038879e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":6.6015625,"distances_sum":628.4954219051762}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2060546875, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.2060546875,"f1":null,"seconds":4.258006811141968e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":6.375,"distances_sum":593.7780667843035}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7412109375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7412109375,"f1":0.8440309690309699,"seconds":6.061047315597534e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.296875,"distances_sum":2306.905511321587}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7412109375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7412109375,"f1":0.8440309690309699,"seconds":6.061047315597534e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.296875,"distances_sum":2306.905511321587}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9542868589743594,"seconds":6.61797821521759e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.953125,"distances_sum":3230.747196529724}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9666323260073264,"seconds":6.67572021484375e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.9609375,"distances_sum":3324.118345679669}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9666323260073264,"seconds":6.67572021484375e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.9609375,"distances_sum":3324.118345679669}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9738495879120882,"seconds":6.4373016357421875e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.9765625,"distances_sum":3419.5238239227333}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9741643772893778,"seconds":6.260350346565247e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.9609375,"distances_sum":3424.4377780804784}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9673019688644695,"seconds":6.038695573806763e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.9375,"distances_sum":3346.7342543328377}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9724931318681322,"seconds":5.934387445449829e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.9609375,"distances_sum":3406.5368173669012}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9738495879120882,"seconds":6.4373016357421875e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.9765625,"distances_sum":3419.5238239227333}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.953125,"state":{"ssize":1,"bsize":11},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9738495879120882,"seconds":6.4373016357421875e-6,"exhaustive_search_seconds":1.5459954738616943e-6,"evaluations":8.9765625,"distances_sum":3419.5238239227333}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3955078125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3955078125,"f1":null,"seconds":3.507360816001892e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":5.7890625,"distances_sum":1013.2719958963169}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7412109375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7412109375,"f1":0.8384412462537468,"seconds":5.083158612251282e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.53125,"distances_sum":2107.3318843859593}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.19140625, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.19140625,"f1":null,"seconds":2.823770046234131e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":4.984375,"distances_sum":554.8596622378469}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7412109375,"state":{"ssize":3,"bsize":5},"perf":{"precision":1.0,"recall":0.7412109375,"f1":0.8384412462537468,"seconds":5.083158612251282e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.53125,"distances_sum":2107.3318843859593}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9383642399267405,"seconds":5.815178155899048e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.828125,"distances_sum":2861.3474205743564}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8798828125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8798828125,"f1":0.9288810148185153,"seconds":5.707144737243652e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.796875,"distances_sum":2763.652604573303}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8564453125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8564453125,"f1":0.9154938811188819,"seconds":5.444511771202087e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.875,"distances_sum":2613.5221302838313}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.791015625, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.791015625,"f1":0.87677738927739,"seconds":5.336478352546692e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.7421875,"distances_sum":2350.5787717079083}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.896484375,"state":{"ssize":7,"bsize":7},"perf":{"precision":1.0,"recall":0.896484375,"f1":0.9383642399267405,"seconds":5.815178155899048e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.828125,"distances_sum":2861.3474205743564}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9577812812187818,"seconds":5.776062607765198e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.8671875,"distances_sum":2984.5398748531506}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9627632783882787,"seconds":5.666166543960571e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9140625,"distances_sum":3017.3845849177264}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.967210393772894,"seconds":6.748363375663757e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9140625,"distances_sum":3061.3616621557953}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.958092948717949,"seconds":6.109476089477539e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.890625,"distances_sum":2979.2972107676073}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.9782738095238097,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9375,"distances_sum":3159.0760557409053}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.94511217948718,"seconds":6.359070539474487e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.78125,"distances_sum":2930.247031647486}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9599609375,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9782738095238097,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9375,"distances_sum":3159.0760557409053}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9599609375,"state":{"ssize":2,"bsize":10},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9782738095238097,"seconds":5.777925252914429e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.9375,"distances_sum":3159.0760557409053}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.197265625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.197265625,"f1":null,"seconds":3.5371631383895874e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":4.59375,"distances_sum":552.844032156648}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.197265625,"state":{"ssize":5,"bsize":1},"perf":{"precision":null,"recall":0.197265625,"f1":null,"seconds":3.5371631383895874e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":4.59375,"distances_sum":552.844032156648}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7421875, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.7421875,"f1":0.8414032148407156,"seconds":5.66430389881134e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":7.5703125,"distances_sum":2199.7466106084075}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.74609375, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.74609375,"f1":0.8447151806526815,"seconds":5.591660737991333e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":7.609375,"distances_sum":2209.2690292666434}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.74609375,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.74609375,"f1":0.8447151806526815,"seconds":5.591660737991333e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":7.609375,"distances_sum":2209.2690292666434}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9428285256410261,"seconds":7.266178727149963e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.5390625,"distances_sum":3031.537212497184}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.767578125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.767578125,"f1":0.8608516483516492,"seconds":6.2193721532821655e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":7.6875,"distances_sum":2285.8249917258822}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7509765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7509765625,"f1":0.8484588328338338,"seconds":5.736947059631348e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":7.671875,"distances_sum":2197.1715078823768}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":13,"bsize":9}, perf: {"precision":1.0,"recall":0.904296875,"f1":0.9459535256410263,"seconds":6.245449185371399e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.5859375,"distances_sum":2984.9002138870924}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9417124542124548,"seconds":6.755813956260681e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.6171875,"distances_sum":2974.7260067059497}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.904296875,"state":{"ssize":13,"bsize":9},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.9459535256410263,"seconds":6.245449185371399e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.5859375,"distances_sum":2984.9002138870924}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.904296875,"state":{"ssize":13,"bsize":9},"perf":{"precision":1.0,"recall":0.904296875,"f1":0.9459535256410263,"seconds":6.245449185371399e-6,"exhaustive_search_seconds":1.7192214727401733e-6,"evaluations":8.5859375,"distances_sum":2984.9002138870924}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5458984375, conf: {"ssize":5,"bsize":3}, perf: {"precision":1.0,"recall":0.5458984375,"f1":0.6869826354201362,"seconds":4.6193599700927734e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":6.4921875,"distances_sum":1503.9826750850873}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5439453125, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5439453125,"f1":null,"seconds":4.949048161506653e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":6.640625,"distances_sum":1485.7810993953317}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5458984375,"state":{"ssize":5,"bsize":3},"perf":{"precision":1.0,"recall":0.5458984375,"f1":0.6869826354201362,"seconds":4.6193599700927734e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":6.4921875,"distances_sum":1503.9826750850873}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8525390625, conf: {"ssize":2,"bsize":6}, perf: {"precision":1.0,"recall":0.8525390625,"f1":0.9139828921078926,"seconds":7.027760148048401e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":8.6796875,"distances_sum":2641.213205999448}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7373046875, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7373046875,"f1":0.8402451714951725,"seconds":5.8766454458236694e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":7.859375,"distances_sum":2232.5768254594345}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8486328125, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8486328125,"f1":0.9112127455877463,"seconds":6.906688213348389e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":8.546875,"distances_sum":2660.9423546123776}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7451171875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7451171875,"f1":0.848017087079588,"seconds":6.012618541717529e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":7.953125,"distances_sum":2230.637084226474}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.857421875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.857421875,"f1":0.9151702464202469,"seconds":6.983056664466858e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":8.703125,"distances_sum":2676.079352681456}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66015625, conf: {"ssize":6,"bsize":4}, perf: {"precision":1.0,"recall":0.66015625,"f1":0.7854029650904658,"seconds":6.036832928657532e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":7.546875,"distances_sum":1904.13013290186}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.857421875,"state":{"ssize":3,"bsize":6},"perf":{"precision":1.0,"recall":0.857421875,"f1":0.9151702464202469,"seconds":6.983056664466858e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":8.703125,"distances_sum":2676.079352681456}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8759765625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8759765625,"f1":0.9261540542790552,"seconds":7.422640919685364e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":8.5,"distances_sum":2793.841245441582}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9538576007326012,"seconds":6.7856162786483765e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":8.8359375,"distances_sum":2994.655880100186}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.963398580586081,"seconds":7.079914212226868e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":8.859375,"distances_sum":3033.492093707759}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9228515625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9228515625,"f1":0.9560699716949722,"seconds":7.137656211853027e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":8.78125,"distances_sum":3025.1937864705246}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9695512820512826,"seconds":7.385388016700745e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":8.9296875,"distances_sum":3110.427832868607}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":12,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9546188186813191,"seconds":6.664544343948364e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":8.765625,"distances_sum":3004.3529385364704}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9248046875, conf: {"ssize":12,"bsize":8}, perf: {"precision":1.0,"recall":0.9248046875,"f1":0.9580242673992676,"seconds":7.0892274379730225e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":8.7890625,"distances_sum":3045.1519453829487}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.935546875, conf: {"ssize":9,"bsize":10}, perf: {"precision":1.0,"recall":0.935546875,"f1":0.9638450091575097,"seconds":7.055699825286865e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":8.8828125,"distances_sum":3103.717401982029}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9443359375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9695512820512826,"seconds":7.385388016700745e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":8.9296875,"distances_sum":3110.427832868607}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9443359375,"state":{"ssize":3,"bsize":10},"perf":{"precision":1.0,"recall":0.9443359375,"f1":0.9695512820512826,"seconds":7.385388016700745e-6,"exhaustive_search_seconds":1.9222497940063477e-6,"evaluations":8.9296875,"distances_sum":3110.427832868607}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5654296875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5654296875,"f1":null,"seconds":4.373490810394287e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":7.0390625,"distances_sum":1550.944859711124}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5654296875,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5654296875,"f1":null,"seconds":4.373490810394287e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":7.0390625,"distances_sum":1550.944859711124}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6826171875, conf: {"ssize":3,"bsize":4}, perf: {"precision":null,"recall":0.6826171875,"f1":null,"seconds":5.159527063369751e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":7.671875,"distances_sum":1965.1620807926777}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6826171875,"state":{"ssize":3,"bsize":4},"perf":{"precision":null,"recall":0.6826171875,"f1":null,"seconds":5.159527063369751e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":7.671875,"distances_sum":1965.1620807926777}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9506925366300369,"seconds":6.375834345817566e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":8.6875,"distances_sum":3043.529238869891}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7783203125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7783203125,"f1":0.8685845404595414,"seconds":5.5730342864990234e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":8.1875,"distances_sum":2287.4529393386897}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9130859375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9506925366300369,"seconds":6.375834345817566e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":8.6875,"distances_sum":3043.529238869891}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9130859375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9130859375,"f1":0.9506925366300369,"seconds":6.375834345817566e-6,"exhaustive_search_seconds":1.8291175365447998e-6,"evaluations":8.6875,"distances_sum":3043.529238869891}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8669590825840836,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.71875,"distances_sum":2303.2527711530747}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.775390625,"state":{"ssize":2,"bsize":5},"perf":{"precision":1.0,"recall":0.775390625,"f1":0.8669590825840836,"seconds":5.647540092468262e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.71875,"distances_sum":2303.2527711530747}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9729567307692311,"seconds":6.7818909883499146e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.9140625,"distances_sum":3186.744988885992}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9729567307692311,"seconds":6.7818909883499146e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.9140625,"distances_sum":3186.744988885992}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9560546875, conf: {"ssize":6,"bsize":13}, perf: {"precision":1.0,"recall":0.9560546875,"f1":0.9759500915750918,"seconds":6.943941116333008e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.96875,"distances_sum":3180.6178644498345}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9560546875,"state":{"ssize":6,"bsize":13},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9759500915750918,"seconds":6.943941116333008e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.96875,"distances_sum":3180.6178644498345}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9560546875,"state":{"ssize":6,"bsize":13},"perf":{"precision":1.0,"recall":0.9560546875,"f1":0.9759500915750918,"seconds":6.943941116333008e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.96875,"distances_sum":3180.6178644498345}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7412109375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7412109375,"f1":0.8415251415251426,"seconds":5.3122639656066895e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":7.9453125,"distances_sum":2207.62024771739}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.36328125, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.36328125,"f1":null,"seconds":3.6153942346572876e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":5.40625,"distances_sum":951.5704145961752}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6640625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6640625,"f1":0.7838493104118113,"seconds":5.103647708892822e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":7.3828125,"distances_sum":1894.0672906863315}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7412109375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7412109375,"f1":0.8415251415251426,"seconds":5.3122639656066895e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":7.9453125,"distances_sum":2207.62024771739}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.80859375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.80859375,"f1":0.8856289543789551,"seconds":5.891546607017517e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.1953125,"distances_sum":2479.5204458458443}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9418617840492847,"seconds":6.167218089103699e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.546875,"distances_sum":2949.7146625101377}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8994140625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8994140625,"f1":0.9438873626373634,"seconds":6.124377250671387e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.5859375,"distances_sum":2991.5316951041877}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9013671875,"state":{"ssize":4,"bsize":7},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9418617840492847,"seconds":6.167218089103699e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.546875,"distances_sum":2949.7146625101377}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9707417582417587,"seconds":6.278976798057556e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.8203125,"distances_sum":3209.427068926102}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":8,"bsize":12}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9703125000000004,"seconds":6.590038537979126e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.8671875,"distances_sum":3153.463926926732}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9672275641025646,"seconds":7.072463631629944e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.8046875,"distances_sum":3148.4744474439603}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.947265625,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9707417582417587,"seconds":6.278976798057556e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.8203125,"distances_sum":3209.427068926102}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.947265625,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.947265625,"f1":0.9707417582417587,"seconds":6.278976798057556e-6,"exhaustive_search_seconds":1.5478581190109253e-6,"evaluations":8.8203125,"distances_sum":3209.427068926102}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6611328125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6611328125,"f1":0.7830664127539136,"seconds":4.412606358528137e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":7.71875,"distances_sum":1371.9067537689884}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6611328125,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.6611328125,"f1":0.7830664127539136,"seconds":4.412606358528137e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":7.71875,"distances_sum":1371.9067537689884}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9306318681318688,"seconds":5.5674463510513306e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.5078125,"distances_sum":2126.408186305008}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.822265625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.822265625,"f1":0.8951985514485523,"seconds":5.1353126764297485e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.265625,"distances_sum":1922.1473246999776}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.779296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.779296875,"f1":0.8695002913752923,"seconds":4.967674612998962e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.3515625,"distances_sum":1718.4865624419597}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8577722624597635,"seconds":5.0961971282958984e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.2265625,"distances_sum":1707.250165728992}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.87890625,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.87890625,"f1":0.9306318681318688,"seconds":5.5674463510513306e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.5078125,"distances_sum":2126.408186305008}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9535771520146527,"seconds":6.314367055892944e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.78125,"distances_sum":2288.6496221481943}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.91796875, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.91796875,"f1":0.9538404304029308,"seconds":6.336718797683716e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.7734375,"distances_sum":2292.8675639574362}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9488183691308697,"seconds":6.282702088356018e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.703125,"distances_sum":2292.5848725853834}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.9390510531135535,"seconds":6.938353180885315e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.6953125,"distances_sum":2196.0581811903667}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9497653388278393,"seconds":5.736947059631348e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.7421875,"distances_sum":2285.0751930842575}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.91796875,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9535771520146527,"seconds":6.314367055892944e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.78125,"distances_sum":2288.6496221481943}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.91796875,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.91796875,"f1":0.9535771520146527,"seconds":6.314367055892944e-6,"exhaustive_search_seconds":1.2200325727462769e-6,"evaluations":8.78125,"distances_sum":2288.6496221481943}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2060546875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2060546875,"f1":null,"seconds":3.162771463394165e-6,"exhaustive_search_seconds":1.1399388313293457e-6,"evaluations":5.6328125,"distances_sum":469.2994583943361}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2060546875,"state":{"ssize":4,"bsize":1},"perf":{"precision":null,"recall":0.2060546875,"f1":null,"seconds":3.162771463394165e-6,"exhaustive_search_seconds":1.1399388313293457e-6,"evaluations":5.6328125,"distances_sum":469.2994583943361}}, beam: 2, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.224609375, conf: {"ssize":8,"bsize":1}, perf: {"precision":null,"recall":0.224609375,"f1":null,"seconds":3.2410025596618652e-6,"exhaustive_search_seconds":1.1399388313293457e-6,"evaluations":5.9765625,"distances_sum":509.85477490586953}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.224609375,"state":{"ssize":8,"bsize":1},"perf":{"precision":null,"recall":0.224609375,"f1":null,"seconds":3.2410025596618652e-6,"exhaustive_search_seconds":1.1399388313293457e-6,"evaluations":5.9765625,"distances_sum":509.85477490586953}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.572265625, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.572265625,"f1":null,"seconds":4.2244791984558105e-6,"exhaustive_search_seconds":1.1399388313293457e-6,"evaluations":7.2109375,"distances_sum":1137.620070003789}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4013671875, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.4013671875,"f1":null,"seconds":3.6228448152542114e-6,"exhaustive_search_seconds":1.1399388313293457e-6,"evaluations":6.1484375,"distances_sum":811.112747004957}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.416015625, conf: {"ssize":3,"bsize":2}, perf: {"precision":null,"recall":0.416015625,"f1":null,"seconds":3.5390257835388184e-6,"exhaustive_search_seconds":1.1399388313293457e-6,"evaluations":6.21875,"distances_sum":856.4166977033476}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.572265625,"state":{"ssize":5,"bsize":3},"perf":{"precision":null,"recall":0.572265625,"f1":null,"seconds":4.2244791984558105e-6,"exhaustive_search_seconds":1.1399388313293457e-6,"evaluations":7.2109375,"distances_sum":1137.620070003789}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.572265625,"state":{"ssize":5,"bsize":3},"perf":{"precision":null,"recall":0.572265625,"f1":null,"seconds":4.2244791984558105e-6,"exhaustive_search_seconds":1.1399388313293457e-6,"evaluations":7.2109375,"distances_sum":1137.620070003789}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5576171875, conf: {"ssize":1,"bsize":3}, perf: {"precision":null,"recall":0.5576171875,"f1":null,"seconds":4.45730984210968e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.6640625,"distances_sum":956.2055333868659}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5576171875,"state":{"ssize":1,"bsize":3},"perf":{"precision":null,"recall":0.5576171875,"f1":null,"seconds":4.45730984210968e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":7.6640625,"distances_sum":956.2055333868659}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69140625, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.69140625,"f1":0.8044760794760804,"seconds":4.926696419715881e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.125,"distances_sum":1281.6925643796774}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.69140625,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.69140625,"f1":0.8044760794760804,"seconds":4.926696419715881e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.125,"distances_sum":1281.6925643796774}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9208984375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9208984375,"f1":0.9552312271062273,"seconds":7.49342143535614e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.796875,"distances_sum":1919.8073939744618}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9491071428571436,"seconds":6.860122084617615e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.765625,"distances_sum":1863.9433904665768}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.89453125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.89453125,"f1":0.9387763278388287,"seconds":5.943700671195984e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.84375,"distances_sum":1812.3726049206928}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9208984375,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9552312271062273,"seconds":7.49342143535614e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.796875,"distances_sum":1919.8073939744618}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9208984375,"state":{"ssize":6,"bsize":8},"perf":{"precision":1.0,"recall":0.9208984375,"f1":0.9552312271062273,"seconds":7.49342143535614e-6,"exhaustive_search_seconds":1.562759280204773e-6,"evaluations":8.796875,"distances_sum":1919.8073939744618}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6611328125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6611328125,"f1":0.7820039335664344,"seconds":4.751607775688171e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":7.984375,"distances_sum":1260.5324045249695}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6611328125,"state":{"ssize":2,"bsize":4},"perf":{"precision":1.0,"recall":0.6611328125,"f1":0.7820039335664344,"seconds":4.751607775688171e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":7.984375,"distances_sum":1260.5324045249695}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.880859375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.880859375,"f1":0.9300225815850823,"seconds":6.137415766716003e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.421875,"distances_sum":1950.5299168804702}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9571829212454216,"seconds":6.427988409996033e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.78125,"distances_sum":2070.3221384882586}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.92578125,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.92578125,"f1":0.9571829212454216,"seconds":6.427988409996033e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.78125,"distances_sum":2070.3221384882586}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9731971153846157,"seconds":5.623325705528259e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.8671875,"distances_sum":2153.8285847156253}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9603823260073264,"seconds":5.537644028663635e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.7734375,"distances_sum":2071.2801535021536}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9306640625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9306640625,"f1":0.9607028388278396,"seconds":5.422160029411316e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.8515625,"distances_sum":2063.9898139312395}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9731971153846157,"seconds":5.623325705528259e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.8671875,"distances_sum":2153.8285847156253}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":6,"bsize":11},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9731971153846157,"seconds":5.623325705528259e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.8671875,"distances_sum":2153.8285847156253}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65234375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.65234375,"f1":0.7715909090909098,"seconds":4.513189196586609e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.0390625,"distances_sum":1301.8322055382205}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5615234375, conf: {"ssize":4,"bsize":3}, perf: {"precision":1.0,"recall":0.5615234375,"f1":0.7016511266511272,"seconds":4.287809133529663e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":7.8359375,"distances_sum":1069.9368483628077}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.65234375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.65234375,"f1":0.7715909090909098,"seconds":4.513189196586609e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.0390625,"distances_sum":1301.8322055382205}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9421417124542129,"seconds":5.62518835067749e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8125,"distances_sum":1984.8035835538046}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6943359375, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.6943359375,"f1":0.8074961496836504,"seconds":4.779547452926636e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.4375,"distances_sum":1373.8914760681362}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.73828125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.73828125,"f1":0.8361000111000119,"seconds":4.898756742477417e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.390625,"distances_sum":1504.504207361635}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9013671875,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9013671875,"f1":0.9421417124542129,"seconds":5.62518835067749e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8125,"distances_sum":1984.8035835538046}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9580078125, conf: {"ssize":8,"bsize":11}, perf: {"precision":1.0,"recall":0.9580078125,"f1":0.976751373626374,"seconds":5.895271897315979e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9765625,"distances_sum":2184.015382469553}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9602392399267403,"seconds":5.707144737243652e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.8828125,"distances_sum":2096.3582342129444}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9677734375, conf: {"ssize":7,"bsize":12}, perf: {"precision":1.0,"recall":0.9677734375,"f1":0.9823489010989014,"seconds":5.606561899185181e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9375,"distances_sum":2228.764918000744}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9677734375,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9823489010989014,"seconds":5.606561899185181e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9375,"distances_sum":2228.764918000744}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9677734375,"state":{"ssize":7,"bsize":12},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9823489010989014,"seconds":5.606561899185181e-6,"exhaustive_search_seconds":1.2498348951339722e-6,"evaluations":8.9375,"distances_sum":2228.764918000744}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2431640625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2431640625,"f1":null,"seconds":3.339722752571106e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":6.765625,"distances_sum":409.1740363780568}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.400390625, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.400390625,"f1":null,"seconds":3.648921847343445e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":6.71875,"distances_sum":642.0160044089992}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.400390625,"state":{"ssize":2,"bsize":2},"perf":{"precision":null,"recall":0.400390625,"f1":null,"seconds":3.648921847343445e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":6.71875,"distances_sum":642.0160044089992}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6884765625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6884765625,"f1":0.8041536588411597,"seconds":4.693865776062012e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.15625,"distances_sum":1280.9728322508847}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6884765625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.6884765625,"f1":0.8041536588411597,"seconds":4.693865776062012e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.15625,"distances_sum":1280.9728322508847}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.912109375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.912109375,"f1":0.9495077838827845,"seconds":5.496665835380554e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.859375,"distances_sum":1892.7724905936127}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8935546875, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.8935546875,"f1":0.938925137362638,"seconds":5.844980478286743e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.8828125,"distances_sum":1808.3992924499416}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9536515567765571,"seconds":5.5283308029174805e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.8828125,"distances_sum":1910.4530131251222}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9536515567765571,"seconds":5.5283308029174805e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.8828125,"distances_sum":1910.4530131251222}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9189453125,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9536515567765571,"seconds":5.5283308029174805e-6,"exhaustive_search_seconds":1.4230608940124512e-6,"evaluations":8.8828125,"distances_sum":1910.4530131251222}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3818359375, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.3818359375,"f1":null,"seconds":3.719702363014221e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":5.9453125,"distances_sum":727.7675731471546}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.3818359375,"state":{"ssize":4,"bsize":2},"perf":{"precision":null,"recall":0.3818359375,"f1":null,"seconds":3.719702363014221e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":5.9453125,"distances_sum":727.7675731471546}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3876953125, conf: {"ssize":6,"bsize":2}, perf: {"precision":null,"recall":0.3876953125,"f1":null,"seconds":3.332272171974182e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":6.078125,"distances_sum":720.8014680892404}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.392578125, conf: {"ssize":7,"bsize":2}, perf: {"precision":null,"recall":0.392578125,"f1":null,"seconds":3.2782554626464844e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":6.28125,"distances_sum":750.7061243848011}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.677734375, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.677734375,"f1":0.7970508658008666,"seconds":4.59328293800354e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.1875,"distances_sum":1355.5902690394098}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.533203125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.533203125,"f1":0.6810791638916645,"seconds":3.887340426445007e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":7.3671875,"distances_sum":1004.6781710386219}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.677734375,"state":{"ssize":3,"bsize":4},"perf":{"precision":1.0,"recall":0.677734375,"f1":0.7970508658008666,"seconds":4.59328293800354e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.1875,"distances_sum":1355.5902690394098}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8779296875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8779296875,"f1":0.930374313186814,"seconds":5.425885319709778e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.953125,"distances_sum":1916.6421576335028}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7626953125, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7626953125,"f1":0.8535870379620386,"seconds":4.952773451805115e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.546875,"distances_sum":1570.6041767989122}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.775390625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.775390625,"f1":0.8639345029970038,"seconds":4.760921001434326e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.5859375,"distances_sum":1634.82990296125}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8466796875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8466796875,"f1":0.9086143023643027,"seconds":5.112960934638977e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.734375,"distances_sum":1857.2481556287223}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8779296875,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8779296875,"f1":0.930374313186814,"seconds":5.425885319709778e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.953125,"distances_sum":1916.6421576335028}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8779296875,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8779296875,"f1":0.930374313186814,"seconds":5.425885319709778e-6,"exhaustive_search_seconds":1.210719347000122e-6,"evaluations":8.953125,"distances_sum":1916.6421576335028}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.193359375, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.193359375,"f1":null,"seconds":2.7995556592941284e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":5.5859375,"distances_sum":346.6104188704714}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.193359375,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.193359375,"f1":null,"seconds":2.7995556592941284e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":5.5859375,"distances_sum":346.6104188704714}}, beam: 3, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.193359375,"state":{"ssize":2,"bsize":1},"perf":{"precision":null,"recall":0.193359375,"f1":null,"seconds":2.7995556592941284e-6,"exhaustive_search_seconds":1.3206154108047485e-6,"evaluations":5.5859375,"distances_sum":346.6104188704714}}, n: 9
mean(cfft.distances) = 0.3226904018654028
mean(cdnet.distances) = 0.5423382550330913
mean(crand.distances) = 0.8983512367586036
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.8977777777777778
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.8688888888888888
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8844444444444445
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8733333333333334
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.9466666666666667
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8933333333333334
===> k=5
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.931111111111111
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9488888888888889
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9377777777777778
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.8511111111111113
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.8888888888888888
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.8977777777777778
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.8399999999999999
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8822222222222221
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.9355555555555556
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9400000000000001
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.928888888888889
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.8911111111111111
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.8777777777777778
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8755555555555556
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9022222222222224
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.8688888888888889
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9355555555555556
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8955555555555555
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.9111111111111111
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9044444444444445
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.8911111111111111
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.8822222222222221
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9155555555555556
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.8866666666666667
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9044444444444445
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.9111111111111111
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX==== split_entropy>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 4, 15]]
** centroid: 9, normalized-entropy: 0.7424875695421234, [(2, 4), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 3, 3, 2, 1]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 4, 15]]
** centroid: 9, normalized-entropy: 0.7424875695421234, [(2, 4), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 3, 3, 2, 1]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 4, 15]]
** centroid: 9, normalized-entropy: 0.7424875695421234, [(2, 4), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 3, 3, 2, 1]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 4, 15]]
** centroid: 9, normalized-entropy: 0.7424875695421234, [(2, 4), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 3, 3, 2, 1]
acc = 0.9666666666666667
[ Info: ("XXXXXX==== split_entropy>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 4, 15]]
** centroid: 9, normalized-entropy: 0.7424875695421234, [(2, 4), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 3, 3, 2, 1]
acc = 0.9733333333333334
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 4, 15]]
** centroid: 9, normalized-entropy: 0.7424875695421234, [(2, 4), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 3, 3, 2, 1]
acc = 0.9133333333333333
[ Info: ("XXXXXX==== split_entropy>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 21, 1]]
** centroid: 1, normalized-entropy: 0.2667649878030262, [(2, 21), (3, 1)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 3: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 18]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 19, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 4, 15]]
** centroid: 9, normalized-entropy: 0.7424875695421234, [(2, 4), (3, 15)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 11: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 13 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 1, 3, 1, 2, 3, 3, 2, 1]
acc = 0.9533333333333334
*** finished computation of 12 references, err: [Inf, 0.5598370809356371] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 11, 16]]
** centroid: 1, normalized-entropy: 0.975119064940866, [(2, 11), (3, 16)]
*** center 2: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 12, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 8: selecting labels [2] (freq >= 1) [from [0, 21, 0]]
*** center 9: selecting labels [1] (freq >= 1) [from [2, 0, 0]]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 11: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
*** center 12: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
finished with 13 centroids; started with 12
acc = 0.9266666666666666
Test Summary: | Pass  Total
KNC           |    8      8
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.27662692501631986] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.27662692501631986, 0.23848781972989305] ***
*** finished computation of 3 references, err: [Inf, 0.27662692501631986, 0.23848781972989305] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [157, 48, 0]]
** centroid: 1, normalized-entropy: 0.7851695745756854, [(1, 157), (2, 48)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [78, 215, 20]]
** centroid: 2, normalized-entropy: 0.7099763853352387, [(1, 78), (2, 215), (3, 20)]
*** center 3: selecting labels [1] (freq >= 1) [from [148, 0, 0]]
finished with 3 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.29857819369746963] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.29857819369746963, 0.23668648423752683] ***
*** finished computation of 3 references, err: [Inf, 0.29857819369746963, 0.23668648423752683] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [111, 73, 0]]
** centroid: 1, normalized-entropy: 0.9690111193010181, [(1, 111), (2, 73)]
*** center 2: selecting labels [1, 2, 3] (freq >= 1) [from [129, 165, 21]]
** centroid: 2, normalized-entropy: 0.8054276551894087, [(1, 129), (2, 165), (3, 21)]
*** center 3: selecting labels [1] (freq >= 1) [from [168, 0, 0]]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.2863714300791385] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2863714300791385, 0.251945437628195] ***
*** finished computation of 3 references, err: [Inf, 0.2863714300791385, 0.251945437628195] ***
*** center 1: selecting labels [1] (freq >= 1) [from [179, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [166, 117, 0]]
** centroid: 2, normalized-entropy: 0.9782652470903704, [(1, 166), (2, 117)]
*** center 3: selecting labels [1, 2, 3] (freq >= 1) [from [54, 128, 23]]
** centroid: 3, normalized-entropy: 0.8109373063110981, [(1, 54), (2, 128), (3, 23)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.380472744118305] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.380472744118305, 0.2967163850253132] ***
*** starting iteration: 2; err: [Inf, 0.380472744118305, 0.2967163850253132] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.380472744118305, 0.2967163850253132, 0.29236572152883306] ***
*** starting iteration: 3; err: [Inf, 0.380472744118305, 0.2967163850253132, 0.29236572152883306] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.380472744118305, 0.2967163850253132, 0.29236572152883306, 0.2915759533448243] ***
*** finished computation of 3 references, err: [Inf, 0.380472744118305, 0.2967163850253132, 0.29236572152883306, 0.2915759533448243] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [94, 151, 21]]
** centroid: 1, normalized-entropy: 0.8096204313884234, [(1, 94), (2, 151), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [203, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [111, 87, 0]]
** centroid: 3, normalized-entropy: 0.9893755831922303, [(1, 111), (2, 87)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4141944885669999] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4141944885669999, 0.29864783708084336] ***
*** starting iteration: 2; err: [Inf, 0.4141944885669999, 0.29864783708084336] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4141944885669999, 0.29864783708084336, 0.29414456353328755] ***
*** starting iteration: 3; err: [Inf, 0.4141944885669999, 0.29864783708084336, 0.29414456353328755] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4141944885669999, 0.29864783708084336, 0.29414456353328755, 0.29249161538267243] ***
*** starting iteration: 4; err: [Inf, 0.4141944885669999, 0.29864783708084336, 0.29414456353328755, 0.29249161538267243] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4141944885669999, 0.29864783708084336, 0.29414456353328755, 0.29249161538267243, 0.29196742804360754] ***
*** finished computation of 3 references, err: [Inf, 0.4141944885669999, 0.29864783708084336, 0.29414456353328755, 0.29249161538267243, 0.29196742804360754] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [261, 7, 0]]
** centroid: 1, normalized-entropy: 0.17454087120723855, [(1, 261), (2, 7)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [1, 181, 23]]
** centroid: 2, normalized-entropy: 0.5081408784843806, [(2, 181), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [137, 57, 0]]
** centroid: 3, normalized-entropy: 0.8735977588212388, [(1, 137), (2, 57)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.1815166655611862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1815166655611862, 0.15037424516285192] ***
*** finished computation of 7 references, err: [Inf, 0.1815166655611862, 0.15037424516285192] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [136, 23, 0]]
** centroid: 1, normalized-entropy: 0.5962988584330506, [(1, 136), (2, 23)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [61, 7, 0]]
** centroid: 2, normalized-entropy: 0.4782501641071144, [(1, 61), (2, 7)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 29, 20]]
** centroid: 3, normalized-entropy: 0.9755259511264975, [(2, 29), (3, 20)]
*** center 4: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [93, 11, 0]]
** centroid: 5, normalized-entropy: 0.48702128315977294, [(1, 93), (2, 11)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 107, 0]]
** centroid: 6, normalized-entropy: 0.07584150637714687, [(1, 1), (2, 107)]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 86, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1887030114588709] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1887030114588709, 0.15531188203580398] ***
*** finished computation of 7 references, err: [Inf, 0.1887030114588709, 0.15531188203580398] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [130, 5, 0]]
** centroid: 1, normalized-entropy: 0.22853814395352806, [(1, 130), (2, 5)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [76, 13, 0]]
** centroid: 2, normalized-entropy: 0.5999108763872215, [(1, 76), (2, 13)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 41, 21]]
** centroid: 3, normalized-entropy: 0.9235785996175947, [(2, 41), (3, 21)]
*** center 4: selecting labels [1] (freq >= 1) [from [74, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [36, 94, 0]]
** centroid: 5, normalized-entropy: 0.8512243352621381, [(1, 36), (2, 94)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 85, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18616146087015364] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18616146087015364, 0.14664546406591894] ***
*** finished computation of 7 references, err: [Inf, 0.18616146087015364, 0.14664546406591894] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [22, 86, 0]]
** centroid: 1, normalized-entropy: 0.7292739418449411, [(1, 22), (2, 86)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [71, 17, 0]]
** centroid: 2, normalized-entropy: 0.7080803256135676, [(1, 71), (2, 17)]
*** center 3: selecting labels [1] (freq >= 1) [from [107, 0, 0]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 93, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [100, 22, 0]]
** centroid: 5, normalized-entropy: 0.6807937753703207, [(1, 100), (2, 22)]
*** center 6: selecting labels [1] (freq >= 1) [from [99, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 27, 23]]
** centroid: 7, normalized-entropy: 0.9953784388202258, [(2, 27), (3, 23)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19408892668146002] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19408892668146002, 0.14629370989361862] ***
*** starting iteration: 2; err: [Inf, 0.19408892668146002, 0.14629370989361862] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19408892668146002, 0.14629370989361862, 0.1420159712909265] ***
*** starting iteration: 3; err: [Inf, 0.19408892668146002, 0.14629370989361862, 0.1420159712909265] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19408892668146002, 0.14629370989361862, 0.1420159712909265, 0.141308572888654] ***
*** finished computation of 7 references, err: [Inf, 0.19408892668146002, 0.14629370989361862, 0.1420159712909265, 0.141308572888654] ***
*** center 1: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 64, 20]]
** centroid: 2, normalized-entropy: 0.7918583525674836, [(2, 64), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [60, 40, 0]]
** centroid: 3, normalized-entropy: 0.9709505944546688, [(1, 60), (2, 40)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [90, 13, 0]]
** centroid: 4, normalized-entropy: 0.5469617407220055, [(1, 90), (2, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [46, 50, 0]]
** centroid: 5, normalized-entropy: 0.9987472979361685, [(1, 46), (2, 50)]
*** center 6: selecting labels [1] (freq >= 2) [from [85, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 96, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19878094655362474] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19878094655362474, 0.15137958816724592] ***
*** starting iteration: 2; err: [Inf, 0.19878094655362474, 0.15137958816724592] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19878094655362474, 0.15137958816724592, 0.1472838607803825] ***
*** starting iteration: 3; err: [Inf, 0.19878094655362474, 0.15137958816724592, 0.1472838607803825] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19878094655362474, 0.15137958816724592, 0.1472838607803825, 0.14651935147554399] ***
*** finished computation of 7 references, err: [Inf, 0.19878094655362474, 0.15137958816724592, 0.1472838607803825, 0.14651935147554399] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [58, 55, 0]]
** centroid: 1, normalized-entropy: 0.9994915114306262, [(1, 58), (2, 55)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [73, 9, 0]]
** centroid: 2, normalized-entropy: 0.49917983618854633, [(1, 73), (2, 9)]
*** center 3: selecting labels [1] (freq >= 2) [from [96, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 76, 21]]
** centroid: 4, normalized-entropy: 0.7537153483720096, [(2, 76), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [72, 16, 0]]
** centroid: 5, normalized-entropy: 0.6840384356390419, [(1, 72), (2, 16)]
*** center 6: selecting labels [1] (freq >= 2) [from [100, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [9, 82, 0]]
** centroid: 7, normalized-entropy: 0.4655024490815131, [(1, 9), (2, 82)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18263214673690575] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18263214673690575, 0.15142633258944554] ***
*** starting iteration: 2; err: [Inf, 0.18263214673690575, 0.15142633258944554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18263214673690575, 0.15142633258944554, 0.14806466611350763] ***
*** starting iteration: 3; err: [Inf, 0.18263214673690575, 0.15142633258944554, 0.14806466611350763] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18263214673690575, 0.15142633258944554, 0.14806466611350763, 0.14739734708782526] ***
*** finished computation of 7 references, err: [Inf, 0.18263214673690575, 0.15142633258944554, 0.14806466611350763, 0.14739734708782526] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [115, 4, 0]]
** centroid: 1, normalized-entropy: 0.21220132752136248, [(1, 115), (2, 4)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [67, 19, 0]]
** centroid: 2, normalized-entropy: 0.7618624463753669, [(1, 67), (2, 19)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 44, 23]]
** centroid: 3, normalized-entropy: 0.9279262619599757, [(2, 44), (3, 23)]
*** center 4: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [11, 92, 0]]
** centroid: 5, normalized-entropy: 0.4901757916273403, [(1, 11), (2, 92)]
*** center 6: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 86, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24132345040404313] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24132345040404313, 0.18859124350621626] ***
*** finished computation of 7 references, err: [Inf, 0.24132345040404313, 0.18859124350621626] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [13, 121, 0]]
** centroid: 1, normalized-entropy: 0.4594610707110552, [(1, 13), (2, 121)]
*** center 2: selecting labels [1] (freq >= 1) [from [56, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [61, 39, 0]]
** centroid: 3, normalized-entropy: 0.9647995485050873, [(1, 61), (2, 39)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [64, 29, 0]]
** centroid: 4, normalized-entropy: 0.8952722642402938, [(1, 64), (2, 29)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 74, 20]]
** centroid: 5, normalized-entropy: 0.7467366074830678, [(2, 74), (3, 20)]
*** center 6: selecting labels [1] (freq >= 1) [from [89, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21930907244446396] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21930907244446396, 0.1909452651570114] ***
*** finished computation of 7 references, err: [Inf, 0.21930907244446396, 0.1909452651570114] ***
*** center 1: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 39, 21]]
** centroid: 2, normalized-entropy: 0.9340680553754911, [(2, 39), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [93, 2, 0]]
** centroid: 3, normalized-entropy: 0.14731066693045392, [(1, 93), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [24, 86, 0]]
** centroid: 4, normalized-entropy: 0.7568336324184036, [(1, 24), (2, 86)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [69, 43, 0]]
** centroid: 5, normalized-entropy: 0.960769458040784, [(1, 69), (2, 43)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 68, 0]]
** centroid: 6, normalized-entropy: 0.10928571467638523, [(1, 1), (2, 68)]
*** center 7: selecting labels [1] (freq >= 1) [from [126, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23463900243748967] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23463900243748967, 0.19172250536567848] ***
*** finished computation of 7 references, err: [Inf, 0.23463900243748967, 0.19172250536567848] ***
*** center 1: selecting labels [1] (freq >= 1) [from [108, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 35, 23]]
** centroid: 2, normalized-entropy: 0.9688977092243805, [(2, 35), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [75, 2, 0]]
** centroid: 3, normalized-entropy: 0.17378132267943294, [(1, 75), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [69, 33, 0]]
** centroid: 4, normalized-entropy: 0.9081783472997053, [(1, 69), (2, 33)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [34, 100, 0]]
** centroid: 5, normalized-entropy: 0.8171387756817725, [(1, 34), (2, 100)]
*** center 6: selecting labels [1] (freq >= 1) [from [113, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 75, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.38428850338427917] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.38428850338427917, 0.27389736545856697] ***
*** starting iteration: 2; err: [Inf, 0.38428850338427917, 0.27389736545856697] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.38428850338427917, 0.27389736545856697, 0.24005054039936569] ***
*** starting iteration: 3; err: [Inf, 0.38428850338427917, 0.27389736545856697, 0.24005054039936569] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.38428850338427917, 0.27389736545856697, 0.24005054039936569, 0.22111185714630438] ***
*** starting iteration: 4; err: [Inf, 0.38428850338427917, 0.27389736545856697, 0.24005054039936569, 0.22111185714630438] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.38428850338427917, 0.27389736545856697, 0.24005054039936569, 0.22111185714630438, 0.20351983174155872] ***
*** starting iteration: 5; err: [Inf, 0.38428850338427917, 0.27389736545856697, 0.24005054039936569, 0.22111185714630438, 0.20351983174155872] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.38428850338427917, 0.27389736545856697, 0.24005054039936569, 0.22111185714630438, 0.20351983174155872, 0.1948052705307533] ***
*** starting iteration: 6; err: [Inf, 0.38428850338427917, 0.27389736545856697, 0.24005054039936569, 0.22111185714630438, 0.20351983174155872, 0.1948052705307533] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.38428850338427917, 0.27389736545856697, 0.24005054039936569, 0.22111185714630438, 0.20351983174155872, 0.1948052705307533, 0.19165731265486494] ***
*** starting iteration: 7; err: [Inf, 0.38428850338427917, 0.27389736545856697, 0.24005054039936569, 0.22111185714630438, 0.20351983174155872, 0.1948052705307533, 0.19165731265486494] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.38428850338427917, 0.27389736545856697, 0.24005054039936569, 0.22111185714630438, 0.20351983174155872, 0.1948052705307533, 0.19165731265486494, 0.18938218723484748] ***
*** starting iteration: 8; err: [Inf, 0.38428850338427917, 0.27389736545856697, 0.24005054039936569, 0.22111185714630438, 0.20351983174155872, 0.1948052705307533, 0.19165731265486494, 0.18938218723484748] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.38428850338427917, 0.27389736545856697, 0.24005054039936569, 0.22111185714630438, 0.20351983174155872, 0.1948052705307533, 0.19165731265486494, 0.18938218723484748, 0.18812855652200658] ***
*** starting iteration: 9; err: [Inf, 0.38428850338427917, 0.27389736545856697, 0.24005054039936569, 0.22111185714630438, 0.20351983174155872, 0.1948052705307533, 0.19165731265486494, 0.18938218723484748, 0.18812855652200658] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.38428850338427917, 0.27389736545856697, 0.24005054039936569, 0.22111185714630438, 0.20351983174155872, 0.1948052705307533, 0.19165731265486494, 0.18938218723484748, 0.18812855652200658, 0.1867524822677455] ***
*** starting iteration: 10; err: [Inf, 0.38428850338427917, 0.27389736545856697, 0.24005054039936569, 0.22111185714630438, 0.20351983174155872, 0.1948052705307533, 0.19165731265486494, 0.18938218723484748, 0.18812855652200658, 0.1867524822677455] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.38428850338427917, 0.27389736545856697, 0.24005054039936569, 0.22111185714630438, 0.20351983174155872, 0.1948052705307533, 0.19165731265486494, 0.18938218723484748, 0.18812855652200658, 0.1867524822677455, 0.1861560079059354] ***
*** finished computation of 7 references, err: [Inf, 0.38428850338427917, 0.27389736545856697, 0.24005054039936569, 0.22111185714630438, 0.20351983174155872, 0.1948052705307533, 0.19165731265486494, 0.18938218723484748, 0.18812855652200658, 0.1867524822677455, 0.1861560079059354] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [55, 45, 0]]
** centroid: 1, normalized-entropy: 0.9927744539878083, [(1, 55), (2, 45)]
*** center 2: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 136, 20]]
** centroid: 3, normalized-entropy: 0.552495114325111, [(2, 136), (3, 20)]
*** center 4: selecting labels [1] (freq >= 1) [from [93, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [43, 48, 0]]
** centroid: 5, normalized-entropy: 0.9978211842997324, [(1, 43), (2, 48)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [50, 34, 0]]
** centroid: 6, normalized-entropy: 0.9736680645496202, [(1, 50), (2, 34)]
*** center 7: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
finished with 10 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.3012458754192362] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3012458754192362, 0.2488734332751762] ***
*** starting iteration: 2; err: [Inf, 0.3012458754192362, 0.2488734332751762] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3012458754192362, 0.2488734332751762, 0.22225286059271449] ***
*** starting iteration: 3; err: [Inf, 0.3012458754192362, 0.2488734332751762, 0.22225286059271449] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3012458754192362, 0.2488734332751762, 0.22225286059271449, 0.20340740913490316] ***
*** starting iteration: 4; err: [Inf, 0.3012458754192362, 0.2488734332751762, 0.22225286059271449, 0.20340740913490316] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3012458754192362, 0.2488734332751762, 0.22225286059271449, 0.20340740913490316, 0.19302539593076565] ***
*** starting iteration: 5; err: [Inf, 0.3012458754192362, 0.2488734332751762, 0.22225286059271449, 0.20340740913490316, 0.19302539593076565] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3012458754192362, 0.2488734332751762, 0.22225286059271449, 0.20340740913490316, 0.19302539593076565, 0.189304501524075] ***
*** starting iteration: 6; err: [Inf, 0.3012458754192362, 0.2488734332751762, 0.22225286059271449, 0.20340740913490316, 0.19302539593076565, 0.189304501524075] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3012458754192362, 0.2488734332751762, 0.22225286059271449, 0.20340740913490316, 0.19302539593076565, 0.189304501524075, 0.18834777567619415] ***
*** finished computation of 7 references, err: [Inf, 0.3012458754192362, 0.2488734332751762, 0.22225286059271449, 0.20340740913490316, 0.19302539593076565, 0.189304501524075, 0.18834777567619415] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [77, 11, 0]]
** centroid: 1, normalized-entropy: 0.5435644431995963, [(1, 77), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [63, 14, 0]]
** centroid: 2, normalized-entropy: 0.6840384356390419, [(1, 63), (2, 14)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [110, 1, 0]]
** centroid: 3, normalized-entropy: 0.07414948357792069, [(1, 110), (2, 1)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [2, 89, 0]]
** centroid: 4, normalized-entropy: 0.15240699892386778, [(1, 2), (2, 89)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 77, 21]]
** centroid: 5, normalized-entropy: 0.7495952572594798, [(2, 77), (3, 21)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [34, 46, 0]]
** centroid: 6, normalized-entropy: 0.9837082626231858, [(1, 34), (2, 46)]
*** center 7: selecting labels [1] (freq >= 1) [from [122, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.42110743335094947] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.42110743335094947, 0.24988270527927547] ***
*** starting iteration: 2; err: [Inf, 0.42110743335094947, 0.24988270527927547] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.42110743335094947, 0.24988270527927547, 0.21257072812256247] ***
*** starting iteration: 3; err: [Inf, 0.42110743335094947, 0.24988270527927547, 0.21257072812256247] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.42110743335094947, 0.24988270527927547, 0.21257072812256247, 0.19236288906209104] ***
*** starting iteration: 4; err: [Inf, 0.42110743335094947, 0.24988270527927547, 0.21257072812256247, 0.19236288906209104] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.42110743335094947, 0.24988270527927547, 0.21257072812256247, 0.19236288906209104, 0.1863349812437614] ***
*** starting iteration: 5; err: [Inf, 0.42110743335094947, 0.24988270527927547, 0.21257072812256247, 0.19236288906209104, 0.1863349812437614] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.42110743335094947, 0.24988270527927547, 0.21257072812256247, 0.19236288906209104, 0.1863349812437614, 0.18495834267361724] ***
*** starting iteration: 6; err: [Inf, 0.42110743335094947, 0.24988270527927547, 0.21257072812256247, 0.19236288906209104, 0.1863349812437614, 0.18495834267361724] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.42110743335094947, 0.24988270527927547, 0.21257072812256247, 0.19236288906209104, 0.1863349812437614, 0.18495834267361724, 0.18426762661340576] ***
*** finished computation of 7 references, err: [Inf, 0.42110743335094947, 0.24988270527927547, 0.21257072812256247, 0.19236288906209104, 0.1863349812437614, 0.18495834267361724, 0.18426762661340576] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 93, 23]]
** centroid: 1, normalized-entropy: 0.7184663880382773, [(2, 93), (3, 23)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [1, 84, 0]]
** centroid: 2, normalized-entropy: 0.0922772477445739, [(1, 1), (2, 84)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [61, 37, 0]]
** centroid: 3, normalized-entropy: 0.9562940061600327, [(1, 61), (2, 37)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [109, 4, 0]]
** centroid: 4, normalized-entropy: 0.22077992347107292, [(1, 109), (2, 4)]
*** center 5: selecting labels [1] (freq >= 1) [from [65, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [54, 27, 0]]
** centroid: 6, normalized-entropy: 0.9182958340544894, [(1, 54), (2, 27)]
*** center 7: selecting labels [1] (freq >= 1) [from [109, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2452134490215888] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2452134490215888, 0.19124968431878825] ***
*** starting iteration: 2; err: [Inf, 0.2452134490215888, 0.19124968431878825] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2452134490215888, 0.19124968431878825, 0.18591514232990755] ***
*** starting iteration: 3; err: [Inf, 0.2452134490215888, 0.19124968431878825, 0.18591514232990755] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2452134490215888, 0.19124968431878825, 0.18591514232990755, 0.18400758675749865] ***
*** starting iteration: 4; err: [Inf, 0.2452134490215888, 0.19124968431878825, 0.18591514232990755, 0.18400758675749865] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2452134490215888, 0.19124968431878825, 0.18591514232990755, 0.18400758675749865, 0.18276066019188603] ***
*** starting iteration: 5; err: [Inf, 0.2452134490215888, 0.19124968431878825, 0.18591514232990755, 0.18400758675749865, 0.18276066019188603] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2452134490215888, 0.19124968431878825, 0.18591514232990755, 0.18400758675749865, 0.18276066019188603, 0.18229950368250566] ***
*** finished computation of 7 references, err: [Inf, 0.2452134490215888, 0.19124968431878825, 0.18591514232990755, 0.18400758675749865, 0.18276066019188603, 0.18229950368250566] ***
*** center 1: selecting labels [1] (freq >= 2) [from [117, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 55, 20]]
** centroid: 2, normalized-entropy: 0.8366407419411671, [(2, 55), (3, 20)]
*** center 3: selecting labels [1] (freq >= 2) [from [94, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [93, 14, 0]]
** centroid: 4, normalized-entropy: 0.5597404598417697, [(1, 93), (2, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [57, 43, 0]]
** centroid: 5, normalized-entropy: 0.9858150371789197, [(1, 57), (2, 43)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [22, 51, 0]]
** centroid: 6, normalized-entropy: 0.8829589691462253, [(1, 22), (2, 51)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 100, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22629106476919716] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22629106476919716, 0.19060897131658522] ***
*** starting iteration: 2; err: [Inf, 0.22629106476919716, 0.19060897131658522] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22629106476919716, 0.19060897131658522, 0.18871383301667993] ***
*** starting iteration: 3; err: [Inf, 0.22629106476919716, 0.19060897131658522, 0.18871383301667993] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22629106476919716, 0.19060897131658522, 0.18871383301667993, 0.18804755639438442] ***
*** finished computation of 7 references, err: [Inf, 0.22629106476919716, 0.19060897131658522, 0.18871383301667993, 0.18804755639438442] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [119, 14, 0]]
** centroid: 1, normalized-entropy: 0.48546076074591343, [(1, 119), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [84, 14, 0]]
** centroid: 2, normalized-entropy: 0.5916727785823274, [(1, 84), (2, 14)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 32, 21]]
** centroid: 3, normalized-entropy: 0.9687003436508602, [(2, 32), (3, 21)]
*** center 4: selecting labels [1] (freq >= 2) [from [108, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [97, 11, 0]]
** centroid: 5, normalized-entropy: 0.4748384883008607, [(1, 97), (2, 11)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 87, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 80, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23788560134242812] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23788560134242812, 0.1914019084539379] ***
*** starting iteration: 2; err: [Inf, 0.23788560134242812, 0.1914019084539379] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23788560134242812, 0.1914019084539379, 0.18572306900942834] ***
*** starting iteration: 3; err: [Inf, 0.23788560134242812, 0.1914019084539379, 0.18572306900942834] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23788560134242812, 0.1914019084539379, 0.18572306900942834, 0.1851511057829303] ***
*** finished computation of 7 references, err: [Inf, 0.23788560134242812, 0.1914019084539379, 0.18572306900942834, 0.1851511057829303] ***
*** center 1: selecting labels [1] (freq >= 2) [from [103, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 41, 23]]
** centroid: 2, normalized-entropy: 0.9421631690835511, [(2, 41), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [92, 12, 0]]
** centroid: 3, normalized-entropy: 0.5159469300074472, [(1, 92), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [87, 10, 0]]
** centroid: 4, normalized-entropy: 0.478723511385963, [(1, 87), (2, 10)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [9, 93, 0]]
** centroid: 5, normalized-entropy: 0.43055186701043935, [(1, 9), (2, 93)]
*** center 6: selecting labels [1] (freq >= 2) [from [106, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [2, 89, 0]]
** centroid: 7, normalized-entropy: 0.15240699892386778, [(1, 2), (2, 89)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3714139745668606] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3714139745668606, 0.3027530329388653] ***
*** starting iteration: 2; err: [Inf, 0.3714139745668606, 0.3027530329388653] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3714139745668606, 0.3027530329388653, 0.2952631711008939] ***
*** starting iteration: 3; err: [Inf, 0.3714139745668606, 0.3027530329388653, 0.2952631711008939] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3714139745668606, 0.3027530329388653, 0.2952631711008939, 0.29405827476299023] ***
*** finished computation of 3 references, err: [Inf, 0.3714139745668606, 0.3027530329388653, 0.2952631711008939, 0.29405827476299023] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [252, 33, 0]]
** centroid: 1, normalized-entropy: 0.5171354891896202, [(1, 252), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [131, 38, 0]]
** centroid: 2, normalized-entropy: 0.7689287930143606, [(1, 131), (2, 38)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 192, 20]]
** centroid: 3, normalized-entropy: 0.4507913883546652, [(2, 192), (3, 20)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.39717616488796836] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39717616488796836, 0.3053581825020476] ***
*** starting iteration: 2; err: [Inf, 0.39717616488796836, 0.3053581825020476] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39717616488796836, 0.3053581825020476, 0.2947802696533423] ***
*** starting iteration: 3; err: [Inf, 0.39717616488796836, 0.3053581825020476, 0.2947802696533423] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.39717616488796836, 0.3053581825020476, 0.2947802696533423, 0.2922861356975167] ***
*** finished computation of 3 references, err: [Inf, 0.39717616488796836, 0.3053581825020476, 0.2947802696533423, 0.2922861356975167] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [92, 161, 21]]
** centroid: 1, normalized-entropy: 0.7971286418255462, [(1, 92), (2, 161), (3, 21)]
*** center 2: selecting labels [1] (freq >= 2) [from [199, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [117, 77, 0]]
** centroid: 3, normalized-entropy: 0.9691126575233867, [(1, 117), (2, 77)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.40920869203220156] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40920869203220156, 0.2988465135425575] ***
*** starting iteration: 2; err: [Inf, 0.40920869203220156, 0.2988465135425575] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40920869203220156, 0.2988465135425575, 0.294057393144967] ***
*** starting iteration: 3; err: [Inf, 0.40920869203220156, 0.2988465135425575, 0.294057393144967] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.40920869203220156, 0.2988465135425575, 0.294057393144967, 0.2924772913063663] ***
*** finished computation of 3 references, err: [Inf, 0.40920869203220156, 0.2988465135425575, 0.294057393144967, 0.2924772913063663] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [262, 10, 0]]
** centroid: 1, normalized-entropy: 0.22725656422208346, [(1, 262), (2, 10)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [1, 179, 23]]
** centroid: 2, normalized-entropy: 0.5114543088923236, [(2, 179), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [136, 56, 0]]
** centroid: 3, normalized-entropy: 0.8708644692353648, [(1, 136), (2, 56)]
finished with 4 centroids; started with 3
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.20658700921441298] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20658700921441298, 0.1497945232112688] ***
*** starting iteration: 2; err: [Inf, 0.20658700921441298, 0.1497945232112688] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20658700921441298, 0.1497945232112688, 0.14533503406314743] ***
*** starting iteration: 3; err: [Inf, 0.20658700921441298, 0.1497945232112688, 0.14533503406314743] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20658700921441298, 0.1497945232112688, 0.14533503406314743, 0.14459816660164287] ***
*** finished computation of 7 references, err: [Inf, 0.20658700921441298, 0.1497945232112688, 0.14533503406314743, 0.14459816660164287] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [12, 98, 0]]
** centroid: 1, normalized-entropy: 0.4971677614160751, [(1, 12), (2, 98)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [62, 43, 0]]
** centroid: 2, normalized-entropy: 0.9762497491311086, [(1, 62), (2, 43)]
*** center 3: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [62, 26, 0]]
** centroid: 4, normalized-entropy: 0.8756633923230399, [(1, 62), (2, 26)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 96, 20]]
** centroid: 5, normalized-entropy: 0.6631968402398286, [(2, 96), (3, 20)]
*** center 6: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19245426560370907] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19245426560370907, 0.15301951222649512] ***
*** starting iteration: 2; err: [Inf, 0.19245426560370907, 0.15301951222649512] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19245426560370907, 0.15301951222649512, 0.1497060739242568] ***
*** starting iteration: 3; err: [Inf, 0.19245426560370907, 0.15301951222649512, 0.1497060739242568] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19245426560370907, 0.15301951222649512, 0.1497060739242568, 0.14862223404963715] ***
*** starting iteration: 4; err: [Inf, 0.19245426560370907, 0.15301951222649512, 0.1497060739242568, 0.14862223404963715] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19245426560370907, 0.15301951222649512, 0.1497060739242568, 0.14862223404963715, 0.1480037892039033] ***
*** finished computation of 7 references, err: [Inf, 0.19245426560370907, 0.15301951222649512, 0.1497060739242568, 0.14862223404963715, 0.1480037892039033] ***
*** center 1: selecting labels [1] (freq >= 2) [from [110, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 75, 21]]
** centroid: 2, normalized-entropy: 0.7578784625383954, [(2, 75), (3, 21)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [65, 2, 0]]
** centroid: 3, normalized-entropy: 0.19364280468389852, [(1, 65), (2, 2)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [95, 21, 0]]
** centroid: 4, normalized-entropy: 0.6823348859052101, [(1, 95), (2, 21)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [28, 70, 0]]
** centroid: 5, normalized-entropy: 0.8631205685666311, [(1, 28), (2, 70)]
*** center 6: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [12, 70, 0]]
** centroid: 7, normalized-entropy: 0.6006085754131871, [(1, 12), (2, 70)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.19781003021942298] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19781003021942298, 0.14998362312579286] ***
*** starting iteration: 2; err: [Inf, 0.19781003021942298, 0.14998362312579286] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19781003021942298, 0.14998362312579286, 0.14406345562375467] ***
*** starting iteration: 3; err: [Inf, 0.19781003021942298, 0.14998362312579286, 0.14406345562375467] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19781003021942298, 0.14998362312579286, 0.14406345562375467, 0.14329297192517956] ***
*** finished computation of 7 references, err: [Inf, 0.19781003021942298, 0.14998362312579286, 0.14406345562375467, 0.14329297192517956] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [81, 24, 0]]
** centroid: 1, normalized-entropy: 0.775512658133148, [(1, 81), (2, 24)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [59, 14, 0]]
** centroid: 2, normalized-entropy: 0.7051819722888517, [(1, 59), (2, 14)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 92, 23]]
** centroid: 3, normalized-entropy: 0.7219280948873623, [(2, 92), (3, 23)]
*** center 4: selecting labels [1] (freq >= 2) [from [102, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [64, 29, 0]]
** centroid: 5, normalized-entropy: 0.8952722642402938, [(1, 64), (2, 29)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [10, 86, 0]]
** centroid: 6, normalized-entropy: 0.4820661480830933, [(1, 10), (2, 86)]
*** center 7: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.22705940630387617] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22705940630387617, 0.197173124197423] ***
*** finished computation of 7 references, err: [Inf, 0.22705940630387617, 0.197173124197423] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [78, 49, 0]]
** centroid: 1, normalized-entropy: 0.9620535416312165, [(1, 78), (2, 49)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [76, 5, 0]]
** centroid: 2, normalized-entropy: 0.33426813256179383, [(1, 76), (2, 5)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [94, 10, 0]]
** centroid: 3, normalized-entropy: 0.45668363153944286, [(1, 94), (2, 10)]
*** center 4: selecting labels [2] (freq >= 2) [from [1, 105, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 94, 20]]
** centroid: 5, normalized-entropy: 0.6699960320994334, [(2, 94), (3, 20)]
*** center 6: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.23831221980853998] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23831221980853998, 0.20413656389365892] ***
*** finished computation of 7 references, err: [Inf, 0.23831221980853998, 0.20413656389365892] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [127, 5, 0]]
** centroid: 1, normalized-entropy: 0.23248051561222705, [(1, 127), (2, 5)]
*** center 2: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 71, 17]]
** centroid: 3, normalized-entropy: 0.7080803256135676, [(2, 71), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [131, 0, 0]]
*** center 5: selecting labels [1, 2, 3] (freq >= 2) [from [3, 99, 4]]
** centroid: 5, normalized-entropy: 0.2624809156313863, [(1, 3), (2, 99), (3, 4)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [61, 21, 0]]
** centroid: 6, normalized-entropy: 0.8208002549877175, [(1, 61), (2, 21)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [53, 42, 0]]
** centroid: 7, normalized-entropy: 0.9903070204513952, [(1, 53), (2, 42)]
finished with 8 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.28094983624637887] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.28094983624637887, 0.21853215757595457] ***
*** finished computation of 7 references, err: [Inf, 0.28094983624637887, 0.21853215757595457] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [48, 97, 19]]
** centroid: 1, normalized-entropy: 0.837359813568477, [(1, 48), (2, 97), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [51, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 5: selecting labels [1, 2, 3] (freq >= 2) [from [22, 122, 4]]
** centroid: 5, normalized-entropy: 0.49170592648905953, [(1, 22), (2, 122), (3, 4)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [79, 14, 0]]
** centroid: 6, normalized-entropy: 0.6111841012714984, [(1, 79), (2, 14)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [55, 12, 0]]
** centroid: 7, normalized-entropy: 0.678114052360606, [(1, 55), (2, 12)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.32783594577889275] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32783594577889275, 0.23572109341789205] ***
*** starting iteration: 2; err: [Inf, 0.32783594577889275, 0.23572109341789205] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32783594577889275, 0.23572109341789205, 0.2311077485302905] ***
*** starting iteration: 3; err: [Inf, 0.32783594577889275, 0.23572109341789205, 0.2311077485302905] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.32783594577889275, 0.23572109341789205, 0.2311077485302905, 0.2300350268220378] ***
*** finished computation of 3 references, err: [Inf, 0.32783594577889275, 0.23572109341789205, 0.2311077485302905, 0.2300350268220378] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [232, 11, 0]]
** centroid: 1, normalized-entropy: 0.26594279712591656, [(1, 232), (2, 11)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 201, 20]]
** centroid: 2, normalized-entropy: 0.4381290217230519, [(2, 201), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [151, 51, 0]]
** centroid: 3, normalized-entropy: 0.8151777793922245, [(1, 151), (2, 51)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.340142147850128] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.340142147850128, 0.23247344202551895] ***
*** starting iteration: 2; err: [Inf, 0.340142147850128, 0.23247344202551895] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.340142147850128, 0.23247344202551895, 0.23076993591016692] ***
*** starting iteration: 3; err: [Inf, 0.340142147850128, 0.23247344202551895, 0.23076993591016692] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.340142147850128, 0.23247344202551895, 0.23076993591016692, 0.23044380211066093] ***
*** finished computation of 3 references, err: [Inf, 0.340142147850128, 0.23247344202551895, 0.23076993591016692, 0.23044380211066093] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [101, 155, 21]]
** centroid: 1, normalized-entropy: 0.8085678469833932, [(1, 101), (2, 155), (3, 21)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [116, 83, 0]]
** centroid: 2, normalized-entropy: 0.9800715138271004, [(1, 116), (2, 83)]
*** center 3: selecting labels [1] (freq >= 2) [from [191, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3160161260107736] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3160161260107736, 0.25186879550298114] ***
*** starting iteration: 2; err: [Inf, 0.3160161260107736, 0.25186879550298114] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3160161260107736, 0.25186879550298114, 0.2369964390649632] ***
*** starting iteration: 3; err: [Inf, 0.3160161260107736, 0.25186879550298114, 0.2369964390649632] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3160161260107736, 0.25186879550298114, 0.2369964390649632, 0.23364193160352165] ***
*** finished computation of 3 references, err: [Inf, 0.3160161260107736, 0.25186879550298114, 0.2369964390649632, 0.23364193160352165] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [263, 15, 0]]
** centroid: 1, normalized-entropy: 0.3029732557522725, [(1, 263), (2, 15)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [135, 60, 0]]
** centroid: 2, normalized-entropy: 0.8904916402194913, [(1, 135), (2, 60)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [1, 170, 23]]
** centroid: 3, normalized-entropy: 0.5269731816581291, [(2, 170), (3, 23)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3747060178295225] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3747060178295225, 0.3015853132179997] ***
*** starting iteration: 2; err: [Inf, 0.3747060178295225, 0.3015853132179997] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3747060178295225, 0.3015853132179997, 0.29430557826852743] ***
*** starting iteration: 3; err: [Inf, 0.3747060178295225, 0.3015853132179997, 0.29430557826852743] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3747060178295225, 0.3015853132179997, 0.29430557826852743, 0.29234567746329865] ***
*** starting iteration: 4; err: [Inf, 0.3747060178295225, 0.3015853132179997, 0.29430557826852743, 0.29234567746329865] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3747060178295225, 0.3015853132179997, 0.29430557826852743, 0.29234567746329865, 0.29187638948562444] ***
*** finished computation of 3 references, err: [Inf, 0.3747060178295225, 0.3015853132179997, 0.29430557826852743, 0.29234567746329865, 0.29187638948562444] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [77, 180, 20]]
** centroid: 1, normalized-entropy: 0.7516307087858207, [(1, 77), (2, 180), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [108, 83, 0]]
** centroid: 2, normalized-entropy: 0.9876061943422968, [(1, 108), (2, 83)]
*** center 3: selecting labels [1] (freq >= 2) [from [198, 0, 0]]
finished with 6 centroids; started with 3
generating 4 configurations using top 12 configurations, starting with 13)
[0.9530068991146835, 0.9380008751266237, 0.9249818680956405, 0.9209808611006216, 0.915019810229391, 0.9149958341575108, 0.9110397822972672, 0.8989978001954051, 0.8799607991224758, 0.8759687831544118, 0.8749857642073211, 0.8130525735316155, 0.8130076183968399]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9530068991146835
finished with 14
iteration 2 finished
*** starting iteration: 1; err: [Inf, 0.19736091975212186] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19736091975212186, 0.15996234245771715] ***
*** finished computation of 7 references, err: [Inf, 0.19736091975212186, 0.15996234245771715] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [2, 41, 0]]
** centroid: 1, normalized-entropy: 0.2713895875081112, [(1, 2), (2, 41)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 40, 0]]
** centroid: 2, normalized-entropy: 0.996485989886783, [(1, 46), (2, 40)]
*** center 3: selecting labels [1] (freq >= 2) [from [138, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 123, 20]]
** centroid: 4, normalized-entropy: 0.5838724133205311, [(2, 123), (3, 20)]
*** center 5: selecting labels [1] (freq >= 2) [from [64, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [87, 59, 0]]
** centroid: 6, normalized-entropy: 0.9733038462006476, [(1, 87), (2, 59)]
*** center 7: selecting labels [1] (freq >= 2) [from [46, 0, 0]]
finished with 9 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.18195105296164482] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18195105296164482, 0.14948240341548844] ***
*** finished computation of 7 references, err: [Inf, 0.18195105296164482, 0.14948240341548844] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [6, 78, 0]]
** centroid: 1, normalized-entropy: 0.3712323266408756, [(1, 6), (2, 78)]
*** center 2: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [116, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [72, 27, 0]]
** centroid: 4, normalized-entropy: 0.8453509366224364, [(1, 72), (2, 27)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [84, 25, 0]]
** centroid: 5, normalized-entropy: 0.7768901205770734, [(1, 84), (2, 25)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 105, 21]]
** centroid: 6, normalized-entropy: 0.6500224216483541, [(2, 105), (3, 21)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [76, 3, 0]]
** centroid: 7, normalized-entropy: 0.23292785546981223, [(1, 76), (2, 3)]
finished with 7 centroids; started with 7
[ Info: precision is zero for label '3'; #classes=3 
*** starting iteration: 1; err: [Inf, 0.21496982518876756] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21496982518876756, 0.1594847560828102] ***
*** finished computation of 7 references, err: [Inf, 0.21496982518876756, 0.1594847560828102] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 65, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [117, 7, 0]]
** centroid: 2, normalized-entropy: 0.3131950471154111, [(1, 117), (2, 7)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [76, 50, 0]]
** centroid: 3, normalized-entropy: 0.9690632527820694, [(1, 76), (2, 50)]
*** center 4: selecting labels [1] (freq >= 2) [from [133, 0, 0]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 73, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 30, 23]]
** centroid: 6, normalized-entropy: 0.987380023288353, [(2, 30), (3, 23)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [73, 20, 0]]
** centroid: 7, normalized-entropy: 0.7510324165275097, [(1, 73), (2, 20)]
finished with 9 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 14)
[0.9530068991146835, 0.9380008751266237, 0.9249818680956405, 0.9209808611006216, 0.915019810229391, 0.9149958341575108, 0.9110397822972672, 0.9049768331205458, 0.8989978001954051, 0.8799607991224758, 0.8759687831544118, 0.8749857642073211, 0.8130525735316155, 0.8130076183968399]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9530068991146835
finished with 16
iteration 3 finished
*** starting iteration: 1; err: [Inf, 0.19695147654709072] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19695147654709072, 0.15798445410937115] ***
*** starting iteration: 2; err: [Inf, 0.19695147654709072, 0.15798445410937115] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19695147654709072, 0.15798445410937115, 0.15305600335578556] ***
*** starting iteration: 3; err: [Inf, 0.19695147654709072, 0.15798445410937115, 0.15305600335578556] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19695147654709072, 0.15798445410937115, 0.15305600335578556, 0.15027712724301434] ***
*** finished computation of 7 references, err: [Inf, 0.19695147654709072, 0.15798445410937115, 0.15305600335578556, 0.15027712724301434] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [76, 50, 0]]
** centroid: 1, normalized-entropy: 0.9690632527820694, [(1, 76), (2, 50)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [75, 14, 0]]
** centroid: 2, normalized-entropy: 0.6278191534832795, [(1, 75), (2, 14)]
*** center 3: selecting labels [1] (freq >= 1) [from [77, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 83, 21]]
** centroid: 4, normalized-entropy: 0.7257576154473545, [(2, 83), (3, 21)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [104, 6, 0]]
** centroid: 5, normalized-entropy: 0.30540057087920036, [(1, 104), (2, 6)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [1, 85, 0]]
** centroid: 6, normalized-entropy: 0.09140162014739266, [(1, 1), (2, 85)]
*** center 7: selecting labels [1] (freq >= 1) [from [75, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1880653232445118] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1880653232445118, 0.15206095129293432] ***
*** starting iteration: 2; err: [Inf, 0.1880653232445118, 0.15206095129293432] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1880653232445118, 0.15206095129293432, 0.14630554861937267] ***
*** starting iteration: 3; err: [Inf, 0.1880653232445118, 0.15206095129293432, 0.14630554861937267] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1880653232445118, 0.15206095129293432, 0.14630554861937267, 0.1457419509729566] ***
*** finished computation of 7 references, err: [Inf, 0.1880653232445118, 0.15206095129293432, 0.14630554861937267, 0.1457419509729566] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [112, 1, 0]]
** centroid: 1, normalized-entropy: 0.07306611931384553, [(1, 112), (2, 1)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 53, 20]]
** centroid: 2, normalized-entropy: 0.847107490529376, [(2, 53), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [93, 11, 0]]
** centroid: 3, normalized-entropy: 0.48702128315977294, [(1, 93), (2, 11)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [82, 10, 0]]
** centroid: 4, normalized-entropy: 0.49596907206183377, [(1, 82), (2, 10)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [1, 110, 0]]
** centroid: 5, normalized-entropy: 0.07414948357792069, [(1, 1), (2, 110)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [7, 78, 0]]
** centroid: 6, normalized-entropy: 0.4104161417181887, [(1, 7), (2, 78)]
*** center 7: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20301642618526047] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20301642618526047, 0.1516928534767684] ***
*** starting iteration: 2; err: [Inf, 0.20301642618526047, 0.1516928534767684] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20301642618526047, 0.1516928534767684, 0.1473450736328401] ***
*** starting iteration: 3; err: [Inf, 0.20301642618526047, 0.1516928534767684, 0.1473450736328401] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20301642618526047, 0.1516928534767684, 0.1473450736328401, 0.14646896541277798] ***
*** finished computation of 7 references, err: [Inf, 0.20301642618526047, 0.1516928534767684, 0.1473450736328401, 0.14646896541277798] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [29, 76, 0]]
** centroid: 1, normalized-entropy: 0.8502079949955315, [(1, 29), (2, 76)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [63, 8, 0]]
** centroid: 2, normalized-entropy: 0.5079353563991225, [(1, 63), (2, 8)]
*** center 3: selecting labels [1] (freq >= 1) [from [126, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 60, 23]]
** centroid: 4, normalized-entropy: 0.8514808683852091, [(2, 60), (3, 23)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [80, 19, 0]]
** centroid: 5, normalized-entropy: 0.7054690408228712, [(1, 80), (2, 19)]
*** center 6: selecting labels [1] (freq >= 1) [from [92, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [9, 82, 0]]
** centroid: 7, normalized-entropy: 0.4655024490815131, [(1, 9), (2, 82)]
finished with 12 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2260577406660114] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2260577406660114, 0.19034719080580315] ***
*** starting iteration: 2; err: [Inf, 0.2260577406660114, 0.19034719080580315] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2260577406660114, 0.19034719080580315, 0.18810648032864025] ***
*** starting iteration: 3; err: [Inf, 0.2260577406660114, 0.19034719080580315, 0.18810648032864025] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2260577406660114, 0.19034719080580315, 0.18810648032864025, 0.18806530775183494] ***
*** finished computation of 7 references, err: [Inf, 0.2260577406660114, 0.19034719080580315, 0.18810648032864025, 0.18806530775183494] ***
*** center 1: selecting labels [1] (freq >= 1) [from [88, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 93, 20]]
** centroid: 2, normalized-entropy: 0.6734503665674518, [(2, 93), (3, 20)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [70, 14, 0]]
** centroid: 3, normalized-entropy: 0.6500224216483541, [(1, 70), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [24, 69, 0]]
** centroid: 4, normalized-entropy: 0.8238116333123173, [(1, 24), (2, 69)]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [33, 84, 0]]
** centroid: 5, normalized-entropy: 0.8582307926411409, [(1, 33), (2, 84)]
*** center 6: selecting labels [1] (freq >= 1) [from [103, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [65, 3, 0]]
** centroid: 7, normalized-entropy: 0.260862909647207, [(1, 65), (2, 3)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.22674344626368434] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22674344626368434, 0.18866433957214657] ***
*** starting iteration: 2; err: [Inf, 0.22674344626368434, 0.18866433957214657] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22674344626368434, 0.18866433957214657, 0.18633887151080272] ***
*** starting iteration: 3; err: [Inf, 0.22674344626368434, 0.18866433957214657, 0.18633887151080272] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.22674344626368434, 0.18866433957214657, 0.18633887151080272, 0.18632122780988064] ***
*** finished computation of 7 references, err: [Inf, 0.22674344626368434, 0.18866433957214657, 0.18633887151080272, 0.18632122780988064] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 63, 21]]
** centroid: 1, normalized-entropy: 0.8112781244591328, [(2, 63), (3, 21)]
*** center 2: selecting labels [1] (freq >= 1) [from [100, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [90, 16, 0]]
** centroid: 3, normalized-entropy: 0.612196127490834, [(1, 90), (2, 16)]
*** center 4: selecting labels [1] (freq >= 1) [from [106, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [86, 11, 0]]
** centroid: 5, normalized-entropy: 0.5100930822965021, [(1, 86), (2, 11)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 91, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [26, 57, 0]]
** centroid: 7, normalized-entropy: 0.8968928834064589, [(1, 26), (2, 57)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.24802703891826355] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24802703891826355, 0.1914721557708538] ***
*** starting iteration: 2; err: [Inf, 0.24802703891826355, 0.1914721557708538] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24802703891826355, 0.1914721557708538, 0.1883234606463758] ***
*** starting iteration: 3; err: [Inf, 0.24802703891826355, 0.1914721557708538, 0.1883234606463758] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.24802703891826355, 0.1914721557708538, 0.1883234606463758, 0.18718301293033843] ***
*** finished computation of 7 references, err: [Inf, 0.24802703891826355, 0.1914721557708538, 0.1883234606463758, 0.18718301293033843] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [81, 1, 0]]
** centroid: 1, normalized-entropy: 0.09501724567107643, [(1, 81), (2, 1)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [66, 37, 0]]
** centroid: 2, normalized-entropy: 0.9420365814945866, [(1, 66), (2, 37)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 89, 23]]
** centroid: 3, normalized-entropy: 0.7325138475458123, [(2, 89), (3, 23)]
*** center 4: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [38, 59, 0]]
** centroid: 5, normalized-entropy: 0.9659212398860464, [(1, 38), (2, 59)]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [34, 59, 0]]
** centroid: 6, normalized-entropy: 0.9472268055719005, [(1, 34), (2, 59)]
*** center 7: selecting labels [1] (freq >= 1) [from [84, 0, 0]]
finished with 11 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 16)
[0.9530068991146835, 0.9380008751266237, 0.9249818680956405, 0.9209808611006216, 0.9169948391505277, 0.9169888451325576, 0.915019810229391, 0.9149958341575108, 0.9110397822972672, 0.9049768331205458, 0.8989978001954051, 0.8799607991224758, 0.8759687831544118, 0.8749857642073211, 0.8130525735316155, 0.8130076183968399]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9530068991146835
finished with 16
iteration 4 finished
generating 4 configurations using top 12 configurations, starting with 16)
[0.9530068991146835, 0.9380008751266237, 0.9249818680956405, 0.9209808611006216, 0.9169948391505277, 0.9169888451325576, 0.915019810229391, 0.9149958341575108, 0.9110397822972672, 0.9049768331205458, 0.8989978001954051, 0.8799607991224758, 0.8759687831544118, 0.8749857642073211, 0.8130525735316155, 0.8130076183968399]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9530068991146835
finished with 17
iteration 5 finished
*** starting iteration: 1; err: [Inf, 0.2427107312048117] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2427107312048117, 0.1877031213136854] ***
*** starting iteration: 2; err: [Inf, 0.2427107312048117, 0.1877031213136854] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2427107312048117, 0.1877031213136854, 0.1739369387411185] ***
*** starting iteration: 3; err: [Inf, 0.2427107312048117, 0.1877031213136854, 0.1739369387411185] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2427107312048117, 0.1877031213136854, 0.1739369387411185, 0.16121788175536078] ***
*** starting iteration: 4; err: [Inf, 0.2427107312048117, 0.1877031213136854, 0.1739369387411185, 0.16121788175536078] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2427107312048117, 0.1877031213136854, 0.1739369387411185, 0.16121788175536078, 0.15289734218999543] ***
*** starting iteration: 5; err: [Inf, 0.2427107312048117, 0.1877031213136854, 0.1739369387411185, 0.16121788175536078, 0.15289734218999543] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2427107312048117, 0.1877031213136854, 0.1739369387411185, 0.16121788175536078, 0.15289734218999543, 0.1485925932839938] ***
*** starting iteration: 6; err: [Inf, 0.2427107312048117, 0.1877031213136854, 0.1739369387411185, 0.16121788175536078, 0.15289734218999543, 0.1485925932839938] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2427107312048117, 0.1877031213136854, 0.1739369387411185, 0.16121788175536078, 0.15289734218999543, 0.1485925932839938, 0.14611708062355527] ***
*** starting iteration: 7; err: [Inf, 0.2427107312048117, 0.1877031213136854, 0.1739369387411185, 0.16121788175536078, 0.15289734218999543, 0.1485925932839938, 0.14611708062355527] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2427107312048117, 0.1877031213136854, 0.1739369387411185, 0.16121788175536078, 0.15289734218999543, 0.1485925932839938, 0.14611708062355527, 0.14399820788729903] ***
*** starting iteration: 8; err: [Inf, 0.2427107312048117, 0.1877031213136854, 0.1739369387411185, 0.16121788175536078, 0.15289734218999543, 0.1485925932839938, 0.14611708062355527, 0.14399820788729903] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2427107312048117, 0.1877031213136854, 0.1739369387411185, 0.16121788175536078, 0.15289734218999543, 0.1485925932839938, 0.14611708062355527, 0.14399820788729903, 0.14268605535543682] ***
*** starting iteration: 9; err: [Inf, 0.2427107312048117, 0.1877031213136854, 0.1739369387411185, 0.16121788175536078, 0.15289734218999543, 0.1485925932839938, 0.14611708062355527, 0.14399820788729903, 0.14268605535543682] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2427107312048117, 0.1877031213136854, 0.1739369387411185, 0.16121788175536078, 0.15289734218999543, 0.1485925932839938, 0.14611708062355527, 0.14399820788729903, 0.14268605535543682, 0.14218019239126226] ***
*** finished computation of 7 references, err: [Inf, 0.2427107312048117, 0.1877031213136854, 0.1739369387411185, 0.16121788175536078, 0.15289734218999543, 0.1485925932839938, 0.14611708062355527, 0.14399820788729903, 0.14268605535543682, 0.14218019239126226] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [63, 47, 0]]
** centroid: 1, normalized-entropy: 0.9846841570760806, [(1, 63), (2, 47)]
*** center 2: selecting labels [1] (freq >= 1) [from [73, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [107, 5, 0]]
** centroid: 3, normalized-entropy: 0.2631887790276081, [(1, 107), (2, 5)]
*** center 4: selecting labels [1] (freq >= 1) [from [78, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 1) [from [2, 118, 0]]
** centroid: 5, normalized-entropy: 0.12229159706937456, [(1, 2), (2, 118)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 81, 20]]
** centroid: 6, normalized-entropy: 0.7179499765002912, [(2, 81), (3, 20)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [60, 12, 0]]
** centroid: 7, normalized-entropy: 0.6500224216483541, [(1, 60), (2, 12)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.23002626253305927] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23002626253305927, 0.17127400833688888] ***
*** starting iteration: 2; err: [Inf, 0.23002626253305927, 0.17127400833688888] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23002626253305927, 0.17127400833688888, 0.1598177841100758] ***
*** starting iteration: 3; err: [Inf, 0.23002626253305927, 0.17127400833688888, 0.1598177841100758] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23002626253305927, 0.17127400833688888, 0.1598177841100758, 0.15469700351882462] ***
*** starting iteration: 4; err: [Inf, 0.23002626253305927, 0.17127400833688888, 0.1598177841100758, 0.15469700351882462] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23002626253305927, 0.17127400833688888, 0.1598177841100758, 0.15469700351882462, 0.15110493497085245] ***
*** starting iteration: 5; err: [Inf, 0.23002626253305927, 0.17127400833688888, 0.1598177841100758, 0.15469700351882462, 0.15110493497085245] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23002626253305927, 0.17127400833688888, 0.1598177841100758, 0.15469700351882462, 0.15110493497085245, 0.14865944228613975] ***
*** starting iteration: 6; err: [Inf, 0.23002626253305927, 0.17127400833688888, 0.1598177841100758, 0.15469700351882462, 0.15110493497085245, 0.14865944228613975] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23002626253305927, 0.17127400833688888, 0.1598177841100758, 0.15469700351882462, 0.15110493497085245, 0.14865944228613975, 0.14672985948019032] ***
*** starting iteration: 7; err: [Inf, 0.23002626253305927, 0.17127400833688888, 0.1598177841100758, 0.15469700351882462, 0.15110493497085245, 0.14865944228613975, 0.14672985948019032] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23002626253305927, 0.17127400833688888, 0.1598177841100758, 0.15469700351882462, 0.15110493497085245, 0.14865944228613975, 0.14672985948019032, 0.1453682137855693] ***
*** starting iteration: 8; err: [Inf, 0.23002626253305927, 0.17127400833688888, 0.1598177841100758, 0.15469700351882462, 0.15110493497085245, 0.14865944228613975, 0.14672985948019032, 0.1453682137855693] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23002626253305927, 0.17127400833688888, 0.1598177841100758, 0.15469700351882462, 0.15110493497085245, 0.14865944228613975, 0.14672985948019032, 0.1453682137855693, 0.1443506566178601] ***
*** starting iteration: 9; err: [Inf, 0.23002626253305927, 0.17127400833688888, 0.1598177841100758, 0.15469700351882462, 0.15110493497085245, 0.14865944228613975, 0.14672985948019032, 0.1453682137855693, 0.1443506566178601] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.23002626253305927, 0.17127400833688888, 0.1598177841100758, 0.15469700351882462, 0.15110493497085245, 0.14865944228613975, 0.14672985948019032, 0.1453682137855693, 0.1443506566178601, 0.14374674410758906] ***
*** finished computation of 7 references, err: [Inf, 0.23002626253305927, 0.17127400833688888, 0.1598177841100758, 0.15469700351882462, 0.15110493497085245, 0.14865944228613975, 0.14672985948019032, 0.1453682137855693, 0.1443506566178601, 0.14374674410758906] ***
*** center 1: selecting labels [1] (freq >= 1) [from [122, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [61, 12, 0]]
** centroid: 2, normalized-entropy: 0.644694043811662, [(1, 61), (2, 12)]
*** center 3: selecting labels [1, 2] (freq >= 1) [from [59, 27, 0]]
** centroid: 3, normalized-entropy: 0.8976844934141643, [(1, 59), (2, 27)]
*** center 4: selecting labels [1, 2] (freq >= 1) [from [94, 39, 0]]
** centroid: 4, normalized-entropy: 0.8728610926942303, [(1, 94), (2, 39)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 71, 21]]
** centroid: 5, normalized-entropy: 0.7749672673267259, [(2, 71), (3, 21)]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 87, 0]]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [72, 2, 0]]
** centroid: 7, normalized-entropy: 0.1792560669283214, [(1, 72), (2, 2)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21635407747908858] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21635407747908858, 0.16943128039219837] ***
*** starting iteration: 2; err: [Inf, 0.21635407747908858, 0.16943128039219837] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21635407747908858, 0.16943128039219837, 0.15653123335655908] ***
*** starting iteration: 3; err: [Inf, 0.21635407747908858, 0.16943128039219837, 0.15653123335655908] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21635407747908858, 0.16943128039219837, 0.15653123335655908, 0.15127010223723814] ***
*** starting iteration: 4; err: [Inf, 0.21635407747908858, 0.16943128039219837, 0.15653123335655908, 0.15127010223723814] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21635407747908858, 0.16943128039219837, 0.15653123335655908, 0.15127010223723814, 0.1488532289594546] ***
*** starting iteration: 5; err: [Inf, 0.21635407747908858, 0.16943128039219837, 0.15653123335655908, 0.15127010223723814, 0.1488532289594546] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21635407747908858, 0.16943128039219837, 0.15653123335655908, 0.15127010223723814, 0.1488532289594546, 0.14752718025969963] ***
*** starting iteration: 6; err: [Inf, 0.21635407747908858, 0.16943128039219837, 0.15653123335655908, 0.15127010223723814, 0.1488532289594546, 0.14752718025969963] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21635407747908858, 0.16943128039219837, 0.15653123335655908, 0.15127010223723814, 0.1488532289594546, 0.14752718025969963, 0.14712509529656734] ***
*** finished computation of 7 references, err: [Inf, 0.21635407747908858, 0.16943128039219837, 0.15653123335655908, 0.15127010223723814, 0.1488532289594546, 0.14752718025969963, 0.14712509529656734] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [6, 91, 0]]
** centroid: 1, normalized-entropy: 0.3347676126777638, [(1, 6), (2, 91)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [108, 9, 0]]
** centroid: 2, normalized-entropy: 0.3912435636292556, [(1, 108), (2, 9)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 68, 23]]
** centroid: 3, normalized-entropy: 0.8156034512499668, [(2, 68), (3, 23)]
*** center 4: selecting labels [1] (freq >= 1) [from [96, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [95, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 1) [from [24, 65, 0]]
** centroid: 6, normalized-entropy: 0.8409805336163159, [(1, 24), (2, 65)]
*** center 7: selecting labels [1, 2] (freq >= 1) [from [70, 12, 0]]
** centroid: 7, normalized-entropy: 0.6006085754131871, [(1, 70), (2, 12)]
finished with 10 centroids; started with 7
generating 4 configurations using top 12 configurations, starting with 17)
[0.9530068991146835, 0.9429908950867034, 0.9380008751266237, 0.9249818680956405, 0.9209808611006216, 0.9169948391505277, 0.9169888451325576, 0.915019810229391, 0.9149958341575108, 0.9110397822972672, 0.9049768331205458, 0.8989978001954051, 0.8799607991224758, 0.8759687831544118, 0.8749857642073211, 0.8130525735316155, 0.8130076183968399]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9530068991146835
finished with 17
iteration 6 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.9530068991146835, 0.9429908950867034, 0.9380008751266237, 0.9249818680956405, 0.9209808611006216, 0.9169948391505277, 0.9169888451325576, 0.915019810229391, 0.9149958341575108, 0.9110397822972672, 0.9049768331205458, 0.8989978001954051, 0.8799607991224758, 0.8759687831544118, 0.8749857642073211, 0.8130525735316155, 0.8130076183968399]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9530068991146835
finished with 17
iteration 7 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.9530068991146835, 0.9429908950867034, 0.9380008751266237, 0.9249818680956405, 0.9209808611006216, 0.9169948391505277, 0.9169888451325576, 0.915019810229391, 0.9149958341575108, 0.9110397822972672, 0.9049768331205458, 0.8989978001954051, 0.8799607991224758, 0.8759687831544118, 0.8749857642073211, 0.8130525735316155, 0.8130076183968399]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9530068991146835
finished with 17
iteration 8 finished
generating 4 configurations using top 12 configurations, starting with 17)
[0.9530068991146835, 0.9429908950867034, 0.9380008751266237, 0.9249818680956405, 0.9209808611006216, 0.9169948391505277, 0.9169888451325576, 0.915019810229391, 0.9149958341575108, 0.9110397822972672, 0.9049768331205458, 0.8989978001954051, 0.8799607991224758, 0.8759687831544118, 0.8749857642073211, 0.8130525735316155, 0.8130076183968399]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.l2_distance, Statistics.mean, KCenters.most_frequent_label, 1, 7, 3, 1.0, :fft, 0.6, 2) => 0.9530068991146835
finished with 19
iteration 9 finished
*** starting iteration: 1; err: [Inf, 0.45737139588115633] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45737139588115633, 0.34258533977867067] ***
*** starting iteration: 2; err: [Inf, 0.45737139588115633, 0.34258533977867067] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45737139588115633, 0.34258533977867067, 0.3381390303062896] ***
*** starting iteration: 3; err: [Inf, 0.45737139588115633, 0.34258533977867067, 0.3381390303062896] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.45737139588115633, 0.34258533977867067, 0.3381390303062896, 0.3334975994580814] ***
*** finished computation of 3 references, err: [Inf, 0.45737139588115633, 0.34258533977867067, 0.3381390303062896, 0.3334975994580814] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [59, 187, 20]]
** centroid: 1, normalized-entropy: 0.7066445546313205, [(1, 59), (2, 187), (3, 20)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [182, 13, 0]]
** centroid: 2, normalized-entropy: 0.3533593350214213, [(1, 182), (2, 13)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [142, 63, 0]]
** centroid: 3, normalized-entropy: 0.8900521670656433, [(1, 142), (2, 63)]
finished with 7 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.3778829536438435] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3778829536438435, 0.34104290013404] ***
*** starting iteration: 2; err: [Inf, 0.3778829536438435, 0.34104290013404] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3778829536438435, 0.34104290013404, 0.30295016401694497] ***
*** starting iteration: 3; err: [Inf, 0.3778829536438435, 0.34104290013404, 0.30295016401694497] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.3778829536438435, 0.34104290013404, 0.30295016401694497, 0.29629248992373786] ***
*** finished computation of 3 references, err: [Inf, 0.3778829536438435, 0.34104290013404, 0.30295016401694497, 0.29629248992373786] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [115, 86, 0]]
** centroid: 1, normalized-entropy: 0.984931667482493, [(1, 115), (2, 86)]
*** center 2: selecting labels [1, 2, 3] (freq >= 2) [from [89, 152, 21]]
** centroid: 2, normalized-entropy: 0.805502003588063, [(1, 89), (2, 152), (3, 21)]
*** center 3: selecting labels [1] (freq >= 2) [from [204, 0, 0]]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.4395652346514065] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4395652346514065, 0.3252692605456759] ***
*** starting iteration: 2; err: [Inf, 0.4395652346514065, 0.3252692605456759] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4395652346514065, 0.3252692605456759, 0.3223179720490166] ***
*** starting iteration: 3; err: [Inf, 0.4395652346514065, 0.3252692605456759, 0.3223179720490166] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.4395652346514065, 0.3252692605456759, 0.3223179720490166, 0.319656603722491] ***
*** finished computation of 3 references, err: [Inf, 0.4395652346514065, 0.3252692605456759, 0.3223179720490166, 0.319656603722491] ***
*** center 1: selecting labels [1] (freq >= 2) [from [214, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [110, 112, 0]]
** centroid: 2, normalized-entropy: 0.999941453025042, [(1, 110), (2, 112)]
*** center 3: selecting labels [1, 2, 3] (freq >= 2) [from [75, 133, 23]]
** centroid: 3, normalized-entropy: 0.8308556543833421, [(1, 75), (2, 133), (3, 23)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.30621615313720685] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30621615313720685, 0.2533438350227815] ***
*** starting iteration: 2; err: [Inf, 0.30621615313720685, 0.2533438350227815] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30621615313720685, 0.2533438350227815, 0.23749059617278856] ***
*** starting iteration: 3; err: [Inf, 0.30621615313720685, 0.2533438350227815, 0.23749059617278856] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.30621615313720685, 0.2533438350227815, 0.23749059617278856, 0.23289005894090858] ***
*** finished computation of 3 references, err: [Inf, 0.30621615313720685, 0.2533438350227815, 0.23749059617278856, 0.23289005894090858] ***
*** center 1: selecting labels [1, 2, 3] (freq >= 2) [from [64, 163, 20]]
** centroid: 1, normalized-entropy: 0.7534513438814446, [(1, 64), (2, 163), (3, 20)]
*** center 2: selecting labels [1] (freq >= 2) [from [196, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [123, 100, 0]]
** centroid: 3, normalized-entropy: 0.9923128903499058, [(1, 123), (2, 100)]
finished with 6 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2771981121756477] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2771981121756477, 0.255168328072172] ***
*** starting iteration: 2; err: [Inf, 0.2771981121756477, 0.255168328072172] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2771981121756477, 0.255168328072172, 0.2385358220633717] ***
*** starting iteration: 3; err: [Inf, 0.2771981121756477, 0.255168328072172, 0.2385358220633717] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2771981121756477, 0.255168328072172, 0.2385358220633717, 0.235258458164064] ***
*** finished computation of 3 references, err: [Inf, 0.2771981121756477, 0.255168328072172, 0.2385358220633717, 0.235258458164064] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [135, 60, 0]]
** centroid: 1, normalized-entropy: 0.8904916402194913, [(1, 135), (2, 60)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [273, 13, 0]]
** centroid: 2, normalized-entropy: 0.2667649878030262, [(1, 273), (2, 13)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 165, 21]]
** centroid: 3, normalized-entropy: 0.5086113313826895, [(2, 165), (3, 21)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.2854636014485243] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2854636014485243, 0.2682470564508456] ***
*** starting iteration: 2; err: [Inf, 0.2854636014485243, 0.2682470564508456] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2854636014485243, 0.2682470564508456, 0.24319569938823113] ***
*** starting iteration: 3; err: [Inf, 0.2854636014485243, 0.2682470564508456, 0.24319569938823113] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.2854636014485243, 0.2682470564508456, 0.24319569938823113, 0.2368214477615981] ***
*** finished computation of 3 references, err: [Inf, 0.2854636014485243, 0.2682470564508456, 0.24319569938823113, 0.2368214477615981] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [236, 14, 0]]
** centroid: 1, normalized-entropy: 0.31135737042928313, [(1, 236), (2, 14)]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [1, 193, 23]]
** centroid: 2, normalized-entropy: 0.489210959653974, [(2, 193), (3, 23)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [162, 38, 0]]
** centroid: 3, normalized-entropy: 0.7014714598838974, [(1, 162), (2, 38)]
finished with 6 centroids; started with 3
[ Info: ========== BEST MODEL ==========
*** starting iteration: 1; err: [Inf, 0.18762535401945934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18762535401945934, 0.15430678324279143] ***
*** starting iteration: 2; err: [Inf, 0.18762535401945934, 0.15430678324279143] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18762535401945934, 0.15430678324279143, 0.14886557363299652] ***
*** starting iteration: 3; err: [Inf, 0.18762535401945934, 0.15430678324279143, 0.14886557363299652] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18762535401945934, 0.15430678324279143, 0.14886557363299652, 0.14723596885288134] ***
*** finished computation of 7 references, err: [Inf, 0.18762535401945934, 0.15430678324279143, 0.14886557363299652, 0.14723596885288134] ***
*** center 1: selecting labels [1] (freq >= 2) [from [155, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 78, 32]]
** centroid: 2, normalized-entropy: 0.8698926856041562, [(2, 78), (3, 32)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [125, 21, 0]]
** centroid: 3, normalized-entropy: 0.5941964666806003, [(1, 125), (2, 21)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [118, 10, 0]]
** centroid: 4, normalized-entropy: 0.3955378064564774, [(1, 118), (2, 10)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [21, 143, 0]]
** centroid: 5, normalized-entropy: 0.5520625714615981, [(1, 21), (2, 143)]
*** center 6: selecting labels [1] (freq >= 2) [from [158, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [18, 121, 0]]
** centroid: 7, normalized-entropy: 0.556055448722158, [(1, 18), (2, 121)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1707233403529972] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1707233403529972, 0.14654798158165067] ***
*** starting iteration: 2; err: [Inf, 0.1707233403529972, 0.14654798158165067] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1707233403529972, 0.14654798158165067, 0.14152143284492194] ***
*** starting iteration: 3; err: [Inf, 0.1707233403529972, 0.14654798158165067, 0.14152143284492194] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1707233403529972, 0.14654798158165067, 0.14152143284492194, 0.1383246613184456] ***
*** finished computation of 7 references, err: [Inf, 0.1707233403529972, 0.14654798158165067, 0.14152143284492194, 0.1383246613184456] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 76, 13]]
** centroid: 1, normalized-entropy: 0.5999108763872215, [(2, 76), (3, 13)]
*** center 2: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [51, 8, 0]]
** centroid: 3, normalized-entropy: 0.572580465623769, [(1, 51), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [53, 27, 0]]
** centroid: 4, normalized-entropy: 0.9224062617590724, [(1, 53), (2, 27)]
*** center 5: selecting labels [1] (freq >= 2) [from [69, 1, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [76, 7, 0]]
** centroid: 6, normalized-entropy: 0.4172806906708316, [(1, 76), (2, 7)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 67, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18959964477084576] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18959964477084576, 0.14882442330755294] ***
*** starting iteration: 2; err: [Inf, 0.18959964477084576, 0.14882442330755294] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18959964477084576, 0.14882442330755294, 0.14516409012302756] ***
*** starting iteration: 3; err: [Inf, 0.18959964477084576, 0.14882442330755294, 0.14516409012302756] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18959964477084576, 0.14882442330755294, 0.14516409012302756, 0.14479435478709637] ***
*** finished computation of 7 references, err: [Inf, 0.18959964477084576, 0.14882442330755294, 0.14516409012302756, 0.14479435478709637] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [10, 61, 0]]
** centroid: 1, normalized-entropy: 0.5864477034453907, [(1, 10), (2, 61)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [57, 11, 0]]
** centroid: 2, normalized-entropy: 0.6385146263620961, [(1, 57), (2, 11)]
*** center 3: selecting labels [1] (freq >= 2) [from [78, 0, 0]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 74, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [83, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [69, 9, 0]]
** centroid: 6, normalized-entropy: 0.5159469300074472, [(1, 69), (2, 9)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 31, 17]]
** centroid: 7, normalized-entropy: 0.9377342939868042, [(2, 31), (3, 17)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18322551912628116] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18322551912628116, 0.15261451348289848] ***
*** starting iteration: 2; err: [Inf, 0.18322551912628116, 0.15261451348289848] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18322551912628116, 0.15261451348289848, 0.1487115149218589] ***
*** starting iteration: 3; err: [Inf, 0.18322551912628116, 0.15261451348289848, 0.1487115149218589] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18322551912628116, 0.15261451348289848, 0.1487115149218589, 0.1463051239233464] ***
*** finished computation of 7 references, err: [Inf, 0.18322551912628116, 0.15261451348289848, 0.1487115149218589, 0.1463051239233464] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [20, 71, 0]]
** centroid: 1, normalized-entropy: 0.7597659876428757, [(1, 20), (2, 71)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [59, 7, 0]]
** centroid: 2, normalized-entropy: 0.48791799258948565, [(1, 59), (2, 7)]
*** center 3: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 37, 17]]
** centroid: 4, normalized-entropy: 0.8986533756907481, [(2, 37), (3, 17)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [76, 3, 0]]
** centroid: 5, normalized-entropy: 0.23292785546981223, [(1, 76), (2, 3)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 73, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20114597533550113] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20114597533550113, 0.15520389650389552] ***
*** starting iteration: 2; err: [Inf, 0.20114597533550113, 0.15520389650389552] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20114597533550113, 0.15520389650389552, 0.14987280934676528] ***
*** starting iteration: 3; err: [Inf, 0.20114597533550113, 0.15520389650389552, 0.14987280934676528] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20114597533550113, 0.15520389650389552, 0.14987280934676528, 0.14816762498486788] ***
*** finished computation of 7 references, err: [Inf, 0.20114597533550113, 0.15520389650389552, 0.14987280934676528, 0.14816762498486788] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [49, 32, 0]]
** centroid: 1, normalized-entropy: 0.9679884922470298, [(1, 49), (2, 32)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [44, 12, 0]]
** centroid: 2, normalized-entropy: 0.7495952572594798, [(1, 44), (2, 12)]
*** center 3: selecting labels [1] (freq >= 2) [from [98, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 47, 16]]
** centroid: 4, normalized-entropy: 0.8175072881213616, [(2, 47), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [65, 5, 0]]
** centroid: 5, normalized-entropy: 0.3712323266408756, [(1, 65), (2, 5)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 72, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [42, 18, 0]]
** centroid: 7, normalized-entropy: 0.8812908992306927, [(1, 42), (2, 18)]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2003227337785065] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2003227337785065, 0.15446536465920507] ***
*** starting iteration: 2; err: [Inf, 0.2003227337785065, 0.15446536465920507] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2003227337785065, 0.15446536465920507, 0.14992624317109585] ***
*** starting iteration: 3; err: [Inf, 0.2003227337785065, 0.15446536465920507, 0.14992624317109585] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2003227337785065, 0.15446536465920507, 0.14992624317109585, 0.149514277420938] ***
*** finished computation of 7 references, err: [Inf, 0.2003227337785065, 0.15446536465920507, 0.14992624317109585, 0.149514277420938] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [34, 37, 0]]
** centroid: 1, normalized-entropy: 0.9987117514654895, [(1, 34), (2, 37)]
*** center 2: selecting labels [1] (freq >= 2) [from [54, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 78, 13]]
** centroid: 4, normalized-entropy: 0.5916727785823274, [(2, 78), (3, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [67, 15, 0]]
** centroid: 5, normalized-entropy: 0.6864381668766382, [(1, 67), (2, 15)]
*** center 6: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [7, 49, 0]]
** centroid: 7, normalized-entropy: 0.5435644431995963, [(1, 7), (2, 49)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18328861675783992] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18328861675783992, 0.1479549051374197] ***
*** starting iteration: 2; err: [Inf, 0.18328861675783992, 0.1479549051374197] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18328861675783992, 0.1479549051374197, 0.1434953813571483] ***
*** starting iteration: 3; err: [Inf, 0.18328861675783992, 0.1479549051374197, 0.1434953813571483] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18328861675783992, 0.1479549051374197, 0.1434953813571483, 0.14298448926024138] ***
*** finished computation of 7 references, err: [Inf, 0.18328861675783992, 0.1479549051374197, 0.1434953813571483, 0.14298448926024138] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 73, 13]]
** centroid: 1, normalized-entropy: 0.6127425554686624, [(2, 73), (3, 13)]
*** center 2: selecting labels [1] (freq >= 2) [from [65, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [53, 7, 0]]
** centroid: 3, normalized-entropy: 0.5197027865043053, [(1, 53), (2, 7)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [47, 26, 0]]
** centroid: 4, normalized-entropy: 0.9394532068181357, [(1, 47), (2, 26)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [59, 22, 0]]
** centroid: 5, normalized-entropy: 0.8437582063121657, [(1, 59), (2, 22)]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 65, 3]]
** centroid: 6, normalized-entropy: 0.260862909647207, [(2, 65), (3, 3)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [65, 2, 0]]
** centroid: 7, normalized-entropy: 0.19364280468389852, [(1, 65), (2, 2)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1892301830984652] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1892301830984652, 0.15073209463059903] ***
*** starting iteration: 2; err: [Inf, 0.1892301830984652, 0.15073209463059903] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1892301830984652, 0.15073209463059903, 0.14519404943007977] ***
*** starting iteration: 3; err: [Inf, 0.1892301830984652, 0.15073209463059903, 0.14519404943007977] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1892301830984652, 0.15073209463059903, 0.14519404943007977, 0.1444272426404059] ***
*** finished computation of 7 references, err: [Inf, 0.1892301830984652, 0.15073209463059903, 0.14519404943007977, 0.1444272426404059] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [73, 14, 0]]
** centroid: 1, normalized-entropy: 0.6365048555378351, [(1, 73), (2, 14)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [32, 11, 0]]
** centroid: 2, normalized-entropy: 0.8203636429576731, [(1, 32), (2, 11)]
*** center 3: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 60, 18]]
** centroid: 4, normalized-entropy: 0.7793498372920851, [(2, 60), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [48, 31, 0]]
** centroid: 5, normalized-entropy: 0.966334094295981, [(1, 48), (2, 31)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 72, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1908598508425057] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1908598508425057, 0.14476650067511945] ***
*** starting iteration: 2; err: [Inf, 0.1908598508425057, 0.14476650067511945] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1908598508425057, 0.14476650067511945, 0.140141007295344] ***
*** starting iteration: 3; err: [Inf, 0.1908598508425057, 0.14476650067511945, 0.140141007295344] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1908598508425057, 0.14476650067511945, 0.140141007295344, 0.1395017551551573] ***
*** finished computation of 7 references, err: [Inf, 0.1908598508425057, 0.14476650067511945, 0.140141007295344, 0.1395017551551573] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 83, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [61, 26, 0]]
** centroid: 2, normalized-entropy: 0.8798813089176428, [(1, 61), (2, 26)]
*** center 3: selecting labels [1] (freq >= 2) [from [76, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 47, 18]]
** centroid: 4, normalized-entropy: 0.8512243352621381, [(2, 47), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [63, 2, 0]]
** centroid: 5, normalized-entropy: 0.19823496409776642, [(1, 63), (2, 2)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [54, 17, 0]]
** centroid: 6, normalized-entropy: 0.7941021417852022, [(1, 54), (2, 17)]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [46, 7, 0]]
** centroid: 7, normalized-entropy: 0.5631028237513912, [(1, 46), (2, 7)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.186982080694288] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.186982080694288, 0.15145624710433186] ***
*** starting iteration: 2; err: [Inf, 0.186982080694288, 0.15145624710433186] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.186982080694288, 0.15145624710433186, 0.14749039895553143] ***
*** starting iteration: 3; err: [Inf, 0.186982080694288, 0.15145624710433186, 0.14749039895553143] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.186982080694288, 0.15145624710433186, 0.14749039895553143, 0.14685093770362437] ***
*** finished computation of 7 references, err: [Inf, 0.186982080694288, 0.15145624710433186, 0.14749039895553143, 0.14685093770362437] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [82, 2, 0]]
** centroid: 1, normalized-entropy: 0.1623261801753929, [(1, 82), (2, 2)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 15, 0]]
** centroid: 2, normalized-entropy: 0.8047175193210769, [(1, 46), (2, 15)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 42, 14]]
** centroid: 3, normalized-entropy: 0.8112781244591328, [(2, 42), (3, 14)]
*** center 4: selecting labels [1] (freq >= 2) [from [68, 0, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [61, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [34, 45, 0]]
** centroid: 6, normalized-entropy: 0.985969027451193, [(1, 34), (2, 45)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 90, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1868146641589701] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1868146641589701, 0.15046875799633563] ***
*** starting iteration: 2; err: [Inf, 0.1868146641589701, 0.15046875799633563] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1868146641589701, 0.15046875799633563, 0.14642993169650437] ***
*** starting iteration: 3; err: [Inf, 0.1868146641589701, 0.15046875799633563, 0.14642993169650437] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1868146641589701, 0.15046875799633563, 0.14642993169650437, 0.145808796341531] ***
*** finished computation of 7 references, err: [Inf, 0.1868146641589701, 0.15046875799633563, 0.14642993169650437, 0.145808796341531] ***
*** center 1: selecting labels [1] (freq >= 2) [from [99, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 47, 18]]
** centroid: 2, normalized-entropy: 0.8512243352621381, [(2, 47), (3, 18)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 16, 0]]
** centroid: 3, normalized-entropy: 0.8301899714180444, [(1, 45), (2, 16)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [75, 14, 0]]
** centroid: 4, normalized-entropy: 0.6278191534832795, [(1, 75), (2, 14)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [19, 55, 0]]
** centroid: 5, normalized-entropy: 0.8218127305034848, [(1, 19), (2, 55)]
*** center 6: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 52, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19714001471549272] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19714001471549272, 0.14597922703810037] ***
*** starting iteration: 2; err: [Inf, 0.19714001471549272, 0.14597922703810037] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19714001471549272, 0.14597922703810037, 0.14226474271900952] ***
*** starting iteration: 3; err: [Inf, 0.19714001471549272, 0.14597922703810037, 0.14226474271900952] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19714001471549272, 0.14597922703810037, 0.14226474271900952, 0.14175404899567365] ***
*** finished computation of 7 references, err: [Inf, 0.19714001471549272, 0.14597922703810037, 0.14226474271900952, 0.14175404899567365] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [72, 3, 0]]
** centroid: 1, normalized-entropy: 0.24229218908241482, [(1, 72), (2, 3)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [46, 26, 0]]
** centroid: 2, normalized-entropy: 0.943601631299382, [(1, 46), (2, 26)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 57, 17]]
** centroid: 3, normalized-entropy: 0.77753986416076, [(2, 57), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [80, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [43, 24, 0]]
** centroid: 5, normalized-entropy: 0.9411864371816836, [(1, 43), (2, 24)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 63, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19519030049350114] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19519030049350114, 0.14942731969896703] ***
*** starting iteration: 2; err: [Inf, 0.19519030049350114, 0.14942731969896703] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19519030049350114, 0.14942731969896703, 0.14631409552134572] ***
*** starting iteration: 3; err: [Inf, 0.19519030049350114, 0.14942731969896703, 0.14631409552134572] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19519030049350114, 0.14942731969896703, 0.14631409552134572, 0.1455596048310399] ***
*** finished computation of 7 references, err: [Inf, 0.19519030049350114, 0.14942731969896703, 0.14631409552134572, 0.1455596048310399] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [54, 11, 0]]
** centroid: 1, normalized-entropy: 0.6559420757694151, [(1, 54), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [57, 12, 0]]
** centroid: 2, normalized-entropy: 0.6665783579949205, [(1, 57), (2, 12)]
*** center 3: selecting labels [1] (freq >= 2) [from [71, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 63, 18]]
** centroid: 4, normalized-entropy: 0.7642045065086204, [(2, 63), (3, 18)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [51, 33, 0]]
** centroid: 5, normalized-entropy: 0.9666186325481027, [(1, 51), (2, 33)]
*** center 6: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 60, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18423977650702] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18423977650702, 0.1491203391882591] ***
*** starting iteration: 2; err: [Inf, 0.18423977650702, 0.1491203391882591] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18423977650702, 0.1491203391882591, 0.1460322466264479] ***
*** starting iteration: 3; err: [Inf, 0.18423977650702, 0.1491203391882591, 0.1460322466264479] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18423977650702, 0.1491203391882591, 0.1460322466264479, 0.14487427342496811] ***
*** finished computation of 7 references, err: [Inf, 0.18423977650702, 0.1491203391882591, 0.1460322466264479, 0.14487427342496811] ***
*** center 1: selecting labels [1] (freq >= 2) [from [90, 1, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 51, 15]]
** centroid: 2, normalized-entropy: 0.7732266742876346, [(2, 51), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [49, 14, 0]]
** centroid: 3, normalized-entropy: 0.7642045065086204, [(1, 49), (2, 14)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [37, 35, 0]]
** centroid: 4, normalized-entropy: 0.9994433330902989, [(1, 37), (2, 35)]
*** center 5: selecting labels [1] (freq >= 2) [from [53, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 83, 0]]
** centroid: 6, normalized-entropy: 0.314682604134666, [(1, 5), (2, 83)]
*** center 7: selecting labels [1] (freq >= 2) [from [67, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.21570381351560355] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21570381351560355, 0.15063127630623058] ***
*** starting iteration: 2; err: [Inf, 0.21570381351560355, 0.15063127630623058] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21570381351560355, 0.15063127630623058, 0.1458758856318891] ***
*** starting iteration: 3; err: [Inf, 0.21570381351560355, 0.15063127630623058, 0.1458758856318891] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.21570381351560355, 0.15063127630623058, 0.1458758856318891, 0.14547882127575576] ***
*** finished computation of 7 references, err: [Inf, 0.21570381351560355, 0.15063127630623058, 0.1458758856318891, 0.14547882127575576] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 20, 19]]
** centroid: 1, normalized-entropy: 0.9995256892936492, [(2, 20), (3, 19)]
*** center 2: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [73, 7, 0]]
** centroid: 3, normalized-entropy: 0.4280696292293062, [(1, 73), (2, 7)]
*** center 4: selecting labels [1] (freq >= 2) [from [69, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [54, 14, 0]]
** centroid: 5, normalized-entropy: 0.7335379291086666, [(1, 54), (2, 14)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 74, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [8, 70, 0]]
** centroid: 7, normalized-entropy: 0.4770713062193298, [(1, 8), (2, 70)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19284739957004784] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19284739957004784, 0.14891837134957314] ***
*** starting iteration: 2; err: [Inf, 0.19284739957004784, 0.14891837134957314] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19284739957004784, 0.14891837134957314, 0.14385167471691965] ***
*** starting iteration: 3; err: [Inf, 0.19284739957004784, 0.14891837134957314, 0.14385167471691965] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19284739957004784, 0.14891837134957314, 0.14385167471691965, 0.14221778262406587] ***
*** finished computation of 7 references, err: [Inf, 0.19284739957004784, 0.14891837134957314, 0.14385167471691965, 0.14221778262406587] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 67, 0]]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [50, 25, 0]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(1, 50), (2, 25)]
*** center 3: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 48, 16]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(2, 48), (3, 16)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [66, 15, 0]]
** centroid: 5, normalized-entropy: 0.6912898694057888, [(1, 66), (2, 15)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [51, 18, 0]]
** centroid: 6, normalized-entropy: 0.828055725379504, [(1, 51), (2, 18)]
*** center 7: selecting labels [1] (freq >= 2) [from [62, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18306905195489526] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18306905195489526, 0.1523036249857396] ***
*** starting iteration: 2; err: [Inf, 0.18306905195489526, 0.1523036249857396] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18306905195489526, 0.1523036249857396, 0.14744262485206128] ***
*** starting iteration: 3; err: [Inf, 0.18306905195489526, 0.1523036249857396, 0.14744262485206128] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18306905195489526, 0.1523036249857396, 0.14744262485206128, 0.1455783264208585] ***
*** finished computation of 7 references, err: [Inf, 0.18306905195489526, 0.1523036249857396, 0.14744262485206128, 0.1455783264208585] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 91, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [50, 30, 0]]
** centroid: 3, normalized-entropy: 0.954434002924965, [(1, 50), (2, 30)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [45, 15, 0]]
** centroid: 4, normalized-entropy: 0.8112781244591328, [(1, 45), (2, 15)]
*** center 5: selecting labels [1] (freq >= 2) [from [75, 1, 0]]
*** center 6: selecting labels [1] (freq >= 2) [from [61, 1, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 39, 17]]
** centroid: 7, normalized-entropy: 0.8856128713989709, [(2, 39), (3, 17)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18896174935996532] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18896174935996532, 0.14839184324815868] ***
*** starting iteration: 2; err: [Inf, 0.18896174935996532, 0.14839184324815868] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18896174935996532, 0.14839184324815868, 0.1432239076392725] ***
*** starting iteration: 3; err: [Inf, 0.18896174935996532, 0.14839184324815868, 0.1432239076392725] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18896174935996532, 0.14839184324815868, 0.1432239076392725, 0.14237431608885526] ***
*** finished computation of 7 references, err: [Inf, 0.18896174935996532, 0.14839184324815868, 0.1432239076392725, 0.14237431608885526] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 65, 15]]
** centroid: 1, normalized-entropy: 0.6962122601251459, [(2, 65), (3, 15)]
*** center 2: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [52, 8, 0]]
** centroid: 3, normalized-entropy: 0.5665095065529052, [(1, 52), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [49, 31, 0]]
** centroid: 4, normalized-entropy: 0.9631672450918831, [(1, 49), (2, 31)]
*** center 5: selecting labels [1] (freq >= 2) [from [63, 1, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [80, 2, 0]]
** centroid: 6, normalized-entropy: 0.16542703399626665, [(1, 80), (2, 2)]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 74, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19728949807398022] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19728949807398022, 0.15733248529210686] ***
*** starting iteration: 2; err: [Inf, 0.19728949807398022, 0.15733248529210686] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19728949807398022, 0.15733248529210686, 0.15184913082793355] ***
*** starting iteration: 3; err: [Inf, 0.19728949807398022, 0.15733248529210686, 0.15184913082793355] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19728949807398022, 0.15733248529210686, 0.15184913082793355, 0.1495911842305213] ***
*** finished computation of 7 references, err: [Inf, 0.19728949807398022, 0.15733248529210686, 0.15184913082793355, 0.1495911842305213] ***
*** center 1: selecting labels [1] (freq >= 2) [from [55, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 63, 14]]
** centroid: 2, normalized-entropy: 0.6840384356390419, [(2, 63), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [61, 3, 0]]
** centroid: 3, normalized-entropy: 0.2729708579140699, [(1, 61), (2, 3)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [64, 35, 0]]
** centroid: 4, normalized-entropy: 0.9371858565132074, [(1, 64), (2, 35)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [34, 35, 0]]
** centroid: 5, normalized-entropy: 0.9998484829291058, [(1, 34), (2, 35)]
*** center 6: selecting labels [1] (freq >= 2) [from [92, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 44, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2094209537729621] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2094209537729621, 0.1497306700036861] ***
*** starting iteration: 2; err: [Inf, 0.2094209537729621, 0.1497306700036861] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2094209537729621, 0.1497306700036861, 0.1447629639841616] ***
*** starting iteration: 3; err: [Inf, 0.2094209537729621, 0.1497306700036861, 0.1447629639841616] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2094209537729621, 0.1497306700036861, 0.1447629639841616, 0.14408831124659627] ***
*** finished computation of 7 references, err: [Inf, 0.2094209537729621, 0.1497306700036861, 0.1447629639841616, 0.14408831124659627] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 46, 17]]
** centroid: 1, normalized-entropy: 0.8412367762002599, [(2, 46), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [72, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [63, 12, 0]]
** centroid: 3, normalized-entropy: 0.634309554640566, [(1, 63), (2, 12)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [43, 34, 0]]
** centroid: 4, normalized-entropy: 0.9901226308935799, [(1, 43), (2, 34)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [49, 31, 0]]
** centroid: 5, normalized-entropy: 0.9631672450918831, [(1, 49), (2, 31)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 67, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18764634415507317] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18764634415507317, 0.15273809470422567] ***
*** starting iteration: 2; err: [Inf, 0.18764634415507317, 0.15273809470422567] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18764634415507317, 0.15273809470422567, 0.15002545871399342] ***
*** starting iteration: 3; err: [Inf, 0.18764634415507317, 0.15273809470422567, 0.15002545871399342] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18764634415507317, 0.15273809470422567, 0.15002545871399342, 0.14905566108971835] ***
*** finished computation of 7 references, err: [Inf, 0.18764634415507317, 0.15273809470422567, 0.15002545871399342, 0.14905566108971835] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 90, 14]]
** centroid: 1, normalized-entropy: 0.5699613760403499, [(2, 90), (3, 14)]
*** center 2: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [38, 0, 0]]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [52, 30, 0]]
** centroid: 4, normalized-entropy: 0.9474351361840305, [(1, 52), (2, 30)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [71, 8, 0]]
** centroid: 5, normalized-entropy: 0.47299536229314826, [(1, 71), (2, 8)]
*** center 6: selecting labels [1] (freq >= 2) [from [52, 0, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [4, 75, 0]]
** centroid: 7, normalized-entropy: 0.2890794597316462, [(1, 4), (2, 75)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19014323138818146] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19014323138818146, 0.15587107988260687] ***
*** starting iteration: 2; err: [Inf, 0.19014323138818146, 0.15587107988260687] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19014323138818146, 0.15587107988260687, 0.15001819890365004] ***
*** starting iteration: 3; err: [Inf, 0.19014323138818146, 0.15587107988260687, 0.15001819890365004] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19014323138818146, 0.15587107988260687, 0.15001819890365004, 0.14804399606958032] ***
*** finished computation of 7 references, err: [Inf, 0.19014323138818146, 0.15587107988260687, 0.15001819890365004, 0.14804399606958032] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [61, 33, 0]]
** centroid: 1, normalized-entropy: 0.9350145588035413, [(1, 61), (2, 33)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [47, 11, 0]]
** centroid: 2, normalized-entropy: 0.7007495497162061, [(1, 47), (2, 11)]
*** center 3: selecting labels [1] (freq >= 2) [from [63, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 66, 21]]
** centroid: 4, normalized-entropy: 0.7973265101474423, [(2, 66), (3, 21)]
*** center 5: selecting labels [1] (freq >= 2) [from [74, 0, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [5, 69, 0]]
** centroid: 6, normalized-entropy: 0.35678001438394347, [(1, 5), (2, 69)]
*** center 7: selecting labels [1] (freq >= 2) [from [50, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20092794788628818] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20092794788628818, 0.14814192775730042] ***
*** starting iteration: 2; err: [Inf, 0.20092794788628818, 0.14814192775730042] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20092794788628818, 0.14814192775730042, 0.1446142066696193] ***
*** starting iteration: 3; err: [Inf, 0.20092794788628818, 0.14814192775730042, 0.1446142066696193] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20092794788628818, 0.14814192775730042, 0.1446142066696193, 0.143974214986898] ***
*** finished computation of 7 references, err: [Inf, 0.20092794788628818, 0.14814192775730042, 0.1446142066696193, 0.143974214986898] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [71, 11, 0]]
** centroid: 1, normalized-entropy: 0.5687008669370753, [(1, 71), (2, 11)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [52, 28, 0]]
** centroid: 2, normalized-entropy: 0.9340680553754911, [(1, 52), (2, 28)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 48, 17]]
** centroid: 3, normalized-entropy: 0.829059069399666, [(2, 48), (3, 17)]
*** center 4: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [36, 36, 0]]
** centroid: 5, normalized-entropy: 1.0, [(1, 36), (2, 36)]
*** center 6: selecting labels [1] (freq >= 2) [from [56, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 66, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20062065546773375] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20062065546773375, 0.15354935637675227] ***
*** starting iteration: 2; err: [Inf, 0.20062065546773375, 0.15354935637675227] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20062065546773375, 0.15354935637675227, 0.14849448043853045] ***
*** starting iteration: 3; err: [Inf, 0.20062065546773375, 0.15354935637675227, 0.14849448043853045] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20062065546773375, 0.15354935637675227, 0.14849448043853045, 0.14742071504704654] ***
*** finished computation of 7 references, err: [Inf, 0.20062065546773375, 0.15354935637675227, 0.14849448043853045, 0.14742071504704654] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [3, 70, 0]]
** centroid: 1, normalized-entropy: 0.24729443986205674, [(1, 3), (2, 70)]
*** center 2: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [43, 8, 0]]
** centroid: 3, normalized-entropy: 0.6267511370265896, [(1, 43), (2, 8)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [89, 16, 0]]
** centroid: 4, normalized-entropy: 0.6157667047517474, [(1, 89), (2, 16)]
*** center 5: selecting labels [1] (freq >= 2) [from [84, 1, 0]]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [4, 53, 0]]
** centroid: 6, normalized-entropy: 0.36657801255334593, [(1, 4), (2, 53)]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 39, 15]]
** centroid: 7, normalized-entropy: 0.8524051786494784, [(2, 39), (3, 15)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.19414527007192373] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19414527007192373, 0.15013462622463702] ***
*** starting iteration: 2; err: [Inf, 0.19414527007192373, 0.15013462622463702] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19414527007192373, 0.15013462622463702, 0.14662276673689484] ***
*** starting iteration: 3; err: [Inf, 0.19414527007192373, 0.15013462622463702, 0.14662276673689484] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.19414527007192373, 0.15013462622463702, 0.14662276673689484, 0.1460529039427638] ***
*** finished computation of 7 references, err: [Inf, 0.19414527007192373, 0.15013462622463702, 0.14662276673689484, 0.1460529039427638] ***
*** center 1: selecting labels [1] (freq >= 2) [from [91, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 47, 17]]
** centroid: 2, normalized-entropy: 0.8351164948421137, [(2, 47), (3, 17)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [66, 9, 0]]
** centroid: 3, normalized-entropy: 0.5293608652873645, [(1, 66), (2, 9)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [56, 24, 0]]
** centroid: 4, normalized-entropy: 0.8812908992306927, [(1, 56), (2, 24)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [26, 42, 0]]
** centroid: 5, normalized-entropy: 0.9596868937742168, [(1, 26), (2, 42)]
*** center 6: selecting labels [1] (freq >= 2) [from [66, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 56, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18620206559821964] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18620206559821964, 0.1497489330470562] ***
*** starting iteration: 2; err: [Inf, 0.18620206559821964, 0.1497489330470562] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18620206559821964, 0.1497489330470562, 0.1464991913381964] ***
*** starting iteration: 3; err: [Inf, 0.18620206559821964, 0.1497489330470562, 0.1464991913381964] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18620206559821964, 0.1497489330470562, 0.1464991913381964, 0.14533013723511248] ***
*** finished computation of 7 references, err: [Inf, 0.18620206559821964, 0.1497489330470562, 0.1464991913381964, 0.14533013723511248] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 65, 17]]
** centroid: 1, normalized-entropy: 0.7363230272021651, [(2, 65), (3, 17)]
*** center 2: selecting labels [1] (freq >= 2) [from [73, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [47, 8, 0]]
** centroid: 3, normalized-entropy: 0.5983474220910422, [(1, 47), (2, 8)]
*** center 4: selecting labels [1] (freq >= 2) [from [66, 1, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [56, 13, 0]]
** centroid: 5, normalized-entropy: 0.698124573139618, [(1, 56), (2, 13)]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 75, 0]]
*** center 7: selecting labels [1, 2] (freq >= 2) [from [40, 39, 0]]
** centroid: 7, normalized-entropy: 0.9998844148717589, [(1, 40), (2, 39)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1870855065844953] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1870855065844953, 0.1507888417877257] ***
*** starting iteration: 2; err: [Inf, 0.1870855065844953, 0.1507888417877257] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1870855065844953, 0.1507888417877257, 0.1479270173422992] ***
*** starting iteration: 3; err: [Inf, 0.1870855065844953, 0.1507888417877257, 0.1479270173422992] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1870855065844953, 0.1507888417877257, 0.1479270173422992, 0.14699478485481812] ***
*** finished computation of 7 references, err: [Inf, 0.1870855065844953, 0.1507888417877257, 0.1479270173422992, 0.14699478485481812] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 76, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [77, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [55, 10, 0]]
** centroid: 3, normalized-entropy: 0.6193821946787638, [(1, 55), (2, 10)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [93, 4, 0]]
** centroid: 4, normalized-entropy: 0.24793583772272637, [(1, 93), (2, 4)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [80, 7, 0]]
** centroid: 5, normalized-entropy: 0.40379715049939235, [(1, 80), (2, 7)]
*** center 6: selecting labels [2] (freq >= 2) [from [1, 59, 0]]
*** center 7: selecting labels [2, 3] (freq >= 2) [from [0, 21, 17]]
** centroid: 7, normalized-entropy: 0.9919924034538556, [(2, 21), (3, 17)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.1803221053183079] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1803221053183079, 0.15189059913903474] ***
*** starting iteration: 2; err: [Inf, 0.1803221053183079, 0.15189059913903474] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1803221053183079, 0.15189059913903474, 0.14879527236148715] ***
*** starting iteration: 3; err: [Inf, 0.1803221053183079, 0.15189059913903474, 0.14879527236148715] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.1803221053183079, 0.15189059913903474, 0.14879527236148715, 0.14813888524472713] ***
*** finished computation of 7 references, err: [Inf, 0.1803221053183079, 0.15189059913903474, 0.14879527236148715, 0.14813888524472713] ***
*** center 1: selecting labels [1] (freq >= 2) [from [97, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 60, 14]]
** centroid: 2, normalized-entropy: 0.699772221773307, [(2, 60), (3, 14)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [45, 4, 0]]
** centroid: 3, normalized-entropy: 0.4079059801389762, [(1, 45), (2, 4)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [54, 12, 0]]
** centroid: 4, normalized-entropy: 0.6840384356390419, [(1, 54), (2, 12)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [22, 53, 0]]
** centroid: 5, normalized-entropy: 0.8729882944709463, [(1, 22), (2, 53)]
*** center 6: selecting labels [1, 2] (freq >= 2) [from [3, 64, 0]]
** centroid: 6, normalized-entropy: 0.26377743669413856, [(1, 3), (2, 64)]
*** center 7: selecting labels [1] (freq >= 2) [from [71, 1, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.18060654969327153] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18060654969327153, 0.14916749365394935] ***
*** starting iteration: 2; err: [Inf, 0.18060654969327153, 0.14916749365394935] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18060654969327153, 0.14916749365394935, 0.14571650998480618] ***
*** starting iteration: 3; err: [Inf, 0.18060654969327153, 0.14916749365394935, 0.14571650998480618] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.18060654969327153, 0.14916749365394935, 0.14571650998480618, 0.1445832888074219] ***
*** finished computation of 7 references, err: [Inf, 0.18060654969327153, 0.14916749365394935, 0.14571650998480618, 0.1445832888074219] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [70, 13, 0]]
** centroid: 1, normalized-entropy: 0.6261776539736496, [(1, 70), (2, 13)]
*** center 2: selecting labels [1, 2] (freq >= 2) [from [45, 15, 0]]
** centroid: 2, normalized-entropy: 0.8112781244591328, [(1, 45), (2, 15)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 37, 18]]
** centroid: 3, normalized-entropy: 0.9121156307204275, [(2, 37), (3, 18)]
*** center 4: selecting labels [1] (freq >= 2) [from [79, 0, 0]]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [26, 50, 0]]
** centroid: 5, normalized-entropy: 0.9268190639645774, [(1, 26), (2, 50)]
*** center 6: selecting labels [1] (freq >= 2) [from [75, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [1, 71, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.17621844063140452] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17621844063140452, 0.15233047308959066] ***
*** starting iteration: 2; err: [Inf, 0.17621844063140452, 0.15233047308959066] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17621844063140452, 0.15233047308959066, 0.1492296809507534] ***
*** starting iteration: 3; err: [Inf, 0.17621844063140452, 0.15233047308959066, 0.1492296809507534] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.17621844063140452, 0.15233047308959066, 0.1492296809507534, 0.1487506784275174] ***
*** finished computation of 7 references, err: [Inf, 0.17621844063140452, 0.15233047308959066, 0.1492296809507534, 0.1487506784275174] ***
*** center 1: selecting labels [1] (freq >= 2) [from [101, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 30, 15]]
** centroid: 2, normalized-entropy: 0.9182958340544894, [(2, 30), (3, 15)]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [38, 20, 0]]
** centroid: 3, normalized-entropy: 0.9293636260137188, [(1, 38), (2, 20)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [60, 13, 0]]
** centroid: 4, normalized-entropy: 0.6758635715876156, [(1, 60), (2, 13)]
*** center 5: selecting labels [1, 2] (freq >= 2) [from [29, 59, 0]]
** centroid: 5, normalized-entropy: 0.9144612916935675, [(1, 29), (2, 59)]
*** center 6: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 75, 0]]
finished with 11 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.20606951979920268] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20606951979920268, 0.1511678024251014] ***
*** starting iteration: 2; err: [Inf, 0.20606951979920268, 0.1511678024251014] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20606951979920268, 0.1511678024251014, 0.14615643075760454] ***
*** starting iteration: 3; err: [Inf, 0.20606951979920268, 0.1511678024251014, 0.14615643075760454] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.20606951979920268, 0.1511678024251014, 0.14615643075760454, 0.14531567673943938] ***
*** finished computation of 7 references, err: [Inf, 0.20606951979920268, 0.1511678024251014, 0.14615643075760454, 0.14531567673943938] ***
*** center 1: selecting labels [1, 2] (freq >= 2) [from [20, 55, 0]]
** centroid: 1, normalized-entropy: 0.8366407419411671, [(1, 20), (2, 55)]
*** center 2: selecting labels [1] (freq >= 2) [from [59, 0, 0]]
*** center 3: selecting labels [1, 2] (freq >= 2) [from [37, 25, 0]]
** centroid: 3, normalized-entropy: 0.9728063221185002, [(1, 37), (2, 25)]
*** center 4: selecting labels [1, 2] (freq >= 2) [from [39, 37, 0]]
** centroid: 4, normalized-entropy: 0.9995003941817588, [(1, 39), (2, 37)]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 73, 13]]
** centroid: 5, normalized-entropy: 0.6127425554686624, [(2, 73), (3, 13)]
*** center 6: selecting labels [1] (freq >= 2) [from [82, 0, 0]]
*** center 7: selecting labels [1] (freq >= 2) [from [60, 0, 0]]
finished with 11 centroids; started with 7
[ Info: ("class distribution: ", Dict(2 => 373,3 => 32,1 => 595), Dict(2 => 389,3 => 42,1 => 569))
[ Info: ===== scores for single classifier: {"micro_f1":0.918,"precision":0.918,"recall":0.918,"macro_recall":0.9381376849898272,"macro_f1":0.9047101655010055,"accuracy":0.918,"class_f1":{"2":0.8918205804749341,"3":0.8842105263157896,"1":0.938099389712293},"class_precision":{"2":0.9159891598915989,"3":0.7924528301886793,"1":0.9307958477508651},"class_recall":{"2":0.8688946015424165,"3":1.0,"1":0.945518453427065}}
[ Info: ===== scores for 1: {"micro_f1":0.96,"precision":0.96,"recall":0.96,"macro_recall":0.9667767173583991,"macro_f1":0.9536940649172269,"accuracy":0.96,"class_f1":{"2":0.9499999999999998,"3":0.9425287356321839,"1":0.968553459119497},"class_precision":{"2":0.9245742092457421,"3":0.9111111111111111,"1":0.9908088235294118},"class_recall":{"2":0.9768637532133676,"3":0.9761904761904762,"1":0.9472759226713533}}
[ Info: ===== scores for 5: {"micro_f1":0.961,"precision":0.961,"recall":0.961,"macro_recall":0.9687179151783539,"macro_f1":0.9545079901334871,"accuracy":0.961,"class_f1":{"2":0.9517923362175525,"3":0.9425287356321839,"1":0.9692028985507246},"class_precision":{"2":0.9166666666666666,"3":0.9111111111111111,"1":1.0},"class_recall":{"2":0.9897172236503856,"3":0.9761904761904762,"1":0.9402460456942003}}
[ Info: ===== scores for 7: {"micro_f1":0.962,"precision":0.962,"recall":0.962,"macro_recall":0.9763833481671568,"macro_f1":0.955603189780108,"accuracy":0.962,"class_f1":{"2":0.9528535980148883,"3":0.9438202247191011,"1":0.9701357466063348},"class_precision":{"2":0.920863309352518,"3":0.8936170212765957,"1":1.0},"class_recall":{"2":0.987146529562982,"3":1.0,"1":0.9420035149384886}}
[ Info: ===== scores for 9: {"micro_f1":0.963,"precision":0.963,"recall":0.963,"macro_recall":0.9769691712485863,"macro_f1":0.9563081331918717,"accuracy":0.963,"class_f1":{"2":0.9540372670807453,"3":0.9438202247191011,"1":0.9710669077757685},"class_precision":{"2":0.9230769230769231,"3":0.8936170212765957,"1":1.0},"class_recall":{"2":0.987146529562982,"3":1.0,"1":0.9437609841827768}}
[ Info: ===== scores for 11: {"micro_f1":0.962,"precision":0.962,"recall":0.962,"macro_recall":0.9763833481671568,"macro_f1":0.955603189780108,"accuracy":0.962,"class_f1":{"2":0.9528535980148883,"3":0.9438202247191011,"1":0.9701357466063348},"class_precision":{"2":0.920863309352518,"3":0.8936170212765957,"1":1.0},"class_recall":{"2":0.987146529562982,"3":1.0,"1":0.9420035149384886}}
(score = 0.957, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.957, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.96, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.96, k = 1, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.954, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.954, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.958, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.958, k = 3, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.959, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.959, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.961, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.961, k = 5, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.956, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.956, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l1_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l1_distance)}(SimilaritySearch.l1_distance))
(score = 0.962, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.most_frequent_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
(score = 0.962, k = 7, kernel = KCenters.direct_kernel, dist = SimilaritySearch.l2_distance, summary = KCenters.mean_label, kernel_fun = KCenters.var"#fun#72"{typeof(l2_distance)}(SimilaritySearch.l2_distance))
[ Info: config: {"score":0.962,"k":7,"kernel":"direct_kernel","dist":"l2_distance","summary":"most_frequent_label","kernel_fun":"fun"}
[ Info: ===== scores optimized! B: {"micro_f1":0.962,"precision":0.962,"recall":0.962,"macro_recall":0.9763833481671568,"macro_f1":0.955603189780108,"accuracy":0.962,"class_f1":{"2":0.9528535980148883,"3":0.9438202247191011,"1":0.9701357466063348},"class_precision":{"2":0.920863309352518,"3":0.8936170212765957,"1":1.0},"class_recall":{"2":0.987146529562982,"3":1.0,"1":0.9420035149384886}}
Test Summary: | Pass  Total
AKNC          |    8      8
[246, 4, 1, 1, 2, 3, 2, 3, 4, 1, 6, 1, 4, 3, 1, 21, 9, 1, 9, 1, 1, 9, 4, 6, 2, 3, 7, 2, 9, 33, 15, 27, 3, 9, 2, 2, 5, 1, 12, 7, 1, 15, 3, 8, 78, 2, 16, 1, 8, 1, 4, 30, 118, 13, 24, 41, 9, 2, 35, 7, 7, 71, 8, 5, 7, 3, 44, 24, 11, 19, 17, 1, 31, 1, 6, 1, 99, 16, 9, 20, 2, 9, 5, 9, 7, 5, 28, 5, 5, 50, 18, 8, 7, 8, 238, 9, 11, 4, 3, 19, 45, 8, 4, 7, 187, 15, 27, 174, 2, 16, 12, 46, 13, 1, 148, 40, 104, 58, 3, 91, 6, 16, 190, 29, 10, 23, 95, 13, 2, 1, 18, 35, 15, 20, 38, 14, 22, 167, 18, 8, 22, 17, 64, 11, 17, 8, 1, 127, 1, 27, 138, 9, 9, 10, 203, 4, 14, 19, 131, 7, 57, 9, 14, 9, 28, 13, 8, 13, 124, 17, 7, 10, 26, 66, 22, 8, 55, 51, 2, 57, 39, 6, 3, 72, 7, 86, 4, 6, 38, 50, 45, 3, 9, 16, 21, 72, 10, 100, 5, 12, 6, 12, 108, 127, 14, 69, 25, 44, 33, 4, 23, 14, 45, 5, 97, 26, 13, 35, 76, 11, 1, 29, 45, 8, 61, 5, 73, 1, 21, 102, 4, 3, 5, 4, 17, 14, 23, 10, 1254, 19, 5, 6, 82, 56, 17, 5, 12, 98, 60, 20, 24, 28, 81, 12, 18, 36, 4, 26, 4, 35, 27, 36, 14, 2, 10, 3, 22, 6, 97, 10, 6, 4, 68, 48, 2, 4, 6, 7, 12, 21, 13, 19, 20, 6, 199, 23, 48, 43, 17, 9, 14, 52, 81, 94, 21, 25, 25, 190, 8, 45]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6639999999999998, speedup = 0.41321940320613626, eval_ratio = 0.087395)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":null,"recall":0.3984375000000001,"f1":null,"seconds":0.00018054060637950897,"exhaustive_search_seconds":0.0003587193787097931,"evaluations":519.6015625,"distances_sum":1764.3114616749767}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5477430555555556,"recall":0.5477430555555556,"f1":null,"seconds":0.0002739429473876953,"exhaustive_search_seconds":0.0003587193787097931,"evaluations":650.7421875,"distances_sum":1707.3813302063925}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.6588541666666665,"recall":0.6588541666666665,"f1":null,"seconds":0.0003581773489713669,"exhaustive_search_seconds":0.0003587193787097931,"evaluations":769.0703125,"distances_sum":1652.486906600879}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7404513888888882,"recall":0.7404513888888882,"f1":0.7404513888888882,"seconds":0.0005946904420852661,"exhaustive_search_seconds":0.0003587193787097931,"evaluations":884.9140625,"distances_sum":1616.3083036988678}
KCenters.DeloneInvIndex> reached performance {"precision":0.8055555555555548,"recall":0.8055555555555548,"f1":0.8055555555555548,"seconds":0.0005230717360973358,"exhaustive_search_seconds":0.0003587193787097931,"evaluations":1013.4140625,"distances_sum":1597.7389629187594}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.779, speedup = 1.1417693412860812, eval_ratio = 0.104504)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
    Testing KCenters tests passed 
